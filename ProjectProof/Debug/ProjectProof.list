
ProjectProof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a5c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b4  08008bec  08008bec  00009bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095a0  080095a0  0000b080  2**0
                  CONTENTS
  4 .ARM          00000008  080095a0  080095a0  0000a5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095a8  080095a8  0000b080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095a8  080095a8  0000a5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080095ac  080095ac  0000a5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  080095b0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000077c  20000080  08009630  0000b080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007fc  08009630  0000b7fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001659d  00000000  00000000  0000b0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031a0  00000000  00000000  0002164d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  000247f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ebc  00000000  00000000  00025b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029cf0  00000000  00000000  000269cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000181e0  00000000  00000000  000506bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001010eb  00000000  00000000  0006889c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00169987  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059cc  00000000  00000000  001699cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0016f398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008bd4 	.word	0x08008bd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08008bd4 	.word	0x08008bd4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <keypad_debounce>:

#include "main.h"


static uint8_t keypad_debounce(uint16_t GPIO_Pin)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
	static uint16_t last_pressed = 0xFFFF;
	static uint32_t last_tick = 0;

	if (last_pressed == GPIO_Pin) {
 800057a:	4b0e      	ldr	r3, [pc, #56]	@ (80005b4 <keypad_debounce+0x44>)
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	88fa      	ldrh	r2, [r7, #6]
 8000580:	429a      	cmp	r2, r3
 8000582:	d109      	bne.n	8000598 <keypad_debounce+0x28>
		if (HAL_GetTick() < (last_tick + 200)) {
 8000584:	f001 fadc 	bl	8001b40 <HAL_GetTick>
 8000588:	4602      	mov	r2, r0
 800058a:	4b0b      	ldr	r3, [pc, #44]	@ (80005b8 <keypad_debounce+0x48>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	33c8      	adds	r3, #200	@ 0xc8
 8000590:	429a      	cmp	r2, r3
 8000592:	d201      	bcs.n	8000598 <keypad_debounce+0x28>
			return 0;
 8000594:	2300      	movs	r3, #0
 8000596:	e008      	b.n	80005aa <keypad_debounce+0x3a>
		}
	}
	last_pressed = GPIO_Pin;
 8000598:	4a06      	ldr	r2, [pc, #24]	@ (80005b4 <keypad_debounce+0x44>)
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	8013      	strh	r3, [r2, #0]
	last_tick = HAL_GetTick();
 800059e:	f001 facf 	bl	8001b40 <HAL_GetTick>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a04      	ldr	r2, [pc, #16]	@ (80005b8 <keypad_debounce+0x48>)
 80005a6:	6013      	str	r3, [r2, #0]

	return 1;
 80005a8:	2301      	movs	r3, #1
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000010 	.word	0x20000010
 80005b8:	2000009c 	.word	0x2000009c

080005bc <keypad_scan_row>:

uint8_t keypad_scan_row(GPIO_TypeDef *COLUMNx_GPIO_Port, uint16_t COLUMNx_Pin)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	460b      	mov	r3, r1
 80005c6:	807b      	strh	r3, [r7, #2]
	uint8_t row_pressed = 0xFF;
 80005c8:	23ff      	movs	r3, #255	@ 0xff
 80005ca:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, GPIO_PIN_RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d6:	f003 fad3 	bl	8003b80 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLUMNx_GPIO_Port, COLUMNx_Pin) == 0) {
 80005da:	887b      	ldrh	r3, [r7, #2]
 80005dc:	4619      	mov	r1, r3
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f003 fab6 	bl	8003b50 <HAL_GPIO_ReadPin>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d102      	bne.n	80005f0 <keypad_scan_row+0x34>
		row_pressed =  1;
 80005ea:	2301      	movs	r3, #1
 80005ec:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 80005ee:	e030      	b.n	8000652 <keypad_scan_row+0x96>
	}
	HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2108      	movs	r1, #8
 80005f4:	4824      	ldr	r0, [pc, #144]	@ (8000688 <keypad_scan_row+0xcc>)
 80005f6:	f003 fac3 	bl	8003b80 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLUMNx_GPIO_Port, COLUMNx_Pin) == 0) {
 80005fa:	887b      	ldrh	r3, [r7, #2]
 80005fc:	4619      	mov	r1, r3
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f003 faa6 	bl	8003b50 <HAL_GPIO_ReadPin>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d102      	bne.n	8000610 <keypad_scan_row+0x54>
		row_pressed =  2;
 800060a:	2302      	movs	r3, #2
 800060c:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 800060e:	e020      	b.n	8000652 <keypad_scan_row+0x96>
	}
	HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2120      	movs	r1, #32
 8000614:	481c      	ldr	r0, [pc, #112]	@ (8000688 <keypad_scan_row+0xcc>)
 8000616:	f003 fab3 	bl	8003b80 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLUMNx_GPIO_Port, COLUMNx_Pin) == 0) {
 800061a:	887b      	ldrh	r3, [r7, #2]
 800061c:	4619      	mov	r1, r3
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f003 fa96 	bl	8003b50 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d102      	bne.n	8000630 <keypad_scan_row+0x74>
		row_pressed =  3;
 800062a:	2303      	movs	r3, #3
 800062c:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 800062e:	e010      	b.n	8000652 <keypad_scan_row+0x96>
	}
	HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	2110      	movs	r1, #16
 8000634:	4814      	ldr	r0, [pc, #80]	@ (8000688 <keypad_scan_row+0xcc>)
 8000636:	f003 faa3 	bl	8003b80 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLUMNx_GPIO_Port, COLUMNx_Pin) == 0) {
 800063a:	887b      	ldrh	r3, [r7, #2]
 800063c:	4619      	mov	r1, r3
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f003 fa86 	bl	8003b50 <HAL_GPIO_ReadPin>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d102      	bne.n	8000650 <keypad_scan_row+0x94>
		row_pressed =  4;
 800064a:	2304      	movs	r3, #4
 800064c:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 800064e:	e000      	b.n	8000652 <keypad_scan_row+0x96>
	}
row_scan_end:
 8000650:	bf00      	nop
	HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, GPIO_PIN_SET);
 8000652:	2201      	movs	r2, #1
 8000654:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000658:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065c:	f003 fa90 	bl	8003b80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	2108      	movs	r1, #8
 8000664:	4808      	ldr	r0, [pc, #32]	@ (8000688 <keypad_scan_row+0xcc>)
 8000666:	f003 fa8b 	bl	8003b80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, GPIO_PIN_SET);
 800066a:	2201      	movs	r2, #1
 800066c:	2120      	movs	r1, #32
 800066e:	4806      	ldr	r0, [pc, #24]	@ (8000688 <keypad_scan_row+0xcc>)
 8000670:	f003 fa86 	bl	8003b80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	2110      	movs	r1, #16
 8000678:	4803      	ldr	r0, [pc, #12]	@ (8000688 <keypad_scan_row+0xcc>)
 800067a:	f003 fa81 	bl	8003b80 <HAL_GPIO_WritePin>
	return row_pressed; // not detected
 800067e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	48000400 	.word	0x48000400

0800068c <keypad_scan>:
		{'7', '8', '9', 'C'},
		{'*', '0', '#', 'D'},
};

uint8_t keypad_scan(uint16_t GPIO_Pin)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	80fb      	strh	r3, [r7, #6]
	uint8_t key_pressed = 0xFF;
 8000696:	23ff      	movs	r3, #255	@ 0xff
 8000698:	73fb      	strb	r3, [r7, #15]

	if (keypad_debounce(GPIO_Pin) == 0) {
 800069a:	88fb      	ldrh	r3, [r7, #6]
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff ff67 	bl	8000570 <keypad_debounce>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d101      	bne.n	80006ac <keypad_scan+0x20>
		return key_pressed;
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	e052      	b.n	8000752 <keypad_scan+0xc6>
	}
	uint8_t row = 0xFF;
 80006ac:	23ff      	movs	r3, #255	@ 0xff
 80006ae:	73bb      	strb	r3, [r7, #14]
	switch (GPIO_Pin) {
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006b6:	d00e      	beq.n	80006d6 <keypad_scan+0x4a>
 80006b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006bc:	dc47      	bgt.n	800074e <keypad_scan+0xc2>
 80006be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80006c2:	d026      	beq.n	8000712 <keypad_scan+0x86>
 80006c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80006c8:	dc41      	bgt.n	800074e <keypad_scan+0xc2>
 80006ca:	2b80      	cmp	r3, #128	@ 0x80
 80006cc:	d031      	beq.n	8000732 <keypad_scan+0xa6>
 80006ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80006d2:	d00e      	beq.n	80006f2 <keypad_scan+0x66>
	case COL_4_Pin:
			row = keypad_scan_row(COL_4_GPIO_Port, COL_4_Pin);
			key_pressed = keypad_chars[row - 1][4 - 1];
			break;
	default:
		break;
 80006d4:	e03b      	b.n	800074e <keypad_scan+0xc2>
		row = keypad_scan_row(COL_1_GPIO_Port, COL_1_Pin);
 80006d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006da:	4820      	ldr	r0, [pc, #128]	@ (800075c <keypad_scan+0xd0>)
 80006dc:	f7ff ff6e 	bl	80005bc <keypad_scan_row>
 80006e0:	4603      	mov	r3, r0
 80006e2:	73bb      	strb	r3, [r7, #14]
		key_pressed = keypad_chars[row - 1][1 - 1];
 80006e4:	7bbb      	ldrb	r3, [r7, #14]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000760 <keypad_scan+0xd4>)
 80006ea:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80006ee:	73fb      	strb	r3, [r7, #15]
		break;
 80006f0:	e02e      	b.n	8000750 <keypad_scan+0xc4>
		row = keypad_scan_row(COL_2_GPIO_Port, COL_2_Pin);
 80006f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006fa:	f7ff ff5f 	bl	80005bc <keypad_scan_row>
 80006fe:	4603      	mov	r3, r0
 8000700:	73bb      	strb	r3, [r7, #14]
		key_pressed = keypad_chars[row - 1][2 - 1];
 8000702:	7bbb      	ldrb	r3, [r7, #14]
 8000704:	3b01      	subs	r3, #1
 8000706:	4a16      	ldr	r2, [pc, #88]	@ (8000760 <keypad_scan+0xd4>)
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	4413      	add	r3, r2
 800070c:	785b      	ldrb	r3, [r3, #1]
 800070e:	73fb      	strb	r3, [r7, #15]
		break;
 8000710:	e01e      	b.n	8000750 <keypad_scan+0xc4>
			row = keypad_scan_row(COL_3_GPIO_Port, COL_3_Pin);
 8000712:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000716:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800071a:	f7ff ff4f 	bl	80005bc <keypad_scan_row>
 800071e:	4603      	mov	r3, r0
 8000720:	73bb      	strb	r3, [r7, #14]
			key_pressed = keypad_chars[row - 1][3 - 1];
 8000722:	7bbb      	ldrb	r3, [r7, #14]
 8000724:	3b01      	subs	r3, #1
 8000726:	4a0e      	ldr	r2, [pc, #56]	@ (8000760 <keypad_scan+0xd4>)
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	4413      	add	r3, r2
 800072c:	789b      	ldrb	r3, [r3, #2]
 800072e:	73fb      	strb	r3, [r7, #15]
			break;
 8000730:	e00e      	b.n	8000750 <keypad_scan+0xc4>
			row = keypad_scan_row(COL_4_GPIO_Port, COL_4_Pin);
 8000732:	2180      	movs	r1, #128	@ 0x80
 8000734:	480b      	ldr	r0, [pc, #44]	@ (8000764 <keypad_scan+0xd8>)
 8000736:	f7ff ff41 	bl	80005bc <keypad_scan_row>
 800073a:	4603      	mov	r3, r0
 800073c:	73bb      	strb	r3, [r7, #14]
			key_pressed = keypad_chars[row - 1][4 - 1];
 800073e:	7bbb      	ldrb	r3, [r7, #14]
 8000740:	3b01      	subs	r3, #1
 8000742:	4a07      	ldr	r2, [pc, #28]	@ (8000760 <keypad_scan+0xd4>)
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	4413      	add	r3, r2
 8000748:	78db      	ldrb	r3, [r3, #3]
 800074a:	73fb      	strb	r3, [r7, #15]
			break;
 800074c:	e000      	b.n	8000750 <keypad_scan+0xc4>
		break;
 800074e:	bf00      	nop
	}
	return key_pressed;
 8000750:	7bfb      	ldrb	r3, [r7, #15]
}
 8000752:	4618      	mov	r0, r3
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	48000400 	.word	0x48000400
 8000760:	20000000 	.word	0x20000000
 8000764:	48000800 	.word	0x48000800

08000768 <_write>:
 * By using this function, any call to `printf` will output the message
 * to the UART interface, which can be monitored with a serial console.
 */

int _write(int file, char *ptr, int len)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
  // to using printf
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	b29a      	uxth	r2, r3
 8000778:	230a      	movs	r3, #10
 800077a:	68b9      	ldr	r1, [r7, #8]
 800077c:	4803      	ldr	r0, [pc, #12]	@ (800078c <_write+0x24>)
 800077e:	f005 fa6d 	bl	8005c5c <HAL_UART_Transmit>
  return len;
 8000782:	687b      	ldr	r3, [r7, #4]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200001bc 	.word	0x200001bc

08000790 <HAL_UART_RxCpltCallback>:

//* USART2 Callback ------------------------------------------------------------*/
/* UART Callback: Receives data and processes it */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	@ 0x30
 8000794:	af02      	add	r7, sp, #8
 8000796:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a31      	ldr	r2, [pc, #196]	@ (8000864 <HAL_UART_RxCpltCallback+0xd4>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d15c      	bne.n	800085c <HAL_UART_RxCpltCallback+0xcc>
        // Store digits received from USART2 into the ring buffer
        if (usart2_data >= '0' && usart2_data <= '9') {
 80007a2:	4b31      	ldr	r3, [pc, #196]	@ (8000868 <HAL_UART_RxCpltCallback+0xd8>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b2f      	cmp	r3, #47	@ 0x2f
 80007a8:	d909      	bls.n	80007be <HAL_UART_RxCpltCallback+0x2e>
 80007aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000868 <HAL_UART_RxCpltCallback+0xd8>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b39      	cmp	r3, #57	@ 0x39
 80007b0:	d805      	bhi.n	80007be <HAL_UART_RxCpltCallback+0x2e>
            ring_buffer_write(&usart2_rb, usart2_data);
 80007b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000868 <HAL_UART_RxCpltCallback+0xd8>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	4619      	mov	r1, r3
 80007b8:	482c      	ldr	r0, [pc, #176]	@ (800086c <HAL_UART_RxCpltCallback+0xdc>)
 80007ba:	f000 fe36 	bl	800142a <ring_buffer_write>
        }

        // Check if the buffer has 6 digits and process the input
        if (ring_buffer_size(&usart2_rb) >= 6) {
 80007be:	482b      	ldr	r0, [pc, #172]	@ (800086c <HAL_UART_RxCpltCallback+0xdc>)
 80007c0:	f000 fe07 	bl	80013d2 <ring_buffer_size>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b05      	cmp	r3, #5
 80007c8:	d93a      	bls.n	8000840 <HAL_UART_RxCpltCallback+0xb0>
            char usart_str[7];
            for (int i = 0; i < 6; i++) {
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80007ce:	e00a      	b.n	80007e6 <HAL_UART_RxCpltCallback+0x56>
                ring_buffer_read(&usart2_rb, (uint8_t *)&usart_str[i]);
 80007d0:	f107 021c 	add.w	r2, r7, #28
 80007d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007d6:	4413      	add	r3, r2
 80007d8:	4619      	mov	r1, r3
 80007da:	4824      	ldr	r0, [pc, #144]	@ (800086c <HAL_UART_RxCpltCallback+0xdc>)
 80007dc:	f000 fe63 	bl	80014a6 <ring_buffer_read>
            for (int i = 0; i < 6; i++) {
 80007e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007e2:	3301      	adds	r3, #1
 80007e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80007e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007e8:	2b05      	cmp	r3, #5
 80007ea:	ddf1      	ble.n	80007d0 <HAL_UART_RxCpltCallback+0x40>
            }
            //usart_str[6] = '\0';
            usart_input_value = strtol(usart_str, NULL, 10);
 80007ec:	f107 031c 	add.w	r3, r7, #28
 80007f0:	220a      	movs	r2, #10
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f007 f87f 	bl	80078f8 <strtol>
 80007fa:	4603      	mov	r3, r0
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000870 <HAL_UART_RxCpltCallback+0xe0>)
 8000800:	601a      	str	r2, [r3, #0]
            printf("USART Input: %lu\r\n", usart_input_value);
 8000802:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <HAL_UART_RxCpltCallback+0xe0>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4619      	mov	r1, r3
 8000808:	481a      	ldr	r0, [pc, #104]	@ (8000874 <HAL_UART_RxCpltCallback+0xe4>)
 800080a:	f007 f941 	bl	8007a90 <iprintf>

            // Display value on OLED
            ssd1306_Fill(Black);
 800080e:	2000      	movs	r0, #0
 8000810:	f006 fe64 	bl	80074dc <ssd1306_Fill>
            ssd1306_SetCursor(10, 30);
 8000814:	211e      	movs	r1, #30
 8000816:	200a      	movs	r0, #10
 8000818:	f006 ffaa 	bl	8007770 <ssd1306_SetCursor>
            char usart_oled_str[20];
            sprintf(usart_oled_str, "USART: %lu", usart_input_value);
 800081c:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <HAL_UART_RxCpltCallback+0xe0>)
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	4914      	ldr	r1, [pc, #80]	@ (8000878 <HAL_UART_RxCpltCallback+0xe8>)
 8000826:	4618      	mov	r0, r3
 8000828:	f007 f9a2 	bl	8007b70 <siprintf>
            ssd1306_WriteString(usart_oled_str, Font_6x8, White);
 800082c:	4b13      	ldr	r3, [pc, #76]	@ (800087c <HAL_UART_RxCpltCallback+0xec>)
 800082e:	f107 0008 	add.w	r0, r7, #8
 8000832:	2201      	movs	r2, #1
 8000834:	9200      	str	r2, [sp, #0]
 8000836:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000838:	f006 ff74 	bl	8007724 <ssd1306_WriteString>
            ssd1306_UpdateScreen();
 800083c:	f006 fe66 	bl	800750c <ssd1306_UpdateScreen>

        }

        if (usart_input_value == "123"){
 8000840:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <HAL_UART_RxCpltCallback+0xe0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <HAL_UART_RxCpltCallback+0xf0>)
 8000848:	429a      	cmp	r2, r3
 800084a:	d102      	bne.n	8000852 <HAL_UART_RxCpltCallback+0xc2>
        	passwordCorrect = 1 ;
 800084c:	4b0d      	ldr	r3, [pc, #52]	@ (8000884 <HAL_UART_RxCpltCallback+0xf4>)
 800084e:	2201      	movs	r2, #1
 8000850:	701a      	strb	r2, [r3, #0]
        }


        HAL_UART_Receive_IT(&huart2, &usart2_data, 1);
 8000852:	2201      	movs	r2, #1
 8000854:	4904      	ldr	r1, [pc, #16]	@ (8000868 <HAL_UART_RxCpltCallback+0xd8>)
 8000856:	480c      	ldr	r0, [pc, #48]	@ (8000888 <HAL_UART_RxCpltCallback+0xf8>)
 8000858:	f005 fa8a 	bl	8005d70 <HAL_UART_Receive_IT>
    }
}
 800085c:	bf00      	nop
 800085e:	3728      	adds	r7, #40	@ 0x28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40004400 	.word	0x40004400
 8000868:	20000014 	.word	0x20000014
 800086c:	2000028c 	.word	0x2000028c
 8000870:	20000294 	.word	0x20000294
 8000874:	08008bec 	.word	0x08008bec
 8000878:	08008c00 	.word	0x08008c00
 800087c:	08009460 	.word	0x08009460
 8000880:	08008c0c 	.word	0x08008c0c
 8000884:	20000286 	.word	0x20000286
 8000888:	200001bc 	.word	0x200001bc

0800088c <HAL_GPIO_EXTI_Callback>:
 * - The result of the validation (correct or incorrect) is displayed on the OLED and transmitted via UART.
 * - The buffer is reset after validation.
 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af02      	add	r7, sp, #8
 8000892:	4603      	mov	r3, r0
 8000894:	80fb      	strh	r3, [r7, #6]
	uint8_t key_pressed = keypad_scan(GPIO_Pin);
 8000896:	88fb      	ldrh	r3, [r7, #6]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fef7 	bl	800068c <keypad_scan>
 800089e:	4603      	mov	r3, r0
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	737b      	strb	r3, [r7, #13]

	    if (key_pressed != 0xFF) {
 80008a4:	7b7b      	ldrb	r3, [r7, #13]
 80008a6:	2bff      	cmp	r3, #255	@ 0xff
 80008a8:	f000 80d2 	beq.w	8000a50 <HAL_GPIO_EXTI_Callback+0x1c4>
	        // when '*' is pressed, the sequence is RESET
	        if (key_pressed == '*') {
 80008ac:	7b7b      	ldrb	r3, [r7, #13]
 80008ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80008b0:	d121      	bne.n	80008f6 <HAL_GPIO_EXTI_Callback+0x6a>
	            ring_buffer_reset(&keyboard_ring_buffer);
 80008b2:	4869      	ldr	r0, [pc, #420]	@ (8000a58 <HAL_GPIO_EXTI_Callback+0x1cc>)
 80008b4:	f000 fd7a 	bl	80013ac <ring_buffer_reset>
	            memset(display_buffer, 0, sizeof(display_buffer)); //clean actual buffer on the screen
 80008b8:	2215      	movs	r2, #21
 80008ba:	2100      	movs	r1, #0
 80008bc:	4867      	ldr	r0, [pc, #412]	@ (8000a5c <HAL_GPIO_EXTI_Callback+0x1d0>)
 80008be:	f007 fa69 	bl	8007d94 <memset>
	            buffer_index = 0; // reset index on buffer
 80008c2:	4b67      	ldr	r3, [pc, #412]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x1d4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]

	            ssd1306_Fill(Black);
 80008c8:	2000      	movs	r0, #0
 80008ca:	f006 fe07 	bl	80074dc <ssd1306_Fill>
	            ssd1306_SetCursor(10, 20);
 80008ce:	2114      	movs	r1, #20
 80008d0:	200a      	movs	r0, #10
 80008d2:	f006 ff4d 	bl	8007770 <ssd1306_SetCursor>
	            ssd1306_WriteString("sequence restarted", Font_6x8, White);
 80008d6:	4b63      	ldr	r3, [pc, #396]	@ (8000a64 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80008d8:	2201      	movs	r2, #1
 80008da:	9200      	str	r2, [sp, #0]
 80008dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008de:	4862      	ldr	r0, [pc, #392]	@ (8000a68 <HAL_GPIO_EXTI_Callback+0x1dc>)
 80008e0:	f006 ff20 	bl	8007724 <ssd1306_WriteString>
	            ssd1306_UpdateScreen();
 80008e4:	f006 fe12 	bl	800750c <ssd1306_UpdateScreen>
	            HAL_UART_Transmit(&huart2, (uint8_t*)"Sequence restarted\n\r", 22, 10);
 80008e8:	230a      	movs	r3, #10
 80008ea:	2216      	movs	r2, #22
 80008ec:	495f      	ldr	r1, [pc, #380]	@ (8000a6c <HAL_GPIO_EXTI_Callback+0x1e0>)
 80008ee:	4860      	ldr	r0, [pc, #384]	@ (8000a70 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80008f0:	f005 f9b4 	bl	8005c5c <HAL_UART_Transmit>
	            return;
 80008f4:	e0ac      	b.n	8000a50 <HAL_GPIO_EXTI_Callback+0x1c4>
	        }

	        // Write the key to the ring buffer
	        if (key_pressed != '#') {
 80008f6:	7b7b      	ldrb	r3, [r7, #13]
 80008f8:	2b23      	cmp	r3, #35	@ 0x23
 80008fa:	d031      	beq.n	8000960 <HAL_GPIO_EXTI_Callback+0xd4>
	            ring_buffer_write(&keyboard_ring_buffer, key_pressed);
 80008fc:	7b7b      	ldrb	r3, [r7, #13]
 80008fe:	4619      	mov	r1, r3
 8000900:	4855      	ldr	r0, [pc, #340]	@ (8000a58 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000902:	f000 fd92 	bl	800142a <ring_buffer_write>

	            // add chart to the buffer
	            if (buffer_index < MAX_DISPLAY_CHARS) {
 8000906:	4b56      	ldr	r3, [pc, #344]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b13      	cmp	r3, #19
 800090c:	f200 809f 	bhi.w	8000a4e <HAL_GPIO_EXTI_Callback+0x1c2>
	                display_buffer[buffer_index++] = key_pressed;
 8000910:	4b53      	ldr	r3, [pc, #332]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	1c5a      	adds	r2, r3, #1
 8000916:	b2d1      	uxtb	r1, r2
 8000918:	4a51      	ldr	r2, [pc, #324]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x1d4>)
 800091a:	7011      	strb	r1, [r2, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	7b79      	ldrb	r1, [r7, #13]
 8000920:	4b4e      	ldr	r3, [pc, #312]	@ (8000a5c <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000922:	5499      	strb	r1, [r3, r2]
	                display_buffer[buffer_index] = '\0'; // Null-terminar el buffer
 8000924:	4b4e      	ldr	r3, [pc, #312]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	461a      	mov	r2, r3
 800092a:	4b4c      	ldr	r3, [pc, #304]	@ (8000a5c <HAL_GPIO_EXTI_Callback+0x1d0>)
 800092c:	2100      	movs	r1, #0
 800092e:	5499      	strb	r1, [r3, r2]

	                // clean screen and show buffer content on screen
	                ssd1306_Fill(Black);
 8000930:	2000      	movs	r0, #0
 8000932:	f006 fdd3 	bl	80074dc <ssd1306_Fill>
	                ssd1306_SetCursor(10, 30);
 8000936:	211e      	movs	r1, #30
 8000938:	200a      	movs	r0, #10
 800093a:	f006 ff19 	bl	8007770 <ssd1306_SetCursor>
	                ssd1306_WriteString(display_buffer, Font_6x8, White);
 800093e:	4b49      	ldr	r3, [pc, #292]	@ (8000a64 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000940:	2201      	movs	r2, #1
 8000942:	9200      	str	r2, [sp, #0]
 8000944:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000946:	4845      	ldr	r0, [pc, #276]	@ (8000a5c <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000948:	f006 feec 	bl	8007724 <ssd1306_WriteString>
	                ssd1306_UpdateScreen();
 800094c:	f006 fdde 	bl	800750c <ssd1306_UpdateScreen>

	                // send chart via UART
	                HAL_UART_Transmit(&huart2, &key_pressed, 1, 10);
 8000950:	f107 010d 	add.w	r1, r7, #13
 8000954:	230a      	movs	r3, #10
 8000956:	2201      	movs	r2, #1
 8000958:	4845      	ldr	r0, [pc, #276]	@ (8000a70 <HAL_GPIO_EXTI_Callback+0x1e4>)
 800095a:	f005 f97f 	bl	8005c5c <HAL_UART_Transmit>
	            }
	            return;
 800095e:	e076      	b.n	8000a4e <HAL_GPIO_EXTI_Callback+0x1c2>

	        // proccoed when  '#' is pressed , we verify the password entered



	        uint8_t byte2 = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	733b      	strb	r3, [r7, #12]
	        uint8_t id_incorrect2 = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	73fb      	strb	r3, [r7, #15]
	        uint8_t my_id2[] = "123";  // correct sequence
 8000968:	4b42      	ldr	r3, [pc, #264]	@ (8000a74 <HAL_GPIO_EXTI_Callback+0x1e8>)
 800096a:	60bb      	str	r3, [r7, #8]

	        // Read from buffer and compare with correct key
	        for (uint8_t idx2 = 0; idx2 < sizeof(my_id2) - 1; idx2++) {
 800096c:	2300      	movs	r3, #0
 800096e:	73bb      	strb	r3, [r7, #14]
 8000970:	e019      	b.n	80009a6 <HAL_GPIO_EXTI_Callback+0x11a>
	            if (ring_buffer_read(&keyboard_ring_buffer, &byte2) != 0) {
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	4619      	mov	r1, r3
 8000978:	4837      	ldr	r0, [pc, #220]	@ (8000a58 <HAL_GPIO_EXTI_Callback+0x1cc>)
 800097a:	f000 fd94 	bl	80014a6 <ring_buffer_read>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d00a      	beq.n	800099a <HAL_GPIO_EXTI_Callback+0x10e>
	                if (byte2 != my_id2[idx2]) {
 8000984:	7bbb      	ldrb	r3, [r7, #14]
 8000986:	3310      	adds	r3, #16
 8000988:	443b      	add	r3, r7
 800098a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800098e:	7b3b      	ldrb	r3, [r7, #12]
 8000990:	429a      	cmp	r2, r3
 8000992:	d005      	beq.n	80009a0 <HAL_GPIO_EXTI_Callback+0x114>
	                    id_incorrect2 = 1;  // Mark as incorrect if no match
 8000994:	2301      	movs	r3, #1
 8000996:	73fb      	strb	r3, [r7, #15]


	                    break;
 8000998:	e008      	b.n	80009ac <HAL_GPIO_EXTI_Callback+0x120>
	                }
	            } else {
	                id_incorrect2 = 1;  // if there is no space in buffer
 800099a:	2301      	movs	r3, #1
 800099c:	73fb      	strb	r3, [r7, #15]
	                break;
 800099e:	e005      	b.n	80009ac <HAL_GPIO_EXTI_Callback+0x120>
	        for (uint8_t idx2 = 0; idx2 < sizeof(my_id2) - 1; idx2++) {
 80009a0:	7bbb      	ldrb	r3, [r7, #14]
 80009a2:	3301      	adds	r3, #1
 80009a4:	73bb      	strb	r3, [r7, #14]
 80009a6:	7bbb      	ldrb	r3, [r7, #14]
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d9e2      	bls.n	8000972 <HAL_GPIO_EXTI_Callback+0xe6>
	            }
	        }

	        HAL_UART_Transmit(&huart2, (uint8_t*)"\n", 1, 10);
 80009ac:	230a      	movs	r3, #10
 80009ae:	2201      	movs	r2, #1
 80009b0:	4931      	ldr	r1, [pc, #196]	@ (8000a78 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80009b2:	482f      	ldr	r0, [pc, #188]	@ (8000a70 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80009b4:	f005 f952 	bl	8005c5c <HAL_UART_Transmit>

	        if (!id_incorrect2) {
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d11f      	bne.n	80009fe <HAL_GPIO_EXTI_Callback+0x172>
	            // success
	            ssd1306_Fill(Black);
 80009be:	2000      	movs	r0, #0
 80009c0:	f006 fd8c 	bl	80074dc <ssd1306_Fill>
	            ssd1306_SetCursor(10, 20);
 80009c4:	2114      	movs	r1, #20
 80009c6:	200a      	movs	r0, #10
 80009c8:	f006 fed2 	bl	8007770 <ssd1306_SetCursor>
	            ssd1306_WriteString("correct sequence\n\r", Font_6x8, White);
 80009cc:	4b25      	ldr	r3, [pc, #148]	@ (8000a64 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	9200      	str	r2, [sp, #0]
 80009d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009d4:	4829      	ldr	r0, [pc, #164]	@ (8000a7c <HAL_GPIO_EXTI_Callback+0x1f0>)
 80009d6:	f006 fea5 	bl	8007724 <ssd1306_WriteString>
	            ssd1306_UpdateScreen();
 80009da:	f006 fd97 	bl	800750c <ssd1306_UpdateScreen>
	            HAL_UART_Transmit(&huart2, (uint8_t*)"correct sequence\n\r", 21, 10);
 80009de:	230a      	movs	r3, #10
 80009e0:	2215      	movs	r2, #21
 80009e2:	4926      	ldr	r1, [pc, #152]	@ (8000a7c <HAL_GPIO_EXTI_Callback+0x1f0>)
 80009e4:	4822      	ldr	r0, [pc, #136]	@ (8000a70 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80009e6:	f005 f939 	bl	8005c5c <HAL_UART_Transmit>
	            HAL_UART_Transmit(&huart2, (uint8_t*)"starting...\n\r", 14, 10);
 80009ea:	230a      	movs	r3, #10
 80009ec:	220e      	movs	r2, #14
 80009ee:	4924      	ldr	r1, [pc, #144]	@ (8000a80 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80009f0:	481f      	ldr	r0, [pc, #124]	@ (8000a70 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80009f2:	f005 f933 	bl	8005c5c <HAL_UART_Transmit>
	            passwordCorrect = 1 ;
 80009f6:	4b23      	ldr	r3, [pc, #140]	@ (8000a84 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	701a      	strb	r2, [r3, #0]
	            return;
 80009fc:	e028      	b.n	8000a50 <HAL_GPIO_EXTI_Callback+0x1c4>



	        } else {
	            //  error
	            ssd1306_Fill(Black);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f006 fd6c 	bl	80074dc <ssd1306_Fill>
	            ssd1306_SetCursor(10, 20);
 8000a04:	2114      	movs	r1, #20
 8000a06:	200a      	movs	r0, #10
 8000a08:	f006 feb2 	bl	8007770 <ssd1306_SetCursor>
	            ssd1306_WriteString("error. Try again ", Font_6x8, White);
 8000a0c:	4b15      	ldr	r3, [pc, #84]	@ (8000a64 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	9200      	str	r2, [sp, #0]
 8000a12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a14:	481c      	ldr	r0, [pc, #112]	@ (8000a88 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000a16:	f006 fe85 	bl	8007724 <ssd1306_WriteString>
	            ssd1306_UpdateScreen();
 8000a1a:	f006 fd77 	bl	800750c <ssd1306_UpdateScreen>
	            HAL_UART_Transmit(&huart2, (uint8_t*)" incorrect sequence. Try again  \n\r", 12, 10);
 8000a1e:	230a      	movs	r3, #10
 8000a20:	220c      	movs	r2, #12
 8000a22:	491a      	ldr	r1, [pc, #104]	@ (8000a8c <HAL_GPIO_EXTI_Callback+0x200>)
 8000a24:	4812      	ldr	r0, [pc, #72]	@ (8000a70 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000a26:	f005 f919 	bl	8005c5c <HAL_UART_Transmit>

	        }

	        // reset buffer after validation
	        ring_buffer_reset(&keyboard_ring_buffer);
 8000a2a:	480b      	ldr	r0, [pc, #44]	@ (8000a58 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000a2c:	f000 fcbe 	bl	80013ac <ring_buffer_reset>
	        memset(display_buffer, 0, sizeof(display_buffer)); // clean buffer on screen
 8000a30:	2215      	movs	r2, #21
 8000a32:	2100      	movs	r1, #0
 8000a34:	4809      	ldr	r0, [pc, #36]	@ (8000a5c <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000a36:	f007 f9ad 	bl	8007d94 <memset>
	        buffer_index = 0; // reset index buffer
 8000a3a:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	701a      	strb	r2, [r3, #0]
	        cursor_x = 10;  //Resets the horizontal cursor position
 8000a40:	4b13      	ldr	r3, [pc, #76]	@ (8000a90 <HAL_GPIO_EXTI_Callback+0x204>)
 8000a42:	220a      	movs	r2, #10
 8000a44:	701a      	strb	r2, [r3, #0]
	        cursor_y = 30;  // Restarts the vertical position of the course
 8000a46:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <HAL_GPIO_EXTI_Callback+0x208>)
 8000a48:	221e      	movs	r2, #30
 8000a4a:	701a      	strb	r2, [r3, #0]
 8000a4c:	e000      	b.n	8000a50 <HAL_GPIO_EXTI_Callback+0x1c4>
	            return;
 8000a4e:	bf00      	nop

	    }
}
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000268 	.word	0x20000268
 8000a5c:	20000270 	.word	0x20000270
 8000a60:	20000285 	.word	0x20000285
 8000a64:	08009460 	.word	0x08009460
 8000a68:	08008c10 	.word	0x08008c10
 8000a6c:	08008c24 	.word	0x08008c24
 8000a70:	200001bc 	.word	0x200001bc
 8000a74:	00333231 	.word	0x00333231
 8000a78:	08008c3c 	.word	0x08008c3c
 8000a7c:	08008c40 	.word	0x08008c40
 8000a80:	08008c54 	.word	0x08008c54
 8000a84:	20000286 	.word	0x20000286
 8000a88:	08008c64 	.word	0x08008c64
 8000a8c:	08008c78 	.word	0x08008c78
 8000a90:	20000012 	.word	0x20000012
 8000a94:	20000013 	.word	0x20000013

08000a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	@ 0x28
 8000a9c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9e:	f000 ffdf 	bl	8001a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa2:	f000 f9dd 	bl	8000e60 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000aa6:	f000 fa2c 	bl	8000f02 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aaa:	f000 fba1 	bl	80011f0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000aae:	f000 fa53 	bl	8000f58 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000ab2:	f000 fb6d 	bl	8001190 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000ab6:	f000 fac7 	bl	8001048 <MX_ADC2_Init>
  MX_I2C1_Init();
 8000aba:	f000 fb29 	bl	8001110 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ring_buffer_init(&keyboard_ring_buffer, keyboard_buffer_memory, BUFFER_CAPACITY);
 8000abe:	220a      	movs	r2, #10
 8000ac0:	49ad      	ldr	r1, [pc, #692]	@ (8000d78 <main+0x2e0>)
 8000ac2:	48ae      	ldr	r0, [pc, #696]	@ (8000d7c <main+0x2e4>)
 8000ac4:	f000 fc5e 	bl	8001384 <ring_buffer_init>
  ssd1306_Init();
 8000ac8:	f006 fc9e 	bl	8007408 <ssd1306_Init>
  ssd1306_Fill(Black);
 8000acc:	2000      	movs	r0, #0
 8000ace:	f006 fd05 	bl	80074dc <ssd1306_Fill>
  ssd1306_SetCursor(10,20);
 8000ad2:	2114      	movs	r1, #20
 8000ad4:	200a      	movs	r0, #10
 8000ad6:	f006 fe4b 	bl	8007770 <ssd1306_SetCursor>
  ssd1306_WriteString("Starting...\r\n",Font_6x8,White);
 8000ada:	4ba9      	ldr	r3, [pc, #676]	@ (8000d80 <main+0x2e8>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	9200      	str	r2, [sp, #0]
 8000ae0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ae2:	48a8      	ldr	r0, [pc, #672]	@ (8000d84 <main+0x2ec>)
 8000ae4:	f006 fe1e 	bl	8007724 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000ae8:	f006 fd10 	bl	800750c <ssd1306_UpdateScreen>



  HAL_UART_Receive_IT(&huart2, &usart2_data, 1);
 8000aec:	2201      	movs	r2, #1
 8000aee:	49a6      	ldr	r1, [pc, #664]	@ (8000d88 <main+0x2f0>)
 8000af0:	48a6      	ldr	r0, [pc, #664]	@ (8000d8c <main+0x2f4>)
 8000af2:	f005 f93d 	bl	8005d70 <HAL_UART_Receive_IT>
  ring_buffer_init(&usart2_rb, usart2_buffer, USART2_RB_LEN);
 8000af6:	2201      	movs	r2, #1
 8000af8:	49a5      	ldr	r1, [pc, #660]	@ (8000d90 <main+0x2f8>)
 8000afa:	48a6      	ldr	r0, [pc, #664]	@ (8000d94 <main+0x2fc>)
 8000afc:	f000 fc42 	bl	8001384 <ring_buffer_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Starting...\r\n");
 8000b00:	48a5      	ldr	r0, [pc, #660]	@ (8000d98 <main+0x300>)
 8000b02:	f007 f82d 	bl	8007b60 <puts>

  while (1)
  {

	  if(passwordCorrect)
 8000b06:	4ba5      	ldr	r3, [pc, #660]	@ (8000d9c <main+0x304>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d0fa      	beq.n	8000b06 <main+0x6e>
	  	  {
	  		  for (int i = 0 ; i < 1; i ++){
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
 8000b14:	e018      	b.n	8000b48 <main+0xb0>
	  			 printf("correct password. Welcome to our quality air system \r\n");
 8000b16:	48a2      	ldr	r0, [pc, #648]	@ (8000da0 <main+0x308>)
 8000b18:	f007 f822 	bl	8007b60 <puts>
	  			 ssd1306_Fill(Black);
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f006 fcdd 	bl	80074dc <ssd1306_Fill>
				  ssd1306_SetCursor(10, 20);
 8000b22:	2114      	movs	r1, #20
 8000b24:	200a      	movs	r0, #10
 8000b26:	f006 fe23 	bl	8007770 <ssd1306_SetCursor>
				  ssd1306_WriteString("Welcome to our quality air system ", Font_6x8, White);
 8000b2a:	4b95      	ldr	r3, [pc, #596]	@ (8000d80 <main+0x2e8>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	9200      	str	r2, [sp, #0]
 8000b30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b32:	489c      	ldr	r0, [pc, #624]	@ (8000da4 <main+0x30c>)
 8000b34:	f006 fdf6 	bl	8007724 <ssd1306_WriteString>
				  ssd1306_UpdateScreen();
 8000b38:	f006 fce8 	bl	800750c <ssd1306_UpdateScreen>
	  			 passwordCorrect =0  ;
 8000b3c:	4b97      	ldr	r3, [pc, #604]	@ (8000d9c <main+0x304>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	701a      	strb	r2, [r3, #0]
	  		  for (int i = 0 ; i < 1; i ++){
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3301      	adds	r3, #1
 8000b46:	61fb      	str	r3, [r7, #28]
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	dde3      	ble.n	8000b16 <main+0x7e>

	  		  while(1)
	  		  {
	  			 // adding logic to implement heartbeat
	  			    static uint32_t last_heartbeat_time = 0;
	  			    if (HAL_GetTick() - last_heartbeat_time >= 500) // toggling for 1Hz (500ms on / 500ms off)
 8000b4e:	f000 fff7 	bl	8001b40 <HAL_GetTick>
 8000b52:	4602      	mov	r2, r0
 8000b54:	4b94      	ldr	r3, [pc, #592]	@ (8000da8 <main+0x310>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000b5e:	d309      	bcc.n	8000b74 <main+0xdc>
	  			    {
	  			      HAL_GPIO_TogglePin(GPIOA, SYSTEM_LED_Pin);
 8000b60:	2120      	movs	r1, #32
 8000b62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b66:	f003 f823 	bl	8003bb0 <HAL_GPIO_TogglePin>
	  			      last_heartbeat_time = HAL_GetTick();
 8000b6a:	f000 ffe9 	bl	8001b40 <HAL_GetTick>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	4a8d      	ldr	r2, [pc, #564]	@ (8000da8 <main+0x310>)
 8000b72:	6013      	str	r3, [r2, #0]
	  			    }

	  			    // starting system

				  // LDR read and display on OLED
				  HAL_ADC_Start(&hadc1);
 8000b74:	488d      	ldr	r0, [pc, #564]	@ (8000dac <main+0x314>)
 8000b76:	f001 fb59 	bl	800222c <HAL_ADC_Start>
				  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000b7a:	f04f 31ff 	mov.w	r1, #4294967295
 8000b7e:	488b      	ldr	r0, [pc, #556]	@ (8000dac <main+0x314>)
 8000b80:	f001 fc0e 	bl	80023a0 <HAL_ADC_PollForConversion>
				  raw_value_LDR = HAL_ADC_GetValue(&hadc1);
 8000b84:	4889      	ldr	r0, [pc, #548]	@ (8000dac <main+0x314>)
 8000b86:	f001 fce3 	bl	8002550 <HAL_ADC_GetValue>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	4b88      	ldr	r3, [pc, #544]	@ (8000db0 <main+0x318>)
 8000b90:	801a      	strh	r2, [r3, #0]

				  // Convert LDR value to string and display it
				  char buffer_LDR[10]; // Buffer to hold the LDR value as a string
				  sprintf(buffer_LDR, "%4hu", raw_value_LDR); // Convert to 4-digit unsigned short
 8000b92:	4b87      	ldr	r3, [pc, #540]	@ (8000db0 <main+0x318>)
 8000b94:	881b      	ldrh	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	f107 0310 	add.w	r3, r7, #16
 8000b9c:	4985      	ldr	r1, [pc, #532]	@ (8000db4 <main+0x31c>)
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f006 ffe6 	bl	8007b70 <siprintf>
				  ssd1306_SetCursor(50, 1);  // Set cursor to top-right of the OLED
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	2032      	movs	r0, #50	@ 0x32
 8000ba8:	f006 fde2 	bl	8007770 <ssd1306_SetCursor>
				  ssd1306_WriteString(buffer_LDR, Font_6x8, White); // Write LDR value
 8000bac:	4b74      	ldr	r3, [pc, #464]	@ (8000d80 <main+0x2e8>)
 8000bae:	f107 0010 	add.w	r0, r7, #16
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	9200      	str	r2, [sp, #0]
 8000bb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bb8:	f006 fdb4 	bl	8007724 <ssd1306_WriteString>
				  ssd1306_UpdateScreen();
 8000bbc:	f006 fca6 	bl	800750c <ssd1306_UpdateScreen>

				  // Send LDR value over UART
				  sprintf(uart_buff, "LDR : %hu \r\n", raw_value_LDR);
 8000bc0:	4b7b      	ldr	r3, [pc, #492]	@ (8000db0 <main+0x318>)
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	497c      	ldr	r1, [pc, #496]	@ (8000db8 <main+0x320>)
 8000bc8:	487c      	ldr	r0, [pc, #496]	@ (8000dbc <main+0x324>)
 8000bca:	f006 ffd1 	bl	8007b70 <siprintf>
				  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buff, strlen(uart_buff), HAL_MAX_DELAY);
 8000bce:	487b      	ldr	r0, [pc, #492]	@ (8000dbc <main+0x324>)
 8000bd0:	f7ff fafe 	bl	80001d0 <strlen>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bdc:	4977      	ldr	r1, [pc, #476]	@ (8000dbc <main+0x324>)
 8000bde:	486b      	ldr	r0, [pc, #428]	@ (8000d8c <main+0x2f4>)
 8000be0:	f005 f83c 	bl	8005c5c <HAL_UART_Transmit>



					// NTC read and display on OLED
					HAL_ADC_Start(&hadc2);
 8000be4:	4876      	ldr	r0, [pc, #472]	@ (8000dc0 <main+0x328>)
 8000be6:	f001 fb21 	bl	800222c <HAL_ADC_Start>
					HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8000bea:	f04f 31ff 	mov.w	r1, #4294967295
 8000bee:	4874      	ldr	r0, [pc, #464]	@ (8000dc0 <main+0x328>)
 8000bf0:	f001 fbd6 	bl	80023a0 <HAL_ADC_PollForConversion>
					raw_value_NTC = HAL_ADC_GetValue(&hadc2);
 8000bf4:	4872      	ldr	r0, [pc, #456]	@ (8000dc0 <main+0x328>)
 8000bf6:	f001 fcab 	bl	8002550 <HAL_ADC_GetValue>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	4b71      	ldr	r3, [pc, #452]	@ (8000dc4 <main+0x32c>)
 8000c00:	801a      	strh	r2, [r3, #0]

					// Convert NTC value to string and display it
					char buffer_NTC[10]; // Buffer to hold the NTC value as a string
					sprintf(buffer_NTC, "%4hu", raw_value_NTC); // Convert to 4-digit unsigned short
 8000c02:	4b70      	ldr	r3, [pc, #448]	@ (8000dc4 <main+0x32c>)
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	461a      	mov	r2, r3
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	496a      	ldr	r1, [pc, #424]	@ (8000db4 <main+0x31c>)
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f006 ffaf 	bl	8007b70 <siprintf>
					ssd1306_SetCursor(80,1);  // Adjust the cursor position slightly below LDR
 8000c12:	2101      	movs	r1, #1
 8000c14:	2050      	movs	r0, #80	@ 0x50
 8000c16:	f006 fdab 	bl	8007770 <ssd1306_SetCursor>
					ssd1306_WriteString(buffer_NTC, Font_6x8, White); // Write NTC value
 8000c1a:	4b59      	ldr	r3, [pc, #356]	@ (8000d80 <main+0x2e8>)
 8000c1c:	1d38      	adds	r0, r7, #4
 8000c1e:	2201      	movs	r2, #1
 8000c20:	9200      	str	r2, [sp, #0]
 8000c22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c24:	f006 fd7e 	bl	8007724 <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8000c28:	f006 fc70 	bl	800750c <ssd1306_UpdateScreen>

					// Send NTC value over UART
					sprintf(uart_buff, "NTC : %hu \r\n", raw_value_NTC);
 8000c2c:	4b65      	ldr	r3, [pc, #404]	@ (8000dc4 <main+0x32c>)
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	461a      	mov	r2, r3
 8000c32:	4965      	ldr	r1, [pc, #404]	@ (8000dc8 <main+0x330>)
 8000c34:	4861      	ldr	r0, [pc, #388]	@ (8000dbc <main+0x324>)
 8000c36:	f006 ff9b 	bl	8007b70 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)uart_buff, strlen(uart_buff), HAL_MAX_DELAY);
 8000c3a:	4860      	ldr	r0, [pc, #384]	@ (8000dbc <main+0x324>)
 8000c3c:	f7ff fac8 	bl	80001d0 <strlen>
 8000c40:	4603      	mov	r3, r0
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	f04f 33ff 	mov.w	r3, #4294967295
 8000c48:	495c      	ldr	r1, [pc, #368]	@ (8000dbc <main+0x324>)
 8000c4a:	4850      	ldr	r0, [pc, #320]	@ (8000d8c <main+0x2f4>)
 8000c4c:	f005 f806 	bl	8005c5c <HAL_UART_Transmit>
					HAL_Delay(1000);
 8000c50:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c54:	f000 ff80 	bl	8001b58 <HAL_Delay>

	  			  		 	   //conditional for LDR incidence
	  			  		  if ( raw_value_LDR > 3000 ||  HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)== 0 ){
 8000c58:	4b55      	ldr	r3, [pc, #340]	@ (8000db0 <main+0x318>)
 8000c5a:	881b      	ldrh	r3, [r3, #0]
 8000c5c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d807      	bhi.n	8000c74 <main+0x1dc>
 8000c64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c68:	4858      	ldr	r0, [pc, #352]	@ (8000dcc <main+0x334>)
 8000c6a:	f002 ff71 	bl	8003b50 <HAL_GPIO_ReadPin>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d118      	bne.n	8000ca6 <main+0x20e>
	  			  			  	  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin , 1 );
 8000c74:	2201      	movs	r2, #1
 8000c76:	2101      	movs	r1, #1
 8000c78:	4855      	ldr	r0, [pc, #340]	@ (8000dd0 <main+0x338>)
 8000c7a:	f002 ff81 	bl	8003b80 <HAL_GPIO_WritePin>
	  			  			  	  ssd1306_SetCursor(50, 50);
 8000c7e:	2132      	movs	r1, #50	@ 0x32
 8000c80:	2032      	movs	r0, #50	@ 0x32
 8000c82:	f006 fd75 	bl	8007770 <ssd1306_SetCursor>
	  			  			  	  ssd1306_WriteString("optimal light detected", Font_6x8, White);
 8000c86:	4b3e      	ldr	r3, [pc, #248]	@ (8000d80 <main+0x2e8>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	9200      	str	r2, [sp, #0]
 8000c8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c8e:	4851      	ldr	r0, [pc, #324]	@ (8000dd4 <main+0x33c>)
 8000c90:	f006 fd48 	bl	8007724 <ssd1306_WriteString>
	  			  			  	  ssd1306_UpdateScreen();
 8000c94:	f006 fc3a 	bl	800750c <ssd1306_UpdateScreen>
	  			  			  	  HAL_UART_Transmit(&huart2, (uint8_t*)" optimal light detected \n\r", 12, 10);
 8000c98:	230a      	movs	r3, #10
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	494e      	ldr	r1, [pc, #312]	@ (8000dd8 <main+0x340>)
 8000c9e:	483b      	ldr	r0, [pc, #236]	@ (8000d8c <main+0x2f4>)
 8000ca0:	f004 ffdc 	bl	8005c5c <HAL_UART_Transmit>
 8000ca4:	e004      	b.n	8000cb0 <main+0x218>

	  			  		  }else{
	  			  			  	  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin , 0 );
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2101      	movs	r1, #1
 8000caa:	4849      	ldr	r0, [pc, #292]	@ (8000dd0 <main+0x338>)
 8000cac:	f002 ff68 	bl	8003b80 <HAL_GPIO_WritePin>

	  			  		  }

	  			  		 	   // conditional for NTC incidence

	  			  		 if (raw_value_NTC <= 1700) {
 8000cb0:	4b44      	ldr	r3, [pc, #272]	@ (8000dc4 <main+0x32c>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d828      	bhi.n	8000d0e <main+0x276>
	  						  // LD1 control
	  						  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2110      	movs	r1, #16
 8000cc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc4:	f002 ff5c 	bl	8003b80 <HAL_GPIO_WritePin>
	  						  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2140      	movs	r1, #64	@ 0x40
 8000ccc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cd0:	f002 ff56 	bl	8003b80 <HAL_GPIO_WritePin>
	  						  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2180      	movs	r1, #128	@ 0x80
 8000cd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cdc:	f002 ff50 	bl	8003b80 <HAL_GPIO_WritePin>
	  						  ssd1306_Fill(Black);
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f006 fbfb 	bl	80074dc <ssd1306_Fill>
							  ssd1306_SetCursor(10, 20);
 8000ce6:	2114      	movs	r1, #20
 8000ce8:	200a      	movs	r0, #10
 8000cea:	f006 fd41 	bl	8007770 <ssd1306_SetCursor>
							  ssd1306_WriteString("Safe temperature", Font_6x8, White);
 8000cee:	4b24      	ldr	r3, [pc, #144]	@ (8000d80 <main+0x2e8>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	9200      	str	r2, [sp, #0]
 8000cf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cf6:	4839      	ldr	r0, [pc, #228]	@ (8000ddc <main+0x344>)
 8000cf8:	f006 fd14 	bl	8007724 <ssd1306_WriteString>
							  ssd1306_UpdateScreen();
 8000cfc:	f006 fc06 	bl	800750c <ssd1306_UpdateScreen>
							  HAL_UART_Transmit(&huart2, (uint8_t*)" Safe temperature threshold \n\r", 12, 10);
 8000d00:	230a      	movs	r3, #10
 8000d02:	220c      	movs	r2, #12
 8000d04:	4936      	ldr	r1, [pc, #216]	@ (8000de0 <main+0x348>)
 8000d06:	4821      	ldr	r0, [pc, #132]	@ (8000d8c <main+0x2f4>)
 8000d08:	f004 ffa8 	bl	8005c5c <HAL_UART_Transmit>
 8000d0c:	e71f      	b.n	8000b4e <main+0xb6>
	  					  }
	  					  else if (raw_value_NTC > 1700 && raw_value_NTC <= 3300) {
 8000d0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000dc4 <main+0x32c>)
 8000d10:	881b      	ldrh	r3, [r3, #0]
 8000d12:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d968      	bls.n	8000dec <main+0x354>
 8000d1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000dc4 <main+0x32c>)
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d862      	bhi.n	8000dec <main+0x354>
	  						  // turn on LD2
	  						  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000d26:	2201      	movs	r2, #1
 8000d28:	2110      	movs	r1, #16
 8000d2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d2e:	f002 ff27 	bl	8003b80 <HAL_GPIO_WritePin>
	  						  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000d32:	2201      	movs	r2, #1
 8000d34:	2140      	movs	r1, #64	@ 0x40
 8000d36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d3a:	f002 ff21 	bl	8003b80 <HAL_GPIO_WritePin>
	  						  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2180      	movs	r1, #128	@ 0x80
 8000d42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d46:	f002 ff1b 	bl	8003b80 <HAL_GPIO_WritePin>
	  						  ssd1306_Fill(Black);
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f006 fbc6 	bl	80074dc <ssd1306_Fill>
							  ssd1306_SetCursor(10, 20);
 8000d50:	2114      	movs	r1, #20
 8000d52:	200a      	movs	r0, #10
 8000d54:	f006 fd0c 	bl	8007770 <ssd1306_SetCursor>
							  ssd1306_WriteString("Higher temperature ", Font_6x8, White);
 8000d58:	4b09      	ldr	r3, [pc, #36]	@ (8000d80 <main+0x2e8>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	9200      	str	r2, [sp, #0]
 8000d5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d60:	4820      	ldr	r0, [pc, #128]	@ (8000de4 <main+0x34c>)
 8000d62:	f006 fcdf 	bl	8007724 <ssd1306_WriteString>
							  ssd1306_UpdateScreen();
 8000d66:	f006 fbd1 	bl	800750c <ssd1306_UpdateScreen>
							  HAL_UART_Transmit(&huart2, (uint8_t*)" Higher than average temperature threshold \n\r", 12, 10);
 8000d6a:	230a      	movs	r3, #10
 8000d6c:	220c      	movs	r2, #12
 8000d6e:	491e      	ldr	r1, [pc, #120]	@ (8000de8 <main+0x350>)
 8000d70:	4806      	ldr	r0, [pc, #24]	@ (8000d8c <main+0x2f4>)
 8000d72:	f004 ff73 	bl	8005c5c <HAL_UART_Transmit>
 8000d76:	e068      	b.n	8000e4a <main+0x3b2>
 8000d78:	2000025c 	.word	0x2000025c
 8000d7c:	20000268 	.word	0x20000268
 8000d80:	08009460 	.word	0x08009460
 8000d84:	08008c9c 	.word	0x08008c9c
 8000d88:	20000014 	.word	0x20000014
 8000d8c:	200001bc 	.word	0x200001bc
 8000d90:	20000288 	.word	0x20000288
 8000d94:	2000028c 	.word	0x2000028c
 8000d98:	08008cac 	.word	0x08008cac
 8000d9c:	20000286 	.word	0x20000286
 8000da0:	08008cbc 	.word	0x08008cbc
 8000da4:	08008cf4 	.word	0x08008cf4
 8000da8:	20000298 	.word	0x20000298
 8000dac:	200000a0 	.word	0x200000a0
 8000db0:	2000025a 	.word	0x2000025a
 8000db4:	08008d18 	.word	0x08008d18
 8000db8:	08008d20 	.word	0x08008d20
 8000dbc:	20000244 	.word	0x20000244
 8000dc0:	20000104 	.word	0x20000104
 8000dc4:	20000258 	.word	0x20000258
 8000dc8:	08008d30 	.word	0x08008d30
 8000dcc:	48000800 	.word	0x48000800
 8000dd0:	48000400 	.word	0x48000400
 8000dd4:	08008d40 	.word	0x08008d40
 8000dd8:	08008d58 	.word	0x08008d58
 8000ddc:	08008d74 	.word	0x08008d74
 8000de0:	08008d88 	.word	0x08008d88
 8000de4:	08008da8 	.word	0x08008da8
 8000de8:	08008dbc 	.word	0x08008dbc
}
	  					  else if (raw_value_NTC > 2700) {
 8000dec:	4b17      	ldr	r3, [pc, #92]	@ (8000e4c <main+0x3b4>)
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	f640 228c 	movw	r2, #2700	@ 0xa8c
 8000df4:	4293      	cmp	r3, r2
 8000df6:	f67f aeaa 	bls.w	8000b4e <main+0xb6>
	  						  // Activa el LED3
	  						  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	2110      	movs	r1, #16
 8000dfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e02:	f002 febd 	bl	8003b80 <HAL_GPIO_WritePin>
	  						  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000e06:	2201      	movs	r2, #1
 8000e08:	2140      	movs	r1, #64	@ 0x40
 8000e0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e0e:	f002 feb7 	bl	8003b80 <HAL_GPIO_WritePin>
	  						  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000e12:	2201      	movs	r2, #1
 8000e14:	2180      	movs	r1, #128	@ 0x80
 8000e16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e1a:	f002 feb1 	bl	8003b80 <HAL_GPIO_WritePin>
	  						  ssd1306_Fill(Black);
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f006 fb5c 	bl	80074dc <ssd1306_Fill>
							  ssd1306_SetCursor(10, 20);
 8000e24:	2114      	movs	r1, #20
 8000e26:	200a      	movs	r0, #10
 8000e28:	f006 fca2 	bl	8007770 <ssd1306_SetCursor>
							  ssd1306_WriteString("H HIGH tempt detected.", Font_6x8, White);
 8000e2c:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <main+0x3b8>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	9200      	str	r2, [sp, #0]
 8000e32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e34:	4807      	ldr	r0, [pc, #28]	@ (8000e54 <main+0x3bc>)
 8000e36:	f006 fc75 	bl	8007724 <ssd1306_WriteString>
							  ssd1306_UpdateScreen();
 8000e3a:	f006 fb67 	bl	800750c <ssd1306_UpdateScreen>
							  HAL_UART_Transmit(&huart2, (uint8_t*)" Take care.High tempt detected. \n\r", 12, 10);
 8000e3e:	230a      	movs	r3, #10
 8000e40:	220c      	movs	r2, #12
 8000e42:	4905      	ldr	r1, [pc, #20]	@ (8000e58 <main+0x3c0>)
 8000e44:	4805      	ldr	r0, [pc, #20]	@ (8000e5c <main+0x3c4>)
 8000e46:	f004 ff09 	bl	8005c5c <HAL_UART_Transmit>
	  		  {
 8000e4a:	e680      	b.n	8000b4e <main+0xb6>
 8000e4c:	20000258 	.word	0x20000258
 8000e50:	08009460 	.word	0x08009460
 8000e54:	08008dec 	.word	0x08008dec
 8000e58:	08008e04 	.word	0x08008e04
 8000e5c:	200001bc 	.word	0x200001bc

08000e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b096      	sub	sp, #88	@ 0x58
 8000e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	2244      	movs	r2, #68	@ 0x44
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f006 ff90 	bl	8007d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e74:	463b      	mov	r3, r7
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
 8000e80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e82:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e86:	f003 fb89 	bl	800459c <HAL_PWREx_ControlVoltageScaling>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e90:	f000 fa72 	bl	8001378 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e94:	2302      	movs	r3, #2
 8000e96:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e9c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e9e:	2310      	movs	r3, #16
 8000ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000eae:	230a      	movs	r3, #10
 8000eb0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f003 fbc0 	bl	8004648 <HAL_RCC_OscConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ece:	f000 fa53 	bl	8001378 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed2:	230f      	movs	r3, #15
 8000ed4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	2104      	movs	r1, #4
 8000eea:	4618      	mov	r0, r3
 8000eec:	f003 ff88 	bl	8004e00 <HAL_RCC_ClockConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ef6:	f000 fa3f 	bl	8001378 <Error_Handler>
  }
}
 8000efa:	bf00      	nop
 8000efc:	3758      	adds	r7, #88	@ 0x58
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b0a2      	sub	sp, #136	@ 0x88
 8000f06:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f08:	463b      	mov	r3, r7
 8000f0a:	2288      	movs	r2, #136	@ 0x88
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f006 ff40 	bl	8007d94 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f14:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f18:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000f1a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f1e:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000f20:	2302      	movs	r3, #2
 8000f22:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000f24:	2301      	movs	r3, #1
 8000f26:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000f28:	2308      	movs	r3, #8
 8000f2a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000f2c:	2307      	movs	r3, #7
 8000f2e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000f30:	2302      	movs	r3, #2
 8000f32:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000f34:	2302      	movs	r3, #2
 8000f36:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000f38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f3c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f3e:	463b      	mov	r3, r7
 8000f40:	4618      	mov	r0, r3
 8000f42:	f004 f981 	bl	8005248 <HAL_RCCEx_PeriphCLKConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000f4c:	f000 fa14 	bl	8001378 <Error_Handler>
  }
}
 8000f50:	bf00      	nop
 8000f52:	3788      	adds	r7, #136	@ 0x88
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	@ 0x28
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
 8000f78:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f7a:	4b30      	ldr	r3, [pc, #192]	@ (800103c <MX_ADC1_Init+0xe4>)
 8000f7c:	4a30      	ldr	r2, [pc, #192]	@ (8001040 <MX_ADC1_Init+0xe8>)
 8000f7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000f80:	4b2e      	ldr	r3, [pc, #184]	@ (800103c <MX_ADC1_Init+0xe4>)
 8000f82:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f86:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f88:	4b2c      	ldr	r3, [pc, #176]	@ (800103c <MX_ADC1_Init+0xe4>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f8e:	4b2b      	ldr	r3, [pc, #172]	@ (800103c <MX_ADC1_Init+0xe4>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f94:	4b29      	ldr	r3, [pc, #164]	@ (800103c <MX_ADC1_Init+0xe4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f9a:	4b28      	ldr	r3, [pc, #160]	@ (800103c <MX_ADC1_Init+0xe4>)
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fa0:	4b26      	ldr	r3, [pc, #152]	@ (800103c <MX_ADC1_Init+0xe4>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fa6:	4b25      	ldr	r3, [pc, #148]	@ (800103c <MX_ADC1_Init+0xe4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000fac:	4b23      	ldr	r3, [pc, #140]	@ (800103c <MX_ADC1_Init+0xe4>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb2:	4b22      	ldr	r3, [pc, #136]	@ (800103c <MX_ADC1_Init+0xe4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fba:	4b20      	ldr	r3, [pc, #128]	@ (800103c <MX_ADC1_Init+0xe4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc0:	4b1e      	ldr	r3, [pc, #120]	@ (800103c <MX_ADC1_Init+0xe4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800103c <MX_ADC1_Init+0xe4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fce:	4b1b      	ldr	r3, [pc, #108]	@ (800103c <MX_ADC1_Init+0xe4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000fd4:	4b19      	ldr	r3, [pc, #100]	@ (800103c <MX_ADC1_Init+0xe4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fdc:	4817      	ldr	r0, [pc, #92]	@ (800103c <MX_ADC1_Init+0xe4>)
 8000fde:	f000 ffd5 	bl	8001f8c <HAL_ADC_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000fe8:	f000 f9c6 	bl	8001378 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4811      	ldr	r0, [pc, #68]	@ (800103c <MX_ADC1_Init+0xe4>)
 8000ff8:	f002 f9c0 	bl	800337c <HAL_ADCEx_MultiModeConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001002:	f000 f9b9 	bl	8001378 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001006:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <MX_ADC1_Init+0xec>)
 8001008:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800100a:	2306      	movs	r3, #6
 800100c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800100e:	2302      	movs	r3, #2
 8001010:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001012:	237f      	movs	r3, #127	@ 0x7f
 8001014:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001016:	2304      	movs	r3, #4
 8001018:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	4619      	mov	r1, r3
 8001022:	4806      	ldr	r0, [pc, #24]	@ (800103c <MX_ADC1_Init+0xe4>)
 8001024:	f001 fcda 	bl	80029dc <HAL_ADC_ConfigChannel>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800102e:	f000 f9a3 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	3728      	adds	r7, #40	@ 0x28
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200000a0 	.word	0x200000a0
 8001040:	50040000 	.word	0x50040000
 8001044:	14f00020 	.word	0x14f00020

08001048 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800104e:	463b      	mov	r3, r7
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
 800105c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800105e:	4b29      	ldr	r3, [pc, #164]	@ (8001104 <MX_ADC2_Init+0xbc>)
 8001060:	4a29      	ldr	r2, [pc, #164]	@ (8001108 <MX_ADC2_Init+0xc0>)
 8001062:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001064:	4b27      	ldr	r3, [pc, #156]	@ (8001104 <MX_ADC2_Init+0xbc>)
 8001066:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800106a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800106c:	4b25      	ldr	r3, [pc, #148]	@ (8001104 <MX_ADC2_Init+0xbc>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001072:	4b24      	ldr	r3, [pc, #144]	@ (8001104 <MX_ADC2_Init+0xbc>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001078:	4b22      	ldr	r3, [pc, #136]	@ (8001104 <MX_ADC2_Init+0xbc>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107e:	4b21      	ldr	r3, [pc, #132]	@ (8001104 <MX_ADC2_Init+0xbc>)
 8001080:	2204      	movs	r2, #4
 8001082:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001084:	4b1f      	ldr	r3, [pc, #124]	@ (8001104 <MX_ADC2_Init+0xbc>)
 8001086:	2200      	movs	r2, #0
 8001088:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800108a:	4b1e      	ldr	r3, [pc, #120]	@ (8001104 <MX_ADC2_Init+0xbc>)
 800108c:	2200      	movs	r2, #0
 800108e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001090:	4b1c      	ldr	r3, [pc, #112]	@ (8001104 <MX_ADC2_Init+0xbc>)
 8001092:	2201      	movs	r2, #1
 8001094:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001096:	4b1b      	ldr	r3, [pc, #108]	@ (8001104 <MX_ADC2_Init+0xbc>)
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800109e:	4b19      	ldr	r3, [pc, #100]	@ (8001104 <MX_ADC2_Init+0xbc>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a4:	4b17      	ldr	r3, [pc, #92]	@ (8001104 <MX_ADC2_Init+0xbc>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80010aa:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <MX_ADC2_Init+0xbc>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010b2:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <MX_ADC2_Init+0xbc>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <MX_ADC2_Init+0xbc>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010c0:	4810      	ldr	r0, [pc, #64]	@ (8001104 <MX_ADC2_Init+0xbc>)
 80010c2:	f000 ff63 	bl	8001f8c <HAL_ADC_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 80010cc:	f000 f954 	bl	8001378 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010d0:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <MX_ADC2_Init+0xc4>)
 80010d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010d4:	2306      	movs	r3, #6
 80010d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010dc:	237f      	movs	r3, #127	@ 0x7f
 80010de:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010e0:	2304      	movs	r3, #4
 80010e2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010e8:	463b      	mov	r3, r7
 80010ea:	4619      	mov	r1, r3
 80010ec:	4805      	ldr	r0, [pc, #20]	@ (8001104 <MX_ADC2_Init+0xbc>)
 80010ee:	f001 fc75 	bl	80029dc <HAL_ADC_ConfigChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 80010f8:	f000 f93e 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010fc:	bf00      	nop
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000104 	.word	0x20000104
 8001108:	50040100 	.word	0x50040100
 800110c:	19200040 	.word	0x19200040

08001110 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001114:	4b1b      	ldr	r3, [pc, #108]	@ (8001184 <MX_I2C1_Init+0x74>)
 8001116:	4a1c      	ldr	r2, [pc, #112]	@ (8001188 <MX_I2C1_Init+0x78>)
 8001118:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 800111a:	4b1a      	ldr	r3, [pc, #104]	@ (8001184 <MX_I2C1_Init+0x74>)
 800111c:	4a1b      	ldr	r2, [pc, #108]	@ (800118c <MX_I2C1_Init+0x7c>)
 800111e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001120:	4b18      	ldr	r3, [pc, #96]	@ (8001184 <MX_I2C1_Init+0x74>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001126:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <MX_I2C1_Init+0x74>)
 8001128:	2201      	movs	r2, #1
 800112a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800112c:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <MX_I2C1_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001132:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <MX_I2C1_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001138:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <MX_I2C1_Init+0x74>)
 800113a:	2200      	movs	r2, #0
 800113c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800113e:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <MX_I2C1_Init+0x74>)
 8001140:	2200      	movs	r2, #0
 8001142:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001144:	4b0f      	ldr	r3, [pc, #60]	@ (8001184 <MX_I2C1_Init+0x74>)
 8001146:	2200      	movs	r2, #0
 8001148:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800114a:	480e      	ldr	r0, [pc, #56]	@ (8001184 <MX_I2C1_Init+0x74>)
 800114c:	f002 fd62 	bl	8003c14 <HAL_I2C_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001156:	f000 f90f 	bl	8001378 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800115a:	2100      	movs	r1, #0
 800115c:	4809      	ldr	r0, [pc, #36]	@ (8001184 <MX_I2C1_Init+0x74>)
 800115e:	f003 f977 	bl	8004450 <HAL_I2CEx_ConfigAnalogFilter>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001168:	f000 f906 	bl	8001378 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800116c:	2100      	movs	r1, #0
 800116e:	4805      	ldr	r0, [pc, #20]	@ (8001184 <MX_I2C1_Init+0x74>)
 8001170:	f003 f9b9 	bl	80044e6 <HAL_I2CEx_ConfigDigitalFilter>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800117a:	f000 f8fd 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000168 	.word	0x20000168
 8001188:	40005400 	.word	0x40005400
 800118c:	10d19ce4 	.word	0x10d19ce4

08001190 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001194:	4b14      	ldr	r3, [pc, #80]	@ (80011e8 <MX_USART2_UART_Init+0x58>)
 8001196:	4a15      	ldr	r2, [pc, #84]	@ (80011ec <MX_USART2_UART_Init+0x5c>)
 8001198:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800119a:	4b13      	ldr	r3, [pc, #76]	@ (80011e8 <MX_USART2_UART_Init+0x58>)
 800119c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011a2:	4b11      	ldr	r3, [pc, #68]	@ (80011e8 <MX_USART2_UART_Init+0x58>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <MX_USART2_UART_Init+0x58>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	@ (80011e8 <MX_USART2_UART_Init+0x58>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <MX_USART2_UART_Init+0x58>)
 80011b6:	220c      	movs	r2, #12
 80011b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	@ (80011e8 <MX_USART2_UART_Init+0x58>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c0:	4b09      	ldr	r3, [pc, #36]	@ (80011e8 <MX_USART2_UART_Init+0x58>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011c6:	4b08      	ldr	r3, [pc, #32]	@ (80011e8 <MX_USART2_UART_Init+0x58>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011cc:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <MX_USART2_UART_Init+0x58>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011d2:	4805      	ldr	r0, [pc, #20]	@ (80011e8 <MX_USART2_UART_Init+0x58>)
 80011d4:	f004 fcf4 	bl	8005bc0 <HAL_UART_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011de:	f000 f8cb 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200001bc 	.word	0x200001bc
 80011ec:	40004400 	.word	0x40004400

080011f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	@ 0x28
 80011f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	4b59      	ldr	r3, [pc, #356]	@ (800136c <MX_GPIO_Init+0x17c>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120a:	4a58      	ldr	r2, [pc, #352]	@ (800136c <MX_GPIO_Init+0x17c>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001212:	4b56      	ldr	r3, [pc, #344]	@ (800136c <MX_GPIO_Init+0x17c>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800121e:	4b53      	ldr	r3, [pc, #332]	@ (800136c <MX_GPIO_Init+0x17c>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001222:	4a52      	ldr	r2, [pc, #328]	@ (800136c <MX_GPIO_Init+0x17c>)
 8001224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001228:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122a:	4b50      	ldr	r3, [pc, #320]	@ (800136c <MX_GPIO_Init+0x17c>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	4b4d      	ldr	r3, [pc, #308]	@ (800136c <MX_GPIO_Init+0x17c>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123a:	4a4c      	ldr	r2, [pc, #304]	@ (800136c <MX_GPIO_Init+0x17c>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001242:	4b4a      	ldr	r3, [pc, #296]	@ (800136c <MX_GPIO_Init+0x17c>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	4b47      	ldr	r3, [pc, #284]	@ (800136c <MX_GPIO_Init+0x17c>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001252:	4a46      	ldr	r2, [pc, #280]	@ (800136c <MX_GPIO_Init+0x17c>)
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125a:	4b44      	ldr	r3, [pc, #272]	@ (800136c <MX_GPIO_Init+0x17c>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD1_Pin|SYSTEM_LED_Pin|LD2_Pin|LD3_Pin
 8001266:	2200      	movs	r2, #0
 8001268:	f641 01f0 	movw	r1, #6384	@ 0x18f0
 800126c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001270:	f002 fc86 	bl	8003b80 <HAL_GPIO_WritePin>
                          |MOTORX_Pin|MOTORY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	2101      	movs	r1, #1
 8001278:	483d      	ldr	r0, [pc, #244]	@ (8001370 <MX_GPIO_Init+0x180>)
 800127a:	f002 fc81 	bl	8003b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, GPIO_PIN_SET);
 800127e:	2201      	movs	r2, #1
 8001280:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001284:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001288:	f002 fc7a 	bl	8003b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ROW_2_Pin|ROW_4_Pin|ROW_3_Pin, GPIO_PIN_SET);
 800128c:	2201      	movs	r2, #1
 800128e:	2138      	movs	r1, #56	@ 0x38
 8001290:	4837      	ldr	r0, [pc, #220]	@ (8001370 <MX_GPIO_Init+0x180>)
 8001292:	f002 fc75 	bl	8003b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001296:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800129a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800129c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	4831      	ldr	r0, [pc, #196]	@ (8001374 <MX_GPIO_Init+0x184>)
 80012ae:	f002 faa5 	bl	80037fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin SYSTEM_LED_Pin LD2_Pin LD3_Pin
                           ROW_1_Pin MOTORX_Pin MOTORY_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|SYSTEM_LED_Pin|LD2_Pin|LD3_Pin
 80012b2:	f641 43f0 	movw	r3, #7408	@ 0x1cf0
 80012b6:	617b      	str	r3, [r7, #20]
                          |ROW_1_Pin|MOTORX_Pin|MOTORY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4619      	mov	r1, r3
 80012ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ce:	f002 fa95 	bl	80037fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin ROW_2_Pin ROW_4_Pin ROW_3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|ROW_2_Pin|ROW_4_Pin|ROW_3_Pin;
 80012d2:	2339      	movs	r3, #57	@ 0x39
 80012d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	4821      	ldr	r0, [pc, #132]	@ (8001370 <MX_GPIO_Init+0x180>)
 80012ea:	f002 fa87 	bl	80037fc <HAL_GPIO_Init>

  /*Configure GPIO pin : COL_1_Pin */
  GPIO_InitStruct.Pin = COL_1_Pin;
 80012ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012fa:	2302      	movs	r3, #2
 80012fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COL_1_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	481a      	ldr	r0, [pc, #104]	@ (8001370 <MX_GPIO_Init+0x180>)
 8001306:	f002 fa79 	bl	80037fc <HAL_GPIO_Init>

  /*Configure GPIO pin : COL_4_Pin */
  GPIO_InitStruct.Pin = COL_4_Pin;
 800130a:	2380      	movs	r3, #128	@ 0x80
 800130c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800130e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001314:	2302      	movs	r3, #2
 8001316:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COL_4_GPIO_Port, &GPIO_InitStruct);
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4619      	mov	r1, r3
 800131e:	4815      	ldr	r0, [pc, #84]	@ (8001374 <MX_GPIO_Init+0x184>)
 8001320:	f002 fa6c 	bl	80037fc <HAL_GPIO_Init>

  /*Configure GPIO pins : COL_2_Pin COL_3_Pin */
  GPIO_InitStruct.Pin = COL_2_Pin|COL_3_Pin;
 8001324:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800132a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800132e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001330:	2302      	movs	r3, #2
 8001332:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	4619      	mov	r1, r3
 800133a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800133e:	f002 fa5d 	bl	80037fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2100      	movs	r1, #0
 8001346:	2017      	movs	r0, #23
 8001348:	f002 f9a3 	bl	8003692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800134c:	2017      	movs	r0, #23
 800134e:	f002 f9bc 	bl	80036ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	2028      	movs	r0, #40	@ 0x28
 8001358:	f002 f99b 	bl	8003692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800135c:	2028      	movs	r0, #40	@ 0x28
 800135e:	f002 f9b4 	bl	80036ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001362:	bf00      	nop
 8001364:	3728      	adds	r7, #40	@ 0x28
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000
 8001370:	48000400 	.word	0x48000400
 8001374:	48000800 	.word	0x48000800

08001378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800137c:	b672      	cpsid	i
}
 800137e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <Error_Handler+0x8>

08001384 <ring_buffer_init>:

#include "ring_buffer.h"


void ring_buffer_init(ring_buffer_t *rb, uint8_t *mem_add, uint8_t cap)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	4613      	mov	r3, r2
 8001390:	71fb      	strb	r3, [r7, #7]
	rb->buffer = mem_add;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	601a      	str	r2, [r3, #0]
	rb->capacity = cap;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	79fa      	ldrb	r2, [r7, #7]
 800139c:	71da      	strb	r2, [r3, #7]

	ring_buffer_reset(rb);
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	f000 f804 	bl	80013ac <ring_buffer_reset>
}
 80013a4:	bf00      	nop
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <ring_buffer_reset>:
 * @brief Esta funcion reinicia los datos disponibles en el buffer
 *
 * @retval size: cantidad de datos disponibles
 */
void ring_buffer_reset(ring_buffer_t *rb)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	rb->head = 0;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	711a      	strb	r2, [r3, #4]
	rb->tail = 0;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	715a      	strb	r2, [r3, #5]
	rb->is_full = 0;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	719a      	strb	r2, [r3, #6]
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <ring_buffer_size>:
 * @brief Esta funcion calcula los datos disponibles en el buffer
 *
 * @retval size: cantidad de datos disponibles
 */
uint8_t ring_buffer_size(ring_buffer_t *rb)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b085      	sub	sp, #20
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
	uint8_t size = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	73fb      	strb	r3, [r7, #15]
	if (rb->head >= rb->tail) {
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	791a      	ldrb	r2, [r3, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	795b      	ldrb	r3, [r3, #5]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d306      	bcc.n	80013f8 <ring_buffer_size+0x26>
		size = rb->head - rb->tail;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	791a      	ldrb	r2, [r3, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	795b      	ldrb	r3, [r3, #5]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	73fb      	strb	r3, [r7, #15]
 80013f6:	e011      	b.n	800141c <ring_buffer_size+0x4a>
	} else if (rb->is_full == 0) {
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	799b      	ldrb	r3, [r3, #6]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d10a      	bne.n	8001416 <ring_buffer_size+0x44>
		size = (rb->capacity - rb->tail) + rb->head;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	79da      	ldrb	r2, [r3, #7]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	795b      	ldrb	r3, [r3, #5]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	b2da      	uxtb	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	791b      	ldrb	r3, [r3, #4]
 8001410:	4413      	add	r3, r2
 8001412:	73fb      	strb	r3, [r7, #15]
 8001414:	e002      	b.n	800141c <ring_buffer_size+0x4a>
	} else {
		size = rb->capacity;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	79db      	ldrb	r3, [r3, #7]
 800141a:	73fb      	strb	r3, [r7, #15]
	}
	return size;
 800141c:	7bfb      	ldrb	r3, [r7, #15]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <ring_buffer_write>:
 * @param data: el dato que se va a escribir
 *
 * @retval Ninguno
 */
void ring_buffer_write(ring_buffer_t *rb, uint8_t data)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	460b      	mov	r3, r1
 8001434:	70fb      	strb	r3, [r7, #3]
	rb->buffer[rb->head] = data;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	7912      	ldrb	r2, [r2, #4]
 800143e:	4413      	add	r3, r2
 8001440:	78fa      	ldrb	r2, [r7, #3]
 8001442:	701a      	strb	r2, [r3, #0]
	rb->head = rb->head + 1;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	791b      	ldrb	r3, [r3, #4]
 8001448:	3301      	adds	r3, #1
 800144a:	b2da      	uxtb	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	711a      	strb	r2, [r3, #4]

	if (rb->head >= rb->capacity) { // si la cabeza llega al final de la memoria
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	791a      	ldrb	r2, [r3, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	79db      	ldrb	r3, [r3, #7]
 8001458:	429a      	cmp	r2, r3
 800145a:	d302      	bcc.n	8001462 <ring_buffer_write+0x38>
		rb->head = 0;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	711a      	strb	r2, [r3, #4]
	}

	if (rb->is_full != 0) { // si se pierden datos viejos
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	799b      	ldrb	r3, [r3, #6]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d005      	beq.n	8001476 <ring_buffer_write+0x4c>
		rb->tail = rb->tail + 1;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	795b      	ldrb	r3, [r3, #5]
 800146e:	3301      	adds	r3, #1
 8001470:	b2da      	uxtb	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	715a      	strb	r2, [r3, #5]
	}

	if (rb->tail >= rb->capacity) { // si la cola llega al final de la memoria
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	795a      	ldrb	r2, [r3, #5]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	79db      	ldrb	r3, [r3, #7]
 800147e:	429a      	cmp	r2, r3
 8001480:	d302      	bcc.n	8001488 <ring_buffer_write+0x5e>
		rb->tail = 0;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	715a      	strb	r2, [r3, #5]
	}

	if (rb->head == rb->tail) { // si la cabeza alcanza la cola
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	791a      	ldrb	r2, [r3, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	795b      	ldrb	r3, [r3, #5]
 8001490:	429a      	cmp	r2, r3
 8001492:	d102      	bne.n	800149a <ring_buffer_write+0x70>
		rb->is_full = 1;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	719a      	strb	r2, [r3, #6]
	}
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <ring_buffer_read>:
 * @param data: la direccion de donde se va a escribir el dato
 *
 * @retval 1: hay datos disponibles, 0: no hay datos
 */
uint8_t ring_buffer_read(ring_buffer_t *rb, uint8_t *data) // 0x20
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	6039      	str	r1, [r7, #0]
	if ((rb->is_full != 0) || (rb->head != rb->tail)) { // data available
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	799b      	ldrb	r3, [r3, #6]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d105      	bne.n	80014c4 <ring_buffer_read+0x1e>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	791a      	ldrb	r2, [r3, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	795b      	ldrb	r3, [r3, #5]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d01b      	beq.n	80014fc <ring_buffer_read+0x56>
		*data = rb->buffer[rb->tail]; // add: 0x20, val: buffer
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	7952      	ldrb	r2, [r2, #5]
 80014cc:	4413      	add	r3, r2
 80014ce:	781a      	ldrb	r2, [r3, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	701a      	strb	r2, [r3, #0]
		rb->tail = rb->tail + 1;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	795b      	ldrb	r3, [r3, #5]
 80014d8:	3301      	adds	r3, #1
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	715a      	strb	r2, [r3, #5]
		if (rb->tail >= rb->capacity) {
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	795a      	ldrb	r2, [r3, #5]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	79db      	ldrb	r3, [r3, #7]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d302      	bcc.n	80014f2 <ring_buffer_read+0x4c>
			rb->tail = 0;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	715a      	strb	r2, [r3, #5]
		}
		rb->is_full = 0;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	719a      	strb	r2, [r3, #6]

		return 1; // buffer con datos
 80014f8:	2301      	movs	r3, #1
 80014fa:	e000      	b.n	80014fe <ring_buffer_read+0x58>
	}
	return 0; // buffer vacio
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001512:	4b12      	ldr	r3, [pc, #72]	@ (800155c <HAL_MspInit+0x50>)
 8001514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001516:	4a11      	ldr	r2, [pc, #68]	@ (800155c <HAL_MspInit+0x50>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6613      	str	r3, [r2, #96]	@ 0x60
 800151e:	4b0f      	ldr	r3, [pc, #60]	@ (800155c <HAL_MspInit+0x50>)
 8001520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	4b0c      	ldr	r3, [pc, #48]	@ (800155c <HAL_MspInit+0x50>)
 800152c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800152e:	4a0b      	ldr	r2, [pc, #44]	@ (800155c <HAL_MspInit+0x50>)
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001534:	6593      	str	r3, [r2, #88]	@ 0x58
 8001536:	4b09      	ldr	r3, [pc, #36]	@ (800155c <HAL_MspInit+0x50>)
 8001538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2100      	movs	r1, #0
 8001546:	2051      	movs	r0, #81	@ 0x51
 8001548:	f002 f8a3 	bl	8003692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 800154c:	2051      	movs	r0, #81	@ 0x51
 800154e:	f002 f8bc 	bl	80036ca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40021000 	.word	0x40021000

08001560 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08c      	sub	sp, #48	@ 0x30
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a3c      	ldr	r2, [pc, #240]	@ (8001670 <HAL_ADC_MspInit+0x110>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d136      	bne.n	80015f0 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001582:	4b3c      	ldr	r3, [pc, #240]	@ (8001674 <HAL_ADC_MspInit+0x114>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	3301      	adds	r3, #1
 8001588:	4a3a      	ldr	r2, [pc, #232]	@ (8001674 <HAL_ADC_MspInit+0x114>)
 800158a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800158c:	4b39      	ldr	r3, [pc, #228]	@ (8001674 <HAL_ADC_MspInit+0x114>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d10b      	bne.n	80015ac <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001594:	4b38      	ldr	r3, [pc, #224]	@ (8001678 <HAL_ADC_MspInit+0x118>)
 8001596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001598:	4a37      	ldr	r2, [pc, #220]	@ (8001678 <HAL_ADC_MspInit+0x118>)
 800159a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800159e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a0:	4b35      	ldr	r3, [pc, #212]	@ (8001678 <HAL_ADC_MspInit+0x118>)
 80015a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015a8:	61bb      	str	r3, [r7, #24]
 80015aa:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ac:	4b32      	ldr	r3, [pc, #200]	@ (8001678 <HAL_ADC_MspInit+0x118>)
 80015ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b0:	4a31      	ldr	r2, [pc, #196]	@ (8001678 <HAL_ADC_MspInit+0x118>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001678 <HAL_ADC_MspInit+0x118>)
 80015ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015c4:	2301      	movs	r3, #1
 80015c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015c8:	230b      	movs	r3, #11
 80015ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	4619      	mov	r1, r3
 80015d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015da:	f002 f90f 	bl	80037fc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2100      	movs	r1, #0
 80015e2:	2012      	movs	r0, #18
 80015e4:	f002 f855 	bl	8003692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80015e8:	2012      	movs	r0, #18
 80015ea:	f002 f86e 	bl	80036ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80015ee:	e03a      	b.n	8001666 <HAL_ADC_MspInit+0x106>
  else if(hadc->Instance==ADC2)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a21      	ldr	r2, [pc, #132]	@ (800167c <HAL_ADC_MspInit+0x11c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d135      	bne.n	8001666 <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC_CLK_ENABLED++;
 80015fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001674 <HAL_ADC_MspInit+0x114>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	3301      	adds	r3, #1
 8001600:	4a1c      	ldr	r2, [pc, #112]	@ (8001674 <HAL_ADC_MspInit+0x114>)
 8001602:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001604:	4b1b      	ldr	r3, [pc, #108]	@ (8001674 <HAL_ADC_MspInit+0x114>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d10b      	bne.n	8001624 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC_CLK_ENABLE();
 800160c:	4b1a      	ldr	r3, [pc, #104]	@ (8001678 <HAL_ADC_MspInit+0x118>)
 800160e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001610:	4a19      	ldr	r2, [pc, #100]	@ (8001678 <HAL_ADC_MspInit+0x118>)
 8001612:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001616:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001618:	4b17      	ldr	r3, [pc, #92]	@ (8001678 <HAL_ADC_MspInit+0x118>)
 800161a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001624:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <HAL_ADC_MspInit+0x118>)
 8001626:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001628:	4a13      	ldr	r2, [pc, #76]	@ (8001678 <HAL_ADC_MspInit+0x118>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001630:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <HAL_ADC_MspInit+0x118>)
 8001632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800163c:	2302      	movs	r3, #2
 800163e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001640:	230b      	movs	r3, #11
 8001642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	4619      	mov	r1, r3
 800164e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001652:	f002 f8d3 	bl	80037fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2100      	movs	r1, #0
 800165a:	2012      	movs	r0, #18
 800165c:	f002 f819 	bl	8003692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001660:	2012      	movs	r0, #18
 8001662:	f002 f832 	bl	80036ca <HAL_NVIC_EnableIRQ>
}
 8001666:	bf00      	nop
 8001668:	3730      	adds	r7, #48	@ 0x30
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	50040000 	.word	0x50040000
 8001674:	2000029c 	.word	0x2000029c
 8001678:	40021000 	.word	0x40021000
 800167c:	50040100 	.word	0x50040100

08001680 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b0ac      	sub	sp, #176	@ 0xb0
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	2288      	movs	r2, #136	@ 0x88
 800169e:	2100      	movs	r1, #0
 80016a0:	4618      	mov	r0, r3
 80016a2:	f006 fb77 	bl	8007d94 <memset>
  if(hi2c->Instance==I2C1)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a21      	ldr	r2, [pc, #132]	@ (8001730 <HAL_I2C_MspInit+0xb0>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d13b      	bne.n	8001728 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016b0:	2340      	movs	r3, #64	@ 0x40
 80016b2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016b4:	2300      	movs	r3, #0
 80016b6:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4618      	mov	r0, r3
 80016be:	f003 fdc3 	bl	8005248 <HAL_RCCEx_PeriphCLKConfig>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80016c8:	f7ff fe56 	bl	8001378 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016cc:	4b19      	ldr	r3, [pc, #100]	@ (8001734 <HAL_I2C_MspInit+0xb4>)
 80016ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d0:	4a18      	ldr	r2, [pc, #96]	@ (8001734 <HAL_I2C_MspInit+0xb4>)
 80016d2:	f043 0302 	orr.w	r3, r3, #2
 80016d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016d8:	4b16      	ldr	r3, [pc, #88]	@ (8001734 <HAL_I2C_MspInit+0xb4>)
 80016da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ec:	2312      	movs	r3, #18
 80016ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f8:	2303      	movs	r3, #3
 80016fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016fe:	2304      	movs	r3, #4
 8001700:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001704:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001708:	4619      	mov	r1, r3
 800170a:	480b      	ldr	r0, [pc, #44]	@ (8001738 <HAL_I2C_MspInit+0xb8>)
 800170c:	f002 f876 	bl	80037fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001710:	4b08      	ldr	r3, [pc, #32]	@ (8001734 <HAL_I2C_MspInit+0xb4>)
 8001712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001714:	4a07      	ldr	r2, [pc, #28]	@ (8001734 <HAL_I2C_MspInit+0xb4>)
 8001716:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800171a:	6593      	str	r3, [r2, #88]	@ 0x58
 800171c:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <HAL_I2C_MspInit+0xb4>)
 800171e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001720:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001728:	bf00      	nop
 800172a:	37b0      	adds	r7, #176	@ 0xb0
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40005400 	.word	0x40005400
 8001734:	40021000 	.word	0x40021000
 8001738:	48000400 	.word	0x48000400

0800173c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b0ac      	sub	sp, #176	@ 0xb0
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	2288      	movs	r2, #136	@ 0x88
 800175a:	2100      	movs	r1, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f006 fb19 	bl	8007d94 <memset>
  if(huart->Instance==USART2)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a25      	ldr	r2, [pc, #148]	@ (80017fc <HAL_UART_MspInit+0xc0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d143      	bne.n	80017f4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800176c:	2302      	movs	r3, #2
 800176e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001770:	2300      	movs	r3, #0
 8001772:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	4618      	mov	r0, r3
 800177a:	f003 fd65 	bl	8005248 <HAL_RCCEx_PeriphCLKConfig>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001784:	f7ff fdf8 	bl	8001378 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001788:	4b1d      	ldr	r3, [pc, #116]	@ (8001800 <HAL_UART_MspInit+0xc4>)
 800178a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178c:	4a1c      	ldr	r2, [pc, #112]	@ (8001800 <HAL_UART_MspInit+0xc4>)
 800178e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001792:	6593      	str	r3, [r2, #88]	@ 0x58
 8001794:	4b1a      	ldr	r3, [pc, #104]	@ (8001800 <HAL_UART_MspInit+0xc4>)
 8001796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a0:	4b17      	ldr	r3, [pc, #92]	@ (8001800 <HAL_UART_MspInit+0xc4>)
 80017a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a4:	4a16      	ldr	r2, [pc, #88]	@ (8001800 <HAL_UART_MspInit+0xc4>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ac:	4b14      	ldr	r3, [pc, #80]	@ (8001800 <HAL_UART_MspInit+0xc4>)
 80017ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017b8:	230c      	movs	r3, #12
 80017ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ca:	2303      	movs	r3, #3
 80017cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017d0:	2307      	movs	r3, #7
 80017d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80017da:	4619      	mov	r1, r3
 80017dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017e0:	f002 f80c 	bl	80037fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2100      	movs	r1, #0
 80017e8:	2026      	movs	r0, #38	@ 0x26
 80017ea:	f001 ff52 	bl	8003692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017ee:	2026      	movs	r0, #38	@ 0x26
 80017f0:	f001 ff6b 	bl	80036ca <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80017f4:	bf00      	nop
 80017f6:	37b0      	adds	r7, #176	@ 0xb0
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40004400 	.word	0x40004400
 8001800:	40021000 	.word	0x40021000

08001804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <NMI_Handler+0x4>

0800180c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <HardFault_Handler+0x4>

08001814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <MemManage_Handler+0x4>

0800181c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <BusFault_Handler+0x4>

08001824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <UsageFault_Handler+0x4>

0800182c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800185a:	f000 f95d 	bl	8001b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001868:	4803      	ldr	r0, [pc, #12]	@ (8001878 <ADC1_2_IRQHandler+0x14>)
 800186a:	f000 fe7f 	bl	800256c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800186e:	4803      	ldr	r0, [pc, #12]	@ (800187c <ADC1_2_IRQHandler+0x18>)
 8001870:	f000 fe7c 	bl	800256c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}
 8001878:	200000a0 	.word	0x200000a0
 800187c:	20000104 	.word	0x20000104

08001880 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_4_Pin);
 8001884:	2080      	movs	r0, #128	@ 0x80
 8001886:	f002 f9ad 	bl	8003be4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL_2_Pin);
 800188a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800188e:	f002 f9a9 	bl	8003be4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL_3_Pin);
 8001892:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001896:	f002 f9a5 	bl	8003be4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018a4:	4802      	ldr	r0, [pc, #8]	@ (80018b0 <USART2_IRQHandler+0x10>)
 80018a6:	f004 faaf 	bl	8005e08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200001bc 	.word	0x200001bc

080018b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_1_Pin);
 80018b8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80018bc:	f002 f992 	bl	8003be4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80018c0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80018c4:	f002 f98e 	bl	8003be4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}

080018cc <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b086      	sub	sp, #24
 80018de:	af00      	add	r7, sp, #0
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	e00a      	b.n	8001902 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018ec:	f3af 8000 	nop.w
 80018f0:	4601      	mov	r1, r0
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	1c5a      	adds	r2, r3, #1
 80018f6:	60ba      	str	r2, [r7, #8]
 80018f8:	b2ca      	uxtb	r2, r1
 80018fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	3301      	adds	r3, #1
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	429a      	cmp	r2, r3
 8001908:	dbf0      	blt.n	80018ec <_read+0x12>
  }

  return len;
 800190a:	687b      	ldr	r3, [r7, #4]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800191c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800193c:	605a      	str	r2, [r3, #4]
  return 0;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <_isatty>:

int _isatty(int file)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001954:	2301      	movs	r3, #1
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001962:	b480      	push	{r7}
 8001964:	b085      	sub	sp, #20
 8001966:	af00      	add	r7, sp, #0
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001984:	4a14      	ldr	r2, [pc, #80]	@ (80019d8 <_sbrk+0x5c>)
 8001986:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <_sbrk+0x60>)
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001990:	4b13      	ldr	r3, [pc, #76]	@ (80019e0 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d102      	bne.n	800199e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001998:	4b11      	ldr	r3, [pc, #68]	@ (80019e0 <_sbrk+0x64>)
 800199a:	4a12      	ldr	r2, [pc, #72]	@ (80019e4 <_sbrk+0x68>)
 800199c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199e:	4b10      	ldr	r3, [pc, #64]	@ (80019e0 <_sbrk+0x64>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d207      	bcs.n	80019bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019ac:	f006 fa40 	bl	8007e30 <__errno>
 80019b0:	4603      	mov	r3, r0
 80019b2:	220c      	movs	r2, #12
 80019b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ba:	e009      	b.n	80019d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019bc:	4b08      	ldr	r3, [pc, #32]	@ (80019e0 <_sbrk+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019c2:	4b07      	ldr	r3, [pc, #28]	@ (80019e0 <_sbrk+0x64>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	4a05      	ldr	r2, [pc, #20]	@ (80019e0 <_sbrk+0x64>)
 80019cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ce:	68fb      	ldr	r3, [r7, #12]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20018000 	.word	0x20018000
 80019dc:	00000400 	.word	0x00000400
 80019e0:	200002a0 	.word	0x200002a0
 80019e4:	20000800 	.word	0x20000800

080019e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019ec:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <SystemInit+0x20>)
 80019ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019f2:	4a05      	ldr	r2, [pc, #20]	@ (8001a08 <SystemInit+0x20>)
 80019f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a10:	f7ff ffea 	bl	80019e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a14:	480c      	ldr	r0, [pc, #48]	@ (8001a48 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a16:	490d      	ldr	r1, [pc, #52]	@ (8001a4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a18:	4a0d      	ldr	r2, [pc, #52]	@ (8001a50 <LoopForever+0xe>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a1c:	e002      	b.n	8001a24 <LoopCopyDataInit>

08001a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a22:	3304      	adds	r3, #4

08001a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a28:	d3f9      	bcc.n	8001a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a2c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a58 <LoopForever+0x16>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a30:	e001      	b.n	8001a36 <LoopFillZerobss>

08001a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a34:	3204      	adds	r2, #4

08001a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a38:	d3fb      	bcc.n	8001a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a3a:	f006 f9ff 	bl	8007e3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a3e:	f7ff f82b 	bl	8000a98 <main>

08001a42 <LoopForever>:

LoopForever:
    b LoopForever
 8001a42:	e7fe      	b.n	8001a42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a4c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001a50:	080095b0 	.word	0x080095b0
  ldr r2, =_sbss
 8001a54:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001a58:	200007fc 	.word	0x200007fc

08001a5c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a5c:	e7fe      	b.n	8001a5c <ADC3_IRQHandler>
	...

08001a60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a9c <HAL_Init+0x3c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a9c <HAL_Init+0x3c>)
 8001a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a74:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a76:	2003      	movs	r0, #3
 8001a78:	f001 fe00 	bl	800367c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f000 f80f 	bl	8001aa0 <HAL_InitTick>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d002      	beq.n	8001a8e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	71fb      	strb	r3, [r7, #7]
 8001a8c:	e001      	b.n	8001a92 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a8e:	f7ff fd3d 	bl	800150c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a92:	79fb      	ldrb	r3, [r7, #7]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40022000 	.word	0x40022000

08001aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001aac:	4b17      	ldr	r3, [pc, #92]	@ (8001b0c <HAL_InitTick+0x6c>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d023      	beq.n	8001afc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ab4:	4b16      	ldr	r3, [pc, #88]	@ (8001b10 <HAL_InitTick+0x70>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b14      	ldr	r3, [pc, #80]	@ (8001b0c <HAL_InitTick+0x6c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	4619      	mov	r1, r3
 8001abe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aca:	4618      	mov	r0, r3
 8001acc:	f001 fe0b 	bl	80036e6 <HAL_SYSTICK_Config>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10f      	bne.n	8001af6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b0f      	cmp	r3, #15
 8001ada:	d809      	bhi.n	8001af0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001adc:	2200      	movs	r2, #0
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae4:	f001 fdd5 	bl	8003692 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8001b14 <HAL_InitTick+0x74>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	e007      	b.n	8001b00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	73fb      	strb	r3, [r7, #15]
 8001af4:	e004      	b.n	8001b00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	73fb      	strb	r3, [r7, #15]
 8001afa:	e001      	b.n	8001b00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000020 	.word	0x20000020
 8001b10:	20000018 	.word	0x20000018
 8001b14:	2000001c 	.word	0x2000001c

08001b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <HAL_IncTick+0x20>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <HAL_IncTick+0x24>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	4a04      	ldr	r2, [pc, #16]	@ (8001b3c <HAL_IncTick+0x24>)
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000020 	.word	0x20000020
 8001b3c:	200002a4 	.word	0x200002a4

08001b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return uwTick;
 8001b44:	4b03      	ldr	r3, [pc, #12]	@ (8001b54 <HAL_GetTick+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	200002a4 	.word	0x200002a4

08001b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b60:	f7ff ffee 	bl	8001b40 <HAL_GetTick>
 8001b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b70:	d005      	beq.n	8001b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b72:	4b0a      	ldr	r3, [pc, #40]	@ (8001b9c <HAL_Delay+0x44>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b7e:	bf00      	nop
 8001b80:	f7ff ffde 	bl	8001b40 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d8f7      	bhi.n	8001b80 <HAL_Delay+0x28>
  {
  }
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000020 	.word	0x20000020

08001ba0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	609a      	str	r2, [r3, #8]
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	3360      	adds	r3, #96	@ 0x60
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4b08      	ldr	r3, [pc, #32]	@ (8001c4c <LL_ADC_SetOffset+0x44>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	4313      	orrs	r3, r2
 8001c38:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c40:	bf00      	nop
 8001c42:	371c      	adds	r7, #28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	03fff000 	.word	0x03fff000

08001c50 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3360      	adds	r3, #96	@ 0x60
 8001c5e:	461a      	mov	r2, r3
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b087      	sub	sp, #28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	3360      	adds	r3, #96	@ 0x60
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ca6:	bf00      	nop
 8001ca8:	371c      	adds	r7, #28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b087      	sub	sp, #28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	3330      	adds	r3, #48	@ 0x30
 8001ce8:	461a      	mov	r2, r3
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	0a1b      	lsrs	r3, r3, #8
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	f003 030c 	and.w	r3, r3, #12
 8001cf4:	4413      	add	r3, r2
 8001cf6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	f003 031f 	and.w	r3, r3, #31
 8001d02:	211f      	movs	r1, #31
 8001d04:	fa01 f303 	lsl.w	r3, r1, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	0e9b      	lsrs	r3, r3, #26
 8001d10:	f003 011f 	and.w	r1, r3, #31
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	f003 031f 	and.w	r3, r3, #31
 8001d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d24:	bf00      	nop
 8001d26:	371c      	adds	r7, #28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d3c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001d44:	2301      	movs	r3, #1
 8001d46:	e000      	b.n	8001d4a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b087      	sub	sp, #28
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	3314      	adds	r3, #20
 8001d66:	461a      	mov	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	0e5b      	lsrs	r3, r3, #25
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	4413      	add	r3, r2
 8001d74:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	0d1b      	lsrs	r3, r3, #20
 8001d7e:	f003 031f 	and.w	r3, r3, #31
 8001d82:	2107      	movs	r1, #7
 8001d84:	fa01 f303 	lsl.w	r3, r1, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	0d1b      	lsrs	r3, r3, #20
 8001d90:	f003 031f 	and.w	r3, r3, #31
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001da0:	bf00      	nop
 8001da2:	371c      	adds	r7, #28
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	401a      	ands	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f003 0318 	and.w	r3, r3, #24
 8001dce:	4908      	ldr	r1, [pc, #32]	@ (8001df0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001dd0:	40d9      	lsrs	r1, r3
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	400b      	ands	r3, r1
 8001dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	0007ffff 	.word	0x0007ffff

08001df4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 031f 	and.w	r3, r3, #31
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001e3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6093      	str	r3, [r2, #8]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e64:	d101      	bne.n	8001e6a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001e88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e8c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001eb4:	d101      	bne.n	8001eba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ed8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001edc:	f043 0201 	orr.w	r2, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <LL_ADC_IsEnabled+0x18>
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <LL_ADC_IsEnabled+0x1a>
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f26:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f2a:	f043 0204 	orr.w	r2, r3, #4
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d101      	bne.n	8001f56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d101      	bne.n	8001f7c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e000      	b.n	8001f7e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b089      	sub	sp, #36	@ 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e130      	b.n	8002208 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d109      	bne.n	8001fc8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff fad3 	bl	8001560 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ff3f 	bl	8001e50 <LL_ADC_IsDeepPowerDownEnabled>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d004      	beq.n	8001fe2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff ff25 	bl	8001e2c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ff5a 	bl	8001ea0 <LL_ADC_IsInternalRegulatorEnabled>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d115      	bne.n	800201e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff ff3e 	bl	8001e78 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ffc:	4b84      	ldr	r3, [pc, #528]	@ (8002210 <HAL_ADC_Init+0x284>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	099b      	lsrs	r3, r3, #6
 8002002:	4a84      	ldr	r2, [pc, #528]	@ (8002214 <HAL_ADC_Init+0x288>)
 8002004:	fba2 2303 	umull	r2, r3, r2, r3
 8002008:	099b      	lsrs	r3, r3, #6
 800200a:	3301      	adds	r3, #1
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002010:	e002      	b.n	8002018 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	3b01      	subs	r3, #1
 8002016:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f9      	bne.n	8002012 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff ff3c 	bl	8001ea0 <LL_ADC_IsInternalRegulatorEnabled>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10d      	bne.n	800204a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002032:	f043 0210 	orr.w	r2, r3, #16
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203e:	f043 0201 	orr.w	r2, r3, #1
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff ff75 	bl	8001f3e <LL_ADC_REG_IsConversionOngoing>
 8002054:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800205a:	f003 0310 	and.w	r3, r3, #16
 800205e:	2b00      	cmp	r3, #0
 8002060:	f040 80c9 	bne.w	80021f6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	2b00      	cmp	r3, #0
 8002068:	f040 80c5 	bne.w	80021f6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002070:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002074:	f043 0202 	orr.w	r2, r3, #2
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff35 	bl	8001ef0 <LL_ADC_IsEnabled>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d115      	bne.n	80020b8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800208c:	4862      	ldr	r0, [pc, #392]	@ (8002218 <HAL_ADC_Init+0x28c>)
 800208e:	f7ff ff2f 	bl	8001ef0 <LL_ADC_IsEnabled>
 8002092:	4604      	mov	r4, r0
 8002094:	4861      	ldr	r0, [pc, #388]	@ (800221c <HAL_ADC_Init+0x290>)
 8002096:	f7ff ff2b 	bl	8001ef0 <LL_ADC_IsEnabled>
 800209a:	4603      	mov	r3, r0
 800209c:	431c      	orrs	r4, r3
 800209e:	4860      	ldr	r0, [pc, #384]	@ (8002220 <HAL_ADC_Init+0x294>)
 80020a0:	f7ff ff26 	bl	8001ef0 <LL_ADC_IsEnabled>
 80020a4:	4603      	mov	r3, r0
 80020a6:	4323      	orrs	r3, r4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d105      	bne.n	80020b8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	4619      	mov	r1, r3
 80020b2:	485c      	ldr	r0, [pc, #368]	@ (8002224 <HAL_ADC_Init+0x298>)
 80020b4:	f7ff fd74 	bl	8001ba0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	7e5b      	ldrb	r3, [r3, #25]
 80020bc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020c2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80020c8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80020ce:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020d6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d106      	bne.n	80020f4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ea:	3b01      	subs	r3, #1
 80020ec:	045b      	lsls	r3, r3, #17
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d009      	beq.n	8002110 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002100:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002108:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	4b44      	ldr	r3, [pc, #272]	@ (8002228 <HAL_ADC_Init+0x29c>)
 8002118:	4013      	ands	r3, r2
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	69b9      	ldr	r1, [r7, #24]
 8002120:	430b      	orrs	r3, r1
 8002122:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff1b 	bl	8001f64 <LL_ADC_INJ_IsConversionOngoing>
 800212e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d13d      	bne.n	80021b2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d13a      	bne.n	80021b2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002140:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002148:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002158:	f023 0302 	bic.w	r3, r3, #2
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	69b9      	ldr	r1, [r7, #24]
 8002162:	430b      	orrs	r3, r1
 8002164:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800216c:	2b01      	cmp	r3, #1
 800216e:	d118      	bne.n	80021a2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800217a:	f023 0304 	bic.w	r3, r3, #4
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002186:	4311      	orrs	r1, r2
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800218c:	4311      	orrs	r1, r2
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002192:	430a      	orrs	r2, r1
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0201 	orr.w	r2, r2, #1
 800219e:	611a      	str	r2, [r3, #16]
 80021a0:	e007      	b.n	80021b2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0201 	bic.w	r2, r2, #1
 80021b0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d10c      	bne.n	80021d4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c0:	f023 010f 	bic.w	r1, r3, #15
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	1e5a      	subs	r2, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80021d2:	e007      	b.n	80021e4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 020f 	bic.w	r2, r2, #15
 80021e2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e8:	f023 0303 	bic.w	r3, r3, #3
 80021ec:	f043 0201 	orr.w	r2, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	655a      	str	r2, [r3, #84]	@ 0x54
 80021f4:	e007      	b.n	8002206 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021fa:	f043 0210 	orr.w	r2, r3, #16
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002206:	7ffb      	ldrb	r3, [r7, #31]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3724      	adds	r7, #36	@ 0x24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd90      	pop	{r4, r7, pc}
 8002210:	20000018 	.word	0x20000018
 8002214:	053e2d63 	.word	0x053e2d63
 8002218:	50040000 	.word	0x50040000
 800221c:	50040100 	.word	0x50040100
 8002220:	50040200 	.word	0x50040200
 8002224:	50040300 	.word	0x50040300
 8002228:	fff0c007 	.word	0xfff0c007

0800222c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002234:	4857      	ldr	r0, [pc, #348]	@ (8002394 <HAL_ADC_Start+0x168>)
 8002236:	f7ff fddd 	bl	8001df4 <LL_ADC_GetMultimode>
 800223a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff fe7c 	bl	8001f3e <LL_ADC_REG_IsConversionOngoing>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	f040 809c 	bne.w	8002386 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002254:	2b01      	cmp	r3, #1
 8002256:	d101      	bne.n	800225c <HAL_ADC_Start+0x30>
 8002258:	2302      	movs	r3, #2
 800225a:	e097      	b.n	800238c <HAL_ADC_Start+0x160>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 ffab 	bl	80031c0 <ADC_Enable>
 800226a:	4603      	mov	r3, r0
 800226c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800226e:	7dfb      	ldrb	r3, [r7, #23]
 8002270:	2b00      	cmp	r3, #0
 8002272:	f040 8083 	bne.w	800237c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800227a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800227e:	f023 0301 	bic.w	r3, r3, #1
 8002282:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a42      	ldr	r2, [pc, #264]	@ (8002398 <HAL_ADC_Start+0x16c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d002      	beq.n	800229a <HAL_ADC_Start+0x6e>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	e000      	b.n	800229c <HAL_ADC_Start+0x70>
 800229a:	4b40      	ldr	r3, [pc, #256]	@ (800239c <HAL_ADC_Start+0x170>)
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d002      	beq.n	80022aa <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d105      	bne.n	80022b6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ae:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022c2:	d106      	bne.n	80022d2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c8:	f023 0206 	bic.w	r2, r3, #6
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80022d0:	e002      	b.n	80022d8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	221c      	movs	r2, #28
 80022de:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002398 <HAL_ADC_Start+0x16c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d002      	beq.n	80022f8 <HAL_ADC_Start+0xcc>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	e000      	b.n	80022fa <HAL_ADC_Start+0xce>
 80022f8:	4b28      	ldr	r3, [pc, #160]	@ (800239c <HAL_ADC_Start+0x170>)
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6812      	ldr	r2, [r2, #0]
 80022fe:	4293      	cmp	r3, r2
 8002300:	d008      	beq.n	8002314 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d005      	beq.n	8002314 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	2b05      	cmp	r3, #5
 800230c:	d002      	beq.n	8002314 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	2b09      	cmp	r3, #9
 8002312:	d114      	bne.n	800233e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d007      	beq.n	8002332 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002326:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800232a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff fded 	bl	8001f16 <LL_ADC_REG_StartConversion>
 800233c:	e025      	b.n	800238a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002342:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a12      	ldr	r2, [pc, #72]	@ (8002398 <HAL_ADC_Start+0x16c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d002      	beq.n	800235a <HAL_ADC_Start+0x12e>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	e000      	b.n	800235c <HAL_ADC_Start+0x130>
 800235a:	4b10      	ldr	r3, [pc, #64]	@ (800239c <HAL_ADC_Start+0x170>)
 800235c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00f      	beq.n	800238a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800236e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002372:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	655a      	str	r2, [r3, #84]	@ 0x54
 800237a:	e006      	b.n	800238a <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002384:	e001      	b.n	800238a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002386:	2302      	movs	r3, #2
 8002388:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800238a:	7dfb      	ldrb	r3, [r7, #23]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	50040300 	.word	0x50040300
 8002398:	50040100 	.word	0x50040100
 800239c:	50040000 	.word	0x50040000

080023a0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023aa:	4866      	ldr	r0, [pc, #408]	@ (8002544 <HAL_ADC_PollForConversion+0x1a4>)
 80023ac:	f7ff fd22 	bl	8001df4 <LL_ADC_GetMultimode>
 80023b0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d102      	bne.n	80023c0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80023ba:	2308      	movs	r3, #8
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	e02a      	b.n	8002416 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d005      	beq.n	80023d2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2b05      	cmp	r3, #5
 80023ca:	d002      	beq.n	80023d2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2b09      	cmp	r3, #9
 80023d0:	d111      	bne.n	80023f6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d007      	beq.n	80023f0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e4:	f043 0220 	orr.w	r2, r3, #32
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0a4      	b.n	800253a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80023f0:	2304      	movs	r3, #4
 80023f2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80023f4:	e00f      	b.n	8002416 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80023f6:	4853      	ldr	r0, [pc, #332]	@ (8002544 <HAL_ADC_PollForConversion+0x1a4>)
 80023f8:	f7ff fd0a 	bl	8001e10 <LL_ADC_GetMultiDMATransfer>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d007      	beq.n	8002412 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002406:	f043 0220 	orr.w	r2, r3, #32
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e093      	b.n	800253a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002412:	2304      	movs	r3, #4
 8002414:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002416:	f7ff fb93 	bl	8001b40 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800241c:	e021      	b.n	8002462 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002424:	d01d      	beq.n	8002462 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002426:	f7ff fb8b 	bl	8001b40 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d302      	bcc.n	800243c <HAL_ADC_PollForConversion+0x9c>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d112      	bne.n	8002462 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	4013      	ands	r3, r2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10b      	bne.n	8002462 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800244e:	f043 0204 	orr.w	r2, r3, #4
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e06b      	b.n	800253a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	4013      	ands	r3, r2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0d6      	beq.n	800241e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002474:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff fc16 	bl	8001cb2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d01c      	beq.n	80024c6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	7e5b      	ldrb	r3, [r3, #25]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d118      	bne.n	80024c6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d111      	bne.n	80024c6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d105      	bne.n	80024c6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024be:	f043 0201 	orr.w	r2, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a1f      	ldr	r2, [pc, #124]	@ (8002548 <HAL_ADC_PollForConversion+0x1a8>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d002      	beq.n	80024d6 <HAL_ADC_PollForConversion+0x136>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	e000      	b.n	80024d8 <HAL_ADC_PollForConversion+0x138>
 80024d6:	4b1d      	ldr	r3, [pc, #116]	@ (800254c <HAL_ADC_PollForConversion+0x1ac>)
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	4293      	cmp	r3, r2
 80024de:	d008      	beq.n	80024f2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d005      	beq.n	80024f2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2b05      	cmp	r3, #5
 80024ea:	d002      	beq.n	80024f2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	2b09      	cmp	r3, #9
 80024f0:	d104      	bne.n	80024fc <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	61bb      	str	r3, [r7, #24]
 80024fa:	e00c      	b.n	8002516 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a11      	ldr	r2, [pc, #68]	@ (8002548 <HAL_ADC_PollForConversion+0x1a8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d002      	beq.n	800250c <HAL_ADC_PollForConversion+0x16c>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	e000      	b.n	800250e <HAL_ADC_PollForConversion+0x16e>
 800250c:	4b0f      	ldr	r3, [pc, #60]	@ (800254c <HAL_ADC_PollForConversion+0x1ac>)
 800250e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	2b08      	cmp	r3, #8
 800251a:	d104      	bne.n	8002526 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2208      	movs	r2, #8
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	e008      	b.n	8002538 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d103      	bne.n	8002538 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	220c      	movs	r2, #12
 8002536:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3720      	adds	r7, #32
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	50040300 	.word	0x50040300
 8002548:	50040100 	.word	0x50040100
 800254c:	50040000 	.word	0x50040000

08002550 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
	...

0800256c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08a      	sub	sp, #40	@ 0x28
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002574:	2300      	movs	r3, #0
 8002576:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002588:	4882      	ldr	r0, [pc, #520]	@ (8002794 <HAL_ADC_IRQHandler+0x228>)
 800258a:	f7ff fc33 	bl	8001df4 <LL_ADC_GetMultimode>
 800258e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d017      	beq.n	80025ca <HAL_ADC_IRQHandler+0x5e>
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d012      	beq.n	80025ca <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a8:	f003 0310 	and.w	r3, r3, #16
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d105      	bne.n	80025bc <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b4:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 fed3 	bl	8003368 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2202      	movs	r2, #2
 80025c8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d004      	beq.n	80025de <HAL_ADC_IRQHandler+0x72>
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10a      	bne.n	80025f4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 8083 	beq.w	80026f0 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d07d      	beq.n	80026f0 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d105      	bne.n	800260c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002604:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fb4e 	bl	8001cb2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d062      	beq.n	80026e2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a5d      	ldr	r2, [pc, #372]	@ (8002798 <HAL_ADC_IRQHandler+0x22c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d002      	beq.n	800262c <HAL_ADC_IRQHandler+0xc0>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	e000      	b.n	800262e <HAL_ADC_IRQHandler+0xc2>
 800262c:	4b5b      	ldr	r3, [pc, #364]	@ (800279c <HAL_ADC_IRQHandler+0x230>)
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6812      	ldr	r2, [r2, #0]
 8002632:	4293      	cmp	r3, r2
 8002634:	d008      	beq.n	8002648 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	2b05      	cmp	r3, #5
 8002640:	d002      	beq.n	8002648 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2b09      	cmp	r3, #9
 8002646:	d104      	bne.n	8002652 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	623b      	str	r3, [r7, #32]
 8002650:	e00c      	b.n	800266c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a50      	ldr	r2, [pc, #320]	@ (8002798 <HAL_ADC_IRQHandler+0x22c>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d002      	beq.n	8002662 <HAL_ADC_IRQHandler+0xf6>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	e000      	b.n	8002664 <HAL_ADC_IRQHandler+0xf8>
 8002662:	4b4e      	ldr	r3, [pc, #312]	@ (800279c <HAL_ADC_IRQHandler+0x230>)
 8002664:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d135      	bne.n	80026e2 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0308 	and.w	r3, r3, #8
 8002680:	2b08      	cmp	r3, #8
 8002682:	d12e      	bne.n	80026e2 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fc58 	bl	8001f3e <LL_ADC_REG_IsConversionOngoing>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d11a      	bne.n	80026ca <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 020c 	bic.w	r2, r2, #12
 80026a2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d112      	bne.n	80026e2 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c0:	f043 0201 	orr.w	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	655a      	str	r2, [r3, #84]	@ 0x54
 80026c8:	e00b      	b.n	80026e2 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ce:	f043 0210 	orr.w	r2, r3, #16
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026da:	f043 0201 	orr.w	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f95c 	bl	80029a0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	220c      	movs	r2, #12
 80026ee:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f003 0320 	and.w	r3, r3, #32
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d004      	beq.n	8002704 <HAL_ADC_IRQHandler+0x198>
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	f003 0320 	and.w	r3, r3, #32
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10b      	bne.n	800271c <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 809f 	beq.w	800284e <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 8099 	beq.w	800284e <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	2b00      	cmp	r3, #0
 8002726:	d105      	bne.n	8002734 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800272c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff faf9 	bl	8001d30 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800273e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff fab4 	bl	8001cb2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800274a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a11      	ldr	r2, [pc, #68]	@ (8002798 <HAL_ADC_IRQHandler+0x22c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d002      	beq.n	800275c <HAL_ADC_IRQHandler+0x1f0>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	e000      	b.n	800275e <HAL_ADC_IRQHandler+0x1f2>
 800275c:	4b0f      	ldr	r3, [pc, #60]	@ (800279c <HAL_ADC_IRQHandler+0x230>)
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6812      	ldr	r2, [r2, #0]
 8002762:	4293      	cmp	r3, r2
 8002764:	d008      	beq.n	8002778 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	2b06      	cmp	r3, #6
 8002770:	d002      	beq.n	8002778 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2b07      	cmp	r3, #7
 8002776:	d104      	bne.n	8002782 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	623b      	str	r3, [r7, #32]
 8002780:	e013      	b.n	80027aa <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a04      	ldr	r2, [pc, #16]	@ (8002798 <HAL_ADC_IRQHandler+0x22c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d009      	beq.n	80027a0 <HAL_ADC_IRQHandler+0x234>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	e007      	b.n	80027a2 <HAL_ADC_IRQHandler+0x236>
 8002792:	bf00      	nop
 8002794:	50040300 	.word	0x50040300
 8002798:	50040100 	.word	0x50040100
 800279c:	50040000 	.word	0x50040000
 80027a0:	4b7d      	ldr	r3, [pc, #500]	@ (8002998 <HAL_ADC_IRQHandler+0x42c>)
 80027a2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d047      	beq.n	8002840 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d007      	beq.n	80027ca <HAL_ADC_IRQHandler+0x25e>
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d03f      	beq.n	8002840 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d13a      	bne.n	8002840 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027d4:	2b40      	cmp	r3, #64	@ 0x40
 80027d6:	d133      	bne.n	8002840 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d12e      	bne.n	8002840 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fbbc 	bl	8001f64 <LL_ADC_INJ_IsConversionOngoing>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d11a      	bne.n	8002828 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002800:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002806:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002816:	2b00      	cmp	r3, #0
 8002818:	d112      	bne.n	8002840 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800281e:	f043 0201 	orr.w	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	655a      	str	r2, [r3, #84]	@ 0x54
 8002826:	e00b      	b.n	8002840 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800282c:	f043 0210 	orr.w	r2, r3, #16
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002838:	f043 0201 	orr.w	r2, r3, #1
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 fd69 	bl	8003318 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2260      	movs	r2, #96	@ 0x60
 800284c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002854:	2b00      	cmp	r3, #0
 8002856:	d011      	beq.n	800287c <HAL_ADC_IRQHandler+0x310>
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00c      	beq.n	800287c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002866:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f8a0 	bl	80029b4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2280      	movs	r2, #128	@ 0x80
 800287a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002882:	2b00      	cmp	r3, #0
 8002884:	d012      	beq.n	80028ac <HAL_ADC_IRQHandler+0x340>
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00d      	beq.n	80028ac <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002894:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 fd4f 	bl	8003340 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d012      	beq.n	80028dc <HAL_ADC_IRQHandler+0x370>
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00d      	beq.n	80028dc <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 fd41 	bl	8003354 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028da:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d036      	beq.n	8002954 <HAL_ADC_IRQHandler+0x3e8>
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	f003 0310 	and.w	r3, r3, #16
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d031      	beq.n	8002954 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d102      	bne.n	80028fe <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80028f8:	2301      	movs	r3, #1
 80028fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80028fc:	e014      	b.n	8002928 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d008      	beq.n	8002916 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002904:	4825      	ldr	r0, [pc, #148]	@ (800299c <HAL_ADC_IRQHandler+0x430>)
 8002906:	f7ff fa83 	bl	8001e10 <LL_ADC_GetMultiDMATransfer>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00b      	beq.n	8002928 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002910:	2301      	movs	r3, #1
 8002912:	627b      	str	r3, [r7, #36]	@ 0x24
 8002914:	e008      	b.n	8002928 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002924:	2301      	movs	r3, #1
 8002926:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292a:	2b01      	cmp	r3, #1
 800292c:	d10e      	bne.n	800294c <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002932:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293e:	f043 0202 	orr.w	r2, r3, #2
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f83e 	bl	80029c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2210      	movs	r2, #16
 8002952:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800295a:	2b00      	cmp	r3, #0
 800295c:	d018      	beq.n	8002990 <HAL_ADC_IRQHandler+0x424>
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002964:	2b00      	cmp	r3, #0
 8002966:	d013      	beq.n	8002990 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800296c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002978:	f043 0208 	orr.w	r2, r3, #8
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002988:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 fcce 	bl	800332c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002990:	bf00      	nop
 8002992:	3728      	adds	r7, #40	@ 0x28
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	50040000 	.word	0x50040000
 800299c:	50040300 	.word	0x50040300

080029a0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b0b6      	sub	sp, #216	@ 0xd8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d101      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x22>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e3c9      	b.n	8003192 <HAL_ADC_ConfigChannel+0x7b6>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff fa97 	bl	8001f3e <LL_ADC_REG_IsConversionOngoing>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f040 83aa 	bne.w	800316c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b05      	cmp	r3, #5
 8002a26:	d824      	bhi.n	8002a72 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	3b02      	subs	r3, #2
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d81b      	bhi.n	8002a6a <HAL_ADC_ConfigChannel+0x8e>
 8002a32:	a201      	add	r2, pc, #4	@ (adr r2, 8002a38 <HAL_ADC_ConfigChannel+0x5c>)
 8002a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a38:	08002a49 	.word	0x08002a49
 8002a3c:	08002a51 	.word	0x08002a51
 8002a40:	08002a59 	.word	0x08002a59
 8002a44:	08002a61 	.word	0x08002a61
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002a48:	230c      	movs	r3, #12
 8002a4a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a4e:	e010      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002a50:	2312      	movs	r3, #18
 8002a52:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a56:	e00c      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002a58:	2318      	movs	r3, #24
 8002a5a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a5e:	e008      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002a60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a68:	e003      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002a6a:	2306      	movs	r3, #6
 8002a6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a70:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6818      	ldr	r0, [r3, #0]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002a80:	f7ff f92a 	bl	8001cd8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fa58 	bl	8001f3e <LL_ADC_REG_IsConversionOngoing>
 8002a8e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fa64 	bl	8001f64 <LL_ADC_INJ_IsConversionOngoing>
 8002a9c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002aa0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f040 81a4 	bne.w	8002df2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002aaa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f040 819f 	bne.w	8002df2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6818      	ldr	r0, [r3, #0]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	6819      	ldr	r1, [r3, #0]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	f7ff f948 	bl	8001d56 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	695a      	ldr	r2, [r3, #20]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	08db      	lsrs	r3, r3, #3
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	d00a      	beq.n	8002afe <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6818      	ldr	r0, [r3, #0]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	6919      	ldr	r1, [r3, #16]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002af8:	f7ff f886 	bl	8001c08 <LL_ADC_SetOffset>
 8002afc:	e179      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2100      	movs	r1, #0
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff f8a3 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10a      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x14e>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2100      	movs	r1, #0
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff f898 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002b20:	4603      	mov	r3, r0
 8002b22:	0e9b      	lsrs	r3, r3, #26
 8002b24:	f003 021f 	and.w	r2, r3, #31
 8002b28:	e01e      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x18c>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2100      	movs	r1, #0
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff f88d 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002b36:	4603      	mov	r3, r0
 8002b38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b40:	fa93 f3a3 	rbit	r3, r3
 8002b44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b4c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002b58:	2320      	movs	r3, #32
 8002b5a:	e004      	b.n	8002b66 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002b5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002b60:	fab3 f383 	clz	r3, r3
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d105      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x1a4>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	0e9b      	lsrs	r3, r3, #26
 8002b7a:	f003 031f 	and.w	r3, r3, #31
 8002b7e:	e018      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x1d6>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b8c:	fa93 f3a3 	rbit	r3, r3
 8002b90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002b94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002b9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002ba4:	2320      	movs	r3, #32
 8002ba6:	e004      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002ba8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bac:	fab3 f383 	clz	r3, r3
 8002bb0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d106      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff f85c 	bl	8001c7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2101      	movs	r1, #1
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff f840 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10a      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x214>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2101      	movs	r1, #1
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff f835 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002be6:	4603      	mov	r3, r0
 8002be8:	0e9b      	lsrs	r3, r3, #26
 8002bea:	f003 021f 	and.w	r2, r3, #31
 8002bee:	e01e      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x252>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff f82a 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c06:	fa93 f3a3 	rbit	r3, r3
 8002c0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002c0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002c16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002c1e:	2320      	movs	r3, #32
 8002c20:	e004      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002c22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c26:	fab3 f383 	clz	r3, r3
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d105      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x26a>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	0e9b      	lsrs	r3, r3, #26
 8002c40:	f003 031f 	and.w	r3, r3, #31
 8002c44:	e018      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x29c>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c52:	fa93 f3a3 	rbit	r3, r3
 8002c56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002c5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c5e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002c62:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002c6a:	2320      	movs	r3, #32
 8002c6c:	e004      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002c6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d106      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2200      	movs	r2, #0
 8002c82:	2101      	movs	r1, #1
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7fe fff9 	bl	8001c7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2102      	movs	r1, #2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fe ffdd 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10a      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x2da>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2102      	movs	r1, #2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fe ffd2 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002cac:	4603      	mov	r3, r0
 8002cae:	0e9b      	lsrs	r3, r3, #26
 8002cb0:	f003 021f 	and.w	r2, r3, #31
 8002cb4:	e01e      	b.n	8002cf4 <HAL_ADC_ConfigChannel+0x318>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2102      	movs	r1, #2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fe ffc7 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ccc:	fa93 f3a3 	rbit	r3, r3
 8002cd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002cd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002cd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002cdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002ce4:	2320      	movs	r3, #32
 8002ce6:	e004      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002ce8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cec:	fab3 f383 	clz	r3, r3
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d105      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x330>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	0e9b      	lsrs	r3, r3, #26
 8002d06:	f003 031f 	and.w	r3, r3, #31
 8002d0a:	e014      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x35a>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d14:	fa93 f3a3 	rbit	r3, r3
 8002d18:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002d1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002d20:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002d28:	2320      	movs	r3, #32
 8002d2a:	e004      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002d2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d30:	fab3 f383 	clz	r3, r3
 8002d34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d106      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2102      	movs	r1, #2
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fe ff9a 	bl	8001c7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2103      	movs	r1, #3
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fe ff7e 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10a      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x398>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2103      	movs	r1, #3
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fe ff73 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	0e9b      	lsrs	r3, r3, #26
 8002d6e:	f003 021f 	and.w	r2, r3, #31
 8002d72:	e017      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x3c8>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2103      	movs	r1, #3
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fe ff68 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002d80:	4603      	mov	r3, r0
 8002d82:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002d8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d8e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002d90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002d96:	2320      	movs	r3, #32
 8002d98:	e003      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002d9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d9c:	fab3 f383 	clz	r3, r3
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d105      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x3e0>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	0e9b      	lsrs	r3, r3, #26
 8002db6:	f003 031f 	and.w	r3, r3, #31
 8002dba:	e011      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x404>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dc4:	fa93 f3a3 	rbit	r3, r3
 8002dc8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002dca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002dcc:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002dce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002dd4:	2320      	movs	r3, #32
 8002dd6:	e003      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002dd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002dda:	fab3 f383 	clz	r3, r3
 8002dde:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d106      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2200      	movs	r2, #0
 8002dea:	2103      	movs	r1, #3
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fe ff45 	bl	8001c7c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff f87a 	bl	8001ef0 <LL_ADC_IsEnabled>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f040 8140 	bne.w	8003084 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	6819      	ldr	r1, [r3, #0]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	461a      	mov	r2, r3
 8002e12:	f7fe ffcb 	bl	8001dac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	4a8f      	ldr	r2, [pc, #572]	@ (8003058 <HAL_ADC_ConfigChannel+0x67c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	f040 8131 	bne.w	8003084 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10b      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x46e>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	0e9b      	lsrs	r3, r3, #26
 8002e38:	3301      	adds	r3, #1
 8002e3a:	f003 031f 	and.w	r3, r3, #31
 8002e3e:	2b09      	cmp	r3, #9
 8002e40:	bf94      	ite	ls
 8002e42:	2301      	movls	r3, #1
 8002e44:	2300      	movhi	r3, #0
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	e019      	b.n	8002e7e <HAL_ADC_ConfigChannel+0x4a2>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e52:	fa93 f3a3 	rbit	r3, r3
 8002e56:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002e58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002e5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002e62:	2320      	movs	r3, #32
 8002e64:	e003      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002e66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e68:	fab3 f383 	clz	r3, r3
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	3301      	adds	r3, #1
 8002e70:	f003 031f 	and.w	r3, r3, #31
 8002e74:	2b09      	cmp	r3, #9
 8002e76:	bf94      	ite	ls
 8002e78:	2301      	movls	r3, #1
 8002e7a:	2300      	movhi	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d079      	beq.n	8002f76 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d107      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x4c2>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	0e9b      	lsrs	r3, r3, #26
 8002e94:	3301      	adds	r3, #1
 8002e96:	069b      	lsls	r3, r3, #26
 8002e98:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e9c:	e015      	b.n	8002eca <HAL_ADC_ConfigChannel+0x4ee>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ea6:	fa93 f3a3 	rbit	r3, r3
 8002eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002eac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002eae:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002eb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002eb6:	2320      	movs	r3, #32
 8002eb8:	e003      	b.n	8002ec2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002eba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ebc:	fab3 f383 	clz	r3, r3
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	069b      	lsls	r3, r3, #26
 8002ec6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d109      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x50e>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	0e9b      	lsrs	r3, r3, #26
 8002edc:	3301      	adds	r3, #1
 8002ede:	f003 031f 	and.w	r3, r3, #31
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee8:	e017      	b.n	8002f1a <HAL_ADC_ConfigChannel+0x53e>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ef2:	fa93 f3a3 	rbit	r3, r3
 8002ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002efa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002efc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002f02:	2320      	movs	r3, #32
 8002f04:	e003      	b.n	8002f0e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002f06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f08:	fab3 f383 	clz	r3, r3
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	3301      	adds	r3, #1
 8002f10:	f003 031f 	and.w	r3, r3, #31
 8002f14:	2101      	movs	r1, #1
 8002f16:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1a:	ea42 0103 	orr.w	r1, r2, r3
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10a      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x564>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	0e9b      	lsrs	r3, r3, #26
 8002f30:	3301      	adds	r3, #1
 8002f32:	f003 021f 	and.w	r2, r3, #31
 8002f36:	4613      	mov	r3, r2
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	4413      	add	r3, r2
 8002f3c:	051b      	lsls	r3, r3, #20
 8002f3e:	e018      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x596>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f48:	fa93 f3a3 	rbit	r3, r3
 8002f4c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f50:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002f58:	2320      	movs	r3, #32
 8002f5a:	e003      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f5e:	fab3 f383 	clz	r3, r3
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	3301      	adds	r3, #1
 8002f66:	f003 021f 	and.w	r2, r3, #31
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	4413      	add	r3, r2
 8002f70:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f72:	430b      	orrs	r3, r1
 8002f74:	e081      	b.n	800307a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d107      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x5b6>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	0e9b      	lsrs	r3, r3, #26
 8002f88:	3301      	adds	r3, #1
 8002f8a:	069b      	lsls	r3, r3, #26
 8002f8c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f90:	e015      	b.n	8002fbe <HAL_ADC_ConfigChannel+0x5e2>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f9a:	fa93 f3a3 	rbit	r3, r3
 8002f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002faa:	2320      	movs	r3, #32
 8002fac:	e003      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb0:	fab3 f383 	clz	r3, r3
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	069b      	lsls	r3, r3, #26
 8002fba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d109      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x602>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	0e9b      	lsrs	r3, r3, #26
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	f003 031f 	and.w	r3, r3, #31
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fdc:	e017      	b.n	800300e <HAL_ADC_ConfigChannel+0x632>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	fa93 f3a3 	rbit	r3, r3
 8002fea:	61bb      	str	r3, [r7, #24]
  return result;
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002ff6:	2320      	movs	r3, #32
 8002ff8:	e003      	b.n	8003002 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	fab3 f383 	clz	r3, r3
 8003000:	b2db      	uxtb	r3, r3
 8003002:	3301      	adds	r3, #1
 8003004:	f003 031f 	and.w	r3, r3, #31
 8003008:	2101      	movs	r1, #1
 800300a:	fa01 f303 	lsl.w	r3, r1, r3
 800300e:	ea42 0103 	orr.w	r1, r2, r3
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10d      	bne.n	800303a <HAL_ADC_ConfigChannel+0x65e>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	0e9b      	lsrs	r3, r3, #26
 8003024:	3301      	adds	r3, #1
 8003026:	f003 021f 	and.w	r2, r3, #31
 800302a:	4613      	mov	r3, r2
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	4413      	add	r3, r2
 8003030:	3b1e      	subs	r3, #30
 8003032:	051b      	lsls	r3, r3, #20
 8003034:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003038:	e01e      	b.n	8003078 <HAL_ADC_ConfigChannel+0x69c>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	fa93 f3a3 	rbit	r3, r3
 8003046:	60fb      	str	r3, [r7, #12]
  return result;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d104      	bne.n	800305c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003052:	2320      	movs	r3, #32
 8003054:	e006      	b.n	8003064 <HAL_ADC_ConfigChannel+0x688>
 8003056:	bf00      	nop
 8003058:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	fab3 f383 	clz	r3, r3
 8003062:	b2db      	uxtb	r3, r3
 8003064:	3301      	adds	r3, #1
 8003066:	f003 021f 	and.w	r2, r3, #31
 800306a:	4613      	mov	r3, r2
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	4413      	add	r3, r2
 8003070:	3b1e      	subs	r3, #30
 8003072:	051b      	lsls	r3, r3, #20
 8003074:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003078:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800307e:	4619      	mov	r1, r3
 8003080:	f7fe fe69 	bl	8001d56 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	4b44      	ldr	r3, [pc, #272]	@ (800319c <HAL_ADC_ConfigChannel+0x7c0>)
 800308a:	4013      	ands	r3, r2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d07a      	beq.n	8003186 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003090:	4843      	ldr	r0, [pc, #268]	@ (80031a0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003092:	f7fe fdab 	bl	8001bec <LL_ADC_GetCommonPathInternalCh>
 8003096:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a41      	ldr	r2, [pc, #260]	@ (80031a4 <HAL_ADC_ConfigChannel+0x7c8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d12c      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d126      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a3c      	ldr	r2, [pc, #240]	@ (80031a8 <HAL_ADC_ConfigChannel+0x7cc>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d004      	beq.n	80030c4 <HAL_ADC_ConfigChannel+0x6e8>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a3b      	ldr	r2, [pc, #236]	@ (80031ac <HAL_ADC_ConfigChannel+0x7d0>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d15d      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030cc:	4619      	mov	r1, r3
 80030ce:	4834      	ldr	r0, [pc, #208]	@ (80031a0 <HAL_ADC_ConfigChannel+0x7c4>)
 80030d0:	f7fe fd79 	bl	8001bc6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030d4:	4b36      	ldr	r3, [pc, #216]	@ (80031b0 <HAL_ADC_ConfigChannel+0x7d4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	099b      	lsrs	r3, r3, #6
 80030da:	4a36      	ldr	r2, [pc, #216]	@ (80031b4 <HAL_ADC_ConfigChannel+0x7d8>)
 80030dc:	fba2 2303 	umull	r2, r3, r2, r3
 80030e0:	099b      	lsrs	r3, r3, #6
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	4613      	mov	r3, r2
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80030ee:	e002      	b.n	80030f6 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1f9      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030fc:	e040      	b.n	8003180 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a2d      	ldr	r2, [pc, #180]	@ (80031b8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d118      	bne.n	800313a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003108:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800310c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d112      	bne.n	800313a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a23      	ldr	r2, [pc, #140]	@ (80031a8 <HAL_ADC_ConfigChannel+0x7cc>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d004      	beq.n	8003128 <HAL_ADC_ConfigChannel+0x74c>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a22      	ldr	r2, [pc, #136]	@ (80031ac <HAL_ADC_ConfigChannel+0x7d0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d12d      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003128:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800312c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003130:	4619      	mov	r1, r3
 8003132:	481b      	ldr	r0, [pc, #108]	@ (80031a0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003134:	f7fe fd47 	bl	8001bc6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003138:	e024      	b.n	8003184 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a1f      	ldr	r2, [pc, #124]	@ (80031bc <HAL_ADC_ConfigChannel+0x7e0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d120      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003144:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003148:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d11a      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a14      	ldr	r2, [pc, #80]	@ (80031a8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d115      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800315a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800315e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003162:	4619      	mov	r1, r3
 8003164:	480e      	ldr	r0, [pc, #56]	@ (80031a0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003166:	f7fe fd2e 	bl	8001bc6 <LL_ADC_SetCommonPathInternalCh>
 800316a:	e00c      	b.n	8003186 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003170:	f043 0220 	orr.w	r2, r3, #32
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800317e:	e002      	b.n	8003186 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003180:	bf00      	nop
 8003182:	e000      	b.n	8003186 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003184:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800318e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003192:	4618      	mov	r0, r3
 8003194:	37d8      	adds	r7, #216	@ 0xd8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	80080000 	.word	0x80080000
 80031a0:	50040300 	.word	0x50040300
 80031a4:	c7520000 	.word	0xc7520000
 80031a8:	50040000 	.word	0x50040000
 80031ac:	50040200 	.word	0x50040200
 80031b0:	20000018 	.word	0x20000018
 80031b4:	053e2d63 	.word	0x053e2d63
 80031b8:	cb840000 	.word	0xcb840000
 80031bc:	80000001 	.word	0x80000001

080031c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fe fe8d 	bl	8001ef0 <LL_ADC_IsEnabled>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d169      	bne.n	80032b0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	4b36      	ldr	r3, [pc, #216]	@ (80032bc <ADC_Enable+0xfc>)
 80031e4:	4013      	ands	r3, r2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00d      	beq.n	8003206 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ee:	f043 0210 	orr.w	r2, r3, #16
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031fa:	f043 0201 	orr.w	r2, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e055      	b.n	80032b2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7fe fe5c 	bl	8001ec8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003210:	482b      	ldr	r0, [pc, #172]	@ (80032c0 <ADC_Enable+0x100>)
 8003212:	f7fe fceb 	bl	8001bec <LL_ADC_GetCommonPathInternalCh>
 8003216:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003218:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800321c:	2b00      	cmp	r3, #0
 800321e:	d013      	beq.n	8003248 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003220:	4b28      	ldr	r3, [pc, #160]	@ (80032c4 <ADC_Enable+0x104>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	099b      	lsrs	r3, r3, #6
 8003226:	4a28      	ldr	r2, [pc, #160]	@ (80032c8 <ADC_Enable+0x108>)
 8003228:	fba2 2303 	umull	r2, r3, r2, r3
 800322c:	099b      	lsrs	r3, r3, #6
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	4613      	mov	r3, r2
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	4413      	add	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800323a:	e002      	b.n	8003242 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	3b01      	subs	r3, #1
 8003240:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1f9      	bne.n	800323c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003248:	f7fe fc7a 	bl	8001b40 <HAL_GetTick>
 800324c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800324e:	e028      	b.n	80032a2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f7fe fe4b 	bl	8001ef0 <LL_ADC_IsEnabled>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d104      	bne.n	800326a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f7fe fe2f 	bl	8001ec8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800326a:	f7fe fc69 	bl	8001b40 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d914      	bls.n	80032a2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b01      	cmp	r3, #1
 8003284:	d00d      	beq.n	80032a2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800328a:	f043 0210 	orr.w	r2, r3, #16
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003296:	f043 0201 	orr.w	r2, r3, #1
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e007      	b.n	80032b2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d1cf      	bne.n	8003250 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	8000003f 	.word	0x8000003f
 80032c0:	50040300 	.word	0x50040300
 80032c4:	20000018 	.word	0x20000018
 80032c8:	053e2d63 	.word	0x053e2d63

080032cc <LL_ADC_IsEnabled>:
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <LL_ADC_IsEnabled+0x18>
 80032e0:	2301      	movs	r3, #1
 80032e2:	e000      	b.n	80032e6 <LL_ADC_IsEnabled+0x1a>
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <LL_ADC_REG_IsConversionOngoing>:
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 0304 	and.w	r3, r3, #4
 8003302:	2b04      	cmp	r3, #4
 8003304:	d101      	bne.n	800330a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003306:	2301      	movs	r3, #1
 8003308:	e000      	b.n	800330c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800337c:	b590      	push	{r4, r7, lr}
 800337e:	b09f      	sub	sp, #124	@ 0x7c
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003392:	2b01      	cmp	r3, #1
 8003394:	d101      	bne.n	800339a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003396:	2302      	movs	r3, #2
 8003398:	e093      	b.n	80034c2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80033a2:	2300      	movs	r3, #0
 80033a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80033a6:	2300      	movs	r3, #0
 80033a8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a47      	ldr	r2, [pc, #284]	@ (80034cc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d102      	bne.n	80033ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80033b4:	4b46      	ldr	r3, [pc, #280]	@ (80034d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80033b6:	60bb      	str	r3, [r7, #8]
 80033b8:	e001      	b.n	80033be <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80033ba:	2300      	movs	r3, #0
 80033bc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10b      	bne.n	80033dc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c8:	f043 0220 	orr.w	r2, r3, #32
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e072      	b.n	80034c2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff ff87 	bl	80032f2 <LL_ADC_REG_IsConversionOngoing>
 80033e4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff ff81 	bl	80032f2 <LL_ADC_REG_IsConversionOngoing>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d154      	bne.n	80034a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80033f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d151      	bne.n	80034a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80033fc:	4b35      	ldr	r3, [pc, #212]	@ (80034d4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80033fe:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d02c      	beq.n	8003462 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003408:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	6859      	ldr	r1, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800341a:	035b      	lsls	r3, r3, #13
 800341c:	430b      	orrs	r3, r1
 800341e:	431a      	orrs	r2, r3
 8003420:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003422:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003424:	4829      	ldr	r0, [pc, #164]	@ (80034cc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003426:	f7ff ff51 	bl	80032cc <LL_ADC_IsEnabled>
 800342a:	4604      	mov	r4, r0
 800342c:	4828      	ldr	r0, [pc, #160]	@ (80034d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800342e:	f7ff ff4d 	bl	80032cc <LL_ADC_IsEnabled>
 8003432:	4603      	mov	r3, r0
 8003434:	431c      	orrs	r4, r3
 8003436:	4828      	ldr	r0, [pc, #160]	@ (80034d8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003438:	f7ff ff48 	bl	80032cc <LL_ADC_IsEnabled>
 800343c:	4603      	mov	r3, r0
 800343e:	4323      	orrs	r3, r4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d137      	bne.n	80034b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003444:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800344c:	f023 030f 	bic.w	r3, r3, #15
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	6811      	ldr	r1, [r2, #0]
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	6892      	ldr	r2, [r2, #8]
 8003458:	430a      	orrs	r2, r1
 800345a:	431a      	orrs	r2, r3
 800345c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800345e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003460:	e028      	b.n	80034b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003462:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800346a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800346c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800346e:	4817      	ldr	r0, [pc, #92]	@ (80034cc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003470:	f7ff ff2c 	bl	80032cc <LL_ADC_IsEnabled>
 8003474:	4604      	mov	r4, r0
 8003476:	4816      	ldr	r0, [pc, #88]	@ (80034d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003478:	f7ff ff28 	bl	80032cc <LL_ADC_IsEnabled>
 800347c:	4603      	mov	r3, r0
 800347e:	431c      	orrs	r4, r3
 8003480:	4815      	ldr	r0, [pc, #84]	@ (80034d8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003482:	f7ff ff23 	bl	80032cc <LL_ADC_IsEnabled>
 8003486:	4603      	mov	r3, r0
 8003488:	4323      	orrs	r3, r4
 800348a:	2b00      	cmp	r3, #0
 800348c:	d112      	bne.n	80034b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800348e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003496:	f023 030f 	bic.w	r3, r3, #15
 800349a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800349c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800349e:	e009      	b.n	80034b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a4:	f043 0220 	orr.w	r2, r3, #32
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80034b2:	e000      	b.n	80034b6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80034be:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	377c      	adds	r7, #124	@ 0x7c
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd90      	pop	{r4, r7, pc}
 80034ca:	bf00      	nop
 80034cc:	50040000 	.word	0x50040000
 80034d0:	50040100 	.word	0x50040100
 80034d4:	50040300 	.word	0x50040300
 80034d8:	50040200 	.word	0x50040200

080034dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003520 <__NVIC_SetPriorityGrouping+0x44>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034f8:	4013      	ands	r3, r2
 80034fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003504:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003508:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800350c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800350e:	4a04      	ldr	r2, [pc, #16]	@ (8003520 <__NVIC_SetPriorityGrouping+0x44>)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	60d3      	str	r3, [r2, #12]
}
 8003514:	bf00      	nop
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	e000ed00 	.word	0xe000ed00

08003524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003528:	4b04      	ldr	r3, [pc, #16]	@ (800353c <__NVIC_GetPriorityGrouping+0x18>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	0a1b      	lsrs	r3, r3, #8
 800352e:	f003 0307 	and.w	r3, r3, #7
}
 8003532:	4618      	mov	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	e000ed00 	.word	0xe000ed00

08003540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800354a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354e:	2b00      	cmp	r3, #0
 8003550:	db0b      	blt.n	800356a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003552:	79fb      	ldrb	r3, [r7, #7]
 8003554:	f003 021f 	and.w	r2, r3, #31
 8003558:	4907      	ldr	r1, [pc, #28]	@ (8003578 <__NVIC_EnableIRQ+0x38>)
 800355a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	2001      	movs	r0, #1
 8003562:	fa00 f202 	lsl.w	r2, r0, r2
 8003566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	e000e100 	.word	0xe000e100

0800357c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	6039      	str	r1, [r7, #0]
 8003586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358c:	2b00      	cmp	r3, #0
 800358e:	db0a      	blt.n	80035a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	b2da      	uxtb	r2, r3
 8003594:	490c      	ldr	r1, [pc, #48]	@ (80035c8 <__NVIC_SetPriority+0x4c>)
 8003596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359a:	0112      	lsls	r2, r2, #4
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	440b      	add	r3, r1
 80035a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035a4:	e00a      	b.n	80035bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	4908      	ldr	r1, [pc, #32]	@ (80035cc <__NVIC_SetPriority+0x50>)
 80035ac:	79fb      	ldrb	r3, [r7, #7]
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	3b04      	subs	r3, #4
 80035b4:	0112      	lsls	r2, r2, #4
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	440b      	add	r3, r1
 80035ba:	761a      	strb	r2, [r3, #24]
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	e000e100 	.word	0xe000e100
 80035cc:	e000ed00 	.word	0xe000ed00

080035d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b089      	sub	sp, #36	@ 0x24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f1c3 0307 	rsb	r3, r3, #7
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	bf28      	it	cs
 80035ee:	2304      	movcs	r3, #4
 80035f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	3304      	adds	r3, #4
 80035f6:	2b06      	cmp	r3, #6
 80035f8:	d902      	bls.n	8003600 <NVIC_EncodePriority+0x30>
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	3b03      	subs	r3, #3
 80035fe:	e000      	b.n	8003602 <NVIC_EncodePriority+0x32>
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003604:	f04f 32ff 	mov.w	r2, #4294967295
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43da      	mvns	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	401a      	ands	r2, r3
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003618:	f04f 31ff 	mov.w	r1, #4294967295
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	fa01 f303 	lsl.w	r3, r1, r3
 8003622:	43d9      	mvns	r1, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003628:	4313      	orrs	r3, r2
         );
}
 800362a:	4618      	mov	r0, r3
 800362c:	3724      	adds	r7, #36	@ 0x24
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
	...

08003638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3b01      	subs	r3, #1
 8003644:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003648:	d301      	bcc.n	800364e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800364a:	2301      	movs	r3, #1
 800364c:	e00f      	b.n	800366e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800364e:	4a0a      	ldr	r2, [pc, #40]	@ (8003678 <SysTick_Config+0x40>)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3b01      	subs	r3, #1
 8003654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003656:	210f      	movs	r1, #15
 8003658:	f04f 30ff 	mov.w	r0, #4294967295
 800365c:	f7ff ff8e 	bl	800357c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003660:	4b05      	ldr	r3, [pc, #20]	@ (8003678 <SysTick_Config+0x40>)
 8003662:	2200      	movs	r2, #0
 8003664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003666:	4b04      	ldr	r3, [pc, #16]	@ (8003678 <SysTick_Config+0x40>)
 8003668:	2207      	movs	r2, #7
 800366a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	e000e010 	.word	0xe000e010

0800367c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7ff ff29 	bl	80034dc <__NVIC_SetPriorityGrouping>
}
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b086      	sub	sp, #24
 8003696:	af00      	add	r7, sp, #0
 8003698:	4603      	mov	r3, r0
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	607a      	str	r2, [r7, #4]
 800369e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036a0:	2300      	movs	r3, #0
 80036a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036a4:	f7ff ff3e 	bl	8003524 <__NVIC_GetPriorityGrouping>
 80036a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	68b9      	ldr	r1, [r7, #8]
 80036ae:	6978      	ldr	r0, [r7, #20]
 80036b0:	f7ff ff8e 	bl	80035d0 <NVIC_EncodePriority>
 80036b4:	4602      	mov	r2, r0
 80036b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ba:	4611      	mov	r1, r2
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff ff5d 	bl	800357c <__NVIC_SetPriority>
}
 80036c2:	bf00      	nop
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b082      	sub	sp, #8
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	4603      	mov	r3, r0
 80036d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff ff31 	bl	8003540 <__NVIC_EnableIRQ>
}
 80036de:	bf00      	nop
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b082      	sub	sp, #8
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7ff ffa2 	bl	8003638 <SysTick_Config>
 80036f4:	4603      	mov	r3, r0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036fe:	b480      	push	{r7}
 8003700:	b085      	sub	sp, #20
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d008      	beq.n	8003728 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2204      	movs	r2, #4
 800371a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e022      	b.n	800376e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 020e 	bic.w	r2, r2, #14
 8003736:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0201 	bic.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374c:	f003 021c 	and.w	r2, r3, #28
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003754:	2101      	movs	r1, #1
 8003756:	fa01 f202 	lsl.w	r2, r1, r2
 800375a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800376c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800376e:	4618      	mov	r0, r3
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b084      	sub	sp, #16
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d005      	beq.n	800379e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2204      	movs	r2, #4
 8003796:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	73fb      	strb	r3, [r7, #15]
 800379c:	e029      	b.n	80037f2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 020e 	bic.w	r2, r2, #14
 80037ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0201 	bic.w	r2, r2, #1
 80037bc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c2:	f003 021c 	and.w	r2, r3, #28
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ca:	2101      	movs	r1, #1
 80037cc:	fa01 f202 	lsl.w	r2, r1, r2
 80037d0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	4798      	blx	r3
    }
  }
  return status;
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800380a:	e17f      	b.n	8003b0c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	2101      	movs	r1, #1
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	fa01 f303 	lsl.w	r3, r1, r3
 8003818:	4013      	ands	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 8171 	beq.w	8003b06 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	2b01      	cmp	r3, #1
 800382e:	d005      	beq.n	800383c <HAL_GPIO_Init+0x40>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 0303 	and.w	r3, r3, #3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d130      	bne.n	800389e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	2203      	movs	r2, #3
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	43db      	mvns	r3, r3
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4013      	ands	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003872:	2201      	movs	r2, #1
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	43db      	mvns	r3, r3
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	4013      	ands	r3, r2
 8003880:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	091b      	lsrs	r3, r3, #4
 8003888:	f003 0201 	and.w	r2, r3, #1
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	2b03      	cmp	r3, #3
 80038a8:	d118      	bne.n	80038dc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80038b0:	2201      	movs	r2, #1
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	4013      	ands	r3, r2
 80038be:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	08db      	lsrs	r3, r3, #3
 80038c6:	f003 0201 	and.w	r2, r3, #1
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 0303 	and.w	r3, r3, #3
 80038e4:	2b03      	cmp	r3, #3
 80038e6:	d017      	beq.n	8003918 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	2203      	movs	r2, #3
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	43db      	mvns	r3, r3
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4013      	ands	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	4313      	orrs	r3, r2
 8003910:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f003 0303 	and.w	r3, r3, #3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d123      	bne.n	800396c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	08da      	lsrs	r2, r3, #3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3208      	adds	r2, #8
 800392c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003930:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	220f      	movs	r2, #15
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	43db      	mvns	r3, r3
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	4013      	ands	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	08da      	lsrs	r2, r3, #3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3208      	adds	r2, #8
 8003966:	6939      	ldr	r1, [r7, #16]
 8003968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	2203      	movs	r2, #3
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	43db      	mvns	r3, r3
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	4013      	ands	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 0203 	and.w	r2, r3, #3
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 80ac 	beq.w	8003b06 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ae:	4b5f      	ldr	r3, [pc, #380]	@ (8003b2c <HAL_GPIO_Init+0x330>)
 80039b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b2:	4a5e      	ldr	r2, [pc, #376]	@ (8003b2c <HAL_GPIO_Init+0x330>)
 80039b4:	f043 0301 	orr.w	r3, r3, #1
 80039b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80039ba:	4b5c      	ldr	r3, [pc, #368]	@ (8003b2c <HAL_GPIO_Init+0x330>)
 80039bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	60bb      	str	r3, [r7, #8]
 80039c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039c6:	4a5a      	ldr	r2, [pc, #360]	@ (8003b30 <HAL_GPIO_Init+0x334>)
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	089b      	lsrs	r3, r3, #2
 80039cc:	3302      	adds	r3, #2
 80039ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	220f      	movs	r2, #15
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	43db      	mvns	r3, r3
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4013      	ands	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80039f0:	d025      	beq.n	8003a3e <HAL_GPIO_Init+0x242>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a4f      	ldr	r2, [pc, #316]	@ (8003b34 <HAL_GPIO_Init+0x338>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d01f      	beq.n	8003a3a <HAL_GPIO_Init+0x23e>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a4e      	ldr	r2, [pc, #312]	@ (8003b38 <HAL_GPIO_Init+0x33c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d019      	beq.n	8003a36 <HAL_GPIO_Init+0x23a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a4d      	ldr	r2, [pc, #308]	@ (8003b3c <HAL_GPIO_Init+0x340>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d013      	beq.n	8003a32 <HAL_GPIO_Init+0x236>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a4c      	ldr	r2, [pc, #304]	@ (8003b40 <HAL_GPIO_Init+0x344>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d00d      	beq.n	8003a2e <HAL_GPIO_Init+0x232>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a4b      	ldr	r2, [pc, #300]	@ (8003b44 <HAL_GPIO_Init+0x348>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d007      	beq.n	8003a2a <HAL_GPIO_Init+0x22e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a4a      	ldr	r2, [pc, #296]	@ (8003b48 <HAL_GPIO_Init+0x34c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d101      	bne.n	8003a26 <HAL_GPIO_Init+0x22a>
 8003a22:	2306      	movs	r3, #6
 8003a24:	e00c      	b.n	8003a40 <HAL_GPIO_Init+0x244>
 8003a26:	2307      	movs	r3, #7
 8003a28:	e00a      	b.n	8003a40 <HAL_GPIO_Init+0x244>
 8003a2a:	2305      	movs	r3, #5
 8003a2c:	e008      	b.n	8003a40 <HAL_GPIO_Init+0x244>
 8003a2e:	2304      	movs	r3, #4
 8003a30:	e006      	b.n	8003a40 <HAL_GPIO_Init+0x244>
 8003a32:	2303      	movs	r3, #3
 8003a34:	e004      	b.n	8003a40 <HAL_GPIO_Init+0x244>
 8003a36:	2302      	movs	r3, #2
 8003a38:	e002      	b.n	8003a40 <HAL_GPIO_Init+0x244>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e000      	b.n	8003a40 <HAL_GPIO_Init+0x244>
 8003a3e:	2300      	movs	r3, #0
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	f002 0203 	and.w	r2, r2, #3
 8003a46:	0092      	lsls	r2, r2, #2
 8003a48:	4093      	lsls	r3, r2
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a50:	4937      	ldr	r1, [pc, #220]	@ (8003b30 <HAL_GPIO_Init+0x334>)
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	089b      	lsrs	r3, r3, #2
 8003a56:	3302      	adds	r3, #2
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a5e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b4c <HAL_GPIO_Init+0x350>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	43db      	mvns	r3, r3
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a82:	4a32      	ldr	r2, [pc, #200]	@ (8003b4c <HAL_GPIO_Init+0x350>)
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a88:	4b30      	ldr	r3, [pc, #192]	@ (8003b4c <HAL_GPIO_Init+0x350>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	43db      	mvns	r3, r3
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4013      	ands	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003aac:	4a27      	ldr	r2, [pc, #156]	@ (8003b4c <HAL_GPIO_Init+0x350>)
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ab2:	4b26      	ldr	r3, [pc, #152]	@ (8003b4c <HAL_GPIO_Init+0x350>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	43db      	mvns	r3, r3
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ad6:	4a1d      	ldr	r2, [pc, #116]	@ (8003b4c <HAL_GPIO_Init+0x350>)
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003adc:	4b1b      	ldr	r3, [pc, #108]	@ (8003b4c <HAL_GPIO_Init+0x350>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b00:	4a12      	ldr	r2, [pc, #72]	@ (8003b4c <HAL_GPIO_Init+0x350>)
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	fa22 f303 	lsr.w	r3, r2, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f47f ae78 	bne.w	800380c <HAL_GPIO_Init+0x10>
  }
}
 8003b1c:	bf00      	nop
 8003b1e:	bf00      	nop
 8003b20:	371c      	adds	r7, #28
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	40010000 	.word	0x40010000
 8003b34:	48000400 	.word	0x48000400
 8003b38:	48000800 	.word	0x48000800
 8003b3c:	48000c00 	.word	0x48000c00
 8003b40:	48001000 	.word	0x48001000
 8003b44:	48001400 	.word	0x48001400
 8003b48:	48001800 	.word	0x48001800
 8003b4c:	40010400 	.word	0x40010400

08003b50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	887b      	ldrh	r3, [r7, #2]
 8003b62:	4013      	ands	r3, r2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
 8003b6c:	e001      	b.n	8003b72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	807b      	strh	r3, [r7, #2]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b90:	787b      	ldrb	r3, [r7, #1]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b96:	887a      	ldrh	r2, [r7, #2]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b9c:	e002      	b.n	8003ba4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b9e:	887a      	ldrh	r2, [r7, #2]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bc2:	887a      	ldrh	r2, [r7, #2]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	041a      	lsls	r2, r3, #16
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	43d9      	mvns	r1, r3
 8003bce:	887b      	ldrh	r3, [r7, #2]
 8003bd0:	400b      	ands	r3, r1
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	619a      	str	r2, [r3, #24]
}
 8003bd8:	bf00      	nop
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	4603      	mov	r3, r0
 8003bec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003bee:	4b08      	ldr	r3, [pc, #32]	@ (8003c10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bf0:	695a      	ldr	r2, [r3, #20]
 8003bf2:	88fb      	ldrh	r3, [r7, #6]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d006      	beq.n	8003c08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bfa:	4a05      	ldr	r2, [pc, #20]	@ (8003c10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bfc:	88fb      	ldrh	r3, [r7, #6]
 8003bfe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c00:	88fb      	ldrh	r3, [r7, #6]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fc fe42 	bl	800088c <HAL_GPIO_EXTI_Callback>
  }
}
 8003c08:	bf00      	nop
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40010400 	.word	0x40010400

08003c14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e08d      	b.n	8003d42 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fd fd20 	bl	8001680 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2224      	movs	r2, #36	@ 0x24
 8003c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0201 	bic.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d107      	bne.n	8003c8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c8a:	609a      	str	r2, [r3, #8]
 8003c8c:	e006      	b.n	8003c9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003c9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d108      	bne.n	8003cb6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cb2:	605a      	str	r2, [r3, #4]
 8003cb4:	e007      	b.n	8003cc6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6812      	ldr	r2, [r2, #0]
 8003cd0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003cd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ce8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691a      	ldr	r2, [r3, #16]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	69d9      	ldr	r1, [r3, #28]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a1a      	ldr	r2, [r3, #32]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0201 	orr.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
	...

08003d4c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	4608      	mov	r0, r1
 8003d56:	4611      	mov	r1, r2
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	817b      	strh	r3, [r7, #10]
 8003d5e:	460b      	mov	r3, r1
 8003d60:	813b      	strh	r3, [r7, #8]
 8003d62:	4613      	mov	r3, r2
 8003d64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b20      	cmp	r3, #32
 8003d70:	f040 80f9 	bne.w	8003f66 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <HAL_I2C_Mem_Write+0x34>
 8003d7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d105      	bne.n	8003d8c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d86:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0ed      	b.n	8003f68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d101      	bne.n	8003d9a <HAL_I2C_Mem_Write+0x4e>
 8003d96:	2302      	movs	r3, #2
 8003d98:	e0e6      	b.n	8003f68 <HAL_I2C_Mem_Write+0x21c>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003da2:	f7fd fecd 	bl	8001b40 <HAL_GetTick>
 8003da6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	2319      	movs	r3, #25
 8003dae:	2201      	movs	r2, #1
 8003db0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 f955 	bl	8004064 <I2C_WaitOnFlagUntilTimeout>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e0d1      	b.n	8003f68 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2221      	movs	r2, #33	@ 0x21
 8003dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2240      	movs	r2, #64	@ 0x40
 8003dd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a3a      	ldr	r2, [r7, #32]
 8003dde:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003de4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dec:	88f8      	ldrh	r0, [r7, #6]
 8003dee:	893a      	ldrh	r2, [r7, #8]
 8003df0:	8979      	ldrh	r1, [r7, #10]
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	9301      	str	r3, [sp, #4]
 8003df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 f8b9 	bl	8003f74 <I2C_RequestMemoryWrite>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e0a9      	b.n	8003f68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2bff      	cmp	r3, #255	@ 0xff
 8003e1c:	d90e      	bls.n	8003e3c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	22ff      	movs	r2, #255	@ 0xff
 8003e22:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	8979      	ldrh	r1, [r7, #10]
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 fad9 	bl	80043ec <I2C_TransferConfig>
 8003e3a:	e00f      	b.n	8003e5c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	8979      	ldrh	r1, [r7, #10]
 8003e4e:	2300      	movs	r3, #0
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 fac8 	bl	80043ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 f958 	bl	8004116 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e07b      	b.n	8003f68 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e74:	781a      	ldrb	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e80:	1c5a      	adds	r2, r3, #1
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d034      	beq.n	8003f14 <HAL_I2C_Mem_Write+0x1c8>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d130      	bne.n	8003f14 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2180      	movs	r1, #128	@ 0x80
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 f8d1 	bl	8004064 <I2C_WaitOnFlagUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e04d      	b.n	8003f68 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	2bff      	cmp	r3, #255	@ 0xff
 8003ed4:	d90e      	bls.n	8003ef4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	22ff      	movs	r2, #255	@ 0xff
 8003eda:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	8979      	ldrh	r1, [r7, #10]
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 fa7d 	bl	80043ec <I2C_TransferConfig>
 8003ef2:	e00f      	b.n	8003f14 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	8979      	ldrh	r1, [r7, #10]
 8003f06:	2300      	movs	r3, #0
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 fa6c 	bl	80043ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d19e      	bne.n	8003e5c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 f93e 	bl	80041a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e01a      	b.n	8003f68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2220      	movs	r2, #32
 8003f38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6859      	ldr	r1, [r3, #4]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4b0a      	ldr	r3, [pc, #40]	@ (8003f70 <HAL_I2C_Mem_Write+0x224>)
 8003f46:	400b      	ands	r3, r1
 8003f48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	e000      	b.n	8003f68 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003f66:	2302      	movs	r3, #2
  }
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	fe00e800 	.word	0xfe00e800

08003f74 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af02      	add	r7, sp, #8
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	4608      	mov	r0, r1
 8003f7e:	4611      	mov	r1, r2
 8003f80:	461a      	mov	r2, r3
 8003f82:	4603      	mov	r3, r0
 8003f84:	817b      	strh	r3, [r7, #10]
 8003f86:	460b      	mov	r3, r1
 8003f88:	813b      	strh	r3, [r7, #8]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003f8e:	88fb      	ldrh	r3, [r7, #6]
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	8979      	ldrh	r1, [r7, #10]
 8003f94:	4b20      	ldr	r3, [pc, #128]	@ (8004018 <I2C_RequestMemoryWrite+0xa4>)
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 fa25 	bl	80043ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fa2:	69fa      	ldr	r2, [r7, #28]
 8003fa4:	69b9      	ldr	r1, [r7, #24]
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 f8b5 	bl	8004116 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e02c      	b.n	8004010 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fb6:	88fb      	ldrh	r3, [r7, #6]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d105      	bne.n	8003fc8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fbc:	893b      	ldrh	r3, [r7, #8]
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	629a      	str	r2, [r3, #40]	@ 0x28
 8003fc6:	e015      	b.n	8003ff4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003fc8:	893b      	ldrh	r3, [r7, #8]
 8003fca:	0a1b      	lsrs	r3, r3, #8
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fd6:	69fa      	ldr	r2, [r7, #28]
 8003fd8:	69b9      	ldr	r1, [r7, #24]
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 f89b 	bl	8004116 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e012      	b.n	8004010 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fea:	893b      	ldrh	r3, [r7, #8]
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	2180      	movs	r1, #128	@ 0x80
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 f830 	bl	8004064 <I2C_WaitOnFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e000      	b.n	8004010 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	80002000 	.word	0x80002000

0800401c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b02      	cmp	r3, #2
 8004030:	d103      	bne.n	800403a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2200      	movs	r2, #0
 8004038:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b01      	cmp	r3, #1
 8004046:	d007      	beq.n	8004058 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699a      	ldr	r2, [r3, #24]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	619a      	str	r2, [r3, #24]
  }
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	4613      	mov	r3, r2
 8004072:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004074:	e03b      	b.n	80040ee <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	6839      	ldr	r1, [r7, #0]
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 f8d6 	bl	800422c <I2C_IsErrorOccurred>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e041      	b.n	800410e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004090:	d02d      	beq.n	80040ee <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004092:	f7fd fd55 	bl	8001b40 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d302      	bcc.n	80040a8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d122      	bne.n	80040ee <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	699a      	ldr	r2, [r3, #24]
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	4013      	ands	r3, r2
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	bf0c      	ite	eq
 80040b8:	2301      	moveq	r3, #1
 80040ba:	2300      	movne	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	461a      	mov	r2, r3
 80040c0:	79fb      	ldrb	r3, [r7, #7]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d113      	bne.n	80040ee <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ca:	f043 0220 	orr.w	r2, r3, #32
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e00f      	b.n	800410e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	699a      	ldr	r2, [r3, #24]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	4013      	ands	r3, r2
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	bf0c      	ite	eq
 80040fe:	2301      	moveq	r3, #1
 8004100:	2300      	movne	r3, #0
 8004102:	b2db      	uxtb	r3, r3
 8004104:	461a      	mov	r2, r3
 8004106:	79fb      	ldrb	r3, [r7, #7]
 8004108:	429a      	cmp	r2, r3
 800410a:	d0b4      	beq.n	8004076 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b084      	sub	sp, #16
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004122:	e033      	b.n	800418c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	68b9      	ldr	r1, [r7, #8]
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 f87f 	bl	800422c <I2C_IsErrorOccurred>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e031      	b.n	800419c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413e:	d025      	beq.n	800418c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004140:	f7fd fcfe 	bl	8001b40 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	429a      	cmp	r2, r3
 800414e:	d302      	bcc.n	8004156 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d11a      	bne.n	800418c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b02      	cmp	r3, #2
 8004162:	d013      	beq.n	800418c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004168:	f043 0220 	orr.w	r2, r3, #32
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e007      	b.n	800419c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b02      	cmp	r3, #2
 8004198:	d1c4      	bne.n	8004124 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041b0:	e02f      	b.n	8004212 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	68b9      	ldr	r1, [r7, #8]
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 f838 	bl	800422c <I2C_IsErrorOccurred>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e02d      	b.n	8004222 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c6:	f7fd fcbb 	bl	8001b40 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d302      	bcc.n	80041dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d11a      	bne.n	8004212 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	2b20      	cmp	r3, #32
 80041e8:	d013      	beq.n	8004212 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ee:	f043 0220 	orr.w	r2, r3, #32
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2220      	movs	r2, #32
 80041fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e007      	b.n	8004222 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	f003 0320 	and.w	r3, r3, #32
 800421c:	2b20      	cmp	r3, #32
 800421e:	d1c8      	bne.n	80041b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
	...

0800422c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b08a      	sub	sp, #40	@ 0x28
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004238:	2300      	movs	r3, #0
 800423a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004246:	2300      	movs	r3, #0
 8004248:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	f003 0310 	and.w	r3, r3, #16
 8004254:	2b00      	cmp	r3, #0
 8004256:	d068      	beq.n	800432a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2210      	movs	r2, #16
 800425e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004260:	e049      	b.n	80042f6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004268:	d045      	beq.n	80042f6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800426a:	f7fd fc69 	bl	8001b40 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	429a      	cmp	r2, r3
 8004278:	d302      	bcc.n	8004280 <I2C_IsErrorOccurred+0x54>
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d13a      	bne.n	80042f6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800428a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004292:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800429e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042a2:	d121      	bne.n	80042e8 <I2C_IsErrorOccurred+0xbc>
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042aa:	d01d      	beq.n	80042e8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80042ac:	7cfb      	ldrb	r3, [r7, #19]
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	d01a      	beq.n	80042e8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042c0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80042c2:	f7fd fc3d 	bl	8001b40 <HAL_GetTick>
 80042c6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042c8:	e00e      	b.n	80042e8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80042ca:	f7fd fc39 	bl	8001b40 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b19      	cmp	r3, #25
 80042d6:	d907      	bls.n	80042e8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	f043 0320 	orr.w	r3, r3, #32
 80042de:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80042e6:	e006      	b.n	80042f6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	f003 0320 	and.w	r3, r3, #32
 80042f2:	2b20      	cmp	r3, #32
 80042f4:	d1e9      	bne.n	80042ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b20      	cmp	r3, #32
 8004302:	d003      	beq.n	800430c <I2C_IsErrorOccurred+0xe0>
 8004304:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0aa      	beq.n	8004262 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800430c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004310:	2b00      	cmp	r3, #0
 8004312:	d103      	bne.n	800431c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2220      	movs	r2, #32
 800431a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	f043 0304 	orr.w	r3, r3, #4
 8004322:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00b      	beq.n	8004354 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	f043 0301 	orr.w	r3, r3, #1
 8004342:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800434c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00b      	beq.n	8004376 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	f043 0308 	orr.w	r3, r3, #8
 8004364:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800436e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00b      	beq.n	8004398 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	f043 0302 	orr.w	r3, r3, #2
 8004386:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004390:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004398:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800439c:	2b00      	cmp	r3, #0
 800439e:	d01c      	beq.n	80043da <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f7ff fe3b 	bl	800401c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6859      	ldr	r1, [r3, #4]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	4b0d      	ldr	r3, [pc, #52]	@ (80043e8 <I2C_IsErrorOccurred+0x1bc>)
 80043b2:	400b      	ands	r3, r1
 80043b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	431a      	orrs	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80043da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3728      	adds	r7, #40	@ 0x28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	fe00e800 	.word	0xfe00e800

080043ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	607b      	str	r3, [r7, #4]
 80043f6:	460b      	mov	r3, r1
 80043f8:	817b      	strh	r3, [r7, #10]
 80043fa:	4613      	mov	r3, r2
 80043fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043fe:	897b      	ldrh	r3, [r7, #10]
 8004400:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004404:	7a7b      	ldrb	r3, [r7, #9]
 8004406:	041b      	lsls	r3, r3, #16
 8004408:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800440c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	4313      	orrs	r3, r2
 8004416:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800441a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	0d5b      	lsrs	r3, r3, #21
 8004426:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800442a:	4b08      	ldr	r3, [pc, #32]	@ (800444c <I2C_TransferConfig+0x60>)
 800442c:	430b      	orrs	r3, r1
 800442e:	43db      	mvns	r3, r3
 8004430:	ea02 0103 	and.w	r1, r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	430a      	orrs	r2, r1
 800443c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800443e:	bf00      	nop
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	03ff63ff 	.word	0x03ff63ff

08004450 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b20      	cmp	r3, #32
 8004464:	d138      	bne.n	80044d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800446c:	2b01      	cmp	r3, #1
 800446e:	d101      	bne.n	8004474 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004470:	2302      	movs	r3, #2
 8004472:	e032      	b.n	80044da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2224      	movs	r2, #36	@ 0x24
 8004480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0201 	bic.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80044a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6819      	ldr	r1, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0201 	orr.w	r2, r2, #1
 80044c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80044d4:	2300      	movs	r3, #0
 80044d6:	e000      	b.n	80044da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80044d8:	2302      	movs	r3, #2
  }
}
 80044da:	4618      	mov	r0, r3
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b085      	sub	sp, #20
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b20      	cmp	r3, #32
 80044fa:	d139      	bne.n	8004570 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004502:	2b01      	cmp	r3, #1
 8004504:	d101      	bne.n	800450a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004506:	2302      	movs	r3, #2
 8004508:	e033      	b.n	8004572 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2224      	movs	r2, #36	@ 0x24
 8004516:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0201 	bic.w	r2, r2, #1
 8004528:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004538:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	021b      	lsls	r3, r3, #8
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	4313      	orrs	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 0201 	orr.w	r2, r2, #1
 800455a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800456c:	2300      	movs	r3, #0
 800456e:	e000      	b.n	8004572 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004570:	2302      	movs	r3, #2
  }
}
 8004572:	4618      	mov	r0, r3
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
	...

08004580 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004584:	4b04      	ldr	r3, [pc, #16]	@ (8004598 <HAL_PWREx_GetVoltageRange+0x18>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800458c:	4618      	mov	r0, r3
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	40007000 	.word	0x40007000

0800459c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045aa:	d130      	bne.n	800460e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80045ac:	4b23      	ldr	r3, [pc, #140]	@ (800463c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80045b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045b8:	d038      	beq.n	800462c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045ba:	4b20      	ldr	r3, [pc, #128]	@ (800463c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80045c2:	4a1e      	ldr	r2, [pc, #120]	@ (800463c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80045ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004640 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2232      	movs	r2, #50	@ 0x32
 80045d0:	fb02 f303 	mul.w	r3, r2, r3
 80045d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80045d6:	fba2 2303 	umull	r2, r3, r2, r3
 80045da:	0c9b      	lsrs	r3, r3, #18
 80045dc:	3301      	adds	r3, #1
 80045de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045e0:	e002      	b.n	80045e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	3b01      	subs	r3, #1
 80045e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045e8:	4b14      	ldr	r3, [pc, #80]	@ (800463c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045f4:	d102      	bne.n	80045fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1f2      	bne.n	80045e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045fc:	4b0f      	ldr	r3, [pc, #60]	@ (800463c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004604:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004608:	d110      	bne.n	800462c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e00f      	b.n	800462e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800460e:	4b0b      	ldr	r3, [pc, #44]	@ (800463c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800461a:	d007      	beq.n	800462c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800461c:	4b07      	ldr	r3, [pc, #28]	@ (800463c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004624:	4a05      	ldr	r2, [pc, #20]	@ (800463c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004626:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800462a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40007000 	.word	0x40007000
 8004640:	20000018 	.word	0x20000018
 8004644:	431bde83 	.word	0x431bde83

08004648 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b088      	sub	sp, #32
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e3ca      	b.n	8004df0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800465a:	4b97      	ldr	r3, [pc, #604]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 030c 	and.w	r3, r3, #12
 8004662:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004664:	4b94      	ldr	r3, [pc, #592]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f003 0303 	and.w	r3, r3, #3
 800466c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0310 	and.w	r3, r3, #16
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 80e4 	beq.w	8004844 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d007      	beq.n	8004692 <HAL_RCC_OscConfig+0x4a>
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	2b0c      	cmp	r3, #12
 8004686:	f040 808b 	bne.w	80047a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2b01      	cmp	r3, #1
 800468e:	f040 8087 	bne.w	80047a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004692:	4b89      	ldr	r3, [pc, #548]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d005      	beq.n	80046aa <HAL_RCC_OscConfig+0x62>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e3a2      	b.n	8004df0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1a      	ldr	r2, [r3, #32]
 80046ae:	4b82      	ldr	r3, [pc, #520]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d004      	beq.n	80046c4 <HAL_RCC_OscConfig+0x7c>
 80046ba:	4b7f      	ldr	r3, [pc, #508]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046c2:	e005      	b.n	80046d0 <HAL_RCC_OscConfig+0x88>
 80046c4:	4b7c      	ldr	r3, [pc, #496]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 80046c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046ca:	091b      	lsrs	r3, r3, #4
 80046cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d223      	bcs.n	800471c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 fd55 	bl	8005188 <RCC_SetFlashLatencyFromMSIRange>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e383      	b.n	8004df0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046e8:	4b73      	ldr	r3, [pc, #460]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a72      	ldr	r2, [pc, #456]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 80046ee:	f043 0308 	orr.w	r3, r3, #8
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	4b70      	ldr	r3, [pc, #448]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	496d      	ldr	r1, [pc, #436]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 8004702:	4313      	orrs	r3, r2
 8004704:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004706:	4b6c      	ldr	r3, [pc, #432]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	021b      	lsls	r3, r3, #8
 8004714:	4968      	ldr	r1, [pc, #416]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 8004716:	4313      	orrs	r3, r2
 8004718:	604b      	str	r3, [r1, #4]
 800471a:	e025      	b.n	8004768 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800471c:	4b66      	ldr	r3, [pc, #408]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a65      	ldr	r2, [pc, #404]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 8004722:	f043 0308 	orr.w	r3, r3, #8
 8004726:	6013      	str	r3, [r2, #0]
 8004728:	4b63      	ldr	r3, [pc, #396]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	4960      	ldr	r1, [pc, #384]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 8004736:	4313      	orrs	r3, r2
 8004738:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800473a:	4b5f      	ldr	r3, [pc, #380]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	021b      	lsls	r3, r3, #8
 8004748:	495b      	ldr	r1, [pc, #364]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 800474a:	4313      	orrs	r3, r2
 800474c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d109      	bne.n	8004768 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	4618      	mov	r0, r3
 800475a:	f000 fd15 	bl	8005188 <RCC_SetFlashLatencyFromMSIRange>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e343      	b.n	8004df0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004768:	f000 fc4a 	bl	8005000 <HAL_RCC_GetSysClockFreq>
 800476c:	4602      	mov	r2, r0
 800476e:	4b52      	ldr	r3, [pc, #328]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	091b      	lsrs	r3, r3, #4
 8004774:	f003 030f 	and.w	r3, r3, #15
 8004778:	4950      	ldr	r1, [pc, #320]	@ (80048bc <HAL_RCC_OscConfig+0x274>)
 800477a:	5ccb      	ldrb	r3, [r1, r3]
 800477c:	f003 031f 	and.w	r3, r3, #31
 8004780:	fa22 f303 	lsr.w	r3, r2, r3
 8004784:	4a4e      	ldr	r2, [pc, #312]	@ (80048c0 <HAL_RCC_OscConfig+0x278>)
 8004786:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004788:	4b4e      	ldr	r3, [pc, #312]	@ (80048c4 <HAL_RCC_OscConfig+0x27c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	f7fd f987 	bl	8001aa0 <HAL_InitTick>
 8004792:	4603      	mov	r3, r0
 8004794:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004796:	7bfb      	ldrb	r3, [r7, #15]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d052      	beq.n	8004842 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800479c:	7bfb      	ldrb	r3, [r7, #15]
 800479e:	e327      	b.n	8004df0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d032      	beq.n	800480e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80047a8:	4b43      	ldr	r3, [pc, #268]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a42      	ldr	r2, [pc, #264]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 80047ae:	f043 0301 	orr.w	r3, r3, #1
 80047b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047b4:	f7fd f9c4 	bl	8001b40 <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047bc:	f7fd f9c0 	bl	8001b40 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e310      	b.n	8004df0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047ce:	4b3a      	ldr	r3, [pc, #232]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0f0      	beq.n	80047bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047da:	4b37      	ldr	r3, [pc, #220]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a36      	ldr	r2, [pc, #216]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 80047e0:	f043 0308 	orr.w	r3, r3, #8
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	4b34      	ldr	r3, [pc, #208]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	4931      	ldr	r1, [pc, #196]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047f8:	4b2f      	ldr	r3, [pc, #188]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	021b      	lsls	r3, r3, #8
 8004806:	492c      	ldr	r1, [pc, #176]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 8004808:	4313      	orrs	r3, r2
 800480a:	604b      	str	r3, [r1, #4]
 800480c:	e01a      	b.n	8004844 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800480e:	4b2a      	ldr	r3, [pc, #168]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a29      	ldr	r2, [pc, #164]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 8004814:	f023 0301 	bic.w	r3, r3, #1
 8004818:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800481a:	f7fd f991 	bl	8001b40 <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004820:	e008      	b.n	8004834 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004822:	f7fd f98d 	bl	8001b40 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e2dd      	b.n	8004df0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004834:	4b20      	ldr	r3, [pc, #128]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1f0      	bne.n	8004822 <HAL_RCC_OscConfig+0x1da>
 8004840:	e000      	b.n	8004844 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004842:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	d074      	beq.n	800493a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	2b08      	cmp	r3, #8
 8004854:	d005      	beq.n	8004862 <HAL_RCC_OscConfig+0x21a>
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	2b0c      	cmp	r3, #12
 800485a:	d10e      	bne.n	800487a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	2b03      	cmp	r3, #3
 8004860:	d10b      	bne.n	800487a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004862:	4b15      	ldr	r3, [pc, #84]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d064      	beq.n	8004938 <HAL_RCC_OscConfig+0x2f0>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d160      	bne.n	8004938 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e2ba      	b.n	8004df0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004882:	d106      	bne.n	8004892 <HAL_RCC_OscConfig+0x24a>
 8004884:	4b0c      	ldr	r3, [pc, #48]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a0b      	ldr	r2, [pc, #44]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 800488a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800488e:	6013      	str	r3, [r2, #0]
 8004890:	e026      	b.n	80048e0 <HAL_RCC_OscConfig+0x298>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800489a:	d115      	bne.n	80048c8 <HAL_RCC_OscConfig+0x280>
 800489c:	4b06      	ldr	r3, [pc, #24]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a05      	ldr	r2, [pc, #20]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 80048a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	4b03      	ldr	r3, [pc, #12]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a02      	ldr	r2, [pc, #8]	@ (80048b8 <HAL_RCC_OscConfig+0x270>)
 80048ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048b2:	6013      	str	r3, [r2, #0]
 80048b4:	e014      	b.n	80048e0 <HAL_RCC_OscConfig+0x298>
 80048b6:	bf00      	nop
 80048b8:	40021000 	.word	0x40021000
 80048bc:	08008e28 	.word	0x08008e28
 80048c0:	20000018 	.word	0x20000018
 80048c4:	2000001c 	.word	0x2000001c
 80048c8:	4ba0      	ldr	r3, [pc, #640]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a9f      	ldr	r2, [pc, #636]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 80048ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048d2:	6013      	str	r3, [r2, #0]
 80048d4:	4b9d      	ldr	r3, [pc, #628]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a9c      	ldr	r2, [pc, #624]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 80048da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d013      	beq.n	8004910 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e8:	f7fd f92a 	bl	8001b40 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048f0:	f7fd f926 	bl	8001b40 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b64      	cmp	r3, #100	@ 0x64
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e276      	b.n	8004df0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004902:	4b92      	ldr	r3, [pc, #584]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0f0      	beq.n	80048f0 <HAL_RCC_OscConfig+0x2a8>
 800490e:	e014      	b.n	800493a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004910:	f7fd f916 	bl	8001b40 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004918:	f7fd f912 	bl	8001b40 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b64      	cmp	r3, #100	@ 0x64
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e262      	b.n	8004df0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800492a:	4b88      	ldr	r3, [pc, #544]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f0      	bne.n	8004918 <HAL_RCC_OscConfig+0x2d0>
 8004936:	e000      	b.n	800493a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d060      	beq.n	8004a08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	2b04      	cmp	r3, #4
 800494a:	d005      	beq.n	8004958 <HAL_RCC_OscConfig+0x310>
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	2b0c      	cmp	r3, #12
 8004950:	d119      	bne.n	8004986 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2b02      	cmp	r3, #2
 8004956:	d116      	bne.n	8004986 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004958:	4b7c      	ldr	r3, [pc, #496]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004960:	2b00      	cmp	r3, #0
 8004962:	d005      	beq.n	8004970 <HAL_RCC_OscConfig+0x328>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e23f      	b.n	8004df0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004970:	4b76      	ldr	r3, [pc, #472]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	061b      	lsls	r3, r3, #24
 800497e:	4973      	ldr	r1, [pc, #460]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 8004980:	4313      	orrs	r3, r2
 8004982:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004984:	e040      	b.n	8004a08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d023      	beq.n	80049d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800498e:	4b6f      	ldr	r3, [pc, #444]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a6e      	ldr	r2, [pc, #440]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 8004994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499a:	f7fd f8d1 	bl	8001b40 <HAL_GetTick>
 800499e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049a2:	f7fd f8cd 	bl	8001b40 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e21d      	b.n	8004df0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049b4:	4b65      	ldr	r3, [pc, #404]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0f0      	beq.n	80049a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049c0:	4b62      	ldr	r3, [pc, #392]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	061b      	lsls	r3, r3, #24
 80049ce:	495f      	ldr	r1, [pc, #380]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	604b      	str	r3, [r1, #4]
 80049d4:	e018      	b.n	8004a08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049d6:	4b5d      	ldr	r3, [pc, #372]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a5c      	ldr	r2, [pc, #368]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 80049dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e2:	f7fd f8ad 	bl	8001b40 <HAL_GetTick>
 80049e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049e8:	e008      	b.n	80049fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049ea:	f7fd f8a9 	bl	8001b40 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e1f9      	b.n	8004df0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049fc:	4b53      	ldr	r3, [pc, #332]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1f0      	bne.n	80049ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0308 	and.w	r3, r3, #8
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d03c      	beq.n	8004a8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d01c      	beq.n	8004a56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a1c:	4b4b      	ldr	r3, [pc, #300]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 8004a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a22:	4a4a      	ldr	r2, [pc, #296]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 8004a24:	f043 0301 	orr.w	r3, r3, #1
 8004a28:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a2c:	f7fd f888 	bl	8001b40 <HAL_GetTick>
 8004a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a34:	f7fd f884 	bl	8001b40 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e1d4      	b.n	8004df0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a46:	4b41      	ldr	r3, [pc, #260]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 8004a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0ef      	beq.n	8004a34 <HAL_RCC_OscConfig+0x3ec>
 8004a54:	e01b      	b.n	8004a8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a56:	4b3d      	ldr	r3, [pc, #244]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 8004a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a5c:	4a3b      	ldr	r2, [pc, #236]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 8004a5e:	f023 0301 	bic.w	r3, r3, #1
 8004a62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a66:	f7fd f86b 	bl	8001b40 <HAL_GetTick>
 8004a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a6c:	e008      	b.n	8004a80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a6e:	f7fd f867 	bl	8001b40 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e1b7      	b.n	8004df0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a80:	4b32      	ldr	r3, [pc, #200]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 8004a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1ef      	bne.n	8004a6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0304 	and.w	r3, r3, #4
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 80a6 	beq.w	8004be8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004aa0:	4b2a      	ldr	r3, [pc, #168]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 8004aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10d      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aac:	4b27      	ldr	r3, [pc, #156]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 8004aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ab0:	4a26      	ldr	r2, [pc, #152]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 8004ab2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ab6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ab8:	4b24      	ldr	r3, [pc, #144]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 8004aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004abc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ac0:	60bb      	str	r3, [r7, #8]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ac8:	4b21      	ldr	r3, [pc, #132]	@ (8004b50 <HAL_RCC_OscConfig+0x508>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d118      	bne.n	8004b06 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8004b50 <HAL_RCC_OscConfig+0x508>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8004b50 <HAL_RCC_OscConfig+0x508>)
 8004ada:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ade:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ae0:	f7fd f82e 	bl	8001b40 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ae8:	f7fd f82a 	bl	8001b40 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e17a      	b.n	8004df0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004afa:	4b15      	ldr	r3, [pc, #84]	@ (8004b50 <HAL_RCC_OscConfig+0x508>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0f0      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d108      	bne.n	8004b20 <HAL_RCC_OscConfig+0x4d8>
 8004b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 8004b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b14:	4a0d      	ldr	r2, [pc, #52]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 8004b16:	f043 0301 	orr.w	r3, r3, #1
 8004b1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b1e:	e029      	b.n	8004b74 <HAL_RCC_OscConfig+0x52c>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	2b05      	cmp	r3, #5
 8004b26:	d115      	bne.n	8004b54 <HAL_RCC_OscConfig+0x50c>
 8004b28:	4b08      	ldr	r3, [pc, #32]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 8004b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b2e:	4a07      	ldr	r2, [pc, #28]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 8004b30:	f043 0304 	orr.w	r3, r3, #4
 8004b34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b38:	4b04      	ldr	r3, [pc, #16]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 8004b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b3e:	4a03      	ldr	r2, [pc, #12]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 8004b40:	f043 0301 	orr.w	r3, r3, #1
 8004b44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b48:	e014      	b.n	8004b74 <HAL_RCC_OscConfig+0x52c>
 8004b4a:	bf00      	nop
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	40007000 	.word	0x40007000
 8004b54:	4b9c      	ldr	r3, [pc, #624]	@ (8004dc8 <HAL_RCC_OscConfig+0x780>)
 8004b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b5a:	4a9b      	ldr	r2, [pc, #620]	@ (8004dc8 <HAL_RCC_OscConfig+0x780>)
 8004b5c:	f023 0301 	bic.w	r3, r3, #1
 8004b60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b64:	4b98      	ldr	r3, [pc, #608]	@ (8004dc8 <HAL_RCC_OscConfig+0x780>)
 8004b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b6a:	4a97      	ldr	r2, [pc, #604]	@ (8004dc8 <HAL_RCC_OscConfig+0x780>)
 8004b6c:	f023 0304 	bic.w	r3, r3, #4
 8004b70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d016      	beq.n	8004baa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b7c:	f7fc ffe0 	bl	8001b40 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b82:	e00a      	b.n	8004b9a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b84:	f7fc ffdc 	bl	8001b40 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e12a      	b.n	8004df0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b9a:	4b8b      	ldr	r3, [pc, #556]	@ (8004dc8 <HAL_RCC_OscConfig+0x780>)
 8004b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0ed      	beq.n	8004b84 <HAL_RCC_OscConfig+0x53c>
 8004ba8:	e015      	b.n	8004bd6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004baa:	f7fc ffc9 	bl	8001b40 <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bb0:	e00a      	b.n	8004bc8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bb2:	f7fc ffc5 	bl	8001b40 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e113      	b.n	8004df0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bc8:	4b7f      	ldr	r3, [pc, #508]	@ (8004dc8 <HAL_RCC_OscConfig+0x780>)
 8004bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1ed      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bd6:	7ffb      	ldrb	r3, [r7, #31]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d105      	bne.n	8004be8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bdc:	4b7a      	ldr	r3, [pc, #488]	@ (8004dc8 <HAL_RCC_OscConfig+0x780>)
 8004bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004be0:	4a79      	ldr	r2, [pc, #484]	@ (8004dc8 <HAL_RCC_OscConfig+0x780>)
 8004be2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004be6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 80fe 	beq.w	8004dee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	f040 80d0 	bne.w	8004d9c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004bfc:	4b72      	ldr	r3, [pc, #456]	@ (8004dc8 <HAL_RCC_OscConfig+0x780>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f003 0203 	and.w	r2, r3, #3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d130      	bne.n	8004c72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d127      	bne.n	8004c72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d11f      	bne.n	8004c72 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004c3c:	2a07      	cmp	r2, #7
 8004c3e:	bf14      	ite	ne
 8004c40:	2201      	movne	r2, #1
 8004c42:	2200      	moveq	r2, #0
 8004c44:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d113      	bne.n	8004c72 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c54:	085b      	lsrs	r3, r3, #1
 8004c56:	3b01      	subs	r3, #1
 8004c58:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d109      	bne.n	8004c72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c68:	085b      	lsrs	r3, r3, #1
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d06e      	beq.n	8004d50 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	2b0c      	cmp	r3, #12
 8004c76:	d069      	beq.n	8004d4c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c78:	4b53      	ldr	r3, [pc, #332]	@ (8004dc8 <HAL_RCC_OscConfig+0x780>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d105      	bne.n	8004c90 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004c84:	4b50      	ldr	r3, [pc, #320]	@ (8004dc8 <HAL_RCC_OscConfig+0x780>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e0ad      	b.n	8004df0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004c94:	4b4c      	ldr	r3, [pc, #304]	@ (8004dc8 <HAL_RCC_OscConfig+0x780>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a4b      	ldr	r2, [pc, #300]	@ (8004dc8 <HAL_RCC_OscConfig+0x780>)
 8004c9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c9e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ca0:	f7fc ff4e 	bl	8001b40 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ca8:	f7fc ff4a 	bl	8001b40 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e09a      	b.n	8004df0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cba:	4b43      	ldr	r3, [pc, #268]	@ (8004dc8 <HAL_RCC_OscConfig+0x780>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1f0      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cc6:	4b40      	ldr	r3, [pc, #256]	@ (8004dc8 <HAL_RCC_OscConfig+0x780>)
 8004cc8:	68da      	ldr	r2, [r3, #12]
 8004cca:	4b40      	ldr	r3, [pc, #256]	@ (8004dcc <HAL_RCC_OscConfig+0x784>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004cd6:	3a01      	subs	r2, #1
 8004cd8:	0112      	lsls	r2, r2, #4
 8004cda:	4311      	orrs	r1, r2
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ce0:	0212      	lsls	r2, r2, #8
 8004ce2:	4311      	orrs	r1, r2
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ce8:	0852      	lsrs	r2, r2, #1
 8004cea:	3a01      	subs	r2, #1
 8004cec:	0552      	lsls	r2, r2, #21
 8004cee:	4311      	orrs	r1, r2
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004cf4:	0852      	lsrs	r2, r2, #1
 8004cf6:	3a01      	subs	r2, #1
 8004cf8:	0652      	lsls	r2, r2, #25
 8004cfa:	4311      	orrs	r1, r2
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004d00:	0912      	lsrs	r2, r2, #4
 8004d02:	0452      	lsls	r2, r2, #17
 8004d04:	430a      	orrs	r2, r1
 8004d06:	4930      	ldr	r1, [pc, #192]	@ (8004dc8 <HAL_RCC_OscConfig+0x780>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004d0c:	4b2e      	ldr	r3, [pc, #184]	@ (8004dc8 <HAL_RCC_OscConfig+0x780>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a2d      	ldr	r2, [pc, #180]	@ (8004dc8 <HAL_RCC_OscConfig+0x780>)
 8004d12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d18:	4b2b      	ldr	r3, [pc, #172]	@ (8004dc8 <HAL_RCC_OscConfig+0x780>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	4a2a      	ldr	r2, [pc, #168]	@ (8004dc8 <HAL_RCC_OscConfig+0x780>)
 8004d1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d24:	f7fc ff0c 	bl	8001b40 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d2c:	f7fc ff08 	bl	8001b40 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e058      	b.n	8004df0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d3e:	4b22      	ldr	r3, [pc, #136]	@ (8004dc8 <HAL_RCC_OscConfig+0x780>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0f0      	beq.n	8004d2c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d4a:	e050      	b.n	8004dee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e04f      	b.n	8004df0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d50:	4b1d      	ldr	r3, [pc, #116]	@ (8004dc8 <HAL_RCC_OscConfig+0x780>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d148      	bne.n	8004dee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8004dc8 <HAL_RCC_OscConfig+0x780>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a19      	ldr	r2, [pc, #100]	@ (8004dc8 <HAL_RCC_OscConfig+0x780>)
 8004d62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d66:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d68:	4b17      	ldr	r3, [pc, #92]	@ (8004dc8 <HAL_RCC_OscConfig+0x780>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	4a16      	ldr	r2, [pc, #88]	@ (8004dc8 <HAL_RCC_OscConfig+0x780>)
 8004d6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d74:	f7fc fee4 	bl	8001b40 <HAL_GetTick>
 8004d78:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d7c:	f7fc fee0 	bl	8001b40 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e030      	b.n	8004df0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004dc8 <HAL_RCC_OscConfig+0x780>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0f0      	beq.n	8004d7c <HAL_RCC_OscConfig+0x734>
 8004d9a:	e028      	b.n	8004dee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	2b0c      	cmp	r3, #12
 8004da0:	d023      	beq.n	8004dea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004da2:	4b09      	ldr	r3, [pc, #36]	@ (8004dc8 <HAL_RCC_OscConfig+0x780>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a08      	ldr	r2, [pc, #32]	@ (8004dc8 <HAL_RCC_OscConfig+0x780>)
 8004da8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dae:	f7fc fec7 	bl	8001b40 <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004db4:	e00c      	b.n	8004dd0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db6:	f7fc fec3 	bl	8001b40 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d905      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e013      	b.n	8004df0 <HAL_RCC_OscConfig+0x7a8>
 8004dc8:	40021000 	.word	0x40021000
 8004dcc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dd0:	4b09      	ldr	r3, [pc, #36]	@ (8004df8 <HAL_RCC_OscConfig+0x7b0>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1ec      	bne.n	8004db6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004ddc:	4b06      	ldr	r3, [pc, #24]	@ (8004df8 <HAL_RCC_OscConfig+0x7b0>)
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	4905      	ldr	r1, [pc, #20]	@ (8004df8 <HAL_RCC_OscConfig+0x7b0>)
 8004de2:	4b06      	ldr	r3, [pc, #24]	@ (8004dfc <HAL_RCC_OscConfig+0x7b4>)
 8004de4:	4013      	ands	r3, r2
 8004de6:	60cb      	str	r3, [r1, #12]
 8004de8:	e001      	b.n	8004dee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e000      	b.n	8004df0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3720      	adds	r7, #32
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	40021000 	.word	0x40021000
 8004dfc:	feeefffc 	.word	0xfeeefffc

08004e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e0e7      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e14:	4b75      	ldr	r3, [pc, #468]	@ (8004fec <HAL_RCC_ClockConfig+0x1ec>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0307 	and.w	r3, r3, #7
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d910      	bls.n	8004e44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e22:	4b72      	ldr	r3, [pc, #456]	@ (8004fec <HAL_RCC_ClockConfig+0x1ec>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f023 0207 	bic.w	r2, r3, #7
 8004e2a:	4970      	ldr	r1, [pc, #448]	@ (8004fec <HAL_RCC_ClockConfig+0x1ec>)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e32:	4b6e      	ldr	r3, [pc, #440]	@ (8004fec <HAL_RCC_ClockConfig+0x1ec>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0307 	and.w	r3, r3, #7
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d001      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e0cf      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d010      	beq.n	8004e72 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	4b66      	ldr	r3, [pc, #408]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d908      	bls.n	8004e72 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e60:	4b63      	ldr	r3, [pc, #396]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	4960      	ldr	r1, [pc, #384]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d04c      	beq.n	8004f18 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2b03      	cmp	r3, #3
 8004e84:	d107      	bne.n	8004e96 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e86:	4b5a      	ldr	r3, [pc, #360]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d121      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e0a6      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d107      	bne.n	8004eae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e9e:	4b54      	ldr	r3, [pc, #336]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d115      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e09a      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d107      	bne.n	8004ec6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004eb6:	4b4e      	ldr	r3, [pc, #312]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d109      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e08e      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ec6:	4b4a      	ldr	r3, [pc, #296]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e086      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ed6:	4b46      	ldr	r3, [pc, #280]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f023 0203 	bic.w	r2, r3, #3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	4943      	ldr	r1, [pc, #268]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ee8:	f7fc fe2a 	bl	8001b40 <HAL_GetTick>
 8004eec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eee:	e00a      	b.n	8004f06 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ef0:	f7fc fe26 	bl	8001b40 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e06e      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f06:	4b3a      	ldr	r3, [pc, #232]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 020c 	and.w	r2, r3, #12
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d1eb      	bne.n	8004ef0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d010      	beq.n	8004f46 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	4b31      	ldr	r3, [pc, #196]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d208      	bcs.n	8004f46 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f34:	4b2e      	ldr	r3, [pc, #184]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	492b      	ldr	r1, [pc, #172]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f46:	4b29      	ldr	r3, [pc, #164]	@ (8004fec <HAL_RCC_ClockConfig+0x1ec>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d210      	bcs.n	8004f76 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f54:	4b25      	ldr	r3, [pc, #148]	@ (8004fec <HAL_RCC_ClockConfig+0x1ec>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f023 0207 	bic.w	r2, r3, #7
 8004f5c:	4923      	ldr	r1, [pc, #140]	@ (8004fec <HAL_RCC_ClockConfig+0x1ec>)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f64:	4b21      	ldr	r3, [pc, #132]	@ (8004fec <HAL_RCC_ClockConfig+0x1ec>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0307 	and.w	r3, r3, #7
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d001      	beq.n	8004f76 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e036      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0304 	and.w	r3, r3, #4
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d008      	beq.n	8004f94 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f82:	4b1b      	ldr	r3, [pc, #108]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	4918      	ldr	r1, [pc, #96]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d009      	beq.n	8004fb4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fa0:	4b13      	ldr	r3, [pc, #76]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	4910      	ldr	r1, [pc, #64]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fb4:	f000 f824 	bl	8005000 <HAL_RCC_GetSysClockFreq>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	091b      	lsrs	r3, r3, #4
 8004fc0:	f003 030f 	and.w	r3, r3, #15
 8004fc4:	490b      	ldr	r1, [pc, #44]	@ (8004ff4 <HAL_RCC_ClockConfig+0x1f4>)
 8004fc6:	5ccb      	ldrb	r3, [r1, r3]
 8004fc8:	f003 031f 	and.w	r3, r3, #31
 8004fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd0:	4a09      	ldr	r2, [pc, #36]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8004fd2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004fd4:	4b09      	ldr	r3, [pc, #36]	@ (8004ffc <HAL_RCC_ClockConfig+0x1fc>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7fc fd61 	bl	8001aa0 <HAL_InitTick>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	72fb      	strb	r3, [r7, #11]

  return status;
 8004fe2:	7afb      	ldrb	r3, [r7, #11]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	40022000 	.word	0x40022000
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	08008e28 	.word	0x08008e28
 8004ff8:	20000018 	.word	0x20000018
 8004ffc:	2000001c 	.word	0x2000001c

08005000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005000:	b480      	push	{r7}
 8005002:	b089      	sub	sp, #36	@ 0x24
 8005004:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005006:	2300      	movs	r3, #0
 8005008:	61fb      	str	r3, [r7, #28]
 800500a:	2300      	movs	r3, #0
 800500c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800500e:	4b3e      	ldr	r3, [pc, #248]	@ (8005108 <HAL_RCC_GetSysClockFreq+0x108>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 030c 	and.w	r3, r3, #12
 8005016:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005018:	4b3b      	ldr	r3, [pc, #236]	@ (8005108 <HAL_RCC_GetSysClockFreq+0x108>)
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f003 0303 	and.w	r3, r3, #3
 8005020:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <HAL_RCC_GetSysClockFreq+0x34>
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	2b0c      	cmp	r3, #12
 800502c:	d121      	bne.n	8005072 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d11e      	bne.n	8005072 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005034:	4b34      	ldr	r3, [pc, #208]	@ (8005108 <HAL_RCC_GetSysClockFreq+0x108>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0308 	and.w	r3, r3, #8
 800503c:	2b00      	cmp	r3, #0
 800503e:	d107      	bne.n	8005050 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005040:	4b31      	ldr	r3, [pc, #196]	@ (8005108 <HAL_RCC_GetSysClockFreq+0x108>)
 8005042:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005046:	0a1b      	lsrs	r3, r3, #8
 8005048:	f003 030f 	and.w	r3, r3, #15
 800504c:	61fb      	str	r3, [r7, #28]
 800504e:	e005      	b.n	800505c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005050:	4b2d      	ldr	r3, [pc, #180]	@ (8005108 <HAL_RCC_GetSysClockFreq+0x108>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	091b      	lsrs	r3, r3, #4
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800505c:	4a2b      	ldr	r2, [pc, #172]	@ (800510c <HAL_RCC_GetSysClockFreq+0x10c>)
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005064:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10d      	bne.n	8005088 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005070:	e00a      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	2b04      	cmp	r3, #4
 8005076:	d102      	bne.n	800507e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005078:	4b25      	ldr	r3, [pc, #148]	@ (8005110 <HAL_RCC_GetSysClockFreq+0x110>)
 800507a:	61bb      	str	r3, [r7, #24]
 800507c:	e004      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	2b08      	cmp	r3, #8
 8005082:	d101      	bne.n	8005088 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005084:	4b23      	ldr	r3, [pc, #140]	@ (8005114 <HAL_RCC_GetSysClockFreq+0x114>)
 8005086:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	2b0c      	cmp	r3, #12
 800508c:	d134      	bne.n	80050f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800508e:	4b1e      	ldr	r3, [pc, #120]	@ (8005108 <HAL_RCC_GetSysClockFreq+0x108>)
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	2b02      	cmp	r3, #2
 800509c:	d003      	beq.n	80050a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2b03      	cmp	r3, #3
 80050a2:	d003      	beq.n	80050ac <HAL_RCC_GetSysClockFreq+0xac>
 80050a4:	e005      	b.n	80050b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80050a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005110 <HAL_RCC_GetSysClockFreq+0x110>)
 80050a8:	617b      	str	r3, [r7, #20]
      break;
 80050aa:	e005      	b.n	80050b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80050ac:	4b19      	ldr	r3, [pc, #100]	@ (8005114 <HAL_RCC_GetSysClockFreq+0x114>)
 80050ae:	617b      	str	r3, [r7, #20]
      break;
 80050b0:	e002      	b.n	80050b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	617b      	str	r3, [r7, #20]
      break;
 80050b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050b8:	4b13      	ldr	r3, [pc, #76]	@ (8005108 <HAL_RCC_GetSysClockFreq+0x108>)
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	091b      	lsrs	r3, r3, #4
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	3301      	adds	r3, #1
 80050c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80050c6:	4b10      	ldr	r3, [pc, #64]	@ (8005108 <HAL_RCC_GetSysClockFreq+0x108>)
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	0a1b      	lsrs	r3, r3, #8
 80050cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	fb03 f202 	mul.w	r2, r3, r2
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050de:	4b0a      	ldr	r3, [pc, #40]	@ (8005108 <HAL_RCC_GetSysClockFreq+0x108>)
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	0e5b      	lsrs	r3, r3, #25
 80050e4:	f003 0303 	and.w	r3, r3, #3
 80050e8:	3301      	adds	r3, #1
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80050f8:	69bb      	ldr	r3, [r7, #24]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3724      	adds	r7, #36	@ 0x24
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40021000 	.word	0x40021000
 800510c:	08008e40 	.word	0x08008e40
 8005110:	00f42400 	.word	0x00f42400
 8005114:	007a1200 	.word	0x007a1200

08005118 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800511c:	4b03      	ldr	r3, [pc, #12]	@ (800512c <HAL_RCC_GetHCLKFreq+0x14>)
 800511e:	681b      	ldr	r3, [r3, #0]
}
 8005120:	4618      	mov	r0, r3
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	20000018 	.word	0x20000018

08005130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005134:	f7ff fff0 	bl	8005118 <HAL_RCC_GetHCLKFreq>
 8005138:	4602      	mov	r2, r0
 800513a:	4b06      	ldr	r3, [pc, #24]	@ (8005154 <HAL_RCC_GetPCLK1Freq+0x24>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	0a1b      	lsrs	r3, r3, #8
 8005140:	f003 0307 	and.w	r3, r3, #7
 8005144:	4904      	ldr	r1, [pc, #16]	@ (8005158 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005146:	5ccb      	ldrb	r3, [r1, r3]
 8005148:	f003 031f 	and.w	r3, r3, #31
 800514c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005150:	4618      	mov	r0, r3
 8005152:	bd80      	pop	{r7, pc}
 8005154:	40021000 	.word	0x40021000
 8005158:	08008e38 	.word	0x08008e38

0800515c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005160:	f7ff ffda 	bl	8005118 <HAL_RCC_GetHCLKFreq>
 8005164:	4602      	mov	r2, r0
 8005166:	4b06      	ldr	r3, [pc, #24]	@ (8005180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	0adb      	lsrs	r3, r3, #11
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	4904      	ldr	r1, [pc, #16]	@ (8005184 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005172:	5ccb      	ldrb	r3, [r1, r3]
 8005174:	f003 031f 	and.w	r3, r3, #31
 8005178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800517c:	4618      	mov	r0, r3
 800517e:	bd80      	pop	{r7, pc}
 8005180:	40021000 	.word	0x40021000
 8005184:	08008e38 	.word	0x08008e38

08005188 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005190:	2300      	movs	r3, #0
 8005192:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005194:	4b2a      	ldr	r3, [pc, #168]	@ (8005240 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80051a0:	f7ff f9ee 	bl	8004580 <HAL_PWREx_GetVoltageRange>
 80051a4:	6178      	str	r0, [r7, #20]
 80051a6:	e014      	b.n	80051d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80051a8:	4b25      	ldr	r3, [pc, #148]	@ (8005240 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ac:	4a24      	ldr	r2, [pc, #144]	@ (8005240 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80051b4:	4b22      	ldr	r3, [pc, #136]	@ (8005240 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051bc:	60fb      	str	r3, [r7, #12]
 80051be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80051c0:	f7ff f9de 	bl	8004580 <HAL_PWREx_GetVoltageRange>
 80051c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80051c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005240 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ca:	4a1d      	ldr	r2, [pc, #116]	@ (8005240 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051d8:	d10b      	bne.n	80051f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b80      	cmp	r3, #128	@ 0x80
 80051de:	d919      	bls.n	8005214 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2ba0      	cmp	r3, #160	@ 0xa0
 80051e4:	d902      	bls.n	80051ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051e6:	2302      	movs	r3, #2
 80051e8:	613b      	str	r3, [r7, #16]
 80051ea:	e013      	b.n	8005214 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051ec:	2301      	movs	r3, #1
 80051ee:	613b      	str	r3, [r7, #16]
 80051f0:	e010      	b.n	8005214 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b80      	cmp	r3, #128	@ 0x80
 80051f6:	d902      	bls.n	80051fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80051f8:	2303      	movs	r3, #3
 80051fa:	613b      	str	r3, [r7, #16]
 80051fc:	e00a      	b.n	8005214 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b80      	cmp	r3, #128	@ 0x80
 8005202:	d102      	bne.n	800520a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005204:	2302      	movs	r3, #2
 8005206:	613b      	str	r3, [r7, #16]
 8005208:	e004      	b.n	8005214 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b70      	cmp	r3, #112	@ 0x70
 800520e:	d101      	bne.n	8005214 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005210:	2301      	movs	r3, #1
 8005212:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005214:	4b0b      	ldr	r3, [pc, #44]	@ (8005244 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f023 0207 	bic.w	r2, r3, #7
 800521c:	4909      	ldr	r1, [pc, #36]	@ (8005244 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005224:	4b07      	ldr	r3, [pc, #28]	@ (8005244 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	429a      	cmp	r2, r3
 8005230:	d001      	beq.n	8005236 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	40021000 	.word	0x40021000
 8005244:	40022000 	.word	0x40022000

08005248 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005250:	2300      	movs	r3, #0
 8005252:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005254:	2300      	movs	r3, #0
 8005256:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005260:	2b00      	cmp	r3, #0
 8005262:	d041      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005268:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800526c:	d02a      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800526e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005272:	d824      	bhi.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005274:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005278:	d008      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800527a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800527e:	d81e      	bhi.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00a      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005284:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005288:	d010      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800528a:	e018      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800528c:	4b86      	ldr	r3, [pc, #536]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	4a85      	ldr	r2, [pc, #532]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005292:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005296:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005298:	e015      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	3304      	adds	r3, #4
 800529e:	2100      	movs	r1, #0
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fabb 	bl	800581c <RCCEx_PLLSAI1_Config>
 80052a6:	4603      	mov	r3, r0
 80052a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052aa:	e00c      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	3320      	adds	r3, #32
 80052b0:	2100      	movs	r1, #0
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fba6 	bl	8005a04 <RCCEx_PLLSAI2_Config>
 80052b8:	4603      	mov	r3, r0
 80052ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052bc:	e003      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	74fb      	strb	r3, [r7, #19]
      break;
 80052c2:	e000      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80052c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052c6:	7cfb      	ldrb	r3, [r7, #19]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10b      	bne.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052cc:	4b76      	ldr	r3, [pc, #472]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052da:	4973      	ldr	r1, [pc, #460]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80052e2:	e001      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052e4:	7cfb      	ldrb	r3, [r7, #19]
 80052e6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d041      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80052fc:	d02a      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80052fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005302:	d824      	bhi.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005304:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005308:	d008      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800530a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800530e:	d81e      	bhi.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00a      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005314:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005318:	d010      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800531a:	e018      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800531c:	4b62      	ldr	r3, [pc, #392]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	4a61      	ldr	r2, [pc, #388]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005322:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005326:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005328:	e015      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3304      	adds	r3, #4
 800532e:	2100      	movs	r1, #0
 8005330:	4618      	mov	r0, r3
 8005332:	f000 fa73 	bl	800581c <RCCEx_PLLSAI1_Config>
 8005336:	4603      	mov	r3, r0
 8005338:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800533a:	e00c      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3320      	adds	r3, #32
 8005340:	2100      	movs	r1, #0
 8005342:	4618      	mov	r0, r3
 8005344:	f000 fb5e 	bl	8005a04 <RCCEx_PLLSAI2_Config>
 8005348:	4603      	mov	r3, r0
 800534a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800534c:	e003      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	74fb      	strb	r3, [r7, #19]
      break;
 8005352:	e000      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005354:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005356:	7cfb      	ldrb	r3, [r7, #19]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10b      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800535c:	4b52      	ldr	r3, [pc, #328]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800535e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005362:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800536a:	494f      	ldr	r1, [pc, #316]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800536c:	4313      	orrs	r3, r2
 800536e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005372:	e001      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005374:	7cfb      	ldrb	r3, [r7, #19]
 8005376:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 80a0 	beq.w	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005386:	2300      	movs	r3, #0
 8005388:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800538a:	4b47      	ldr	r3, [pc, #284]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800538c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800538e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005396:	2301      	movs	r3, #1
 8005398:	e000      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800539a:	2300      	movs	r3, #0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00d      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053a0:	4b41      	ldr	r3, [pc, #260]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a4:	4a40      	ldr	r2, [pc, #256]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80053ac:	4b3e      	ldr	r3, [pc, #248]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053b4:	60bb      	str	r3, [r7, #8]
 80053b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053b8:	2301      	movs	r3, #1
 80053ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053bc:	4b3b      	ldr	r3, [pc, #236]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a3a      	ldr	r2, [pc, #232]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80053c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053c8:	f7fc fbba 	bl	8001b40 <HAL_GetTick>
 80053cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80053ce:	e009      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053d0:	f7fc fbb6 	bl	8001b40 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d902      	bls.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	74fb      	strb	r3, [r7, #19]
        break;
 80053e2:	e005      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80053e4:	4b31      	ldr	r3, [pc, #196]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0ef      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80053f0:	7cfb      	ldrb	r3, [r7, #19]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d15c      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053f6:	4b2c      	ldr	r3, [pc, #176]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005400:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d01f      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	429a      	cmp	r2, r3
 8005412:	d019      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005414:	4b24      	ldr	r3, [pc, #144]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800541a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800541e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005420:	4b21      	ldr	r3, [pc, #132]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005426:	4a20      	ldr	r2, [pc, #128]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800542c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005430:	4b1d      	ldr	r3, [pc, #116]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005436:	4a1c      	ldr	r2, [pc, #112]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005438:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800543c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005440:	4a19      	ldr	r2, [pc, #100]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d016      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005452:	f7fc fb75 	bl	8001b40 <HAL_GetTick>
 8005456:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005458:	e00b      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800545a:	f7fc fb71 	bl	8001b40 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005468:	4293      	cmp	r3, r2
 800546a:	d902      	bls.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	74fb      	strb	r3, [r7, #19]
            break;
 8005470:	e006      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005472:	4b0d      	ldr	r3, [pc, #52]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d0ec      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005480:	7cfb      	ldrb	r3, [r7, #19]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10c      	bne.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005486:	4b08      	ldr	r3, [pc, #32]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800548c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005496:	4904      	ldr	r1, [pc, #16]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005498:	4313      	orrs	r3, r2
 800549a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800549e:	e009      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054a0:	7cfb      	ldrb	r3, [r7, #19]
 80054a2:	74bb      	strb	r3, [r7, #18]
 80054a4:	e006      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80054a6:	bf00      	nop
 80054a8:	40021000 	.word	0x40021000
 80054ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b0:	7cfb      	ldrb	r3, [r7, #19]
 80054b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054b4:	7c7b      	ldrb	r3, [r7, #17]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d105      	bne.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054ba:	4b9e      	ldr	r3, [pc, #632]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054be:	4a9d      	ldr	r2, [pc, #628]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054d2:	4b98      	ldr	r3, [pc, #608]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054d8:	f023 0203 	bic.w	r2, r3, #3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e0:	4994      	ldr	r1, [pc, #592]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00a      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054f4:	4b8f      	ldr	r3, [pc, #572]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fa:	f023 020c 	bic.w	r2, r3, #12
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005502:	498c      	ldr	r1, [pc, #560]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0304 	and.w	r3, r3, #4
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00a      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005516:	4b87      	ldr	r3, [pc, #540]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800551c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005524:	4983      	ldr	r1, [pc, #524]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005526:	4313      	orrs	r3, r2
 8005528:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0308 	and.w	r3, r3, #8
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00a      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005538:	4b7e      	ldr	r3, [pc, #504]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800553a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800553e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005546:	497b      	ldr	r1, [pc, #492]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005548:	4313      	orrs	r3, r2
 800554a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0310 	and.w	r3, r3, #16
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00a      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800555a:	4b76      	ldr	r3, [pc, #472]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800555c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005560:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005568:	4972      	ldr	r1, [pc, #456]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800556a:	4313      	orrs	r3, r2
 800556c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0320 	and.w	r3, r3, #32
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00a      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800557c:	4b6d      	ldr	r3, [pc, #436]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800557e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005582:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800558a:	496a      	ldr	r1, [pc, #424]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800558c:	4313      	orrs	r3, r2
 800558e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00a      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800559e:	4b65      	ldr	r3, [pc, #404]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ac:	4961      	ldr	r1, [pc, #388]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00a      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80055c0:	4b5c      	ldr	r3, [pc, #368]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055ce:	4959      	ldr	r1, [pc, #356]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00a      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055e2:	4b54      	ldr	r3, [pc, #336]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055e8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055f0:	4950      	ldr	r1, [pc, #320]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00a      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005604:	4b4b      	ldr	r3, [pc, #300]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800560a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005612:	4948      	ldr	r1, [pc, #288]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005614:	4313      	orrs	r3, r2
 8005616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00a      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005626:	4b43      	ldr	r3, [pc, #268]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800562c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005634:	493f      	ldr	r1, [pc, #252]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005636:	4313      	orrs	r3, r2
 8005638:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d028      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005648:	4b3a      	ldr	r3, [pc, #232]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800564a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800564e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005656:	4937      	ldr	r1, [pc, #220]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005658:	4313      	orrs	r3, r2
 800565a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005662:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005666:	d106      	bne.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005668:	4b32      	ldr	r3, [pc, #200]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	4a31      	ldr	r2, [pc, #196]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800566e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005672:	60d3      	str	r3, [r2, #12]
 8005674:	e011      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800567a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800567e:	d10c      	bne.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	3304      	adds	r3, #4
 8005684:	2101      	movs	r1, #1
 8005686:	4618      	mov	r0, r3
 8005688:	f000 f8c8 	bl	800581c <RCCEx_PLLSAI1_Config>
 800568c:	4603      	mov	r3, r0
 800568e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005690:	7cfb      	ldrb	r3, [r7, #19]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005696:	7cfb      	ldrb	r3, [r7, #19]
 8005698:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d028      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80056a6:	4b23      	ldr	r3, [pc, #140]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b4:	491f      	ldr	r1, [pc, #124]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056c4:	d106      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056c6:	4b1b      	ldr	r3, [pc, #108]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	4a1a      	ldr	r2, [pc, #104]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056d0:	60d3      	str	r3, [r2, #12]
 80056d2:	e011      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056dc:	d10c      	bne.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	3304      	adds	r3, #4
 80056e2:	2101      	movs	r1, #1
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 f899 	bl	800581c <RCCEx_PLLSAI1_Config>
 80056ea:	4603      	mov	r3, r0
 80056ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056ee:	7cfb      	ldrb	r3, [r7, #19]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80056f4:	7cfb      	ldrb	r3, [r7, #19]
 80056f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d02b      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005704:	4b0b      	ldr	r3, [pc, #44]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800570a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005712:	4908      	ldr	r1, [pc, #32]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005714:	4313      	orrs	r3, r2
 8005716:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800571e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005722:	d109      	bne.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005724:	4b03      	ldr	r3, [pc, #12]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	4a02      	ldr	r2, [pc, #8]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800572a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800572e:	60d3      	str	r3, [r2, #12]
 8005730:	e014      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005732:	bf00      	nop
 8005734:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800573c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005740:	d10c      	bne.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	3304      	adds	r3, #4
 8005746:	2101      	movs	r1, #1
 8005748:	4618      	mov	r0, r3
 800574a:	f000 f867 	bl	800581c <RCCEx_PLLSAI1_Config>
 800574e:	4603      	mov	r3, r0
 8005750:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005752:	7cfb      	ldrb	r3, [r7, #19]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d001      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005758:	7cfb      	ldrb	r3, [r7, #19]
 800575a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d02f      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005768:	4b2b      	ldr	r3, [pc, #172]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800576a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800576e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005776:	4928      	ldr	r1, [pc, #160]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005778:	4313      	orrs	r3, r2
 800577a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005782:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005786:	d10d      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3304      	adds	r3, #4
 800578c:	2102      	movs	r1, #2
 800578e:	4618      	mov	r0, r3
 8005790:	f000 f844 	bl	800581c <RCCEx_PLLSAI1_Config>
 8005794:	4603      	mov	r3, r0
 8005796:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005798:	7cfb      	ldrb	r3, [r7, #19]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d014      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800579e:	7cfb      	ldrb	r3, [r7, #19]
 80057a0:	74bb      	strb	r3, [r7, #18]
 80057a2:	e011      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057ac:	d10c      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	3320      	adds	r3, #32
 80057b2:	2102      	movs	r1, #2
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 f925 	bl	8005a04 <RCCEx_PLLSAI2_Config>
 80057ba:	4603      	mov	r3, r0
 80057bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057be:	7cfb      	ldrb	r3, [r7, #19]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80057c4:	7cfb      	ldrb	r3, [r7, #19]
 80057c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00a      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80057d4:	4b10      	ldr	r3, [pc, #64]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057da:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057e2:	490d      	ldr	r1, [pc, #52]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00b      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057f6:	4b08      	ldr	r3, [pc, #32]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005806:	4904      	ldr	r1, [pc, #16]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005808:	4313      	orrs	r3, r2
 800580a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800580e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3718      	adds	r7, #24
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	40021000 	.word	0x40021000

0800581c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800582a:	4b75      	ldr	r3, [pc, #468]	@ (8005a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f003 0303 	and.w	r3, r3, #3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d018      	beq.n	8005868 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005836:	4b72      	ldr	r3, [pc, #456]	@ (8005a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f003 0203 	and.w	r2, r3, #3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	429a      	cmp	r2, r3
 8005844:	d10d      	bne.n	8005862 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
       ||
 800584a:	2b00      	cmp	r3, #0
 800584c:	d009      	beq.n	8005862 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800584e:	4b6c      	ldr	r3, [pc, #432]	@ (8005a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	091b      	lsrs	r3, r3, #4
 8005854:	f003 0307 	and.w	r3, r3, #7
 8005858:	1c5a      	adds	r2, r3, #1
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
       ||
 800585e:	429a      	cmp	r2, r3
 8005860:	d047      	beq.n	80058f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	73fb      	strb	r3, [r7, #15]
 8005866:	e044      	b.n	80058f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b03      	cmp	r3, #3
 800586e:	d018      	beq.n	80058a2 <RCCEx_PLLSAI1_Config+0x86>
 8005870:	2b03      	cmp	r3, #3
 8005872:	d825      	bhi.n	80058c0 <RCCEx_PLLSAI1_Config+0xa4>
 8005874:	2b01      	cmp	r3, #1
 8005876:	d002      	beq.n	800587e <RCCEx_PLLSAI1_Config+0x62>
 8005878:	2b02      	cmp	r3, #2
 800587a:	d009      	beq.n	8005890 <RCCEx_PLLSAI1_Config+0x74>
 800587c:	e020      	b.n	80058c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800587e:	4b60      	ldr	r3, [pc, #384]	@ (8005a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d11d      	bne.n	80058c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800588e:	e01a      	b.n	80058c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005890:	4b5b      	ldr	r3, [pc, #364]	@ (8005a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005898:	2b00      	cmp	r3, #0
 800589a:	d116      	bne.n	80058ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058a0:	e013      	b.n	80058ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80058a2:	4b57      	ldr	r3, [pc, #348]	@ (8005a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10f      	bne.n	80058ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058ae:	4b54      	ldr	r3, [pc, #336]	@ (8005a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d109      	bne.n	80058ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058be:	e006      	b.n	80058ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	73fb      	strb	r3, [r7, #15]
      break;
 80058c4:	e004      	b.n	80058d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058c6:	bf00      	nop
 80058c8:	e002      	b.n	80058d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058ca:	bf00      	nop
 80058cc:	e000      	b.n	80058d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80058d0:	7bfb      	ldrb	r3, [r7, #15]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10d      	bne.n	80058f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80058d6:	4b4a      	ldr	r3, [pc, #296]	@ (8005a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6819      	ldr	r1, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	3b01      	subs	r3, #1
 80058e8:	011b      	lsls	r3, r3, #4
 80058ea:	430b      	orrs	r3, r1
 80058ec:	4944      	ldr	r1, [pc, #272]	@ (8005a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80058f2:	7bfb      	ldrb	r3, [r7, #15]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d17d      	bne.n	80059f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80058f8:	4b41      	ldr	r3, [pc, #260]	@ (8005a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a40      	ldr	r2, [pc, #256]	@ (8005a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005902:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005904:	f7fc f91c 	bl	8001b40 <HAL_GetTick>
 8005908:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800590a:	e009      	b.n	8005920 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800590c:	f7fc f918 	bl	8001b40 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b02      	cmp	r3, #2
 8005918:	d902      	bls.n	8005920 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	73fb      	strb	r3, [r7, #15]
        break;
 800591e:	e005      	b.n	800592c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005920:	4b37      	ldr	r3, [pc, #220]	@ (8005a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1ef      	bne.n	800590c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800592c:	7bfb      	ldrb	r3, [r7, #15]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d160      	bne.n	80059f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d111      	bne.n	800595c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005938:	4b31      	ldr	r3, [pc, #196]	@ (8005a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005940:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	6892      	ldr	r2, [r2, #8]
 8005948:	0211      	lsls	r1, r2, #8
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	68d2      	ldr	r2, [r2, #12]
 800594e:	0912      	lsrs	r2, r2, #4
 8005950:	0452      	lsls	r2, r2, #17
 8005952:	430a      	orrs	r2, r1
 8005954:	492a      	ldr	r1, [pc, #168]	@ (8005a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005956:	4313      	orrs	r3, r2
 8005958:	610b      	str	r3, [r1, #16]
 800595a:	e027      	b.n	80059ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d112      	bne.n	8005988 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005962:	4b27      	ldr	r3, [pc, #156]	@ (8005a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800596a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	6892      	ldr	r2, [r2, #8]
 8005972:	0211      	lsls	r1, r2, #8
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6912      	ldr	r2, [r2, #16]
 8005978:	0852      	lsrs	r2, r2, #1
 800597a:	3a01      	subs	r2, #1
 800597c:	0552      	lsls	r2, r2, #21
 800597e:	430a      	orrs	r2, r1
 8005980:	491f      	ldr	r1, [pc, #124]	@ (8005a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005982:	4313      	orrs	r3, r2
 8005984:	610b      	str	r3, [r1, #16]
 8005986:	e011      	b.n	80059ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005988:	4b1d      	ldr	r3, [pc, #116]	@ (8005a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005990:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	6892      	ldr	r2, [r2, #8]
 8005998:	0211      	lsls	r1, r2, #8
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	6952      	ldr	r2, [r2, #20]
 800599e:	0852      	lsrs	r2, r2, #1
 80059a0:	3a01      	subs	r2, #1
 80059a2:	0652      	lsls	r2, r2, #25
 80059a4:	430a      	orrs	r2, r1
 80059a6:	4916      	ldr	r1, [pc, #88]	@ (8005a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80059ac:	4b14      	ldr	r3, [pc, #80]	@ (8005a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a13      	ldr	r2, [pc, #76]	@ (8005a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80059b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059b8:	f7fc f8c2 	bl	8001b40 <HAL_GetTick>
 80059bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059be:	e009      	b.n	80059d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059c0:	f7fc f8be 	bl	8001b40 <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d902      	bls.n	80059d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	73fb      	strb	r3, [r7, #15]
          break;
 80059d2:	e005      	b.n	80059e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d0ef      	beq.n	80059c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d106      	bne.n	80059f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80059e6:	4b06      	ldr	r3, [pc, #24]	@ (8005a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059e8:	691a      	ldr	r2, [r3, #16]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	4904      	ldr	r1, [pc, #16]	@ (8005a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80059f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	40021000 	.word	0x40021000

08005a04 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a12:	4b6a      	ldr	r3, [pc, #424]	@ (8005bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	f003 0303 	and.w	r3, r3, #3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d018      	beq.n	8005a50 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005a1e:	4b67      	ldr	r3, [pc, #412]	@ (8005bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f003 0203 	and.w	r2, r3, #3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d10d      	bne.n	8005a4a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
       ||
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d009      	beq.n	8005a4a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005a36:	4b61      	ldr	r3, [pc, #388]	@ (8005bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	091b      	lsrs	r3, r3, #4
 8005a3c:	f003 0307 	and.w	r3, r3, #7
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
       ||
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d047      	beq.n	8005ada <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	73fb      	strb	r3, [r7, #15]
 8005a4e:	e044      	b.n	8005ada <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b03      	cmp	r3, #3
 8005a56:	d018      	beq.n	8005a8a <RCCEx_PLLSAI2_Config+0x86>
 8005a58:	2b03      	cmp	r3, #3
 8005a5a:	d825      	bhi.n	8005aa8 <RCCEx_PLLSAI2_Config+0xa4>
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d002      	beq.n	8005a66 <RCCEx_PLLSAI2_Config+0x62>
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d009      	beq.n	8005a78 <RCCEx_PLLSAI2_Config+0x74>
 8005a64:	e020      	b.n	8005aa8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a66:	4b55      	ldr	r3, [pc, #340]	@ (8005bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d11d      	bne.n	8005aae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a76:	e01a      	b.n	8005aae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a78:	4b50      	ldr	r3, [pc, #320]	@ (8005bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d116      	bne.n	8005ab2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a88:	e013      	b.n	8005ab2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a8a:	4b4c      	ldr	r3, [pc, #304]	@ (8005bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10f      	bne.n	8005ab6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a96:	4b49      	ldr	r3, [pc, #292]	@ (8005bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d109      	bne.n	8005ab6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005aa6:	e006      	b.n	8005ab6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8005aac:	e004      	b.n	8005ab8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005aae:	bf00      	nop
 8005ab0:	e002      	b.n	8005ab8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ab2:	bf00      	nop
 8005ab4:	e000      	b.n	8005ab8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ab6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10d      	bne.n	8005ada <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005abe:	4b3f      	ldr	r3, [pc, #252]	@ (8005bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6819      	ldr	r1, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	011b      	lsls	r3, r3, #4
 8005ad2:	430b      	orrs	r3, r1
 8005ad4:	4939      	ldr	r1, [pc, #228]	@ (8005bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005ada:	7bfb      	ldrb	r3, [r7, #15]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d167      	bne.n	8005bb0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005ae0:	4b36      	ldr	r3, [pc, #216]	@ (8005bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a35      	ldr	r2, [pc, #212]	@ (8005bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ae6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005aea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aec:	f7fc f828 	bl	8001b40 <HAL_GetTick>
 8005af0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005af2:	e009      	b.n	8005b08 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005af4:	f7fc f824 	bl	8001b40 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d902      	bls.n	8005b08 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	73fb      	strb	r3, [r7, #15]
        break;
 8005b06:	e005      	b.n	8005b14 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b08:	4b2c      	ldr	r3, [pc, #176]	@ (8005bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1ef      	bne.n	8005af4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005b14:	7bfb      	ldrb	r3, [r7, #15]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d14a      	bne.n	8005bb0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d111      	bne.n	8005b44 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b20:	4b26      	ldr	r3, [pc, #152]	@ (8005bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005b28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	6892      	ldr	r2, [r2, #8]
 8005b30:	0211      	lsls	r1, r2, #8
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	68d2      	ldr	r2, [r2, #12]
 8005b36:	0912      	lsrs	r2, r2, #4
 8005b38:	0452      	lsls	r2, r2, #17
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	491f      	ldr	r1, [pc, #124]	@ (8005bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	614b      	str	r3, [r1, #20]
 8005b42:	e011      	b.n	8005b68 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b44:	4b1d      	ldr	r3, [pc, #116]	@ (8005bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005b4c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	6892      	ldr	r2, [r2, #8]
 8005b54:	0211      	lsls	r1, r2, #8
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	6912      	ldr	r2, [r2, #16]
 8005b5a:	0852      	lsrs	r2, r2, #1
 8005b5c:	3a01      	subs	r2, #1
 8005b5e:	0652      	lsls	r2, r2, #25
 8005b60:	430a      	orrs	r2, r1
 8005b62:	4916      	ldr	r1, [pc, #88]	@ (8005bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005b68:	4b14      	ldr	r3, [pc, #80]	@ (8005bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a13      	ldr	r2, [pc, #76]	@ (8005bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b74:	f7fb ffe4 	bl	8001b40 <HAL_GetTick>
 8005b78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b7a:	e009      	b.n	8005b90 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b7c:	f7fb ffe0 	bl	8001b40 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d902      	bls.n	8005b90 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	73fb      	strb	r3, [r7, #15]
          break;
 8005b8e:	e005      	b.n	8005b9c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b90:	4b0a      	ldr	r3, [pc, #40]	@ (8005bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d0ef      	beq.n	8005b7c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005b9c:	7bfb      	ldrb	r3, [r7, #15]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d106      	bne.n	8005bb0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005ba2:	4b06      	ldr	r3, [pc, #24]	@ (8005bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ba4:	695a      	ldr	r2, [r3, #20]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	4904      	ldr	r1, [pc, #16]	@ (8005bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	40021000 	.word	0x40021000

08005bc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e040      	b.n	8005c54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d106      	bne.n	8005be8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7fb fdaa 	bl	800173c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2224      	movs	r2, #36	@ 0x24
 8005bec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 0201 	bic.w	r2, r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d002      	beq.n	8005c0c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 fedc 	bl	80069c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fc21 	bl	8006454 <UART_SetConfig>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d101      	bne.n	8005c1c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e01b      	b.n	8005c54 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689a      	ldr	r2, [r3, #8]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0201 	orr.w	r2, r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 ff5b 	bl	8006b08 <UART_CheckIdleState>
 8005c52:	4603      	mov	r3, r0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3708      	adds	r7, #8
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b08a      	sub	sp, #40	@ 0x28
 8005c60:	af02      	add	r7, sp, #8
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	603b      	str	r3, [r7, #0]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c70:	2b20      	cmp	r3, #32
 8005c72:	d177      	bne.n	8005d64 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d002      	beq.n	8005c80 <HAL_UART_Transmit+0x24>
 8005c7a:	88fb      	ldrh	r3, [r7, #6]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e070      	b.n	8005d66 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2221      	movs	r2, #33	@ 0x21
 8005c90:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c92:	f7fb ff55 	bl	8001b40 <HAL_GetTick>
 8005c96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	88fa      	ldrh	r2, [r7, #6]
 8005c9c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	88fa      	ldrh	r2, [r7, #6]
 8005ca4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cb0:	d108      	bne.n	8005cc4 <HAL_UART_Transmit+0x68>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d104      	bne.n	8005cc4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	61bb      	str	r3, [r7, #24]
 8005cc2:	e003      	b.n	8005ccc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ccc:	e02f      	b.n	8005d2e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2180      	movs	r1, #128	@ 0x80
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f000 ffbd 	bl	8006c58 <UART_WaitOnFlagUntilTimeout>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d004      	beq.n	8005cee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e03b      	b.n	8005d66 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10b      	bne.n	8005d0c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	881a      	ldrh	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d00:	b292      	uxth	r2, r2
 8005d02:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	3302      	adds	r3, #2
 8005d08:	61bb      	str	r3, [r7, #24]
 8005d0a:	e007      	b.n	8005d1c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	781a      	ldrb	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	3b01      	subs	r3, #1
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1c9      	bne.n	8005cce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	2200      	movs	r2, #0
 8005d42:	2140      	movs	r1, #64	@ 0x40
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 ff87 	bl	8006c58 <UART_WaitOnFlagUntilTimeout>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d004      	beq.n	8005d5a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2220      	movs	r2, #32
 8005d54:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e005      	b.n	8005d66 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2220      	movs	r2, #32
 8005d5e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005d60:	2300      	movs	r3, #0
 8005d62:	e000      	b.n	8005d66 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005d64:	2302      	movs	r3, #2
  }
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3720      	adds	r7, #32
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
	...

08005d70 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b08a      	sub	sp, #40	@ 0x28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d84:	2b20      	cmp	r3, #32
 8005d86:	d137      	bne.n	8005df8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d002      	beq.n	8005d94 <HAL_UART_Receive_IT+0x24>
 8005d8e:	88fb      	ldrh	r3, [r7, #6]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e030      	b.n	8005dfa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a18      	ldr	r2, [pc, #96]	@ (8005e04 <HAL_UART_Receive_IT+0x94>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d01f      	beq.n	8005de8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d018      	beq.n	8005de8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	e853 3f00 	ldrex	r3, [r3]
 8005dc2:	613b      	str	r3, [r7, #16]
   return(result);
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd4:	623b      	str	r3, [r7, #32]
 8005dd6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd8:	69f9      	ldr	r1, [r7, #28]
 8005dda:	6a3a      	ldr	r2, [r7, #32]
 8005ddc:	e841 2300 	strex	r3, r2, [r1]
 8005de0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1e6      	bne.n	8005db6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005de8:	88fb      	ldrh	r3, [r7, #6]
 8005dea:	461a      	mov	r2, r3
 8005dec:	68b9      	ldr	r1, [r7, #8]
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f000 ffa0 	bl	8006d34 <UART_Start_Receive_IT>
 8005df4:	4603      	mov	r3, r0
 8005df6:	e000      	b.n	8005dfa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005df8:	2302      	movs	r3, #2
  }
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3728      	adds	r7, #40	@ 0x28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	40008000 	.word	0x40008000

08005e08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b0ba      	sub	sp, #232	@ 0xe8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005e32:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005e36:	4013      	ands	r3, r2
 8005e38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005e3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d115      	bne.n	8005e70 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e48:	f003 0320 	and.w	r3, r3, #32
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00f      	beq.n	8005e70 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e54:	f003 0320 	and.w	r3, r3, #32
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d009      	beq.n	8005e70 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 82ca 	beq.w	80063fa <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	4798      	blx	r3
      }
      return;
 8005e6e:	e2c4      	b.n	80063fa <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005e70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 8117 	beq.w	80060a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d106      	bne.n	8005e94 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005e86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005e8a:	4b85      	ldr	r3, [pc, #532]	@ (80060a0 <HAL_UART_IRQHandler+0x298>)
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f000 810a 	beq.w	80060a8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d011      	beq.n	8005ec4 <HAL_UART_IRQHandler+0xbc>
 8005ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00b      	beq.n	8005ec4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eba:	f043 0201 	orr.w	r2, r3, #1
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d011      	beq.n	8005ef4 <HAL_UART_IRQHandler+0xec>
 8005ed0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00b      	beq.n	8005ef4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eea:	f043 0204 	orr.w	r2, r3, #4
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ef8:	f003 0304 	and.w	r3, r3, #4
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d011      	beq.n	8005f24 <HAL_UART_IRQHandler+0x11c>
 8005f00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00b      	beq.n	8005f24 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2204      	movs	r2, #4
 8005f12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f1a:	f043 0202 	orr.w	r2, r3, #2
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f28:	f003 0308 	and.w	r3, r3, #8
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d017      	beq.n	8005f60 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f34:	f003 0320 	and.w	r3, r3, #32
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d105      	bne.n	8005f48 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f40:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00b      	beq.n	8005f60 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2208      	movs	r2, #8
 8005f4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f56:	f043 0208 	orr.w	r2, r3, #8
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d012      	beq.n	8005f92 <HAL_UART_IRQHandler+0x18a>
 8005f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00c      	beq.n	8005f92 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f88:	f043 0220 	orr.w	r2, r3, #32
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 8230 	beq.w	80063fe <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fa2:	f003 0320 	and.w	r3, r3, #32
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00d      	beq.n	8005fc6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fae:	f003 0320 	and.w	r3, r3, #32
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d007      	beq.n	8005fc6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fcc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fda:	2b40      	cmp	r3, #64	@ 0x40
 8005fdc:	d005      	beq.n	8005fea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005fde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fe2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d04f      	beq.n	800608a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 ff68 	bl	8006ec0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ffa:	2b40      	cmp	r3, #64	@ 0x40
 8005ffc:	d141      	bne.n	8006082 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3308      	adds	r3, #8
 8006004:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006008:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800600c:	e853 3f00 	ldrex	r3, [r3]
 8006010:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006014:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006018:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800601c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	3308      	adds	r3, #8
 8006026:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800602a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800602e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006032:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006036:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800603a:	e841 2300 	strex	r3, r2, [r1]
 800603e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006042:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1d9      	bne.n	8005ffe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800604e:	2b00      	cmp	r3, #0
 8006050:	d013      	beq.n	800607a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006056:	4a13      	ldr	r2, [pc, #76]	@ (80060a4 <HAL_UART_IRQHandler+0x29c>)
 8006058:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800605e:	4618      	mov	r0, r3
 8006060:	f7fd fb8b 	bl	800377a <HAL_DMA_Abort_IT>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d017      	beq.n	800609a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800606e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006074:	4610      	mov	r0, r2
 8006076:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006078:	e00f      	b.n	800609a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f9d4 	bl	8006428 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006080:	e00b      	b.n	800609a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f9d0 	bl	8006428 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006088:	e007      	b.n	800609a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f9cc 	bl	8006428 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006098:	e1b1      	b.n	80063fe <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800609a:	bf00      	nop
    return;
 800609c:	e1af      	b.n	80063fe <HAL_UART_IRQHandler+0x5f6>
 800609e:	bf00      	nop
 80060a0:	04000120 	.word	0x04000120
 80060a4:	08006f89 	.word	0x08006f89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	f040 816a 	bne.w	8006386 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80060b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060b6:	f003 0310 	and.w	r3, r3, #16
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 8163 	beq.w	8006386 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80060c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060c4:	f003 0310 	and.w	r3, r3, #16
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 815c 	beq.w	8006386 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2210      	movs	r2, #16
 80060d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060e0:	2b40      	cmp	r3, #64	@ 0x40
 80060e2:	f040 80d4 	bne.w	800628e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 80ad 	beq.w	8006256 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006102:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006106:	429a      	cmp	r2, r3
 8006108:	f080 80a5 	bcs.w	8006256 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006112:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0320 	and.w	r3, r3, #32
 8006122:	2b00      	cmp	r3, #0
 8006124:	f040 8086 	bne.w	8006234 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006130:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800613c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006140:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006144:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	461a      	mov	r2, r3
 800614e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006152:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006156:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800615e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006162:	e841 2300 	strex	r3, r2, [r1]
 8006166:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800616a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1da      	bne.n	8006128 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	3308      	adds	r3, #8
 8006178:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800617c:	e853 3f00 	ldrex	r3, [r3]
 8006180:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006182:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006184:	f023 0301 	bic.w	r3, r3, #1
 8006188:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	3308      	adds	r3, #8
 8006192:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006196:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800619a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800619e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80061a2:	e841 2300 	strex	r3, r2, [r1]
 80061a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80061a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1e1      	bne.n	8006172 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3308      	adds	r3, #8
 80061b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061b8:	e853 3f00 	ldrex	r3, [r3]
 80061bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80061be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3308      	adds	r3, #8
 80061ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80061d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80061d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80061d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80061da:	e841 2300 	strex	r3, r2, [r1]
 80061de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80061e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1e3      	bne.n	80061ae <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2220      	movs	r2, #32
 80061ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061fc:	e853 3f00 	ldrex	r3, [r3]
 8006200:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006202:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006204:	f023 0310 	bic.w	r3, r3, #16
 8006208:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	461a      	mov	r2, r3
 8006212:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006216:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006218:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800621c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800621e:	e841 2300 	strex	r3, r2, [r1]
 8006222:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006224:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1e4      	bne.n	80061f4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800622e:	4618      	mov	r0, r3
 8006230:	f7fd fa65 	bl	80036fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006246:	b29b      	uxth	r3, r3
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	b29b      	uxth	r3, r3
 800624c:	4619      	mov	r1, r3
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f8f4 	bl	800643c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006254:	e0d5      	b.n	8006402 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800625c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006260:	429a      	cmp	r2, r3
 8006262:	f040 80ce 	bne.w	8006402 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0320 	and.w	r3, r3, #32
 8006272:	2b20      	cmp	r3, #32
 8006274:	f040 80c5 	bne.w	8006402 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2202      	movs	r2, #2
 800627c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006284:	4619      	mov	r1, r3
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f8d8 	bl	800643c <HAL_UARTEx_RxEventCallback>
      return;
 800628c:	e0b9      	b.n	8006402 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800629a:	b29b      	uxth	r3, r3
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f000 80ab 	beq.w	8006406 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80062b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f000 80a6 	beq.w	8006406 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c2:	e853 3f00 	ldrex	r3, [r3]
 80062c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	461a      	mov	r2, r3
 80062d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80062dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80062de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062e4:	e841 2300 	strex	r3, r2, [r1]
 80062e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1e4      	bne.n	80062ba <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3308      	adds	r3, #8
 80062f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fa:	e853 3f00 	ldrex	r3, [r3]
 80062fe:	623b      	str	r3, [r7, #32]
   return(result);
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	f023 0301 	bic.w	r3, r3, #1
 8006306:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3308      	adds	r3, #8
 8006310:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006314:	633a      	str	r2, [r7, #48]	@ 0x30
 8006316:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006318:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800631a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800631c:	e841 2300 	strex	r3, r2, [r1]
 8006320:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1e3      	bne.n	80062f0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2220      	movs	r2, #32
 800632c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	e853 3f00 	ldrex	r3, [r3]
 8006348:	60fb      	str	r3, [r7, #12]
   return(result);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f023 0310 	bic.w	r3, r3, #16
 8006350:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	461a      	mov	r2, r3
 800635a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800635e:	61fb      	str	r3, [r7, #28]
 8006360:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006362:	69b9      	ldr	r1, [r7, #24]
 8006364:	69fa      	ldr	r2, [r7, #28]
 8006366:	e841 2300 	strex	r3, r2, [r1]
 800636a:	617b      	str	r3, [r7, #20]
   return(result);
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1e4      	bne.n	800633c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2202      	movs	r2, #2
 8006376:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006378:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800637c:	4619      	mov	r1, r3
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f85c 	bl	800643c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006384:	e03f      	b.n	8006406 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800638a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00e      	beq.n	80063b0 <HAL_UART_IRQHandler+0x5a8>
 8006392:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d008      	beq.n	80063b0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80063a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 ffe9 	bl	8007380 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063ae:	e02d      	b.n	800640c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80063b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00e      	beq.n	80063da <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80063bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d008      	beq.n	80063da <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d01c      	beq.n	800640a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	4798      	blx	r3
    }
    return;
 80063d8:	e017      	b.n	800640a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80063da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d012      	beq.n	800640c <HAL_UART_IRQHandler+0x604>
 80063e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00c      	beq.n	800640c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 fdde 	bl	8006fb4 <UART_EndTransmit_IT>
    return;
 80063f8:	e008      	b.n	800640c <HAL_UART_IRQHandler+0x604>
      return;
 80063fa:	bf00      	nop
 80063fc:	e006      	b.n	800640c <HAL_UART_IRQHandler+0x604>
    return;
 80063fe:	bf00      	nop
 8006400:	e004      	b.n	800640c <HAL_UART_IRQHandler+0x604>
      return;
 8006402:	bf00      	nop
 8006404:	e002      	b.n	800640c <HAL_UART_IRQHandler+0x604>
      return;
 8006406:	bf00      	nop
 8006408:	e000      	b.n	800640c <HAL_UART_IRQHandler+0x604>
    return;
 800640a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800640c:	37e8      	adds	r7, #232	@ 0xe8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop

08006414 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	460b      	mov	r3, r1
 8006446:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006458:	b08a      	sub	sp, #40	@ 0x28
 800645a:	af00      	add	r7, sp, #0
 800645c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800645e:	2300      	movs	r3, #0
 8006460:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	431a      	orrs	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	431a      	orrs	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	69db      	ldr	r3, [r3, #28]
 8006478:	4313      	orrs	r3, r2
 800647a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	4ba4      	ldr	r3, [pc, #656]	@ (8006714 <UART_SetConfig+0x2c0>)
 8006484:	4013      	ands	r3, r2
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	6812      	ldr	r2, [r2, #0]
 800648a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800648c:	430b      	orrs	r3, r1
 800648e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	68da      	ldr	r2, [r3, #12]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a99      	ldr	r2, [pc, #612]	@ (8006718 <UART_SetConfig+0x2c4>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d004      	beq.n	80064c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064bc:	4313      	orrs	r3, r2
 80064be:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064d0:	430a      	orrs	r2, r1
 80064d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a90      	ldr	r2, [pc, #576]	@ (800671c <UART_SetConfig+0x2c8>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d126      	bne.n	800652c <UART_SetConfig+0xd8>
 80064de:	4b90      	ldr	r3, [pc, #576]	@ (8006720 <UART_SetConfig+0x2cc>)
 80064e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064e4:	f003 0303 	and.w	r3, r3, #3
 80064e8:	2b03      	cmp	r3, #3
 80064ea:	d81b      	bhi.n	8006524 <UART_SetConfig+0xd0>
 80064ec:	a201      	add	r2, pc, #4	@ (adr r2, 80064f4 <UART_SetConfig+0xa0>)
 80064ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f2:	bf00      	nop
 80064f4:	08006505 	.word	0x08006505
 80064f8:	08006515 	.word	0x08006515
 80064fc:	0800650d 	.word	0x0800650d
 8006500:	0800651d 	.word	0x0800651d
 8006504:	2301      	movs	r3, #1
 8006506:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800650a:	e116      	b.n	800673a <UART_SetConfig+0x2e6>
 800650c:	2302      	movs	r3, #2
 800650e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006512:	e112      	b.n	800673a <UART_SetConfig+0x2e6>
 8006514:	2304      	movs	r3, #4
 8006516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800651a:	e10e      	b.n	800673a <UART_SetConfig+0x2e6>
 800651c:	2308      	movs	r3, #8
 800651e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006522:	e10a      	b.n	800673a <UART_SetConfig+0x2e6>
 8006524:	2310      	movs	r3, #16
 8006526:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800652a:	e106      	b.n	800673a <UART_SetConfig+0x2e6>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a7c      	ldr	r2, [pc, #496]	@ (8006724 <UART_SetConfig+0x2d0>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d138      	bne.n	80065a8 <UART_SetConfig+0x154>
 8006536:	4b7a      	ldr	r3, [pc, #488]	@ (8006720 <UART_SetConfig+0x2cc>)
 8006538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800653c:	f003 030c 	and.w	r3, r3, #12
 8006540:	2b0c      	cmp	r3, #12
 8006542:	d82d      	bhi.n	80065a0 <UART_SetConfig+0x14c>
 8006544:	a201      	add	r2, pc, #4	@ (adr r2, 800654c <UART_SetConfig+0xf8>)
 8006546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654a:	bf00      	nop
 800654c:	08006581 	.word	0x08006581
 8006550:	080065a1 	.word	0x080065a1
 8006554:	080065a1 	.word	0x080065a1
 8006558:	080065a1 	.word	0x080065a1
 800655c:	08006591 	.word	0x08006591
 8006560:	080065a1 	.word	0x080065a1
 8006564:	080065a1 	.word	0x080065a1
 8006568:	080065a1 	.word	0x080065a1
 800656c:	08006589 	.word	0x08006589
 8006570:	080065a1 	.word	0x080065a1
 8006574:	080065a1 	.word	0x080065a1
 8006578:	080065a1 	.word	0x080065a1
 800657c:	08006599 	.word	0x08006599
 8006580:	2300      	movs	r3, #0
 8006582:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006586:	e0d8      	b.n	800673a <UART_SetConfig+0x2e6>
 8006588:	2302      	movs	r3, #2
 800658a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800658e:	e0d4      	b.n	800673a <UART_SetConfig+0x2e6>
 8006590:	2304      	movs	r3, #4
 8006592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006596:	e0d0      	b.n	800673a <UART_SetConfig+0x2e6>
 8006598:	2308      	movs	r3, #8
 800659a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800659e:	e0cc      	b.n	800673a <UART_SetConfig+0x2e6>
 80065a0:	2310      	movs	r3, #16
 80065a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065a6:	e0c8      	b.n	800673a <UART_SetConfig+0x2e6>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a5e      	ldr	r2, [pc, #376]	@ (8006728 <UART_SetConfig+0x2d4>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d125      	bne.n	80065fe <UART_SetConfig+0x1aa>
 80065b2:	4b5b      	ldr	r3, [pc, #364]	@ (8006720 <UART_SetConfig+0x2cc>)
 80065b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065b8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80065bc:	2b30      	cmp	r3, #48	@ 0x30
 80065be:	d016      	beq.n	80065ee <UART_SetConfig+0x19a>
 80065c0:	2b30      	cmp	r3, #48	@ 0x30
 80065c2:	d818      	bhi.n	80065f6 <UART_SetConfig+0x1a2>
 80065c4:	2b20      	cmp	r3, #32
 80065c6:	d00a      	beq.n	80065de <UART_SetConfig+0x18a>
 80065c8:	2b20      	cmp	r3, #32
 80065ca:	d814      	bhi.n	80065f6 <UART_SetConfig+0x1a2>
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <UART_SetConfig+0x182>
 80065d0:	2b10      	cmp	r3, #16
 80065d2:	d008      	beq.n	80065e6 <UART_SetConfig+0x192>
 80065d4:	e00f      	b.n	80065f6 <UART_SetConfig+0x1a2>
 80065d6:	2300      	movs	r3, #0
 80065d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065dc:	e0ad      	b.n	800673a <UART_SetConfig+0x2e6>
 80065de:	2302      	movs	r3, #2
 80065e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065e4:	e0a9      	b.n	800673a <UART_SetConfig+0x2e6>
 80065e6:	2304      	movs	r3, #4
 80065e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ec:	e0a5      	b.n	800673a <UART_SetConfig+0x2e6>
 80065ee:	2308      	movs	r3, #8
 80065f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065f4:	e0a1      	b.n	800673a <UART_SetConfig+0x2e6>
 80065f6:	2310      	movs	r3, #16
 80065f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065fc:	e09d      	b.n	800673a <UART_SetConfig+0x2e6>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a4a      	ldr	r2, [pc, #296]	@ (800672c <UART_SetConfig+0x2d8>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d125      	bne.n	8006654 <UART_SetConfig+0x200>
 8006608:	4b45      	ldr	r3, [pc, #276]	@ (8006720 <UART_SetConfig+0x2cc>)
 800660a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800660e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006612:	2bc0      	cmp	r3, #192	@ 0xc0
 8006614:	d016      	beq.n	8006644 <UART_SetConfig+0x1f0>
 8006616:	2bc0      	cmp	r3, #192	@ 0xc0
 8006618:	d818      	bhi.n	800664c <UART_SetConfig+0x1f8>
 800661a:	2b80      	cmp	r3, #128	@ 0x80
 800661c:	d00a      	beq.n	8006634 <UART_SetConfig+0x1e0>
 800661e:	2b80      	cmp	r3, #128	@ 0x80
 8006620:	d814      	bhi.n	800664c <UART_SetConfig+0x1f8>
 8006622:	2b00      	cmp	r3, #0
 8006624:	d002      	beq.n	800662c <UART_SetConfig+0x1d8>
 8006626:	2b40      	cmp	r3, #64	@ 0x40
 8006628:	d008      	beq.n	800663c <UART_SetConfig+0x1e8>
 800662a:	e00f      	b.n	800664c <UART_SetConfig+0x1f8>
 800662c:	2300      	movs	r3, #0
 800662e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006632:	e082      	b.n	800673a <UART_SetConfig+0x2e6>
 8006634:	2302      	movs	r3, #2
 8006636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800663a:	e07e      	b.n	800673a <UART_SetConfig+0x2e6>
 800663c:	2304      	movs	r3, #4
 800663e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006642:	e07a      	b.n	800673a <UART_SetConfig+0x2e6>
 8006644:	2308      	movs	r3, #8
 8006646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800664a:	e076      	b.n	800673a <UART_SetConfig+0x2e6>
 800664c:	2310      	movs	r3, #16
 800664e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006652:	e072      	b.n	800673a <UART_SetConfig+0x2e6>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a35      	ldr	r2, [pc, #212]	@ (8006730 <UART_SetConfig+0x2dc>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d12a      	bne.n	80066b4 <UART_SetConfig+0x260>
 800665e:	4b30      	ldr	r3, [pc, #192]	@ (8006720 <UART_SetConfig+0x2cc>)
 8006660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006664:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006668:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800666c:	d01a      	beq.n	80066a4 <UART_SetConfig+0x250>
 800666e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006672:	d81b      	bhi.n	80066ac <UART_SetConfig+0x258>
 8006674:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006678:	d00c      	beq.n	8006694 <UART_SetConfig+0x240>
 800667a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800667e:	d815      	bhi.n	80066ac <UART_SetConfig+0x258>
 8006680:	2b00      	cmp	r3, #0
 8006682:	d003      	beq.n	800668c <UART_SetConfig+0x238>
 8006684:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006688:	d008      	beq.n	800669c <UART_SetConfig+0x248>
 800668a:	e00f      	b.n	80066ac <UART_SetConfig+0x258>
 800668c:	2300      	movs	r3, #0
 800668e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006692:	e052      	b.n	800673a <UART_SetConfig+0x2e6>
 8006694:	2302      	movs	r3, #2
 8006696:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800669a:	e04e      	b.n	800673a <UART_SetConfig+0x2e6>
 800669c:	2304      	movs	r3, #4
 800669e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066a2:	e04a      	b.n	800673a <UART_SetConfig+0x2e6>
 80066a4:	2308      	movs	r3, #8
 80066a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066aa:	e046      	b.n	800673a <UART_SetConfig+0x2e6>
 80066ac:	2310      	movs	r3, #16
 80066ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066b2:	e042      	b.n	800673a <UART_SetConfig+0x2e6>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a17      	ldr	r2, [pc, #92]	@ (8006718 <UART_SetConfig+0x2c4>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d13a      	bne.n	8006734 <UART_SetConfig+0x2e0>
 80066be:	4b18      	ldr	r3, [pc, #96]	@ (8006720 <UART_SetConfig+0x2cc>)
 80066c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80066c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066cc:	d01a      	beq.n	8006704 <UART_SetConfig+0x2b0>
 80066ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066d2:	d81b      	bhi.n	800670c <UART_SetConfig+0x2b8>
 80066d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066d8:	d00c      	beq.n	80066f4 <UART_SetConfig+0x2a0>
 80066da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066de:	d815      	bhi.n	800670c <UART_SetConfig+0x2b8>
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d003      	beq.n	80066ec <UART_SetConfig+0x298>
 80066e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066e8:	d008      	beq.n	80066fc <UART_SetConfig+0x2a8>
 80066ea:	e00f      	b.n	800670c <UART_SetConfig+0x2b8>
 80066ec:	2300      	movs	r3, #0
 80066ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066f2:	e022      	b.n	800673a <UART_SetConfig+0x2e6>
 80066f4:	2302      	movs	r3, #2
 80066f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066fa:	e01e      	b.n	800673a <UART_SetConfig+0x2e6>
 80066fc:	2304      	movs	r3, #4
 80066fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006702:	e01a      	b.n	800673a <UART_SetConfig+0x2e6>
 8006704:	2308      	movs	r3, #8
 8006706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800670a:	e016      	b.n	800673a <UART_SetConfig+0x2e6>
 800670c:	2310      	movs	r3, #16
 800670e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006712:	e012      	b.n	800673a <UART_SetConfig+0x2e6>
 8006714:	efff69f3 	.word	0xefff69f3
 8006718:	40008000 	.word	0x40008000
 800671c:	40013800 	.word	0x40013800
 8006720:	40021000 	.word	0x40021000
 8006724:	40004400 	.word	0x40004400
 8006728:	40004800 	.word	0x40004800
 800672c:	40004c00 	.word	0x40004c00
 8006730:	40005000 	.word	0x40005000
 8006734:	2310      	movs	r3, #16
 8006736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a9f      	ldr	r2, [pc, #636]	@ (80069bc <UART_SetConfig+0x568>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d17a      	bne.n	800683a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006744:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006748:	2b08      	cmp	r3, #8
 800674a:	d824      	bhi.n	8006796 <UART_SetConfig+0x342>
 800674c:	a201      	add	r2, pc, #4	@ (adr r2, 8006754 <UART_SetConfig+0x300>)
 800674e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006752:	bf00      	nop
 8006754:	08006779 	.word	0x08006779
 8006758:	08006797 	.word	0x08006797
 800675c:	08006781 	.word	0x08006781
 8006760:	08006797 	.word	0x08006797
 8006764:	08006787 	.word	0x08006787
 8006768:	08006797 	.word	0x08006797
 800676c:	08006797 	.word	0x08006797
 8006770:	08006797 	.word	0x08006797
 8006774:	0800678f 	.word	0x0800678f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006778:	f7fe fcda 	bl	8005130 <HAL_RCC_GetPCLK1Freq>
 800677c:	61f8      	str	r0, [r7, #28]
        break;
 800677e:	e010      	b.n	80067a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006780:	4b8f      	ldr	r3, [pc, #572]	@ (80069c0 <UART_SetConfig+0x56c>)
 8006782:	61fb      	str	r3, [r7, #28]
        break;
 8006784:	e00d      	b.n	80067a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006786:	f7fe fc3b 	bl	8005000 <HAL_RCC_GetSysClockFreq>
 800678a:	61f8      	str	r0, [r7, #28]
        break;
 800678c:	e009      	b.n	80067a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800678e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006792:	61fb      	str	r3, [r7, #28]
        break;
 8006794:	e005      	b.n	80067a2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006796:	2300      	movs	r3, #0
 8006798:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80067a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f000 80fb 	beq.w	80069a0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	685a      	ldr	r2, [r3, #4]
 80067ae:	4613      	mov	r3, r2
 80067b0:	005b      	lsls	r3, r3, #1
 80067b2:	4413      	add	r3, r2
 80067b4:	69fa      	ldr	r2, [r7, #28]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d305      	bcc.n	80067c6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80067c0:	69fa      	ldr	r2, [r7, #28]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d903      	bls.n	80067ce <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80067cc:	e0e8      	b.n	80069a0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	2200      	movs	r2, #0
 80067d2:	461c      	mov	r4, r3
 80067d4:	4615      	mov	r5, r2
 80067d6:	f04f 0200 	mov.w	r2, #0
 80067da:	f04f 0300 	mov.w	r3, #0
 80067de:	022b      	lsls	r3, r5, #8
 80067e0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80067e4:	0222      	lsls	r2, r4, #8
 80067e6:	68f9      	ldr	r1, [r7, #12]
 80067e8:	6849      	ldr	r1, [r1, #4]
 80067ea:	0849      	lsrs	r1, r1, #1
 80067ec:	2000      	movs	r0, #0
 80067ee:	4688      	mov	r8, r1
 80067f0:	4681      	mov	r9, r0
 80067f2:	eb12 0a08 	adds.w	sl, r2, r8
 80067f6:	eb43 0b09 	adc.w	fp, r3, r9
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	603b      	str	r3, [r7, #0]
 8006802:	607a      	str	r2, [r7, #4]
 8006804:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006808:	4650      	mov	r0, sl
 800680a:	4659      	mov	r1, fp
 800680c:	f7f9 fd38 	bl	8000280 <__aeabi_uldivmod>
 8006810:	4602      	mov	r2, r0
 8006812:	460b      	mov	r3, r1
 8006814:	4613      	mov	r3, r2
 8006816:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800681e:	d308      	bcc.n	8006832 <UART_SetConfig+0x3de>
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006826:	d204      	bcs.n	8006832 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	69ba      	ldr	r2, [r7, #24]
 800682e:	60da      	str	r2, [r3, #12]
 8006830:	e0b6      	b.n	80069a0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006838:	e0b2      	b.n	80069a0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006842:	d15e      	bne.n	8006902 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006844:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006848:	2b08      	cmp	r3, #8
 800684a:	d828      	bhi.n	800689e <UART_SetConfig+0x44a>
 800684c:	a201      	add	r2, pc, #4	@ (adr r2, 8006854 <UART_SetConfig+0x400>)
 800684e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006852:	bf00      	nop
 8006854:	08006879 	.word	0x08006879
 8006858:	08006881 	.word	0x08006881
 800685c:	08006889 	.word	0x08006889
 8006860:	0800689f 	.word	0x0800689f
 8006864:	0800688f 	.word	0x0800688f
 8006868:	0800689f 	.word	0x0800689f
 800686c:	0800689f 	.word	0x0800689f
 8006870:	0800689f 	.word	0x0800689f
 8006874:	08006897 	.word	0x08006897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006878:	f7fe fc5a 	bl	8005130 <HAL_RCC_GetPCLK1Freq>
 800687c:	61f8      	str	r0, [r7, #28]
        break;
 800687e:	e014      	b.n	80068aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006880:	f7fe fc6c 	bl	800515c <HAL_RCC_GetPCLK2Freq>
 8006884:	61f8      	str	r0, [r7, #28]
        break;
 8006886:	e010      	b.n	80068aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006888:	4b4d      	ldr	r3, [pc, #308]	@ (80069c0 <UART_SetConfig+0x56c>)
 800688a:	61fb      	str	r3, [r7, #28]
        break;
 800688c:	e00d      	b.n	80068aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800688e:	f7fe fbb7 	bl	8005000 <HAL_RCC_GetSysClockFreq>
 8006892:	61f8      	str	r0, [r7, #28]
        break;
 8006894:	e009      	b.n	80068aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006896:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800689a:	61fb      	str	r3, [r7, #28]
        break;
 800689c:	e005      	b.n	80068aa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800689e:	2300      	movs	r3, #0
 80068a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80068a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d077      	beq.n	80069a0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	005a      	lsls	r2, r3, #1
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	085b      	lsrs	r3, r3, #1
 80068ba:	441a      	add	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	2b0f      	cmp	r3, #15
 80068ca:	d916      	bls.n	80068fa <UART_SetConfig+0x4a6>
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068d2:	d212      	bcs.n	80068fa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	f023 030f 	bic.w	r3, r3, #15
 80068dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	085b      	lsrs	r3, r3, #1
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	f003 0307 	and.w	r3, r3, #7
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	8afb      	ldrh	r3, [r7, #22]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	8afa      	ldrh	r2, [r7, #22]
 80068f6:	60da      	str	r2, [r3, #12]
 80068f8:	e052      	b.n	80069a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006900:	e04e      	b.n	80069a0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006902:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006906:	2b08      	cmp	r3, #8
 8006908:	d827      	bhi.n	800695a <UART_SetConfig+0x506>
 800690a:	a201      	add	r2, pc, #4	@ (adr r2, 8006910 <UART_SetConfig+0x4bc>)
 800690c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006910:	08006935 	.word	0x08006935
 8006914:	0800693d 	.word	0x0800693d
 8006918:	08006945 	.word	0x08006945
 800691c:	0800695b 	.word	0x0800695b
 8006920:	0800694b 	.word	0x0800694b
 8006924:	0800695b 	.word	0x0800695b
 8006928:	0800695b 	.word	0x0800695b
 800692c:	0800695b 	.word	0x0800695b
 8006930:	08006953 	.word	0x08006953
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006934:	f7fe fbfc 	bl	8005130 <HAL_RCC_GetPCLK1Freq>
 8006938:	61f8      	str	r0, [r7, #28]
        break;
 800693a:	e014      	b.n	8006966 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800693c:	f7fe fc0e 	bl	800515c <HAL_RCC_GetPCLK2Freq>
 8006940:	61f8      	str	r0, [r7, #28]
        break;
 8006942:	e010      	b.n	8006966 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006944:	4b1e      	ldr	r3, [pc, #120]	@ (80069c0 <UART_SetConfig+0x56c>)
 8006946:	61fb      	str	r3, [r7, #28]
        break;
 8006948:	e00d      	b.n	8006966 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800694a:	f7fe fb59 	bl	8005000 <HAL_RCC_GetSysClockFreq>
 800694e:	61f8      	str	r0, [r7, #28]
        break;
 8006950:	e009      	b.n	8006966 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006952:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006956:	61fb      	str	r3, [r7, #28]
        break;
 8006958:	e005      	b.n	8006966 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800695a:	2300      	movs	r3, #0
 800695c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006964:	bf00      	nop
    }

    if (pclk != 0U)
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d019      	beq.n	80069a0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	085a      	lsrs	r2, r3, #1
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	441a      	add	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	fbb2 f3f3 	udiv	r3, r2, r3
 800697e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	2b0f      	cmp	r3, #15
 8006984:	d909      	bls.n	800699a <UART_SetConfig+0x546>
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800698c:	d205      	bcs.n	800699a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	b29a      	uxth	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	60da      	str	r2, [r3, #12]
 8006998:	e002      	b.n	80069a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80069ac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3728      	adds	r7, #40	@ 0x28
 80069b4:	46bd      	mov	sp, r7
 80069b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069ba:	bf00      	nop
 80069bc:	40008000 	.word	0x40008000
 80069c0:	00f42400 	.word	0x00f42400

080069c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d0:	f003 0308 	and.w	r3, r3, #8
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00a      	beq.n	80069ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00a      	beq.n	8006a10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a14:	f003 0302 	and.w	r3, r3, #2
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00a      	beq.n	8006a32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a36:	f003 0304 	and.w	r3, r3, #4
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00a      	beq.n	8006a54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a58:	f003 0310 	and.w	r3, r3, #16
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00a      	beq.n	8006a76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	430a      	orrs	r2, r1
 8006a74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a7a:	f003 0320 	and.w	r3, r3, #32
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00a      	beq.n	8006a98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	430a      	orrs	r2, r1
 8006a96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d01a      	beq.n	8006ada <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	430a      	orrs	r2, r1
 8006ab8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006abe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ac2:	d10a      	bne.n	8006ada <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	605a      	str	r2, [r3, #4]
  }
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b098      	sub	sp, #96	@ 0x60
 8006b0c:	af02      	add	r7, sp, #8
 8006b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b18:	f7fb f812 	bl	8001b40 <HAL_GetTick>
 8006b1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0308 	and.w	r3, r3, #8
 8006b28:	2b08      	cmp	r3, #8
 8006b2a:	d12e      	bne.n	8006b8a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b34:	2200      	movs	r2, #0
 8006b36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f88c 	bl	8006c58 <UART_WaitOnFlagUntilTimeout>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d021      	beq.n	8006b8a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4e:	e853 3f00 	ldrex	r3, [r3]
 8006b52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	461a      	mov	r2, r3
 8006b62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b64:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b6c:	e841 2300 	strex	r3, r2, [r1]
 8006b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1e6      	bne.n	8006b46 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e062      	b.n	8006c50 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0304 	and.w	r3, r3, #4
 8006b94:	2b04      	cmp	r3, #4
 8006b96:	d149      	bne.n	8006c2c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f856 	bl	8006c58 <UART_WaitOnFlagUntilTimeout>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d03c      	beq.n	8006c2c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bba:	e853 3f00 	ldrex	r3, [r3]
 8006bbe:	623b      	str	r3, [r7, #32]
   return(result);
 8006bc0:	6a3b      	ldr	r3, [r7, #32]
 8006bc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	461a      	mov	r2, r3
 8006bce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bd8:	e841 2300 	strex	r3, r2, [r1]
 8006bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1e6      	bne.n	8006bb2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	3308      	adds	r3, #8
 8006bea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	e853 3f00 	ldrex	r3, [r3]
 8006bf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f023 0301 	bic.w	r3, r3, #1
 8006bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	3308      	adds	r3, #8
 8006c02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c04:	61fa      	str	r2, [r7, #28]
 8006c06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c08:	69b9      	ldr	r1, [r7, #24]
 8006c0a:	69fa      	ldr	r2, [r7, #28]
 8006c0c:	e841 2300 	strex	r3, r2, [r1]
 8006c10:	617b      	str	r3, [r7, #20]
   return(result);
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1e5      	bne.n	8006be4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2220      	movs	r2, #32
 8006c1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e011      	b.n	8006c50 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2220      	movs	r2, #32
 8006c30:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2220      	movs	r2, #32
 8006c36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3758      	adds	r7, #88	@ 0x58
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	603b      	str	r3, [r7, #0]
 8006c64:	4613      	mov	r3, r2
 8006c66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c68:	e04f      	b.n	8006d0a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c70:	d04b      	beq.n	8006d0a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c72:	f7fa ff65 	bl	8001b40 <HAL_GetTick>
 8006c76:	4602      	mov	r2, r0
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	69ba      	ldr	r2, [r7, #24]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d302      	bcc.n	8006c88 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e04e      	b.n	8006d2a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0304 	and.w	r3, r3, #4
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d037      	beq.n	8006d0a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	2b80      	cmp	r3, #128	@ 0x80
 8006c9e:	d034      	beq.n	8006d0a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	2b40      	cmp	r3, #64	@ 0x40
 8006ca4:	d031      	beq.n	8006d0a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	69db      	ldr	r3, [r3, #28]
 8006cac:	f003 0308 	and.w	r3, r3, #8
 8006cb0:	2b08      	cmp	r3, #8
 8006cb2:	d110      	bne.n	8006cd6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2208      	movs	r2, #8
 8006cba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f000 f8ff 	bl	8006ec0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2208      	movs	r2, #8
 8006cc6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e029      	b.n	8006d2a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ce0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ce4:	d111      	bne.n	8006d0a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006cee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f000 f8e5 	bl	8006ec0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2220      	movs	r2, #32
 8006cfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e00f      	b.n	8006d2a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	69da      	ldr	r2, [r3, #28]
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	4013      	ands	r3, r2
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	bf0c      	ite	eq
 8006d1a:	2301      	moveq	r3, #1
 8006d1c:	2300      	movne	r3, #0
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	461a      	mov	r2, r3
 8006d22:	79fb      	ldrb	r3, [r7, #7]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d0a0      	beq.n	8006c6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
	...

08006d34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b097      	sub	sp, #92	@ 0x5c
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	88fa      	ldrh	r2, [r7, #6]
 8006d4c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	88fa      	ldrh	r2, [r7, #6]
 8006d54:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d66:	d10e      	bne.n	8006d86 <UART_Start_Receive_IT+0x52>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d105      	bne.n	8006d7c <UART_Start_Receive_IT+0x48>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006d76:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d7a:	e02d      	b.n	8006dd8 <UART_Start_Receive_IT+0xa4>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	22ff      	movs	r2, #255	@ 0xff
 8006d80:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d84:	e028      	b.n	8006dd8 <UART_Start_Receive_IT+0xa4>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10d      	bne.n	8006daa <UART_Start_Receive_IT+0x76>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d104      	bne.n	8006da0 <UART_Start_Receive_IT+0x6c>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	22ff      	movs	r2, #255	@ 0xff
 8006d9a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d9e:	e01b      	b.n	8006dd8 <UART_Start_Receive_IT+0xa4>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	227f      	movs	r2, #127	@ 0x7f
 8006da4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006da8:	e016      	b.n	8006dd8 <UART_Start_Receive_IT+0xa4>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006db2:	d10d      	bne.n	8006dd0 <UART_Start_Receive_IT+0x9c>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d104      	bne.n	8006dc6 <UART_Start_Receive_IT+0x92>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	227f      	movs	r2, #127	@ 0x7f
 8006dc0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006dc4:	e008      	b.n	8006dd8 <UART_Start_Receive_IT+0xa4>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	223f      	movs	r2, #63	@ 0x3f
 8006dca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006dce:	e003      	b.n	8006dd8 <UART_Start_Receive_IT+0xa4>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2222      	movs	r2, #34	@ 0x22
 8006de4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	3308      	adds	r3, #8
 8006dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006df2:	e853 3f00 	ldrex	r3, [r3]
 8006df6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dfa:	f043 0301 	orr.w	r3, r3, #1
 8006dfe:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	3308      	adds	r3, #8
 8006e06:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006e08:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006e0a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006e0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e10:	e841 2300 	strex	r3, r2, [r1]
 8006e14:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006e16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1e5      	bne.n	8006de8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e24:	d107      	bne.n	8006e36 <UART_Start_Receive_IT+0x102>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d103      	bne.n	8006e36 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	4a21      	ldr	r2, [pc, #132]	@ (8006eb8 <UART_Start_Receive_IT+0x184>)
 8006e32:	669a      	str	r2, [r3, #104]	@ 0x68
 8006e34:	e002      	b.n	8006e3c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	4a20      	ldr	r2, [pc, #128]	@ (8006ebc <UART_Start_Receive_IT+0x188>)
 8006e3a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d019      	beq.n	8006e78 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e4c:	e853 3f00 	ldrex	r3, [r3]
 8006e50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e54:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006e58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e62:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e64:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006e68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e6a:	e841 2300 	strex	r3, r2, [r1]
 8006e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1e6      	bne.n	8006e44 <UART_Start_Receive_IT+0x110>
 8006e76:	e018      	b.n	8006eaa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	e853 3f00 	ldrex	r3, [r3]
 8006e84:	613b      	str	r3, [r7, #16]
   return(result);
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	f043 0320 	orr.w	r3, r3, #32
 8006e8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	461a      	mov	r2, r3
 8006e94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e96:	623b      	str	r3, [r7, #32]
 8006e98:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9a:	69f9      	ldr	r1, [r7, #28]
 8006e9c:	6a3a      	ldr	r2, [r7, #32]
 8006e9e:	e841 2300 	strex	r3, r2, [r1]
 8006ea2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1e6      	bne.n	8006e78 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	375c      	adds	r7, #92	@ 0x5c
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr
 8006eb8:	080071c5 	.word	0x080071c5
 8006ebc:	08007009 	.word	0x08007009

08006ec0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b095      	sub	sp, #84	@ 0x54
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ed0:	e853 3f00 	ldrex	r3, [r3]
 8006ed4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006edc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ee6:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ee8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006eec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006eee:	e841 2300 	strex	r3, r2, [r1]
 8006ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1e6      	bne.n	8006ec8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	3308      	adds	r3, #8
 8006f00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	e853 3f00 	ldrex	r3, [r3]
 8006f08:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	f023 0301 	bic.w	r3, r3, #1
 8006f10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	3308      	adds	r3, #8
 8006f18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f22:	e841 2300 	strex	r3, r2, [r1]
 8006f26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1e5      	bne.n	8006efa <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d118      	bne.n	8006f68 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	e853 3f00 	ldrex	r3, [r3]
 8006f42:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	f023 0310 	bic.w	r3, r3, #16
 8006f4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	461a      	mov	r2, r3
 8006f52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f54:	61bb      	str	r3, [r7, #24]
 8006f56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f58:	6979      	ldr	r1, [r7, #20]
 8006f5a:	69ba      	ldr	r2, [r7, #24]
 8006f5c:	e841 2300 	strex	r3, r2, [r1]
 8006f60:	613b      	str	r3, [r7, #16]
   return(result);
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1e6      	bne.n	8006f36 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006f7c:	bf00      	nop
 8006f7e:	3754      	adds	r7, #84	@ 0x54
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f7ff fa3e 	bl	8006428 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fac:	bf00      	nop
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b088      	sub	sp, #32
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	e853 3f00 	ldrex	r3, [r3]
 8006fc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fd0:	61fb      	str	r3, [r7, #28]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	61bb      	str	r3, [r7, #24]
 8006fdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fde:	6979      	ldr	r1, [r7, #20]
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	e841 2300 	strex	r3, r2, [r1]
 8006fe6:	613b      	str	r3, [r7, #16]
   return(result);
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1e6      	bne.n	8006fbc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2220      	movs	r2, #32
 8006ff2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7ff fa0a 	bl	8006414 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007000:	bf00      	nop
 8007002:	3720      	adds	r7, #32
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b09c      	sub	sp, #112	@ 0x70
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007016:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007020:	2b22      	cmp	r3, #34	@ 0x22
 8007022:	f040 80be 	bne.w	80071a2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800702c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007030:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007034:	b2d9      	uxtb	r1, r3
 8007036:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800703a:	b2da      	uxtb	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007040:	400a      	ands	r2, r1
 8007042:	b2d2      	uxtb	r2, r2
 8007044:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800704a:	1c5a      	adds	r2, r3, #1
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007056:	b29b      	uxth	r3, r3
 8007058:	3b01      	subs	r3, #1
 800705a:	b29a      	uxth	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007068:	b29b      	uxth	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	f040 80a3 	bne.w	80071b6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007076:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007078:	e853 3f00 	ldrex	r3, [r3]
 800707c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800707e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007080:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007084:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	461a      	mov	r2, r3
 800708c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800708e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007090:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007092:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007094:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007096:	e841 2300 	strex	r3, r2, [r1]
 800709a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800709c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1e6      	bne.n	8007070 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	3308      	adds	r3, #8
 80070a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ac:	e853 3f00 	ldrex	r3, [r3]
 80070b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80070b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070b4:	f023 0301 	bic.w	r3, r3, #1
 80070b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	3308      	adds	r3, #8
 80070c0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80070c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80070c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80070c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070ca:	e841 2300 	strex	r3, r2, [r1]
 80070ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1e5      	bne.n	80070a2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2220      	movs	r2, #32
 80070da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a34      	ldr	r2, [pc, #208]	@ (80071c0 <UART_RxISR_8BIT+0x1b8>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d01f      	beq.n	8007134 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d018      	beq.n	8007134 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710a:	e853 3f00 	ldrex	r3, [r3]
 800710e:	623b      	str	r3, [r7, #32]
   return(result);
 8007110:	6a3b      	ldr	r3, [r7, #32]
 8007112:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007116:	663b      	str	r3, [r7, #96]	@ 0x60
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	461a      	mov	r2, r3
 800711e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007120:	633b      	str	r3, [r7, #48]	@ 0x30
 8007122:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007124:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007126:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007128:	e841 2300 	strex	r3, r2, [r1]
 800712c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800712e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1e6      	bne.n	8007102 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007138:	2b01      	cmp	r3, #1
 800713a:	d12e      	bne.n	800719a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	e853 3f00 	ldrex	r3, [r3]
 800714e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f023 0310 	bic.w	r3, r3, #16
 8007156:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	461a      	mov	r2, r3
 800715e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007160:	61fb      	str	r3, [r7, #28]
 8007162:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007164:	69b9      	ldr	r1, [r7, #24]
 8007166:	69fa      	ldr	r2, [r7, #28]
 8007168:	e841 2300 	strex	r3, r2, [r1]
 800716c:	617b      	str	r3, [r7, #20]
   return(result);
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d1e6      	bne.n	8007142 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	69db      	ldr	r3, [r3, #28]
 800717a:	f003 0310 	and.w	r3, r3, #16
 800717e:	2b10      	cmp	r3, #16
 8007180:	d103      	bne.n	800718a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2210      	movs	r2, #16
 8007188:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007190:	4619      	mov	r1, r3
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7ff f952 	bl	800643c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007198:	e00d      	b.n	80071b6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7f9 faf8 	bl	8000790 <HAL_UART_RxCpltCallback>
}
 80071a0:	e009      	b.n	80071b6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	8b1b      	ldrh	r3, [r3, #24]
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f042 0208 	orr.w	r2, r2, #8
 80071b2:	b292      	uxth	r2, r2
 80071b4:	831a      	strh	r2, [r3, #24]
}
 80071b6:	bf00      	nop
 80071b8:	3770      	adds	r7, #112	@ 0x70
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	40008000 	.word	0x40008000

080071c4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b09c      	sub	sp, #112	@ 0x70
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80071d2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071dc:	2b22      	cmp	r3, #34	@ 0x22
 80071de:	f040 80be 	bne.w	800735e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80071e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071f0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80071f2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80071f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80071fa:	4013      	ands	r3, r2
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007200:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007206:	1c9a      	adds	r2, r3, #2
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007212:	b29b      	uxth	r3, r3
 8007214:	3b01      	subs	r3, #1
 8007216:	b29a      	uxth	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007224:	b29b      	uxth	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	f040 80a3 	bne.w	8007372 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007232:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007234:	e853 3f00 	ldrex	r3, [r3]
 8007238:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800723a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800723c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007240:	667b      	str	r3, [r7, #100]	@ 0x64
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	461a      	mov	r2, r3
 8007248:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800724a:	657b      	str	r3, [r7, #84]	@ 0x54
 800724c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007250:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007252:	e841 2300 	strex	r3, r2, [r1]
 8007256:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007258:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1e6      	bne.n	800722c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	3308      	adds	r3, #8
 8007264:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007268:	e853 3f00 	ldrex	r3, [r3]
 800726c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800726e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007270:	f023 0301 	bic.w	r3, r3, #1
 8007274:	663b      	str	r3, [r7, #96]	@ 0x60
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	3308      	adds	r3, #8
 800727c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800727e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007280:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007282:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007284:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007286:	e841 2300 	strex	r3, r2, [r1]
 800728a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800728c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1e5      	bne.n	800725e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2220      	movs	r2, #32
 8007296:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a34      	ldr	r2, [pc, #208]	@ (800737c <UART_RxISR_16BIT+0x1b8>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d01f      	beq.n	80072f0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d018      	beq.n	80072f0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c4:	6a3b      	ldr	r3, [r7, #32]
 80072c6:	e853 3f00 	ldrex	r3, [r3]
 80072ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80072d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	461a      	mov	r2, r3
 80072da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072de:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072e4:	e841 2300 	strex	r3, r2, [r1]
 80072e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1e6      	bne.n	80072be <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d12e      	bne.n	8007356 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	e853 3f00 	ldrex	r3, [r3]
 800730a:	60bb      	str	r3, [r7, #8]
   return(result);
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	f023 0310 	bic.w	r3, r3, #16
 8007312:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	461a      	mov	r2, r3
 800731a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800731c:	61bb      	str	r3, [r7, #24]
 800731e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007320:	6979      	ldr	r1, [r7, #20]
 8007322:	69ba      	ldr	r2, [r7, #24]
 8007324:	e841 2300 	strex	r3, r2, [r1]
 8007328:	613b      	str	r3, [r7, #16]
   return(result);
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1e6      	bne.n	80072fe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	69db      	ldr	r3, [r3, #28]
 8007336:	f003 0310 	and.w	r3, r3, #16
 800733a:	2b10      	cmp	r3, #16
 800733c:	d103      	bne.n	8007346 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2210      	movs	r2, #16
 8007344:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800734c:	4619      	mov	r1, r3
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f7ff f874 	bl	800643c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007354:	e00d      	b.n	8007372 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f7f9 fa1a 	bl	8000790 <HAL_UART_RxCpltCallback>
}
 800735c:	e009      	b.n	8007372 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	8b1b      	ldrh	r3, [r3, #24]
 8007364:	b29a      	uxth	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f042 0208 	orr.w	r2, r2, #8
 800736e:	b292      	uxth	r2, r2
 8007370:	831a      	strh	r2, [r3, #24]
}
 8007372:	bf00      	nop
 8007374:	3770      	adds	r7, #112	@ 0x70
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	40008000 	.word	0x40008000

08007380 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8007394:	b480      	push	{r7}
 8007396:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8007398:	bf00      	nop
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
	...

080073a4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af04      	add	r7, sp, #16
 80073aa:	4603      	mov	r3, r0
 80073ac:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80073ae:	f04f 33ff 	mov.w	r3, #4294967295
 80073b2:	9302      	str	r3, [sp, #8]
 80073b4:	2301      	movs	r3, #1
 80073b6:	9301      	str	r3, [sp, #4]
 80073b8:	1dfb      	adds	r3, r7, #7
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	2301      	movs	r3, #1
 80073be:	2200      	movs	r2, #0
 80073c0:	2178      	movs	r1, #120	@ 0x78
 80073c2:	4803      	ldr	r0, [pc, #12]	@ (80073d0 <ssd1306_WriteCommand+0x2c>)
 80073c4:	f7fc fcc2 	bl	8003d4c <HAL_I2C_Mem_Write>
}
 80073c8:	bf00      	nop
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	20000168 	.word	0x20000168

080073d4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af04      	add	r7, sp, #16
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	f04f 32ff 	mov.w	r2, #4294967295
 80073e6:	9202      	str	r2, [sp, #8]
 80073e8:	9301      	str	r3, [sp, #4]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	9300      	str	r3, [sp, #0]
 80073ee:	2301      	movs	r3, #1
 80073f0:	2240      	movs	r2, #64	@ 0x40
 80073f2:	2178      	movs	r1, #120	@ 0x78
 80073f4:	4803      	ldr	r0, [pc, #12]	@ (8007404 <ssd1306_WriteData+0x30>)
 80073f6:	f7fc fca9 	bl	8003d4c <HAL_I2C_Mem_Write>
}
 80073fa:	bf00      	nop
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	20000168 	.word	0x20000168

08007408 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8007408:	b580      	push	{r7, lr}
 800740a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800740c:	f7ff ffc2 	bl	8007394 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8007410:	2064      	movs	r0, #100	@ 0x64
 8007412:	f7fa fba1 	bl	8001b58 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8007416:	2000      	movs	r0, #0
 8007418:	f000 f9d6 	bl	80077c8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800741c:	2020      	movs	r0, #32
 800741e:	f7ff ffc1 	bl	80073a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8007422:	2000      	movs	r0, #0
 8007424:	f7ff ffbe 	bl	80073a4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8007428:	20b0      	movs	r0, #176	@ 0xb0
 800742a:	f7ff ffbb 	bl	80073a4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800742e:	20c8      	movs	r0, #200	@ 0xc8
 8007430:	f7ff ffb8 	bl	80073a4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8007434:	2000      	movs	r0, #0
 8007436:	f7ff ffb5 	bl	80073a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800743a:	2010      	movs	r0, #16
 800743c:	f7ff ffb2 	bl	80073a4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8007440:	2040      	movs	r0, #64	@ 0x40
 8007442:	f7ff ffaf 	bl	80073a4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8007446:	20ff      	movs	r0, #255	@ 0xff
 8007448:	f000 f9aa 	bl	80077a0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800744c:	20a1      	movs	r0, #161	@ 0xa1
 800744e:	f7ff ffa9 	bl	80073a4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8007452:	20a6      	movs	r0, #166	@ 0xa6
 8007454:	f7ff ffa6 	bl	80073a4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8007458:	20a8      	movs	r0, #168	@ 0xa8
 800745a:	f7ff ffa3 	bl	80073a4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800745e:	203f      	movs	r0, #63	@ 0x3f
 8007460:	f7ff ffa0 	bl	80073a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8007464:	20a4      	movs	r0, #164	@ 0xa4
 8007466:	f7ff ff9d 	bl	80073a4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800746a:	20d3      	movs	r0, #211	@ 0xd3
 800746c:	f7ff ff9a 	bl	80073a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8007470:	2000      	movs	r0, #0
 8007472:	f7ff ff97 	bl	80073a4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8007476:	20d5      	movs	r0, #213	@ 0xd5
 8007478:	f7ff ff94 	bl	80073a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800747c:	20f0      	movs	r0, #240	@ 0xf0
 800747e:	f7ff ff91 	bl	80073a4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8007482:	20d9      	movs	r0, #217	@ 0xd9
 8007484:	f7ff ff8e 	bl	80073a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8007488:	2022      	movs	r0, #34	@ 0x22
 800748a:	f7ff ff8b 	bl	80073a4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800748e:	20da      	movs	r0, #218	@ 0xda
 8007490:	f7ff ff88 	bl	80073a4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8007494:	2012      	movs	r0, #18
 8007496:	f7ff ff85 	bl	80073a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800749a:	20db      	movs	r0, #219	@ 0xdb
 800749c:	f7ff ff82 	bl	80073a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80074a0:	2020      	movs	r0, #32
 80074a2:	f7ff ff7f 	bl	80073a4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80074a6:	208d      	movs	r0, #141	@ 0x8d
 80074a8:	f7ff ff7c 	bl	80073a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80074ac:	2014      	movs	r0, #20
 80074ae:	f7ff ff79 	bl	80073a4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80074b2:	2001      	movs	r0, #1
 80074b4:	f000 f988 	bl	80077c8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80074b8:	2000      	movs	r0, #0
 80074ba:	f000 f80f 	bl	80074dc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80074be:	f000 f825 	bl	800750c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80074c2:	4b05      	ldr	r3, [pc, #20]	@ (80074d8 <ssd1306_Init+0xd0>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80074c8:	4b03      	ldr	r3, [pc, #12]	@ (80074d8 <ssd1306_Init+0xd0>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80074ce:	4b02      	ldr	r3, [pc, #8]	@ (80074d8 <ssd1306_Init+0xd0>)
 80074d0:	2201      	movs	r2, #1
 80074d2:	711a      	strb	r2, [r3, #4]
}
 80074d4:	bf00      	nop
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	200006a8 	.word	0x200006a8

080074dc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	4603      	mov	r3, r0
 80074e4:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80074e6:	79fb      	ldrb	r3, [r7, #7]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d101      	bne.n	80074f0 <ssd1306_Fill+0x14>
 80074ec:	2300      	movs	r3, #0
 80074ee:	e000      	b.n	80074f2 <ssd1306_Fill+0x16>
 80074f0:	23ff      	movs	r3, #255	@ 0xff
 80074f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80074f6:	4619      	mov	r1, r3
 80074f8:	4803      	ldr	r0, [pc, #12]	@ (8007508 <ssd1306_Fill+0x2c>)
 80074fa:	f000 fc4b 	bl	8007d94 <memset>
}
 80074fe:	bf00      	nop
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	200002a8 	.word	0x200002a8

0800750c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8007512:	2300      	movs	r3, #0
 8007514:	71fb      	strb	r3, [r7, #7]
 8007516:	e016      	b.n	8007546 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8007518:	79fb      	ldrb	r3, [r7, #7]
 800751a:	3b50      	subs	r3, #80	@ 0x50
 800751c:	b2db      	uxtb	r3, r3
 800751e:	4618      	mov	r0, r3
 8007520:	f7ff ff40 	bl	80073a4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8007524:	2000      	movs	r0, #0
 8007526:	f7ff ff3d 	bl	80073a4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800752a:	2010      	movs	r0, #16
 800752c:	f7ff ff3a 	bl	80073a4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8007530:	79fb      	ldrb	r3, [r7, #7]
 8007532:	01db      	lsls	r3, r3, #7
 8007534:	4a08      	ldr	r2, [pc, #32]	@ (8007558 <ssd1306_UpdateScreen+0x4c>)
 8007536:	4413      	add	r3, r2
 8007538:	2180      	movs	r1, #128	@ 0x80
 800753a:	4618      	mov	r0, r3
 800753c:	f7ff ff4a 	bl	80073d4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8007540:	79fb      	ldrb	r3, [r7, #7]
 8007542:	3301      	adds	r3, #1
 8007544:	71fb      	strb	r3, [r7, #7]
 8007546:	79fb      	ldrb	r3, [r7, #7]
 8007548:	2b07      	cmp	r3, #7
 800754a:	d9e5      	bls.n	8007518 <ssd1306_UpdateScreen+0xc>
    }
}
 800754c:	bf00      	nop
 800754e:	bf00      	nop
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	200002a8 	.word	0x200002a8

0800755c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	4603      	mov	r3, r0
 8007564:	71fb      	strb	r3, [r7, #7]
 8007566:	460b      	mov	r3, r1
 8007568:	71bb      	strb	r3, [r7, #6]
 800756a:	4613      	mov	r3, r2
 800756c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800756e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007572:	2b00      	cmp	r3, #0
 8007574:	db3d      	blt.n	80075f2 <ssd1306_DrawPixel+0x96>
 8007576:	79bb      	ldrb	r3, [r7, #6]
 8007578:	2b3f      	cmp	r3, #63	@ 0x3f
 800757a:	d83a      	bhi.n	80075f2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800757c:	797b      	ldrb	r3, [r7, #5]
 800757e:	2b01      	cmp	r3, #1
 8007580:	d11a      	bne.n	80075b8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8007582:	79fa      	ldrb	r2, [r7, #7]
 8007584:	79bb      	ldrb	r3, [r7, #6]
 8007586:	08db      	lsrs	r3, r3, #3
 8007588:	b2d8      	uxtb	r0, r3
 800758a:	4603      	mov	r3, r0
 800758c:	01db      	lsls	r3, r3, #7
 800758e:	4413      	add	r3, r2
 8007590:	4a1b      	ldr	r2, [pc, #108]	@ (8007600 <ssd1306_DrawPixel+0xa4>)
 8007592:	5cd3      	ldrb	r3, [r2, r3]
 8007594:	b25a      	sxtb	r2, r3
 8007596:	79bb      	ldrb	r3, [r7, #6]
 8007598:	f003 0307 	and.w	r3, r3, #7
 800759c:	2101      	movs	r1, #1
 800759e:	fa01 f303 	lsl.w	r3, r1, r3
 80075a2:	b25b      	sxtb	r3, r3
 80075a4:	4313      	orrs	r3, r2
 80075a6:	b259      	sxtb	r1, r3
 80075a8:	79fa      	ldrb	r2, [r7, #7]
 80075aa:	4603      	mov	r3, r0
 80075ac:	01db      	lsls	r3, r3, #7
 80075ae:	4413      	add	r3, r2
 80075b0:	b2c9      	uxtb	r1, r1
 80075b2:	4a13      	ldr	r2, [pc, #76]	@ (8007600 <ssd1306_DrawPixel+0xa4>)
 80075b4:	54d1      	strb	r1, [r2, r3]
 80075b6:	e01d      	b.n	80075f4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80075b8:	79fa      	ldrb	r2, [r7, #7]
 80075ba:	79bb      	ldrb	r3, [r7, #6]
 80075bc:	08db      	lsrs	r3, r3, #3
 80075be:	b2d8      	uxtb	r0, r3
 80075c0:	4603      	mov	r3, r0
 80075c2:	01db      	lsls	r3, r3, #7
 80075c4:	4413      	add	r3, r2
 80075c6:	4a0e      	ldr	r2, [pc, #56]	@ (8007600 <ssd1306_DrawPixel+0xa4>)
 80075c8:	5cd3      	ldrb	r3, [r2, r3]
 80075ca:	b25a      	sxtb	r2, r3
 80075cc:	79bb      	ldrb	r3, [r7, #6]
 80075ce:	f003 0307 	and.w	r3, r3, #7
 80075d2:	2101      	movs	r1, #1
 80075d4:	fa01 f303 	lsl.w	r3, r1, r3
 80075d8:	b25b      	sxtb	r3, r3
 80075da:	43db      	mvns	r3, r3
 80075dc:	b25b      	sxtb	r3, r3
 80075de:	4013      	ands	r3, r2
 80075e0:	b259      	sxtb	r1, r3
 80075e2:	79fa      	ldrb	r2, [r7, #7]
 80075e4:	4603      	mov	r3, r0
 80075e6:	01db      	lsls	r3, r3, #7
 80075e8:	4413      	add	r3, r2
 80075ea:	b2c9      	uxtb	r1, r1
 80075ec:	4a04      	ldr	r2, [pc, #16]	@ (8007600 <ssd1306_DrawPixel+0xa4>)
 80075ee:	54d1      	strb	r1, [r2, r3]
 80075f0:	e000      	b.n	80075f4 <ssd1306_DrawPixel+0x98>
        return;
 80075f2:	bf00      	nop
    }
}
 80075f4:	370c      	adds	r7, #12
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	200002a8 	.word	0x200002a8

08007604 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8007604:	b590      	push	{r4, r7, lr}
 8007606:	b089      	sub	sp, #36	@ 0x24
 8007608:	af00      	add	r7, sp, #0
 800760a:	4604      	mov	r4, r0
 800760c:	4638      	mov	r0, r7
 800760e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8007612:	4623      	mov	r3, r4
 8007614:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8007616:	7bfb      	ldrb	r3, [r7, #15]
 8007618:	2b1f      	cmp	r3, #31
 800761a:	d902      	bls.n	8007622 <ssd1306_WriteChar+0x1e>
 800761c:	7bfb      	ldrb	r3, [r7, #15]
 800761e:	2b7e      	cmp	r3, #126	@ 0x7e
 8007620:	d901      	bls.n	8007626 <ssd1306_WriteChar+0x22>
        return 0;
 8007622:	2300      	movs	r3, #0
 8007624:	e077      	b.n	8007716 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8007626:	4b3e      	ldr	r3, [pc, #248]	@ (8007720 <ssd1306_WriteChar+0x11c>)
 8007628:	881b      	ldrh	r3, [r3, #0]
 800762a:	461a      	mov	r2, r3
 800762c:	783b      	ldrb	r3, [r7, #0]
 800762e:	4413      	add	r3, r2
 8007630:	2b80      	cmp	r3, #128	@ 0x80
 8007632:	dc06      	bgt.n	8007642 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8007634:	4b3a      	ldr	r3, [pc, #232]	@ (8007720 <ssd1306_WriteChar+0x11c>)
 8007636:	885b      	ldrh	r3, [r3, #2]
 8007638:	461a      	mov	r2, r3
 800763a:	787b      	ldrb	r3, [r7, #1]
 800763c:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800763e:	2b40      	cmp	r3, #64	@ 0x40
 8007640:	dd01      	ble.n	8007646 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8007642:	2300      	movs	r3, #0
 8007644:	e067      	b.n	8007716 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8007646:	2300      	movs	r3, #0
 8007648:	61fb      	str	r3, [r7, #28]
 800764a:	e04e      	b.n	80076ea <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	7bfb      	ldrb	r3, [r7, #15]
 8007650:	3b20      	subs	r3, #32
 8007652:	7879      	ldrb	r1, [r7, #1]
 8007654:	fb01 f303 	mul.w	r3, r1, r3
 8007658:	4619      	mov	r1, r3
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	440b      	add	r3, r1
 800765e:	005b      	lsls	r3, r3, #1
 8007660:	4413      	add	r3, r2
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8007666:	2300      	movs	r3, #0
 8007668:	61bb      	str	r3, [r7, #24]
 800766a:	e036      	b.n	80076da <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 800766c:	697a      	ldr	r2, [r7, #20]
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	fa02 f303 	lsl.w	r3, r2, r3
 8007674:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d013      	beq.n	80076a4 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800767c:	4b28      	ldr	r3, [pc, #160]	@ (8007720 <ssd1306_WriteChar+0x11c>)
 800767e:	881b      	ldrh	r3, [r3, #0]
 8007680:	b2da      	uxtb	r2, r3
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	b2db      	uxtb	r3, r3
 8007686:	4413      	add	r3, r2
 8007688:	b2d8      	uxtb	r0, r3
 800768a:	4b25      	ldr	r3, [pc, #148]	@ (8007720 <ssd1306_WriteChar+0x11c>)
 800768c:	885b      	ldrh	r3, [r3, #2]
 800768e:	b2da      	uxtb	r2, r3
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	b2db      	uxtb	r3, r3
 8007694:	4413      	add	r3, r2
 8007696:	b2db      	uxtb	r3, r3
 8007698:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800769c:	4619      	mov	r1, r3
 800769e:	f7ff ff5d 	bl	800755c <ssd1306_DrawPixel>
 80076a2:	e017      	b.n	80076d4 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80076a4:	4b1e      	ldr	r3, [pc, #120]	@ (8007720 <ssd1306_WriteChar+0x11c>)
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	b2da      	uxtb	r2, r3
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	4413      	add	r3, r2
 80076b0:	b2d8      	uxtb	r0, r3
 80076b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007720 <ssd1306_WriteChar+0x11c>)
 80076b4:	885b      	ldrh	r3, [r3, #2]
 80076b6:	b2da      	uxtb	r2, r3
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	4413      	add	r3, r2
 80076be:	b2d9      	uxtb	r1, r3
 80076c0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	bf0c      	ite	eq
 80076c8:	2301      	moveq	r3, #1
 80076ca:	2300      	movne	r3, #0
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	461a      	mov	r2, r3
 80076d0:	f7ff ff44 	bl	800755c <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	3301      	adds	r3, #1
 80076d8:	61bb      	str	r3, [r7, #24]
 80076da:	783b      	ldrb	r3, [r7, #0]
 80076dc:	461a      	mov	r2, r3
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d3c3      	bcc.n	800766c <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	3301      	adds	r3, #1
 80076e8:	61fb      	str	r3, [r7, #28]
 80076ea:	787b      	ldrb	r3, [r7, #1]
 80076ec:	461a      	mov	r2, r3
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d3ab      	bcc.n	800764c <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80076f4:	4b0a      	ldr	r3, [pc, #40]	@ (8007720 <ssd1306_WriteChar+0x11c>)
 80076f6:	881b      	ldrh	r3, [r3, #0]
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	2a00      	cmp	r2, #0
 80076fc:	d005      	beq.n	800770a <ssd1306_WriteChar+0x106>
 80076fe:	68b9      	ldr	r1, [r7, #8]
 8007700:	7bfa      	ldrb	r2, [r7, #15]
 8007702:	3a20      	subs	r2, #32
 8007704:	440a      	add	r2, r1
 8007706:	7812      	ldrb	r2, [r2, #0]
 8007708:	e000      	b.n	800770c <ssd1306_WriteChar+0x108>
 800770a:	783a      	ldrb	r2, [r7, #0]
 800770c:	4413      	add	r3, r2
 800770e:	b29a      	uxth	r2, r3
 8007710:	4b03      	ldr	r3, [pc, #12]	@ (8007720 <ssd1306_WriteChar+0x11c>)
 8007712:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8007714:	7bfb      	ldrb	r3, [r7, #15]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3724      	adds	r7, #36	@ 0x24
 800771a:	46bd      	mov	sp, r7
 800771c:	bd90      	pop	{r4, r7, pc}
 800771e:	bf00      	nop
 8007720:	200006a8 	.word	0x200006a8

08007724 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8007724:	b580      	push	{r7, lr}
 8007726:	b086      	sub	sp, #24
 8007728:	af02      	add	r7, sp, #8
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	4638      	mov	r0, r7
 800772e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8007732:	e013      	b.n	800775c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	7818      	ldrb	r0, [r3, #0]
 8007738:	7e3b      	ldrb	r3, [r7, #24]
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	463b      	mov	r3, r7
 800773e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007740:	f7ff ff60 	bl	8007604 <ssd1306_WriteChar>
 8007744:	4603      	mov	r3, r0
 8007746:	461a      	mov	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	429a      	cmp	r2, r3
 800774e:	d002      	beq.n	8007756 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	e008      	b.n	8007768 <ssd1306_WriteString+0x44>
        }
        str++;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	3301      	adds	r3, #1
 800775a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1e7      	bne.n	8007734 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	781b      	ldrb	r3, [r3, #0]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	4603      	mov	r3, r0
 8007778:	460a      	mov	r2, r1
 800777a:	71fb      	strb	r3, [r7, #7]
 800777c:	4613      	mov	r3, r2
 800777e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8007780:	79fb      	ldrb	r3, [r7, #7]
 8007782:	b29a      	uxth	r2, r3
 8007784:	4b05      	ldr	r3, [pc, #20]	@ (800779c <ssd1306_SetCursor+0x2c>)
 8007786:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8007788:	79bb      	ldrb	r3, [r7, #6]
 800778a:	b29a      	uxth	r2, r3
 800778c:	4b03      	ldr	r3, [pc, #12]	@ (800779c <ssd1306_SetCursor+0x2c>)
 800778e:	805a      	strh	r2, [r3, #2]
}
 8007790:	bf00      	nop
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr
 800779c:	200006a8 	.word	0x200006a8

080077a0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	4603      	mov	r3, r0
 80077a8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80077aa:	2381      	movs	r3, #129	@ 0x81
 80077ac:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80077ae:	7bfb      	ldrb	r3, [r7, #15]
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7ff fdf7 	bl	80073a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80077b6:	79fb      	ldrb	r3, [r7, #7]
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7ff fdf3 	bl	80073a4 <ssd1306_WriteCommand>
}
 80077be:	bf00      	nop
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
	...

080077c8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	4603      	mov	r3, r0
 80077d0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80077d2:	79fb      	ldrb	r3, [r7, #7]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d005      	beq.n	80077e4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80077d8:	23af      	movs	r3, #175	@ 0xaf
 80077da:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80077dc:	4b08      	ldr	r3, [pc, #32]	@ (8007800 <ssd1306_SetDisplayOn+0x38>)
 80077de:	2201      	movs	r2, #1
 80077e0:	715a      	strb	r2, [r3, #5]
 80077e2:	e004      	b.n	80077ee <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80077e4:	23ae      	movs	r3, #174	@ 0xae
 80077e6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80077e8:	4b05      	ldr	r3, [pc, #20]	@ (8007800 <ssd1306_SetDisplayOn+0x38>)
 80077ea:	2200      	movs	r2, #0
 80077ec:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7ff fdd7 	bl	80073a4 <ssd1306_WriteCommand>
}
 80077f6:	bf00      	nop
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	200006a8 	.word	0x200006a8

08007804 <_strtol_l.constprop.0>:
 8007804:	2b24      	cmp	r3, #36	@ 0x24
 8007806:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800780a:	4686      	mov	lr, r0
 800780c:	4690      	mov	r8, r2
 800780e:	d801      	bhi.n	8007814 <_strtol_l.constprop.0+0x10>
 8007810:	2b01      	cmp	r3, #1
 8007812:	d106      	bne.n	8007822 <_strtol_l.constprop.0+0x1e>
 8007814:	f000 fb0c 	bl	8007e30 <__errno>
 8007818:	2316      	movs	r3, #22
 800781a:	6003      	str	r3, [r0, #0]
 800781c:	2000      	movs	r0, #0
 800781e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007822:	4834      	ldr	r0, [pc, #208]	@ (80078f4 <_strtol_l.constprop.0+0xf0>)
 8007824:	460d      	mov	r5, r1
 8007826:	462a      	mov	r2, r5
 8007828:	f815 4b01 	ldrb.w	r4, [r5], #1
 800782c:	5d06      	ldrb	r6, [r0, r4]
 800782e:	f016 0608 	ands.w	r6, r6, #8
 8007832:	d1f8      	bne.n	8007826 <_strtol_l.constprop.0+0x22>
 8007834:	2c2d      	cmp	r4, #45	@ 0x2d
 8007836:	d12d      	bne.n	8007894 <_strtol_l.constprop.0+0x90>
 8007838:	782c      	ldrb	r4, [r5, #0]
 800783a:	2601      	movs	r6, #1
 800783c:	1c95      	adds	r5, r2, #2
 800783e:	f033 0210 	bics.w	r2, r3, #16
 8007842:	d109      	bne.n	8007858 <_strtol_l.constprop.0+0x54>
 8007844:	2c30      	cmp	r4, #48	@ 0x30
 8007846:	d12a      	bne.n	800789e <_strtol_l.constprop.0+0x9a>
 8007848:	782a      	ldrb	r2, [r5, #0]
 800784a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800784e:	2a58      	cmp	r2, #88	@ 0x58
 8007850:	d125      	bne.n	800789e <_strtol_l.constprop.0+0x9a>
 8007852:	786c      	ldrb	r4, [r5, #1]
 8007854:	2310      	movs	r3, #16
 8007856:	3502      	adds	r5, #2
 8007858:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800785c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007860:	2200      	movs	r2, #0
 8007862:	fbbc f9f3 	udiv	r9, ip, r3
 8007866:	4610      	mov	r0, r2
 8007868:	fb03 ca19 	mls	sl, r3, r9, ip
 800786c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007870:	2f09      	cmp	r7, #9
 8007872:	d81b      	bhi.n	80078ac <_strtol_l.constprop.0+0xa8>
 8007874:	463c      	mov	r4, r7
 8007876:	42a3      	cmp	r3, r4
 8007878:	dd27      	ble.n	80078ca <_strtol_l.constprop.0+0xc6>
 800787a:	1c57      	adds	r7, r2, #1
 800787c:	d007      	beq.n	800788e <_strtol_l.constprop.0+0x8a>
 800787e:	4581      	cmp	r9, r0
 8007880:	d320      	bcc.n	80078c4 <_strtol_l.constprop.0+0xc0>
 8007882:	d101      	bne.n	8007888 <_strtol_l.constprop.0+0x84>
 8007884:	45a2      	cmp	sl, r4
 8007886:	db1d      	blt.n	80078c4 <_strtol_l.constprop.0+0xc0>
 8007888:	fb00 4003 	mla	r0, r0, r3, r4
 800788c:	2201      	movs	r2, #1
 800788e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007892:	e7eb      	b.n	800786c <_strtol_l.constprop.0+0x68>
 8007894:	2c2b      	cmp	r4, #43	@ 0x2b
 8007896:	bf04      	itt	eq
 8007898:	782c      	ldrbeq	r4, [r5, #0]
 800789a:	1c95      	addeq	r5, r2, #2
 800789c:	e7cf      	b.n	800783e <_strtol_l.constprop.0+0x3a>
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1da      	bne.n	8007858 <_strtol_l.constprop.0+0x54>
 80078a2:	2c30      	cmp	r4, #48	@ 0x30
 80078a4:	bf0c      	ite	eq
 80078a6:	2308      	moveq	r3, #8
 80078a8:	230a      	movne	r3, #10
 80078aa:	e7d5      	b.n	8007858 <_strtol_l.constprop.0+0x54>
 80078ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80078b0:	2f19      	cmp	r7, #25
 80078b2:	d801      	bhi.n	80078b8 <_strtol_l.constprop.0+0xb4>
 80078b4:	3c37      	subs	r4, #55	@ 0x37
 80078b6:	e7de      	b.n	8007876 <_strtol_l.constprop.0+0x72>
 80078b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80078bc:	2f19      	cmp	r7, #25
 80078be:	d804      	bhi.n	80078ca <_strtol_l.constprop.0+0xc6>
 80078c0:	3c57      	subs	r4, #87	@ 0x57
 80078c2:	e7d8      	b.n	8007876 <_strtol_l.constprop.0+0x72>
 80078c4:	f04f 32ff 	mov.w	r2, #4294967295
 80078c8:	e7e1      	b.n	800788e <_strtol_l.constprop.0+0x8a>
 80078ca:	1c53      	adds	r3, r2, #1
 80078cc:	d108      	bne.n	80078e0 <_strtol_l.constprop.0+0xdc>
 80078ce:	2322      	movs	r3, #34	@ 0x22
 80078d0:	f8ce 3000 	str.w	r3, [lr]
 80078d4:	4660      	mov	r0, ip
 80078d6:	f1b8 0f00 	cmp.w	r8, #0
 80078da:	d0a0      	beq.n	800781e <_strtol_l.constprop.0+0x1a>
 80078dc:	1e69      	subs	r1, r5, #1
 80078de:	e006      	b.n	80078ee <_strtol_l.constprop.0+0xea>
 80078e0:	b106      	cbz	r6, 80078e4 <_strtol_l.constprop.0+0xe0>
 80078e2:	4240      	negs	r0, r0
 80078e4:	f1b8 0f00 	cmp.w	r8, #0
 80078e8:	d099      	beq.n	800781e <_strtol_l.constprop.0+0x1a>
 80078ea:	2a00      	cmp	r2, #0
 80078ec:	d1f6      	bne.n	80078dc <_strtol_l.constprop.0+0xd8>
 80078ee:	f8c8 1000 	str.w	r1, [r8]
 80078f2:	e794      	b.n	800781e <_strtol_l.constprop.0+0x1a>
 80078f4:	0800946d 	.word	0x0800946d

080078f8 <strtol>:
 80078f8:	4613      	mov	r3, r2
 80078fa:	460a      	mov	r2, r1
 80078fc:	4601      	mov	r1, r0
 80078fe:	4802      	ldr	r0, [pc, #8]	@ (8007908 <strtol+0x10>)
 8007900:	6800      	ldr	r0, [r0, #0]
 8007902:	f7ff bf7f 	b.w	8007804 <_strtol_l.constprop.0>
 8007906:	bf00      	nop
 8007908:	20000030 	.word	0x20000030

0800790c <std>:
 800790c:	2300      	movs	r3, #0
 800790e:	b510      	push	{r4, lr}
 8007910:	4604      	mov	r4, r0
 8007912:	e9c0 3300 	strd	r3, r3, [r0]
 8007916:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800791a:	6083      	str	r3, [r0, #8]
 800791c:	8181      	strh	r1, [r0, #12]
 800791e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007920:	81c2      	strh	r2, [r0, #14]
 8007922:	6183      	str	r3, [r0, #24]
 8007924:	4619      	mov	r1, r3
 8007926:	2208      	movs	r2, #8
 8007928:	305c      	adds	r0, #92	@ 0x5c
 800792a:	f000 fa33 	bl	8007d94 <memset>
 800792e:	4b0d      	ldr	r3, [pc, #52]	@ (8007964 <std+0x58>)
 8007930:	6263      	str	r3, [r4, #36]	@ 0x24
 8007932:	4b0d      	ldr	r3, [pc, #52]	@ (8007968 <std+0x5c>)
 8007934:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007936:	4b0d      	ldr	r3, [pc, #52]	@ (800796c <std+0x60>)
 8007938:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800793a:	4b0d      	ldr	r3, [pc, #52]	@ (8007970 <std+0x64>)
 800793c:	6323      	str	r3, [r4, #48]	@ 0x30
 800793e:	4b0d      	ldr	r3, [pc, #52]	@ (8007974 <std+0x68>)
 8007940:	6224      	str	r4, [r4, #32]
 8007942:	429c      	cmp	r4, r3
 8007944:	d006      	beq.n	8007954 <std+0x48>
 8007946:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800794a:	4294      	cmp	r4, r2
 800794c:	d002      	beq.n	8007954 <std+0x48>
 800794e:	33d0      	adds	r3, #208	@ 0xd0
 8007950:	429c      	cmp	r4, r3
 8007952:	d105      	bne.n	8007960 <std+0x54>
 8007954:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800795c:	f000 ba92 	b.w	8007e84 <__retarget_lock_init_recursive>
 8007960:	bd10      	pop	{r4, pc}
 8007962:	bf00      	nop
 8007964:	08007bb1 	.word	0x08007bb1
 8007968:	08007bd3 	.word	0x08007bd3
 800796c:	08007c0b 	.word	0x08007c0b
 8007970:	08007c2f 	.word	0x08007c2f
 8007974:	200006b0 	.word	0x200006b0

08007978 <stdio_exit_handler>:
 8007978:	4a02      	ldr	r2, [pc, #8]	@ (8007984 <stdio_exit_handler+0xc>)
 800797a:	4903      	ldr	r1, [pc, #12]	@ (8007988 <stdio_exit_handler+0x10>)
 800797c:	4803      	ldr	r0, [pc, #12]	@ (800798c <stdio_exit_handler+0x14>)
 800797e:	f000 b869 	b.w	8007a54 <_fwalk_sglue>
 8007982:	bf00      	nop
 8007984:	20000024 	.word	0x20000024
 8007988:	080089f1 	.word	0x080089f1
 800798c:	20000034 	.word	0x20000034

08007990 <cleanup_stdio>:
 8007990:	6841      	ldr	r1, [r0, #4]
 8007992:	4b0c      	ldr	r3, [pc, #48]	@ (80079c4 <cleanup_stdio+0x34>)
 8007994:	4299      	cmp	r1, r3
 8007996:	b510      	push	{r4, lr}
 8007998:	4604      	mov	r4, r0
 800799a:	d001      	beq.n	80079a0 <cleanup_stdio+0x10>
 800799c:	f001 f828 	bl	80089f0 <_fflush_r>
 80079a0:	68a1      	ldr	r1, [r4, #8]
 80079a2:	4b09      	ldr	r3, [pc, #36]	@ (80079c8 <cleanup_stdio+0x38>)
 80079a4:	4299      	cmp	r1, r3
 80079a6:	d002      	beq.n	80079ae <cleanup_stdio+0x1e>
 80079a8:	4620      	mov	r0, r4
 80079aa:	f001 f821 	bl	80089f0 <_fflush_r>
 80079ae:	68e1      	ldr	r1, [r4, #12]
 80079b0:	4b06      	ldr	r3, [pc, #24]	@ (80079cc <cleanup_stdio+0x3c>)
 80079b2:	4299      	cmp	r1, r3
 80079b4:	d004      	beq.n	80079c0 <cleanup_stdio+0x30>
 80079b6:	4620      	mov	r0, r4
 80079b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079bc:	f001 b818 	b.w	80089f0 <_fflush_r>
 80079c0:	bd10      	pop	{r4, pc}
 80079c2:	bf00      	nop
 80079c4:	200006b0 	.word	0x200006b0
 80079c8:	20000718 	.word	0x20000718
 80079cc:	20000780 	.word	0x20000780

080079d0 <global_stdio_init.part.0>:
 80079d0:	b510      	push	{r4, lr}
 80079d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007a00 <global_stdio_init.part.0+0x30>)
 80079d4:	4c0b      	ldr	r4, [pc, #44]	@ (8007a04 <global_stdio_init.part.0+0x34>)
 80079d6:	4a0c      	ldr	r2, [pc, #48]	@ (8007a08 <global_stdio_init.part.0+0x38>)
 80079d8:	601a      	str	r2, [r3, #0]
 80079da:	4620      	mov	r0, r4
 80079dc:	2200      	movs	r2, #0
 80079de:	2104      	movs	r1, #4
 80079e0:	f7ff ff94 	bl	800790c <std>
 80079e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80079e8:	2201      	movs	r2, #1
 80079ea:	2109      	movs	r1, #9
 80079ec:	f7ff ff8e 	bl	800790c <std>
 80079f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80079f4:	2202      	movs	r2, #2
 80079f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079fa:	2112      	movs	r1, #18
 80079fc:	f7ff bf86 	b.w	800790c <std>
 8007a00:	200007e8 	.word	0x200007e8
 8007a04:	200006b0 	.word	0x200006b0
 8007a08:	08007979 	.word	0x08007979

08007a0c <__sfp_lock_acquire>:
 8007a0c:	4801      	ldr	r0, [pc, #4]	@ (8007a14 <__sfp_lock_acquire+0x8>)
 8007a0e:	f000 ba3a 	b.w	8007e86 <__retarget_lock_acquire_recursive>
 8007a12:	bf00      	nop
 8007a14:	200007f1 	.word	0x200007f1

08007a18 <__sfp_lock_release>:
 8007a18:	4801      	ldr	r0, [pc, #4]	@ (8007a20 <__sfp_lock_release+0x8>)
 8007a1a:	f000 ba35 	b.w	8007e88 <__retarget_lock_release_recursive>
 8007a1e:	bf00      	nop
 8007a20:	200007f1 	.word	0x200007f1

08007a24 <__sinit>:
 8007a24:	b510      	push	{r4, lr}
 8007a26:	4604      	mov	r4, r0
 8007a28:	f7ff fff0 	bl	8007a0c <__sfp_lock_acquire>
 8007a2c:	6a23      	ldr	r3, [r4, #32]
 8007a2e:	b11b      	cbz	r3, 8007a38 <__sinit+0x14>
 8007a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a34:	f7ff bff0 	b.w	8007a18 <__sfp_lock_release>
 8007a38:	4b04      	ldr	r3, [pc, #16]	@ (8007a4c <__sinit+0x28>)
 8007a3a:	6223      	str	r3, [r4, #32]
 8007a3c:	4b04      	ldr	r3, [pc, #16]	@ (8007a50 <__sinit+0x2c>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1f5      	bne.n	8007a30 <__sinit+0xc>
 8007a44:	f7ff ffc4 	bl	80079d0 <global_stdio_init.part.0>
 8007a48:	e7f2      	b.n	8007a30 <__sinit+0xc>
 8007a4a:	bf00      	nop
 8007a4c:	08007991 	.word	0x08007991
 8007a50:	200007e8 	.word	0x200007e8

08007a54 <_fwalk_sglue>:
 8007a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a58:	4607      	mov	r7, r0
 8007a5a:	4688      	mov	r8, r1
 8007a5c:	4614      	mov	r4, r2
 8007a5e:	2600      	movs	r6, #0
 8007a60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a64:	f1b9 0901 	subs.w	r9, r9, #1
 8007a68:	d505      	bpl.n	8007a76 <_fwalk_sglue+0x22>
 8007a6a:	6824      	ldr	r4, [r4, #0]
 8007a6c:	2c00      	cmp	r4, #0
 8007a6e:	d1f7      	bne.n	8007a60 <_fwalk_sglue+0xc>
 8007a70:	4630      	mov	r0, r6
 8007a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a76:	89ab      	ldrh	r3, [r5, #12]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d907      	bls.n	8007a8c <_fwalk_sglue+0x38>
 8007a7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a80:	3301      	adds	r3, #1
 8007a82:	d003      	beq.n	8007a8c <_fwalk_sglue+0x38>
 8007a84:	4629      	mov	r1, r5
 8007a86:	4638      	mov	r0, r7
 8007a88:	47c0      	blx	r8
 8007a8a:	4306      	orrs	r6, r0
 8007a8c:	3568      	adds	r5, #104	@ 0x68
 8007a8e:	e7e9      	b.n	8007a64 <_fwalk_sglue+0x10>

08007a90 <iprintf>:
 8007a90:	b40f      	push	{r0, r1, r2, r3}
 8007a92:	b507      	push	{r0, r1, r2, lr}
 8007a94:	4906      	ldr	r1, [pc, #24]	@ (8007ab0 <iprintf+0x20>)
 8007a96:	ab04      	add	r3, sp, #16
 8007a98:	6808      	ldr	r0, [r1, #0]
 8007a9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a9e:	6881      	ldr	r1, [r0, #8]
 8007aa0:	9301      	str	r3, [sp, #4]
 8007aa2:	f000 fc7b 	bl	800839c <_vfiprintf_r>
 8007aa6:	b003      	add	sp, #12
 8007aa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007aac:	b004      	add	sp, #16
 8007aae:	4770      	bx	lr
 8007ab0:	20000030 	.word	0x20000030

08007ab4 <_puts_r>:
 8007ab4:	6a03      	ldr	r3, [r0, #32]
 8007ab6:	b570      	push	{r4, r5, r6, lr}
 8007ab8:	6884      	ldr	r4, [r0, #8]
 8007aba:	4605      	mov	r5, r0
 8007abc:	460e      	mov	r6, r1
 8007abe:	b90b      	cbnz	r3, 8007ac4 <_puts_r+0x10>
 8007ac0:	f7ff ffb0 	bl	8007a24 <__sinit>
 8007ac4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ac6:	07db      	lsls	r3, r3, #31
 8007ac8:	d405      	bmi.n	8007ad6 <_puts_r+0x22>
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	0598      	lsls	r0, r3, #22
 8007ace:	d402      	bmi.n	8007ad6 <_puts_r+0x22>
 8007ad0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ad2:	f000 f9d8 	bl	8007e86 <__retarget_lock_acquire_recursive>
 8007ad6:	89a3      	ldrh	r3, [r4, #12]
 8007ad8:	0719      	lsls	r1, r3, #28
 8007ada:	d502      	bpl.n	8007ae2 <_puts_r+0x2e>
 8007adc:	6923      	ldr	r3, [r4, #16]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d135      	bne.n	8007b4e <_puts_r+0x9a>
 8007ae2:	4621      	mov	r1, r4
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	f000 f8e5 	bl	8007cb4 <__swsetup_r>
 8007aea:	b380      	cbz	r0, 8007b4e <_puts_r+0x9a>
 8007aec:	f04f 35ff 	mov.w	r5, #4294967295
 8007af0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007af2:	07da      	lsls	r2, r3, #31
 8007af4:	d405      	bmi.n	8007b02 <_puts_r+0x4e>
 8007af6:	89a3      	ldrh	r3, [r4, #12]
 8007af8:	059b      	lsls	r3, r3, #22
 8007afa:	d402      	bmi.n	8007b02 <_puts_r+0x4e>
 8007afc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007afe:	f000 f9c3 	bl	8007e88 <__retarget_lock_release_recursive>
 8007b02:	4628      	mov	r0, r5
 8007b04:	bd70      	pop	{r4, r5, r6, pc}
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	da04      	bge.n	8007b14 <_puts_r+0x60>
 8007b0a:	69a2      	ldr	r2, [r4, #24]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	dc17      	bgt.n	8007b40 <_puts_r+0x8c>
 8007b10:	290a      	cmp	r1, #10
 8007b12:	d015      	beq.n	8007b40 <_puts_r+0x8c>
 8007b14:	6823      	ldr	r3, [r4, #0]
 8007b16:	1c5a      	adds	r2, r3, #1
 8007b18:	6022      	str	r2, [r4, #0]
 8007b1a:	7019      	strb	r1, [r3, #0]
 8007b1c:	68a3      	ldr	r3, [r4, #8]
 8007b1e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b22:	3b01      	subs	r3, #1
 8007b24:	60a3      	str	r3, [r4, #8]
 8007b26:	2900      	cmp	r1, #0
 8007b28:	d1ed      	bne.n	8007b06 <_puts_r+0x52>
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	da11      	bge.n	8007b52 <_puts_r+0x9e>
 8007b2e:	4622      	mov	r2, r4
 8007b30:	210a      	movs	r1, #10
 8007b32:	4628      	mov	r0, r5
 8007b34:	f000 f87f 	bl	8007c36 <__swbuf_r>
 8007b38:	3001      	adds	r0, #1
 8007b3a:	d0d7      	beq.n	8007aec <_puts_r+0x38>
 8007b3c:	250a      	movs	r5, #10
 8007b3e:	e7d7      	b.n	8007af0 <_puts_r+0x3c>
 8007b40:	4622      	mov	r2, r4
 8007b42:	4628      	mov	r0, r5
 8007b44:	f000 f877 	bl	8007c36 <__swbuf_r>
 8007b48:	3001      	adds	r0, #1
 8007b4a:	d1e7      	bne.n	8007b1c <_puts_r+0x68>
 8007b4c:	e7ce      	b.n	8007aec <_puts_r+0x38>
 8007b4e:	3e01      	subs	r6, #1
 8007b50:	e7e4      	b.n	8007b1c <_puts_r+0x68>
 8007b52:	6823      	ldr	r3, [r4, #0]
 8007b54:	1c5a      	adds	r2, r3, #1
 8007b56:	6022      	str	r2, [r4, #0]
 8007b58:	220a      	movs	r2, #10
 8007b5a:	701a      	strb	r2, [r3, #0]
 8007b5c:	e7ee      	b.n	8007b3c <_puts_r+0x88>
	...

08007b60 <puts>:
 8007b60:	4b02      	ldr	r3, [pc, #8]	@ (8007b6c <puts+0xc>)
 8007b62:	4601      	mov	r1, r0
 8007b64:	6818      	ldr	r0, [r3, #0]
 8007b66:	f7ff bfa5 	b.w	8007ab4 <_puts_r>
 8007b6a:	bf00      	nop
 8007b6c:	20000030 	.word	0x20000030

08007b70 <siprintf>:
 8007b70:	b40e      	push	{r1, r2, r3}
 8007b72:	b500      	push	{lr}
 8007b74:	b09c      	sub	sp, #112	@ 0x70
 8007b76:	ab1d      	add	r3, sp, #116	@ 0x74
 8007b78:	9002      	str	r0, [sp, #8]
 8007b7a:	9006      	str	r0, [sp, #24]
 8007b7c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007b80:	4809      	ldr	r0, [pc, #36]	@ (8007ba8 <siprintf+0x38>)
 8007b82:	9107      	str	r1, [sp, #28]
 8007b84:	9104      	str	r1, [sp, #16]
 8007b86:	4909      	ldr	r1, [pc, #36]	@ (8007bac <siprintf+0x3c>)
 8007b88:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b8c:	9105      	str	r1, [sp, #20]
 8007b8e:	6800      	ldr	r0, [r0, #0]
 8007b90:	9301      	str	r3, [sp, #4]
 8007b92:	a902      	add	r1, sp, #8
 8007b94:	f000 fadc 	bl	8008150 <_svfiprintf_r>
 8007b98:	9b02      	ldr	r3, [sp, #8]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	701a      	strb	r2, [r3, #0]
 8007b9e:	b01c      	add	sp, #112	@ 0x70
 8007ba0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ba4:	b003      	add	sp, #12
 8007ba6:	4770      	bx	lr
 8007ba8:	20000030 	.word	0x20000030
 8007bac:	ffff0208 	.word	0xffff0208

08007bb0 <__sread>:
 8007bb0:	b510      	push	{r4, lr}
 8007bb2:	460c      	mov	r4, r1
 8007bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bb8:	f000 f916 	bl	8007de8 <_read_r>
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	bfab      	itete	ge
 8007bc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007bc2:	89a3      	ldrhlt	r3, [r4, #12]
 8007bc4:	181b      	addge	r3, r3, r0
 8007bc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007bca:	bfac      	ite	ge
 8007bcc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007bce:	81a3      	strhlt	r3, [r4, #12]
 8007bd0:	bd10      	pop	{r4, pc}

08007bd2 <__swrite>:
 8007bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd6:	461f      	mov	r7, r3
 8007bd8:	898b      	ldrh	r3, [r1, #12]
 8007bda:	05db      	lsls	r3, r3, #23
 8007bdc:	4605      	mov	r5, r0
 8007bde:	460c      	mov	r4, r1
 8007be0:	4616      	mov	r6, r2
 8007be2:	d505      	bpl.n	8007bf0 <__swrite+0x1e>
 8007be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be8:	2302      	movs	r3, #2
 8007bea:	2200      	movs	r2, #0
 8007bec:	f000 f8ea 	bl	8007dc4 <_lseek_r>
 8007bf0:	89a3      	ldrh	r3, [r4, #12]
 8007bf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007bfa:	81a3      	strh	r3, [r4, #12]
 8007bfc:	4632      	mov	r2, r6
 8007bfe:	463b      	mov	r3, r7
 8007c00:	4628      	mov	r0, r5
 8007c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c06:	f000 b901 	b.w	8007e0c <_write_r>

08007c0a <__sseek>:
 8007c0a:	b510      	push	{r4, lr}
 8007c0c:	460c      	mov	r4, r1
 8007c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c12:	f000 f8d7 	bl	8007dc4 <_lseek_r>
 8007c16:	1c43      	adds	r3, r0, #1
 8007c18:	89a3      	ldrh	r3, [r4, #12]
 8007c1a:	bf15      	itete	ne
 8007c1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c26:	81a3      	strheq	r3, [r4, #12]
 8007c28:	bf18      	it	ne
 8007c2a:	81a3      	strhne	r3, [r4, #12]
 8007c2c:	bd10      	pop	{r4, pc}

08007c2e <__sclose>:
 8007c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c32:	f000 b8b7 	b.w	8007da4 <_close_r>

08007c36 <__swbuf_r>:
 8007c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c38:	460e      	mov	r6, r1
 8007c3a:	4614      	mov	r4, r2
 8007c3c:	4605      	mov	r5, r0
 8007c3e:	b118      	cbz	r0, 8007c48 <__swbuf_r+0x12>
 8007c40:	6a03      	ldr	r3, [r0, #32]
 8007c42:	b90b      	cbnz	r3, 8007c48 <__swbuf_r+0x12>
 8007c44:	f7ff feee 	bl	8007a24 <__sinit>
 8007c48:	69a3      	ldr	r3, [r4, #24]
 8007c4a:	60a3      	str	r3, [r4, #8]
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	071a      	lsls	r2, r3, #28
 8007c50:	d501      	bpl.n	8007c56 <__swbuf_r+0x20>
 8007c52:	6923      	ldr	r3, [r4, #16]
 8007c54:	b943      	cbnz	r3, 8007c68 <__swbuf_r+0x32>
 8007c56:	4621      	mov	r1, r4
 8007c58:	4628      	mov	r0, r5
 8007c5a:	f000 f82b 	bl	8007cb4 <__swsetup_r>
 8007c5e:	b118      	cbz	r0, 8007c68 <__swbuf_r+0x32>
 8007c60:	f04f 37ff 	mov.w	r7, #4294967295
 8007c64:	4638      	mov	r0, r7
 8007c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c68:	6823      	ldr	r3, [r4, #0]
 8007c6a:	6922      	ldr	r2, [r4, #16]
 8007c6c:	1a98      	subs	r0, r3, r2
 8007c6e:	6963      	ldr	r3, [r4, #20]
 8007c70:	b2f6      	uxtb	r6, r6
 8007c72:	4283      	cmp	r3, r0
 8007c74:	4637      	mov	r7, r6
 8007c76:	dc05      	bgt.n	8007c84 <__swbuf_r+0x4e>
 8007c78:	4621      	mov	r1, r4
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	f000 feb8 	bl	80089f0 <_fflush_r>
 8007c80:	2800      	cmp	r0, #0
 8007c82:	d1ed      	bne.n	8007c60 <__swbuf_r+0x2a>
 8007c84:	68a3      	ldr	r3, [r4, #8]
 8007c86:	3b01      	subs	r3, #1
 8007c88:	60a3      	str	r3, [r4, #8]
 8007c8a:	6823      	ldr	r3, [r4, #0]
 8007c8c:	1c5a      	adds	r2, r3, #1
 8007c8e:	6022      	str	r2, [r4, #0]
 8007c90:	701e      	strb	r6, [r3, #0]
 8007c92:	6962      	ldr	r2, [r4, #20]
 8007c94:	1c43      	adds	r3, r0, #1
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d004      	beq.n	8007ca4 <__swbuf_r+0x6e>
 8007c9a:	89a3      	ldrh	r3, [r4, #12]
 8007c9c:	07db      	lsls	r3, r3, #31
 8007c9e:	d5e1      	bpl.n	8007c64 <__swbuf_r+0x2e>
 8007ca0:	2e0a      	cmp	r6, #10
 8007ca2:	d1df      	bne.n	8007c64 <__swbuf_r+0x2e>
 8007ca4:	4621      	mov	r1, r4
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	f000 fea2 	bl	80089f0 <_fflush_r>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d0d9      	beq.n	8007c64 <__swbuf_r+0x2e>
 8007cb0:	e7d6      	b.n	8007c60 <__swbuf_r+0x2a>
	...

08007cb4 <__swsetup_r>:
 8007cb4:	b538      	push	{r3, r4, r5, lr}
 8007cb6:	4b29      	ldr	r3, [pc, #164]	@ (8007d5c <__swsetup_r+0xa8>)
 8007cb8:	4605      	mov	r5, r0
 8007cba:	6818      	ldr	r0, [r3, #0]
 8007cbc:	460c      	mov	r4, r1
 8007cbe:	b118      	cbz	r0, 8007cc8 <__swsetup_r+0x14>
 8007cc0:	6a03      	ldr	r3, [r0, #32]
 8007cc2:	b90b      	cbnz	r3, 8007cc8 <__swsetup_r+0x14>
 8007cc4:	f7ff feae 	bl	8007a24 <__sinit>
 8007cc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ccc:	0719      	lsls	r1, r3, #28
 8007cce:	d422      	bmi.n	8007d16 <__swsetup_r+0x62>
 8007cd0:	06da      	lsls	r2, r3, #27
 8007cd2:	d407      	bmi.n	8007ce4 <__swsetup_r+0x30>
 8007cd4:	2209      	movs	r2, #9
 8007cd6:	602a      	str	r2, [r5, #0]
 8007cd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cdc:	81a3      	strh	r3, [r4, #12]
 8007cde:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce2:	e033      	b.n	8007d4c <__swsetup_r+0x98>
 8007ce4:	0758      	lsls	r0, r3, #29
 8007ce6:	d512      	bpl.n	8007d0e <__swsetup_r+0x5a>
 8007ce8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cea:	b141      	cbz	r1, 8007cfe <__swsetup_r+0x4a>
 8007cec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cf0:	4299      	cmp	r1, r3
 8007cf2:	d002      	beq.n	8007cfa <__swsetup_r+0x46>
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	f000 f8d7 	bl	8007ea8 <_free_r>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cfe:	89a3      	ldrh	r3, [r4, #12]
 8007d00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007d04:	81a3      	strh	r3, [r4, #12]
 8007d06:	2300      	movs	r3, #0
 8007d08:	6063      	str	r3, [r4, #4]
 8007d0a:	6923      	ldr	r3, [r4, #16]
 8007d0c:	6023      	str	r3, [r4, #0]
 8007d0e:	89a3      	ldrh	r3, [r4, #12]
 8007d10:	f043 0308 	orr.w	r3, r3, #8
 8007d14:	81a3      	strh	r3, [r4, #12]
 8007d16:	6923      	ldr	r3, [r4, #16]
 8007d18:	b94b      	cbnz	r3, 8007d2e <__swsetup_r+0x7a>
 8007d1a:	89a3      	ldrh	r3, [r4, #12]
 8007d1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d24:	d003      	beq.n	8007d2e <__swsetup_r+0x7a>
 8007d26:	4621      	mov	r1, r4
 8007d28:	4628      	mov	r0, r5
 8007d2a:	f000 feaf 	bl	8008a8c <__smakebuf_r>
 8007d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d32:	f013 0201 	ands.w	r2, r3, #1
 8007d36:	d00a      	beq.n	8007d4e <__swsetup_r+0x9a>
 8007d38:	2200      	movs	r2, #0
 8007d3a:	60a2      	str	r2, [r4, #8]
 8007d3c:	6962      	ldr	r2, [r4, #20]
 8007d3e:	4252      	negs	r2, r2
 8007d40:	61a2      	str	r2, [r4, #24]
 8007d42:	6922      	ldr	r2, [r4, #16]
 8007d44:	b942      	cbnz	r2, 8007d58 <__swsetup_r+0xa4>
 8007d46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d4a:	d1c5      	bne.n	8007cd8 <__swsetup_r+0x24>
 8007d4c:	bd38      	pop	{r3, r4, r5, pc}
 8007d4e:	0799      	lsls	r1, r3, #30
 8007d50:	bf58      	it	pl
 8007d52:	6962      	ldrpl	r2, [r4, #20]
 8007d54:	60a2      	str	r2, [r4, #8]
 8007d56:	e7f4      	b.n	8007d42 <__swsetup_r+0x8e>
 8007d58:	2000      	movs	r0, #0
 8007d5a:	e7f7      	b.n	8007d4c <__swsetup_r+0x98>
 8007d5c:	20000030 	.word	0x20000030

08007d60 <memmove>:
 8007d60:	4288      	cmp	r0, r1
 8007d62:	b510      	push	{r4, lr}
 8007d64:	eb01 0402 	add.w	r4, r1, r2
 8007d68:	d902      	bls.n	8007d70 <memmove+0x10>
 8007d6a:	4284      	cmp	r4, r0
 8007d6c:	4623      	mov	r3, r4
 8007d6e:	d807      	bhi.n	8007d80 <memmove+0x20>
 8007d70:	1e43      	subs	r3, r0, #1
 8007d72:	42a1      	cmp	r1, r4
 8007d74:	d008      	beq.n	8007d88 <memmove+0x28>
 8007d76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d7e:	e7f8      	b.n	8007d72 <memmove+0x12>
 8007d80:	4402      	add	r2, r0
 8007d82:	4601      	mov	r1, r0
 8007d84:	428a      	cmp	r2, r1
 8007d86:	d100      	bne.n	8007d8a <memmove+0x2a>
 8007d88:	bd10      	pop	{r4, pc}
 8007d8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d92:	e7f7      	b.n	8007d84 <memmove+0x24>

08007d94 <memset>:
 8007d94:	4402      	add	r2, r0
 8007d96:	4603      	mov	r3, r0
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d100      	bne.n	8007d9e <memset+0xa>
 8007d9c:	4770      	bx	lr
 8007d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8007da2:	e7f9      	b.n	8007d98 <memset+0x4>

08007da4 <_close_r>:
 8007da4:	b538      	push	{r3, r4, r5, lr}
 8007da6:	4d06      	ldr	r5, [pc, #24]	@ (8007dc0 <_close_r+0x1c>)
 8007da8:	2300      	movs	r3, #0
 8007daa:	4604      	mov	r4, r0
 8007dac:	4608      	mov	r0, r1
 8007dae:	602b      	str	r3, [r5, #0]
 8007db0:	f7f9 fdb0 	bl	8001914 <_close>
 8007db4:	1c43      	adds	r3, r0, #1
 8007db6:	d102      	bne.n	8007dbe <_close_r+0x1a>
 8007db8:	682b      	ldr	r3, [r5, #0]
 8007dba:	b103      	cbz	r3, 8007dbe <_close_r+0x1a>
 8007dbc:	6023      	str	r3, [r4, #0]
 8007dbe:	bd38      	pop	{r3, r4, r5, pc}
 8007dc0:	200007ec 	.word	0x200007ec

08007dc4 <_lseek_r>:
 8007dc4:	b538      	push	{r3, r4, r5, lr}
 8007dc6:	4d07      	ldr	r5, [pc, #28]	@ (8007de4 <_lseek_r+0x20>)
 8007dc8:	4604      	mov	r4, r0
 8007dca:	4608      	mov	r0, r1
 8007dcc:	4611      	mov	r1, r2
 8007dce:	2200      	movs	r2, #0
 8007dd0:	602a      	str	r2, [r5, #0]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	f7f9 fdc5 	bl	8001962 <_lseek>
 8007dd8:	1c43      	adds	r3, r0, #1
 8007dda:	d102      	bne.n	8007de2 <_lseek_r+0x1e>
 8007ddc:	682b      	ldr	r3, [r5, #0]
 8007dde:	b103      	cbz	r3, 8007de2 <_lseek_r+0x1e>
 8007de0:	6023      	str	r3, [r4, #0]
 8007de2:	bd38      	pop	{r3, r4, r5, pc}
 8007de4:	200007ec 	.word	0x200007ec

08007de8 <_read_r>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	4d07      	ldr	r5, [pc, #28]	@ (8007e08 <_read_r+0x20>)
 8007dec:	4604      	mov	r4, r0
 8007dee:	4608      	mov	r0, r1
 8007df0:	4611      	mov	r1, r2
 8007df2:	2200      	movs	r2, #0
 8007df4:	602a      	str	r2, [r5, #0]
 8007df6:	461a      	mov	r2, r3
 8007df8:	f7f9 fd6f 	bl	80018da <_read>
 8007dfc:	1c43      	adds	r3, r0, #1
 8007dfe:	d102      	bne.n	8007e06 <_read_r+0x1e>
 8007e00:	682b      	ldr	r3, [r5, #0]
 8007e02:	b103      	cbz	r3, 8007e06 <_read_r+0x1e>
 8007e04:	6023      	str	r3, [r4, #0]
 8007e06:	bd38      	pop	{r3, r4, r5, pc}
 8007e08:	200007ec 	.word	0x200007ec

08007e0c <_write_r>:
 8007e0c:	b538      	push	{r3, r4, r5, lr}
 8007e0e:	4d07      	ldr	r5, [pc, #28]	@ (8007e2c <_write_r+0x20>)
 8007e10:	4604      	mov	r4, r0
 8007e12:	4608      	mov	r0, r1
 8007e14:	4611      	mov	r1, r2
 8007e16:	2200      	movs	r2, #0
 8007e18:	602a      	str	r2, [r5, #0]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	f7f8 fca4 	bl	8000768 <_write>
 8007e20:	1c43      	adds	r3, r0, #1
 8007e22:	d102      	bne.n	8007e2a <_write_r+0x1e>
 8007e24:	682b      	ldr	r3, [r5, #0]
 8007e26:	b103      	cbz	r3, 8007e2a <_write_r+0x1e>
 8007e28:	6023      	str	r3, [r4, #0]
 8007e2a:	bd38      	pop	{r3, r4, r5, pc}
 8007e2c:	200007ec 	.word	0x200007ec

08007e30 <__errno>:
 8007e30:	4b01      	ldr	r3, [pc, #4]	@ (8007e38 <__errno+0x8>)
 8007e32:	6818      	ldr	r0, [r3, #0]
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	20000030 	.word	0x20000030

08007e3c <__libc_init_array>:
 8007e3c:	b570      	push	{r4, r5, r6, lr}
 8007e3e:	4d0d      	ldr	r5, [pc, #52]	@ (8007e74 <__libc_init_array+0x38>)
 8007e40:	4c0d      	ldr	r4, [pc, #52]	@ (8007e78 <__libc_init_array+0x3c>)
 8007e42:	1b64      	subs	r4, r4, r5
 8007e44:	10a4      	asrs	r4, r4, #2
 8007e46:	2600      	movs	r6, #0
 8007e48:	42a6      	cmp	r6, r4
 8007e4a:	d109      	bne.n	8007e60 <__libc_init_array+0x24>
 8007e4c:	4d0b      	ldr	r5, [pc, #44]	@ (8007e7c <__libc_init_array+0x40>)
 8007e4e:	4c0c      	ldr	r4, [pc, #48]	@ (8007e80 <__libc_init_array+0x44>)
 8007e50:	f000 fec0 	bl	8008bd4 <_init>
 8007e54:	1b64      	subs	r4, r4, r5
 8007e56:	10a4      	asrs	r4, r4, #2
 8007e58:	2600      	movs	r6, #0
 8007e5a:	42a6      	cmp	r6, r4
 8007e5c:	d105      	bne.n	8007e6a <__libc_init_array+0x2e>
 8007e5e:	bd70      	pop	{r4, r5, r6, pc}
 8007e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e64:	4798      	blx	r3
 8007e66:	3601      	adds	r6, #1
 8007e68:	e7ee      	b.n	8007e48 <__libc_init_array+0xc>
 8007e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e6e:	4798      	blx	r3
 8007e70:	3601      	adds	r6, #1
 8007e72:	e7f2      	b.n	8007e5a <__libc_init_array+0x1e>
 8007e74:	080095a8 	.word	0x080095a8
 8007e78:	080095a8 	.word	0x080095a8
 8007e7c:	080095a8 	.word	0x080095a8
 8007e80:	080095ac 	.word	0x080095ac

08007e84 <__retarget_lock_init_recursive>:
 8007e84:	4770      	bx	lr

08007e86 <__retarget_lock_acquire_recursive>:
 8007e86:	4770      	bx	lr

08007e88 <__retarget_lock_release_recursive>:
 8007e88:	4770      	bx	lr

08007e8a <memcpy>:
 8007e8a:	440a      	add	r2, r1
 8007e8c:	4291      	cmp	r1, r2
 8007e8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e92:	d100      	bne.n	8007e96 <memcpy+0xc>
 8007e94:	4770      	bx	lr
 8007e96:	b510      	push	{r4, lr}
 8007e98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ea0:	4291      	cmp	r1, r2
 8007ea2:	d1f9      	bne.n	8007e98 <memcpy+0xe>
 8007ea4:	bd10      	pop	{r4, pc}
	...

08007ea8 <_free_r>:
 8007ea8:	b538      	push	{r3, r4, r5, lr}
 8007eaa:	4605      	mov	r5, r0
 8007eac:	2900      	cmp	r1, #0
 8007eae:	d041      	beq.n	8007f34 <_free_r+0x8c>
 8007eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007eb4:	1f0c      	subs	r4, r1, #4
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	bfb8      	it	lt
 8007eba:	18e4      	addlt	r4, r4, r3
 8007ebc:	f000 f8e0 	bl	8008080 <__malloc_lock>
 8007ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8007f38 <_free_r+0x90>)
 8007ec2:	6813      	ldr	r3, [r2, #0]
 8007ec4:	b933      	cbnz	r3, 8007ed4 <_free_r+0x2c>
 8007ec6:	6063      	str	r3, [r4, #4]
 8007ec8:	6014      	str	r4, [r2, #0]
 8007eca:	4628      	mov	r0, r5
 8007ecc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ed0:	f000 b8dc 	b.w	800808c <__malloc_unlock>
 8007ed4:	42a3      	cmp	r3, r4
 8007ed6:	d908      	bls.n	8007eea <_free_r+0x42>
 8007ed8:	6820      	ldr	r0, [r4, #0]
 8007eda:	1821      	adds	r1, r4, r0
 8007edc:	428b      	cmp	r3, r1
 8007ede:	bf01      	itttt	eq
 8007ee0:	6819      	ldreq	r1, [r3, #0]
 8007ee2:	685b      	ldreq	r3, [r3, #4]
 8007ee4:	1809      	addeq	r1, r1, r0
 8007ee6:	6021      	streq	r1, [r4, #0]
 8007ee8:	e7ed      	b.n	8007ec6 <_free_r+0x1e>
 8007eea:	461a      	mov	r2, r3
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	b10b      	cbz	r3, 8007ef4 <_free_r+0x4c>
 8007ef0:	42a3      	cmp	r3, r4
 8007ef2:	d9fa      	bls.n	8007eea <_free_r+0x42>
 8007ef4:	6811      	ldr	r1, [r2, #0]
 8007ef6:	1850      	adds	r0, r2, r1
 8007ef8:	42a0      	cmp	r0, r4
 8007efa:	d10b      	bne.n	8007f14 <_free_r+0x6c>
 8007efc:	6820      	ldr	r0, [r4, #0]
 8007efe:	4401      	add	r1, r0
 8007f00:	1850      	adds	r0, r2, r1
 8007f02:	4283      	cmp	r3, r0
 8007f04:	6011      	str	r1, [r2, #0]
 8007f06:	d1e0      	bne.n	8007eca <_free_r+0x22>
 8007f08:	6818      	ldr	r0, [r3, #0]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	6053      	str	r3, [r2, #4]
 8007f0e:	4408      	add	r0, r1
 8007f10:	6010      	str	r0, [r2, #0]
 8007f12:	e7da      	b.n	8007eca <_free_r+0x22>
 8007f14:	d902      	bls.n	8007f1c <_free_r+0x74>
 8007f16:	230c      	movs	r3, #12
 8007f18:	602b      	str	r3, [r5, #0]
 8007f1a:	e7d6      	b.n	8007eca <_free_r+0x22>
 8007f1c:	6820      	ldr	r0, [r4, #0]
 8007f1e:	1821      	adds	r1, r4, r0
 8007f20:	428b      	cmp	r3, r1
 8007f22:	bf04      	itt	eq
 8007f24:	6819      	ldreq	r1, [r3, #0]
 8007f26:	685b      	ldreq	r3, [r3, #4]
 8007f28:	6063      	str	r3, [r4, #4]
 8007f2a:	bf04      	itt	eq
 8007f2c:	1809      	addeq	r1, r1, r0
 8007f2e:	6021      	streq	r1, [r4, #0]
 8007f30:	6054      	str	r4, [r2, #4]
 8007f32:	e7ca      	b.n	8007eca <_free_r+0x22>
 8007f34:	bd38      	pop	{r3, r4, r5, pc}
 8007f36:	bf00      	nop
 8007f38:	200007f8 	.word	0x200007f8

08007f3c <sbrk_aligned>:
 8007f3c:	b570      	push	{r4, r5, r6, lr}
 8007f3e:	4e0f      	ldr	r6, [pc, #60]	@ (8007f7c <sbrk_aligned+0x40>)
 8007f40:	460c      	mov	r4, r1
 8007f42:	6831      	ldr	r1, [r6, #0]
 8007f44:	4605      	mov	r5, r0
 8007f46:	b911      	cbnz	r1, 8007f4e <sbrk_aligned+0x12>
 8007f48:	f000 fdfe 	bl	8008b48 <_sbrk_r>
 8007f4c:	6030      	str	r0, [r6, #0]
 8007f4e:	4621      	mov	r1, r4
 8007f50:	4628      	mov	r0, r5
 8007f52:	f000 fdf9 	bl	8008b48 <_sbrk_r>
 8007f56:	1c43      	adds	r3, r0, #1
 8007f58:	d103      	bne.n	8007f62 <sbrk_aligned+0x26>
 8007f5a:	f04f 34ff 	mov.w	r4, #4294967295
 8007f5e:	4620      	mov	r0, r4
 8007f60:	bd70      	pop	{r4, r5, r6, pc}
 8007f62:	1cc4      	adds	r4, r0, #3
 8007f64:	f024 0403 	bic.w	r4, r4, #3
 8007f68:	42a0      	cmp	r0, r4
 8007f6a:	d0f8      	beq.n	8007f5e <sbrk_aligned+0x22>
 8007f6c:	1a21      	subs	r1, r4, r0
 8007f6e:	4628      	mov	r0, r5
 8007f70:	f000 fdea 	bl	8008b48 <_sbrk_r>
 8007f74:	3001      	adds	r0, #1
 8007f76:	d1f2      	bne.n	8007f5e <sbrk_aligned+0x22>
 8007f78:	e7ef      	b.n	8007f5a <sbrk_aligned+0x1e>
 8007f7a:	bf00      	nop
 8007f7c:	200007f4 	.word	0x200007f4

08007f80 <_malloc_r>:
 8007f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f84:	1ccd      	adds	r5, r1, #3
 8007f86:	f025 0503 	bic.w	r5, r5, #3
 8007f8a:	3508      	adds	r5, #8
 8007f8c:	2d0c      	cmp	r5, #12
 8007f8e:	bf38      	it	cc
 8007f90:	250c      	movcc	r5, #12
 8007f92:	2d00      	cmp	r5, #0
 8007f94:	4606      	mov	r6, r0
 8007f96:	db01      	blt.n	8007f9c <_malloc_r+0x1c>
 8007f98:	42a9      	cmp	r1, r5
 8007f9a:	d904      	bls.n	8007fa6 <_malloc_r+0x26>
 8007f9c:	230c      	movs	r3, #12
 8007f9e:	6033      	str	r3, [r6, #0]
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fa6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800807c <_malloc_r+0xfc>
 8007faa:	f000 f869 	bl	8008080 <__malloc_lock>
 8007fae:	f8d8 3000 	ldr.w	r3, [r8]
 8007fb2:	461c      	mov	r4, r3
 8007fb4:	bb44      	cbnz	r4, 8008008 <_malloc_r+0x88>
 8007fb6:	4629      	mov	r1, r5
 8007fb8:	4630      	mov	r0, r6
 8007fba:	f7ff ffbf 	bl	8007f3c <sbrk_aligned>
 8007fbe:	1c43      	adds	r3, r0, #1
 8007fc0:	4604      	mov	r4, r0
 8007fc2:	d158      	bne.n	8008076 <_malloc_r+0xf6>
 8007fc4:	f8d8 4000 	ldr.w	r4, [r8]
 8007fc8:	4627      	mov	r7, r4
 8007fca:	2f00      	cmp	r7, #0
 8007fcc:	d143      	bne.n	8008056 <_malloc_r+0xd6>
 8007fce:	2c00      	cmp	r4, #0
 8007fd0:	d04b      	beq.n	800806a <_malloc_r+0xea>
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	4639      	mov	r1, r7
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	eb04 0903 	add.w	r9, r4, r3
 8007fdc:	f000 fdb4 	bl	8008b48 <_sbrk_r>
 8007fe0:	4581      	cmp	r9, r0
 8007fe2:	d142      	bne.n	800806a <_malloc_r+0xea>
 8007fe4:	6821      	ldr	r1, [r4, #0]
 8007fe6:	1a6d      	subs	r5, r5, r1
 8007fe8:	4629      	mov	r1, r5
 8007fea:	4630      	mov	r0, r6
 8007fec:	f7ff ffa6 	bl	8007f3c <sbrk_aligned>
 8007ff0:	3001      	adds	r0, #1
 8007ff2:	d03a      	beq.n	800806a <_malloc_r+0xea>
 8007ff4:	6823      	ldr	r3, [r4, #0]
 8007ff6:	442b      	add	r3, r5
 8007ff8:	6023      	str	r3, [r4, #0]
 8007ffa:	f8d8 3000 	ldr.w	r3, [r8]
 8007ffe:	685a      	ldr	r2, [r3, #4]
 8008000:	bb62      	cbnz	r2, 800805c <_malloc_r+0xdc>
 8008002:	f8c8 7000 	str.w	r7, [r8]
 8008006:	e00f      	b.n	8008028 <_malloc_r+0xa8>
 8008008:	6822      	ldr	r2, [r4, #0]
 800800a:	1b52      	subs	r2, r2, r5
 800800c:	d420      	bmi.n	8008050 <_malloc_r+0xd0>
 800800e:	2a0b      	cmp	r2, #11
 8008010:	d917      	bls.n	8008042 <_malloc_r+0xc2>
 8008012:	1961      	adds	r1, r4, r5
 8008014:	42a3      	cmp	r3, r4
 8008016:	6025      	str	r5, [r4, #0]
 8008018:	bf18      	it	ne
 800801a:	6059      	strne	r1, [r3, #4]
 800801c:	6863      	ldr	r3, [r4, #4]
 800801e:	bf08      	it	eq
 8008020:	f8c8 1000 	streq.w	r1, [r8]
 8008024:	5162      	str	r2, [r4, r5]
 8008026:	604b      	str	r3, [r1, #4]
 8008028:	4630      	mov	r0, r6
 800802a:	f000 f82f 	bl	800808c <__malloc_unlock>
 800802e:	f104 000b 	add.w	r0, r4, #11
 8008032:	1d23      	adds	r3, r4, #4
 8008034:	f020 0007 	bic.w	r0, r0, #7
 8008038:	1ac2      	subs	r2, r0, r3
 800803a:	bf1c      	itt	ne
 800803c:	1a1b      	subne	r3, r3, r0
 800803e:	50a3      	strne	r3, [r4, r2]
 8008040:	e7af      	b.n	8007fa2 <_malloc_r+0x22>
 8008042:	6862      	ldr	r2, [r4, #4]
 8008044:	42a3      	cmp	r3, r4
 8008046:	bf0c      	ite	eq
 8008048:	f8c8 2000 	streq.w	r2, [r8]
 800804c:	605a      	strne	r2, [r3, #4]
 800804e:	e7eb      	b.n	8008028 <_malloc_r+0xa8>
 8008050:	4623      	mov	r3, r4
 8008052:	6864      	ldr	r4, [r4, #4]
 8008054:	e7ae      	b.n	8007fb4 <_malloc_r+0x34>
 8008056:	463c      	mov	r4, r7
 8008058:	687f      	ldr	r7, [r7, #4]
 800805a:	e7b6      	b.n	8007fca <_malloc_r+0x4a>
 800805c:	461a      	mov	r2, r3
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	42a3      	cmp	r3, r4
 8008062:	d1fb      	bne.n	800805c <_malloc_r+0xdc>
 8008064:	2300      	movs	r3, #0
 8008066:	6053      	str	r3, [r2, #4]
 8008068:	e7de      	b.n	8008028 <_malloc_r+0xa8>
 800806a:	230c      	movs	r3, #12
 800806c:	6033      	str	r3, [r6, #0]
 800806e:	4630      	mov	r0, r6
 8008070:	f000 f80c 	bl	800808c <__malloc_unlock>
 8008074:	e794      	b.n	8007fa0 <_malloc_r+0x20>
 8008076:	6005      	str	r5, [r0, #0]
 8008078:	e7d6      	b.n	8008028 <_malloc_r+0xa8>
 800807a:	bf00      	nop
 800807c:	200007f8 	.word	0x200007f8

08008080 <__malloc_lock>:
 8008080:	4801      	ldr	r0, [pc, #4]	@ (8008088 <__malloc_lock+0x8>)
 8008082:	f7ff bf00 	b.w	8007e86 <__retarget_lock_acquire_recursive>
 8008086:	bf00      	nop
 8008088:	200007f0 	.word	0x200007f0

0800808c <__malloc_unlock>:
 800808c:	4801      	ldr	r0, [pc, #4]	@ (8008094 <__malloc_unlock+0x8>)
 800808e:	f7ff befb 	b.w	8007e88 <__retarget_lock_release_recursive>
 8008092:	bf00      	nop
 8008094:	200007f0 	.word	0x200007f0

08008098 <__ssputs_r>:
 8008098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800809c:	688e      	ldr	r6, [r1, #8]
 800809e:	461f      	mov	r7, r3
 80080a0:	42be      	cmp	r6, r7
 80080a2:	680b      	ldr	r3, [r1, #0]
 80080a4:	4682      	mov	sl, r0
 80080a6:	460c      	mov	r4, r1
 80080a8:	4690      	mov	r8, r2
 80080aa:	d82d      	bhi.n	8008108 <__ssputs_r+0x70>
 80080ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80080b4:	d026      	beq.n	8008104 <__ssputs_r+0x6c>
 80080b6:	6965      	ldr	r5, [r4, #20]
 80080b8:	6909      	ldr	r1, [r1, #16]
 80080ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080be:	eba3 0901 	sub.w	r9, r3, r1
 80080c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080c6:	1c7b      	adds	r3, r7, #1
 80080c8:	444b      	add	r3, r9
 80080ca:	106d      	asrs	r5, r5, #1
 80080cc:	429d      	cmp	r5, r3
 80080ce:	bf38      	it	cc
 80080d0:	461d      	movcc	r5, r3
 80080d2:	0553      	lsls	r3, r2, #21
 80080d4:	d527      	bpl.n	8008126 <__ssputs_r+0x8e>
 80080d6:	4629      	mov	r1, r5
 80080d8:	f7ff ff52 	bl	8007f80 <_malloc_r>
 80080dc:	4606      	mov	r6, r0
 80080de:	b360      	cbz	r0, 800813a <__ssputs_r+0xa2>
 80080e0:	6921      	ldr	r1, [r4, #16]
 80080e2:	464a      	mov	r2, r9
 80080e4:	f7ff fed1 	bl	8007e8a <memcpy>
 80080e8:	89a3      	ldrh	r3, [r4, #12]
 80080ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80080ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080f2:	81a3      	strh	r3, [r4, #12]
 80080f4:	6126      	str	r6, [r4, #16]
 80080f6:	6165      	str	r5, [r4, #20]
 80080f8:	444e      	add	r6, r9
 80080fa:	eba5 0509 	sub.w	r5, r5, r9
 80080fe:	6026      	str	r6, [r4, #0]
 8008100:	60a5      	str	r5, [r4, #8]
 8008102:	463e      	mov	r6, r7
 8008104:	42be      	cmp	r6, r7
 8008106:	d900      	bls.n	800810a <__ssputs_r+0x72>
 8008108:	463e      	mov	r6, r7
 800810a:	6820      	ldr	r0, [r4, #0]
 800810c:	4632      	mov	r2, r6
 800810e:	4641      	mov	r1, r8
 8008110:	f7ff fe26 	bl	8007d60 <memmove>
 8008114:	68a3      	ldr	r3, [r4, #8]
 8008116:	1b9b      	subs	r3, r3, r6
 8008118:	60a3      	str	r3, [r4, #8]
 800811a:	6823      	ldr	r3, [r4, #0]
 800811c:	4433      	add	r3, r6
 800811e:	6023      	str	r3, [r4, #0]
 8008120:	2000      	movs	r0, #0
 8008122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008126:	462a      	mov	r2, r5
 8008128:	f000 fd1e 	bl	8008b68 <_realloc_r>
 800812c:	4606      	mov	r6, r0
 800812e:	2800      	cmp	r0, #0
 8008130:	d1e0      	bne.n	80080f4 <__ssputs_r+0x5c>
 8008132:	6921      	ldr	r1, [r4, #16]
 8008134:	4650      	mov	r0, sl
 8008136:	f7ff feb7 	bl	8007ea8 <_free_r>
 800813a:	230c      	movs	r3, #12
 800813c:	f8ca 3000 	str.w	r3, [sl]
 8008140:	89a3      	ldrh	r3, [r4, #12]
 8008142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008146:	81a3      	strh	r3, [r4, #12]
 8008148:	f04f 30ff 	mov.w	r0, #4294967295
 800814c:	e7e9      	b.n	8008122 <__ssputs_r+0x8a>
	...

08008150 <_svfiprintf_r>:
 8008150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008154:	4698      	mov	r8, r3
 8008156:	898b      	ldrh	r3, [r1, #12]
 8008158:	061b      	lsls	r3, r3, #24
 800815a:	b09d      	sub	sp, #116	@ 0x74
 800815c:	4607      	mov	r7, r0
 800815e:	460d      	mov	r5, r1
 8008160:	4614      	mov	r4, r2
 8008162:	d510      	bpl.n	8008186 <_svfiprintf_r+0x36>
 8008164:	690b      	ldr	r3, [r1, #16]
 8008166:	b973      	cbnz	r3, 8008186 <_svfiprintf_r+0x36>
 8008168:	2140      	movs	r1, #64	@ 0x40
 800816a:	f7ff ff09 	bl	8007f80 <_malloc_r>
 800816e:	6028      	str	r0, [r5, #0]
 8008170:	6128      	str	r0, [r5, #16]
 8008172:	b930      	cbnz	r0, 8008182 <_svfiprintf_r+0x32>
 8008174:	230c      	movs	r3, #12
 8008176:	603b      	str	r3, [r7, #0]
 8008178:	f04f 30ff 	mov.w	r0, #4294967295
 800817c:	b01d      	add	sp, #116	@ 0x74
 800817e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008182:	2340      	movs	r3, #64	@ 0x40
 8008184:	616b      	str	r3, [r5, #20]
 8008186:	2300      	movs	r3, #0
 8008188:	9309      	str	r3, [sp, #36]	@ 0x24
 800818a:	2320      	movs	r3, #32
 800818c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008190:	f8cd 800c 	str.w	r8, [sp, #12]
 8008194:	2330      	movs	r3, #48	@ 0x30
 8008196:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008334 <_svfiprintf_r+0x1e4>
 800819a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800819e:	f04f 0901 	mov.w	r9, #1
 80081a2:	4623      	mov	r3, r4
 80081a4:	469a      	mov	sl, r3
 80081a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081aa:	b10a      	cbz	r2, 80081b0 <_svfiprintf_r+0x60>
 80081ac:	2a25      	cmp	r2, #37	@ 0x25
 80081ae:	d1f9      	bne.n	80081a4 <_svfiprintf_r+0x54>
 80081b0:	ebba 0b04 	subs.w	fp, sl, r4
 80081b4:	d00b      	beq.n	80081ce <_svfiprintf_r+0x7e>
 80081b6:	465b      	mov	r3, fp
 80081b8:	4622      	mov	r2, r4
 80081ba:	4629      	mov	r1, r5
 80081bc:	4638      	mov	r0, r7
 80081be:	f7ff ff6b 	bl	8008098 <__ssputs_r>
 80081c2:	3001      	adds	r0, #1
 80081c4:	f000 80a7 	beq.w	8008316 <_svfiprintf_r+0x1c6>
 80081c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081ca:	445a      	add	r2, fp
 80081cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80081ce:	f89a 3000 	ldrb.w	r3, [sl]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f000 809f 	beq.w	8008316 <_svfiprintf_r+0x1c6>
 80081d8:	2300      	movs	r3, #0
 80081da:	f04f 32ff 	mov.w	r2, #4294967295
 80081de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081e2:	f10a 0a01 	add.w	sl, sl, #1
 80081e6:	9304      	str	r3, [sp, #16]
 80081e8:	9307      	str	r3, [sp, #28]
 80081ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80081ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80081f0:	4654      	mov	r4, sl
 80081f2:	2205      	movs	r2, #5
 80081f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081f8:	484e      	ldr	r0, [pc, #312]	@ (8008334 <_svfiprintf_r+0x1e4>)
 80081fa:	f7f7 fff1 	bl	80001e0 <memchr>
 80081fe:	9a04      	ldr	r2, [sp, #16]
 8008200:	b9d8      	cbnz	r0, 800823a <_svfiprintf_r+0xea>
 8008202:	06d0      	lsls	r0, r2, #27
 8008204:	bf44      	itt	mi
 8008206:	2320      	movmi	r3, #32
 8008208:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800820c:	0711      	lsls	r1, r2, #28
 800820e:	bf44      	itt	mi
 8008210:	232b      	movmi	r3, #43	@ 0x2b
 8008212:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008216:	f89a 3000 	ldrb.w	r3, [sl]
 800821a:	2b2a      	cmp	r3, #42	@ 0x2a
 800821c:	d015      	beq.n	800824a <_svfiprintf_r+0xfa>
 800821e:	9a07      	ldr	r2, [sp, #28]
 8008220:	4654      	mov	r4, sl
 8008222:	2000      	movs	r0, #0
 8008224:	f04f 0c0a 	mov.w	ip, #10
 8008228:	4621      	mov	r1, r4
 800822a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800822e:	3b30      	subs	r3, #48	@ 0x30
 8008230:	2b09      	cmp	r3, #9
 8008232:	d94b      	bls.n	80082cc <_svfiprintf_r+0x17c>
 8008234:	b1b0      	cbz	r0, 8008264 <_svfiprintf_r+0x114>
 8008236:	9207      	str	r2, [sp, #28]
 8008238:	e014      	b.n	8008264 <_svfiprintf_r+0x114>
 800823a:	eba0 0308 	sub.w	r3, r0, r8
 800823e:	fa09 f303 	lsl.w	r3, r9, r3
 8008242:	4313      	orrs	r3, r2
 8008244:	9304      	str	r3, [sp, #16]
 8008246:	46a2      	mov	sl, r4
 8008248:	e7d2      	b.n	80081f0 <_svfiprintf_r+0xa0>
 800824a:	9b03      	ldr	r3, [sp, #12]
 800824c:	1d19      	adds	r1, r3, #4
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	9103      	str	r1, [sp, #12]
 8008252:	2b00      	cmp	r3, #0
 8008254:	bfbb      	ittet	lt
 8008256:	425b      	neglt	r3, r3
 8008258:	f042 0202 	orrlt.w	r2, r2, #2
 800825c:	9307      	strge	r3, [sp, #28]
 800825e:	9307      	strlt	r3, [sp, #28]
 8008260:	bfb8      	it	lt
 8008262:	9204      	strlt	r2, [sp, #16]
 8008264:	7823      	ldrb	r3, [r4, #0]
 8008266:	2b2e      	cmp	r3, #46	@ 0x2e
 8008268:	d10a      	bne.n	8008280 <_svfiprintf_r+0x130>
 800826a:	7863      	ldrb	r3, [r4, #1]
 800826c:	2b2a      	cmp	r3, #42	@ 0x2a
 800826e:	d132      	bne.n	80082d6 <_svfiprintf_r+0x186>
 8008270:	9b03      	ldr	r3, [sp, #12]
 8008272:	1d1a      	adds	r2, r3, #4
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	9203      	str	r2, [sp, #12]
 8008278:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800827c:	3402      	adds	r4, #2
 800827e:	9305      	str	r3, [sp, #20]
 8008280:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008344 <_svfiprintf_r+0x1f4>
 8008284:	7821      	ldrb	r1, [r4, #0]
 8008286:	2203      	movs	r2, #3
 8008288:	4650      	mov	r0, sl
 800828a:	f7f7 ffa9 	bl	80001e0 <memchr>
 800828e:	b138      	cbz	r0, 80082a0 <_svfiprintf_r+0x150>
 8008290:	9b04      	ldr	r3, [sp, #16]
 8008292:	eba0 000a 	sub.w	r0, r0, sl
 8008296:	2240      	movs	r2, #64	@ 0x40
 8008298:	4082      	lsls	r2, r0
 800829a:	4313      	orrs	r3, r2
 800829c:	3401      	adds	r4, #1
 800829e:	9304      	str	r3, [sp, #16]
 80082a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082a4:	4824      	ldr	r0, [pc, #144]	@ (8008338 <_svfiprintf_r+0x1e8>)
 80082a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082aa:	2206      	movs	r2, #6
 80082ac:	f7f7 ff98 	bl	80001e0 <memchr>
 80082b0:	2800      	cmp	r0, #0
 80082b2:	d036      	beq.n	8008322 <_svfiprintf_r+0x1d2>
 80082b4:	4b21      	ldr	r3, [pc, #132]	@ (800833c <_svfiprintf_r+0x1ec>)
 80082b6:	bb1b      	cbnz	r3, 8008300 <_svfiprintf_r+0x1b0>
 80082b8:	9b03      	ldr	r3, [sp, #12]
 80082ba:	3307      	adds	r3, #7
 80082bc:	f023 0307 	bic.w	r3, r3, #7
 80082c0:	3308      	adds	r3, #8
 80082c2:	9303      	str	r3, [sp, #12]
 80082c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082c6:	4433      	add	r3, r6
 80082c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80082ca:	e76a      	b.n	80081a2 <_svfiprintf_r+0x52>
 80082cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80082d0:	460c      	mov	r4, r1
 80082d2:	2001      	movs	r0, #1
 80082d4:	e7a8      	b.n	8008228 <_svfiprintf_r+0xd8>
 80082d6:	2300      	movs	r3, #0
 80082d8:	3401      	adds	r4, #1
 80082da:	9305      	str	r3, [sp, #20]
 80082dc:	4619      	mov	r1, r3
 80082de:	f04f 0c0a 	mov.w	ip, #10
 80082e2:	4620      	mov	r0, r4
 80082e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082e8:	3a30      	subs	r2, #48	@ 0x30
 80082ea:	2a09      	cmp	r2, #9
 80082ec:	d903      	bls.n	80082f6 <_svfiprintf_r+0x1a6>
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d0c6      	beq.n	8008280 <_svfiprintf_r+0x130>
 80082f2:	9105      	str	r1, [sp, #20]
 80082f4:	e7c4      	b.n	8008280 <_svfiprintf_r+0x130>
 80082f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80082fa:	4604      	mov	r4, r0
 80082fc:	2301      	movs	r3, #1
 80082fe:	e7f0      	b.n	80082e2 <_svfiprintf_r+0x192>
 8008300:	ab03      	add	r3, sp, #12
 8008302:	9300      	str	r3, [sp, #0]
 8008304:	462a      	mov	r2, r5
 8008306:	4b0e      	ldr	r3, [pc, #56]	@ (8008340 <_svfiprintf_r+0x1f0>)
 8008308:	a904      	add	r1, sp, #16
 800830a:	4638      	mov	r0, r7
 800830c:	f3af 8000 	nop.w
 8008310:	1c42      	adds	r2, r0, #1
 8008312:	4606      	mov	r6, r0
 8008314:	d1d6      	bne.n	80082c4 <_svfiprintf_r+0x174>
 8008316:	89ab      	ldrh	r3, [r5, #12]
 8008318:	065b      	lsls	r3, r3, #25
 800831a:	f53f af2d 	bmi.w	8008178 <_svfiprintf_r+0x28>
 800831e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008320:	e72c      	b.n	800817c <_svfiprintf_r+0x2c>
 8008322:	ab03      	add	r3, sp, #12
 8008324:	9300      	str	r3, [sp, #0]
 8008326:	462a      	mov	r2, r5
 8008328:	4b05      	ldr	r3, [pc, #20]	@ (8008340 <_svfiprintf_r+0x1f0>)
 800832a:	a904      	add	r1, sp, #16
 800832c:	4638      	mov	r0, r7
 800832e:	f000 f9bb 	bl	80086a8 <_printf_i>
 8008332:	e7ed      	b.n	8008310 <_svfiprintf_r+0x1c0>
 8008334:	0800956d 	.word	0x0800956d
 8008338:	08009577 	.word	0x08009577
 800833c:	00000000 	.word	0x00000000
 8008340:	08008099 	.word	0x08008099
 8008344:	08009573 	.word	0x08009573

08008348 <__sfputc_r>:
 8008348:	6893      	ldr	r3, [r2, #8]
 800834a:	3b01      	subs	r3, #1
 800834c:	2b00      	cmp	r3, #0
 800834e:	b410      	push	{r4}
 8008350:	6093      	str	r3, [r2, #8]
 8008352:	da08      	bge.n	8008366 <__sfputc_r+0x1e>
 8008354:	6994      	ldr	r4, [r2, #24]
 8008356:	42a3      	cmp	r3, r4
 8008358:	db01      	blt.n	800835e <__sfputc_r+0x16>
 800835a:	290a      	cmp	r1, #10
 800835c:	d103      	bne.n	8008366 <__sfputc_r+0x1e>
 800835e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008362:	f7ff bc68 	b.w	8007c36 <__swbuf_r>
 8008366:	6813      	ldr	r3, [r2, #0]
 8008368:	1c58      	adds	r0, r3, #1
 800836a:	6010      	str	r0, [r2, #0]
 800836c:	7019      	strb	r1, [r3, #0]
 800836e:	4608      	mov	r0, r1
 8008370:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008374:	4770      	bx	lr

08008376 <__sfputs_r>:
 8008376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008378:	4606      	mov	r6, r0
 800837a:	460f      	mov	r7, r1
 800837c:	4614      	mov	r4, r2
 800837e:	18d5      	adds	r5, r2, r3
 8008380:	42ac      	cmp	r4, r5
 8008382:	d101      	bne.n	8008388 <__sfputs_r+0x12>
 8008384:	2000      	movs	r0, #0
 8008386:	e007      	b.n	8008398 <__sfputs_r+0x22>
 8008388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800838c:	463a      	mov	r2, r7
 800838e:	4630      	mov	r0, r6
 8008390:	f7ff ffda 	bl	8008348 <__sfputc_r>
 8008394:	1c43      	adds	r3, r0, #1
 8008396:	d1f3      	bne.n	8008380 <__sfputs_r+0xa>
 8008398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800839c <_vfiprintf_r>:
 800839c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a0:	460d      	mov	r5, r1
 80083a2:	b09d      	sub	sp, #116	@ 0x74
 80083a4:	4614      	mov	r4, r2
 80083a6:	4698      	mov	r8, r3
 80083a8:	4606      	mov	r6, r0
 80083aa:	b118      	cbz	r0, 80083b4 <_vfiprintf_r+0x18>
 80083ac:	6a03      	ldr	r3, [r0, #32]
 80083ae:	b90b      	cbnz	r3, 80083b4 <_vfiprintf_r+0x18>
 80083b0:	f7ff fb38 	bl	8007a24 <__sinit>
 80083b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083b6:	07d9      	lsls	r1, r3, #31
 80083b8:	d405      	bmi.n	80083c6 <_vfiprintf_r+0x2a>
 80083ba:	89ab      	ldrh	r3, [r5, #12]
 80083bc:	059a      	lsls	r2, r3, #22
 80083be:	d402      	bmi.n	80083c6 <_vfiprintf_r+0x2a>
 80083c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083c2:	f7ff fd60 	bl	8007e86 <__retarget_lock_acquire_recursive>
 80083c6:	89ab      	ldrh	r3, [r5, #12]
 80083c8:	071b      	lsls	r3, r3, #28
 80083ca:	d501      	bpl.n	80083d0 <_vfiprintf_r+0x34>
 80083cc:	692b      	ldr	r3, [r5, #16]
 80083ce:	b99b      	cbnz	r3, 80083f8 <_vfiprintf_r+0x5c>
 80083d0:	4629      	mov	r1, r5
 80083d2:	4630      	mov	r0, r6
 80083d4:	f7ff fc6e 	bl	8007cb4 <__swsetup_r>
 80083d8:	b170      	cbz	r0, 80083f8 <_vfiprintf_r+0x5c>
 80083da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083dc:	07dc      	lsls	r4, r3, #31
 80083de:	d504      	bpl.n	80083ea <_vfiprintf_r+0x4e>
 80083e0:	f04f 30ff 	mov.w	r0, #4294967295
 80083e4:	b01d      	add	sp, #116	@ 0x74
 80083e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ea:	89ab      	ldrh	r3, [r5, #12]
 80083ec:	0598      	lsls	r0, r3, #22
 80083ee:	d4f7      	bmi.n	80083e0 <_vfiprintf_r+0x44>
 80083f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083f2:	f7ff fd49 	bl	8007e88 <__retarget_lock_release_recursive>
 80083f6:	e7f3      	b.n	80083e0 <_vfiprintf_r+0x44>
 80083f8:	2300      	movs	r3, #0
 80083fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80083fc:	2320      	movs	r3, #32
 80083fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008402:	f8cd 800c 	str.w	r8, [sp, #12]
 8008406:	2330      	movs	r3, #48	@ 0x30
 8008408:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80085b8 <_vfiprintf_r+0x21c>
 800840c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008410:	f04f 0901 	mov.w	r9, #1
 8008414:	4623      	mov	r3, r4
 8008416:	469a      	mov	sl, r3
 8008418:	f813 2b01 	ldrb.w	r2, [r3], #1
 800841c:	b10a      	cbz	r2, 8008422 <_vfiprintf_r+0x86>
 800841e:	2a25      	cmp	r2, #37	@ 0x25
 8008420:	d1f9      	bne.n	8008416 <_vfiprintf_r+0x7a>
 8008422:	ebba 0b04 	subs.w	fp, sl, r4
 8008426:	d00b      	beq.n	8008440 <_vfiprintf_r+0xa4>
 8008428:	465b      	mov	r3, fp
 800842a:	4622      	mov	r2, r4
 800842c:	4629      	mov	r1, r5
 800842e:	4630      	mov	r0, r6
 8008430:	f7ff ffa1 	bl	8008376 <__sfputs_r>
 8008434:	3001      	adds	r0, #1
 8008436:	f000 80a7 	beq.w	8008588 <_vfiprintf_r+0x1ec>
 800843a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800843c:	445a      	add	r2, fp
 800843e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008440:	f89a 3000 	ldrb.w	r3, [sl]
 8008444:	2b00      	cmp	r3, #0
 8008446:	f000 809f 	beq.w	8008588 <_vfiprintf_r+0x1ec>
 800844a:	2300      	movs	r3, #0
 800844c:	f04f 32ff 	mov.w	r2, #4294967295
 8008450:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008454:	f10a 0a01 	add.w	sl, sl, #1
 8008458:	9304      	str	r3, [sp, #16]
 800845a:	9307      	str	r3, [sp, #28]
 800845c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008460:	931a      	str	r3, [sp, #104]	@ 0x68
 8008462:	4654      	mov	r4, sl
 8008464:	2205      	movs	r2, #5
 8008466:	f814 1b01 	ldrb.w	r1, [r4], #1
 800846a:	4853      	ldr	r0, [pc, #332]	@ (80085b8 <_vfiprintf_r+0x21c>)
 800846c:	f7f7 feb8 	bl	80001e0 <memchr>
 8008470:	9a04      	ldr	r2, [sp, #16]
 8008472:	b9d8      	cbnz	r0, 80084ac <_vfiprintf_r+0x110>
 8008474:	06d1      	lsls	r1, r2, #27
 8008476:	bf44      	itt	mi
 8008478:	2320      	movmi	r3, #32
 800847a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800847e:	0713      	lsls	r3, r2, #28
 8008480:	bf44      	itt	mi
 8008482:	232b      	movmi	r3, #43	@ 0x2b
 8008484:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008488:	f89a 3000 	ldrb.w	r3, [sl]
 800848c:	2b2a      	cmp	r3, #42	@ 0x2a
 800848e:	d015      	beq.n	80084bc <_vfiprintf_r+0x120>
 8008490:	9a07      	ldr	r2, [sp, #28]
 8008492:	4654      	mov	r4, sl
 8008494:	2000      	movs	r0, #0
 8008496:	f04f 0c0a 	mov.w	ip, #10
 800849a:	4621      	mov	r1, r4
 800849c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084a0:	3b30      	subs	r3, #48	@ 0x30
 80084a2:	2b09      	cmp	r3, #9
 80084a4:	d94b      	bls.n	800853e <_vfiprintf_r+0x1a2>
 80084a6:	b1b0      	cbz	r0, 80084d6 <_vfiprintf_r+0x13a>
 80084a8:	9207      	str	r2, [sp, #28]
 80084aa:	e014      	b.n	80084d6 <_vfiprintf_r+0x13a>
 80084ac:	eba0 0308 	sub.w	r3, r0, r8
 80084b0:	fa09 f303 	lsl.w	r3, r9, r3
 80084b4:	4313      	orrs	r3, r2
 80084b6:	9304      	str	r3, [sp, #16]
 80084b8:	46a2      	mov	sl, r4
 80084ba:	e7d2      	b.n	8008462 <_vfiprintf_r+0xc6>
 80084bc:	9b03      	ldr	r3, [sp, #12]
 80084be:	1d19      	adds	r1, r3, #4
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	9103      	str	r1, [sp, #12]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	bfbb      	ittet	lt
 80084c8:	425b      	neglt	r3, r3
 80084ca:	f042 0202 	orrlt.w	r2, r2, #2
 80084ce:	9307      	strge	r3, [sp, #28]
 80084d0:	9307      	strlt	r3, [sp, #28]
 80084d2:	bfb8      	it	lt
 80084d4:	9204      	strlt	r2, [sp, #16]
 80084d6:	7823      	ldrb	r3, [r4, #0]
 80084d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80084da:	d10a      	bne.n	80084f2 <_vfiprintf_r+0x156>
 80084dc:	7863      	ldrb	r3, [r4, #1]
 80084de:	2b2a      	cmp	r3, #42	@ 0x2a
 80084e0:	d132      	bne.n	8008548 <_vfiprintf_r+0x1ac>
 80084e2:	9b03      	ldr	r3, [sp, #12]
 80084e4:	1d1a      	adds	r2, r3, #4
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	9203      	str	r2, [sp, #12]
 80084ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084ee:	3402      	adds	r4, #2
 80084f0:	9305      	str	r3, [sp, #20]
 80084f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80085c8 <_vfiprintf_r+0x22c>
 80084f6:	7821      	ldrb	r1, [r4, #0]
 80084f8:	2203      	movs	r2, #3
 80084fa:	4650      	mov	r0, sl
 80084fc:	f7f7 fe70 	bl	80001e0 <memchr>
 8008500:	b138      	cbz	r0, 8008512 <_vfiprintf_r+0x176>
 8008502:	9b04      	ldr	r3, [sp, #16]
 8008504:	eba0 000a 	sub.w	r0, r0, sl
 8008508:	2240      	movs	r2, #64	@ 0x40
 800850a:	4082      	lsls	r2, r0
 800850c:	4313      	orrs	r3, r2
 800850e:	3401      	adds	r4, #1
 8008510:	9304      	str	r3, [sp, #16]
 8008512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008516:	4829      	ldr	r0, [pc, #164]	@ (80085bc <_vfiprintf_r+0x220>)
 8008518:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800851c:	2206      	movs	r2, #6
 800851e:	f7f7 fe5f 	bl	80001e0 <memchr>
 8008522:	2800      	cmp	r0, #0
 8008524:	d03f      	beq.n	80085a6 <_vfiprintf_r+0x20a>
 8008526:	4b26      	ldr	r3, [pc, #152]	@ (80085c0 <_vfiprintf_r+0x224>)
 8008528:	bb1b      	cbnz	r3, 8008572 <_vfiprintf_r+0x1d6>
 800852a:	9b03      	ldr	r3, [sp, #12]
 800852c:	3307      	adds	r3, #7
 800852e:	f023 0307 	bic.w	r3, r3, #7
 8008532:	3308      	adds	r3, #8
 8008534:	9303      	str	r3, [sp, #12]
 8008536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008538:	443b      	add	r3, r7
 800853a:	9309      	str	r3, [sp, #36]	@ 0x24
 800853c:	e76a      	b.n	8008414 <_vfiprintf_r+0x78>
 800853e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008542:	460c      	mov	r4, r1
 8008544:	2001      	movs	r0, #1
 8008546:	e7a8      	b.n	800849a <_vfiprintf_r+0xfe>
 8008548:	2300      	movs	r3, #0
 800854a:	3401      	adds	r4, #1
 800854c:	9305      	str	r3, [sp, #20]
 800854e:	4619      	mov	r1, r3
 8008550:	f04f 0c0a 	mov.w	ip, #10
 8008554:	4620      	mov	r0, r4
 8008556:	f810 2b01 	ldrb.w	r2, [r0], #1
 800855a:	3a30      	subs	r2, #48	@ 0x30
 800855c:	2a09      	cmp	r2, #9
 800855e:	d903      	bls.n	8008568 <_vfiprintf_r+0x1cc>
 8008560:	2b00      	cmp	r3, #0
 8008562:	d0c6      	beq.n	80084f2 <_vfiprintf_r+0x156>
 8008564:	9105      	str	r1, [sp, #20]
 8008566:	e7c4      	b.n	80084f2 <_vfiprintf_r+0x156>
 8008568:	fb0c 2101 	mla	r1, ip, r1, r2
 800856c:	4604      	mov	r4, r0
 800856e:	2301      	movs	r3, #1
 8008570:	e7f0      	b.n	8008554 <_vfiprintf_r+0x1b8>
 8008572:	ab03      	add	r3, sp, #12
 8008574:	9300      	str	r3, [sp, #0]
 8008576:	462a      	mov	r2, r5
 8008578:	4b12      	ldr	r3, [pc, #72]	@ (80085c4 <_vfiprintf_r+0x228>)
 800857a:	a904      	add	r1, sp, #16
 800857c:	4630      	mov	r0, r6
 800857e:	f3af 8000 	nop.w
 8008582:	4607      	mov	r7, r0
 8008584:	1c78      	adds	r0, r7, #1
 8008586:	d1d6      	bne.n	8008536 <_vfiprintf_r+0x19a>
 8008588:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800858a:	07d9      	lsls	r1, r3, #31
 800858c:	d405      	bmi.n	800859a <_vfiprintf_r+0x1fe>
 800858e:	89ab      	ldrh	r3, [r5, #12]
 8008590:	059a      	lsls	r2, r3, #22
 8008592:	d402      	bmi.n	800859a <_vfiprintf_r+0x1fe>
 8008594:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008596:	f7ff fc77 	bl	8007e88 <__retarget_lock_release_recursive>
 800859a:	89ab      	ldrh	r3, [r5, #12]
 800859c:	065b      	lsls	r3, r3, #25
 800859e:	f53f af1f 	bmi.w	80083e0 <_vfiprintf_r+0x44>
 80085a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80085a4:	e71e      	b.n	80083e4 <_vfiprintf_r+0x48>
 80085a6:	ab03      	add	r3, sp, #12
 80085a8:	9300      	str	r3, [sp, #0]
 80085aa:	462a      	mov	r2, r5
 80085ac:	4b05      	ldr	r3, [pc, #20]	@ (80085c4 <_vfiprintf_r+0x228>)
 80085ae:	a904      	add	r1, sp, #16
 80085b0:	4630      	mov	r0, r6
 80085b2:	f000 f879 	bl	80086a8 <_printf_i>
 80085b6:	e7e4      	b.n	8008582 <_vfiprintf_r+0x1e6>
 80085b8:	0800956d 	.word	0x0800956d
 80085bc:	08009577 	.word	0x08009577
 80085c0:	00000000 	.word	0x00000000
 80085c4:	08008377 	.word	0x08008377
 80085c8:	08009573 	.word	0x08009573

080085cc <_printf_common>:
 80085cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085d0:	4616      	mov	r6, r2
 80085d2:	4698      	mov	r8, r3
 80085d4:	688a      	ldr	r2, [r1, #8]
 80085d6:	690b      	ldr	r3, [r1, #16]
 80085d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80085dc:	4293      	cmp	r3, r2
 80085de:	bfb8      	it	lt
 80085e0:	4613      	movlt	r3, r2
 80085e2:	6033      	str	r3, [r6, #0]
 80085e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80085e8:	4607      	mov	r7, r0
 80085ea:	460c      	mov	r4, r1
 80085ec:	b10a      	cbz	r2, 80085f2 <_printf_common+0x26>
 80085ee:	3301      	adds	r3, #1
 80085f0:	6033      	str	r3, [r6, #0]
 80085f2:	6823      	ldr	r3, [r4, #0]
 80085f4:	0699      	lsls	r1, r3, #26
 80085f6:	bf42      	ittt	mi
 80085f8:	6833      	ldrmi	r3, [r6, #0]
 80085fa:	3302      	addmi	r3, #2
 80085fc:	6033      	strmi	r3, [r6, #0]
 80085fe:	6825      	ldr	r5, [r4, #0]
 8008600:	f015 0506 	ands.w	r5, r5, #6
 8008604:	d106      	bne.n	8008614 <_printf_common+0x48>
 8008606:	f104 0a19 	add.w	sl, r4, #25
 800860a:	68e3      	ldr	r3, [r4, #12]
 800860c:	6832      	ldr	r2, [r6, #0]
 800860e:	1a9b      	subs	r3, r3, r2
 8008610:	42ab      	cmp	r3, r5
 8008612:	dc26      	bgt.n	8008662 <_printf_common+0x96>
 8008614:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008618:	6822      	ldr	r2, [r4, #0]
 800861a:	3b00      	subs	r3, #0
 800861c:	bf18      	it	ne
 800861e:	2301      	movne	r3, #1
 8008620:	0692      	lsls	r2, r2, #26
 8008622:	d42b      	bmi.n	800867c <_printf_common+0xb0>
 8008624:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008628:	4641      	mov	r1, r8
 800862a:	4638      	mov	r0, r7
 800862c:	47c8      	blx	r9
 800862e:	3001      	adds	r0, #1
 8008630:	d01e      	beq.n	8008670 <_printf_common+0xa4>
 8008632:	6823      	ldr	r3, [r4, #0]
 8008634:	6922      	ldr	r2, [r4, #16]
 8008636:	f003 0306 	and.w	r3, r3, #6
 800863a:	2b04      	cmp	r3, #4
 800863c:	bf02      	ittt	eq
 800863e:	68e5      	ldreq	r5, [r4, #12]
 8008640:	6833      	ldreq	r3, [r6, #0]
 8008642:	1aed      	subeq	r5, r5, r3
 8008644:	68a3      	ldr	r3, [r4, #8]
 8008646:	bf0c      	ite	eq
 8008648:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800864c:	2500      	movne	r5, #0
 800864e:	4293      	cmp	r3, r2
 8008650:	bfc4      	itt	gt
 8008652:	1a9b      	subgt	r3, r3, r2
 8008654:	18ed      	addgt	r5, r5, r3
 8008656:	2600      	movs	r6, #0
 8008658:	341a      	adds	r4, #26
 800865a:	42b5      	cmp	r5, r6
 800865c:	d11a      	bne.n	8008694 <_printf_common+0xc8>
 800865e:	2000      	movs	r0, #0
 8008660:	e008      	b.n	8008674 <_printf_common+0xa8>
 8008662:	2301      	movs	r3, #1
 8008664:	4652      	mov	r2, sl
 8008666:	4641      	mov	r1, r8
 8008668:	4638      	mov	r0, r7
 800866a:	47c8      	blx	r9
 800866c:	3001      	adds	r0, #1
 800866e:	d103      	bne.n	8008678 <_printf_common+0xac>
 8008670:	f04f 30ff 	mov.w	r0, #4294967295
 8008674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008678:	3501      	adds	r5, #1
 800867a:	e7c6      	b.n	800860a <_printf_common+0x3e>
 800867c:	18e1      	adds	r1, r4, r3
 800867e:	1c5a      	adds	r2, r3, #1
 8008680:	2030      	movs	r0, #48	@ 0x30
 8008682:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008686:	4422      	add	r2, r4
 8008688:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800868c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008690:	3302      	adds	r3, #2
 8008692:	e7c7      	b.n	8008624 <_printf_common+0x58>
 8008694:	2301      	movs	r3, #1
 8008696:	4622      	mov	r2, r4
 8008698:	4641      	mov	r1, r8
 800869a:	4638      	mov	r0, r7
 800869c:	47c8      	blx	r9
 800869e:	3001      	adds	r0, #1
 80086a0:	d0e6      	beq.n	8008670 <_printf_common+0xa4>
 80086a2:	3601      	adds	r6, #1
 80086a4:	e7d9      	b.n	800865a <_printf_common+0x8e>
	...

080086a8 <_printf_i>:
 80086a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086ac:	7e0f      	ldrb	r7, [r1, #24]
 80086ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80086b0:	2f78      	cmp	r7, #120	@ 0x78
 80086b2:	4691      	mov	r9, r2
 80086b4:	4680      	mov	r8, r0
 80086b6:	460c      	mov	r4, r1
 80086b8:	469a      	mov	sl, r3
 80086ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80086be:	d807      	bhi.n	80086d0 <_printf_i+0x28>
 80086c0:	2f62      	cmp	r7, #98	@ 0x62
 80086c2:	d80a      	bhi.n	80086da <_printf_i+0x32>
 80086c4:	2f00      	cmp	r7, #0
 80086c6:	f000 80d2 	beq.w	800886e <_printf_i+0x1c6>
 80086ca:	2f58      	cmp	r7, #88	@ 0x58
 80086cc:	f000 80b9 	beq.w	8008842 <_printf_i+0x19a>
 80086d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80086d8:	e03a      	b.n	8008750 <_printf_i+0xa8>
 80086da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80086de:	2b15      	cmp	r3, #21
 80086e0:	d8f6      	bhi.n	80086d0 <_printf_i+0x28>
 80086e2:	a101      	add	r1, pc, #4	@ (adr r1, 80086e8 <_printf_i+0x40>)
 80086e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086e8:	08008741 	.word	0x08008741
 80086ec:	08008755 	.word	0x08008755
 80086f0:	080086d1 	.word	0x080086d1
 80086f4:	080086d1 	.word	0x080086d1
 80086f8:	080086d1 	.word	0x080086d1
 80086fc:	080086d1 	.word	0x080086d1
 8008700:	08008755 	.word	0x08008755
 8008704:	080086d1 	.word	0x080086d1
 8008708:	080086d1 	.word	0x080086d1
 800870c:	080086d1 	.word	0x080086d1
 8008710:	080086d1 	.word	0x080086d1
 8008714:	08008855 	.word	0x08008855
 8008718:	0800877f 	.word	0x0800877f
 800871c:	0800880f 	.word	0x0800880f
 8008720:	080086d1 	.word	0x080086d1
 8008724:	080086d1 	.word	0x080086d1
 8008728:	08008877 	.word	0x08008877
 800872c:	080086d1 	.word	0x080086d1
 8008730:	0800877f 	.word	0x0800877f
 8008734:	080086d1 	.word	0x080086d1
 8008738:	080086d1 	.word	0x080086d1
 800873c:	08008817 	.word	0x08008817
 8008740:	6833      	ldr	r3, [r6, #0]
 8008742:	1d1a      	adds	r2, r3, #4
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	6032      	str	r2, [r6, #0]
 8008748:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800874c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008750:	2301      	movs	r3, #1
 8008752:	e09d      	b.n	8008890 <_printf_i+0x1e8>
 8008754:	6833      	ldr	r3, [r6, #0]
 8008756:	6820      	ldr	r0, [r4, #0]
 8008758:	1d19      	adds	r1, r3, #4
 800875a:	6031      	str	r1, [r6, #0]
 800875c:	0606      	lsls	r6, r0, #24
 800875e:	d501      	bpl.n	8008764 <_printf_i+0xbc>
 8008760:	681d      	ldr	r5, [r3, #0]
 8008762:	e003      	b.n	800876c <_printf_i+0xc4>
 8008764:	0645      	lsls	r5, r0, #25
 8008766:	d5fb      	bpl.n	8008760 <_printf_i+0xb8>
 8008768:	f9b3 5000 	ldrsh.w	r5, [r3]
 800876c:	2d00      	cmp	r5, #0
 800876e:	da03      	bge.n	8008778 <_printf_i+0xd0>
 8008770:	232d      	movs	r3, #45	@ 0x2d
 8008772:	426d      	negs	r5, r5
 8008774:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008778:	4859      	ldr	r0, [pc, #356]	@ (80088e0 <_printf_i+0x238>)
 800877a:	230a      	movs	r3, #10
 800877c:	e011      	b.n	80087a2 <_printf_i+0xfa>
 800877e:	6821      	ldr	r1, [r4, #0]
 8008780:	6833      	ldr	r3, [r6, #0]
 8008782:	0608      	lsls	r0, r1, #24
 8008784:	f853 5b04 	ldr.w	r5, [r3], #4
 8008788:	d402      	bmi.n	8008790 <_printf_i+0xe8>
 800878a:	0649      	lsls	r1, r1, #25
 800878c:	bf48      	it	mi
 800878e:	b2ad      	uxthmi	r5, r5
 8008790:	2f6f      	cmp	r7, #111	@ 0x6f
 8008792:	4853      	ldr	r0, [pc, #332]	@ (80088e0 <_printf_i+0x238>)
 8008794:	6033      	str	r3, [r6, #0]
 8008796:	bf14      	ite	ne
 8008798:	230a      	movne	r3, #10
 800879a:	2308      	moveq	r3, #8
 800879c:	2100      	movs	r1, #0
 800879e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80087a2:	6866      	ldr	r6, [r4, #4]
 80087a4:	60a6      	str	r6, [r4, #8]
 80087a6:	2e00      	cmp	r6, #0
 80087a8:	bfa2      	ittt	ge
 80087aa:	6821      	ldrge	r1, [r4, #0]
 80087ac:	f021 0104 	bicge.w	r1, r1, #4
 80087b0:	6021      	strge	r1, [r4, #0]
 80087b2:	b90d      	cbnz	r5, 80087b8 <_printf_i+0x110>
 80087b4:	2e00      	cmp	r6, #0
 80087b6:	d04b      	beq.n	8008850 <_printf_i+0x1a8>
 80087b8:	4616      	mov	r6, r2
 80087ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80087be:	fb03 5711 	mls	r7, r3, r1, r5
 80087c2:	5dc7      	ldrb	r7, [r0, r7]
 80087c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80087c8:	462f      	mov	r7, r5
 80087ca:	42bb      	cmp	r3, r7
 80087cc:	460d      	mov	r5, r1
 80087ce:	d9f4      	bls.n	80087ba <_printf_i+0x112>
 80087d0:	2b08      	cmp	r3, #8
 80087d2:	d10b      	bne.n	80087ec <_printf_i+0x144>
 80087d4:	6823      	ldr	r3, [r4, #0]
 80087d6:	07df      	lsls	r7, r3, #31
 80087d8:	d508      	bpl.n	80087ec <_printf_i+0x144>
 80087da:	6923      	ldr	r3, [r4, #16]
 80087dc:	6861      	ldr	r1, [r4, #4]
 80087de:	4299      	cmp	r1, r3
 80087e0:	bfde      	ittt	le
 80087e2:	2330      	movle	r3, #48	@ 0x30
 80087e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80087e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80087ec:	1b92      	subs	r2, r2, r6
 80087ee:	6122      	str	r2, [r4, #16]
 80087f0:	f8cd a000 	str.w	sl, [sp]
 80087f4:	464b      	mov	r3, r9
 80087f6:	aa03      	add	r2, sp, #12
 80087f8:	4621      	mov	r1, r4
 80087fa:	4640      	mov	r0, r8
 80087fc:	f7ff fee6 	bl	80085cc <_printf_common>
 8008800:	3001      	adds	r0, #1
 8008802:	d14a      	bne.n	800889a <_printf_i+0x1f2>
 8008804:	f04f 30ff 	mov.w	r0, #4294967295
 8008808:	b004      	add	sp, #16
 800880a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	f043 0320 	orr.w	r3, r3, #32
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	4833      	ldr	r0, [pc, #204]	@ (80088e4 <_printf_i+0x23c>)
 8008818:	2778      	movs	r7, #120	@ 0x78
 800881a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800881e:	6823      	ldr	r3, [r4, #0]
 8008820:	6831      	ldr	r1, [r6, #0]
 8008822:	061f      	lsls	r7, r3, #24
 8008824:	f851 5b04 	ldr.w	r5, [r1], #4
 8008828:	d402      	bmi.n	8008830 <_printf_i+0x188>
 800882a:	065f      	lsls	r7, r3, #25
 800882c:	bf48      	it	mi
 800882e:	b2ad      	uxthmi	r5, r5
 8008830:	6031      	str	r1, [r6, #0]
 8008832:	07d9      	lsls	r1, r3, #31
 8008834:	bf44      	itt	mi
 8008836:	f043 0320 	orrmi.w	r3, r3, #32
 800883a:	6023      	strmi	r3, [r4, #0]
 800883c:	b11d      	cbz	r5, 8008846 <_printf_i+0x19e>
 800883e:	2310      	movs	r3, #16
 8008840:	e7ac      	b.n	800879c <_printf_i+0xf4>
 8008842:	4827      	ldr	r0, [pc, #156]	@ (80088e0 <_printf_i+0x238>)
 8008844:	e7e9      	b.n	800881a <_printf_i+0x172>
 8008846:	6823      	ldr	r3, [r4, #0]
 8008848:	f023 0320 	bic.w	r3, r3, #32
 800884c:	6023      	str	r3, [r4, #0]
 800884e:	e7f6      	b.n	800883e <_printf_i+0x196>
 8008850:	4616      	mov	r6, r2
 8008852:	e7bd      	b.n	80087d0 <_printf_i+0x128>
 8008854:	6833      	ldr	r3, [r6, #0]
 8008856:	6825      	ldr	r5, [r4, #0]
 8008858:	6961      	ldr	r1, [r4, #20]
 800885a:	1d18      	adds	r0, r3, #4
 800885c:	6030      	str	r0, [r6, #0]
 800885e:	062e      	lsls	r6, r5, #24
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	d501      	bpl.n	8008868 <_printf_i+0x1c0>
 8008864:	6019      	str	r1, [r3, #0]
 8008866:	e002      	b.n	800886e <_printf_i+0x1c6>
 8008868:	0668      	lsls	r0, r5, #25
 800886a:	d5fb      	bpl.n	8008864 <_printf_i+0x1bc>
 800886c:	8019      	strh	r1, [r3, #0]
 800886e:	2300      	movs	r3, #0
 8008870:	6123      	str	r3, [r4, #16]
 8008872:	4616      	mov	r6, r2
 8008874:	e7bc      	b.n	80087f0 <_printf_i+0x148>
 8008876:	6833      	ldr	r3, [r6, #0]
 8008878:	1d1a      	adds	r2, r3, #4
 800887a:	6032      	str	r2, [r6, #0]
 800887c:	681e      	ldr	r6, [r3, #0]
 800887e:	6862      	ldr	r2, [r4, #4]
 8008880:	2100      	movs	r1, #0
 8008882:	4630      	mov	r0, r6
 8008884:	f7f7 fcac 	bl	80001e0 <memchr>
 8008888:	b108      	cbz	r0, 800888e <_printf_i+0x1e6>
 800888a:	1b80      	subs	r0, r0, r6
 800888c:	6060      	str	r0, [r4, #4]
 800888e:	6863      	ldr	r3, [r4, #4]
 8008890:	6123      	str	r3, [r4, #16]
 8008892:	2300      	movs	r3, #0
 8008894:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008898:	e7aa      	b.n	80087f0 <_printf_i+0x148>
 800889a:	6923      	ldr	r3, [r4, #16]
 800889c:	4632      	mov	r2, r6
 800889e:	4649      	mov	r1, r9
 80088a0:	4640      	mov	r0, r8
 80088a2:	47d0      	blx	sl
 80088a4:	3001      	adds	r0, #1
 80088a6:	d0ad      	beq.n	8008804 <_printf_i+0x15c>
 80088a8:	6823      	ldr	r3, [r4, #0]
 80088aa:	079b      	lsls	r3, r3, #30
 80088ac:	d413      	bmi.n	80088d6 <_printf_i+0x22e>
 80088ae:	68e0      	ldr	r0, [r4, #12]
 80088b0:	9b03      	ldr	r3, [sp, #12]
 80088b2:	4298      	cmp	r0, r3
 80088b4:	bfb8      	it	lt
 80088b6:	4618      	movlt	r0, r3
 80088b8:	e7a6      	b.n	8008808 <_printf_i+0x160>
 80088ba:	2301      	movs	r3, #1
 80088bc:	4632      	mov	r2, r6
 80088be:	4649      	mov	r1, r9
 80088c0:	4640      	mov	r0, r8
 80088c2:	47d0      	blx	sl
 80088c4:	3001      	adds	r0, #1
 80088c6:	d09d      	beq.n	8008804 <_printf_i+0x15c>
 80088c8:	3501      	adds	r5, #1
 80088ca:	68e3      	ldr	r3, [r4, #12]
 80088cc:	9903      	ldr	r1, [sp, #12]
 80088ce:	1a5b      	subs	r3, r3, r1
 80088d0:	42ab      	cmp	r3, r5
 80088d2:	dcf2      	bgt.n	80088ba <_printf_i+0x212>
 80088d4:	e7eb      	b.n	80088ae <_printf_i+0x206>
 80088d6:	2500      	movs	r5, #0
 80088d8:	f104 0619 	add.w	r6, r4, #25
 80088dc:	e7f5      	b.n	80088ca <_printf_i+0x222>
 80088de:	bf00      	nop
 80088e0:	0800957e 	.word	0x0800957e
 80088e4:	0800958f 	.word	0x0800958f

080088e8 <__sflush_r>:
 80088e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088f0:	0716      	lsls	r6, r2, #28
 80088f2:	4605      	mov	r5, r0
 80088f4:	460c      	mov	r4, r1
 80088f6:	d454      	bmi.n	80089a2 <__sflush_r+0xba>
 80088f8:	684b      	ldr	r3, [r1, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	dc02      	bgt.n	8008904 <__sflush_r+0x1c>
 80088fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008900:	2b00      	cmp	r3, #0
 8008902:	dd48      	ble.n	8008996 <__sflush_r+0xae>
 8008904:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008906:	2e00      	cmp	r6, #0
 8008908:	d045      	beq.n	8008996 <__sflush_r+0xae>
 800890a:	2300      	movs	r3, #0
 800890c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008910:	682f      	ldr	r7, [r5, #0]
 8008912:	6a21      	ldr	r1, [r4, #32]
 8008914:	602b      	str	r3, [r5, #0]
 8008916:	d030      	beq.n	800897a <__sflush_r+0x92>
 8008918:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800891a:	89a3      	ldrh	r3, [r4, #12]
 800891c:	0759      	lsls	r1, r3, #29
 800891e:	d505      	bpl.n	800892c <__sflush_r+0x44>
 8008920:	6863      	ldr	r3, [r4, #4]
 8008922:	1ad2      	subs	r2, r2, r3
 8008924:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008926:	b10b      	cbz	r3, 800892c <__sflush_r+0x44>
 8008928:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800892a:	1ad2      	subs	r2, r2, r3
 800892c:	2300      	movs	r3, #0
 800892e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008930:	6a21      	ldr	r1, [r4, #32]
 8008932:	4628      	mov	r0, r5
 8008934:	47b0      	blx	r6
 8008936:	1c43      	adds	r3, r0, #1
 8008938:	89a3      	ldrh	r3, [r4, #12]
 800893a:	d106      	bne.n	800894a <__sflush_r+0x62>
 800893c:	6829      	ldr	r1, [r5, #0]
 800893e:	291d      	cmp	r1, #29
 8008940:	d82b      	bhi.n	800899a <__sflush_r+0xb2>
 8008942:	4a2a      	ldr	r2, [pc, #168]	@ (80089ec <__sflush_r+0x104>)
 8008944:	410a      	asrs	r2, r1
 8008946:	07d6      	lsls	r6, r2, #31
 8008948:	d427      	bmi.n	800899a <__sflush_r+0xb2>
 800894a:	2200      	movs	r2, #0
 800894c:	6062      	str	r2, [r4, #4]
 800894e:	04d9      	lsls	r1, r3, #19
 8008950:	6922      	ldr	r2, [r4, #16]
 8008952:	6022      	str	r2, [r4, #0]
 8008954:	d504      	bpl.n	8008960 <__sflush_r+0x78>
 8008956:	1c42      	adds	r2, r0, #1
 8008958:	d101      	bne.n	800895e <__sflush_r+0x76>
 800895a:	682b      	ldr	r3, [r5, #0]
 800895c:	b903      	cbnz	r3, 8008960 <__sflush_r+0x78>
 800895e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008960:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008962:	602f      	str	r7, [r5, #0]
 8008964:	b1b9      	cbz	r1, 8008996 <__sflush_r+0xae>
 8008966:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800896a:	4299      	cmp	r1, r3
 800896c:	d002      	beq.n	8008974 <__sflush_r+0x8c>
 800896e:	4628      	mov	r0, r5
 8008970:	f7ff fa9a 	bl	8007ea8 <_free_r>
 8008974:	2300      	movs	r3, #0
 8008976:	6363      	str	r3, [r4, #52]	@ 0x34
 8008978:	e00d      	b.n	8008996 <__sflush_r+0xae>
 800897a:	2301      	movs	r3, #1
 800897c:	4628      	mov	r0, r5
 800897e:	47b0      	blx	r6
 8008980:	4602      	mov	r2, r0
 8008982:	1c50      	adds	r0, r2, #1
 8008984:	d1c9      	bne.n	800891a <__sflush_r+0x32>
 8008986:	682b      	ldr	r3, [r5, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d0c6      	beq.n	800891a <__sflush_r+0x32>
 800898c:	2b1d      	cmp	r3, #29
 800898e:	d001      	beq.n	8008994 <__sflush_r+0xac>
 8008990:	2b16      	cmp	r3, #22
 8008992:	d11e      	bne.n	80089d2 <__sflush_r+0xea>
 8008994:	602f      	str	r7, [r5, #0]
 8008996:	2000      	movs	r0, #0
 8008998:	e022      	b.n	80089e0 <__sflush_r+0xf8>
 800899a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800899e:	b21b      	sxth	r3, r3
 80089a0:	e01b      	b.n	80089da <__sflush_r+0xf2>
 80089a2:	690f      	ldr	r7, [r1, #16]
 80089a4:	2f00      	cmp	r7, #0
 80089a6:	d0f6      	beq.n	8008996 <__sflush_r+0xae>
 80089a8:	0793      	lsls	r3, r2, #30
 80089aa:	680e      	ldr	r6, [r1, #0]
 80089ac:	bf08      	it	eq
 80089ae:	694b      	ldreq	r3, [r1, #20]
 80089b0:	600f      	str	r7, [r1, #0]
 80089b2:	bf18      	it	ne
 80089b4:	2300      	movne	r3, #0
 80089b6:	eba6 0807 	sub.w	r8, r6, r7
 80089ba:	608b      	str	r3, [r1, #8]
 80089bc:	f1b8 0f00 	cmp.w	r8, #0
 80089c0:	dde9      	ble.n	8008996 <__sflush_r+0xae>
 80089c2:	6a21      	ldr	r1, [r4, #32]
 80089c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80089c6:	4643      	mov	r3, r8
 80089c8:	463a      	mov	r2, r7
 80089ca:	4628      	mov	r0, r5
 80089cc:	47b0      	blx	r6
 80089ce:	2800      	cmp	r0, #0
 80089d0:	dc08      	bgt.n	80089e4 <__sflush_r+0xfc>
 80089d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089da:	81a3      	strh	r3, [r4, #12]
 80089dc:	f04f 30ff 	mov.w	r0, #4294967295
 80089e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089e4:	4407      	add	r7, r0
 80089e6:	eba8 0800 	sub.w	r8, r8, r0
 80089ea:	e7e7      	b.n	80089bc <__sflush_r+0xd4>
 80089ec:	dfbffffe 	.word	0xdfbffffe

080089f0 <_fflush_r>:
 80089f0:	b538      	push	{r3, r4, r5, lr}
 80089f2:	690b      	ldr	r3, [r1, #16]
 80089f4:	4605      	mov	r5, r0
 80089f6:	460c      	mov	r4, r1
 80089f8:	b913      	cbnz	r3, 8008a00 <_fflush_r+0x10>
 80089fa:	2500      	movs	r5, #0
 80089fc:	4628      	mov	r0, r5
 80089fe:	bd38      	pop	{r3, r4, r5, pc}
 8008a00:	b118      	cbz	r0, 8008a0a <_fflush_r+0x1a>
 8008a02:	6a03      	ldr	r3, [r0, #32]
 8008a04:	b90b      	cbnz	r3, 8008a0a <_fflush_r+0x1a>
 8008a06:	f7ff f80d 	bl	8007a24 <__sinit>
 8008a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d0f3      	beq.n	80089fa <_fflush_r+0xa>
 8008a12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008a14:	07d0      	lsls	r0, r2, #31
 8008a16:	d404      	bmi.n	8008a22 <_fflush_r+0x32>
 8008a18:	0599      	lsls	r1, r3, #22
 8008a1a:	d402      	bmi.n	8008a22 <_fflush_r+0x32>
 8008a1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a1e:	f7ff fa32 	bl	8007e86 <__retarget_lock_acquire_recursive>
 8008a22:	4628      	mov	r0, r5
 8008a24:	4621      	mov	r1, r4
 8008a26:	f7ff ff5f 	bl	80088e8 <__sflush_r>
 8008a2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a2c:	07da      	lsls	r2, r3, #31
 8008a2e:	4605      	mov	r5, r0
 8008a30:	d4e4      	bmi.n	80089fc <_fflush_r+0xc>
 8008a32:	89a3      	ldrh	r3, [r4, #12]
 8008a34:	059b      	lsls	r3, r3, #22
 8008a36:	d4e1      	bmi.n	80089fc <_fflush_r+0xc>
 8008a38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a3a:	f7ff fa25 	bl	8007e88 <__retarget_lock_release_recursive>
 8008a3e:	e7dd      	b.n	80089fc <_fflush_r+0xc>

08008a40 <__swhatbuf_r>:
 8008a40:	b570      	push	{r4, r5, r6, lr}
 8008a42:	460c      	mov	r4, r1
 8008a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a48:	2900      	cmp	r1, #0
 8008a4a:	b096      	sub	sp, #88	@ 0x58
 8008a4c:	4615      	mov	r5, r2
 8008a4e:	461e      	mov	r6, r3
 8008a50:	da0d      	bge.n	8008a6e <__swhatbuf_r+0x2e>
 8008a52:	89a3      	ldrh	r3, [r4, #12]
 8008a54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008a58:	f04f 0100 	mov.w	r1, #0
 8008a5c:	bf14      	ite	ne
 8008a5e:	2340      	movne	r3, #64	@ 0x40
 8008a60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008a64:	2000      	movs	r0, #0
 8008a66:	6031      	str	r1, [r6, #0]
 8008a68:	602b      	str	r3, [r5, #0]
 8008a6a:	b016      	add	sp, #88	@ 0x58
 8008a6c:	bd70      	pop	{r4, r5, r6, pc}
 8008a6e:	466a      	mov	r2, sp
 8008a70:	f000 f848 	bl	8008b04 <_fstat_r>
 8008a74:	2800      	cmp	r0, #0
 8008a76:	dbec      	blt.n	8008a52 <__swhatbuf_r+0x12>
 8008a78:	9901      	ldr	r1, [sp, #4]
 8008a7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008a7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008a82:	4259      	negs	r1, r3
 8008a84:	4159      	adcs	r1, r3
 8008a86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a8a:	e7eb      	b.n	8008a64 <__swhatbuf_r+0x24>

08008a8c <__smakebuf_r>:
 8008a8c:	898b      	ldrh	r3, [r1, #12]
 8008a8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a90:	079d      	lsls	r5, r3, #30
 8008a92:	4606      	mov	r6, r0
 8008a94:	460c      	mov	r4, r1
 8008a96:	d507      	bpl.n	8008aa8 <__smakebuf_r+0x1c>
 8008a98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a9c:	6023      	str	r3, [r4, #0]
 8008a9e:	6123      	str	r3, [r4, #16]
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	6163      	str	r3, [r4, #20]
 8008aa4:	b003      	add	sp, #12
 8008aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008aa8:	ab01      	add	r3, sp, #4
 8008aaa:	466a      	mov	r2, sp
 8008aac:	f7ff ffc8 	bl	8008a40 <__swhatbuf_r>
 8008ab0:	9f00      	ldr	r7, [sp, #0]
 8008ab2:	4605      	mov	r5, r0
 8008ab4:	4639      	mov	r1, r7
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	f7ff fa62 	bl	8007f80 <_malloc_r>
 8008abc:	b948      	cbnz	r0, 8008ad2 <__smakebuf_r+0x46>
 8008abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ac2:	059a      	lsls	r2, r3, #22
 8008ac4:	d4ee      	bmi.n	8008aa4 <__smakebuf_r+0x18>
 8008ac6:	f023 0303 	bic.w	r3, r3, #3
 8008aca:	f043 0302 	orr.w	r3, r3, #2
 8008ace:	81a3      	strh	r3, [r4, #12]
 8008ad0:	e7e2      	b.n	8008a98 <__smakebuf_r+0xc>
 8008ad2:	89a3      	ldrh	r3, [r4, #12]
 8008ad4:	6020      	str	r0, [r4, #0]
 8008ad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ada:	81a3      	strh	r3, [r4, #12]
 8008adc:	9b01      	ldr	r3, [sp, #4]
 8008ade:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008ae2:	b15b      	cbz	r3, 8008afc <__smakebuf_r+0x70>
 8008ae4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ae8:	4630      	mov	r0, r6
 8008aea:	f000 f81d 	bl	8008b28 <_isatty_r>
 8008aee:	b128      	cbz	r0, 8008afc <__smakebuf_r+0x70>
 8008af0:	89a3      	ldrh	r3, [r4, #12]
 8008af2:	f023 0303 	bic.w	r3, r3, #3
 8008af6:	f043 0301 	orr.w	r3, r3, #1
 8008afa:	81a3      	strh	r3, [r4, #12]
 8008afc:	89a3      	ldrh	r3, [r4, #12]
 8008afe:	431d      	orrs	r5, r3
 8008b00:	81a5      	strh	r5, [r4, #12]
 8008b02:	e7cf      	b.n	8008aa4 <__smakebuf_r+0x18>

08008b04 <_fstat_r>:
 8008b04:	b538      	push	{r3, r4, r5, lr}
 8008b06:	4d07      	ldr	r5, [pc, #28]	@ (8008b24 <_fstat_r+0x20>)
 8008b08:	2300      	movs	r3, #0
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	4608      	mov	r0, r1
 8008b0e:	4611      	mov	r1, r2
 8008b10:	602b      	str	r3, [r5, #0]
 8008b12:	f7f8 ff0b 	bl	800192c <_fstat>
 8008b16:	1c43      	adds	r3, r0, #1
 8008b18:	d102      	bne.n	8008b20 <_fstat_r+0x1c>
 8008b1a:	682b      	ldr	r3, [r5, #0]
 8008b1c:	b103      	cbz	r3, 8008b20 <_fstat_r+0x1c>
 8008b1e:	6023      	str	r3, [r4, #0]
 8008b20:	bd38      	pop	{r3, r4, r5, pc}
 8008b22:	bf00      	nop
 8008b24:	200007ec 	.word	0x200007ec

08008b28 <_isatty_r>:
 8008b28:	b538      	push	{r3, r4, r5, lr}
 8008b2a:	4d06      	ldr	r5, [pc, #24]	@ (8008b44 <_isatty_r+0x1c>)
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4608      	mov	r0, r1
 8008b32:	602b      	str	r3, [r5, #0]
 8008b34:	f7f8 ff0a 	bl	800194c <_isatty>
 8008b38:	1c43      	adds	r3, r0, #1
 8008b3a:	d102      	bne.n	8008b42 <_isatty_r+0x1a>
 8008b3c:	682b      	ldr	r3, [r5, #0]
 8008b3e:	b103      	cbz	r3, 8008b42 <_isatty_r+0x1a>
 8008b40:	6023      	str	r3, [r4, #0]
 8008b42:	bd38      	pop	{r3, r4, r5, pc}
 8008b44:	200007ec 	.word	0x200007ec

08008b48 <_sbrk_r>:
 8008b48:	b538      	push	{r3, r4, r5, lr}
 8008b4a:	4d06      	ldr	r5, [pc, #24]	@ (8008b64 <_sbrk_r+0x1c>)
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	4604      	mov	r4, r0
 8008b50:	4608      	mov	r0, r1
 8008b52:	602b      	str	r3, [r5, #0]
 8008b54:	f7f8 ff12 	bl	800197c <_sbrk>
 8008b58:	1c43      	adds	r3, r0, #1
 8008b5a:	d102      	bne.n	8008b62 <_sbrk_r+0x1a>
 8008b5c:	682b      	ldr	r3, [r5, #0]
 8008b5e:	b103      	cbz	r3, 8008b62 <_sbrk_r+0x1a>
 8008b60:	6023      	str	r3, [r4, #0]
 8008b62:	bd38      	pop	{r3, r4, r5, pc}
 8008b64:	200007ec 	.word	0x200007ec

08008b68 <_realloc_r>:
 8008b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b6c:	4680      	mov	r8, r0
 8008b6e:	4615      	mov	r5, r2
 8008b70:	460c      	mov	r4, r1
 8008b72:	b921      	cbnz	r1, 8008b7e <_realloc_r+0x16>
 8008b74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b78:	4611      	mov	r1, r2
 8008b7a:	f7ff ba01 	b.w	8007f80 <_malloc_r>
 8008b7e:	b92a      	cbnz	r2, 8008b8c <_realloc_r+0x24>
 8008b80:	f7ff f992 	bl	8007ea8 <_free_r>
 8008b84:	2400      	movs	r4, #0
 8008b86:	4620      	mov	r0, r4
 8008b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b8c:	f000 f81a 	bl	8008bc4 <_malloc_usable_size_r>
 8008b90:	4285      	cmp	r5, r0
 8008b92:	4606      	mov	r6, r0
 8008b94:	d802      	bhi.n	8008b9c <_realloc_r+0x34>
 8008b96:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008b9a:	d8f4      	bhi.n	8008b86 <_realloc_r+0x1e>
 8008b9c:	4629      	mov	r1, r5
 8008b9e:	4640      	mov	r0, r8
 8008ba0:	f7ff f9ee 	bl	8007f80 <_malloc_r>
 8008ba4:	4607      	mov	r7, r0
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	d0ec      	beq.n	8008b84 <_realloc_r+0x1c>
 8008baa:	42b5      	cmp	r5, r6
 8008bac:	462a      	mov	r2, r5
 8008bae:	4621      	mov	r1, r4
 8008bb0:	bf28      	it	cs
 8008bb2:	4632      	movcs	r2, r6
 8008bb4:	f7ff f969 	bl	8007e8a <memcpy>
 8008bb8:	4621      	mov	r1, r4
 8008bba:	4640      	mov	r0, r8
 8008bbc:	f7ff f974 	bl	8007ea8 <_free_r>
 8008bc0:	463c      	mov	r4, r7
 8008bc2:	e7e0      	b.n	8008b86 <_realloc_r+0x1e>

08008bc4 <_malloc_usable_size_r>:
 8008bc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bc8:	1f18      	subs	r0, r3, #4
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	bfbc      	itt	lt
 8008bce:	580b      	ldrlt	r3, [r1, r0]
 8008bd0:	18c0      	addlt	r0, r0, r3
 8008bd2:	4770      	bx	lr

08008bd4 <_init>:
 8008bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd6:	bf00      	nop
 8008bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bda:	bc08      	pop	{r3}
 8008bdc:	469e      	mov	lr, r3
 8008bde:	4770      	bx	lr

08008be0 <_fini>:
 8008be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be2:	bf00      	nop
 8008be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008be6:	bc08      	pop	{r3}
 8008be8:	469e      	mov	lr, r3
 8008bea:	4770      	bx	lr
