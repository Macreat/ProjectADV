
ProjectProof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f64  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015ec  080080f4  080080f4  000090f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096e0  080096e0  0000b07c  2**0
                  CONTENTS
  4 .ARM          00000008  080096e0  080096e0  0000a6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096e8  080096e8  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096e8  080096e8  0000a6e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080096ec  080096ec  0000a6ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080096f0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000076c  2000007c  0800976c  0000b07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007e8  0800976c  0000b7e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016472  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000318e  00000000  00000000  0002151e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  000246b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eb5  00000000  00000000  000259c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029cea  00000000  00000000  0002687d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018161  00000000  00000000  00050567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101077  00000000  00000000  000686c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016973f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000582c  00000000  00000000  00169784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0016efb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080080dc 	.word	0x080080dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	080080dc 	.word	0x080080dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <keypad_debounce>:

#include "main.h"


static uint8_t keypad_debounce(uint16_t GPIO_Pin)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
	static uint16_t last_pressed = 0xFFFF;
	static uint32_t last_tick = 0;

	if (last_pressed == GPIO_Pin) {
 800057a:	4b0e      	ldr	r3, [pc, #56]	@ (80005b4 <keypad_debounce+0x44>)
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	88fa      	ldrh	r2, [r7, #6]
 8000580:	429a      	cmp	r2, r3
 8000582:	d109      	bne.n	8000598 <keypad_debounce+0x28>
		if (HAL_GetTick() < (last_tick + 200)) {
 8000584:	f001 fa08 	bl	8001998 <HAL_GetTick>
 8000588:	4602      	mov	r2, r0
 800058a:	4b0b      	ldr	r3, [pc, #44]	@ (80005b8 <keypad_debounce+0x48>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	33c8      	adds	r3, #200	@ 0xc8
 8000590:	429a      	cmp	r2, r3
 8000592:	d201      	bcs.n	8000598 <keypad_debounce+0x28>
			return 0;
 8000594:	2300      	movs	r3, #0
 8000596:	e008      	b.n	80005aa <keypad_debounce+0x3a>
		}
	}
	last_pressed = GPIO_Pin;
 8000598:	4a06      	ldr	r2, [pc, #24]	@ (80005b4 <keypad_debounce+0x44>)
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	8013      	strh	r3, [r2, #0]
	last_tick = HAL_GetTick();
 800059e:	f001 f9fb 	bl	8001998 <HAL_GetTick>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a04      	ldr	r2, [pc, #16]	@ (80005b8 <keypad_debounce+0x48>)
 80005a6:	6013      	str	r3, [r2, #0]

	return 1;
 80005a8:	2301      	movs	r3, #1
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000010 	.word	0x20000010
 80005b8:	20000098 	.word	0x20000098

080005bc <keypad_scan_row>:

uint8_t keypad_scan_row(GPIO_TypeDef *COLUMNx_GPIO_Port, uint16_t COLUMNx_Pin)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	460b      	mov	r3, r1
 80005c6:	807b      	strh	r3, [r7, #2]
	uint8_t row_pressed = 0xFF;
 80005c8:	23ff      	movs	r3, #255	@ 0xff
 80005ca:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, GPIO_PIN_RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d6:	f003 f9ff 	bl	80039d8 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLUMNx_GPIO_Port, COLUMNx_Pin) == 0) {
 80005da:	887b      	ldrh	r3, [r7, #2]
 80005dc:	4619      	mov	r1, r3
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f003 f9e2 	bl	80039a8 <HAL_GPIO_ReadPin>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d102      	bne.n	80005f0 <keypad_scan_row+0x34>
		row_pressed =  1;
 80005ea:	2301      	movs	r3, #1
 80005ec:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 80005ee:	e030      	b.n	8000652 <keypad_scan_row+0x96>
	}
	HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2108      	movs	r1, #8
 80005f4:	4824      	ldr	r0, [pc, #144]	@ (8000688 <keypad_scan_row+0xcc>)
 80005f6:	f003 f9ef 	bl	80039d8 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLUMNx_GPIO_Port, COLUMNx_Pin) == 0) {
 80005fa:	887b      	ldrh	r3, [r7, #2]
 80005fc:	4619      	mov	r1, r3
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f003 f9d2 	bl	80039a8 <HAL_GPIO_ReadPin>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d102      	bne.n	8000610 <keypad_scan_row+0x54>
		row_pressed =  2;
 800060a:	2302      	movs	r3, #2
 800060c:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 800060e:	e020      	b.n	8000652 <keypad_scan_row+0x96>
	}
	HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2120      	movs	r1, #32
 8000614:	481c      	ldr	r0, [pc, #112]	@ (8000688 <keypad_scan_row+0xcc>)
 8000616:	f003 f9df 	bl	80039d8 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLUMNx_GPIO_Port, COLUMNx_Pin) == 0) {
 800061a:	887b      	ldrh	r3, [r7, #2]
 800061c:	4619      	mov	r1, r3
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f003 f9c2 	bl	80039a8 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d102      	bne.n	8000630 <keypad_scan_row+0x74>
		row_pressed =  3;
 800062a:	2303      	movs	r3, #3
 800062c:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 800062e:	e010      	b.n	8000652 <keypad_scan_row+0x96>
	}
	HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	2110      	movs	r1, #16
 8000634:	4814      	ldr	r0, [pc, #80]	@ (8000688 <keypad_scan_row+0xcc>)
 8000636:	f003 f9cf 	bl	80039d8 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLUMNx_GPIO_Port, COLUMNx_Pin) == 0) {
 800063a:	887b      	ldrh	r3, [r7, #2]
 800063c:	4619      	mov	r1, r3
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f003 f9b2 	bl	80039a8 <HAL_GPIO_ReadPin>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d102      	bne.n	8000650 <keypad_scan_row+0x94>
		row_pressed =  4;
 800064a:	2304      	movs	r3, #4
 800064c:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 800064e:	e000      	b.n	8000652 <keypad_scan_row+0x96>
	}
row_scan_end:
 8000650:	bf00      	nop
	HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, GPIO_PIN_SET);
 8000652:	2201      	movs	r2, #1
 8000654:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000658:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065c:	f003 f9bc 	bl	80039d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	2108      	movs	r1, #8
 8000664:	4808      	ldr	r0, [pc, #32]	@ (8000688 <keypad_scan_row+0xcc>)
 8000666:	f003 f9b7 	bl	80039d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, GPIO_PIN_SET);
 800066a:	2201      	movs	r2, #1
 800066c:	2120      	movs	r1, #32
 800066e:	4806      	ldr	r0, [pc, #24]	@ (8000688 <keypad_scan_row+0xcc>)
 8000670:	f003 f9b2 	bl	80039d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	2110      	movs	r1, #16
 8000678:	4803      	ldr	r0, [pc, #12]	@ (8000688 <keypad_scan_row+0xcc>)
 800067a:	f003 f9ad 	bl	80039d8 <HAL_GPIO_WritePin>
	return row_pressed; // not detected
 800067e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	48000400 	.word	0x48000400

0800068c <keypad_scan>:
		{'7', '8', '9', 'C'},
		{'*', '0', '#', 'D'},
};

uint8_t keypad_scan(uint16_t GPIO_Pin)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	80fb      	strh	r3, [r7, #6]
	uint8_t key_pressed = 0xFF;
 8000696:	23ff      	movs	r3, #255	@ 0xff
 8000698:	73fb      	strb	r3, [r7, #15]

	if (keypad_debounce(GPIO_Pin) == 0) {
 800069a:	88fb      	ldrh	r3, [r7, #6]
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff ff67 	bl	8000570 <keypad_debounce>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d101      	bne.n	80006ac <keypad_scan+0x20>
		return key_pressed;
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	e052      	b.n	8000752 <keypad_scan+0xc6>
	}
	uint8_t row = 0xFF;
 80006ac:	23ff      	movs	r3, #255	@ 0xff
 80006ae:	73bb      	strb	r3, [r7, #14]
	switch (GPIO_Pin) {
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006b6:	d00e      	beq.n	80006d6 <keypad_scan+0x4a>
 80006b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006bc:	dc47      	bgt.n	800074e <keypad_scan+0xc2>
 80006be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80006c2:	d026      	beq.n	8000712 <keypad_scan+0x86>
 80006c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80006c8:	dc41      	bgt.n	800074e <keypad_scan+0xc2>
 80006ca:	2b80      	cmp	r3, #128	@ 0x80
 80006cc:	d031      	beq.n	8000732 <keypad_scan+0xa6>
 80006ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80006d2:	d00e      	beq.n	80006f2 <keypad_scan+0x66>
	case COL_4_Pin:
			row = keypad_scan_row(COL_4_GPIO_Port, COL_4_Pin);
			key_pressed = keypad_chars[row - 1][4 - 1];
			break;
	default:
		break;
 80006d4:	e03b      	b.n	800074e <keypad_scan+0xc2>
		row = keypad_scan_row(COL_1_GPIO_Port, COL_1_Pin);
 80006d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006da:	4820      	ldr	r0, [pc, #128]	@ (800075c <keypad_scan+0xd0>)
 80006dc:	f7ff ff6e 	bl	80005bc <keypad_scan_row>
 80006e0:	4603      	mov	r3, r0
 80006e2:	73bb      	strb	r3, [r7, #14]
		key_pressed = keypad_chars[row - 1][1 - 1];
 80006e4:	7bbb      	ldrb	r3, [r7, #14]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000760 <keypad_scan+0xd4>)
 80006ea:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80006ee:	73fb      	strb	r3, [r7, #15]
		break;
 80006f0:	e02e      	b.n	8000750 <keypad_scan+0xc4>
		row = keypad_scan_row(COL_2_GPIO_Port, COL_2_Pin);
 80006f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006fa:	f7ff ff5f 	bl	80005bc <keypad_scan_row>
 80006fe:	4603      	mov	r3, r0
 8000700:	73bb      	strb	r3, [r7, #14]
		key_pressed = keypad_chars[row - 1][2 - 1];
 8000702:	7bbb      	ldrb	r3, [r7, #14]
 8000704:	3b01      	subs	r3, #1
 8000706:	4a16      	ldr	r2, [pc, #88]	@ (8000760 <keypad_scan+0xd4>)
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	4413      	add	r3, r2
 800070c:	785b      	ldrb	r3, [r3, #1]
 800070e:	73fb      	strb	r3, [r7, #15]
		break;
 8000710:	e01e      	b.n	8000750 <keypad_scan+0xc4>
			row = keypad_scan_row(COL_3_GPIO_Port, COL_3_Pin);
 8000712:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000716:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800071a:	f7ff ff4f 	bl	80005bc <keypad_scan_row>
 800071e:	4603      	mov	r3, r0
 8000720:	73bb      	strb	r3, [r7, #14]
			key_pressed = keypad_chars[row - 1][3 - 1];
 8000722:	7bbb      	ldrb	r3, [r7, #14]
 8000724:	3b01      	subs	r3, #1
 8000726:	4a0e      	ldr	r2, [pc, #56]	@ (8000760 <keypad_scan+0xd4>)
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	4413      	add	r3, r2
 800072c:	789b      	ldrb	r3, [r3, #2]
 800072e:	73fb      	strb	r3, [r7, #15]
			break;
 8000730:	e00e      	b.n	8000750 <keypad_scan+0xc4>
			row = keypad_scan_row(COL_4_GPIO_Port, COL_4_Pin);
 8000732:	2180      	movs	r1, #128	@ 0x80
 8000734:	480b      	ldr	r0, [pc, #44]	@ (8000764 <keypad_scan+0xd8>)
 8000736:	f7ff ff41 	bl	80005bc <keypad_scan_row>
 800073a:	4603      	mov	r3, r0
 800073c:	73bb      	strb	r3, [r7, #14]
			key_pressed = keypad_chars[row - 1][4 - 1];
 800073e:	7bbb      	ldrb	r3, [r7, #14]
 8000740:	3b01      	subs	r3, #1
 8000742:	4a07      	ldr	r2, [pc, #28]	@ (8000760 <keypad_scan+0xd4>)
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	4413      	add	r3, r2
 8000748:	78db      	ldrb	r3, [r3, #3]
 800074a:	73fb      	strb	r3, [r7, #15]
			break;
 800074c:	e000      	b.n	8000750 <keypad_scan+0xc4>
		break;
 800074e:	bf00      	nop
	}
	return key_pressed;
 8000750:	7bfb      	ldrb	r3, [r7, #15]
}
 8000752:	4618      	mov	r0, r3
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	48000400 	.word	0x48000400
 8000760:	20000000 	.word	0x20000000
 8000764:	48000800 	.word	0x48000800

08000768 <_write>:
 * By using this function, any call to `printf` will output the message
 * to the UART interface, which can be monitored with a serial console.
 */

int _write(int file, char *ptr, int len)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
  // to using printf
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	b29a      	uxth	r2, r3
 8000778:	230a      	movs	r3, #10
 800077a:	68b9      	ldr	r1, [r7, #8]
 800077c:	4803      	ldr	r0, [pc, #12]	@ (800078c <_write+0x24>)
 800077e:	f005 f999 	bl	8005ab4 <HAL_UART_Transmit>
  return len;
 8000782:	687b      	ldr	r3, [r7, #4]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200001b8 	.word	0x200001b8

08000790 <HAL_GPIO_EXTI_Callback>:
 * - The result of the validation (correct or incorrect) is displayed on the OLED and transmitted via UART.
 * - The buffer is reset after validation.
 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af02      	add	r7, sp, #8
 8000796:	4603      	mov	r3, r0
 8000798:	80fb      	strh	r3, [r7, #6]
	uint8_t key_pressed = keypad_scan(GPIO_Pin);
 800079a:	88fb      	ldrh	r3, [r7, #6]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ff75 	bl	800068c <keypad_scan>
 80007a2:	4603      	mov	r3, r0
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	737b      	strb	r3, [r7, #13]

	    if (key_pressed != 0xFF) {
 80007a8:	7b7b      	ldrb	r3, [r7, #13]
 80007aa:	2bff      	cmp	r3, #255	@ 0xff
 80007ac:	f000 80d2 	beq.w	8000954 <HAL_GPIO_EXTI_Callback+0x1c4>
	        // when '*' is pressed, the sequence is RESET
	        if (key_pressed == '*') {
 80007b0:	7b7b      	ldrb	r3, [r7, #13]
 80007b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80007b4:	d121      	bne.n	80007fa <HAL_GPIO_EXTI_Callback+0x6a>
	            ring_buffer_reset(&keyboard_ring_buffer);
 80007b6:	4869      	ldr	r0, [pc, #420]	@ (800095c <HAL_GPIO_EXTI_Callback+0x1cc>)
 80007b8:	f000 fd50 	bl	800125c <ring_buffer_reset>
	            memset(display_buffer, 0, sizeof(display_buffer)); //clean actual buffer on the screen
 80007bc:	2215      	movs	r2, #21
 80007be:	2100      	movs	r1, #0
 80007c0:	4867      	ldr	r0, [pc, #412]	@ (8000960 <HAL_GPIO_EXTI_Callback+0x1d0>)
 80007c2:	f006 fead 	bl	8007520 <memset>
	            buffer_index = 0; // reset index on buffer
 80007c6:	4b67      	ldr	r3, [pc, #412]	@ (8000964 <HAL_GPIO_EXTI_Callback+0x1d4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	701a      	strb	r2, [r3, #0]

	            ssd1306_Fill(Black);
 80007cc:	2000      	movs	r0, #0
 80007ce:	f006 fae1 	bl	8006d94 <ssd1306_Fill>
	            ssd1306_SetCursor(10, 20);
 80007d2:	2114      	movs	r1, #20
 80007d4:	200a      	movs	r0, #10
 80007d6:	f006 fc27 	bl	8007028 <ssd1306_SetCursor>
	            ssd1306_WriteString("sequence restarted", Font_6x8, White);
 80007da:	4b63      	ldr	r3, [pc, #396]	@ (8000968 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80007dc:	2201      	movs	r2, #1
 80007de:	9200      	str	r2, [sp, #0]
 80007e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007e2:	4862      	ldr	r0, [pc, #392]	@ (800096c <HAL_GPIO_EXTI_Callback+0x1dc>)
 80007e4:	f006 fbfa 	bl	8006fdc <ssd1306_WriteString>
	            ssd1306_UpdateScreen();
 80007e8:	f006 faec 	bl	8006dc4 <ssd1306_UpdateScreen>
	            HAL_UART_Transmit(&huart2, (uint8_t*)"Sequence restarted\n\r", 22, 10);
 80007ec:	230a      	movs	r3, #10
 80007ee:	2216      	movs	r2, #22
 80007f0:	495f      	ldr	r1, [pc, #380]	@ (8000970 <HAL_GPIO_EXTI_Callback+0x1e0>)
 80007f2:	4860      	ldr	r0, [pc, #384]	@ (8000974 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80007f4:	f005 f95e 	bl	8005ab4 <HAL_UART_Transmit>
	            return;
 80007f8:	e0ac      	b.n	8000954 <HAL_GPIO_EXTI_Callback+0x1c4>
	        }

	        // Write the key to the ring buffer
	        if (key_pressed != '#') {
 80007fa:	7b7b      	ldrb	r3, [r7, #13]
 80007fc:	2b23      	cmp	r3, #35	@ 0x23
 80007fe:	d031      	beq.n	8000864 <HAL_GPIO_EXTI_Callback+0xd4>
	            ring_buffer_write(&keyboard_ring_buffer, key_pressed);
 8000800:	7b7b      	ldrb	r3, [r7, #13]
 8000802:	4619      	mov	r1, r3
 8000804:	4855      	ldr	r0, [pc, #340]	@ (800095c <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000806:	f000 fd3c 	bl	8001282 <ring_buffer_write>

	            // add chart to the buffer
	            if (buffer_index < MAX_DISPLAY_CHARS) {
 800080a:	4b56      	ldr	r3, [pc, #344]	@ (8000964 <HAL_GPIO_EXTI_Callback+0x1d4>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b13      	cmp	r3, #19
 8000810:	f200 809f 	bhi.w	8000952 <HAL_GPIO_EXTI_Callback+0x1c2>
	                display_buffer[buffer_index++] = key_pressed;
 8000814:	4b53      	ldr	r3, [pc, #332]	@ (8000964 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	1c5a      	adds	r2, r3, #1
 800081a:	b2d1      	uxtb	r1, r2
 800081c:	4a51      	ldr	r2, [pc, #324]	@ (8000964 <HAL_GPIO_EXTI_Callback+0x1d4>)
 800081e:	7011      	strb	r1, [r2, #0]
 8000820:	461a      	mov	r2, r3
 8000822:	7b79      	ldrb	r1, [r7, #13]
 8000824:	4b4e      	ldr	r3, [pc, #312]	@ (8000960 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000826:	5499      	strb	r1, [r3, r2]
	                display_buffer[buffer_index] = '\0'; // Null-terminar el buffer
 8000828:	4b4e      	ldr	r3, [pc, #312]	@ (8000964 <HAL_GPIO_EXTI_Callback+0x1d4>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	461a      	mov	r2, r3
 800082e:	4b4c      	ldr	r3, [pc, #304]	@ (8000960 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000830:	2100      	movs	r1, #0
 8000832:	5499      	strb	r1, [r3, r2]

	                // clean screen and show buffer content on screen
	                ssd1306_Fill(Black);
 8000834:	2000      	movs	r0, #0
 8000836:	f006 faad 	bl	8006d94 <ssd1306_Fill>
	                ssd1306_SetCursor(10, 30);
 800083a:	211e      	movs	r1, #30
 800083c:	200a      	movs	r0, #10
 800083e:	f006 fbf3 	bl	8007028 <ssd1306_SetCursor>
	                ssd1306_WriteString(display_buffer, Font_6x8, White);
 8000842:	4b49      	ldr	r3, [pc, #292]	@ (8000968 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000844:	2201      	movs	r2, #1
 8000846:	9200      	str	r2, [sp, #0]
 8000848:	cb0e      	ldmia	r3, {r1, r2, r3}
 800084a:	4845      	ldr	r0, [pc, #276]	@ (8000960 <HAL_GPIO_EXTI_Callback+0x1d0>)
 800084c:	f006 fbc6 	bl	8006fdc <ssd1306_WriteString>
	                ssd1306_UpdateScreen();
 8000850:	f006 fab8 	bl	8006dc4 <ssd1306_UpdateScreen>

	                // send chart via UART
	                HAL_UART_Transmit(&huart2, &key_pressed, 1, 10);
 8000854:	f107 010d 	add.w	r1, r7, #13
 8000858:	230a      	movs	r3, #10
 800085a:	2201      	movs	r2, #1
 800085c:	4845      	ldr	r0, [pc, #276]	@ (8000974 <HAL_GPIO_EXTI_Callback+0x1e4>)
 800085e:	f005 f929 	bl	8005ab4 <HAL_UART_Transmit>
	            }
	            return;
 8000862:	e076      	b.n	8000952 <HAL_GPIO_EXTI_Callback+0x1c2>

	        // proccoed when  '#' is pressed , we verify the password entered



	        uint8_t byte2 = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	733b      	strb	r3, [r7, #12]
	        uint8_t id_incorrect2 = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	73fb      	strb	r3, [r7, #15]
	        uint8_t my_id2[] = "123";  // correct sequence
 800086c:	4b42      	ldr	r3, [pc, #264]	@ (8000978 <HAL_GPIO_EXTI_Callback+0x1e8>)
 800086e:	60bb      	str	r3, [r7, #8]

	        // Read from buffer and compare with correct key
	        for (uint8_t idx2 = 0; idx2 < sizeof(my_id2) - 1; idx2++) {
 8000870:	2300      	movs	r3, #0
 8000872:	73bb      	strb	r3, [r7, #14]
 8000874:	e019      	b.n	80008aa <HAL_GPIO_EXTI_Callback+0x11a>
	            if (ring_buffer_read(&keyboard_ring_buffer, &byte2) != 0) {
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	4619      	mov	r1, r3
 800087c:	4837      	ldr	r0, [pc, #220]	@ (800095c <HAL_GPIO_EXTI_Callback+0x1cc>)
 800087e:	f000 fd3e 	bl	80012fe <ring_buffer_read>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d00a      	beq.n	800089e <HAL_GPIO_EXTI_Callback+0x10e>
	                if (byte2 != my_id2[idx2]) {
 8000888:	7bbb      	ldrb	r3, [r7, #14]
 800088a:	3310      	adds	r3, #16
 800088c:	443b      	add	r3, r7
 800088e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000892:	7b3b      	ldrb	r3, [r7, #12]
 8000894:	429a      	cmp	r2, r3
 8000896:	d005      	beq.n	80008a4 <HAL_GPIO_EXTI_Callback+0x114>
	                    id_incorrect2 = 1;  // Mark as incorrect if no match
 8000898:	2301      	movs	r3, #1
 800089a:	73fb      	strb	r3, [r7, #15]


	                    break;
 800089c:	e008      	b.n	80008b0 <HAL_GPIO_EXTI_Callback+0x120>
	                }
	            } else {
	                id_incorrect2 = 1;  // if there is no space in buffer
 800089e:	2301      	movs	r3, #1
 80008a0:	73fb      	strb	r3, [r7, #15]
	                break;
 80008a2:	e005      	b.n	80008b0 <HAL_GPIO_EXTI_Callback+0x120>
	        for (uint8_t idx2 = 0; idx2 < sizeof(my_id2) - 1; idx2++) {
 80008a4:	7bbb      	ldrb	r3, [r7, #14]
 80008a6:	3301      	adds	r3, #1
 80008a8:	73bb      	strb	r3, [r7, #14]
 80008aa:	7bbb      	ldrb	r3, [r7, #14]
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d9e2      	bls.n	8000876 <HAL_GPIO_EXTI_Callback+0xe6>
	            }
	        }

	        HAL_UART_Transmit(&huart2, (uint8_t*)"\n", 1, 10);
 80008b0:	230a      	movs	r3, #10
 80008b2:	2201      	movs	r2, #1
 80008b4:	4931      	ldr	r1, [pc, #196]	@ (800097c <HAL_GPIO_EXTI_Callback+0x1ec>)
 80008b6:	482f      	ldr	r0, [pc, #188]	@ (8000974 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80008b8:	f005 f8fc 	bl	8005ab4 <HAL_UART_Transmit>

	        if (!id_incorrect2) {
 80008bc:	7bfb      	ldrb	r3, [r7, #15]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d11f      	bne.n	8000902 <HAL_GPIO_EXTI_Callback+0x172>
	            // success
	            ssd1306_Fill(Black);
 80008c2:	2000      	movs	r0, #0
 80008c4:	f006 fa66 	bl	8006d94 <ssd1306_Fill>
	            ssd1306_SetCursor(10, 20);
 80008c8:	2114      	movs	r1, #20
 80008ca:	200a      	movs	r0, #10
 80008cc:	f006 fbac 	bl	8007028 <ssd1306_SetCursor>
	            ssd1306_WriteString("correct sequence\n\r", Font_6x8, White);
 80008d0:	4b25      	ldr	r3, [pc, #148]	@ (8000968 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	9200      	str	r2, [sp, #0]
 80008d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008d8:	4829      	ldr	r0, [pc, #164]	@ (8000980 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80008da:	f006 fb7f 	bl	8006fdc <ssd1306_WriteString>
	            ssd1306_UpdateScreen();
 80008de:	f006 fa71 	bl	8006dc4 <ssd1306_UpdateScreen>
	            HAL_UART_Transmit(&huart2, (uint8_t*)"correct sequence\n\r", 21, 10);
 80008e2:	230a      	movs	r3, #10
 80008e4:	2215      	movs	r2, #21
 80008e6:	4926      	ldr	r1, [pc, #152]	@ (8000980 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80008e8:	4822      	ldr	r0, [pc, #136]	@ (8000974 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80008ea:	f005 f8e3 	bl	8005ab4 <HAL_UART_Transmit>
	            HAL_UART_Transmit(&huart2, (uint8_t*)"starting...\n\r", 14, 10);
 80008ee:	230a      	movs	r3, #10
 80008f0:	220e      	movs	r2, #14
 80008f2:	4924      	ldr	r1, [pc, #144]	@ (8000984 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80008f4:	481f      	ldr	r0, [pc, #124]	@ (8000974 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80008f6:	f005 f8dd 	bl	8005ab4 <HAL_UART_Transmit>
	            passwordCorrect = 1 ;
 80008fa:	4b23      	ldr	r3, [pc, #140]	@ (8000988 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	701a      	strb	r2, [r3, #0]
	            return;
 8000900:	e028      	b.n	8000954 <HAL_GPIO_EXTI_Callback+0x1c4>



	        } else {
	            //  error
	            ssd1306_Fill(Black);
 8000902:	2000      	movs	r0, #0
 8000904:	f006 fa46 	bl	8006d94 <ssd1306_Fill>
	            ssd1306_SetCursor(10, 20);
 8000908:	2114      	movs	r1, #20
 800090a:	200a      	movs	r0, #10
 800090c:	f006 fb8c 	bl	8007028 <ssd1306_SetCursor>
	            ssd1306_WriteString("error. Try again ", Font_6x8, White);
 8000910:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000912:	2201      	movs	r2, #1
 8000914:	9200      	str	r2, [sp, #0]
 8000916:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000918:	481c      	ldr	r0, [pc, #112]	@ (800098c <HAL_GPIO_EXTI_Callback+0x1fc>)
 800091a:	f006 fb5f 	bl	8006fdc <ssd1306_WriteString>
	            ssd1306_UpdateScreen();
 800091e:	f006 fa51 	bl	8006dc4 <ssd1306_UpdateScreen>
	            HAL_UART_Transmit(&huart2, (uint8_t*)" incorrect sequence. Try again  \n\r", 12, 10);
 8000922:	230a      	movs	r3, #10
 8000924:	220c      	movs	r2, #12
 8000926:	491a      	ldr	r1, [pc, #104]	@ (8000990 <HAL_GPIO_EXTI_Callback+0x200>)
 8000928:	4812      	ldr	r0, [pc, #72]	@ (8000974 <HAL_GPIO_EXTI_Callback+0x1e4>)
 800092a:	f005 f8c3 	bl	8005ab4 <HAL_UART_Transmit>

	        }

	        // reset buffer after validation
	        ring_buffer_reset(&keyboard_ring_buffer);
 800092e:	480b      	ldr	r0, [pc, #44]	@ (800095c <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000930:	f000 fc94 	bl	800125c <ring_buffer_reset>
	        memset(display_buffer, 0, sizeof(display_buffer)); // clean buffer on screen
 8000934:	2215      	movs	r2, #21
 8000936:	2100      	movs	r1, #0
 8000938:	4809      	ldr	r0, [pc, #36]	@ (8000960 <HAL_GPIO_EXTI_Callback+0x1d0>)
 800093a:	f006 fdf1 	bl	8007520 <memset>
	        buffer_index = 0; // reset index buffer
 800093e:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
	        cursor_x = 10;  //Resets the horizontal cursor position
 8000944:	4b13      	ldr	r3, [pc, #76]	@ (8000994 <HAL_GPIO_EXTI_Callback+0x204>)
 8000946:	220a      	movs	r2, #10
 8000948:	701a      	strb	r2, [r3, #0]
	        cursor_y = 30;  // Restarts the vertical position of the course
 800094a:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <HAL_GPIO_EXTI_Callback+0x208>)
 800094c:	221e      	movs	r2, #30
 800094e:	701a      	strb	r2, [r3, #0]
 8000950:	e000      	b.n	8000954 <HAL_GPIO_EXTI_Callback+0x1c4>
	            return;
 8000952:	bf00      	nop

	    }
}
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000264 	.word	0x20000264
 8000960:	2000026c 	.word	0x2000026c
 8000964:	20000281 	.word	0x20000281
 8000968:	08009694 	.word	0x08009694
 800096c:	080080f4 	.word	0x080080f4
 8000970:	08008108 	.word	0x08008108
 8000974:	200001b8 	.word	0x200001b8
 8000978:	00333231 	.word	0x00333231
 800097c:	08008120 	.word	0x08008120
 8000980:	08008124 	.word	0x08008124
 8000984:	08008138 	.word	0x08008138
 8000988:	20000282 	.word	0x20000282
 800098c:	08008148 	.word	0x08008148
 8000990:	0800815c 	.word	0x0800815c
 8000994:	20000012 	.word	0x20000012
 8000998:	20000013 	.word	0x20000013

0800099c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a2:	f000 ff89 	bl	80018b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a6:	f000 f9b3 	bl	8000d10 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80009aa:	f000 fa02 	bl	8000db2 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ae:	f000 fb77 	bl	80010a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80009b2:	f000 fa29 	bl	8000e08 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80009b6:	f000 fb43 	bl	8001040 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 80009ba:	f000 fa9d 	bl	8000ef8 <MX_ADC2_Init>
  MX_I2C1_Init();
 80009be:	f000 faff 	bl	8000fc0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ring_buffer_init(&keyboard_ring_buffer, keyboard_buffer_memory, BUFFER_CAPACITY);
 80009c2:	220a      	movs	r2, #10
 80009c4:	49b7      	ldr	r1, [pc, #732]	@ (8000ca4 <main+0x308>)
 80009c6:	48b8      	ldr	r0, [pc, #736]	@ (8000ca8 <main+0x30c>)
 80009c8:	f000 fc34 	bl	8001234 <ring_buffer_init>
  ssd1306_Init();
 80009cc:	f006 f978 	bl	8006cc0 <ssd1306_Init>
  ssd1306_Fill(Black);
 80009d0:	2000      	movs	r0, #0
 80009d2:	f006 f9df 	bl	8006d94 <ssd1306_Fill>
  ssd1306_SetCursor(10,20);
 80009d6:	2114      	movs	r1, #20
 80009d8:	200a      	movs	r0, #10
 80009da:	f006 fb25 	bl	8007028 <ssd1306_SetCursor>
  ssd1306_WriteString("Starting...\r\n",Font_6x8,White);
 80009de:	4bb3      	ldr	r3, [pc, #716]	@ (8000cac <main+0x310>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	9200      	str	r2, [sp, #0]
 80009e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009e6:	48b2      	ldr	r0, [pc, #712]	@ (8000cb0 <main+0x314>)
 80009e8:	f006 faf8 	bl	8006fdc <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80009ec:	f006 f9ea 	bl	8006dc4 <ssd1306_UpdateScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Starting...\r\n");
 80009f0:	48b0      	ldr	r0, [pc, #704]	@ (8000cb4 <main+0x318>)
 80009f2:	f006 fc7b 	bl	80072ec <puts>

  while (1)
  {

	  if(passwordCorrect)
 80009f6:	4bb0      	ldr	r3, [pc, #704]	@ (8000cb8 <main+0x31c>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d0fa      	beq.n	80009f6 <main+0x5a>
	  	  {
	  		  for (int i = 0 ; i < 1; i ++){
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	e008      	b.n	8000a18 <main+0x7c>
	  			 printf("correct password. Welcome to our quality air system \r\n");
 8000a06:	48ad      	ldr	r0, [pc, #692]	@ (8000cbc <main+0x320>)
 8000a08:	f006 fc70 	bl	80072ec <puts>
	  			 passwordCorrect =0  ;
 8000a0c:	4baa      	ldr	r3, [pc, #680]	@ (8000cb8 <main+0x31c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	701a      	strb	r2, [r3, #0]
	  		  for (int i = 0 ; i < 1; i ++){
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	3301      	adds	r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	ddf3      	ble.n	8000a06 <main+0x6a>

	  		  while(1)
	  		  {
	  			 // adding logic to implement heartbeat
	  			    static uint32_t last_heartbeat_time = 0;
	  			    if (HAL_GetTick() - last_heartbeat_time >= 500) // toggling for 1Hz (500ms on / 500ms off)
 8000a1e:	f000 ffbb 	bl	8001998 <HAL_GetTick>
 8000a22:	4602      	mov	r2, r0
 8000a24:	4ba6      	ldr	r3, [pc, #664]	@ (8000cc0 <main+0x324>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000a2e:	d309      	bcc.n	8000a44 <main+0xa8>
	  			    {
	  			      HAL_GPIO_TogglePin(GPIOA, SYSTEM_LED_Pin);
 8000a30:	2120      	movs	r1, #32
 8000a32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a36:	f002 ffe7 	bl	8003a08 <HAL_GPIO_TogglePin>
	  			      last_heartbeat_time = HAL_GetTick();
 8000a3a:	f000 ffad 	bl	8001998 <HAL_GetTick>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	4a9f      	ldr	r2, [pc, #636]	@ (8000cc0 <main+0x324>)
 8000a42:	6013      	str	r3, [r2, #0]
	  			      // HAL_UART_Transmit(&huart2, HB, sizeof(HB) - 1, 100);
	  			    }

	  			    // starting system
	  			  HAL_ADC_Start(&hadc1);
 8000a44:	489f      	ldr	r0, [pc, #636]	@ (8000cc4 <main+0x328>)
 8000a46:	f001 fb1d 	bl	8002084 <HAL_ADC_Start>
	  			  		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000a4a:	f04f 31ff 	mov.w	r1, #4294967295
 8000a4e:	489d      	ldr	r0, [pc, #628]	@ (8000cc4 <main+0x328>)
 8000a50:	f001 fbd2 	bl	80021f8 <HAL_ADC_PollForConversion>
	  			  		  raw_value_LDR  = HAL_ADC_GetValue(&hadc1);
 8000a54:	489b      	ldr	r0, [pc, #620]	@ (8000cc4 <main+0x328>)
 8000a56:	f001 fca7 	bl	80023a8 <HAL_ADC_GetValue>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	4b9a      	ldr	r3, [pc, #616]	@ (8000cc8 <main+0x32c>)
 8000a60:	801a      	strh	r2, [r3, #0]
	  			  		  //SEND VIA UART
	  			  		  sprintf (uart_buff, "Light : %hu \r\n", raw_value_LDR);
 8000a62:	4b99      	ldr	r3, [pc, #612]	@ (8000cc8 <main+0x32c>)
 8000a64:	881b      	ldrh	r3, [r3, #0]
 8000a66:	461a      	mov	r2, r3
 8000a68:	4998      	ldr	r1, [pc, #608]	@ (8000ccc <main+0x330>)
 8000a6a:	4899      	ldr	r0, [pc, #612]	@ (8000cd0 <main+0x334>)
 8000a6c:	f006 fc46 	bl	80072fc <siprintf>
	  			  		  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buff, strlen(uart_buff), HAL_MAX_DELAY);
 8000a70:	4897      	ldr	r0, [pc, #604]	@ (8000cd0 <main+0x334>)
 8000a72:	f7ff fbad 	bl	80001d0 <strlen>
 8000a76:	4603      	mov	r3, r0
 8000a78:	b29a      	uxth	r2, r3
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7e:	4994      	ldr	r1, [pc, #592]	@ (8000cd0 <main+0x334>)
 8000a80:	4894      	ldr	r0, [pc, #592]	@ (8000cd4 <main+0x338>)
 8000a82:	f005 f817 	bl	8005ab4 <HAL_UART_Transmit>
	  			  		  //send via I2C
	  			  		 ssd1306_SetCursor(20, 40);
 8000a86:	2128      	movs	r1, #40	@ 0x28
 8000a88:	2014      	movs	r0, #20
 8000a8a:	f006 facd 	bl	8007028 <ssd1306_SetCursor>
						  char buffer[2] = {raw_value_LDR, '\0'};
 8000a8e:	4b8e      	ldr	r3, [pc, #568]	@ (8000cc8 <main+0x32c>)
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	723b      	strb	r3, [r7, #8]
 8000a96:	2300      	movs	r3, #0
 8000a98:	727b      	strb	r3, [r7, #9]
						  ssd1306_WriteString(buffer, Font_11x18, White);
 8000a9a:	4b8f      	ldr	r3, [pc, #572]	@ (8000cd8 <main+0x33c>)
 8000a9c:	f107 0008 	add.w	r0, r7, #8
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	9200      	str	r2, [sp, #0]
 8000aa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000aa6:	f006 fa99 	bl	8006fdc <ssd1306_WriteString>
						  ssd1306_UpdateScreen();
 8000aaa:	f006 f98b 	bl	8006dc4 <ssd1306_UpdateScreen>


	  			  		  HAL_ADC_Start(&hadc2);
 8000aae:	488b      	ldr	r0, [pc, #556]	@ (8000cdc <main+0x340>)
 8000ab0:	f001 fae8 	bl	8002084 <HAL_ADC_Start>
	  			  		  HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8000ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab8:	4888      	ldr	r0, [pc, #544]	@ (8000cdc <main+0x340>)
 8000aba:	f001 fb9d 	bl	80021f8 <HAL_ADC_PollForConversion>
	  			  		  raw_value_NTC  = HAL_ADC_GetValue(&hadc2);
 8000abe:	4887      	ldr	r0, [pc, #540]	@ (8000cdc <main+0x340>)
 8000ac0:	f001 fc72 	bl	80023a8 <HAL_ADC_GetValue>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	4b85      	ldr	r3, [pc, #532]	@ (8000ce0 <main+0x344>)
 8000aca:	801a      	strh	r2, [r3, #0]
	  			  		  sprintf (uart_buff, "NTC : %hu \r\n", raw_value_NTC);
 8000acc:	4b84      	ldr	r3, [pc, #528]	@ (8000ce0 <main+0x344>)
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4984      	ldr	r1, [pc, #528]	@ (8000ce4 <main+0x348>)
 8000ad4:	487e      	ldr	r0, [pc, #504]	@ (8000cd0 <main+0x334>)
 8000ad6:	f006 fc11 	bl	80072fc <siprintf>
	  			  		  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buff, strlen(uart_buff), HAL_MAX_DELAY);
 8000ada:	487d      	ldr	r0, [pc, #500]	@ (8000cd0 <main+0x334>)
 8000adc:	f7ff fb78 	bl	80001d0 <strlen>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae8:	4979      	ldr	r1, [pc, #484]	@ (8000cd0 <main+0x334>)
 8000aea:	487a      	ldr	r0, [pc, #488]	@ (8000cd4 <main+0x338>)
 8000aec:	f004 ffe2 	bl	8005ab4 <HAL_UART_Transmit>
	  			  		  //send by I2C
	  			  		  ssd1306_SetCursor(20, 40);
 8000af0:	2128      	movs	r1, #40	@ 0x28
 8000af2:	2014      	movs	r0, #20
 8000af4:	f006 fa98 	bl	8007028 <ssd1306_SetCursor>
						  char buffer1[2] = {raw_value_NTC, '\0'};
 8000af8:	4b79      	ldr	r3, [pc, #484]	@ (8000ce0 <main+0x344>)
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	713b      	strb	r3, [r7, #4]
 8000b00:	2300      	movs	r3, #0
 8000b02:	717b      	strb	r3, [r7, #5]
						  ssd1306_WriteString(buffer1, Font_11x18, White);
 8000b04:	4b74      	ldr	r3, [pc, #464]	@ (8000cd8 <main+0x33c>)
 8000b06:	1d38      	adds	r0, r7, #4
 8000b08:	2201      	movs	r2, #1
 8000b0a:	9200      	str	r2, [sp, #0]
 8000b0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b0e:	f006 fa65 	bl	8006fdc <ssd1306_WriteString>
						  ssd1306_UpdateScreen();
 8000b12:	f006 f957 	bl	8006dc4 <ssd1306_UpdateScreen>

	  			  		  HAL_Delay(1000);
 8000b16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b1a:	f000 ff49 	bl	80019b0 <HAL_Delay>

	  			  		 	   //conditional for LDR incidence
	  			  		  if ( raw_value_LDR > 3000 ||  HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)== 0 ){
 8000b1e:	4b6a      	ldr	r3, [pc, #424]	@ (8000cc8 <main+0x32c>)
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d807      	bhi.n	8000b3a <main+0x19e>
 8000b2a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b2e:	486e      	ldr	r0, [pc, #440]	@ (8000ce8 <main+0x34c>)
 8000b30:	f002 ff3a 	bl	80039a8 <HAL_GPIO_ReadPin>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d11b      	bne.n	8000b72 <main+0x1d6>
	  			  			  	  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin , 1 );
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	486b      	ldr	r0, [pc, #428]	@ (8000cec <main+0x350>)
 8000b40:	f002 ff4a 	bl	80039d8 <HAL_GPIO_WritePin>
	  			  			  	  ssd1306_Fill(Black);
 8000b44:	2000      	movs	r0, #0
 8000b46:	f006 f925 	bl	8006d94 <ssd1306_Fill>
	  			  			  	  ssd1306_SetCursor(10, 20);
 8000b4a:	2114      	movs	r1, #20
 8000b4c:	200a      	movs	r0, #10
 8000b4e:	f006 fa6b 	bl	8007028 <ssd1306_SetCursor>
	  			  			  	  ssd1306_WriteString("optimal light detected", Font_6x8, White);
 8000b52:	4b56      	ldr	r3, [pc, #344]	@ (8000cac <main+0x310>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	9200      	str	r2, [sp, #0]
 8000b58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b5a:	4865      	ldr	r0, [pc, #404]	@ (8000cf0 <main+0x354>)
 8000b5c:	f006 fa3e 	bl	8006fdc <ssd1306_WriteString>
	  			  			  	  ssd1306_UpdateScreen();
 8000b60:	f006 f930 	bl	8006dc4 <ssd1306_UpdateScreen>
	  			  			  	  HAL_UART_Transmit(&huart2, (uint8_t*)" optimal light detected \n\r", 12, 10);
 8000b64:	230a      	movs	r3, #10
 8000b66:	220c      	movs	r2, #12
 8000b68:	4962      	ldr	r1, [pc, #392]	@ (8000cf4 <main+0x358>)
 8000b6a:	485a      	ldr	r0, [pc, #360]	@ (8000cd4 <main+0x338>)
 8000b6c:	f004 ffa2 	bl	8005ab4 <HAL_UART_Transmit>
 8000b70:	e004      	b.n	8000b7c <main+0x1e0>

	  			  		  }else{
	  			  			  	  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin , 0 );
 8000b72:	2200      	movs	r2, #0
 8000b74:	2101      	movs	r1, #1
 8000b76:	485d      	ldr	r0, [pc, #372]	@ (8000cec <main+0x350>)
 8000b78:	f002 ff2e 	bl	80039d8 <HAL_GPIO_WritePin>

	  			  		  }

	  			  		 	   // conditional for NTC incidence

	  			  		 if (raw_value_NTC <= 1700) {
 8000b7c:	4b58      	ldr	r3, [pc, #352]	@ (8000ce0 <main+0x344>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d828      	bhi.n	8000bda <main+0x23e>
	  						  // Activa el LED1
	  						  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	2110      	movs	r1, #16
 8000b8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b90:	f002 ff22 	bl	80039d8 <HAL_GPIO_WritePin>
	  						  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0); // Asegura que el LED2 esté apagado
 8000b94:	2200      	movs	r2, #0
 8000b96:	2140      	movs	r1, #64	@ 0x40
 8000b98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b9c:	f002 ff1c 	bl	80039d8 <HAL_GPIO_WritePin>
	  						  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0); // Asegura que el LED3 esté apagado
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2180      	movs	r1, #128	@ 0x80
 8000ba4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba8:	f002 ff16 	bl	80039d8 <HAL_GPIO_WritePin>
	  						  ssd1306_Fill(Black);
 8000bac:	2000      	movs	r0, #0
 8000bae:	f006 f8f1 	bl	8006d94 <ssd1306_Fill>
							  ssd1306_SetCursor(10, 20);
 8000bb2:	2114      	movs	r1, #20
 8000bb4:	200a      	movs	r0, #10
 8000bb6:	f006 fa37 	bl	8007028 <ssd1306_SetCursor>
							  ssd1306_WriteString("Safe temperature threshold", Font_6x8, White);
 8000bba:	4b3c      	ldr	r3, [pc, #240]	@ (8000cac <main+0x310>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	9200      	str	r2, [sp, #0]
 8000bc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bc2:	484d      	ldr	r0, [pc, #308]	@ (8000cf8 <main+0x35c>)
 8000bc4:	f006 fa0a 	bl	8006fdc <ssd1306_WriteString>
							  ssd1306_UpdateScreen();
 8000bc8:	f006 f8fc 	bl	8006dc4 <ssd1306_UpdateScreen>
							  HAL_UART_Transmit(&huart2, (uint8_t*)" Safe temperature threshold \n\r", 12, 10);
 8000bcc:	230a      	movs	r3, #10
 8000bce:	220c      	movs	r2, #12
 8000bd0:	494a      	ldr	r1, [pc, #296]	@ (8000cfc <main+0x360>)
 8000bd2:	4840      	ldr	r0, [pc, #256]	@ (8000cd4 <main+0x338>)
 8000bd4:	f004 ff6e 	bl	8005ab4 <HAL_UART_Transmit>
 8000bd8:	e721      	b.n	8000a1e <main+0x82>
	  					  }
	  					  else if (raw_value_NTC > 1700 && raw_value_NTC <= 3300) {
 8000bda:	4b41      	ldr	r3, [pc, #260]	@ (8000ce0 <main+0x344>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d92e      	bls.n	8000c44 <main+0x2a8>
 8000be6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ce0 <main+0x344>)
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d828      	bhi.n	8000c44 <main+0x2a8>
	  						  // Activa el LED2
	  						  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1); // Asegura que el LED1 esté apagado
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	2110      	movs	r1, #16
 8000bf6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bfa:	f002 feed 	bl	80039d8 <HAL_GPIO_WritePin>
	  						  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	2140      	movs	r1, #64	@ 0x40
 8000c02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c06:	f002 fee7 	bl	80039d8 <HAL_GPIO_WritePin>
	  						  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0); // Asegura que el LED3 esté apagado
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2180      	movs	r1, #128	@ 0x80
 8000c0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c12:	f002 fee1 	bl	80039d8 <HAL_GPIO_WritePin>
	  						  ssd1306_Fill(Black);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f006 f8bc 	bl	8006d94 <ssd1306_Fill>
							  ssd1306_SetCursor(10, 20);
 8000c1c:	2114      	movs	r1, #20
 8000c1e:	200a      	movs	r0, #10
 8000c20:	f006 fa02 	bl	8007028 <ssd1306_SetCursor>
							  ssd1306_WriteString("Higher than average temperature threshold", Font_6x8, White);
 8000c24:	4b21      	ldr	r3, [pc, #132]	@ (8000cac <main+0x310>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	9200      	str	r2, [sp, #0]
 8000c2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c2c:	4834      	ldr	r0, [pc, #208]	@ (8000d00 <main+0x364>)
 8000c2e:	f006 f9d5 	bl	8006fdc <ssd1306_WriteString>
							  ssd1306_UpdateScreen();
 8000c32:	f006 f8c7 	bl	8006dc4 <ssd1306_UpdateScreen>
							  HAL_UART_Transmit(&huart2, (uint8_t*)" Higher than average temperature threshold \n\r", 12, 10);
 8000c36:	230a      	movs	r3, #10
 8000c38:	220c      	movs	r2, #12
 8000c3a:	4932      	ldr	r1, [pc, #200]	@ (8000d04 <main+0x368>)
 8000c3c:	4825      	ldr	r0, [pc, #148]	@ (8000cd4 <main+0x338>)
 8000c3e:	f004 ff39 	bl	8005ab4 <HAL_UART_Transmit>
 8000c42:	e02e      	b.n	8000ca2 <main+0x306>
}
	  					  else if (raw_value_NTC > 2700) {
 8000c44:	4b26      	ldr	r3, [pc, #152]	@ (8000ce0 <main+0x344>)
 8000c46:	881b      	ldrh	r3, [r3, #0]
 8000c48:	f640 228c 	movw	r2, #2700	@ 0xa8c
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	f67f aee6 	bls.w	8000a1e <main+0x82>
	  						  // Activa el LED3
	  						  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1); // Asegura que el LED1 esté apagado
 8000c52:	2201      	movs	r2, #1
 8000c54:	2110      	movs	r1, #16
 8000c56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c5a:	f002 febd 	bl	80039d8 <HAL_GPIO_WritePin>
	  						  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1); // Asegura que el LED2 esté apagado
 8000c5e:	2201      	movs	r2, #1
 8000c60:	2140      	movs	r1, #64	@ 0x40
 8000c62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c66:	f002 feb7 	bl	80039d8 <HAL_GPIO_WritePin>
	  						  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2180      	movs	r1, #128	@ 0x80
 8000c6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c72:	f002 feb1 	bl	80039d8 <HAL_GPIO_WritePin>
	  						  ssd1306_Fill(Black);
 8000c76:	2000      	movs	r0, #0
 8000c78:	f006 f88c 	bl	8006d94 <ssd1306_Fill>
							  ssd1306_SetCursor(10, 20);
 8000c7c:	2114      	movs	r1, #20
 8000c7e:	200a      	movs	r0, #10
 8000c80:	f006 f9d2 	bl	8007028 <ssd1306_SetCursor>
							  ssd1306_WriteString("High tempt detected.", Font_6x8, White);
 8000c84:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <main+0x310>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	9200      	str	r2, [sp, #0]
 8000c8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c8c:	481e      	ldr	r0, [pc, #120]	@ (8000d08 <main+0x36c>)
 8000c8e:	f006 f9a5 	bl	8006fdc <ssd1306_WriteString>
							  ssd1306_UpdateScreen();
 8000c92:	f006 f897 	bl	8006dc4 <ssd1306_UpdateScreen>
							  HAL_UART_Transmit(&huart2, (uint8_t*)" Take care.High tempt detected. \n\r", 12, 10);
 8000c96:	230a      	movs	r3, #10
 8000c98:	220c      	movs	r2, #12
 8000c9a:	491c      	ldr	r1, [pc, #112]	@ (8000d0c <main+0x370>)
 8000c9c:	480d      	ldr	r0, [pc, #52]	@ (8000cd4 <main+0x338>)
 8000c9e:	f004 ff09 	bl	8005ab4 <HAL_UART_Transmit>
	  		  {
 8000ca2:	e6bc      	b.n	8000a1e <main+0x82>
 8000ca4:	20000258 	.word	0x20000258
 8000ca8:	20000264 	.word	0x20000264
 8000cac:	08009694 	.word	0x08009694
 8000cb0:	08008180 	.word	0x08008180
 8000cb4:	08008190 	.word	0x08008190
 8000cb8:	20000282 	.word	0x20000282
 8000cbc:	080081a0 	.word	0x080081a0
 8000cc0:	20000284 	.word	0x20000284
 8000cc4:	2000009c 	.word	0x2000009c
 8000cc8:	20000256 	.word	0x20000256
 8000ccc:	080081d8 	.word	0x080081d8
 8000cd0:	20000240 	.word	0x20000240
 8000cd4:	200001b8 	.word	0x200001b8
 8000cd8:	080096a0 	.word	0x080096a0
 8000cdc:	20000100 	.word	0x20000100
 8000ce0:	20000254 	.word	0x20000254
 8000ce4:	080081e8 	.word	0x080081e8
 8000ce8:	48000800 	.word	0x48000800
 8000cec:	48000400 	.word	0x48000400
 8000cf0:	080081f8 	.word	0x080081f8
 8000cf4:	08008210 	.word	0x08008210
 8000cf8:	0800822c 	.word	0x0800822c
 8000cfc:	08008248 	.word	0x08008248
 8000d00:	08008268 	.word	0x08008268
 8000d04:	08008294 	.word	0x08008294
 8000d08:	080082c4 	.word	0x080082c4
 8000d0c:	080082dc 	.word	0x080082dc

08000d10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b096      	sub	sp, #88	@ 0x58
 8000d14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	2244      	movs	r2, #68	@ 0x44
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f006 fbfe 	bl	8007520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d24:	463b      	mov	r3, r7
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d32:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d36:	f003 fb5d 	bl	80043f4 <HAL_PWREx_ControlVoltageScaling>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d40:	f000 fa72 	bl	8001228 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d44:	2302      	movs	r3, #2
 8000d46:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d4c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d4e:	2310      	movs	r3, #16
 8000d50:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d52:	2302      	movs	r3, #2
 8000d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d56:	2302      	movs	r3, #2
 8000d58:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d5e:	230a      	movs	r3, #10
 8000d60:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d62:	2307      	movs	r3, #7
 8000d64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d66:	2302      	movs	r3, #2
 8000d68:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4618      	mov	r0, r3
 8000d74:	f003 fb94 	bl	80044a0 <HAL_RCC_OscConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000d7e:	f000 fa53 	bl	8001228 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d82:	230f      	movs	r3, #15
 8000d84:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d86:	2303      	movs	r3, #3
 8000d88:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d96:	463b      	mov	r3, r7
 8000d98:	2104      	movs	r1, #4
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f003 ff5c 	bl	8004c58 <HAL_RCC_ClockConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000da6:	f000 fa3f 	bl	8001228 <Error_Handler>
  }
}
 8000daa:	bf00      	nop
 8000dac:	3758      	adds	r7, #88	@ 0x58
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b0a2      	sub	sp, #136	@ 0x88
 8000db6:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db8:	463b      	mov	r3, r7
 8000dba:	2288      	movs	r2, #136	@ 0x88
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f006 fbae 	bl	8007520 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000dc4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000dc8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000dca:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000dce:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000dd8:	2308      	movs	r3, #8
 8000dda:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000ddc:	2307      	movs	r3, #7
 8000dde:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000de0:	2302      	movs	r3, #2
 8000de2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000de4:	2302      	movs	r3, #2
 8000de6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000de8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000dec:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dee:	463b      	mov	r3, r7
 8000df0:	4618      	mov	r0, r3
 8000df2:	f004 f955 	bl	80050a0 <HAL_RCCEx_PeriphCLKConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000dfc:	f000 fa14 	bl	8001228 <Error_Handler>
  }
}
 8000e00:	bf00      	nop
 8000e02:	3788      	adds	r7, #136	@ 0x88
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	@ 0x28
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
 8000e28:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e2a:	4b30      	ldr	r3, [pc, #192]	@ (8000eec <MX_ADC1_Init+0xe4>)
 8000e2c:	4a30      	ldr	r2, [pc, #192]	@ (8000ef0 <MX_ADC1_Init+0xe8>)
 8000e2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000e30:	4b2e      	ldr	r3, [pc, #184]	@ (8000eec <MX_ADC1_Init+0xe4>)
 8000e32:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000e36:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e38:	4b2c      	ldr	r3, [pc, #176]	@ (8000eec <MX_ADC1_Init+0xe4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e3e:	4b2b      	ldr	r3, [pc, #172]	@ (8000eec <MX_ADC1_Init+0xe4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e44:	4b29      	ldr	r3, [pc, #164]	@ (8000eec <MX_ADC1_Init+0xe4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e4a:	4b28      	ldr	r3, [pc, #160]	@ (8000eec <MX_ADC1_Init+0xe4>)
 8000e4c:	2204      	movs	r2, #4
 8000e4e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e50:	4b26      	ldr	r3, [pc, #152]	@ (8000eec <MX_ADC1_Init+0xe4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e56:	4b25      	ldr	r3, [pc, #148]	@ (8000eec <MX_ADC1_Init+0xe4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e5c:	4b23      	ldr	r3, [pc, #140]	@ (8000eec <MX_ADC1_Init+0xe4>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e62:	4b22      	ldr	r3, [pc, #136]	@ (8000eec <MX_ADC1_Init+0xe4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e6a:	4b20      	ldr	r3, [pc, #128]	@ (8000eec <MX_ADC1_Init+0xe4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e70:	4b1e      	ldr	r3, [pc, #120]	@ (8000eec <MX_ADC1_Init+0xe4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e76:	4b1d      	ldr	r3, [pc, #116]	@ (8000eec <MX_ADC1_Init+0xe4>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000eec <MX_ADC1_Init+0xe4>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e84:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <MX_ADC1_Init+0xe4>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e8c:	4817      	ldr	r0, [pc, #92]	@ (8000eec <MX_ADC1_Init+0xe4>)
 8000e8e:	f000 ffa9 	bl	8001de4 <HAL_ADC_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000e98:	f000 f9c6 	bl	8001228 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4811      	ldr	r0, [pc, #68]	@ (8000eec <MX_ADC1_Init+0xe4>)
 8000ea8:	f002 f994 	bl	80031d4 <HAL_ADCEx_MultiModeConfigChannel>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000eb2:	f000 f9b9 	bl	8001228 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <MX_ADC1_Init+0xec>)
 8000eb8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eba:	2306      	movs	r3, #6
 8000ebc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ec2:	237f      	movs	r3, #127	@ 0x7f
 8000ec4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4806      	ldr	r0, [pc, #24]	@ (8000eec <MX_ADC1_Init+0xe4>)
 8000ed4:	f001 fcae 	bl	8002834 <HAL_ADC_ConfigChannel>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000ede:	f000 f9a3 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	3728      	adds	r7, #40	@ 0x28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	2000009c 	.word	0x2000009c
 8000ef0:	50040000 	.word	0x50040000
 8000ef4:	14f00020 	.word	0x14f00020

08000ef8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000efe:	463b      	mov	r3, r7
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
 8000f0c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000f0e:	4b29      	ldr	r3, [pc, #164]	@ (8000fb4 <MX_ADC2_Init+0xbc>)
 8000f10:	4a29      	ldr	r2, [pc, #164]	@ (8000fb8 <MX_ADC2_Init+0xc0>)
 8000f12:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000f14:	4b27      	ldr	r3, [pc, #156]	@ (8000fb4 <MX_ADC2_Init+0xbc>)
 8000f16:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f1a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f1c:	4b25      	ldr	r3, [pc, #148]	@ (8000fb4 <MX_ADC2_Init+0xbc>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f22:	4b24      	ldr	r3, [pc, #144]	@ (8000fb4 <MX_ADC2_Init+0xbc>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f28:	4b22      	ldr	r3, [pc, #136]	@ (8000fb4 <MX_ADC2_Init+0xbc>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f2e:	4b21      	ldr	r3, [pc, #132]	@ (8000fb4 <MX_ADC2_Init+0xbc>)
 8000f30:	2204      	movs	r2, #4
 8000f32:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f34:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb4 <MX_ADC2_Init+0xbc>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb4 <MX_ADC2_Init+0xbc>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000f40:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb4 <MX_ADC2_Init+0xbc>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f46:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb4 <MX_ADC2_Init+0xbc>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f4e:	4b19      	ldr	r3, [pc, #100]	@ (8000fb4 <MX_ADC2_Init+0xbc>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f54:	4b17      	ldr	r3, [pc, #92]	@ (8000fb4 <MX_ADC2_Init+0xbc>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f5a:	4b16      	ldr	r3, [pc, #88]	@ (8000fb4 <MX_ADC2_Init+0xbc>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f62:	4b14      	ldr	r3, [pc, #80]	@ (8000fb4 <MX_ADC2_Init+0xbc>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <MX_ADC2_Init+0xbc>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f70:	4810      	ldr	r0, [pc, #64]	@ (8000fb4 <MX_ADC2_Init+0xbc>)
 8000f72:	f000 ff37 	bl	8001de4 <HAL_ADC_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000f7c:	f000 f954 	bl	8001228 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f80:	4b0e      	ldr	r3, [pc, #56]	@ (8000fbc <MX_ADC2_Init+0xc4>)
 8000f82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f84:	2306      	movs	r3, #6
 8000f86:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f8c:	237f      	movs	r3, #127	@ 0x7f
 8000f8e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f90:	2304      	movs	r3, #4
 8000f92:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f98:	463b      	mov	r3, r7
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	@ (8000fb4 <MX_ADC2_Init+0xbc>)
 8000f9e:	f001 fc49 	bl	8002834 <HAL_ADC_ConfigChannel>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000fa8:	f000 f93e 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000100 	.word	0x20000100
 8000fb8:	50040100 	.word	0x50040100
 8000fbc:	19200040 	.word	0x19200040

08000fc0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001034 <MX_I2C1_Init+0x74>)
 8000fc6:	4a1c      	ldr	r2, [pc, #112]	@ (8001038 <MX_I2C1_Init+0x78>)
 8000fc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000fca:	4b1a      	ldr	r3, [pc, #104]	@ (8001034 <MX_I2C1_Init+0x74>)
 8000fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800103c <MX_I2C1_Init+0x7c>)
 8000fce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fd0:	4b18      	ldr	r3, [pc, #96]	@ (8001034 <MX_I2C1_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd6:	4b17      	ldr	r3, [pc, #92]	@ (8001034 <MX_I2C1_Init+0x74>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fdc:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <MX_I2C1_Init+0x74>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <MX_I2C1_Init+0x74>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <MX_I2C1_Init+0x74>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fee:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <MX_I2C1_Init+0x74>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <MX_I2C1_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ffa:	480e      	ldr	r0, [pc, #56]	@ (8001034 <MX_I2C1_Init+0x74>)
 8000ffc:	f002 fd36 	bl	8003a6c <HAL_I2C_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001006:	f000 f90f 	bl	8001228 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800100a:	2100      	movs	r1, #0
 800100c:	4809      	ldr	r0, [pc, #36]	@ (8001034 <MX_I2C1_Init+0x74>)
 800100e:	f003 f94b 	bl	80042a8 <HAL_I2CEx_ConfigAnalogFilter>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001018:	f000 f906 	bl	8001228 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800101c:	2100      	movs	r1, #0
 800101e:	4805      	ldr	r0, [pc, #20]	@ (8001034 <MX_I2C1_Init+0x74>)
 8001020:	f003 f98d 	bl	800433e <HAL_I2CEx_ConfigDigitalFilter>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800102a:	f000 f8fd 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000164 	.word	0x20000164
 8001038:	40005400 	.word	0x40005400
 800103c:	10d19ce4 	.word	0x10d19ce4

08001040 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001044:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 8001046:	4a15      	ldr	r2, [pc, #84]	@ (800109c <MX_USART2_UART_Init+0x5c>)
 8001048:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800104a:	4b13      	ldr	r3, [pc, #76]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 800104c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001050:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001052:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001058:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800105e:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001064:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 8001066:	220c      	movs	r2, #12
 8001068:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106a:	4b0b      	ldr	r3, [pc, #44]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001070:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001076:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800107c:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 800107e:	2200      	movs	r2, #0
 8001080:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001082:	4805      	ldr	r0, [pc, #20]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 8001084:	f004 fcc8 	bl	8005a18 <HAL_UART_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800108e:	f000 f8cb 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200001b8 	.word	0x200001b8
 800109c:	40004400 	.word	0x40004400

080010a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	@ 0x28
 80010a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b6:	4b59      	ldr	r3, [pc, #356]	@ (800121c <MX_GPIO_Init+0x17c>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ba:	4a58      	ldr	r2, [pc, #352]	@ (800121c <MX_GPIO_Init+0x17c>)
 80010bc:	f043 0304 	orr.w	r3, r3, #4
 80010c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c2:	4b56      	ldr	r3, [pc, #344]	@ (800121c <MX_GPIO_Init+0x17c>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ce:	4b53      	ldr	r3, [pc, #332]	@ (800121c <MX_GPIO_Init+0x17c>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d2:	4a52      	ldr	r2, [pc, #328]	@ (800121c <MX_GPIO_Init+0x17c>)
 80010d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010da:	4b50      	ldr	r3, [pc, #320]	@ (800121c <MX_GPIO_Init+0x17c>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	4b4d      	ldr	r3, [pc, #308]	@ (800121c <MX_GPIO_Init+0x17c>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ea:	4a4c      	ldr	r2, [pc, #304]	@ (800121c <MX_GPIO_Init+0x17c>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010f2:	4b4a      	ldr	r3, [pc, #296]	@ (800121c <MX_GPIO_Init+0x17c>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	4b47      	ldr	r3, [pc, #284]	@ (800121c <MX_GPIO_Init+0x17c>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001102:	4a46      	ldr	r2, [pc, #280]	@ (800121c <MX_GPIO_Init+0x17c>)
 8001104:	f043 0302 	orr.w	r3, r3, #2
 8001108:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800110a:	4b44      	ldr	r3, [pc, #272]	@ (800121c <MX_GPIO_Init+0x17c>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD1_Pin|SYSTEM_LED_Pin|LD2_Pin|LD3_Pin
 8001116:	2200      	movs	r2, #0
 8001118:	f641 01f0 	movw	r1, #6384	@ 0x18f0
 800111c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001120:	f002 fc5a 	bl	80039d8 <HAL_GPIO_WritePin>
                          |MOTORX_Pin|MOTORY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	2101      	movs	r1, #1
 8001128:	483d      	ldr	r0, [pc, #244]	@ (8001220 <MX_GPIO_Init+0x180>)
 800112a:	f002 fc55 	bl	80039d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001134:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001138:	f002 fc4e 	bl	80039d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ROW_2_Pin|ROW_4_Pin|ROW_3_Pin, GPIO_PIN_SET);
 800113c:	2201      	movs	r2, #1
 800113e:	2138      	movs	r1, #56	@ 0x38
 8001140:	4837      	ldr	r0, [pc, #220]	@ (8001220 <MX_GPIO_Init+0x180>)
 8001142:	f002 fc49 	bl	80039d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001146:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800114a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800114c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	4831      	ldr	r0, [pc, #196]	@ (8001224 <MX_GPIO_Init+0x184>)
 800115e:	f002 fa79 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin SYSTEM_LED_Pin LD2_Pin LD3_Pin
                           ROW_1_Pin MOTORX_Pin MOTORY_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|SYSTEM_LED_Pin|LD2_Pin|LD3_Pin
 8001162:	f641 43f0 	movw	r3, #7408	@ 0x1cf0
 8001166:	617b      	str	r3, [r7, #20]
                          |ROW_1_Pin|MOTORX_Pin|MOTORY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	2301      	movs	r3, #1
 800116a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800117e:	f002 fa69 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin ROW_2_Pin ROW_4_Pin ROW_3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|ROW_2_Pin|ROW_4_Pin|ROW_3_Pin;
 8001182:	2339      	movs	r3, #57	@ 0x39
 8001184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001186:	2301      	movs	r3, #1
 8001188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	4619      	mov	r1, r3
 8001198:	4821      	ldr	r0, [pc, #132]	@ (8001220 <MX_GPIO_Init+0x180>)
 800119a:	f002 fa5b 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pin : COL_1_Pin */
  GPIO_InitStruct.Pin = COL_1_Pin;
 800119e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011aa:	2302      	movs	r3, #2
 80011ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COL_1_GPIO_Port, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	481a      	ldr	r0, [pc, #104]	@ (8001220 <MX_GPIO_Init+0x180>)
 80011b6:	f002 fa4d 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pin : COL_4_Pin */
  GPIO_InitStruct.Pin = COL_4_Pin;
 80011ba:	2380      	movs	r3, #128	@ 0x80
 80011bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011c4:	2302      	movs	r3, #2
 80011c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COL_4_GPIO_Port, &GPIO_InitStruct);
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4619      	mov	r1, r3
 80011ce:	4815      	ldr	r0, [pc, #84]	@ (8001224 <MX_GPIO_Init+0x184>)
 80011d0:	f002 fa40 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL_2_Pin COL_3_Pin */
  GPIO_InitStruct.Pin = COL_2_Pin|COL_3_Pin;
 80011d4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011e0:	2302      	movs	r3, #2
 80011e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4619      	mov	r1, r3
 80011ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ee:	f002 fa31 	bl	8003654 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	2017      	movs	r0, #23
 80011f8:	f002 f977 	bl	80034ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011fc:	2017      	movs	r0, #23
 80011fe:	f002 f990 	bl	8003522 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	2028      	movs	r0, #40	@ 0x28
 8001208:	f002 f96f 	bl	80034ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800120c:	2028      	movs	r0, #40	@ 0x28
 800120e:	f002 f988 	bl	8003522 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001212:	bf00      	nop
 8001214:	3728      	adds	r7, #40	@ 0x28
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000
 8001220:	48000400 	.word	0x48000400
 8001224:	48000800 	.word	0x48000800

08001228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800122c:	b672      	cpsid	i
}
 800122e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <Error_Handler+0x8>

08001234 <ring_buffer_init>:

#include "ring_buffer.h"


void ring_buffer_init(ring_buffer_t *rb, uint8_t *mem_add, uint8_t cap)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	4613      	mov	r3, r2
 8001240:	71fb      	strb	r3, [r7, #7]
	rb->buffer = mem_add;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	68ba      	ldr	r2, [r7, #8]
 8001246:	601a      	str	r2, [r3, #0]
	rb->capacity = cap;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	79fa      	ldrb	r2, [r7, #7]
 800124c:	71da      	strb	r2, [r3, #7]

	ring_buffer_reset(rb);
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f000 f804 	bl	800125c <ring_buffer_reset>
}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <ring_buffer_reset>:
 * @brief Esta funcion reinicia los datos disponibles en el buffer
 *
 * @retval size: cantidad de datos disponibles
 */
void ring_buffer_reset(ring_buffer_t *rb)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	rb->head = 0;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	711a      	strb	r2, [r3, #4]
	rb->tail = 0;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	715a      	strb	r2, [r3, #5]
	rb->is_full = 0;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	719a      	strb	r2, [r3, #6]
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <ring_buffer_write>:
 * @param data: el dato que se va a escribir
 *
 * @retval Ninguno
 */
void ring_buffer_write(ring_buffer_t *rb, uint8_t data)
{
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	460b      	mov	r3, r1
 800128c:	70fb      	strb	r3, [r7, #3]
	rb->buffer[rb->head] = data;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	7912      	ldrb	r2, [r2, #4]
 8001296:	4413      	add	r3, r2
 8001298:	78fa      	ldrb	r2, [r7, #3]
 800129a:	701a      	strb	r2, [r3, #0]
	rb->head = rb->head + 1;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	791b      	ldrb	r3, [r3, #4]
 80012a0:	3301      	adds	r3, #1
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	711a      	strb	r2, [r3, #4]

	if (rb->head >= rb->capacity) { // si la cabeza llega al final de la memoria
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	791a      	ldrb	r2, [r3, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	79db      	ldrb	r3, [r3, #7]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d302      	bcc.n	80012ba <ring_buffer_write+0x38>
		rb->head = 0;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	711a      	strb	r2, [r3, #4]
	}

	if (rb->is_full != 0) { // si se pierden datos viejos
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	799b      	ldrb	r3, [r3, #6]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d005      	beq.n	80012ce <ring_buffer_write+0x4c>
		rb->tail = rb->tail + 1;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	795b      	ldrb	r3, [r3, #5]
 80012c6:	3301      	adds	r3, #1
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	715a      	strb	r2, [r3, #5]
	}

	if (rb->tail >= rb->capacity) { // si la cola llega al final de la memoria
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	795a      	ldrb	r2, [r3, #5]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	79db      	ldrb	r3, [r3, #7]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d302      	bcc.n	80012e0 <ring_buffer_write+0x5e>
		rb->tail = 0;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	715a      	strb	r2, [r3, #5]
	}

	if (rb->head == rb->tail) { // si la cabeza alcanza la cola
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	791a      	ldrb	r2, [r3, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	795b      	ldrb	r3, [r3, #5]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d102      	bne.n	80012f2 <ring_buffer_write+0x70>
		rb->is_full = 1;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2201      	movs	r2, #1
 80012f0:	719a      	strb	r2, [r3, #6]
	}
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <ring_buffer_read>:
 * @param data: la direccion de donde se va a escribir el dato
 *
 * @retval 1: hay datos disponibles, 0: no hay datos
 */
uint8_t ring_buffer_read(ring_buffer_t *rb, uint8_t *data) // 0x20
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]
	if ((rb->is_full != 0) || (rb->head != rb->tail)) { // data available
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	799b      	ldrb	r3, [r3, #6]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d105      	bne.n	800131c <ring_buffer_read+0x1e>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	791a      	ldrb	r2, [r3, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	795b      	ldrb	r3, [r3, #5]
 8001318:	429a      	cmp	r2, r3
 800131a:	d01b      	beq.n	8001354 <ring_buffer_read+0x56>
		*data = rb->buffer[rb->tail]; // add: 0x20, val: buffer
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	7952      	ldrb	r2, [r2, #5]
 8001324:	4413      	add	r3, r2
 8001326:	781a      	ldrb	r2, [r3, #0]
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	701a      	strb	r2, [r3, #0]
		rb->tail = rb->tail + 1;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	795b      	ldrb	r3, [r3, #5]
 8001330:	3301      	adds	r3, #1
 8001332:	b2da      	uxtb	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	715a      	strb	r2, [r3, #5]
		if (rb->tail >= rb->capacity) {
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	795a      	ldrb	r2, [r3, #5]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	79db      	ldrb	r3, [r3, #7]
 8001340:	429a      	cmp	r2, r3
 8001342:	d302      	bcc.n	800134a <ring_buffer_read+0x4c>
			rb->tail = 0;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	715a      	strb	r2, [r3, #5]
		}
		rb->is_full = 0;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	719a      	strb	r2, [r3, #6]

		return 1; // buffer con datos
 8001350:	2301      	movs	r3, #1
 8001352:	e000      	b.n	8001356 <ring_buffer_read+0x58>
	}
	return 0; // buffer vacio
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
	...

08001364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136a:	4b12      	ldr	r3, [pc, #72]	@ (80013b4 <HAL_MspInit+0x50>)
 800136c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800136e:	4a11      	ldr	r2, [pc, #68]	@ (80013b4 <HAL_MspInit+0x50>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6613      	str	r3, [r2, #96]	@ 0x60
 8001376:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <HAL_MspInit+0x50>)
 8001378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <HAL_MspInit+0x50>)
 8001384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001386:	4a0b      	ldr	r2, [pc, #44]	@ (80013b4 <HAL_MspInit+0x50>)
 8001388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800138c:	6593      	str	r3, [r2, #88]	@ 0x58
 800138e:	4b09      	ldr	r3, [pc, #36]	@ (80013b4 <HAL_MspInit+0x50>)
 8001390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001396:	603b      	str	r3, [r7, #0]
 8001398:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2100      	movs	r1, #0
 800139e:	2051      	movs	r0, #81	@ 0x51
 80013a0:	f002 f8a3 	bl	80034ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80013a4:	2051      	movs	r0, #81	@ 0x51
 80013a6:	f002 f8bc 	bl	8003522 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40021000 	.word	0x40021000

080013b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08c      	sub	sp, #48	@ 0x30
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 031c 	add.w	r3, r7, #28
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a3c      	ldr	r2, [pc, #240]	@ (80014c8 <HAL_ADC_MspInit+0x110>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d136      	bne.n	8001448 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80013da:	4b3c      	ldr	r3, [pc, #240]	@ (80014cc <HAL_ADC_MspInit+0x114>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	3301      	adds	r3, #1
 80013e0:	4a3a      	ldr	r2, [pc, #232]	@ (80014cc <HAL_ADC_MspInit+0x114>)
 80013e2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80013e4:	4b39      	ldr	r3, [pc, #228]	@ (80014cc <HAL_ADC_MspInit+0x114>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d10b      	bne.n	8001404 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80013ec:	4b38      	ldr	r3, [pc, #224]	@ (80014d0 <HAL_ADC_MspInit+0x118>)
 80013ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f0:	4a37      	ldr	r2, [pc, #220]	@ (80014d0 <HAL_ADC_MspInit+0x118>)
 80013f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f8:	4b35      	ldr	r3, [pc, #212]	@ (80014d0 <HAL_ADC_MspInit+0x118>)
 80013fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001400:	61bb      	str	r3, [r7, #24]
 8001402:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001404:	4b32      	ldr	r3, [pc, #200]	@ (80014d0 <HAL_ADC_MspInit+0x118>)
 8001406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001408:	4a31      	ldr	r2, [pc, #196]	@ (80014d0 <HAL_ADC_MspInit+0x118>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001410:	4b2f      	ldr	r3, [pc, #188]	@ (80014d0 <HAL_ADC_MspInit+0x118>)
 8001412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800141c:	2301      	movs	r3, #1
 800141e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001420:	230b      	movs	r3, #11
 8001422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	4619      	mov	r1, r3
 800142e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001432:	f002 f90f 	bl	8003654 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2100      	movs	r1, #0
 800143a:	2012      	movs	r0, #18
 800143c:	f002 f855 	bl	80034ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001440:	2012      	movs	r0, #18
 8001442:	f002 f86e 	bl	8003522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001446:	e03a      	b.n	80014be <HAL_ADC_MspInit+0x106>
  else if(hadc->Instance==ADC2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a21      	ldr	r2, [pc, #132]	@ (80014d4 <HAL_ADC_MspInit+0x11c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d135      	bne.n	80014be <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001452:	4b1e      	ldr	r3, [pc, #120]	@ (80014cc <HAL_ADC_MspInit+0x114>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	3301      	adds	r3, #1
 8001458:	4a1c      	ldr	r2, [pc, #112]	@ (80014cc <HAL_ADC_MspInit+0x114>)
 800145a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800145c:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <HAL_ADC_MspInit+0x114>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d10b      	bne.n	800147c <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001464:	4b1a      	ldr	r3, [pc, #104]	@ (80014d0 <HAL_ADC_MspInit+0x118>)
 8001466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001468:	4a19      	ldr	r2, [pc, #100]	@ (80014d0 <HAL_ADC_MspInit+0x118>)
 800146a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800146e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001470:	4b17      	ldr	r3, [pc, #92]	@ (80014d0 <HAL_ADC_MspInit+0x118>)
 8001472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001474:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147c:	4b14      	ldr	r3, [pc, #80]	@ (80014d0 <HAL_ADC_MspInit+0x118>)
 800147e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001480:	4a13      	ldr	r2, [pc, #76]	@ (80014d0 <HAL_ADC_MspInit+0x118>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001488:	4b11      	ldr	r3, [pc, #68]	@ (80014d0 <HAL_ADC_MspInit+0x118>)
 800148a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001494:	2302      	movs	r3, #2
 8001496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001498:	230b      	movs	r3, #11
 800149a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a0:	f107 031c 	add.w	r3, r7, #28
 80014a4:	4619      	mov	r1, r3
 80014a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014aa:	f002 f8d3 	bl	8003654 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	2012      	movs	r0, #18
 80014b4:	f002 f819 	bl	80034ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80014b8:	2012      	movs	r0, #18
 80014ba:	f002 f832 	bl	8003522 <HAL_NVIC_EnableIRQ>
}
 80014be:	bf00      	nop
 80014c0:	3730      	adds	r7, #48	@ 0x30
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	50040000 	.word	0x50040000
 80014cc:	20000288 	.word	0x20000288
 80014d0:	40021000 	.word	0x40021000
 80014d4:	50040100 	.word	0x50040100

080014d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b0ac      	sub	sp, #176	@ 0xb0
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	2288      	movs	r2, #136	@ 0x88
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f006 f811 	bl	8007520 <memset>
  if(hi2c->Instance==I2C1)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a21      	ldr	r2, [pc, #132]	@ (8001588 <HAL_I2C_MspInit+0xb0>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d13b      	bne.n	8001580 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001508:	2340      	movs	r3, #64	@ 0x40
 800150a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800150c:	2300      	movs	r3, #0
 800150e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4618      	mov	r0, r3
 8001516:	f003 fdc3 	bl	80050a0 <HAL_RCCEx_PeriphCLKConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001520:	f7ff fe82 	bl	8001228 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001524:	4b19      	ldr	r3, [pc, #100]	@ (800158c <HAL_I2C_MspInit+0xb4>)
 8001526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001528:	4a18      	ldr	r2, [pc, #96]	@ (800158c <HAL_I2C_MspInit+0xb4>)
 800152a:	f043 0302 	orr.w	r3, r3, #2
 800152e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001530:	4b16      	ldr	r3, [pc, #88]	@ (800158c <HAL_I2C_MspInit+0xb4>)
 8001532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800153c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001540:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001544:	2312      	movs	r3, #18
 8001546:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001550:	2303      	movs	r3, #3
 8001552:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001556:	2304      	movs	r3, #4
 8001558:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001560:	4619      	mov	r1, r3
 8001562:	480b      	ldr	r0, [pc, #44]	@ (8001590 <HAL_I2C_MspInit+0xb8>)
 8001564:	f002 f876 	bl	8003654 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001568:	4b08      	ldr	r3, [pc, #32]	@ (800158c <HAL_I2C_MspInit+0xb4>)
 800156a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156c:	4a07      	ldr	r2, [pc, #28]	@ (800158c <HAL_I2C_MspInit+0xb4>)
 800156e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001572:	6593      	str	r3, [r2, #88]	@ 0x58
 8001574:	4b05      	ldr	r3, [pc, #20]	@ (800158c <HAL_I2C_MspInit+0xb4>)
 8001576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001578:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001580:	bf00      	nop
 8001582:	37b0      	adds	r7, #176	@ 0xb0
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40005400 	.word	0x40005400
 800158c:	40021000 	.word	0x40021000
 8001590:	48000400 	.word	0x48000400

08001594 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b0ac      	sub	sp, #176	@ 0xb0
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	2288      	movs	r2, #136	@ 0x88
 80015b2:	2100      	movs	r1, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f005 ffb3 	bl	8007520 <memset>
  if(huart->Instance==USART2)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a25      	ldr	r2, [pc, #148]	@ (8001654 <HAL_UART_MspInit+0xc0>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d143      	bne.n	800164c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015c4:	2302      	movs	r3, #2
 80015c6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	4618      	mov	r0, r3
 80015d2:	f003 fd65 	bl	80050a0 <HAL_RCCEx_PeriphCLKConfig>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015dc:	f7ff fe24 	bl	8001228 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001658 <HAL_UART_MspInit+0xc4>)
 80015e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001658 <HAL_UART_MspInit+0xc4>)
 80015e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80015ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001658 <HAL_UART_MspInit+0xc4>)
 80015ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f8:	4b17      	ldr	r3, [pc, #92]	@ (8001658 <HAL_UART_MspInit+0xc4>)
 80015fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fc:	4a16      	ldr	r2, [pc, #88]	@ (8001658 <HAL_UART_MspInit+0xc4>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001604:	4b14      	ldr	r3, [pc, #80]	@ (8001658 <HAL_UART_MspInit+0xc4>)
 8001606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001610:	230c      	movs	r3, #12
 8001612:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001622:	2303      	movs	r3, #3
 8001624:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001628:	2307      	movs	r3, #7
 800162a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001632:	4619      	mov	r1, r3
 8001634:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001638:	f002 f80c 	bl	8003654 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	2100      	movs	r1, #0
 8001640:	2026      	movs	r0, #38	@ 0x26
 8001642:	f001 ff52 	bl	80034ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001646:	2026      	movs	r0, #38	@ 0x26
 8001648:	f001 ff6b 	bl	8003522 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800164c:	bf00      	nop
 800164e:	37b0      	adds	r7, #176	@ 0xb0
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40004400 	.word	0x40004400
 8001658:	40021000 	.word	0x40021000

0800165c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <NMI_Handler+0x4>

08001664 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <HardFault_Handler+0x4>

0800166c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <MemManage_Handler+0x4>

08001674 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <BusFault_Handler+0x4>

0800167c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <UsageFault_Handler+0x4>

08001684 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b2:	f000 f95d 	bl	8001970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80016c0:	4803      	ldr	r0, [pc, #12]	@ (80016d0 <ADC1_2_IRQHandler+0x14>)
 80016c2:	f000 fe7f 	bl	80023c4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80016c6:	4803      	ldr	r0, [pc, #12]	@ (80016d4 <ADC1_2_IRQHandler+0x18>)
 80016c8:	f000 fe7c 	bl	80023c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	2000009c 	.word	0x2000009c
 80016d4:	20000100 	.word	0x20000100

080016d8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_4_Pin);
 80016dc:	2080      	movs	r0, #128	@ 0x80
 80016de:	f002 f9ad 	bl	8003a3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL_2_Pin);
 80016e2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80016e6:	f002 f9a9 	bl	8003a3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL_3_Pin);
 80016ea:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80016ee:	f002 f9a5 	bl	8003a3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016fc:	4802      	ldr	r0, [pc, #8]	@ (8001708 <USART2_IRQHandler+0x10>)
 80016fe:	f004 fa63 	bl	8005bc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200001b8 	.word	0x200001b8

0800170c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_1_Pin);
 8001710:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001714:	f002 f992 	bl	8003a3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001718:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800171c:	f002 f98e 	bl	8003a3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}

08001724 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	e00a      	b.n	800175a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001744:	f3af 8000 	nop.w
 8001748:	4601      	mov	r1, r0
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	1c5a      	adds	r2, r3, #1
 800174e:	60ba      	str	r2, [r7, #8]
 8001750:	b2ca      	uxtb	r2, r1
 8001752:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	3301      	adds	r3, #1
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	429a      	cmp	r2, r3
 8001760:	dbf0      	blt.n	8001744 <_read+0x12>
  }

  return len;
 8001762:	687b      	ldr	r3, [r7, #4]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <_close>:
  }
  return len;
}

int _close(int file)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001774:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001778:	4618      	mov	r0, r3
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001794:	605a      	str	r2, [r3, #4]
  return 0;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <_isatty>:

int _isatty(int file)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017ac:	2301      	movs	r3, #1
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b085      	sub	sp, #20
 80017be:	af00      	add	r7, sp, #0
 80017c0:	60f8      	str	r0, [r7, #12]
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017dc:	4a14      	ldr	r2, [pc, #80]	@ (8001830 <_sbrk+0x5c>)
 80017de:	4b15      	ldr	r3, [pc, #84]	@ (8001834 <_sbrk+0x60>)
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e8:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <_sbrk+0x64>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d102      	bne.n	80017f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f0:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <_sbrk+0x64>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	@ (800183c <_sbrk+0x68>)
 80017f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017f6:	4b10      	ldr	r3, [pc, #64]	@ (8001838 <_sbrk+0x64>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	429a      	cmp	r2, r3
 8001802:	d207      	bcs.n	8001814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001804:	f005 feda 	bl	80075bc <__errno>
 8001808:	4603      	mov	r3, r0
 800180a:	220c      	movs	r2, #12
 800180c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800180e:	f04f 33ff 	mov.w	r3, #4294967295
 8001812:	e009      	b.n	8001828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001814:	4b08      	ldr	r3, [pc, #32]	@ (8001838 <_sbrk+0x64>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800181a:	4b07      	ldr	r3, [pc, #28]	@ (8001838 <_sbrk+0x64>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	4a05      	ldr	r2, [pc, #20]	@ (8001838 <_sbrk+0x64>)
 8001824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001826:	68fb      	ldr	r3, [r7, #12]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20018000 	.word	0x20018000
 8001834:	00000400 	.word	0x00000400
 8001838:	2000028c 	.word	0x2000028c
 800183c:	200007e8 	.word	0x200007e8

08001840 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001844:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <SystemInit+0x20>)
 8001846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800184a:	4a05      	ldr	r2, [pc, #20]	@ (8001860 <SystemInit+0x20>)
 800184c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001850:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001864:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800189c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001868:	f7ff ffea 	bl	8001840 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800186c:	480c      	ldr	r0, [pc, #48]	@ (80018a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800186e:	490d      	ldr	r1, [pc, #52]	@ (80018a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001870:	4a0d      	ldr	r2, [pc, #52]	@ (80018a8 <LoopForever+0xe>)
  movs r3, #0
 8001872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001874:	e002      	b.n	800187c <LoopCopyDataInit>

08001876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187a:	3304      	adds	r3, #4

0800187c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800187c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800187e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001880:	d3f9      	bcc.n	8001876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001882:	4a0a      	ldr	r2, [pc, #40]	@ (80018ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001884:	4c0a      	ldr	r4, [pc, #40]	@ (80018b0 <LoopForever+0x16>)
  movs r3, #0
 8001886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001888:	e001      	b.n	800188e <LoopFillZerobss>

0800188a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800188c:	3204      	adds	r2, #4

0800188e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800188e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001890:	d3fb      	bcc.n	800188a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001892:	f005 fe99 	bl	80075c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001896:	f7ff f881 	bl	800099c <main>

0800189a <LoopForever>:

LoopForever:
    b LoopForever
 800189a:	e7fe      	b.n	800189a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800189c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80018a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80018a8:	080096f0 	.word	0x080096f0
  ldr r2, =_sbss
 80018ac:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80018b0:	200007e8 	.word	0x200007e8

080018b4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018b4:	e7fe      	b.n	80018b4 <ADC3_IRQHandler>
	...

080018b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c2:	4b0c      	ldr	r3, [pc, #48]	@ (80018f4 <HAL_Init+0x3c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a0b      	ldr	r2, [pc, #44]	@ (80018f4 <HAL_Init+0x3c>)
 80018c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018cc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ce:	2003      	movs	r0, #3
 80018d0:	f001 fe00 	bl	80034d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018d4:	2000      	movs	r0, #0
 80018d6:	f000 f80f 	bl	80018f8 <HAL_InitTick>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d002      	beq.n	80018e6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	71fb      	strb	r3, [r7, #7]
 80018e4:	e001      	b.n	80018ea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018e6:	f7ff fd3d 	bl	8001364 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018ea:	79fb      	ldrb	r3, [r7, #7]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40022000 	.word	0x40022000

080018f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001904:	4b17      	ldr	r3, [pc, #92]	@ (8001964 <HAL_InitTick+0x6c>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d023      	beq.n	8001954 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800190c:	4b16      	ldr	r3, [pc, #88]	@ (8001968 <HAL_InitTick+0x70>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b14      	ldr	r3, [pc, #80]	@ (8001964 <HAL_InitTick+0x6c>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	4619      	mov	r1, r3
 8001916:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800191a:	fbb3 f3f1 	udiv	r3, r3, r1
 800191e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001922:	4618      	mov	r0, r3
 8001924:	f001 fe0b 	bl	800353e <HAL_SYSTICK_Config>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10f      	bne.n	800194e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b0f      	cmp	r3, #15
 8001932:	d809      	bhi.n	8001948 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001934:	2200      	movs	r2, #0
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	f04f 30ff 	mov.w	r0, #4294967295
 800193c:	f001 fdd5 	bl	80034ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001940:	4a0a      	ldr	r2, [pc, #40]	@ (800196c <HAL_InitTick+0x74>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	e007      	b.n	8001958 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	73fb      	strb	r3, [r7, #15]
 800194c:	e004      	b.n	8001958 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	e001      	b.n	8001958 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001958:	7bfb      	ldrb	r3, [r7, #15]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	2000001c 	.word	0x2000001c
 8001968:	20000014 	.word	0x20000014
 800196c:	20000018 	.word	0x20000018

08001970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001974:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <HAL_IncTick+0x20>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <HAL_IncTick+0x24>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4413      	add	r3, r2
 8001980:	4a04      	ldr	r2, [pc, #16]	@ (8001994 <HAL_IncTick+0x24>)
 8001982:	6013      	str	r3, [r2, #0]
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	2000001c 	.word	0x2000001c
 8001994:	20000290 	.word	0x20000290

08001998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return uwTick;
 800199c:	4b03      	ldr	r3, [pc, #12]	@ (80019ac <HAL_GetTick+0x14>)
 800199e:	681b      	ldr	r3, [r3, #0]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	20000290 	.word	0x20000290

080019b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b8:	f7ff ffee 	bl	8001998 <HAL_GetTick>
 80019bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c8:	d005      	beq.n	80019d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019ca:	4b0a      	ldr	r3, [pc, #40]	@ (80019f4 <HAL_Delay+0x44>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4413      	add	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019d6:	bf00      	nop
 80019d8:	f7ff ffde 	bl	8001998 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d8f7      	bhi.n	80019d8 <HAL_Delay+0x28>
  {
  }
}
 80019e8:	bf00      	nop
 80019ea:	bf00      	nop
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	2000001c 	.word	0x2000001c

080019f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	609a      	str	r2, [r3, #8]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	609a      	str	r2, [r3, #8]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b087      	sub	sp, #28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
 8001a6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	3360      	adds	r3, #96	@ 0x60
 8001a72:	461a      	mov	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <LL_ADC_SetOffset+0x44>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a98:	bf00      	nop
 8001a9a:	371c      	adds	r7, #28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	03fff000 	.word	0x03fff000

08001aa8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3360      	adds	r3, #96	@ 0x60
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b087      	sub	sp, #28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	3360      	adds	r3, #96	@ 0x60
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	431a      	orrs	r2, r3
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001afe:	bf00      	nop
 8001b00:	371c      	adds	r7, #28
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b087      	sub	sp, #28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	3330      	adds	r3, #48	@ 0x30
 8001b40:	461a      	mov	r2, r3
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	0a1b      	lsrs	r3, r3, #8
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	f003 030c 	and.w	r3, r3, #12
 8001b4c:	4413      	add	r3, r2
 8001b4e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	f003 031f 	and.w	r3, r3, #31
 8001b5a:	211f      	movs	r1, #31
 8001b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	401a      	ands	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	0e9b      	lsrs	r3, r3, #26
 8001b68:	f003 011f 	and.w	r1, r3, #31
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	f003 031f 	and.w	r3, r3, #31
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	431a      	orrs	r2, r3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b7c:	bf00      	nop
 8001b7e:	371c      	adds	r7, #28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b94:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b087      	sub	sp, #28
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	3314      	adds	r3, #20
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	0e5b      	lsrs	r3, r3, #25
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	4413      	add	r3, r2
 8001bcc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	0d1b      	lsrs	r3, r3, #20
 8001bd6:	f003 031f 	and.w	r3, r3, #31
 8001bda:	2107      	movs	r1, #7
 8001bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	401a      	ands	r2, r3
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	0d1b      	lsrs	r3, r3, #20
 8001be8:	f003 031f 	and.w	r3, r3, #31
 8001bec:	6879      	ldr	r1, [r7, #4]
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001bf8:	bf00      	nop
 8001bfa:	371c      	adds	r7, #28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	401a      	ands	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f003 0318 	and.w	r3, r3, #24
 8001c26:	4908      	ldr	r1, [pc, #32]	@ (8001c48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c28:	40d9      	lsrs	r1, r3
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	400b      	ands	r3, r1
 8001c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c32:	431a      	orrs	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c3a:	bf00      	nop
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	0007ffff 	.word	0x0007ffff

08001c4c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 031f 	and.w	r3, r3, #31
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6093      	str	r3, [r2, #8]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001cbc:	d101      	bne.n	8001cc2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001ce0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ce4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d0c:	d101      	bne.n	8001d12 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d34:	f043 0201 	orr.w	r2, r3, #1
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <LL_ADC_IsEnabled+0x18>
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e000      	b.n	8001d62 <LL_ADC_IsEnabled+0x1a>
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d7e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d82:	f043 0204 	orr.w	r2, r3, #4
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d101      	bne.n	8001dae <LL_ADC_REG_IsConversionOngoing+0x18>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	d101      	bne.n	8001dd4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e000      	b.n	8001dd6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001de4:	b590      	push	{r4, r7, lr}
 8001de6:	b089      	sub	sp, #36	@ 0x24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dec:	2300      	movs	r3, #0
 8001dee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e130      	b.n	8002060 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d109      	bne.n	8001e20 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff fad3 	bl	80013b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ff3f 	bl	8001ca8 <LL_ADC_IsDeepPowerDownEnabled>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d004      	beq.n	8001e3a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ff25 	bl	8001c84 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff ff5a 	bl	8001cf8 <LL_ADC_IsInternalRegulatorEnabled>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d115      	bne.n	8001e76 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff ff3e 	bl	8001cd0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e54:	4b84      	ldr	r3, [pc, #528]	@ (8002068 <HAL_ADC_Init+0x284>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	099b      	lsrs	r3, r3, #6
 8001e5a:	4a84      	ldr	r2, [pc, #528]	@ (800206c <HAL_ADC_Init+0x288>)
 8001e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e60:	099b      	lsrs	r3, r3, #6
 8001e62:	3301      	adds	r3, #1
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e68:	e002      	b.n	8001e70 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f9      	bne.n	8001e6a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff ff3c 	bl	8001cf8 <LL_ADC_IsInternalRegulatorEnabled>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10d      	bne.n	8001ea2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e8a:	f043 0210 	orr.w	r2, r3, #16
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e96:	f043 0201 	orr.w	r2, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff ff75 	bl	8001d96 <LL_ADC_REG_IsConversionOngoing>
 8001eac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eb2:	f003 0310 	and.w	r3, r3, #16
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f040 80c9 	bne.w	800204e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f040 80c5 	bne.w	800204e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001ecc:	f043 0202 	orr.w	r2, r3, #2
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff35 	bl	8001d48 <LL_ADC_IsEnabled>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d115      	bne.n	8001f10 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ee4:	4862      	ldr	r0, [pc, #392]	@ (8002070 <HAL_ADC_Init+0x28c>)
 8001ee6:	f7ff ff2f 	bl	8001d48 <LL_ADC_IsEnabled>
 8001eea:	4604      	mov	r4, r0
 8001eec:	4861      	ldr	r0, [pc, #388]	@ (8002074 <HAL_ADC_Init+0x290>)
 8001eee:	f7ff ff2b 	bl	8001d48 <LL_ADC_IsEnabled>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	431c      	orrs	r4, r3
 8001ef6:	4860      	ldr	r0, [pc, #384]	@ (8002078 <HAL_ADC_Init+0x294>)
 8001ef8:	f7ff ff26 	bl	8001d48 <LL_ADC_IsEnabled>
 8001efc:	4603      	mov	r3, r0
 8001efe:	4323      	orrs	r3, r4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d105      	bne.n	8001f10 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	485c      	ldr	r0, [pc, #368]	@ (800207c <HAL_ADC_Init+0x298>)
 8001f0c:	f7ff fd74 	bl	80019f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	7e5b      	ldrb	r3, [r3, #25]
 8001f14:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f1a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f20:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f26:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f2e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d106      	bne.n	8001f4c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f42:	3b01      	subs	r3, #1
 8001f44:	045b      	lsls	r3, r3, #17
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d009      	beq.n	8001f68 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f58:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f60:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	4b44      	ldr	r3, [pc, #272]	@ (8002080 <HAL_ADC_Init+0x29c>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	69b9      	ldr	r1, [r7, #24]
 8001f78:	430b      	orrs	r3, r1
 8001f7a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff ff1b 	bl	8001dbc <LL_ADC_INJ_IsConversionOngoing>
 8001f86:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d13d      	bne.n	800200a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d13a      	bne.n	800200a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f98:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001fa0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001fb0:	f023 0302 	bic.w	r3, r3, #2
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	69b9      	ldr	r1, [r7, #24]
 8001fba:	430b      	orrs	r3, r1
 8001fbc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d118      	bne.n	8001ffa <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001fd2:	f023 0304 	bic.w	r3, r3, #4
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001fde:	4311      	orrs	r1, r2
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001fe4:	4311      	orrs	r1, r2
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001fea:	430a      	orrs	r2, r1
 8001fec:	431a      	orrs	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0201 	orr.w	r2, r2, #1
 8001ff6:	611a      	str	r2, [r3, #16]
 8001ff8:	e007      	b.n	800200a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	691a      	ldr	r2, [r3, #16]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0201 	bic.w	r2, r2, #1
 8002008:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d10c      	bne.n	800202c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002018:	f023 010f 	bic.w	r1, r3, #15
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	1e5a      	subs	r2, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	631a      	str	r2, [r3, #48]	@ 0x30
 800202a:	e007      	b.n	800203c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 020f 	bic.w	r2, r2, #15
 800203a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002040:	f023 0303 	bic.w	r3, r3, #3
 8002044:	f043 0201 	orr.w	r2, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	655a      	str	r2, [r3, #84]	@ 0x54
 800204c:	e007      	b.n	800205e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002052:	f043 0210 	orr.w	r2, r3, #16
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800205e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3724      	adds	r7, #36	@ 0x24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd90      	pop	{r4, r7, pc}
 8002068:	20000014 	.word	0x20000014
 800206c:	053e2d63 	.word	0x053e2d63
 8002070:	50040000 	.word	0x50040000
 8002074:	50040100 	.word	0x50040100
 8002078:	50040200 	.word	0x50040200
 800207c:	50040300 	.word	0x50040300
 8002080:	fff0c007 	.word	0xfff0c007

08002084 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800208c:	4857      	ldr	r0, [pc, #348]	@ (80021ec <HAL_ADC_Start+0x168>)
 800208e:	f7ff fddd 	bl	8001c4c <LL_ADC_GetMultimode>
 8002092:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff fe7c 	bl	8001d96 <LL_ADC_REG_IsConversionOngoing>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f040 809c 	bne.w	80021de <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_ADC_Start+0x30>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e097      	b.n	80021e4 <HAL_ADC_Start+0x160>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 ffab 	bl	8003018 <ADC_Enable>
 80020c2:	4603      	mov	r3, r0
 80020c4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80020c6:	7dfb      	ldrb	r3, [r7, #23]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f040 8083 	bne.w	80021d4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020d6:	f023 0301 	bic.w	r3, r3, #1
 80020da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a42      	ldr	r2, [pc, #264]	@ (80021f0 <HAL_ADC_Start+0x16c>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d002      	beq.n	80020f2 <HAL_ADC_Start+0x6e>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	e000      	b.n	80020f4 <HAL_ADC_Start+0x70>
 80020f2:	4b40      	ldr	r3, [pc, #256]	@ (80021f4 <HAL_ADC_Start+0x170>)
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d002      	beq.n	8002102 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d105      	bne.n	800210e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002106:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002112:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002116:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800211a:	d106      	bne.n	800212a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002120:	f023 0206 	bic.w	r2, r3, #6
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	659a      	str	r2, [r3, #88]	@ 0x58
 8002128:	e002      	b.n	8002130 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	221c      	movs	r2, #28
 8002136:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a2a      	ldr	r2, [pc, #168]	@ (80021f0 <HAL_ADC_Start+0x16c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d002      	beq.n	8002150 <HAL_ADC_Start+0xcc>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	e000      	b.n	8002152 <HAL_ADC_Start+0xce>
 8002150:	4b28      	ldr	r3, [pc, #160]	@ (80021f4 <HAL_ADC_Start+0x170>)
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	4293      	cmp	r3, r2
 8002158:	d008      	beq.n	800216c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	2b05      	cmp	r3, #5
 8002164:	d002      	beq.n	800216c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	2b09      	cmp	r3, #9
 800216a:	d114      	bne.n	8002196 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d007      	beq.n	800218a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800217e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002182:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff fded 	bl	8001d6e <LL_ADC_REG_StartConversion>
 8002194:	e025      	b.n	80021e2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800219a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a12      	ldr	r2, [pc, #72]	@ (80021f0 <HAL_ADC_Start+0x16c>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d002      	beq.n	80021b2 <HAL_ADC_Start+0x12e>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	e000      	b.n	80021b4 <HAL_ADC_Start+0x130>
 80021b2:	4b10      	ldr	r3, [pc, #64]	@ (80021f4 <HAL_ADC_Start+0x170>)
 80021b4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00f      	beq.n	80021e2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021ca:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	655a      	str	r2, [r3, #84]	@ 0x54
 80021d2:	e006      	b.n	80021e2 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80021dc:	e001      	b.n	80021e2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021de:	2302      	movs	r3, #2
 80021e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80021e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	50040300 	.word	0x50040300
 80021f0:	50040100 	.word	0x50040100
 80021f4:	50040000 	.word	0x50040000

080021f8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002202:	4866      	ldr	r0, [pc, #408]	@ (800239c <HAL_ADC_PollForConversion+0x1a4>)
 8002204:	f7ff fd22 	bl	8001c4c <LL_ADC_GetMultimode>
 8002208:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	2b08      	cmp	r3, #8
 8002210:	d102      	bne.n	8002218 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002212:	2308      	movs	r3, #8
 8002214:	61fb      	str	r3, [r7, #28]
 8002216:	e02a      	b.n	800226e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d005      	beq.n	800222a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	2b05      	cmp	r3, #5
 8002222:	d002      	beq.n	800222a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	2b09      	cmp	r3, #9
 8002228:	d111      	bne.n	800224e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	d007      	beq.n	8002248 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800223c:	f043 0220 	orr.w	r2, r3, #32
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e0a4      	b.n	8002392 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002248:	2304      	movs	r3, #4
 800224a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800224c:	e00f      	b.n	800226e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800224e:	4853      	ldr	r0, [pc, #332]	@ (800239c <HAL_ADC_PollForConversion+0x1a4>)
 8002250:	f7ff fd0a 	bl	8001c68 <LL_ADC_GetMultiDMATransfer>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d007      	beq.n	800226a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225e:	f043 0220 	orr.w	r2, r3, #32
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e093      	b.n	8002392 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800226a:	2304      	movs	r3, #4
 800226c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800226e:	f7ff fb93 	bl	8001998 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002274:	e021      	b.n	80022ba <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227c:	d01d      	beq.n	80022ba <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800227e:	f7ff fb8b 	bl	8001998 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d302      	bcc.n	8002294 <HAL_ADC_PollForConversion+0x9c>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d112      	bne.n	80022ba <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	4013      	ands	r3, r2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10b      	bne.n	80022ba <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a6:	f043 0204 	orr.w	r2, r3, #4
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e06b      	b.n	8002392 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0d6      	beq.n	8002276 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022cc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fc16 	bl	8001b0a <LL_ADC_REG_IsTriggerSourceSWStart>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d01c      	beq.n	800231e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	7e5b      	ldrb	r3, [r3, #25]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d118      	bne.n	800231e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	2b08      	cmp	r3, #8
 80022f8:	d111      	bne.n	800231e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022fe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800230a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d105      	bne.n	800231e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002316:	f043 0201 	orr.w	r2, r3, #1
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a1f      	ldr	r2, [pc, #124]	@ (80023a0 <HAL_ADC_PollForConversion+0x1a8>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d002      	beq.n	800232e <HAL_ADC_PollForConversion+0x136>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	e000      	b.n	8002330 <HAL_ADC_PollForConversion+0x138>
 800232e:	4b1d      	ldr	r3, [pc, #116]	@ (80023a4 <HAL_ADC_PollForConversion+0x1ac>)
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	4293      	cmp	r3, r2
 8002336:	d008      	beq.n	800234a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d005      	beq.n	800234a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2b05      	cmp	r3, #5
 8002342:	d002      	beq.n	800234a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	2b09      	cmp	r3, #9
 8002348:	d104      	bne.n	8002354 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	61bb      	str	r3, [r7, #24]
 8002352:	e00c      	b.n	800236e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a11      	ldr	r2, [pc, #68]	@ (80023a0 <HAL_ADC_PollForConversion+0x1a8>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d002      	beq.n	8002364 <HAL_ADC_PollForConversion+0x16c>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	e000      	b.n	8002366 <HAL_ADC_PollForConversion+0x16e>
 8002364:	4b0f      	ldr	r3, [pc, #60]	@ (80023a4 <HAL_ADC_PollForConversion+0x1ac>)
 8002366:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	2b08      	cmp	r3, #8
 8002372:	d104      	bne.n	800237e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2208      	movs	r2, #8
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	e008      	b.n	8002390 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d103      	bne.n	8002390 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	220c      	movs	r2, #12
 800238e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3720      	adds	r7, #32
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	50040300 	.word	0x50040300
 80023a0:	50040100 	.word	0x50040100
 80023a4:	50040000 	.word	0x50040000

080023a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
	...

080023c4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	@ 0x28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80023cc:	2300      	movs	r3, #0
 80023ce:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023e0:	4882      	ldr	r0, [pc, #520]	@ (80025ec <HAL_ADC_IRQHandler+0x228>)
 80023e2:	f7ff fc33 	bl	8001c4c <LL_ADC_GetMultimode>
 80023e6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d017      	beq.n	8002422 <HAL_ADC_IRQHandler+0x5e>
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d012      	beq.n	8002422 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002400:	f003 0310 	and.w	r3, r3, #16
 8002404:	2b00      	cmp	r3, #0
 8002406:	d105      	bne.n	8002414 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800240c:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 fed3 	bl	80031c0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2202      	movs	r2, #2
 8002420:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d004      	beq.n	8002436 <HAL_ADC_IRQHandler+0x72>
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10a      	bne.n	800244c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 8083 	beq.w	8002548 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b00      	cmp	r3, #0
 800244a:	d07d      	beq.n	8002548 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	2b00      	cmp	r3, #0
 8002456:	d105      	bne.n	8002464 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800245c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fb4e 	bl	8001b0a <LL_ADC_REG_IsTriggerSourceSWStart>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d062      	beq.n	800253a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a5d      	ldr	r2, [pc, #372]	@ (80025f0 <HAL_ADC_IRQHandler+0x22c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d002      	beq.n	8002484 <HAL_ADC_IRQHandler+0xc0>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	e000      	b.n	8002486 <HAL_ADC_IRQHandler+0xc2>
 8002484:	4b5b      	ldr	r3, [pc, #364]	@ (80025f4 <HAL_ADC_IRQHandler+0x230>)
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6812      	ldr	r2, [r2, #0]
 800248a:	4293      	cmp	r3, r2
 800248c:	d008      	beq.n	80024a0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	2b05      	cmp	r3, #5
 8002498:	d002      	beq.n	80024a0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2b09      	cmp	r3, #9
 800249e:	d104      	bne.n	80024aa <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	623b      	str	r3, [r7, #32]
 80024a8:	e00c      	b.n	80024c4 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a50      	ldr	r2, [pc, #320]	@ (80025f0 <HAL_ADC_IRQHandler+0x22c>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d002      	beq.n	80024ba <HAL_ADC_IRQHandler+0xf6>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	e000      	b.n	80024bc <HAL_ADC_IRQHandler+0xf8>
 80024ba:	4b4e      	ldr	r3, [pc, #312]	@ (80025f4 <HAL_ADC_IRQHandler+0x230>)
 80024bc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d135      	bne.n	800253a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0308 	and.w	r3, r3, #8
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d12e      	bne.n	800253a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fc58 	bl	8001d96 <LL_ADC_REG_IsConversionOngoing>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d11a      	bne.n	8002522 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	685a      	ldr	r2, [r3, #4]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 020c 	bic.w	r2, r2, #12
 80024fa:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002500:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800250c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d112      	bne.n	800253a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002518:	f043 0201 	orr.w	r2, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002520:	e00b      	b.n	800253a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002526:	f043 0210 	orr.w	r2, r3, #16
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002532:	f043 0201 	orr.w	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f95c 	bl	80027f8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	220c      	movs	r2, #12
 8002546:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f003 0320 	and.w	r3, r3, #32
 800254e:	2b00      	cmp	r3, #0
 8002550:	d004      	beq.n	800255c <HAL_ADC_IRQHandler+0x198>
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	f003 0320 	and.w	r3, r3, #32
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10b      	bne.n	8002574 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 809f 	beq.w	80026a6 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 8099 	beq.w	80026a6 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002578:	f003 0310 	and.w	r3, r3, #16
 800257c:	2b00      	cmp	r3, #0
 800257e:	d105      	bne.n	800258c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002584:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff faf9 	bl	8001b88 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002596:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff fab4 	bl	8001b0a <LL_ADC_REG_IsTriggerSourceSWStart>
 80025a2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a11      	ldr	r2, [pc, #68]	@ (80025f0 <HAL_ADC_IRQHandler+0x22c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d002      	beq.n	80025b4 <HAL_ADC_IRQHandler+0x1f0>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	e000      	b.n	80025b6 <HAL_ADC_IRQHandler+0x1f2>
 80025b4:	4b0f      	ldr	r3, [pc, #60]	@ (80025f4 <HAL_ADC_IRQHandler+0x230>)
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d008      	beq.n	80025d0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	2b06      	cmp	r3, #6
 80025c8:	d002      	beq.n	80025d0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b07      	cmp	r3, #7
 80025ce:	d104      	bne.n	80025da <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	623b      	str	r3, [r7, #32]
 80025d8:	e013      	b.n	8002602 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a04      	ldr	r2, [pc, #16]	@ (80025f0 <HAL_ADC_IRQHandler+0x22c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d009      	beq.n	80025f8 <HAL_ADC_IRQHandler+0x234>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	e007      	b.n	80025fa <HAL_ADC_IRQHandler+0x236>
 80025ea:	bf00      	nop
 80025ec:	50040300 	.word	0x50040300
 80025f0:	50040100 	.word	0x50040100
 80025f4:	50040000 	.word	0x50040000
 80025f8:	4b7d      	ldr	r3, [pc, #500]	@ (80027f0 <HAL_ADC_IRQHandler+0x42c>)
 80025fa:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d047      	beq.n	8002698 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002608:	6a3b      	ldr	r3, [r7, #32]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d007      	beq.n	8002622 <HAL_ADC_IRQHandler+0x25e>
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d03f      	beq.n	8002698 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800261e:	2b00      	cmp	r3, #0
 8002620:	d13a      	bne.n	8002698 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800262c:	2b40      	cmp	r3, #64	@ 0x40
 800262e:	d133      	bne.n	8002698 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d12e      	bne.n	8002698 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff fbbc 	bl	8001dbc <LL_ADC_INJ_IsConversionOngoing>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d11a      	bne.n	8002680 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002658:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800265e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800266a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800266e:	2b00      	cmp	r3, #0
 8002670:	d112      	bne.n	8002698 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002676:	f043 0201 	orr.w	r2, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	655a      	str	r2, [r3, #84]	@ 0x54
 800267e:	e00b      	b.n	8002698 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002684:	f043 0210 	orr.w	r2, r3, #16
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002690:	f043 0201 	orr.w	r2, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 fd69 	bl	8003170 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2260      	movs	r2, #96	@ 0x60
 80026a4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d011      	beq.n	80026d4 <HAL_ADC_IRQHandler+0x310>
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00c      	beq.n	80026d4 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026be:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f8a0 	bl	800280c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2280      	movs	r2, #128	@ 0x80
 80026d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d012      	beq.n	8002704 <HAL_ADC_IRQHandler+0x340>
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00d      	beq.n	8002704 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ec:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 fd4f 	bl	8003198 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002702:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800270a:	2b00      	cmp	r3, #0
 800270c:	d012      	beq.n	8002734 <HAL_ADC_IRQHandler+0x370>
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00d      	beq.n	8002734 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800271c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 fd41 	bl	80031ac <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002732:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f003 0310 	and.w	r3, r3, #16
 800273a:	2b00      	cmp	r3, #0
 800273c:	d036      	beq.n	80027ac <HAL_ADC_IRQHandler+0x3e8>
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	f003 0310 	and.w	r3, r3, #16
 8002744:	2b00      	cmp	r3, #0
 8002746:	d031      	beq.n	80027ac <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800274c:	2b00      	cmp	r3, #0
 800274e:	d102      	bne.n	8002756 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002750:	2301      	movs	r3, #1
 8002752:	627b      	str	r3, [r7, #36]	@ 0x24
 8002754:	e014      	b.n	8002780 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d008      	beq.n	800276e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800275c:	4825      	ldr	r0, [pc, #148]	@ (80027f4 <HAL_ADC_IRQHandler+0x430>)
 800275e:	f7ff fa83 	bl	8001c68 <LL_ADC_GetMultiDMATransfer>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00b      	beq.n	8002780 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002768:	2301      	movs	r3, #1
 800276a:	627b      	str	r3, [r7, #36]	@ 0x24
 800276c:	e008      	b.n	8002780 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800277c:	2301      	movs	r3, #1
 800277e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002782:	2b01      	cmp	r3, #1
 8002784:	d10e      	bne.n	80027a4 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800278a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002796:	f043 0202 	orr.w	r2, r3, #2
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f83e 	bl	8002820 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2210      	movs	r2, #16
 80027aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d018      	beq.n	80027e8 <HAL_ADC_IRQHandler+0x424>
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d013      	beq.n	80027e8 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c4:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d0:	f043 0208 	orr.w	r2, r3, #8
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027e0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 fcce 	bl	8003184 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80027e8:	bf00      	nop
 80027ea:	3728      	adds	r7, #40	@ 0x28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	50040000 	.word	0x50040000
 80027f4:	50040300 	.word	0x50040300

080027f8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b0b6      	sub	sp, #216	@ 0xd8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002844:	2300      	movs	r3, #0
 8002846:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_ADC_ConfigChannel+0x22>
 8002852:	2302      	movs	r3, #2
 8002854:	e3c9      	b.n	8002fea <HAL_ADC_ConfigChannel+0x7b6>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff fa97 	bl	8001d96 <LL_ADC_REG_IsConversionOngoing>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	f040 83aa 	bne.w	8002fc4 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b05      	cmp	r3, #5
 800287e:	d824      	bhi.n	80028ca <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	3b02      	subs	r3, #2
 8002886:	2b03      	cmp	r3, #3
 8002888:	d81b      	bhi.n	80028c2 <HAL_ADC_ConfigChannel+0x8e>
 800288a:	a201      	add	r2, pc, #4	@ (adr r2, 8002890 <HAL_ADC_ConfigChannel+0x5c>)
 800288c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002890:	080028a1 	.word	0x080028a1
 8002894:	080028a9 	.word	0x080028a9
 8002898:	080028b1 	.word	0x080028b1
 800289c:	080028b9 	.word	0x080028b9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80028a0:	230c      	movs	r3, #12
 80028a2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80028a6:	e010      	b.n	80028ca <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80028a8:	2312      	movs	r3, #18
 80028aa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80028ae:	e00c      	b.n	80028ca <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80028b0:	2318      	movs	r3, #24
 80028b2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80028b6:	e008      	b.n	80028ca <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80028b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80028c0:	e003      	b.n	80028ca <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80028c2:	2306      	movs	r3, #6
 80028c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80028c8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80028d8:	f7ff f92a 	bl	8001b30 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fa58 	bl	8001d96 <LL_ADC_REG_IsConversionOngoing>
 80028e6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff fa64 	bl	8001dbc <LL_ADC_INJ_IsConversionOngoing>
 80028f4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f040 81a4 	bne.w	8002c4a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002902:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002906:	2b00      	cmp	r3, #0
 8002908:	f040 819f 	bne.w	8002c4a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6818      	ldr	r0, [r3, #0]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	6819      	ldr	r1, [r3, #0]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	461a      	mov	r2, r3
 800291a:	f7ff f948 	bl	8001bae <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	695a      	ldr	r2, [r3, #20]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	08db      	lsrs	r3, r3, #3
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	2b04      	cmp	r3, #4
 800293e:	d00a      	beq.n	8002956 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	6919      	ldr	r1, [r3, #16]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002950:	f7ff f886 	bl	8001a60 <LL_ADC_SetOffset>
 8002954:	e179      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2100      	movs	r1, #0
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff f8a3 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 8002962:	4603      	mov	r3, r0
 8002964:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10a      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x14e>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2100      	movs	r1, #0
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff f898 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 8002978:	4603      	mov	r3, r0
 800297a:	0e9b      	lsrs	r3, r3, #26
 800297c:	f003 021f 	and.w	r2, r3, #31
 8002980:	e01e      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x18c>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2100      	movs	r1, #0
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff f88d 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 800298e:	4603      	mov	r3, r0
 8002990:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002998:	fa93 f3a3 	rbit	r3, r3
 800299c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80029a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80029b0:	2320      	movs	r3, #32
 80029b2:	e004      	b.n	80029be <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80029b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029b8:	fab3 f383 	clz	r3, r3
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d105      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x1a4>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	0e9b      	lsrs	r3, r3, #26
 80029d2:	f003 031f 	and.w	r3, r3, #31
 80029d6:	e018      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x1d6>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029e4:	fa93 f3a3 	rbit	r3, r3
 80029e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80029ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80029f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80029fc:	2320      	movs	r3, #32
 80029fe:	e004      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002a00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a04:	fab3 f383 	clz	r3, r3
 8002a08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d106      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2200      	movs	r2, #0
 8002a14:	2100      	movs	r1, #0
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff f85c 	bl	8001ad4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2101      	movs	r1, #1
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff f840 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10a      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x214>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2101      	movs	r1, #1
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff f835 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	0e9b      	lsrs	r3, r3, #26
 8002a42:	f003 021f 	and.w	r2, r3, #31
 8002a46:	e01e      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x252>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff f82a 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a5e:	fa93 f3a3 	rbit	r3, r3
 8002a62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002a66:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002a6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002a76:	2320      	movs	r3, #32
 8002a78:	e004      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002a7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d105      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x26a>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	0e9b      	lsrs	r3, r3, #26
 8002a98:	f003 031f 	and.w	r3, r3, #31
 8002a9c:	e018      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x29c>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002ab2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ab6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002aba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002ac2:	2320      	movs	r3, #32
 8002ac4:	e004      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002ac6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002aca:	fab3 f383 	clz	r3, r3
 8002ace:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d106      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2101      	movs	r1, #1
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fe fff9 	bl	8001ad4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2102      	movs	r1, #2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe ffdd 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10a      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x2da>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2102      	movs	r1, #2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe ffd2 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 8002b04:	4603      	mov	r3, r0
 8002b06:	0e9b      	lsrs	r3, r3, #26
 8002b08:	f003 021f 	and.w	r2, r3, #31
 8002b0c:	e01e      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x318>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2102      	movs	r1, #2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fe ffc7 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b24:	fa93 f3a3 	rbit	r3, r3
 8002b28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002b2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002b34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002b3c:	2320      	movs	r3, #32
 8002b3e:	e004      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002b40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b44:	fab3 f383 	clz	r3, r3
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d105      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x330>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	0e9b      	lsrs	r3, r3, #26
 8002b5e:	f003 031f 	and.w	r3, r3, #31
 8002b62:	e014      	b.n	8002b8e <HAL_ADC_ConfigChannel+0x35a>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b6c:	fa93 f3a3 	rbit	r3, r3
 8002b70:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002b72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002b78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002b80:	2320      	movs	r3, #32
 8002b82:	e004      	b.n	8002b8e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002b84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b88:	fab3 f383 	clz	r3, r3
 8002b8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d106      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2200      	movs	r2, #0
 8002b98:	2102      	movs	r1, #2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fe ff9a 	bl	8001ad4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2103      	movs	r1, #3
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe ff7e 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10a      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x398>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2103      	movs	r1, #3
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fe ff73 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	0e9b      	lsrs	r3, r3, #26
 8002bc6:	f003 021f 	and.w	r2, r3, #31
 8002bca:	e017      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x3c8>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2103      	movs	r1, #3
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fe ff68 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002be4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002be6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002be8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002bee:	2320      	movs	r3, #32
 8002bf0:	e003      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002bf2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bf4:	fab3 f383 	clz	r3, r3
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d105      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x3e0>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	0e9b      	lsrs	r3, r3, #26
 8002c0e:	f003 031f 	and.w	r3, r3, #31
 8002c12:	e011      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x404>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c1c:	fa93 f3a3 	rbit	r3, r3
 8002c20:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002c22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c24:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002c26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002c2c:	2320      	movs	r3, #32
 8002c2e:	e003      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002c30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d106      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2200      	movs	r2, #0
 8002c42:	2103      	movs	r1, #3
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fe ff45 	bl	8001ad4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff f87a 	bl	8001d48 <LL_ADC_IsEnabled>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f040 8140 	bne.w	8002edc <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6818      	ldr	r0, [r3, #0]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	6819      	ldr	r1, [r3, #0]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	f7fe ffcb 	bl	8001c04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	4a8f      	ldr	r2, [pc, #572]	@ (8002eb0 <HAL_ADC_ConfigChannel+0x67c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	f040 8131 	bne.w	8002edc <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10b      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x46e>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	0e9b      	lsrs	r3, r3, #26
 8002c90:	3301      	adds	r3, #1
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	2b09      	cmp	r3, #9
 8002c98:	bf94      	ite	ls
 8002c9a:	2301      	movls	r3, #1
 8002c9c:	2300      	movhi	r3, #0
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	e019      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x4a2>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002caa:	fa93 f3a3 	rbit	r3, r3
 8002cae:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002cb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002cb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002cba:	2320      	movs	r3, #32
 8002cbc:	e003      	b.n	8002cc6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002cbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cc0:	fab3 f383 	clz	r3, r3
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	2b09      	cmp	r3, #9
 8002cce:	bf94      	ite	ls
 8002cd0:	2301      	movls	r3, #1
 8002cd2:	2300      	movhi	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d079      	beq.n	8002dce <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d107      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x4c2>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	0e9b      	lsrs	r3, r3, #26
 8002cec:	3301      	adds	r3, #1
 8002cee:	069b      	lsls	r3, r3, #26
 8002cf0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cf4:	e015      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x4ee>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cfe:	fa93 f3a3 	rbit	r3, r3
 8002d02:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002d04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d06:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002d08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002d0e:	2320      	movs	r3, #32
 8002d10:	e003      	b.n	8002d1a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002d12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d14:	fab3 f383 	clz	r3, r3
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	069b      	lsls	r3, r3, #26
 8002d1e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d109      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x50e>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	0e9b      	lsrs	r3, r3, #26
 8002d34:	3301      	adds	r3, #1
 8002d36:	f003 031f 	and.w	r3, r3, #31
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d40:	e017      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x53e>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d4a:	fa93 f3a3 	rbit	r3, r3
 8002d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002d50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d52:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002d54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002d5a:	2320      	movs	r3, #32
 8002d5c:	e003      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002d5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d60:	fab3 f383 	clz	r3, r3
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	3301      	adds	r3, #1
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d72:	ea42 0103 	orr.w	r1, r2, r3
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10a      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x564>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	0e9b      	lsrs	r3, r3, #26
 8002d88:	3301      	adds	r3, #1
 8002d8a:	f003 021f 	and.w	r2, r3, #31
 8002d8e:	4613      	mov	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	4413      	add	r3, r2
 8002d94:	051b      	lsls	r3, r3, #20
 8002d96:	e018      	b.n	8002dca <HAL_ADC_ConfigChannel+0x596>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002da0:	fa93 f3a3 	rbit	r3, r3
 8002da4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002db0:	2320      	movs	r3, #32
 8002db2:	e003      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db6:	fab3 f383 	clz	r3, r3
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	f003 021f 	and.w	r2, r3, #31
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	4413      	add	r3, r2
 8002dc8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dca:	430b      	orrs	r3, r1
 8002dcc:	e081      	b.n	8002ed2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d107      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x5b6>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	0e9b      	lsrs	r3, r3, #26
 8002de0:	3301      	adds	r3, #1
 8002de2:	069b      	lsls	r3, r3, #26
 8002de4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002de8:	e015      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x5e2>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df2:	fa93 f3a3 	rbit	r3, r3
 8002df6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002e02:	2320      	movs	r3, #32
 8002e04:	e003      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e08:	fab3 f383 	clz	r3, r3
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	3301      	adds	r3, #1
 8002e10:	069b      	lsls	r3, r3, #26
 8002e12:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d109      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x602>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	0e9b      	lsrs	r3, r3, #26
 8002e28:	3301      	adds	r3, #1
 8002e2a:	f003 031f 	and.w	r3, r3, #31
 8002e2e:	2101      	movs	r1, #1
 8002e30:	fa01 f303 	lsl.w	r3, r1, r3
 8002e34:	e017      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x632>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	fa93 f3a3 	rbit	r3, r3
 8002e42:	61bb      	str	r3, [r7, #24]
  return result;
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002e4e:	2320      	movs	r3, #32
 8002e50:	e003      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	fab3 f383 	clz	r3, r3
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	f003 031f 	and.w	r3, r3, #31
 8002e60:	2101      	movs	r1, #1
 8002e62:	fa01 f303 	lsl.w	r3, r1, r3
 8002e66:	ea42 0103 	orr.w	r1, r2, r3
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10d      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x65e>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	0e9b      	lsrs	r3, r3, #26
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	f003 021f 	and.w	r2, r3, #31
 8002e82:	4613      	mov	r3, r2
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	4413      	add	r3, r2
 8002e88:	3b1e      	subs	r3, #30
 8002e8a:	051b      	lsls	r3, r3, #20
 8002e8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e90:	e01e      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x69c>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	fa93 f3a3 	rbit	r3, r3
 8002e9e:	60fb      	str	r3, [r7, #12]
  return result;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d104      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002eaa:	2320      	movs	r3, #32
 8002eac:	e006      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x688>
 8002eae:	bf00      	nop
 8002eb0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	fab3 f383 	clz	r3, r3
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	f003 021f 	and.w	r2, r3, #31
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3b1e      	subs	r3, #30
 8002eca:	051b      	lsls	r3, r3, #20
 8002ecc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ed0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	f7fe fe69 	bl	8001bae <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	4b44      	ldr	r3, [pc, #272]	@ (8002ff4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d07a      	beq.n	8002fde <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ee8:	4843      	ldr	r0, [pc, #268]	@ (8002ff8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002eea:	f7fe fdab 	bl	8001a44 <LL_ADC_GetCommonPathInternalCh>
 8002eee:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a41      	ldr	r2, [pc, #260]	@ (8002ffc <HAL_ADC_ConfigChannel+0x7c8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d12c      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002efc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d126      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a3c      	ldr	r2, [pc, #240]	@ (8003000 <HAL_ADC_ConfigChannel+0x7cc>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d004      	beq.n	8002f1c <HAL_ADC_ConfigChannel+0x6e8>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a3b      	ldr	r2, [pc, #236]	@ (8003004 <HAL_ADC_ConfigChannel+0x7d0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d15d      	bne.n	8002fd8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f20:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f24:	4619      	mov	r1, r3
 8002f26:	4834      	ldr	r0, [pc, #208]	@ (8002ff8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002f28:	f7fe fd79 	bl	8001a1e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f2c:	4b36      	ldr	r3, [pc, #216]	@ (8003008 <HAL_ADC_ConfigChannel+0x7d4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	099b      	lsrs	r3, r3, #6
 8002f32:	4a36      	ldr	r2, [pc, #216]	@ (800300c <HAL_ADC_ConfigChannel+0x7d8>)
 8002f34:	fba2 2303 	umull	r2, r3, r2, r3
 8002f38:	099b      	lsrs	r3, r3, #6
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	4413      	add	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f46:	e002      	b.n	8002f4e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1f9      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f54:	e040      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a2d      	ldr	r2, [pc, #180]	@ (8003010 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d118      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d112      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a23      	ldr	r2, [pc, #140]	@ (8003000 <HAL_ADC_ConfigChannel+0x7cc>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d004      	beq.n	8002f80 <HAL_ADC_ConfigChannel+0x74c>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a22      	ldr	r2, [pc, #136]	@ (8003004 <HAL_ADC_ConfigChannel+0x7d0>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d12d      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f84:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f88:	4619      	mov	r1, r3
 8002f8a:	481b      	ldr	r0, [pc, #108]	@ (8002ff8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002f8c:	f7fe fd47 	bl	8001a1e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f90:	e024      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1f      	ldr	r2, [pc, #124]	@ (8003014 <HAL_ADC_ConfigChannel+0x7e0>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d120      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fa0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d11a      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a14      	ldr	r2, [pc, #80]	@ (8003000 <HAL_ADC_ConfigChannel+0x7cc>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d115      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fb6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fba:	4619      	mov	r1, r3
 8002fbc:	480e      	ldr	r0, [pc, #56]	@ (8002ff8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002fbe:	f7fe fd2e 	bl	8001a1e <LL_ADC_SetCommonPathInternalCh>
 8002fc2:	e00c      	b.n	8002fde <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc8:	f043 0220 	orr.w	r2, r3, #32
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002fd6:	e002      	b.n	8002fde <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fd8:	bf00      	nop
 8002fda:	e000      	b.n	8002fde <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fdc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fe6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	37d8      	adds	r7, #216	@ 0xd8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	80080000 	.word	0x80080000
 8002ff8:	50040300 	.word	0x50040300
 8002ffc:	c7520000 	.word	0xc7520000
 8003000:	50040000 	.word	0x50040000
 8003004:	50040200 	.word	0x50040200
 8003008:	20000014 	.word	0x20000014
 800300c:	053e2d63 	.word	0x053e2d63
 8003010:	cb840000 	.word	0xcb840000
 8003014:	80000001 	.word	0x80000001

08003018 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003020:	2300      	movs	r3, #0
 8003022:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f7fe fe8d 	bl	8001d48 <LL_ADC_IsEnabled>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d169      	bne.n	8003108 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	4b36      	ldr	r3, [pc, #216]	@ (8003114 <ADC_Enable+0xfc>)
 800303c:	4013      	ands	r3, r2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00d      	beq.n	800305e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003046:	f043 0210 	orr.w	r2, r3, #16
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003052:	f043 0201 	orr.w	r2, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e055      	b.n	800310a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f7fe fe5c 	bl	8001d20 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003068:	482b      	ldr	r0, [pc, #172]	@ (8003118 <ADC_Enable+0x100>)
 800306a:	f7fe fceb 	bl	8001a44 <LL_ADC_GetCommonPathInternalCh>
 800306e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003070:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003074:	2b00      	cmp	r3, #0
 8003076:	d013      	beq.n	80030a0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003078:	4b28      	ldr	r3, [pc, #160]	@ (800311c <ADC_Enable+0x104>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	099b      	lsrs	r3, r3, #6
 800307e:	4a28      	ldr	r2, [pc, #160]	@ (8003120 <ADC_Enable+0x108>)
 8003080:	fba2 2303 	umull	r2, r3, r2, r3
 8003084:	099b      	lsrs	r3, r3, #6
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	4613      	mov	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4413      	add	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003092:	e002      	b.n	800309a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	3b01      	subs	r3, #1
 8003098:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f9      	bne.n	8003094 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80030a0:	f7fe fc7a 	bl	8001998 <HAL_GetTick>
 80030a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030a6:	e028      	b.n	80030fa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fe fe4b 	bl	8001d48 <LL_ADC_IsEnabled>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d104      	bne.n	80030c2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fe fe2f 	bl	8001d20 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030c2:	f7fe fc69 	bl	8001998 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d914      	bls.n	80030fa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d00d      	beq.n	80030fa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e2:	f043 0210 	orr.w	r2, r3, #16
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ee:	f043 0201 	orr.w	r2, r3, #1
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e007      	b.n	800310a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b01      	cmp	r3, #1
 8003106:	d1cf      	bne.n	80030a8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	8000003f 	.word	0x8000003f
 8003118:	50040300 	.word	0x50040300
 800311c:	20000014 	.word	0x20000014
 8003120:	053e2d63 	.word	0x053e2d63

08003124 <LL_ADC_IsEnabled>:
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <LL_ADC_IsEnabled+0x18>
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <LL_ADC_IsEnabled+0x1a>
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <LL_ADC_REG_IsConversionOngoing>:
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 0304 	and.w	r3, r3, #4
 800315a:	2b04      	cmp	r3, #4
 800315c:	d101      	bne.n	8003162 <LL_ADC_REG_IsConversionOngoing+0x18>
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80031d4:	b590      	push	{r4, r7, lr}
 80031d6:	b09f      	sub	sp, #124	@ 0x7c
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e093      	b.n	800331a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80031fa:	2300      	movs	r3, #0
 80031fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80031fe:	2300      	movs	r3, #0
 8003200:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a47      	ldr	r2, [pc, #284]	@ (8003324 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d102      	bne.n	8003212 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800320c:	4b46      	ldr	r3, [pc, #280]	@ (8003328 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800320e:	60bb      	str	r3, [r7, #8]
 8003210:	e001      	b.n	8003216 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003212:	2300      	movs	r3, #0
 8003214:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10b      	bne.n	8003234 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003220:	f043 0220 	orr.w	r2, r3, #32
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e072      	b.n	800331a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff ff87 	bl	800314a <LL_ADC_REG_IsConversionOngoing>
 800323c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff ff81 	bl	800314a <LL_ADC_REG_IsConversionOngoing>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d154      	bne.n	80032f8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800324e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003250:	2b00      	cmp	r3, #0
 8003252:	d151      	bne.n	80032f8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003254:	4b35      	ldr	r3, [pc, #212]	@ (800332c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003256:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d02c      	beq.n	80032ba <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003260:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	6859      	ldr	r1, [r3, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003272:	035b      	lsls	r3, r3, #13
 8003274:	430b      	orrs	r3, r1
 8003276:	431a      	orrs	r2, r3
 8003278:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800327a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800327c:	4829      	ldr	r0, [pc, #164]	@ (8003324 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800327e:	f7ff ff51 	bl	8003124 <LL_ADC_IsEnabled>
 8003282:	4604      	mov	r4, r0
 8003284:	4828      	ldr	r0, [pc, #160]	@ (8003328 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003286:	f7ff ff4d 	bl	8003124 <LL_ADC_IsEnabled>
 800328a:	4603      	mov	r3, r0
 800328c:	431c      	orrs	r4, r3
 800328e:	4828      	ldr	r0, [pc, #160]	@ (8003330 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003290:	f7ff ff48 	bl	8003124 <LL_ADC_IsEnabled>
 8003294:	4603      	mov	r3, r0
 8003296:	4323      	orrs	r3, r4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d137      	bne.n	800330c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800329c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80032a4:	f023 030f 	bic.w	r3, r3, #15
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	6811      	ldr	r1, [r2, #0]
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	6892      	ldr	r2, [r2, #8]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	431a      	orrs	r2, r3
 80032b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032b6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032b8:	e028      	b.n	800330c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80032ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032c4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032c6:	4817      	ldr	r0, [pc, #92]	@ (8003324 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80032c8:	f7ff ff2c 	bl	8003124 <LL_ADC_IsEnabled>
 80032cc:	4604      	mov	r4, r0
 80032ce:	4816      	ldr	r0, [pc, #88]	@ (8003328 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80032d0:	f7ff ff28 	bl	8003124 <LL_ADC_IsEnabled>
 80032d4:	4603      	mov	r3, r0
 80032d6:	431c      	orrs	r4, r3
 80032d8:	4815      	ldr	r0, [pc, #84]	@ (8003330 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80032da:	f7ff ff23 	bl	8003124 <LL_ADC_IsEnabled>
 80032de:	4603      	mov	r3, r0
 80032e0:	4323      	orrs	r3, r4
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d112      	bne.n	800330c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80032e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80032ee:	f023 030f 	bic.w	r3, r3, #15
 80032f2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80032f4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032f6:	e009      	b.n	800330c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032fc:	f043 0220 	orr.w	r2, r3, #32
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800330a:	e000      	b.n	800330e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800330c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003316:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800331a:	4618      	mov	r0, r3
 800331c:	377c      	adds	r7, #124	@ 0x7c
 800331e:	46bd      	mov	sp, r7
 8003320:	bd90      	pop	{r4, r7, pc}
 8003322:	bf00      	nop
 8003324:	50040000 	.word	0x50040000
 8003328:	50040100 	.word	0x50040100
 800332c:	50040300 	.word	0x50040300
 8003330:	50040200 	.word	0x50040200

08003334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003344:	4b0c      	ldr	r3, [pc, #48]	@ (8003378 <__NVIC_SetPriorityGrouping+0x44>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003350:	4013      	ands	r3, r2
 8003352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800335c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003366:	4a04      	ldr	r2, [pc, #16]	@ (8003378 <__NVIC_SetPriorityGrouping+0x44>)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	60d3      	str	r3, [r2, #12]
}
 800336c:	bf00      	nop
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	e000ed00 	.word	0xe000ed00

0800337c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003380:	4b04      	ldr	r3, [pc, #16]	@ (8003394 <__NVIC_GetPriorityGrouping+0x18>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	0a1b      	lsrs	r3, r3, #8
 8003386:	f003 0307 	and.w	r3, r3, #7
}
 800338a:	4618      	mov	r0, r3
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	e000ed00 	.word	0xe000ed00

08003398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	db0b      	blt.n	80033c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	f003 021f 	and.w	r2, r3, #31
 80033b0:	4907      	ldr	r1, [pc, #28]	@ (80033d0 <__NVIC_EnableIRQ+0x38>)
 80033b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	2001      	movs	r0, #1
 80033ba:	fa00 f202 	lsl.w	r2, r0, r2
 80033be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	e000e100 	.word	0xe000e100

080033d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	6039      	str	r1, [r7, #0]
 80033de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	db0a      	blt.n	80033fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	490c      	ldr	r1, [pc, #48]	@ (8003420 <__NVIC_SetPriority+0x4c>)
 80033ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f2:	0112      	lsls	r2, r2, #4
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	440b      	add	r3, r1
 80033f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033fc:	e00a      	b.n	8003414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	b2da      	uxtb	r2, r3
 8003402:	4908      	ldr	r1, [pc, #32]	@ (8003424 <__NVIC_SetPriority+0x50>)
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	3b04      	subs	r3, #4
 800340c:	0112      	lsls	r2, r2, #4
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	440b      	add	r3, r1
 8003412:	761a      	strb	r2, [r3, #24]
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	e000e100 	.word	0xe000e100
 8003424:	e000ed00 	.word	0xe000ed00

08003428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003428:	b480      	push	{r7}
 800342a:	b089      	sub	sp, #36	@ 0x24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f1c3 0307 	rsb	r3, r3, #7
 8003442:	2b04      	cmp	r3, #4
 8003444:	bf28      	it	cs
 8003446:	2304      	movcs	r3, #4
 8003448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	3304      	adds	r3, #4
 800344e:	2b06      	cmp	r3, #6
 8003450:	d902      	bls.n	8003458 <NVIC_EncodePriority+0x30>
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	3b03      	subs	r3, #3
 8003456:	e000      	b.n	800345a <NVIC_EncodePriority+0x32>
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800345c:	f04f 32ff 	mov.w	r2, #4294967295
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43da      	mvns	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	401a      	ands	r2, r3
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003470:	f04f 31ff 	mov.w	r1, #4294967295
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	fa01 f303 	lsl.w	r3, r1, r3
 800347a:	43d9      	mvns	r1, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003480:	4313      	orrs	r3, r2
         );
}
 8003482:	4618      	mov	r0, r3
 8003484:	3724      	adds	r7, #36	@ 0x24
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
	...

08003490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3b01      	subs	r3, #1
 800349c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034a0:	d301      	bcc.n	80034a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034a2:	2301      	movs	r3, #1
 80034a4:	e00f      	b.n	80034c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034a6:	4a0a      	ldr	r2, [pc, #40]	@ (80034d0 <SysTick_Config+0x40>)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ae:	210f      	movs	r1, #15
 80034b0:	f04f 30ff 	mov.w	r0, #4294967295
 80034b4:	f7ff ff8e 	bl	80033d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034b8:	4b05      	ldr	r3, [pc, #20]	@ (80034d0 <SysTick_Config+0x40>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034be:	4b04      	ldr	r3, [pc, #16]	@ (80034d0 <SysTick_Config+0x40>)
 80034c0:	2207      	movs	r2, #7
 80034c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	e000e010 	.word	0xe000e010

080034d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff ff29 	bl	8003334 <__NVIC_SetPriorityGrouping>
}
 80034e2:	bf00      	nop
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b086      	sub	sp, #24
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	4603      	mov	r3, r0
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
 80034f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034f8:	2300      	movs	r3, #0
 80034fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034fc:	f7ff ff3e 	bl	800337c <__NVIC_GetPriorityGrouping>
 8003500:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	68b9      	ldr	r1, [r7, #8]
 8003506:	6978      	ldr	r0, [r7, #20]
 8003508:	f7ff ff8e 	bl	8003428 <NVIC_EncodePriority>
 800350c:	4602      	mov	r2, r0
 800350e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003512:	4611      	mov	r1, r2
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff ff5d 	bl	80033d4 <__NVIC_SetPriority>
}
 800351a:	bf00      	nop
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	4603      	mov	r3, r0
 800352a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800352c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff ff31 	bl	8003398 <__NVIC_EnableIRQ>
}
 8003536:	bf00      	nop
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b082      	sub	sp, #8
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7ff ffa2 	bl	8003490 <SysTick_Config>
 800354c:	4603      	mov	r3, r0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003556:	b480      	push	{r7}
 8003558:	b085      	sub	sp, #20
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d008      	beq.n	8003580 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2204      	movs	r2, #4
 8003572:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e022      	b.n	80035c6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 020e 	bic.w	r2, r2, #14
 800358e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0201 	bic.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a4:	f003 021c 	and.w	r2, r3, #28
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ac:	2101      	movs	r1, #1
 80035ae:	fa01 f202 	lsl.w	r2, r1, r2
 80035b2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b084      	sub	sp, #16
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d005      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2204      	movs	r2, #4
 80035ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	73fb      	strb	r3, [r7, #15]
 80035f4:	e029      	b.n	800364a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 020e 	bic.w	r2, r2, #14
 8003604:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0201 	bic.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361a:	f003 021c 	and.w	r2, r3, #28
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003622:	2101      	movs	r1, #1
 8003624:	fa01 f202 	lsl.w	r2, r1, r2
 8003628:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	4798      	blx	r3
    }
  }
  return status;
 800364a:	7bfb      	ldrb	r3, [r7, #15]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800365e:	2300      	movs	r3, #0
 8003660:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003662:	e17f      	b.n	8003964 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	2101      	movs	r1, #1
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	fa01 f303 	lsl.w	r3, r1, r3
 8003670:	4013      	ands	r3, r2
 8003672:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 8171 	beq.w	800395e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f003 0303 	and.w	r3, r3, #3
 8003684:	2b01      	cmp	r3, #1
 8003686:	d005      	beq.n	8003694 <HAL_GPIO_Init+0x40>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 0303 	and.w	r3, r3, #3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d130      	bne.n	80036f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	2203      	movs	r2, #3
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	43db      	mvns	r3, r3
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	4013      	ands	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036ca:	2201      	movs	r2, #1
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	43db      	mvns	r3, r3
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4013      	ands	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	091b      	lsrs	r3, r3, #4
 80036e0:	f003 0201 	and.w	r2, r3, #1
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	2b03      	cmp	r3, #3
 8003700:	d118      	bne.n	8003734 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003706:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003708:	2201      	movs	r2, #1
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	43db      	mvns	r3, r3
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4013      	ands	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	08db      	lsrs	r3, r3, #3
 800371e:	f003 0201 	and.w	r2, r3, #1
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4313      	orrs	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 0303 	and.w	r3, r3, #3
 800373c:	2b03      	cmp	r3, #3
 800373e:	d017      	beq.n	8003770 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	2203      	movs	r2, #3
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	43db      	mvns	r3, r3
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	4013      	ands	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d123      	bne.n	80037c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	08da      	lsrs	r2, r3, #3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3208      	adds	r2, #8
 8003784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003788:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	220f      	movs	r2, #15
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4013      	ands	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	08da      	lsrs	r2, r3, #3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3208      	adds	r2, #8
 80037be:	6939      	ldr	r1, [r7, #16]
 80037c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	2203      	movs	r2, #3
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	43db      	mvns	r3, r3
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4013      	ands	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 0203 	and.w	r2, r3, #3
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 80ac 	beq.w	800395e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003806:	4b5f      	ldr	r3, [pc, #380]	@ (8003984 <HAL_GPIO_Init+0x330>)
 8003808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800380a:	4a5e      	ldr	r2, [pc, #376]	@ (8003984 <HAL_GPIO_Init+0x330>)
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	6613      	str	r3, [r2, #96]	@ 0x60
 8003812:	4b5c      	ldr	r3, [pc, #368]	@ (8003984 <HAL_GPIO_Init+0x330>)
 8003814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	60bb      	str	r3, [r7, #8]
 800381c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800381e:	4a5a      	ldr	r2, [pc, #360]	@ (8003988 <HAL_GPIO_Init+0x334>)
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	089b      	lsrs	r3, r3, #2
 8003824:	3302      	adds	r3, #2
 8003826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	220f      	movs	r2, #15
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	43db      	mvns	r3, r3
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4013      	ands	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003848:	d025      	beq.n	8003896 <HAL_GPIO_Init+0x242>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a4f      	ldr	r2, [pc, #316]	@ (800398c <HAL_GPIO_Init+0x338>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d01f      	beq.n	8003892 <HAL_GPIO_Init+0x23e>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a4e      	ldr	r2, [pc, #312]	@ (8003990 <HAL_GPIO_Init+0x33c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d019      	beq.n	800388e <HAL_GPIO_Init+0x23a>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a4d      	ldr	r2, [pc, #308]	@ (8003994 <HAL_GPIO_Init+0x340>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d013      	beq.n	800388a <HAL_GPIO_Init+0x236>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a4c      	ldr	r2, [pc, #304]	@ (8003998 <HAL_GPIO_Init+0x344>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d00d      	beq.n	8003886 <HAL_GPIO_Init+0x232>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a4b      	ldr	r2, [pc, #300]	@ (800399c <HAL_GPIO_Init+0x348>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d007      	beq.n	8003882 <HAL_GPIO_Init+0x22e>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a4a      	ldr	r2, [pc, #296]	@ (80039a0 <HAL_GPIO_Init+0x34c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d101      	bne.n	800387e <HAL_GPIO_Init+0x22a>
 800387a:	2306      	movs	r3, #6
 800387c:	e00c      	b.n	8003898 <HAL_GPIO_Init+0x244>
 800387e:	2307      	movs	r3, #7
 8003880:	e00a      	b.n	8003898 <HAL_GPIO_Init+0x244>
 8003882:	2305      	movs	r3, #5
 8003884:	e008      	b.n	8003898 <HAL_GPIO_Init+0x244>
 8003886:	2304      	movs	r3, #4
 8003888:	e006      	b.n	8003898 <HAL_GPIO_Init+0x244>
 800388a:	2303      	movs	r3, #3
 800388c:	e004      	b.n	8003898 <HAL_GPIO_Init+0x244>
 800388e:	2302      	movs	r3, #2
 8003890:	e002      	b.n	8003898 <HAL_GPIO_Init+0x244>
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <HAL_GPIO_Init+0x244>
 8003896:	2300      	movs	r3, #0
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	f002 0203 	and.w	r2, r2, #3
 800389e:	0092      	lsls	r2, r2, #2
 80038a0:	4093      	lsls	r3, r2
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038a8:	4937      	ldr	r1, [pc, #220]	@ (8003988 <HAL_GPIO_Init+0x334>)
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	089b      	lsrs	r3, r3, #2
 80038ae:	3302      	adds	r3, #2
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038b6:	4b3b      	ldr	r3, [pc, #236]	@ (80039a4 <HAL_GPIO_Init+0x350>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	43db      	mvns	r3, r3
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4013      	ands	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80038da:	4a32      	ldr	r2, [pc, #200]	@ (80039a4 <HAL_GPIO_Init+0x350>)
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80038e0:	4b30      	ldr	r3, [pc, #192]	@ (80039a4 <HAL_GPIO_Init+0x350>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	43db      	mvns	r3, r3
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4013      	ands	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4313      	orrs	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003904:	4a27      	ldr	r2, [pc, #156]	@ (80039a4 <HAL_GPIO_Init+0x350>)
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800390a:	4b26      	ldr	r3, [pc, #152]	@ (80039a4 <HAL_GPIO_Init+0x350>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	43db      	mvns	r3, r3
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4013      	ands	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800392e:	4a1d      	ldr	r2, [pc, #116]	@ (80039a4 <HAL_GPIO_Init+0x350>)
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003934:	4b1b      	ldr	r3, [pc, #108]	@ (80039a4 <HAL_GPIO_Init+0x350>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	43db      	mvns	r3, r3
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	4013      	ands	r3, r2
 8003942:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	4313      	orrs	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003958:	4a12      	ldr	r2, [pc, #72]	@ (80039a4 <HAL_GPIO_Init+0x350>)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	3301      	adds	r3, #1
 8003962:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	fa22 f303 	lsr.w	r3, r2, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	f47f ae78 	bne.w	8003664 <HAL_GPIO_Init+0x10>
  }
}
 8003974:	bf00      	nop
 8003976:	bf00      	nop
 8003978:	371c      	adds	r7, #28
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	40021000 	.word	0x40021000
 8003988:	40010000 	.word	0x40010000
 800398c:	48000400 	.word	0x48000400
 8003990:	48000800 	.word	0x48000800
 8003994:	48000c00 	.word	0x48000c00
 8003998:	48001000 	.word	0x48001000
 800399c:	48001400 	.word	0x48001400
 80039a0:	48001800 	.word	0x48001800
 80039a4:	40010400 	.word	0x40010400

080039a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	887b      	ldrh	r3, [r7, #2]
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039c0:	2301      	movs	r3, #1
 80039c2:	73fb      	strb	r3, [r7, #15]
 80039c4:	e001      	b.n	80039ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039c6:	2300      	movs	r3, #0
 80039c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	807b      	strh	r3, [r7, #2]
 80039e4:	4613      	mov	r3, r2
 80039e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039e8:	787b      	ldrb	r3, [r7, #1]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039ee:	887a      	ldrh	r2, [r7, #2]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039f4:	e002      	b.n	80039fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039f6:	887a      	ldrh	r2, [r7, #2]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a1a:	887a      	ldrh	r2, [r7, #2]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	041a      	lsls	r2, r3, #16
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	43d9      	mvns	r1, r3
 8003a26:	887b      	ldrh	r3, [r7, #2]
 8003a28:	400b      	ands	r3, r1
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	619a      	str	r2, [r3, #24]
}
 8003a30:	bf00      	nop
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	4603      	mov	r3, r0
 8003a44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a46:	4b08      	ldr	r3, [pc, #32]	@ (8003a68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a48:	695a      	ldr	r2, [r3, #20]
 8003a4a:	88fb      	ldrh	r3, [r7, #6]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d006      	beq.n	8003a60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a52:	4a05      	ldr	r2, [pc, #20]	@ (8003a68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a54:	88fb      	ldrh	r3, [r7, #6]
 8003a56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a58:	88fb      	ldrh	r3, [r7, #6]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fc fe98 	bl	8000790 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a60:	bf00      	nop
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40010400 	.word	0x40010400

08003a6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e08d      	b.n	8003b9a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7fd fd20 	bl	80014d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2224      	movs	r2, #36	@ 0x24
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0201 	bic.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003abc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003acc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d107      	bne.n	8003ae6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ae2:	609a      	str	r2, [r3, #8]
 8003ae4:	e006      	b.n	8003af4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003af2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d108      	bne.n	8003b0e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b0a:	605a      	str	r2, [r3, #4]
 8003b0c:	e007      	b.n	8003b1e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6812      	ldr	r2, [r2, #0]
 8003b28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	69d9      	ldr	r1, [r3, #28]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a1a      	ldr	r2, [r3, #32]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2220      	movs	r2, #32
 8003b86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b088      	sub	sp, #32
 8003ba8:	af02      	add	r7, sp, #8
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	4608      	mov	r0, r1
 8003bae:	4611      	mov	r1, r2
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	817b      	strh	r3, [r7, #10]
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	813b      	strh	r3, [r7, #8]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b20      	cmp	r3, #32
 8003bc8:	f040 80f9 	bne.w	8003dbe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d002      	beq.n	8003bd8 <HAL_I2C_Mem_Write+0x34>
 8003bd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d105      	bne.n	8003be4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bde:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0ed      	b.n	8003dc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d101      	bne.n	8003bf2 <HAL_I2C_Mem_Write+0x4e>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e0e6      	b.n	8003dc0 <HAL_I2C_Mem_Write+0x21c>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bfa:	f7fd fecd 	bl	8001998 <HAL_GetTick>
 8003bfe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	2319      	movs	r3, #25
 8003c06:	2201      	movs	r2, #1
 8003c08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 f955 	bl	8003ebc <I2C_WaitOnFlagUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e0d1      	b.n	8003dc0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2221      	movs	r2, #33	@ 0x21
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2240      	movs	r2, #64	@ 0x40
 8003c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a3a      	ldr	r2, [r7, #32]
 8003c36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003c3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c44:	88f8      	ldrh	r0, [r7, #6]
 8003c46:	893a      	ldrh	r2, [r7, #8]
 8003c48:	8979      	ldrh	r1, [r7, #10]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	9301      	str	r3, [sp, #4]
 8003c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	4603      	mov	r3, r0
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 f8b9 	bl	8003dcc <I2C_RequestMemoryWrite>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0a9      	b.n	8003dc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2bff      	cmp	r3, #255	@ 0xff
 8003c74:	d90e      	bls.n	8003c94 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	22ff      	movs	r2, #255	@ 0xff
 8003c7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	8979      	ldrh	r1, [r7, #10]
 8003c84:	2300      	movs	r3, #0
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 fad9 	bl	8004244 <I2C_TransferConfig>
 8003c92:	e00f      	b.n	8003cb4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	8979      	ldrh	r1, [r7, #10]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 fac8 	bl	8004244 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 f958 	bl	8003f6e <I2C_WaitOnTXISFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e07b      	b.n	8003dc0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ccc:	781a      	ldrb	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d034      	beq.n	8003d6c <HAL_I2C_Mem_Write+0x1c8>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d130      	bne.n	8003d6c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d10:	2200      	movs	r2, #0
 8003d12:	2180      	movs	r1, #128	@ 0x80
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 f8d1 	bl	8003ebc <I2C_WaitOnFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e04d      	b.n	8003dc0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	2bff      	cmp	r3, #255	@ 0xff
 8003d2c:	d90e      	bls.n	8003d4c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	22ff      	movs	r2, #255	@ 0xff
 8003d32:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	8979      	ldrh	r1, [r7, #10]
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 fa7d 	bl	8004244 <I2C_TransferConfig>
 8003d4a:	e00f      	b.n	8003d6c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	8979      	ldrh	r1, [r7, #10]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 fa6c 	bl	8004244 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d19e      	bne.n	8003cb4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 f93e 	bl	8003ffc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e01a      	b.n	8003dc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6859      	ldr	r1, [r3, #4]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003dc8 <HAL_I2C_Mem_Write+0x224>)
 8003d9e:	400b      	ands	r3, r1
 8003da0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	e000      	b.n	8003dc0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003dbe:	2302      	movs	r3, #2
  }
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	fe00e800 	.word	0xfe00e800

08003dcc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af02      	add	r7, sp, #8
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	4608      	mov	r0, r1
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	461a      	mov	r2, r3
 8003dda:	4603      	mov	r3, r0
 8003ddc:	817b      	strh	r3, [r7, #10]
 8003dde:	460b      	mov	r3, r1
 8003de0:	813b      	strh	r3, [r7, #8]
 8003de2:	4613      	mov	r3, r2
 8003de4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	8979      	ldrh	r1, [r7, #10]
 8003dec:	4b20      	ldr	r3, [pc, #128]	@ (8003e70 <I2C_RequestMemoryWrite+0xa4>)
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 fa25 	bl	8004244 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	69b9      	ldr	r1, [r7, #24]
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 f8b5 	bl	8003f6e <I2C_WaitOnTXISFlagUntilTimeout>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e02c      	b.n	8003e68 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d105      	bne.n	8003e20 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e14:	893b      	ldrh	r3, [r7, #8]
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e1e:	e015      	b.n	8003e4c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e20:	893b      	ldrh	r3, [r7, #8]
 8003e22:	0a1b      	lsrs	r3, r3, #8
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e2e:	69fa      	ldr	r2, [r7, #28]
 8003e30:	69b9      	ldr	r1, [r7, #24]
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f89b 	bl	8003f6e <I2C_WaitOnTXISFlagUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e012      	b.n	8003e68 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e42:	893b      	ldrh	r3, [r7, #8]
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	2200      	movs	r2, #0
 8003e54:	2180      	movs	r1, #128	@ 0x80
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 f830 	bl	8003ebc <I2C_WaitOnFlagUntilTimeout>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	80002000 	.word	0x80002000

08003e74 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d103      	bne.n	8003e92 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d007      	beq.n	8003eb0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699a      	ldr	r2, [r3, #24]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0201 	orr.w	r2, r2, #1
 8003eae:	619a      	str	r2, [r3, #24]
  }
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	603b      	str	r3, [r7, #0]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ecc:	e03b      	b.n	8003f46 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	6839      	ldr	r1, [r7, #0]
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 f8d6 	bl	8004084 <I2C_IsErrorOccurred>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e041      	b.n	8003f66 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee8:	d02d      	beq.n	8003f46 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eea:	f7fd fd55 	bl	8001998 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d302      	bcc.n	8003f00 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d122      	bne.n	8003f46 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	699a      	ldr	r2, [r3, #24]
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	bf0c      	ite	eq
 8003f10:	2301      	moveq	r3, #1
 8003f12:	2300      	movne	r3, #0
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	461a      	mov	r2, r3
 8003f18:	79fb      	ldrb	r3, [r7, #7]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d113      	bne.n	8003f46 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f22:	f043 0220 	orr.w	r2, r3, #32
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e00f      	b.n	8003f66 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699a      	ldr	r2, [r3, #24]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	bf0c      	ite	eq
 8003f56:	2301      	moveq	r3, #1
 8003f58:	2300      	movne	r3, #0
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	79fb      	ldrb	r3, [r7, #7]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d0b4      	beq.n	8003ece <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b084      	sub	sp, #16
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	60f8      	str	r0, [r7, #12]
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f7a:	e033      	b.n	8003fe4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	68b9      	ldr	r1, [r7, #8]
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 f87f 	bl	8004084 <I2C_IsErrorOccurred>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e031      	b.n	8003ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f96:	d025      	beq.n	8003fe4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f98:	f7fd fcfe 	bl	8001998 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d302      	bcc.n	8003fae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d11a      	bne.n	8003fe4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d013      	beq.n	8003fe4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc0:	f043 0220 	orr.w	r2, r3, #32
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e007      	b.n	8003ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d1c4      	bne.n	8003f7c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004008:	e02f      	b.n	800406a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	68b9      	ldr	r1, [r7, #8]
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 f838 	bl	8004084 <I2C_IsErrorOccurred>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e02d      	b.n	800407a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800401e:	f7fd fcbb 	bl	8001998 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	429a      	cmp	r2, r3
 800402c:	d302      	bcc.n	8004034 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d11a      	bne.n	800406a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	f003 0320 	and.w	r3, r3, #32
 800403e:	2b20      	cmp	r3, #32
 8004040:	d013      	beq.n	800406a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004046:	f043 0220 	orr.w	r2, r3, #32
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e007      	b.n	800407a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	f003 0320 	and.w	r3, r3, #32
 8004074:	2b20      	cmp	r3, #32
 8004076:	d1c8      	bne.n	800400a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08a      	sub	sp, #40	@ 0x28
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004090:	2300      	movs	r3, #0
 8004092:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800409e:	2300      	movs	r3, #0
 80040a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	f003 0310 	and.w	r3, r3, #16
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d068      	beq.n	8004182 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2210      	movs	r2, #16
 80040b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040b8:	e049      	b.n	800414e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c0:	d045      	beq.n	800414e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040c2:	f7fd fc69 	bl	8001998 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d302      	bcc.n	80040d8 <I2C_IsErrorOccurred+0x54>
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d13a      	bne.n	800414e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040fa:	d121      	bne.n	8004140 <I2C_IsErrorOccurred+0xbc>
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004102:	d01d      	beq.n	8004140 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004104:	7cfb      	ldrb	r3, [r7, #19]
 8004106:	2b20      	cmp	r3, #32
 8004108:	d01a      	beq.n	8004140 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004118:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800411a:	f7fd fc3d 	bl	8001998 <HAL_GetTick>
 800411e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004120:	e00e      	b.n	8004140 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004122:	f7fd fc39 	bl	8001998 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b19      	cmp	r3, #25
 800412e:	d907      	bls.n	8004140 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	f043 0320 	orr.w	r3, r3, #32
 8004136:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800413e:	e006      	b.n	800414e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	f003 0320 	and.w	r3, r3, #32
 800414a:	2b20      	cmp	r3, #32
 800414c:	d1e9      	bne.n	8004122 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	f003 0320 	and.w	r3, r3, #32
 8004158:	2b20      	cmp	r3, #32
 800415a:	d003      	beq.n	8004164 <I2C_IsErrorOccurred+0xe0>
 800415c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0aa      	beq.n	80040ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004164:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004168:	2b00      	cmp	r3, #0
 800416a:	d103      	bne.n	8004174 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2220      	movs	r2, #32
 8004172:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	f043 0304 	orr.w	r3, r3, #4
 800417a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00b      	beq.n	80041ac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	f043 0301 	orr.w	r3, r3, #1
 800419a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80041a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00b      	beq.n	80041ce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	f043 0308 	orr.w	r3, r3, #8
 80041bc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00b      	beq.n	80041f0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	f043 0302 	orr.w	r3, r3, #2
 80041de:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80041f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d01c      	beq.n	8004232 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f7ff fe3b 	bl	8003e74 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6859      	ldr	r1, [r3, #4]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	4b0d      	ldr	r3, [pc, #52]	@ (8004240 <I2C_IsErrorOccurred+0x1bc>)
 800420a:	400b      	ands	r3, r1
 800420c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	431a      	orrs	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2220      	movs	r2, #32
 800421e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004232:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004236:	4618      	mov	r0, r3
 8004238:	3728      	adds	r7, #40	@ 0x28
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	fe00e800 	.word	0xfe00e800

08004244 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	607b      	str	r3, [r7, #4]
 800424e:	460b      	mov	r3, r1
 8004250:	817b      	strh	r3, [r7, #10]
 8004252:	4613      	mov	r3, r2
 8004254:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004256:	897b      	ldrh	r3, [r7, #10]
 8004258:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800425c:	7a7b      	ldrb	r3, [r7, #9]
 800425e:	041b      	lsls	r3, r3, #16
 8004260:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004264:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	4313      	orrs	r3, r2
 800426e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004272:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	0d5b      	lsrs	r3, r3, #21
 800427e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004282:	4b08      	ldr	r3, [pc, #32]	@ (80042a4 <I2C_TransferConfig+0x60>)
 8004284:	430b      	orrs	r3, r1
 8004286:	43db      	mvns	r3, r3
 8004288:	ea02 0103 	and.w	r1, r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	430a      	orrs	r2, r1
 8004294:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004296:	bf00      	nop
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	03ff63ff 	.word	0x03ff63ff

080042a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b20      	cmp	r3, #32
 80042bc:	d138      	bne.n	8004330 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e032      	b.n	8004332 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2224      	movs	r2, #36	@ 0x24
 80042d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0201 	bic.w	r2, r2, #1
 80042ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80042fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6819      	ldr	r1, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0201 	orr.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800432c:	2300      	movs	r3, #0
 800432e:	e000      	b.n	8004332 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004330:	2302      	movs	r3, #2
  }
}
 8004332:	4618      	mov	r0, r3
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800433e:	b480      	push	{r7}
 8004340:	b085      	sub	sp, #20
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b20      	cmp	r3, #32
 8004352:	d139      	bne.n	80043c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800435a:	2b01      	cmp	r3, #1
 800435c:	d101      	bne.n	8004362 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800435e:	2302      	movs	r3, #2
 8004360:	e033      	b.n	80043ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2224      	movs	r2, #36	@ 0x24
 800436e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0201 	bic.w	r2, r2, #1
 8004380:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004390:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	021b      	lsls	r3, r3, #8
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	4313      	orrs	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	e000      	b.n	80043ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043c8:	2302      	movs	r3, #2
  }
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
	...

080043d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80043dc:	4b04      	ldr	r3, [pc, #16]	@ (80043f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	40007000 	.word	0x40007000

080043f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004402:	d130      	bne.n	8004466 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004404:	4b23      	ldr	r3, [pc, #140]	@ (8004494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800440c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004410:	d038      	beq.n	8004484 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004412:	4b20      	ldr	r3, [pc, #128]	@ (8004494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800441a:	4a1e      	ldr	r2, [pc, #120]	@ (8004494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800441c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004420:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004422:	4b1d      	ldr	r3, [pc, #116]	@ (8004498 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2232      	movs	r2, #50	@ 0x32
 8004428:	fb02 f303 	mul.w	r3, r2, r3
 800442c:	4a1b      	ldr	r2, [pc, #108]	@ (800449c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800442e:	fba2 2303 	umull	r2, r3, r2, r3
 8004432:	0c9b      	lsrs	r3, r3, #18
 8004434:	3301      	adds	r3, #1
 8004436:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004438:	e002      	b.n	8004440 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	3b01      	subs	r3, #1
 800443e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004440:	4b14      	ldr	r3, [pc, #80]	@ (8004494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004448:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800444c:	d102      	bne.n	8004454 <HAL_PWREx_ControlVoltageScaling+0x60>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1f2      	bne.n	800443a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004454:	4b0f      	ldr	r3, [pc, #60]	@ (8004494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800445c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004460:	d110      	bne.n	8004484 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e00f      	b.n	8004486 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004466:	4b0b      	ldr	r3, [pc, #44]	@ (8004494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800446e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004472:	d007      	beq.n	8004484 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004474:	4b07      	ldr	r3, [pc, #28]	@ (8004494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800447c:	4a05      	ldr	r2, [pc, #20]	@ (8004494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800447e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004482:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40007000 	.word	0x40007000
 8004498:	20000014 	.word	0x20000014
 800449c:	431bde83 	.word	0x431bde83

080044a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b088      	sub	sp, #32
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e3ca      	b.n	8004c48 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044b2:	4b97      	ldr	r3, [pc, #604]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 030c 	and.w	r3, r3, #12
 80044ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044bc:	4b94      	ldr	r3, [pc, #592]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f003 0303 	and.w	r3, r3, #3
 80044c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0310 	and.w	r3, r3, #16
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 80e4 	beq.w	800469c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d007      	beq.n	80044ea <HAL_RCC_OscConfig+0x4a>
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	2b0c      	cmp	r3, #12
 80044de:	f040 808b 	bne.w	80045f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	f040 8087 	bne.w	80045f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044ea:	4b89      	ldr	r3, [pc, #548]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d005      	beq.n	8004502 <HAL_RCC_OscConfig+0x62>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e3a2      	b.n	8004c48 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1a      	ldr	r2, [r3, #32]
 8004506:	4b82      	ldr	r3, [pc, #520]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d004      	beq.n	800451c <HAL_RCC_OscConfig+0x7c>
 8004512:	4b7f      	ldr	r3, [pc, #508]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800451a:	e005      	b.n	8004528 <HAL_RCC_OscConfig+0x88>
 800451c:	4b7c      	ldr	r3, [pc, #496]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 800451e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004522:	091b      	lsrs	r3, r3, #4
 8004524:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004528:	4293      	cmp	r3, r2
 800452a:	d223      	bcs.n	8004574 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	4618      	mov	r0, r3
 8004532:	f000 fd55 	bl	8004fe0 <RCC_SetFlashLatencyFromMSIRange>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e383      	b.n	8004c48 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004540:	4b73      	ldr	r3, [pc, #460]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a72      	ldr	r2, [pc, #456]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 8004546:	f043 0308 	orr.w	r3, r3, #8
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	4b70      	ldr	r3, [pc, #448]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	496d      	ldr	r1, [pc, #436]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 800455a:	4313      	orrs	r3, r2
 800455c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800455e:	4b6c      	ldr	r3, [pc, #432]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	021b      	lsls	r3, r3, #8
 800456c:	4968      	ldr	r1, [pc, #416]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 800456e:	4313      	orrs	r3, r2
 8004570:	604b      	str	r3, [r1, #4]
 8004572:	e025      	b.n	80045c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004574:	4b66      	ldr	r3, [pc, #408]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a65      	ldr	r2, [pc, #404]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 800457a:	f043 0308 	orr.w	r3, r3, #8
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	4b63      	ldr	r3, [pc, #396]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	4960      	ldr	r1, [pc, #384]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 800458e:	4313      	orrs	r3, r2
 8004590:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004592:	4b5f      	ldr	r3, [pc, #380]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	021b      	lsls	r3, r3, #8
 80045a0:	495b      	ldr	r1, [pc, #364]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d109      	bne.n	80045c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 fd15 	bl	8004fe0 <RCC_SetFlashLatencyFromMSIRange>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e343      	b.n	8004c48 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045c0:	f000 fc4a 	bl	8004e58 <HAL_RCC_GetSysClockFreq>
 80045c4:	4602      	mov	r2, r0
 80045c6:	4b52      	ldr	r3, [pc, #328]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	091b      	lsrs	r3, r3, #4
 80045cc:	f003 030f 	and.w	r3, r3, #15
 80045d0:	4950      	ldr	r1, [pc, #320]	@ (8004714 <HAL_RCC_OscConfig+0x274>)
 80045d2:	5ccb      	ldrb	r3, [r1, r3]
 80045d4:	f003 031f 	and.w	r3, r3, #31
 80045d8:	fa22 f303 	lsr.w	r3, r2, r3
 80045dc:	4a4e      	ldr	r2, [pc, #312]	@ (8004718 <HAL_RCC_OscConfig+0x278>)
 80045de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045e0:	4b4e      	ldr	r3, [pc, #312]	@ (800471c <HAL_RCC_OscConfig+0x27c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7fd f987 	bl	80018f8 <HAL_InitTick>
 80045ea:	4603      	mov	r3, r0
 80045ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045ee:	7bfb      	ldrb	r3, [r7, #15]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d052      	beq.n	800469a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
 80045f6:	e327      	b.n	8004c48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d032      	beq.n	8004666 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004600:	4b43      	ldr	r3, [pc, #268]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a42      	ldr	r2, [pc, #264]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 8004606:	f043 0301 	orr.w	r3, r3, #1
 800460a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800460c:	f7fd f9c4 	bl	8001998 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004614:	f7fd f9c0 	bl	8001998 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e310      	b.n	8004c48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004626:	4b3a      	ldr	r3, [pc, #232]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f0      	beq.n	8004614 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004632:	4b37      	ldr	r3, [pc, #220]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a36      	ldr	r2, [pc, #216]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 8004638:	f043 0308 	orr.w	r3, r3, #8
 800463c:	6013      	str	r3, [r2, #0]
 800463e:	4b34      	ldr	r3, [pc, #208]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	4931      	ldr	r1, [pc, #196]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 800464c:	4313      	orrs	r3, r2
 800464e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004650:	4b2f      	ldr	r3, [pc, #188]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	021b      	lsls	r3, r3, #8
 800465e:	492c      	ldr	r1, [pc, #176]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 8004660:	4313      	orrs	r3, r2
 8004662:	604b      	str	r3, [r1, #4]
 8004664:	e01a      	b.n	800469c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004666:	4b2a      	ldr	r3, [pc, #168]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a29      	ldr	r2, [pc, #164]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 800466c:	f023 0301 	bic.w	r3, r3, #1
 8004670:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004672:	f7fd f991 	bl	8001998 <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800467a:	f7fd f98d 	bl	8001998 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e2dd      	b.n	8004c48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800468c:	4b20      	ldr	r3, [pc, #128]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1f0      	bne.n	800467a <HAL_RCC_OscConfig+0x1da>
 8004698:	e000      	b.n	800469c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800469a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d074      	beq.n	8004792 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	2b08      	cmp	r3, #8
 80046ac:	d005      	beq.n	80046ba <HAL_RCC_OscConfig+0x21a>
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	2b0c      	cmp	r3, #12
 80046b2:	d10e      	bne.n	80046d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d10b      	bne.n	80046d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ba:	4b15      	ldr	r3, [pc, #84]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d064      	beq.n	8004790 <HAL_RCC_OscConfig+0x2f0>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d160      	bne.n	8004790 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e2ba      	b.n	8004c48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046da:	d106      	bne.n	80046ea <HAL_RCC_OscConfig+0x24a>
 80046dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a0b      	ldr	r2, [pc, #44]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 80046e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046e6:	6013      	str	r3, [r2, #0]
 80046e8:	e026      	b.n	8004738 <HAL_RCC_OscConfig+0x298>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046f2:	d115      	bne.n	8004720 <HAL_RCC_OscConfig+0x280>
 80046f4:	4b06      	ldr	r3, [pc, #24]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a05      	ldr	r2, [pc, #20]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 80046fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046fe:	6013      	str	r3, [r2, #0]
 8004700:	4b03      	ldr	r3, [pc, #12]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a02      	ldr	r2, [pc, #8]	@ (8004710 <HAL_RCC_OscConfig+0x270>)
 8004706:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800470a:	6013      	str	r3, [r2, #0]
 800470c:	e014      	b.n	8004738 <HAL_RCC_OscConfig+0x298>
 800470e:	bf00      	nop
 8004710:	40021000 	.word	0x40021000
 8004714:	08008300 	.word	0x08008300
 8004718:	20000014 	.word	0x20000014
 800471c:	20000018 	.word	0x20000018
 8004720:	4ba0      	ldr	r3, [pc, #640]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a9f      	ldr	r2, [pc, #636]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 8004726:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800472a:	6013      	str	r3, [r2, #0]
 800472c:	4b9d      	ldr	r3, [pc, #628]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a9c      	ldr	r2, [pc, #624]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 8004732:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004736:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d013      	beq.n	8004768 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004740:	f7fd f92a 	bl	8001998 <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004748:	f7fd f926 	bl	8001998 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b64      	cmp	r3, #100	@ 0x64
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e276      	b.n	8004c48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800475a:	4b92      	ldr	r3, [pc, #584]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0f0      	beq.n	8004748 <HAL_RCC_OscConfig+0x2a8>
 8004766:	e014      	b.n	8004792 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004768:	f7fd f916 	bl	8001998 <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004770:	f7fd f912 	bl	8001998 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b64      	cmp	r3, #100	@ 0x64
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e262      	b.n	8004c48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004782:	4b88      	ldr	r3, [pc, #544]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1f0      	bne.n	8004770 <HAL_RCC_OscConfig+0x2d0>
 800478e:	e000      	b.n	8004792 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d060      	beq.n	8004860 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	2b04      	cmp	r3, #4
 80047a2:	d005      	beq.n	80047b0 <HAL_RCC_OscConfig+0x310>
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	2b0c      	cmp	r3, #12
 80047a8:	d119      	bne.n	80047de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d116      	bne.n	80047de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047b0:	4b7c      	ldr	r3, [pc, #496]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d005      	beq.n	80047c8 <HAL_RCC_OscConfig+0x328>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e23f      	b.n	8004c48 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c8:	4b76      	ldr	r3, [pc, #472]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	061b      	lsls	r3, r3, #24
 80047d6:	4973      	ldr	r1, [pc, #460]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047dc:	e040      	b.n	8004860 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d023      	beq.n	800482e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047e6:	4b6f      	ldr	r3, [pc, #444]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a6e      	ldr	r2, [pc, #440]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 80047ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f2:	f7fd f8d1 	bl	8001998 <HAL_GetTick>
 80047f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047f8:	e008      	b.n	800480c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047fa:	f7fd f8cd 	bl	8001998 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e21d      	b.n	8004c48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800480c:	4b65      	ldr	r3, [pc, #404]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0f0      	beq.n	80047fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004818:	4b62      	ldr	r3, [pc, #392]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	061b      	lsls	r3, r3, #24
 8004826:	495f      	ldr	r1, [pc, #380]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 8004828:	4313      	orrs	r3, r2
 800482a:	604b      	str	r3, [r1, #4]
 800482c:	e018      	b.n	8004860 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800482e:	4b5d      	ldr	r3, [pc, #372]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a5c      	ldr	r2, [pc, #368]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 8004834:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483a:	f7fd f8ad 	bl	8001998 <HAL_GetTick>
 800483e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004842:	f7fd f8a9 	bl	8001998 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e1f9      	b.n	8004c48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004854:	4b53      	ldr	r3, [pc, #332]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1f0      	bne.n	8004842 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0308 	and.w	r3, r3, #8
 8004868:	2b00      	cmp	r3, #0
 800486a:	d03c      	beq.n	80048e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d01c      	beq.n	80048ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004874:	4b4b      	ldr	r3, [pc, #300]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 8004876:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800487a:	4a4a      	ldr	r2, [pc, #296]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 800487c:	f043 0301 	orr.w	r3, r3, #1
 8004880:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004884:	f7fd f888 	bl	8001998 <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800488a:	e008      	b.n	800489e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800488c:	f7fd f884 	bl	8001998 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e1d4      	b.n	8004c48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800489e:	4b41      	ldr	r3, [pc, #260]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 80048a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d0ef      	beq.n	800488c <HAL_RCC_OscConfig+0x3ec>
 80048ac:	e01b      	b.n	80048e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048ae:	4b3d      	ldr	r3, [pc, #244]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 80048b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048b4:	4a3b      	ldr	r2, [pc, #236]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 80048b6:	f023 0301 	bic.w	r3, r3, #1
 80048ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048be:	f7fd f86b 	bl	8001998 <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048c4:	e008      	b.n	80048d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048c6:	f7fd f867 	bl	8001998 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e1b7      	b.n	8004c48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048d8:	4b32      	ldr	r3, [pc, #200]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 80048da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1ef      	bne.n	80048c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f000 80a6 	beq.w	8004a40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048f4:	2300      	movs	r3, #0
 80048f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048f8:	4b2a      	ldr	r3, [pc, #168]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 80048fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10d      	bne.n	8004920 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004904:	4b27      	ldr	r3, [pc, #156]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 8004906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004908:	4a26      	ldr	r2, [pc, #152]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 800490a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800490e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004910:	4b24      	ldr	r3, [pc, #144]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 8004912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004914:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004918:	60bb      	str	r3, [r7, #8]
 800491a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800491c:	2301      	movs	r3, #1
 800491e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004920:	4b21      	ldr	r3, [pc, #132]	@ (80049a8 <HAL_RCC_OscConfig+0x508>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004928:	2b00      	cmp	r3, #0
 800492a:	d118      	bne.n	800495e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800492c:	4b1e      	ldr	r3, [pc, #120]	@ (80049a8 <HAL_RCC_OscConfig+0x508>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a1d      	ldr	r2, [pc, #116]	@ (80049a8 <HAL_RCC_OscConfig+0x508>)
 8004932:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004936:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004938:	f7fd f82e 	bl	8001998 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004940:	f7fd f82a 	bl	8001998 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e17a      	b.n	8004c48 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004952:	4b15      	ldr	r3, [pc, #84]	@ (80049a8 <HAL_RCC_OscConfig+0x508>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0f0      	beq.n	8004940 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d108      	bne.n	8004978 <HAL_RCC_OscConfig+0x4d8>
 8004966:	4b0f      	ldr	r3, [pc, #60]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 8004968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800496c:	4a0d      	ldr	r2, [pc, #52]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 800496e:	f043 0301 	orr.w	r3, r3, #1
 8004972:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004976:	e029      	b.n	80049cc <HAL_RCC_OscConfig+0x52c>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	2b05      	cmp	r3, #5
 800497e:	d115      	bne.n	80049ac <HAL_RCC_OscConfig+0x50c>
 8004980:	4b08      	ldr	r3, [pc, #32]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 8004982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004986:	4a07      	ldr	r2, [pc, #28]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 8004988:	f043 0304 	orr.w	r3, r3, #4
 800498c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004990:	4b04      	ldr	r3, [pc, #16]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 8004992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004996:	4a03      	ldr	r2, [pc, #12]	@ (80049a4 <HAL_RCC_OscConfig+0x504>)
 8004998:	f043 0301 	orr.w	r3, r3, #1
 800499c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049a0:	e014      	b.n	80049cc <HAL_RCC_OscConfig+0x52c>
 80049a2:	bf00      	nop
 80049a4:	40021000 	.word	0x40021000
 80049a8:	40007000 	.word	0x40007000
 80049ac:	4b9c      	ldr	r3, [pc, #624]	@ (8004c20 <HAL_RCC_OscConfig+0x780>)
 80049ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b2:	4a9b      	ldr	r2, [pc, #620]	@ (8004c20 <HAL_RCC_OscConfig+0x780>)
 80049b4:	f023 0301 	bic.w	r3, r3, #1
 80049b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049bc:	4b98      	ldr	r3, [pc, #608]	@ (8004c20 <HAL_RCC_OscConfig+0x780>)
 80049be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c2:	4a97      	ldr	r2, [pc, #604]	@ (8004c20 <HAL_RCC_OscConfig+0x780>)
 80049c4:	f023 0304 	bic.w	r3, r3, #4
 80049c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d016      	beq.n	8004a02 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d4:	f7fc ffe0 	bl	8001998 <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049da:	e00a      	b.n	80049f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049dc:	f7fc ffdc 	bl	8001998 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e12a      	b.n	8004c48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f2:	4b8b      	ldr	r3, [pc, #556]	@ (8004c20 <HAL_RCC_OscConfig+0x780>)
 80049f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0ed      	beq.n	80049dc <HAL_RCC_OscConfig+0x53c>
 8004a00:	e015      	b.n	8004a2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a02:	f7fc ffc9 	bl	8001998 <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a08:	e00a      	b.n	8004a20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a0a:	f7fc ffc5 	bl	8001998 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e113      	b.n	8004c48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a20:	4b7f      	ldr	r3, [pc, #508]	@ (8004c20 <HAL_RCC_OscConfig+0x780>)
 8004a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1ed      	bne.n	8004a0a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a2e:	7ffb      	ldrb	r3, [r7, #31]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d105      	bne.n	8004a40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a34:	4b7a      	ldr	r3, [pc, #488]	@ (8004c20 <HAL_RCC_OscConfig+0x780>)
 8004a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a38:	4a79      	ldr	r2, [pc, #484]	@ (8004c20 <HAL_RCC_OscConfig+0x780>)
 8004a3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a3e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 80fe 	beq.w	8004c46 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	f040 80d0 	bne.w	8004bf4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a54:	4b72      	ldr	r3, [pc, #456]	@ (8004c20 <HAL_RCC_OscConfig+0x780>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f003 0203 	and.w	r2, r3, #3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d130      	bne.n	8004aca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a72:	3b01      	subs	r3, #1
 8004a74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d127      	bne.n	8004aca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a84:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d11f      	bne.n	8004aca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a94:	2a07      	cmp	r2, #7
 8004a96:	bf14      	ite	ne
 8004a98:	2201      	movne	r2, #1
 8004a9a:	2200      	moveq	r2, #0
 8004a9c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d113      	bne.n	8004aca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aac:	085b      	lsrs	r3, r3, #1
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d109      	bne.n	8004aca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac0:	085b      	lsrs	r3, r3, #1
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d06e      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	2b0c      	cmp	r3, #12
 8004ace:	d069      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ad0:	4b53      	ldr	r3, [pc, #332]	@ (8004c20 <HAL_RCC_OscConfig+0x780>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d105      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004adc:	4b50      	ldr	r3, [pc, #320]	@ (8004c20 <HAL_RCC_OscConfig+0x780>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e0ad      	b.n	8004c48 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004aec:	4b4c      	ldr	r3, [pc, #304]	@ (8004c20 <HAL_RCC_OscConfig+0x780>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a4b      	ldr	r2, [pc, #300]	@ (8004c20 <HAL_RCC_OscConfig+0x780>)
 8004af2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004af6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004af8:	f7fc ff4e 	bl	8001998 <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b00:	f7fc ff4a 	bl	8001998 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e09a      	b.n	8004c48 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b12:	4b43      	ldr	r3, [pc, #268]	@ (8004c20 <HAL_RCC_OscConfig+0x780>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1f0      	bne.n	8004b00 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b1e:	4b40      	ldr	r3, [pc, #256]	@ (8004c20 <HAL_RCC_OscConfig+0x780>)
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	4b40      	ldr	r3, [pc, #256]	@ (8004c24 <HAL_RCC_OscConfig+0x784>)
 8004b24:	4013      	ands	r3, r2
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b2e:	3a01      	subs	r2, #1
 8004b30:	0112      	lsls	r2, r2, #4
 8004b32:	4311      	orrs	r1, r2
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b38:	0212      	lsls	r2, r2, #8
 8004b3a:	4311      	orrs	r1, r2
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b40:	0852      	lsrs	r2, r2, #1
 8004b42:	3a01      	subs	r2, #1
 8004b44:	0552      	lsls	r2, r2, #21
 8004b46:	4311      	orrs	r1, r2
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004b4c:	0852      	lsrs	r2, r2, #1
 8004b4e:	3a01      	subs	r2, #1
 8004b50:	0652      	lsls	r2, r2, #25
 8004b52:	4311      	orrs	r1, r2
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b58:	0912      	lsrs	r2, r2, #4
 8004b5a:	0452      	lsls	r2, r2, #17
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	4930      	ldr	r1, [pc, #192]	@ (8004c20 <HAL_RCC_OscConfig+0x780>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b64:	4b2e      	ldr	r3, [pc, #184]	@ (8004c20 <HAL_RCC_OscConfig+0x780>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a2d      	ldr	r2, [pc, #180]	@ (8004c20 <HAL_RCC_OscConfig+0x780>)
 8004b6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b70:	4b2b      	ldr	r3, [pc, #172]	@ (8004c20 <HAL_RCC_OscConfig+0x780>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	4a2a      	ldr	r2, [pc, #168]	@ (8004c20 <HAL_RCC_OscConfig+0x780>)
 8004b76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b7c:	f7fc ff0c 	bl	8001998 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b84:	f7fc ff08 	bl	8001998 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e058      	b.n	8004c48 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b96:	4b22      	ldr	r3, [pc, #136]	@ (8004c20 <HAL_RCC_OscConfig+0x780>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0f0      	beq.n	8004b84 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ba2:	e050      	b.n	8004c46 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e04f      	b.n	8004c48 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8004c20 <HAL_RCC_OscConfig+0x780>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d148      	bne.n	8004c46 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8004c20 <HAL_RCC_OscConfig+0x780>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a19      	ldr	r2, [pc, #100]	@ (8004c20 <HAL_RCC_OscConfig+0x780>)
 8004bba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bbe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bc0:	4b17      	ldr	r3, [pc, #92]	@ (8004c20 <HAL_RCC_OscConfig+0x780>)
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	4a16      	ldr	r2, [pc, #88]	@ (8004c20 <HAL_RCC_OscConfig+0x780>)
 8004bc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bcc:	f7fc fee4 	bl	8001998 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd4:	f7fc fee0 	bl	8001998 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e030      	b.n	8004c48 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be6:	4b0e      	ldr	r3, [pc, #56]	@ (8004c20 <HAL_RCC_OscConfig+0x780>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0f0      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x734>
 8004bf2:	e028      	b.n	8004c46 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	2b0c      	cmp	r3, #12
 8004bf8:	d023      	beq.n	8004c42 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bfa:	4b09      	ldr	r3, [pc, #36]	@ (8004c20 <HAL_RCC_OscConfig+0x780>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a08      	ldr	r2, [pc, #32]	@ (8004c20 <HAL_RCC_OscConfig+0x780>)
 8004c00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c06:	f7fc fec7 	bl	8001998 <HAL_GetTick>
 8004c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c0c:	e00c      	b.n	8004c28 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c0e:	f7fc fec3 	bl	8001998 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d905      	bls.n	8004c28 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e013      	b.n	8004c48 <HAL_RCC_OscConfig+0x7a8>
 8004c20:	40021000 	.word	0x40021000
 8004c24:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c28:	4b09      	ldr	r3, [pc, #36]	@ (8004c50 <HAL_RCC_OscConfig+0x7b0>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1ec      	bne.n	8004c0e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c34:	4b06      	ldr	r3, [pc, #24]	@ (8004c50 <HAL_RCC_OscConfig+0x7b0>)
 8004c36:	68da      	ldr	r2, [r3, #12]
 8004c38:	4905      	ldr	r1, [pc, #20]	@ (8004c50 <HAL_RCC_OscConfig+0x7b0>)
 8004c3a:	4b06      	ldr	r3, [pc, #24]	@ (8004c54 <HAL_RCC_OscConfig+0x7b4>)
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	60cb      	str	r3, [r1, #12]
 8004c40:	e001      	b.n	8004c46 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e000      	b.n	8004c48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3720      	adds	r7, #32
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40021000 	.word	0x40021000
 8004c54:	feeefffc 	.word	0xfeeefffc

08004c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e0e7      	b.n	8004e3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c6c:	4b75      	ldr	r3, [pc, #468]	@ (8004e44 <HAL_RCC_ClockConfig+0x1ec>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d910      	bls.n	8004c9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c7a:	4b72      	ldr	r3, [pc, #456]	@ (8004e44 <HAL_RCC_ClockConfig+0x1ec>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f023 0207 	bic.w	r2, r3, #7
 8004c82:	4970      	ldr	r1, [pc, #448]	@ (8004e44 <HAL_RCC_ClockConfig+0x1ec>)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c8a:	4b6e      	ldr	r3, [pc, #440]	@ (8004e44 <HAL_RCC_ClockConfig+0x1ec>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d001      	beq.n	8004c9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e0cf      	b.n	8004e3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d010      	beq.n	8004cca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689a      	ldr	r2, [r3, #8]
 8004cac:	4b66      	ldr	r3, [pc, #408]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f0>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d908      	bls.n	8004cca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cb8:	4b63      	ldr	r3, [pc, #396]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f0>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	4960      	ldr	r1, [pc, #384]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f0>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d04c      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2b03      	cmp	r3, #3
 8004cdc:	d107      	bne.n	8004cee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cde:	4b5a      	ldr	r3, [pc, #360]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f0>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d121      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e0a6      	b.n	8004e3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d107      	bne.n	8004d06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cf6:	4b54      	ldr	r3, [pc, #336]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f0>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d115      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e09a      	b.n	8004e3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d107      	bne.n	8004d1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d0e:	4b4e      	ldr	r3, [pc, #312]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f0>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d109      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e08e      	b.n	8004e3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d1e:	4b4a      	ldr	r3, [pc, #296]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f0>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e086      	b.n	8004e3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d2e:	4b46      	ldr	r3, [pc, #280]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f0>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f023 0203 	bic.w	r2, r3, #3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	4943      	ldr	r1, [pc, #268]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f0>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d40:	f7fc fe2a 	bl	8001998 <HAL_GetTick>
 8004d44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d46:	e00a      	b.n	8004d5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d48:	f7fc fe26 	bl	8001998 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e06e      	b.n	8004e3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d5e:	4b3a      	ldr	r3, [pc, #232]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f0>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 020c 	and.w	r2, r3, #12
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d1eb      	bne.n	8004d48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d010      	beq.n	8004d9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	4b31      	ldr	r3, [pc, #196]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f0>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d208      	bcs.n	8004d9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d8c:	4b2e      	ldr	r3, [pc, #184]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f0>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	492b      	ldr	r1, [pc, #172]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f0>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d9e:	4b29      	ldr	r3, [pc, #164]	@ (8004e44 <HAL_RCC_ClockConfig+0x1ec>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d210      	bcs.n	8004dce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dac:	4b25      	ldr	r3, [pc, #148]	@ (8004e44 <HAL_RCC_ClockConfig+0x1ec>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f023 0207 	bic.w	r2, r3, #7
 8004db4:	4923      	ldr	r1, [pc, #140]	@ (8004e44 <HAL_RCC_ClockConfig+0x1ec>)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dbc:	4b21      	ldr	r3, [pc, #132]	@ (8004e44 <HAL_RCC_ClockConfig+0x1ec>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0307 	and.w	r3, r3, #7
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d001      	beq.n	8004dce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e036      	b.n	8004e3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0304 	and.w	r3, r3, #4
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d008      	beq.n	8004dec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dda:	4b1b      	ldr	r3, [pc, #108]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f0>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	4918      	ldr	r1, [pc, #96]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f0>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0308 	and.w	r3, r3, #8
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d009      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004df8:	4b13      	ldr	r3, [pc, #76]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f0>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	4910      	ldr	r1, [pc, #64]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f0>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e0c:	f000 f824 	bl	8004e58 <HAL_RCC_GetSysClockFreq>
 8004e10:	4602      	mov	r2, r0
 8004e12:	4b0d      	ldr	r3, [pc, #52]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f0>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	091b      	lsrs	r3, r3, #4
 8004e18:	f003 030f 	and.w	r3, r3, #15
 8004e1c:	490b      	ldr	r1, [pc, #44]	@ (8004e4c <HAL_RCC_ClockConfig+0x1f4>)
 8004e1e:	5ccb      	ldrb	r3, [r1, r3]
 8004e20:	f003 031f 	and.w	r3, r3, #31
 8004e24:	fa22 f303 	lsr.w	r3, r2, r3
 8004e28:	4a09      	ldr	r2, [pc, #36]	@ (8004e50 <HAL_RCC_ClockConfig+0x1f8>)
 8004e2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e2c:	4b09      	ldr	r3, [pc, #36]	@ (8004e54 <HAL_RCC_ClockConfig+0x1fc>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7fc fd61 	bl	80018f8 <HAL_InitTick>
 8004e36:	4603      	mov	r3, r0
 8004e38:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e3a:	7afb      	ldrb	r3, [r7, #11]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40022000 	.word	0x40022000
 8004e48:	40021000 	.word	0x40021000
 8004e4c:	08008300 	.word	0x08008300
 8004e50:	20000014 	.word	0x20000014
 8004e54:	20000018 	.word	0x20000018

08004e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b089      	sub	sp, #36	@ 0x24
 8004e5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	61fb      	str	r3, [r7, #28]
 8004e62:	2300      	movs	r3, #0
 8004e64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e66:	4b3e      	ldr	r3, [pc, #248]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f003 030c 	and.w	r3, r3, #12
 8004e6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e70:	4b3b      	ldr	r3, [pc, #236]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f003 0303 	and.w	r3, r3, #3
 8004e78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d005      	beq.n	8004e8c <HAL_RCC_GetSysClockFreq+0x34>
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	2b0c      	cmp	r3, #12
 8004e84:	d121      	bne.n	8004eca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d11e      	bne.n	8004eca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e8c:	4b34      	ldr	r3, [pc, #208]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0308 	and.w	r3, r3, #8
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d107      	bne.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e98:	4b31      	ldr	r3, [pc, #196]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e9e:	0a1b      	lsrs	r3, r3, #8
 8004ea0:	f003 030f 	and.w	r3, r3, #15
 8004ea4:	61fb      	str	r3, [r7, #28]
 8004ea6:	e005      	b.n	8004eb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	091b      	lsrs	r3, r3, #4
 8004eae:	f003 030f 	and.w	r3, r3, #15
 8004eb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004eb4:	4a2b      	ldr	r2, [pc, #172]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ebc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10d      	bne.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ec8:	e00a      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	2b04      	cmp	r3, #4
 8004ece:	d102      	bne.n	8004ed6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ed0:	4b25      	ldr	r3, [pc, #148]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ed2:	61bb      	str	r3, [r7, #24]
 8004ed4:	e004      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	d101      	bne.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004edc:	4b23      	ldr	r3, [pc, #140]	@ (8004f6c <HAL_RCC_GetSysClockFreq+0x114>)
 8004ede:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	2b0c      	cmp	r3, #12
 8004ee4:	d134      	bne.n	8004f50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f003 0303 	and.w	r3, r3, #3
 8004eee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d003      	beq.n	8004efe <HAL_RCC_GetSysClockFreq+0xa6>
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2b03      	cmp	r3, #3
 8004efa:	d003      	beq.n	8004f04 <HAL_RCC_GetSysClockFreq+0xac>
 8004efc:	e005      	b.n	8004f0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004efe:	4b1a      	ldr	r3, [pc, #104]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f00:	617b      	str	r3, [r7, #20]
      break;
 8004f02:	e005      	b.n	8004f10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f04:	4b19      	ldr	r3, [pc, #100]	@ (8004f6c <HAL_RCC_GetSysClockFreq+0x114>)
 8004f06:	617b      	str	r3, [r7, #20]
      break;
 8004f08:	e002      	b.n	8004f10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	617b      	str	r3, [r7, #20]
      break;
 8004f0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f10:	4b13      	ldr	r3, [pc, #76]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	091b      	lsrs	r3, r3, #4
 8004f16:	f003 0307 	and.w	r3, r3, #7
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f1e:	4b10      	ldr	r3, [pc, #64]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	0a1b      	lsrs	r3, r3, #8
 8004f24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	fb03 f202 	mul.w	r2, r3, r2
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f36:	4b0a      	ldr	r3, [pc, #40]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	0e5b      	lsrs	r3, r3, #25
 8004f3c:	f003 0303 	and.w	r3, r3, #3
 8004f40:	3301      	adds	r3, #1
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f50:	69bb      	ldr	r3, [r7, #24]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3724      	adds	r7, #36	@ 0x24
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	40021000 	.word	0x40021000
 8004f64:	08008318 	.word	0x08008318
 8004f68:	00f42400 	.word	0x00f42400
 8004f6c:	007a1200 	.word	0x007a1200

08004f70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f74:	4b03      	ldr	r3, [pc, #12]	@ (8004f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f76:	681b      	ldr	r3, [r3, #0]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	20000014 	.word	0x20000014

08004f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f8c:	f7ff fff0 	bl	8004f70 <HAL_RCC_GetHCLKFreq>
 8004f90:	4602      	mov	r2, r0
 8004f92:	4b06      	ldr	r3, [pc, #24]	@ (8004fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	0a1b      	lsrs	r3, r3, #8
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	4904      	ldr	r1, [pc, #16]	@ (8004fb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f9e:	5ccb      	ldrb	r3, [r1, r3]
 8004fa0:	f003 031f 	and.w	r3, r3, #31
 8004fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	40021000 	.word	0x40021000
 8004fb0:	08008310 	.word	0x08008310

08004fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004fb8:	f7ff ffda 	bl	8004f70 <HAL_RCC_GetHCLKFreq>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	4b06      	ldr	r3, [pc, #24]	@ (8004fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	0adb      	lsrs	r3, r3, #11
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	4904      	ldr	r1, [pc, #16]	@ (8004fdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fca:	5ccb      	ldrb	r3, [r1, r3]
 8004fcc:	f003 031f 	and.w	r3, r3, #31
 8004fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	08008310 	.word	0x08008310

08004fe0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004fe8:	2300      	movs	r3, #0
 8004fea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004fec:	4b2a      	ldr	r3, [pc, #168]	@ (8005098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ff0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d003      	beq.n	8005000 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ff8:	f7ff f9ee 	bl	80043d8 <HAL_PWREx_GetVoltageRange>
 8004ffc:	6178      	str	r0, [r7, #20]
 8004ffe:	e014      	b.n	800502a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005000:	4b25      	ldr	r3, [pc, #148]	@ (8005098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005004:	4a24      	ldr	r2, [pc, #144]	@ (8005098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005006:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800500a:	6593      	str	r3, [r2, #88]	@ 0x58
 800500c:	4b22      	ldr	r3, [pc, #136]	@ (8005098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800500e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005014:	60fb      	str	r3, [r7, #12]
 8005016:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005018:	f7ff f9de 	bl	80043d8 <HAL_PWREx_GetVoltageRange>
 800501c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800501e:	4b1e      	ldr	r3, [pc, #120]	@ (8005098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005022:	4a1d      	ldr	r2, [pc, #116]	@ (8005098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005024:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005028:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005030:	d10b      	bne.n	800504a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2b80      	cmp	r3, #128	@ 0x80
 8005036:	d919      	bls.n	800506c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2ba0      	cmp	r3, #160	@ 0xa0
 800503c:	d902      	bls.n	8005044 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800503e:	2302      	movs	r3, #2
 8005040:	613b      	str	r3, [r7, #16]
 8005042:	e013      	b.n	800506c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005044:	2301      	movs	r3, #1
 8005046:	613b      	str	r3, [r7, #16]
 8005048:	e010      	b.n	800506c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b80      	cmp	r3, #128	@ 0x80
 800504e:	d902      	bls.n	8005056 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005050:	2303      	movs	r3, #3
 8005052:	613b      	str	r3, [r7, #16]
 8005054:	e00a      	b.n	800506c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b80      	cmp	r3, #128	@ 0x80
 800505a:	d102      	bne.n	8005062 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800505c:	2302      	movs	r3, #2
 800505e:	613b      	str	r3, [r7, #16]
 8005060:	e004      	b.n	800506c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b70      	cmp	r3, #112	@ 0x70
 8005066:	d101      	bne.n	800506c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005068:	2301      	movs	r3, #1
 800506a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800506c:	4b0b      	ldr	r3, [pc, #44]	@ (800509c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f023 0207 	bic.w	r2, r3, #7
 8005074:	4909      	ldr	r1, [pc, #36]	@ (800509c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	4313      	orrs	r3, r2
 800507a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800507c:	4b07      	ldr	r3, [pc, #28]	@ (800509c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0307 	and.w	r3, r3, #7
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	429a      	cmp	r2, r3
 8005088:	d001      	beq.n	800508e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e000      	b.n	8005090 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	40021000 	.word	0x40021000
 800509c:	40022000 	.word	0x40022000

080050a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050a8:	2300      	movs	r3, #0
 80050aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050ac:	2300      	movs	r3, #0
 80050ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d041      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050c0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80050c4:	d02a      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80050c6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80050ca:	d824      	bhi.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80050cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80050d0:	d008      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80050d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80050d6:	d81e      	bhi.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00a      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80050dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050e0:	d010      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050e2:	e018      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050e4:	4b86      	ldr	r3, [pc, #536]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	4a85      	ldr	r2, [pc, #532]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050f0:	e015      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	3304      	adds	r3, #4
 80050f6:	2100      	movs	r1, #0
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 fabb 	bl	8005674 <RCCEx_PLLSAI1_Config>
 80050fe:	4603      	mov	r3, r0
 8005100:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005102:	e00c      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3320      	adds	r3, #32
 8005108:	2100      	movs	r1, #0
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fba6 	bl	800585c <RCCEx_PLLSAI2_Config>
 8005110:	4603      	mov	r3, r0
 8005112:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005114:	e003      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	74fb      	strb	r3, [r7, #19]
      break;
 800511a:	e000      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800511c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800511e:	7cfb      	ldrb	r3, [r7, #19]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10b      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005124:	4b76      	ldr	r3, [pc, #472]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800512a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005132:	4973      	ldr	r1, [pc, #460]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005134:	4313      	orrs	r3, r2
 8005136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800513a:	e001      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800513c:	7cfb      	ldrb	r3, [r7, #19]
 800513e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d041      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005150:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005154:	d02a      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005156:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800515a:	d824      	bhi.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800515c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005160:	d008      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005162:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005166:	d81e      	bhi.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00a      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800516c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005170:	d010      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005172:	e018      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005174:	4b62      	ldr	r3, [pc, #392]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	4a61      	ldr	r2, [pc, #388]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800517a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800517e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005180:	e015      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	3304      	adds	r3, #4
 8005186:	2100      	movs	r1, #0
 8005188:	4618      	mov	r0, r3
 800518a:	f000 fa73 	bl	8005674 <RCCEx_PLLSAI1_Config>
 800518e:	4603      	mov	r3, r0
 8005190:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005192:	e00c      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3320      	adds	r3, #32
 8005198:	2100      	movs	r1, #0
 800519a:	4618      	mov	r0, r3
 800519c:	f000 fb5e 	bl	800585c <RCCEx_PLLSAI2_Config>
 80051a0:	4603      	mov	r3, r0
 80051a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051a4:	e003      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	74fb      	strb	r3, [r7, #19]
      break;
 80051aa:	e000      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80051ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051ae:	7cfb      	ldrb	r3, [r7, #19]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10b      	bne.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80051b4:	4b52      	ldr	r3, [pc, #328]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051c2:	494f      	ldr	r1, [pc, #316]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80051ca:	e001      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051cc:	7cfb      	ldrb	r3, [r7, #19]
 80051ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 80a0 	beq.w	800531e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051de:	2300      	movs	r3, #0
 80051e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051e2:	4b47      	ldr	r3, [pc, #284]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80051ee:	2301      	movs	r3, #1
 80051f0:	e000      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80051f2:	2300      	movs	r3, #0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00d      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051f8:	4b41      	ldr	r3, [pc, #260]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051fc:	4a40      	ldr	r2, [pc, #256]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005202:	6593      	str	r3, [r2, #88]	@ 0x58
 8005204:	4b3e      	ldr	r3, [pc, #248]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800520c:	60bb      	str	r3, [r7, #8]
 800520e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005210:	2301      	movs	r3, #1
 8005212:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005214:	4b3b      	ldr	r3, [pc, #236]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a3a      	ldr	r2, [pc, #232]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800521a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800521e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005220:	f7fc fbba 	bl	8001998 <HAL_GetTick>
 8005224:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005226:	e009      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005228:	f7fc fbb6 	bl	8001998 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d902      	bls.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	74fb      	strb	r3, [r7, #19]
        break;
 800523a:	e005      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800523c:	4b31      	ldr	r3, [pc, #196]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005244:	2b00      	cmp	r3, #0
 8005246:	d0ef      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005248:	7cfb      	ldrb	r3, [r7, #19]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d15c      	bne.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800524e:	4b2c      	ldr	r3, [pc, #176]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005254:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005258:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d01f      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	429a      	cmp	r2, r3
 800526a:	d019      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800526c:	4b24      	ldr	r3, [pc, #144]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800526e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005272:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005276:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005278:	4b21      	ldr	r3, [pc, #132]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800527a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800527e:	4a20      	ldr	r2, [pc, #128]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005284:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005288:	4b1d      	ldr	r3, [pc, #116]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800528a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800528e:	4a1c      	ldr	r2, [pc, #112]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005290:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005294:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005298:	4a19      	ldr	r2, [pc, #100]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d016      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052aa:	f7fc fb75 	bl	8001998 <HAL_GetTick>
 80052ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052b0:	e00b      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052b2:	f7fc fb71 	bl	8001998 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d902      	bls.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	74fb      	strb	r3, [r7, #19]
            break;
 80052c8:	e006      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0ec      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80052d8:	7cfb      	ldrb	r3, [r7, #19]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10c      	bne.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052de:	4b08      	ldr	r3, [pc, #32]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052ee:	4904      	ldr	r1, [pc, #16]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80052f6:	e009      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052f8:	7cfb      	ldrb	r3, [r7, #19]
 80052fa:	74bb      	strb	r3, [r7, #18]
 80052fc:	e006      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80052fe:	bf00      	nop
 8005300:	40021000 	.word	0x40021000
 8005304:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005308:	7cfb      	ldrb	r3, [r7, #19]
 800530a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800530c:	7c7b      	ldrb	r3, [r7, #17]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d105      	bne.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005312:	4b9e      	ldr	r3, [pc, #632]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005316:	4a9d      	ldr	r2, [pc, #628]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005318:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800531c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800532a:	4b98      	ldr	r3, [pc, #608]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800532c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005330:	f023 0203 	bic.w	r2, r3, #3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005338:	4994      	ldr	r1, [pc, #592]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800533a:	4313      	orrs	r3, r2
 800533c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00a      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800534c:	4b8f      	ldr	r3, [pc, #572]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800534e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005352:	f023 020c 	bic.w	r2, r3, #12
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800535a:	498c      	ldr	r1, [pc, #560]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800535c:	4313      	orrs	r3, r2
 800535e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0304 	and.w	r3, r3, #4
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00a      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800536e:	4b87      	ldr	r3, [pc, #540]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005374:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537c:	4983      	ldr	r1, [pc, #524]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800537e:	4313      	orrs	r3, r2
 8005380:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0308 	and.w	r3, r3, #8
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00a      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005390:	4b7e      	ldr	r3, [pc, #504]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005396:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800539e:	497b      	ldr	r1, [pc, #492]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0310 	and.w	r3, r3, #16
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053b2:	4b76      	ldr	r3, [pc, #472]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053c0:	4972      	ldr	r1, [pc, #456]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0320 	and.w	r3, r3, #32
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053d4:	4b6d      	ldr	r3, [pc, #436]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053e2:	496a      	ldr	r1, [pc, #424]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053f6:	4b65      	ldr	r3, [pc, #404]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005404:	4961      	ldr	r1, [pc, #388]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00a      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005418:	4b5c      	ldr	r3, [pc, #368]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800541e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005426:	4959      	ldr	r1, [pc, #356]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005428:	4313      	orrs	r3, r2
 800542a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800543a:	4b54      	ldr	r3, [pc, #336]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800543c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005440:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005448:	4950      	ldr	r1, [pc, #320]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800544a:	4313      	orrs	r3, r2
 800544c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800545c:	4b4b      	ldr	r3, [pc, #300]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800545e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005462:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800546a:	4948      	ldr	r1, [pc, #288]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800546c:	4313      	orrs	r3, r2
 800546e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800547e:	4b43      	ldr	r3, [pc, #268]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005484:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800548c:	493f      	ldr	r1, [pc, #252]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800548e:	4313      	orrs	r3, r2
 8005490:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d028      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054a0:	4b3a      	ldr	r3, [pc, #232]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054ae:	4937      	ldr	r1, [pc, #220]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054be:	d106      	bne.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054c0:	4b32      	ldr	r3, [pc, #200]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	4a31      	ldr	r2, [pc, #196]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054ca:	60d3      	str	r3, [r2, #12]
 80054cc:	e011      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054d6:	d10c      	bne.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3304      	adds	r3, #4
 80054dc:	2101      	movs	r1, #1
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 f8c8 	bl	8005674 <RCCEx_PLLSAI1_Config>
 80054e4:	4603      	mov	r3, r0
 80054e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80054e8:	7cfb      	ldrb	r3, [r7, #19]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80054ee:	7cfb      	ldrb	r3, [r7, #19]
 80054f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d028      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80054fe:	4b23      	ldr	r3, [pc, #140]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005504:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800550c:	491f      	ldr	r1, [pc, #124]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800550e:	4313      	orrs	r3, r2
 8005510:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005518:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800551c:	d106      	bne.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800551e:	4b1b      	ldr	r3, [pc, #108]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	4a1a      	ldr	r2, [pc, #104]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005524:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005528:	60d3      	str	r3, [r2, #12]
 800552a:	e011      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005530:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005534:	d10c      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	3304      	adds	r3, #4
 800553a:	2101      	movs	r1, #1
 800553c:	4618      	mov	r0, r3
 800553e:	f000 f899 	bl	8005674 <RCCEx_PLLSAI1_Config>
 8005542:	4603      	mov	r3, r0
 8005544:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005546:	7cfb      	ldrb	r3, [r7, #19]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800554c:	7cfb      	ldrb	r3, [r7, #19]
 800554e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d02b      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800555c:	4b0b      	ldr	r3, [pc, #44]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800555e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005562:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800556a:	4908      	ldr	r1, [pc, #32]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800556c:	4313      	orrs	r3, r2
 800556e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005576:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800557a:	d109      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800557c:	4b03      	ldr	r3, [pc, #12]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	4a02      	ldr	r2, [pc, #8]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005582:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005586:	60d3      	str	r3, [r2, #12]
 8005588:	e014      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800558a:	bf00      	nop
 800558c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005594:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005598:	d10c      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	3304      	adds	r3, #4
 800559e:	2101      	movs	r1, #1
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 f867 	bl	8005674 <RCCEx_PLLSAI1_Config>
 80055a6:	4603      	mov	r3, r0
 80055a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055aa:	7cfb      	ldrb	r3, [r7, #19]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d001      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80055b0:	7cfb      	ldrb	r3, [r7, #19]
 80055b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d02f      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055ce:	4928      	ldr	r1, [pc, #160]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055de:	d10d      	bne.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3304      	adds	r3, #4
 80055e4:	2102      	movs	r1, #2
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 f844 	bl	8005674 <RCCEx_PLLSAI1_Config>
 80055ec:	4603      	mov	r3, r0
 80055ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055f0:	7cfb      	ldrb	r3, [r7, #19]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d014      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80055f6:	7cfb      	ldrb	r3, [r7, #19]
 80055f8:	74bb      	strb	r3, [r7, #18]
 80055fa:	e011      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005600:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005604:	d10c      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	3320      	adds	r3, #32
 800560a:	2102      	movs	r1, #2
 800560c:	4618      	mov	r0, r3
 800560e:	f000 f925 	bl	800585c <RCCEx_PLLSAI2_Config>
 8005612:	4603      	mov	r3, r0
 8005614:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005616:	7cfb      	ldrb	r3, [r7, #19]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800561c:	7cfb      	ldrb	r3, [r7, #19]
 800561e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00a      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800562c:	4b10      	ldr	r3, [pc, #64]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800562e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005632:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800563a:	490d      	ldr	r1, [pc, #52]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00b      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800564e:	4b08      	ldr	r3, [pc, #32]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005654:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800565e:	4904      	ldr	r1, [pc, #16]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005660:	4313      	orrs	r3, r2
 8005662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005666:	7cbb      	ldrb	r3, [r7, #18]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3718      	adds	r7, #24
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	40021000 	.word	0x40021000

08005674 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005682:	4b75      	ldr	r3, [pc, #468]	@ (8005858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d018      	beq.n	80056c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800568e:	4b72      	ldr	r3, [pc, #456]	@ (8005858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f003 0203 	and.w	r2, r3, #3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	429a      	cmp	r2, r3
 800569c:	d10d      	bne.n	80056ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
       ||
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d009      	beq.n	80056ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80056a6:	4b6c      	ldr	r3, [pc, #432]	@ (8005858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	091b      	lsrs	r3, r3, #4
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	1c5a      	adds	r2, r3, #1
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
       ||
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d047      	beq.n	800574a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	73fb      	strb	r3, [r7, #15]
 80056be:	e044      	b.n	800574a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b03      	cmp	r3, #3
 80056c6:	d018      	beq.n	80056fa <RCCEx_PLLSAI1_Config+0x86>
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	d825      	bhi.n	8005718 <RCCEx_PLLSAI1_Config+0xa4>
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d002      	beq.n	80056d6 <RCCEx_PLLSAI1_Config+0x62>
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d009      	beq.n	80056e8 <RCCEx_PLLSAI1_Config+0x74>
 80056d4:	e020      	b.n	8005718 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056d6:	4b60      	ldr	r3, [pc, #384]	@ (8005858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d11d      	bne.n	800571e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056e6:	e01a      	b.n	800571e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056e8:	4b5b      	ldr	r3, [pc, #364]	@ (8005858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d116      	bne.n	8005722 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056f8:	e013      	b.n	8005722 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056fa:	4b57      	ldr	r3, [pc, #348]	@ (8005858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10f      	bne.n	8005726 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005706:	4b54      	ldr	r3, [pc, #336]	@ (8005858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d109      	bne.n	8005726 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005716:	e006      	b.n	8005726 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	73fb      	strb	r3, [r7, #15]
      break;
 800571c:	e004      	b.n	8005728 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800571e:	bf00      	nop
 8005720:	e002      	b.n	8005728 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005722:	bf00      	nop
 8005724:	e000      	b.n	8005728 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005726:	bf00      	nop
    }

    if(status == HAL_OK)
 8005728:	7bfb      	ldrb	r3, [r7, #15]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10d      	bne.n	800574a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800572e:	4b4a      	ldr	r3, [pc, #296]	@ (8005858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6819      	ldr	r1, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	3b01      	subs	r3, #1
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	430b      	orrs	r3, r1
 8005744:	4944      	ldr	r1, [pc, #272]	@ (8005858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005746:	4313      	orrs	r3, r2
 8005748:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800574a:	7bfb      	ldrb	r3, [r7, #15]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d17d      	bne.n	800584c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005750:	4b41      	ldr	r3, [pc, #260]	@ (8005858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a40      	ldr	r2, [pc, #256]	@ (8005858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005756:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800575a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800575c:	f7fc f91c 	bl	8001998 <HAL_GetTick>
 8005760:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005762:	e009      	b.n	8005778 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005764:	f7fc f918 	bl	8001998 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b02      	cmp	r3, #2
 8005770:	d902      	bls.n	8005778 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	73fb      	strb	r3, [r7, #15]
        break;
 8005776:	e005      	b.n	8005784 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005778:	4b37      	ldr	r3, [pc, #220]	@ (8005858 <RCCEx_PLLSAI1_Config+0x1e4>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1ef      	bne.n	8005764 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005784:	7bfb      	ldrb	r3, [r7, #15]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d160      	bne.n	800584c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d111      	bne.n	80057b4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005790:	4b31      	ldr	r3, [pc, #196]	@ (8005858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005798:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	6892      	ldr	r2, [r2, #8]
 80057a0:	0211      	lsls	r1, r2, #8
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	68d2      	ldr	r2, [r2, #12]
 80057a6:	0912      	lsrs	r2, r2, #4
 80057a8:	0452      	lsls	r2, r2, #17
 80057aa:	430a      	orrs	r2, r1
 80057ac:	492a      	ldr	r1, [pc, #168]	@ (8005858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	610b      	str	r3, [r1, #16]
 80057b2:	e027      	b.n	8005804 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d112      	bne.n	80057e0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057ba:	4b27      	ldr	r3, [pc, #156]	@ (8005858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80057c2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	6892      	ldr	r2, [r2, #8]
 80057ca:	0211      	lsls	r1, r2, #8
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	6912      	ldr	r2, [r2, #16]
 80057d0:	0852      	lsrs	r2, r2, #1
 80057d2:	3a01      	subs	r2, #1
 80057d4:	0552      	lsls	r2, r2, #21
 80057d6:	430a      	orrs	r2, r1
 80057d8:	491f      	ldr	r1, [pc, #124]	@ (8005858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	610b      	str	r3, [r1, #16]
 80057de:	e011      	b.n	8005804 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80057e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6892      	ldr	r2, [r2, #8]
 80057f0:	0211      	lsls	r1, r2, #8
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	6952      	ldr	r2, [r2, #20]
 80057f6:	0852      	lsrs	r2, r2, #1
 80057f8:	3a01      	subs	r2, #1
 80057fa:	0652      	lsls	r2, r2, #25
 80057fc:	430a      	orrs	r2, r1
 80057fe:	4916      	ldr	r1, [pc, #88]	@ (8005858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005800:	4313      	orrs	r3, r2
 8005802:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005804:	4b14      	ldr	r3, [pc, #80]	@ (8005858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a13      	ldr	r2, [pc, #76]	@ (8005858 <RCCEx_PLLSAI1_Config+0x1e4>)
 800580a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800580e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005810:	f7fc f8c2 	bl	8001998 <HAL_GetTick>
 8005814:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005816:	e009      	b.n	800582c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005818:	f7fc f8be 	bl	8001998 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b02      	cmp	r3, #2
 8005824:	d902      	bls.n	800582c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	73fb      	strb	r3, [r7, #15]
          break;
 800582a:	e005      	b.n	8005838 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800582c:	4b0a      	ldr	r3, [pc, #40]	@ (8005858 <RCCEx_PLLSAI1_Config+0x1e4>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0ef      	beq.n	8005818 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005838:	7bfb      	ldrb	r3, [r7, #15]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d106      	bne.n	800584c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800583e:	4b06      	ldr	r3, [pc, #24]	@ (8005858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005840:	691a      	ldr	r2, [r3, #16]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	4904      	ldr	r1, [pc, #16]	@ (8005858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005848:	4313      	orrs	r3, r2
 800584a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800584c:	7bfb      	ldrb	r3, [r7, #15]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	40021000 	.word	0x40021000

0800585c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800586a:	4b6a      	ldr	r3, [pc, #424]	@ (8005a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f003 0303 	and.w	r3, r3, #3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d018      	beq.n	80058a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005876:	4b67      	ldr	r3, [pc, #412]	@ (8005a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f003 0203 	and.w	r2, r3, #3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	429a      	cmp	r2, r3
 8005884:	d10d      	bne.n	80058a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
       ||
 800588a:	2b00      	cmp	r3, #0
 800588c:	d009      	beq.n	80058a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800588e:	4b61      	ldr	r3, [pc, #388]	@ (8005a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	091b      	lsrs	r3, r3, #4
 8005894:	f003 0307 	and.w	r3, r3, #7
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
       ||
 800589e:	429a      	cmp	r2, r3
 80058a0:	d047      	beq.n	8005932 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	73fb      	strb	r3, [r7, #15]
 80058a6:	e044      	b.n	8005932 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	d018      	beq.n	80058e2 <RCCEx_PLLSAI2_Config+0x86>
 80058b0:	2b03      	cmp	r3, #3
 80058b2:	d825      	bhi.n	8005900 <RCCEx_PLLSAI2_Config+0xa4>
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d002      	beq.n	80058be <RCCEx_PLLSAI2_Config+0x62>
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d009      	beq.n	80058d0 <RCCEx_PLLSAI2_Config+0x74>
 80058bc:	e020      	b.n	8005900 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058be:	4b55      	ldr	r3, [pc, #340]	@ (8005a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d11d      	bne.n	8005906 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058ce:	e01a      	b.n	8005906 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058d0:	4b50      	ldr	r3, [pc, #320]	@ (8005a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d116      	bne.n	800590a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058e0:	e013      	b.n	800590a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80058e2:	4b4c      	ldr	r3, [pc, #304]	@ (8005a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10f      	bne.n	800590e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058ee:	4b49      	ldr	r3, [pc, #292]	@ (8005a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d109      	bne.n	800590e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058fe:	e006      	b.n	800590e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	73fb      	strb	r3, [r7, #15]
      break;
 8005904:	e004      	b.n	8005910 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005906:	bf00      	nop
 8005908:	e002      	b.n	8005910 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800590a:	bf00      	nop
 800590c:	e000      	b.n	8005910 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800590e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005910:	7bfb      	ldrb	r3, [r7, #15]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10d      	bne.n	8005932 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005916:	4b3f      	ldr	r3, [pc, #252]	@ (8005a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6819      	ldr	r1, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	3b01      	subs	r3, #1
 8005928:	011b      	lsls	r3, r3, #4
 800592a:	430b      	orrs	r3, r1
 800592c:	4939      	ldr	r1, [pc, #228]	@ (8005a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 800592e:	4313      	orrs	r3, r2
 8005930:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005932:	7bfb      	ldrb	r3, [r7, #15]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d167      	bne.n	8005a08 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005938:	4b36      	ldr	r3, [pc, #216]	@ (8005a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a35      	ldr	r2, [pc, #212]	@ (8005a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 800593e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005942:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005944:	f7fc f828 	bl	8001998 <HAL_GetTick>
 8005948:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800594a:	e009      	b.n	8005960 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800594c:	f7fc f824 	bl	8001998 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	2b02      	cmp	r3, #2
 8005958:	d902      	bls.n	8005960 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	73fb      	strb	r3, [r7, #15]
        break;
 800595e:	e005      	b.n	800596c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005960:	4b2c      	ldr	r3, [pc, #176]	@ (8005a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1ef      	bne.n	800594c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800596c:	7bfb      	ldrb	r3, [r7, #15]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d14a      	bne.n	8005a08 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d111      	bne.n	800599c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005978:	4b26      	ldr	r3, [pc, #152]	@ (8005a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 800597a:	695b      	ldr	r3, [r3, #20]
 800597c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005980:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	6892      	ldr	r2, [r2, #8]
 8005988:	0211      	lsls	r1, r2, #8
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	68d2      	ldr	r2, [r2, #12]
 800598e:	0912      	lsrs	r2, r2, #4
 8005990:	0452      	lsls	r2, r2, #17
 8005992:	430a      	orrs	r2, r1
 8005994:	491f      	ldr	r1, [pc, #124]	@ (8005a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005996:	4313      	orrs	r3, r2
 8005998:	614b      	str	r3, [r1, #20]
 800599a:	e011      	b.n	80059c0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800599c:	4b1d      	ldr	r3, [pc, #116]	@ (8005a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80059a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	6892      	ldr	r2, [r2, #8]
 80059ac:	0211      	lsls	r1, r2, #8
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	6912      	ldr	r2, [r2, #16]
 80059b2:	0852      	lsrs	r2, r2, #1
 80059b4:	3a01      	subs	r2, #1
 80059b6:	0652      	lsls	r2, r2, #25
 80059b8:	430a      	orrs	r2, r1
 80059ba:	4916      	ldr	r1, [pc, #88]	@ (8005a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80059c0:	4b14      	ldr	r3, [pc, #80]	@ (8005a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a13      	ldr	r2, [pc, #76]	@ (8005a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059cc:	f7fb ffe4 	bl	8001998 <HAL_GetTick>
 80059d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80059d2:	e009      	b.n	80059e8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059d4:	f7fb ffe0 	bl	8001998 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d902      	bls.n	80059e8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	73fb      	strb	r3, [r7, #15]
          break;
 80059e6:	e005      	b.n	80059f4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80059e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d0ef      	beq.n	80059d4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80059f4:	7bfb      	ldrb	r3, [r7, #15]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d106      	bne.n	8005a08 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80059fa:	4b06      	ldr	r3, [pc, #24]	@ (8005a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059fc:	695a      	ldr	r2, [r3, #20]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	4904      	ldr	r1, [pc, #16]	@ (8005a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	40021000 	.word	0x40021000

08005a18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e040      	b.n	8005aac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d106      	bne.n	8005a40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7fb fdaa 	bl	8001594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2224      	movs	r2, #36	@ 0x24
 8005a44:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 0201 	bic.w	r2, r2, #1
 8005a54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d002      	beq.n	8005a64 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fe90 	bl	8006784 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 fbd5 	bl	8006214 <UART_SetConfig>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e01b      	b.n	8005aac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689a      	ldr	r2, [r3, #8]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 0201 	orr.w	r2, r2, #1
 8005aa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 ff0f 	bl	80068c8 <UART_CheckIdleState>
 8005aaa:	4603      	mov	r3, r0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3708      	adds	r7, #8
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b08a      	sub	sp, #40	@ 0x28
 8005ab8:	af02      	add	r7, sp, #8
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	603b      	str	r3, [r7, #0]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ac8:	2b20      	cmp	r3, #32
 8005aca:	d177      	bne.n	8005bbc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d002      	beq.n	8005ad8 <HAL_UART_Transmit+0x24>
 8005ad2:	88fb      	ldrh	r3, [r7, #6]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e070      	b.n	8005bbe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2221      	movs	r2, #33	@ 0x21
 8005ae8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005aea:	f7fb ff55 	bl	8001998 <HAL_GetTick>
 8005aee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	88fa      	ldrh	r2, [r7, #6]
 8005af4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	88fa      	ldrh	r2, [r7, #6]
 8005afc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b08:	d108      	bne.n	8005b1c <HAL_UART_Transmit+0x68>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d104      	bne.n	8005b1c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005b12:	2300      	movs	r3, #0
 8005b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	61bb      	str	r3, [r7, #24]
 8005b1a:	e003      	b.n	8005b24 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b20:	2300      	movs	r3, #0
 8005b22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b24:	e02f      	b.n	8005b86 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	2180      	movs	r1, #128	@ 0x80
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f000 ff71 	bl	8006a18 <UART_WaitOnFlagUntilTimeout>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d004      	beq.n	8005b46 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e03b      	b.n	8005bbe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10b      	bne.n	8005b64 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	881a      	ldrh	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b58:	b292      	uxth	r2, r2
 8005b5a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	3302      	adds	r3, #2
 8005b60:	61bb      	str	r3, [r7, #24]
 8005b62:	e007      	b.n	8005b74 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	781a      	ldrb	r2, [r3, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	3301      	adds	r3, #1
 8005b72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1c9      	bne.n	8005b26 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	2140      	movs	r1, #64	@ 0x40
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 ff3b 	bl	8006a18 <UART_WaitOnFlagUntilTimeout>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d004      	beq.n	8005bb2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2220      	movs	r2, #32
 8005bac:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e005      	b.n	8005bbe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	e000      	b.n	8005bbe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005bbc:	2302      	movs	r3, #2
  }
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3720      	adds	r7, #32
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
	...

08005bc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b0ba      	sub	sp, #232	@ 0xe8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005bee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005bf2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005bfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d115      	bne.n	8005c30 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c08:	f003 0320 	and.w	r3, r3, #32
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00f      	beq.n	8005c30 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c14:	f003 0320 	and.w	r3, r3, #32
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d009      	beq.n	8005c30 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f000 82ca 	beq.w	80061ba <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	4798      	blx	r3
      }
      return;
 8005c2e:	e2c4      	b.n	80061ba <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005c30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 8117 	beq.w	8005e68 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005c3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d106      	bne.n	8005c54 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005c46:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005c4a:	4b85      	ldr	r3, [pc, #532]	@ (8005e60 <HAL_UART_IRQHandler+0x298>)
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 810a 	beq.w	8005e68 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d011      	beq.n	8005c84 <HAL_UART_IRQHandler+0xbc>
 8005c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00b      	beq.n	8005c84 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2201      	movs	r2, #1
 8005c72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c7a:	f043 0201 	orr.w	r2, r3, #1
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d011      	beq.n	8005cb4 <HAL_UART_IRQHandler+0xec>
 8005c90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00b      	beq.n	8005cb4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005caa:	f043 0204 	orr.w	r2, r3, #4
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cb8:	f003 0304 	and.w	r3, r3, #4
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d011      	beq.n	8005ce4 <HAL_UART_IRQHandler+0x11c>
 8005cc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00b      	beq.n	8005ce4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2204      	movs	r2, #4
 8005cd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cda:	f043 0202 	orr.w	r2, r3, #2
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ce8:	f003 0308 	and.w	r3, r3, #8
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d017      	beq.n	8005d20 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cf4:	f003 0320 	and.w	r3, r3, #32
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d105      	bne.n	8005d08 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d00:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00b      	beq.n	8005d20 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2208      	movs	r2, #8
 8005d0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d16:	f043 0208 	orr.w	r2, r3, #8
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d012      	beq.n	8005d52 <HAL_UART_IRQHandler+0x18a>
 8005d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00c      	beq.n	8005d52 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d48:	f043 0220 	orr.w	r2, r3, #32
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f000 8230 	beq.w	80061be <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d62:	f003 0320 	and.w	r3, r3, #32
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00d      	beq.n	8005d86 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d6e:	f003 0320 	and.w	r3, r3, #32
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d007      	beq.n	8005d86 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d8c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d9a:	2b40      	cmp	r3, #64	@ 0x40
 8005d9c:	d005      	beq.n	8005daa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005da2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d04f      	beq.n	8005e4a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fea1 	bl	8006af2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dba:	2b40      	cmp	r3, #64	@ 0x40
 8005dbc:	d141      	bne.n	8005e42 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	3308      	adds	r3, #8
 8005dc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005dcc:	e853 3f00 	ldrex	r3, [r3]
 8005dd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005dd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005dd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ddc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3308      	adds	r3, #8
 8005de6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005dea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005dee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005df6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005dfa:	e841 2300 	strex	r3, r2, [r1]
 8005dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005e02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1d9      	bne.n	8005dbe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d013      	beq.n	8005e3a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e16:	4a13      	ldr	r2, [pc, #76]	@ (8005e64 <HAL_UART_IRQHandler+0x29c>)
 8005e18:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fd fbd7 	bl	80035d2 <HAL_DMA_Abort_IT>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d017      	beq.n	8005e5a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005e34:	4610      	mov	r0, r2
 8005e36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e38:	e00f      	b.n	8005e5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f9d4 	bl	80061e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e40:	e00b      	b.n	8005e5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f9d0 	bl	80061e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e48:	e007      	b.n	8005e5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f9cc 	bl	80061e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005e58:	e1b1      	b.n	80061be <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e5a:	bf00      	nop
    return;
 8005e5c:	e1af      	b.n	80061be <HAL_UART_IRQHandler+0x5f6>
 8005e5e:	bf00      	nop
 8005e60:	04000120 	.word	0x04000120
 8005e64:	08006bbb 	.word	0x08006bbb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	f040 816a 	bne.w	8006146 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e76:	f003 0310 	and.w	r3, r3, #16
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 8163 	beq.w	8006146 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e84:	f003 0310 	and.w	r3, r3, #16
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 815c 	beq.w	8006146 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2210      	movs	r2, #16
 8005e94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ea0:	2b40      	cmp	r3, #64	@ 0x40
 8005ea2:	f040 80d4 	bne.w	800604e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005eb2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 80ad 	beq.w	8006016 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005ec2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	f080 80a5 	bcs.w	8006016 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ed2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0320 	and.w	r3, r3, #32
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f040 8086 	bne.w	8005ff4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ef4:	e853 3f00 	ldrex	r3, [r3]
 8005ef8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005efc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005f12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005f16:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005f1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005f22:	e841 2300 	strex	r3, r2, [r1]
 8005f26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005f2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1da      	bne.n	8005ee8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	3308      	adds	r3, #8
 8005f38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f3c:	e853 3f00 	ldrex	r3, [r3]
 8005f40:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005f42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f44:	f023 0301 	bic.w	r3, r3, #1
 8005f48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3308      	adds	r3, #8
 8005f52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005f56:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005f5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005f5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005f62:	e841 2300 	strex	r3, r2, [r1]
 8005f66:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005f68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1e1      	bne.n	8005f32 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3308      	adds	r3, #8
 8005f74:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f78:	e853 3f00 	ldrex	r3, [r3]
 8005f7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005f7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3308      	adds	r3, #8
 8005f8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005f92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005f94:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f96:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005f98:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005f9a:	e841 2300 	strex	r3, r2, [r1]
 8005f9e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005fa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1e3      	bne.n	8005f6e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2220      	movs	r2, #32
 8005faa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fbc:	e853 3f00 	ldrex	r3, [r3]
 8005fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005fc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fc4:	f023 0310 	bic.w	r3, r3, #16
 8005fc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005fd6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005fd8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fda:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005fdc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005fde:	e841 2300 	strex	r3, r2, [r1]
 8005fe2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005fe4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1e4      	bne.n	8005fb4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fd fab1 	bl	8003556 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006006:	b29b      	uxth	r3, r3
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	b29b      	uxth	r3, r3
 800600c:	4619      	mov	r1, r3
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f8f4 	bl	80061fc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006014:	e0d5      	b.n	80061c2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800601c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006020:	429a      	cmp	r2, r3
 8006022:	f040 80ce 	bne.w	80061c2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0320 	and.w	r3, r3, #32
 8006032:	2b20      	cmp	r3, #32
 8006034:	f040 80c5 	bne.w	80061c2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2202      	movs	r2, #2
 800603c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006044:	4619      	mov	r1, r3
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f8d8 	bl	80061fc <HAL_UARTEx_RxEventCallback>
      return;
 800604c:	e0b9      	b.n	80061c2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800605a:	b29b      	uxth	r3, r3
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006068:	b29b      	uxth	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	f000 80ab 	beq.w	80061c6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006070:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006074:	2b00      	cmp	r3, #0
 8006076:	f000 80a6 	beq.w	80061c6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006082:	e853 3f00 	ldrex	r3, [r3]
 8006086:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800608a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800608e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800609c:	647b      	str	r3, [r7, #68]	@ 0x44
 800609e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060a4:	e841 2300 	strex	r3, r2, [r1]
 80060a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1e4      	bne.n	800607a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3308      	adds	r3, #8
 80060b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ba:	e853 3f00 	ldrex	r3, [r3]
 80060be:	623b      	str	r3, [r7, #32]
   return(result);
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	f023 0301 	bic.w	r3, r3, #1
 80060c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3308      	adds	r3, #8
 80060d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80060d4:	633a      	str	r2, [r7, #48]	@ 0x30
 80060d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060dc:	e841 2300 	strex	r3, r2, [r1]
 80060e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1e3      	bne.n	80060b0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2220      	movs	r2, #32
 80060ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	e853 3f00 	ldrex	r3, [r3]
 8006108:	60fb      	str	r3, [r7, #12]
   return(result);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f023 0310 	bic.w	r3, r3, #16
 8006110:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	461a      	mov	r2, r3
 800611a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800611e:	61fb      	str	r3, [r7, #28]
 8006120:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006122:	69b9      	ldr	r1, [r7, #24]
 8006124:	69fa      	ldr	r2, [r7, #28]
 8006126:	e841 2300 	strex	r3, r2, [r1]
 800612a:	617b      	str	r3, [r7, #20]
   return(result);
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1e4      	bne.n	80060fc <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2202      	movs	r2, #2
 8006136:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006138:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800613c:	4619      	mov	r1, r3
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f85c 	bl	80061fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006144:	e03f      	b.n	80061c6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800614a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00e      	beq.n	8006170 <HAL_UART_IRQHandler+0x5a8>
 8006152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006156:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d008      	beq.n	8006170 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006166:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fd66 	bl	8006c3a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800616e:	e02d      	b.n	80061cc <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006174:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00e      	beq.n	800619a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800617c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006184:	2b00      	cmp	r3, #0
 8006186:	d008      	beq.n	800619a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800618c:	2b00      	cmp	r3, #0
 800618e:	d01c      	beq.n	80061ca <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	4798      	blx	r3
    }
    return;
 8006198:	e017      	b.n	80061ca <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800619a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800619e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d012      	beq.n	80061cc <HAL_UART_IRQHandler+0x604>
 80061a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00c      	beq.n	80061cc <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 fd17 	bl	8006be6 <UART_EndTransmit_IT>
    return;
 80061b8:	e008      	b.n	80061cc <HAL_UART_IRQHandler+0x604>
      return;
 80061ba:	bf00      	nop
 80061bc:	e006      	b.n	80061cc <HAL_UART_IRQHandler+0x604>
    return;
 80061be:	bf00      	nop
 80061c0:	e004      	b.n	80061cc <HAL_UART_IRQHandler+0x604>
      return;
 80061c2:	bf00      	nop
 80061c4:	e002      	b.n	80061cc <HAL_UART_IRQHandler+0x604>
      return;
 80061c6:	bf00      	nop
 80061c8:	e000      	b.n	80061cc <HAL_UART_IRQHandler+0x604>
    return;
 80061ca:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80061cc:	37e8      	adds	r7, #232	@ 0xe8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop

080061d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	460b      	mov	r3, r1
 8006206:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006218:	b08a      	sub	sp, #40	@ 0x28
 800621a:	af00      	add	r7, sp, #0
 800621c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800621e:	2300      	movs	r3, #0
 8006220:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	431a      	orrs	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	431a      	orrs	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	69db      	ldr	r3, [r3, #28]
 8006238:	4313      	orrs	r3, r2
 800623a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	4ba4      	ldr	r3, [pc, #656]	@ (80064d4 <UART_SetConfig+0x2c0>)
 8006244:	4013      	ands	r3, r2
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	6812      	ldr	r2, [r2, #0]
 800624a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800624c:	430b      	orrs	r3, r1
 800624e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a99      	ldr	r2, [pc, #612]	@ (80064d8 <UART_SetConfig+0x2c4>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d004      	beq.n	8006280 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800627c:	4313      	orrs	r3, r2
 800627e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006290:	430a      	orrs	r2, r1
 8006292:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a90      	ldr	r2, [pc, #576]	@ (80064dc <UART_SetConfig+0x2c8>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d126      	bne.n	80062ec <UART_SetConfig+0xd8>
 800629e:	4b90      	ldr	r3, [pc, #576]	@ (80064e0 <UART_SetConfig+0x2cc>)
 80062a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062a4:	f003 0303 	and.w	r3, r3, #3
 80062a8:	2b03      	cmp	r3, #3
 80062aa:	d81b      	bhi.n	80062e4 <UART_SetConfig+0xd0>
 80062ac:	a201      	add	r2, pc, #4	@ (adr r2, 80062b4 <UART_SetConfig+0xa0>)
 80062ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b2:	bf00      	nop
 80062b4:	080062c5 	.word	0x080062c5
 80062b8:	080062d5 	.word	0x080062d5
 80062bc:	080062cd 	.word	0x080062cd
 80062c0:	080062dd 	.word	0x080062dd
 80062c4:	2301      	movs	r3, #1
 80062c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062ca:	e116      	b.n	80064fa <UART_SetConfig+0x2e6>
 80062cc:	2302      	movs	r3, #2
 80062ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062d2:	e112      	b.n	80064fa <UART_SetConfig+0x2e6>
 80062d4:	2304      	movs	r3, #4
 80062d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062da:	e10e      	b.n	80064fa <UART_SetConfig+0x2e6>
 80062dc:	2308      	movs	r3, #8
 80062de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062e2:	e10a      	b.n	80064fa <UART_SetConfig+0x2e6>
 80062e4:	2310      	movs	r3, #16
 80062e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062ea:	e106      	b.n	80064fa <UART_SetConfig+0x2e6>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a7c      	ldr	r2, [pc, #496]	@ (80064e4 <UART_SetConfig+0x2d0>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d138      	bne.n	8006368 <UART_SetConfig+0x154>
 80062f6:	4b7a      	ldr	r3, [pc, #488]	@ (80064e0 <UART_SetConfig+0x2cc>)
 80062f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062fc:	f003 030c 	and.w	r3, r3, #12
 8006300:	2b0c      	cmp	r3, #12
 8006302:	d82d      	bhi.n	8006360 <UART_SetConfig+0x14c>
 8006304:	a201      	add	r2, pc, #4	@ (adr r2, 800630c <UART_SetConfig+0xf8>)
 8006306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630a:	bf00      	nop
 800630c:	08006341 	.word	0x08006341
 8006310:	08006361 	.word	0x08006361
 8006314:	08006361 	.word	0x08006361
 8006318:	08006361 	.word	0x08006361
 800631c:	08006351 	.word	0x08006351
 8006320:	08006361 	.word	0x08006361
 8006324:	08006361 	.word	0x08006361
 8006328:	08006361 	.word	0x08006361
 800632c:	08006349 	.word	0x08006349
 8006330:	08006361 	.word	0x08006361
 8006334:	08006361 	.word	0x08006361
 8006338:	08006361 	.word	0x08006361
 800633c:	08006359 	.word	0x08006359
 8006340:	2300      	movs	r3, #0
 8006342:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006346:	e0d8      	b.n	80064fa <UART_SetConfig+0x2e6>
 8006348:	2302      	movs	r3, #2
 800634a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800634e:	e0d4      	b.n	80064fa <UART_SetConfig+0x2e6>
 8006350:	2304      	movs	r3, #4
 8006352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006356:	e0d0      	b.n	80064fa <UART_SetConfig+0x2e6>
 8006358:	2308      	movs	r3, #8
 800635a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800635e:	e0cc      	b.n	80064fa <UART_SetConfig+0x2e6>
 8006360:	2310      	movs	r3, #16
 8006362:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006366:	e0c8      	b.n	80064fa <UART_SetConfig+0x2e6>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a5e      	ldr	r2, [pc, #376]	@ (80064e8 <UART_SetConfig+0x2d4>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d125      	bne.n	80063be <UART_SetConfig+0x1aa>
 8006372:	4b5b      	ldr	r3, [pc, #364]	@ (80064e0 <UART_SetConfig+0x2cc>)
 8006374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006378:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800637c:	2b30      	cmp	r3, #48	@ 0x30
 800637e:	d016      	beq.n	80063ae <UART_SetConfig+0x19a>
 8006380:	2b30      	cmp	r3, #48	@ 0x30
 8006382:	d818      	bhi.n	80063b6 <UART_SetConfig+0x1a2>
 8006384:	2b20      	cmp	r3, #32
 8006386:	d00a      	beq.n	800639e <UART_SetConfig+0x18a>
 8006388:	2b20      	cmp	r3, #32
 800638a:	d814      	bhi.n	80063b6 <UART_SetConfig+0x1a2>
 800638c:	2b00      	cmp	r3, #0
 800638e:	d002      	beq.n	8006396 <UART_SetConfig+0x182>
 8006390:	2b10      	cmp	r3, #16
 8006392:	d008      	beq.n	80063a6 <UART_SetConfig+0x192>
 8006394:	e00f      	b.n	80063b6 <UART_SetConfig+0x1a2>
 8006396:	2300      	movs	r3, #0
 8006398:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800639c:	e0ad      	b.n	80064fa <UART_SetConfig+0x2e6>
 800639e:	2302      	movs	r3, #2
 80063a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063a4:	e0a9      	b.n	80064fa <UART_SetConfig+0x2e6>
 80063a6:	2304      	movs	r3, #4
 80063a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063ac:	e0a5      	b.n	80064fa <UART_SetConfig+0x2e6>
 80063ae:	2308      	movs	r3, #8
 80063b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063b4:	e0a1      	b.n	80064fa <UART_SetConfig+0x2e6>
 80063b6:	2310      	movs	r3, #16
 80063b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063bc:	e09d      	b.n	80064fa <UART_SetConfig+0x2e6>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a4a      	ldr	r2, [pc, #296]	@ (80064ec <UART_SetConfig+0x2d8>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d125      	bne.n	8006414 <UART_SetConfig+0x200>
 80063c8:	4b45      	ldr	r3, [pc, #276]	@ (80064e0 <UART_SetConfig+0x2cc>)
 80063ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80063d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80063d4:	d016      	beq.n	8006404 <UART_SetConfig+0x1f0>
 80063d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80063d8:	d818      	bhi.n	800640c <UART_SetConfig+0x1f8>
 80063da:	2b80      	cmp	r3, #128	@ 0x80
 80063dc:	d00a      	beq.n	80063f4 <UART_SetConfig+0x1e0>
 80063de:	2b80      	cmp	r3, #128	@ 0x80
 80063e0:	d814      	bhi.n	800640c <UART_SetConfig+0x1f8>
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d002      	beq.n	80063ec <UART_SetConfig+0x1d8>
 80063e6:	2b40      	cmp	r3, #64	@ 0x40
 80063e8:	d008      	beq.n	80063fc <UART_SetConfig+0x1e8>
 80063ea:	e00f      	b.n	800640c <UART_SetConfig+0x1f8>
 80063ec:	2300      	movs	r3, #0
 80063ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063f2:	e082      	b.n	80064fa <UART_SetConfig+0x2e6>
 80063f4:	2302      	movs	r3, #2
 80063f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063fa:	e07e      	b.n	80064fa <UART_SetConfig+0x2e6>
 80063fc:	2304      	movs	r3, #4
 80063fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006402:	e07a      	b.n	80064fa <UART_SetConfig+0x2e6>
 8006404:	2308      	movs	r3, #8
 8006406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800640a:	e076      	b.n	80064fa <UART_SetConfig+0x2e6>
 800640c:	2310      	movs	r3, #16
 800640e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006412:	e072      	b.n	80064fa <UART_SetConfig+0x2e6>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a35      	ldr	r2, [pc, #212]	@ (80064f0 <UART_SetConfig+0x2dc>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d12a      	bne.n	8006474 <UART_SetConfig+0x260>
 800641e:	4b30      	ldr	r3, [pc, #192]	@ (80064e0 <UART_SetConfig+0x2cc>)
 8006420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006424:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006428:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800642c:	d01a      	beq.n	8006464 <UART_SetConfig+0x250>
 800642e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006432:	d81b      	bhi.n	800646c <UART_SetConfig+0x258>
 8006434:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006438:	d00c      	beq.n	8006454 <UART_SetConfig+0x240>
 800643a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800643e:	d815      	bhi.n	800646c <UART_SetConfig+0x258>
 8006440:	2b00      	cmp	r3, #0
 8006442:	d003      	beq.n	800644c <UART_SetConfig+0x238>
 8006444:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006448:	d008      	beq.n	800645c <UART_SetConfig+0x248>
 800644a:	e00f      	b.n	800646c <UART_SetConfig+0x258>
 800644c:	2300      	movs	r3, #0
 800644e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006452:	e052      	b.n	80064fa <UART_SetConfig+0x2e6>
 8006454:	2302      	movs	r3, #2
 8006456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800645a:	e04e      	b.n	80064fa <UART_SetConfig+0x2e6>
 800645c:	2304      	movs	r3, #4
 800645e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006462:	e04a      	b.n	80064fa <UART_SetConfig+0x2e6>
 8006464:	2308      	movs	r3, #8
 8006466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800646a:	e046      	b.n	80064fa <UART_SetConfig+0x2e6>
 800646c:	2310      	movs	r3, #16
 800646e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006472:	e042      	b.n	80064fa <UART_SetConfig+0x2e6>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a17      	ldr	r2, [pc, #92]	@ (80064d8 <UART_SetConfig+0x2c4>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d13a      	bne.n	80064f4 <UART_SetConfig+0x2e0>
 800647e:	4b18      	ldr	r3, [pc, #96]	@ (80064e0 <UART_SetConfig+0x2cc>)
 8006480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006484:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006488:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800648c:	d01a      	beq.n	80064c4 <UART_SetConfig+0x2b0>
 800648e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006492:	d81b      	bhi.n	80064cc <UART_SetConfig+0x2b8>
 8006494:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006498:	d00c      	beq.n	80064b4 <UART_SetConfig+0x2a0>
 800649a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800649e:	d815      	bhi.n	80064cc <UART_SetConfig+0x2b8>
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d003      	beq.n	80064ac <UART_SetConfig+0x298>
 80064a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064a8:	d008      	beq.n	80064bc <UART_SetConfig+0x2a8>
 80064aa:	e00f      	b.n	80064cc <UART_SetConfig+0x2b8>
 80064ac:	2300      	movs	r3, #0
 80064ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064b2:	e022      	b.n	80064fa <UART_SetConfig+0x2e6>
 80064b4:	2302      	movs	r3, #2
 80064b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ba:	e01e      	b.n	80064fa <UART_SetConfig+0x2e6>
 80064bc:	2304      	movs	r3, #4
 80064be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064c2:	e01a      	b.n	80064fa <UART_SetConfig+0x2e6>
 80064c4:	2308      	movs	r3, #8
 80064c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ca:	e016      	b.n	80064fa <UART_SetConfig+0x2e6>
 80064cc:	2310      	movs	r3, #16
 80064ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064d2:	e012      	b.n	80064fa <UART_SetConfig+0x2e6>
 80064d4:	efff69f3 	.word	0xefff69f3
 80064d8:	40008000 	.word	0x40008000
 80064dc:	40013800 	.word	0x40013800
 80064e0:	40021000 	.word	0x40021000
 80064e4:	40004400 	.word	0x40004400
 80064e8:	40004800 	.word	0x40004800
 80064ec:	40004c00 	.word	0x40004c00
 80064f0:	40005000 	.word	0x40005000
 80064f4:	2310      	movs	r3, #16
 80064f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a9f      	ldr	r2, [pc, #636]	@ (800677c <UART_SetConfig+0x568>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d17a      	bne.n	80065fa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006504:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006508:	2b08      	cmp	r3, #8
 800650a:	d824      	bhi.n	8006556 <UART_SetConfig+0x342>
 800650c:	a201      	add	r2, pc, #4	@ (adr r2, 8006514 <UART_SetConfig+0x300>)
 800650e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006512:	bf00      	nop
 8006514:	08006539 	.word	0x08006539
 8006518:	08006557 	.word	0x08006557
 800651c:	08006541 	.word	0x08006541
 8006520:	08006557 	.word	0x08006557
 8006524:	08006547 	.word	0x08006547
 8006528:	08006557 	.word	0x08006557
 800652c:	08006557 	.word	0x08006557
 8006530:	08006557 	.word	0x08006557
 8006534:	0800654f 	.word	0x0800654f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006538:	f7fe fd26 	bl	8004f88 <HAL_RCC_GetPCLK1Freq>
 800653c:	61f8      	str	r0, [r7, #28]
        break;
 800653e:	e010      	b.n	8006562 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006540:	4b8f      	ldr	r3, [pc, #572]	@ (8006780 <UART_SetConfig+0x56c>)
 8006542:	61fb      	str	r3, [r7, #28]
        break;
 8006544:	e00d      	b.n	8006562 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006546:	f7fe fc87 	bl	8004e58 <HAL_RCC_GetSysClockFreq>
 800654a:	61f8      	str	r0, [r7, #28]
        break;
 800654c:	e009      	b.n	8006562 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800654e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006552:	61fb      	str	r3, [r7, #28]
        break;
 8006554:	e005      	b.n	8006562 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006556:	2300      	movs	r3, #0
 8006558:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006560:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 80fb 	beq.w	8006760 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	4613      	mov	r3, r2
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	4413      	add	r3, r2
 8006574:	69fa      	ldr	r2, [r7, #28]
 8006576:	429a      	cmp	r2, r3
 8006578:	d305      	bcc.n	8006586 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006580:	69fa      	ldr	r2, [r7, #28]
 8006582:	429a      	cmp	r2, r3
 8006584:	d903      	bls.n	800658e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800658c:	e0e8      	b.n	8006760 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	2200      	movs	r2, #0
 8006592:	461c      	mov	r4, r3
 8006594:	4615      	mov	r5, r2
 8006596:	f04f 0200 	mov.w	r2, #0
 800659a:	f04f 0300 	mov.w	r3, #0
 800659e:	022b      	lsls	r3, r5, #8
 80065a0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80065a4:	0222      	lsls	r2, r4, #8
 80065a6:	68f9      	ldr	r1, [r7, #12]
 80065a8:	6849      	ldr	r1, [r1, #4]
 80065aa:	0849      	lsrs	r1, r1, #1
 80065ac:	2000      	movs	r0, #0
 80065ae:	4688      	mov	r8, r1
 80065b0:	4681      	mov	r9, r0
 80065b2:	eb12 0a08 	adds.w	sl, r2, r8
 80065b6:	eb43 0b09 	adc.w	fp, r3, r9
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	603b      	str	r3, [r7, #0]
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065c8:	4650      	mov	r0, sl
 80065ca:	4659      	mov	r1, fp
 80065cc:	f7f9 fe58 	bl	8000280 <__aeabi_uldivmod>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	4613      	mov	r3, r2
 80065d6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065de:	d308      	bcc.n	80065f2 <UART_SetConfig+0x3de>
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065e6:	d204      	bcs.n	80065f2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	60da      	str	r2, [r3, #12]
 80065f0:	e0b6      	b.n	8006760 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80065f8:	e0b2      	b.n	8006760 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006602:	d15e      	bne.n	80066c2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006604:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006608:	2b08      	cmp	r3, #8
 800660a:	d828      	bhi.n	800665e <UART_SetConfig+0x44a>
 800660c:	a201      	add	r2, pc, #4	@ (adr r2, 8006614 <UART_SetConfig+0x400>)
 800660e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006612:	bf00      	nop
 8006614:	08006639 	.word	0x08006639
 8006618:	08006641 	.word	0x08006641
 800661c:	08006649 	.word	0x08006649
 8006620:	0800665f 	.word	0x0800665f
 8006624:	0800664f 	.word	0x0800664f
 8006628:	0800665f 	.word	0x0800665f
 800662c:	0800665f 	.word	0x0800665f
 8006630:	0800665f 	.word	0x0800665f
 8006634:	08006657 	.word	0x08006657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006638:	f7fe fca6 	bl	8004f88 <HAL_RCC_GetPCLK1Freq>
 800663c:	61f8      	str	r0, [r7, #28]
        break;
 800663e:	e014      	b.n	800666a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006640:	f7fe fcb8 	bl	8004fb4 <HAL_RCC_GetPCLK2Freq>
 8006644:	61f8      	str	r0, [r7, #28]
        break;
 8006646:	e010      	b.n	800666a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006648:	4b4d      	ldr	r3, [pc, #308]	@ (8006780 <UART_SetConfig+0x56c>)
 800664a:	61fb      	str	r3, [r7, #28]
        break;
 800664c:	e00d      	b.n	800666a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800664e:	f7fe fc03 	bl	8004e58 <HAL_RCC_GetSysClockFreq>
 8006652:	61f8      	str	r0, [r7, #28]
        break;
 8006654:	e009      	b.n	800666a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800665a:	61fb      	str	r3, [r7, #28]
        break;
 800665c:	e005      	b.n	800666a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800665e:	2300      	movs	r3, #0
 8006660:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006668:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d077      	beq.n	8006760 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	005a      	lsls	r2, r3, #1
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	085b      	lsrs	r3, r3, #1
 800667a:	441a      	add	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	fbb2 f3f3 	udiv	r3, r2, r3
 8006684:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	2b0f      	cmp	r3, #15
 800668a:	d916      	bls.n	80066ba <UART_SetConfig+0x4a6>
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006692:	d212      	bcs.n	80066ba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	b29b      	uxth	r3, r3
 8006698:	f023 030f 	bic.w	r3, r3, #15
 800669c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	085b      	lsrs	r3, r3, #1
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	f003 0307 	and.w	r3, r3, #7
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	8afb      	ldrh	r3, [r7, #22]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	8afa      	ldrh	r2, [r7, #22]
 80066b6:	60da      	str	r2, [r3, #12]
 80066b8:	e052      	b.n	8006760 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80066c0:	e04e      	b.n	8006760 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80066c6:	2b08      	cmp	r3, #8
 80066c8:	d827      	bhi.n	800671a <UART_SetConfig+0x506>
 80066ca:	a201      	add	r2, pc, #4	@ (adr r2, 80066d0 <UART_SetConfig+0x4bc>)
 80066cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d0:	080066f5 	.word	0x080066f5
 80066d4:	080066fd 	.word	0x080066fd
 80066d8:	08006705 	.word	0x08006705
 80066dc:	0800671b 	.word	0x0800671b
 80066e0:	0800670b 	.word	0x0800670b
 80066e4:	0800671b 	.word	0x0800671b
 80066e8:	0800671b 	.word	0x0800671b
 80066ec:	0800671b 	.word	0x0800671b
 80066f0:	08006713 	.word	0x08006713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066f4:	f7fe fc48 	bl	8004f88 <HAL_RCC_GetPCLK1Freq>
 80066f8:	61f8      	str	r0, [r7, #28]
        break;
 80066fa:	e014      	b.n	8006726 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066fc:	f7fe fc5a 	bl	8004fb4 <HAL_RCC_GetPCLK2Freq>
 8006700:	61f8      	str	r0, [r7, #28]
        break;
 8006702:	e010      	b.n	8006726 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006704:	4b1e      	ldr	r3, [pc, #120]	@ (8006780 <UART_SetConfig+0x56c>)
 8006706:	61fb      	str	r3, [r7, #28]
        break;
 8006708:	e00d      	b.n	8006726 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800670a:	f7fe fba5 	bl	8004e58 <HAL_RCC_GetSysClockFreq>
 800670e:	61f8      	str	r0, [r7, #28]
        break;
 8006710:	e009      	b.n	8006726 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006712:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006716:	61fb      	str	r3, [r7, #28]
        break;
 8006718:	e005      	b.n	8006726 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800671a:	2300      	movs	r3, #0
 800671c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006724:	bf00      	nop
    }

    if (pclk != 0U)
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d019      	beq.n	8006760 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	085a      	lsrs	r2, r3, #1
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	441a      	add	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	fbb2 f3f3 	udiv	r3, r2, r3
 800673e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	2b0f      	cmp	r3, #15
 8006744:	d909      	bls.n	800675a <UART_SetConfig+0x546>
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800674c:	d205      	bcs.n	800675a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	b29a      	uxth	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	60da      	str	r2, [r3, #12]
 8006758:	e002      	b.n	8006760 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800676c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006770:	4618      	mov	r0, r3
 8006772:	3728      	adds	r7, #40	@ 0x28
 8006774:	46bd      	mov	sp, r7
 8006776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800677a:	bf00      	nop
 800677c:	40008000 	.word	0x40008000
 8006780:	00f42400 	.word	0x00f42400

08006784 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006790:	f003 0308 	and.w	r3, r3, #8
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00a      	beq.n	80067ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00a      	beq.n	80067d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	430a      	orrs	r2, r1
 80067ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d4:	f003 0302 	and.w	r3, r3, #2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00a      	beq.n	80067f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f6:	f003 0304 	and.w	r3, r3, #4
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00a      	beq.n	8006814 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	430a      	orrs	r2, r1
 8006812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006818:	f003 0310 	and.w	r3, r3, #16
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00a      	beq.n	8006836 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	430a      	orrs	r2, r1
 8006834:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800683a:	f003 0320 	and.w	r3, r3, #32
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00a      	beq.n	8006858 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	430a      	orrs	r2, r1
 8006856:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800685c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006860:	2b00      	cmp	r3, #0
 8006862:	d01a      	beq.n	800689a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800687e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006882:	d10a      	bne.n	800689a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	430a      	orrs	r2, r1
 8006898:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800689e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00a      	beq.n	80068bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	605a      	str	r2, [r3, #4]
  }
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b098      	sub	sp, #96	@ 0x60
 80068cc:	af02      	add	r7, sp, #8
 80068ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068d8:	f7fb f85e 	bl	8001998 <HAL_GetTick>
 80068dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0308 	and.w	r3, r3, #8
 80068e8:	2b08      	cmp	r3, #8
 80068ea:	d12e      	bne.n	800694a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068f4:	2200      	movs	r2, #0
 80068f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f88c 	bl	8006a18 <UART_WaitOnFlagUntilTimeout>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d021      	beq.n	800694a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800690e:	e853 3f00 	ldrex	r3, [r3]
 8006912:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006916:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800691a:	653b      	str	r3, [r7, #80]	@ 0x50
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	461a      	mov	r2, r3
 8006922:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006924:	647b      	str	r3, [r7, #68]	@ 0x44
 8006926:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006928:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800692a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800692c:	e841 2300 	strex	r3, r2, [r1]
 8006930:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1e6      	bne.n	8006906 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2220      	movs	r2, #32
 800693c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e062      	b.n	8006a10 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0304 	and.w	r3, r3, #4
 8006954:	2b04      	cmp	r3, #4
 8006956:	d149      	bne.n	80069ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006958:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006960:	2200      	movs	r2, #0
 8006962:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f856 	bl	8006a18 <UART_WaitOnFlagUntilTimeout>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d03c      	beq.n	80069ec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697a:	e853 3f00 	ldrex	r3, [r3]
 800697e:	623b      	str	r3, [r7, #32]
   return(result);
 8006980:	6a3b      	ldr	r3, [r7, #32]
 8006982:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006986:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	461a      	mov	r2, r3
 800698e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006990:	633b      	str	r3, [r7, #48]	@ 0x30
 8006992:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006994:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006996:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006998:	e841 2300 	strex	r3, r2, [r1]
 800699c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800699e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1e6      	bne.n	8006972 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3308      	adds	r3, #8
 80069aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	e853 3f00 	ldrex	r3, [r3]
 80069b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f023 0301 	bic.w	r3, r3, #1
 80069ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	3308      	adds	r3, #8
 80069c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069c4:	61fa      	str	r2, [r7, #28]
 80069c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c8:	69b9      	ldr	r1, [r7, #24]
 80069ca:	69fa      	ldr	r2, [r7, #28]
 80069cc:	e841 2300 	strex	r3, r2, [r1]
 80069d0:	617b      	str	r3, [r7, #20]
   return(result);
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1e5      	bne.n	80069a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2220      	movs	r2, #32
 80069dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e011      	b.n	8006a10 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2220      	movs	r2, #32
 80069f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2220      	movs	r2, #32
 80069f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3758      	adds	r7, #88	@ 0x58
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	603b      	str	r3, [r7, #0]
 8006a24:	4613      	mov	r3, r2
 8006a26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a28:	e04f      	b.n	8006aca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a30:	d04b      	beq.n	8006aca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a32:	f7fa ffb1 	bl	8001998 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	69ba      	ldr	r2, [r7, #24]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d302      	bcc.n	8006a48 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e04e      	b.n	8006aea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0304 	and.w	r3, r3, #4
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d037      	beq.n	8006aca <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2b80      	cmp	r3, #128	@ 0x80
 8006a5e:	d034      	beq.n	8006aca <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	2b40      	cmp	r3, #64	@ 0x40
 8006a64:	d031      	beq.n	8006aca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	69db      	ldr	r3, [r3, #28]
 8006a6c:	f003 0308 	and.w	r3, r3, #8
 8006a70:	2b08      	cmp	r3, #8
 8006a72:	d110      	bne.n	8006a96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2208      	movs	r2, #8
 8006a7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 f838 	bl	8006af2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2208      	movs	r2, #8
 8006a86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e029      	b.n	8006aea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006aa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006aa4:	d111      	bne.n	8006aca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006aae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 f81e 	bl	8006af2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e00f      	b.n	8006aea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69da      	ldr	r2, [r3, #28]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	bf0c      	ite	eq
 8006ada:	2301      	moveq	r3, #1
 8006adc:	2300      	movne	r3, #0
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	79fb      	ldrb	r3, [r7, #7]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d0a0      	beq.n	8006a2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b095      	sub	sp, #84	@ 0x54
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b02:	e853 3f00 	ldrex	r3, [r3]
 8006b06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	461a      	mov	r2, r3
 8006b16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b18:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b1a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b20:	e841 2300 	strex	r3, r2, [r1]
 8006b24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e6      	bne.n	8006afa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3308      	adds	r3, #8
 8006b32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	e853 3f00 	ldrex	r3, [r3]
 8006b3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	f023 0301 	bic.w	r3, r3, #1
 8006b42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	3308      	adds	r3, #8
 8006b4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b54:	e841 2300 	strex	r3, r2, [r1]
 8006b58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1e5      	bne.n	8006b2c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d118      	bne.n	8006b9a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	f023 0310 	bic.w	r3, r3, #16
 8006b7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	461a      	mov	r2, r3
 8006b84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b86:	61bb      	str	r3, [r7, #24]
 8006b88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	6979      	ldr	r1, [r7, #20]
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	e841 2300 	strex	r3, r2, [r1]
 8006b92:	613b      	str	r3, [r7, #16]
   return(result);
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1e6      	bne.n	8006b68 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006bae:	bf00      	nop
 8006bb0:	3754      	adds	r7, #84	@ 0x54
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b084      	sub	sp, #16
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f7ff fb05 	bl	80061e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bde:	bf00      	nop
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b088      	sub	sp, #32
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	e853 3f00 	ldrex	r3, [r3]
 8006bfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c02:	61fb      	str	r3, [r7, #28]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	461a      	mov	r2, r3
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	61bb      	str	r3, [r7, #24]
 8006c0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c10:	6979      	ldr	r1, [r7, #20]
 8006c12:	69ba      	ldr	r2, [r7, #24]
 8006c14:	e841 2300 	strex	r3, r2, [r1]
 8006c18:	613b      	str	r3, [r7, #16]
   return(result);
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1e6      	bne.n	8006bee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2220      	movs	r2, #32
 8006c24:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7ff fad1 	bl	80061d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c32:	bf00      	nop
 8006c34:	3720      	adds	r7, #32
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c42:	bf00      	nop
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8006c4e:	b480      	push	{r7}
 8006c50:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8006c52:	bf00      	nop
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af04      	add	r7, sp, #16
 8006c62:	4603      	mov	r3, r0
 8006c64:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8006c66:	f04f 33ff 	mov.w	r3, #4294967295
 8006c6a:	9302      	str	r3, [sp, #8]
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	9301      	str	r3, [sp, #4]
 8006c70:	1dfb      	adds	r3, r7, #7
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	2301      	movs	r3, #1
 8006c76:	2200      	movs	r2, #0
 8006c78:	2178      	movs	r1, #120	@ 0x78
 8006c7a:	4803      	ldr	r0, [pc, #12]	@ (8006c88 <ssd1306_WriteCommand+0x2c>)
 8006c7c:	f7fc ff92 	bl	8003ba4 <HAL_I2C_Mem_Write>
}
 8006c80:	bf00      	nop
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	20000164 	.word	0x20000164

08006c8c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af04      	add	r7, sp, #16
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c9e:	9202      	str	r2, [sp, #8]
 8006ca0:	9301      	str	r3, [sp, #4]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	2240      	movs	r2, #64	@ 0x40
 8006caa:	2178      	movs	r1, #120	@ 0x78
 8006cac:	4803      	ldr	r0, [pc, #12]	@ (8006cbc <ssd1306_WriteData+0x30>)
 8006cae:	f7fc ff79 	bl	8003ba4 <HAL_I2C_Mem_Write>
}
 8006cb2:	bf00      	nop
 8006cb4:	3708      	adds	r7, #8
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	20000164 	.word	0x20000164

08006cc0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8006cc4:	f7ff ffc3 	bl	8006c4e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8006cc8:	2064      	movs	r0, #100	@ 0x64
 8006cca:	f7fa fe71 	bl	80019b0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8006cce:	2000      	movs	r0, #0
 8006cd0:	f000 f9d6 	bl	8007080 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8006cd4:	2020      	movs	r0, #32
 8006cd6:	f7ff ffc1 	bl	8006c5c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8006cda:	2000      	movs	r0, #0
 8006cdc:	f7ff ffbe 	bl	8006c5c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8006ce0:	20b0      	movs	r0, #176	@ 0xb0
 8006ce2:	f7ff ffbb 	bl	8006c5c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8006ce6:	20c8      	movs	r0, #200	@ 0xc8
 8006ce8:	f7ff ffb8 	bl	8006c5c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8006cec:	2000      	movs	r0, #0
 8006cee:	f7ff ffb5 	bl	8006c5c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8006cf2:	2010      	movs	r0, #16
 8006cf4:	f7ff ffb2 	bl	8006c5c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8006cf8:	2040      	movs	r0, #64	@ 0x40
 8006cfa:	f7ff ffaf 	bl	8006c5c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8006cfe:	20ff      	movs	r0, #255	@ 0xff
 8006d00:	f000 f9aa 	bl	8007058 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8006d04:	20a1      	movs	r0, #161	@ 0xa1
 8006d06:	f7ff ffa9 	bl	8006c5c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8006d0a:	20a6      	movs	r0, #166	@ 0xa6
 8006d0c:	f7ff ffa6 	bl	8006c5c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8006d10:	20a8      	movs	r0, #168	@ 0xa8
 8006d12:	f7ff ffa3 	bl	8006c5c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8006d16:	203f      	movs	r0, #63	@ 0x3f
 8006d18:	f7ff ffa0 	bl	8006c5c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006d1c:	20a4      	movs	r0, #164	@ 0xa4
 8006d1e:	f7ff ff9d 	bl	8006c5c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8006d22:	20d3      	movs	r0, #211	@ 0xd3
 8006d24:	f7ff ff9a 	bl	8006c5c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8006d28:	2000      	movs	r0, #0
 8006d2a:	f7ff ff97 	bl	8006c5c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8006d2e:	20d5      	movs	r0, #213	@ 0xd5
 8006d30:	f7ff ff94 	bl	8006c5c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8006d34:	20f0      	movs	r0, #240	@ 0xf0
 8006d36:	f7ff ff91 	bl	8006c5c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8006d3a:	20d9      	movs	r0, #217	@ 0xd9
 8006d3c:	f7ff ff8e 	bl	8006c5c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8006d40:	2022      	movs	r0, #34	@ 0x22
 8006d42:	f7ff ff8b 	bl	8006c5c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8006d46:	20da      	movs	r0, #218	@ 0xda
 8006d48:	f7ff ff88 	bl	8006c5c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8006d4c:	2012      	movs	r0, #18
 8006d4e:	f7ff ff85 	bl	8006c5c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8006d52:	20db      	movs	r0, #219	@ 0xdb
 8006d54:	f7ff ff82 	bl	8006c5c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8006d58:	2020      	movs	r0, #32
 8006d5a:	f7ff ff7f 	bl	8006c5c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8006d5e:	208d      	movs	r0, #141	@ 0x8d
 8006d60:	f7ff ff7c 	bl	8006c5c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8006d64:	2014      	movs	r0, #20
 8006d66:	f7ff ff79 	bl	8006c5c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8006d6a:	2001      	movs	r0, #1
 8006d6c:	f000 f988 	bl	8007080 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8006d70:	2000      	movs	r0, #0
 8006d72:	f000 f80f 	bl	8006d94 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8006d76:	f000 f825 	bl	8006dc4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8006d7a:	4b05      	ldr	r3, [pc, #20]	@ (8006d90 <ssd1306_Init+0xd0>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8006d80:	4b03      	ldr	r3, [pc, #12]	@ (8006d90 <ssd1306_Init+0xd0>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8006d86:	4b02      	ldr	r3, [pc, #8]	@ (8006d90 <ssd1306_Init+0xd0>)
 8006d88:	2201      	movs	r2, #1
 8006d8a:	711a      	strb	r2, [r3, #4]
}
 8006d8c:	bf00      	nop
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	20000694 	.word	0x20000694

08006d94 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8006d9e:	79fb      	ldrb	r3, [r7, #7]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <ssd1306_Fill+0x14>
 8006da4:	2300      	movs	r3, #0
 8006da6:	e000      	b.n	8006daa <ssd1306_Fill+0x16>
 8006da8:	23ff      	movs	r3, #255	@ 0xff
 8006daa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006dae:	4619      	mov	r1, r3
 8006db0:	4803      	ldr	r0, [pc, #12]	@ (8006dc0 <ssd1306_Fill+0x2c>)
 8006db2:	f000 fbb5 	bl	8007520 <memset>
}
 8006db6:	bf00      	nop
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	20000294 	.word	0x20000294

08006dc4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8006dca:	2300      	movs	r3, #0
 8006dcc:	71fb      	strb	r3, [r7, #7]
 8006dce:	e016      	b.n	8006dfe <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8006dd0:	79fb      	ldrb	r3, [r7, #7]
 8006dd2:	3b50      	subs	r3, #80	@ 0x50
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7ff ff40 	bl	8006c5c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8006ddc:	2000      	movs	r0, #0
 8006dde:	f7ff ff3d 	bl	8006c5c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8006de2:	2010      	movs	r0, #16
 8006de4:	f7ff ff3a 	bl	8006c5c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8006de8:	79fb      	ldrb	r3, [r7, #7]
 8006dea:	01db      	lsls	r3, r3, #7
 8006dec:	4a08      	ldr	r2, [pc, #32]	@ (8006e10 <ssd1306_UpdateScreen+0x4c>)
 8006dee:	4413      	add	r3, r2
 8006df0:	2180      	movs	r1, #128	@ 0x80
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7ff ff4a 	bl	8006c8c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8006df8:	79fb      	ldrb	r3, [r7, #7]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	71fb      	strb	r3, [r7, #7]
 8006dfe:	79fb      	ldrb	r3, [r7, #7]
 8006e00:	2b07      	cmp	r3, #7
 8006e02:	d9e5      	bls.n	8006dd0 <ssd1306_UpdateScreen+0xc>
    }
}
 8006e04:	bf00      	nop
 8006e06:	bf00      	nop
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	20000294 	.word	0x20000294

08006e14 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	71fb      	strb	r3, [r7, #7]
 8006e1e:	460b      	mov	r3, r1
 8006e20:	71bb      	strb	r3, [r7, #6]
 8006e22:	4613      	mov	r3, r2
 8006e24:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8006e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	db3d      	blt.n	8006eaa <ssd1306_DrawPixel+0x96>
 8006e2e:	79bb      	ldrb	r3, [r7, #6]
 8006e30:	2b3f      	cmp	r3, #63	@ 0x3f
 8006e32:	d83a      	bhi.n	8006eaa <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8006e34:	797b      	ldrb	r3, [r7, #5]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d11a      	bne.n	8006e70 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8006e3a:	79fa      	ldrb	r2, [r7, #7]
 8006e3c:	79bb      	ldrb	r3, [r7, #6]
 8006e3e:	08db      	lsrs	r3, r3, #3
 8006e40:	b2d8      	uxtb	r0, r3
 8006e42:	4603      	mov	r3, r0
 8006e44:	01db      	lsls	r3, r3, #7
 8006e46:	4413      	add	r3, r2
 8006e48:	4a1b      	ldr	r2, [pc, #108]	@ (8006eb8 <ssd1306_DrawPixel+0xa4>)
 8006e4a:	5cd3      	ldrb	r3, [r2, r3]
 8006e4c:	b25a      	sxtb	r2, r3
 8006e4e:	79bb      	ldrb	r3, [r7, #6]
 8006e50:	f003 0307 	and.w	r3, r3, #7
 8006e54:	2101      	movs	r1, #1
 8006e56:	fa01 f303 	lsl.w	r3, r1, r3
 8006e5a:	b25b      	sxtb	r3, r3
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	b259      	sxtb	r1, r3
 8006e60:	79fa      	ldrb	r2, [r7, #7]
 8006e62:	4603      	mov	r3, r0
 8006e64:	01db      	lsls	r3, r3, #7
 8006e66:	4413      	add	r3, r2
 8006e68:	b2c9      	uxtb	r1, r1
 8006e6a:	4a13      	ldr	r2, [pc, #76]	@ (8006eb8 <ssd1306_DrawPixel+0xa4>)
 8006e6c:	54d1      	strb	r1, [r2, r3]
 8006e6e:	e01d      	b.n	8006eac <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006e70:	79fa      	ldrb	r2, [r7, #7]
 8006e72:	79bb      	ldrb	r3, [r7, #6]
 8006e74:	08db      	lsrs	r3, r3, #3
 8006e76:	b2d8      	uxtb	r0, r3
 8006e78:	4603      	mov	r3, r0
 8006e7a:	01db      	lsls	r3, r3, #7
 8006e7c:	4413      	add	r3, r2
 8006e7e:	4a0e      	ldr	r2, [pc, #56]	@ (8006eb8 <ssd1306_DrawPixel+0xa4>)
 8006e80:	5cd3      	ldrb	r3, [r2, r3]
 8006e82:	b25a      	sxtb	r2, r3
 8006e84:	79bb      	ldrb	r3, [r7, #6]
 8006e86:	f003 0307 	and.w	r3, r3, #7
 8006e8a:	2101      	movs	r1, #1
 8006e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e90:	b25b      	sxtb	r3, r3
 8006e92:	43db      	mvns	r3, r3
 8006e94:	b25b      	sxtb	r3, r3
 8006e96:	4013      	ands	r3, r2
 8006e98:	b259      	sxtb	r1, r3
 8006e9a:	79fa      	ldrb	r2, [r7, #7]
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	01db      	lsls	r3, r3, #7
 8006ea0:	4413      	add	r3, r2
 8006ea2:	b2c9      	uxtb	r1, r1
 8006ea4:	4a04      	ldr	r2, [pc, #16]	@ (8006eb8 <ssd1306_DrawPixel+0xa4>)
 8006ea6:	54d1      	strb	r1, [r2, r3]
 8006ea8:	e000      	b.n	8006eac <ssd1306_DrawPixel+0x98>
        return;
 8006eaa:	bf00      	nop
    }
}
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	20000294 	.word	0x20000294

08006ebc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8006ebc:	b590      	push	{r4, r7, lr}
 8006ebe:	b089      	sub	sp, #36	@ 0x24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	4604      	mov	r4, r0
 8006ec4:	4638      	mov	r0, r7
 8006ec6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8006eca:	4623      	mov	r3, r4
 8006ecc:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8006ece:	7bfb      	ldrb	r3, [r7, #15]
 8006ed0:	2b1f      	cmp	r3, #31
 8006ed2:	d902      	bls.n	8006eda <ssd1306_WriteChar+0x1e>
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
 8006ed6:	2b7e      	cmp	r3, #126	@ 0x7e
 8006ed8:	d901      	bls.n	8006ede <ssd1306_WriteChar+0x22>
        return 0;
 8006eda:	2300      	movs	r3, #0
 8006edc:	e077      	b.n	8006fce <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8006ede:	4b3e      	ldr	r3, [pc, #248]	@ (8006fd8 <ssd1306_WriteChar+0x11c>)
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	783b      	ldrb	r3, [r7, #0]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	2b80      	cmp	r3, #128	@ 0x80
 8006eea:	dc06      	bgt.n	8006efa <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8006eec:	4b3a      	ldr	r3, [pc, #232]	@ (8006fd8 <ssd1306_WriteChar+0x11c>)
 8006eee:	885b      	ldrh	r3, [r3, #2]
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	787b      	ldrb	r3, [r7, #1]
 8006ef4:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8006ef6:	2b40      	cmp	r3, #64	@ 0x40
 8006ef8:	dd01      	ble.n	8006efe <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8006efa:	2300      	movs	r3, #0
 8006efc:	e067      	b.n	8006fce <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8006efe:	2300      	movs	r3, #0
 8006f00:	61fb      	str	r3, [r7, #28]
 8006f02:	e04e      	b.n	8006fa2 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	7bfb      	ldrb	r3, [r7, #15]
 8006f08:	3b20      	subs	r3, #32
 8006f0a:	7879      	ldrb	r1, [r7, #1]
 8006f0c:	fb01 f303 	mul.w	r3, r1, r3
 8006f10:	4619      	mov	r1, r3
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	440b      	add	r3, r1
 8006f16:	005b      	lsls	r3, r3, #1
 8006f18:	4413      	add	r3, r2
 8006f1a:	881b      	ldrh	r3, [r3, #0]
 8006f1c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8006f1e:	2300      	movs	r3, #0
 8006f20:	61bb      	str	r3, [r7, #24]
 8006f22:	e036      	b.n	8006f92 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d013      	beq.n	8006f5c <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8006f34:	4b28      	ldr	r3, [pc, #160]	@ (8006fd8 <ssd1306_WriteChar+0x11c>)
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	4413      	add	r3, r2
 8006f40:	b2d8      	uxtb	r0, r3
 8006f42:	4b25      	ldr	r3, [pc, #148]	@ (8006fd8 <ssd1306_WriteChar+0x11c>)
 8006f44:	885b      	ldrh	r3, [r3, #2]
 8006f46:	b2da      	uxtb	r2, r3
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	4413      	add	r3, r2
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8006f54:	4619      	mov	r1, r3
 8006f56:	f7ff ff5d 	bl	8006e14 <ssd1306_DrawPixel>
 8006f5a:	e017      	b.n	8006f8c <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8006f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8006fd8 <ssd1306_WriteChar+0x11c>)
 8006f5e:	881b      	ldrh	r3, [r3, #0]
 8006f60:	b2da      	uxtb	r2, r3
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	4413      	add	r3, r2
 8006f68:	b2d8      	uxtb	r0, r3
 8006f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8006fd8 <ssd1306_WriteChar+0x11c>)
 8006f6c:	885b      	ldrh	r3, [r3, #2]
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	4413      	add	r3, r2
 8006f76:	b2d9      	uxtb	r1, r3
 8006f78:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	bf0c      	ite	eq
 8006f80:	2301      	moveq	r3, #1
 8006f82:	2300      	movne	r3, #0
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	461a      	mov	r2, r3
 8006f88:	f7ff ff44 	bl	8006e14 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	61bb      	str	r3, [r7, #24]
 8006f92:	783b      	ldrb	r3, [r7, #0]
 8006f94:	461a      	mov	r2, r3
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d3c3      	bcc.n	8006f24 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	61fb      	str	r3, [r7, #28]
 8006fa2:	787b      	ldrb	r3, [r7, #1]
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d3ab      	bcc.n	8006f04 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8006fac:	4b0a      	ldr	r3, [pc, #40]	@ (8006fd8 <ssd1306_WriteChar+0x11c>)
 8006fae:	881b      	ldrh	r3, [r3, #0]
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	2a00      	cmp	r2, #0
 8006fb4:	d005      	beq.n	8006fc2 <ssd1306_WriteChar+0x106>
 8006fb6:	68b9      	ldr	r1, [r7, #8]
 8006fb8:	7bfa      	ldrb	r2, [r7, #15]
 8006fba:	3a20      	subs	r2, #32
 8006fbc:	440a      	add	r2, r1
 8006fbe:	7812      	ldrb	r2, [r2, #0]
 8006fc0:	e000      	b.n	8006fc4 <ssd1306_WriteChar+0x108>
 8006fc2:	783a      	ldrb	r2, [r7, #0]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	4b03      	ldr	r3, [pc, #12]	@ (8006fd8 <ssd1306_WriteChar+0x11c>)
 8006fca:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3724      	adds	r7, #36	@ 0x24
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd90      	pop	{r4, r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	20000694 	.word	0x20000694

08006fdc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af02      	add	r7, sp, #8
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	4638      	mov	r0, r7
 8006fe6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8006fea:	e013      	b.n	8007014 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	7818      	ldrb	r0, [r3, #0]
 8006ff0:	7e3b      	ldrb	r3, [r7, #24]
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	463b      	mov	r3, r7
 8006ff6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ff8:	f7ff ff60 	bl	8006ebc <ssd1306_WriteChar>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	461a      	mov	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	429a      	cmp	r2, r3
 8007006:	d002      	beq.n	800700e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	e008      	b.n	8007020 <ssd1306_WriteString+0x44>
        }
        str++;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	3301      	adds	r3, #1
 8007012:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1e7      	bne.n	8006fec <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	781b      	ldrb	r3, [r3, #0]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	4603      	mov	r3, r0
 8007030:	460a      	mov	r2, r1
 8007032:	71fb      	strb	r3, [r7, #7]
 8007034:	4613      	mov	r3, r2
 8007036:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8007038:	79fb      	ldrb	r3, [r7, #7]
 800703a:	b29a      	uxth	r2, r3
 800703c:	4b05      	ldr	r3, [pc, #20]	@ (8007054 <ssd1306_SetCursor+0x2c>)
 800703e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8007040:	79bb      	ldrb	r3, [r7, #6]
 8007042:	b29a      	uxth	r2, r3
 8007044:	4b03      	ldr	r3, [pc, #12]	@ (8007054 <ssd1306_SetCursor+0x2c>)
 8007046:	805a      	strh	r2, [r3, #2]
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr
 8007054:	20000694 	.word	0x20000694

08007058 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	4603      	mov	r3, r0
 8007060:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8007062:	2381      	movs	r3, #129	@ 0x81
 8007064:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8007066:	7bfb      	ldrb	r3, [r7, #15]
 8007068:	4618      	mov	r0, r3
 800706a:	f7ff fdf7 	bl	8006c5c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800706e:	79fb      	ldrb	r3, [r7, #7]
 8007070:	4618      	mov	r0, r3
 8007072:	f7ff fdf3 	bl	8006c5c <ssd1306_WriteCommand>
}
 8007076:	bf00      	nop
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
	...

08007080 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	4603      	mov	r3, r0
 8007088:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800708a:	79fb      	ldrb	r3, [r7, #7]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d005      	beq.n	800709c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8007090:	23af      	movs	r3, #175	@ 0xaf
 8007092:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8007094:	4b08      	ldr	r3, [pc, #32]	@ (80070b8 <ssd1306_SetDisplayOn+0x38>)
 8007096:	2201      	movs	r2, #1
 8007098:	715a      	strb	r2, [r3, #5]
 800709a:	e004      	b.n	80070a6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800709c:	23ae      	movs	r3, #174	@ 0xae
 800709e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80070a0:	4b05      	ldr	r3, [pc, #20]	@ (80070b8 <ssd1306_SetDisplayOn+0x38>)
 80070a2:	2200      	movs	r2, #0
 80070a4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80070a6:	7bfb      	ldrb	r3, [r7, #15]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7ff fdd7 	bl	8006c5c <ssd1306_WriteCommand>
}
 80070ae:	bf00      	nop
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	20000694 	.word	0x20000694

080070bc <std>:
 80070bc:	2300      	movs	r3, #0
 80070be:	b510      	push	{r4, lr}
 80070c0:	4604      	mov	r4, r0
 80070c2:	e9c0 3300 	strd	r3, r3, [r0]
 80070c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070ca:	6083      	str	r3, [r0, #8]
 80070cc:	8181      	strh	r1, [r0, #12]
 80070ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80070d0:	81c2      	strh	r2, [r0, #14]
 80070d2:	6183      	str	r3, [r0, #24]
 80070d4:	4619      	mov	r1, r3
 80070d6:	2208      	movs	r2, #8
 80070d8:	305c      	adds	r0, #92	@ 0x5c
 80070da:	f000 fa21 	bl	8007520 <memset>
 80070de:	4b0d      	ldr	r3, [pc, #52]	@ (8007114 <std+0x58>)
 80070e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80070e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007118 <std+0x5c>)
 80070e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80070e6:	4b0d      	ldr	r3, [pc, #52]	@ (800711c <std+0x60>)
 80070e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80070ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007120 <std+0x64>)
 80070ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80070ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007124 <std+0x68>)
 80070f0:	6224      	str	r4, [r4, #32]
 80070f2:	429c      	cmp	r4, r3
 80070f4:	d006      	beq.n	8007104 <std+0x48>
 80070f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80070fa:	4294      	cmp	r4, r2
 80070fc:	d002      	beq.n	8007104 <std+0x48>
 80070fe:	33d0      	adds	r3, #208	@ 0xd0
 8007100:	429c      	cmp	r4, r3
 8007102:	d105      	bne.n	8007110 <std+0x54>
 8007104:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800710c:	f000 ba80 	b.w	8007610 <__retarget_lock_init_recursive>
 8007110:	bd10      	pop	{r4, pc}
 8007112:	bf00      	nop
 8007114:	0800733d 	.word	0x0800733d
 8007118:	0800735f 	.word	0x0800735f
 800711c:	08007397 	.word	0x08007397
 8007120:	080073bb 	.word	0x080073bb
 8007124:	2000069c 	.word	0x2000069c

08007128 <stdio_exit_handler>:
 8007128:	4a02      	ldr	r2, [pc, #8]	@ (8007134 <stdio_exit_handler+0xc>)
 800712a:	4903      	ldr	r1, [pc, #12]	@ (8007138 <stdio_exit_handler+0x10>)
 800712c:	4803      	ldr	r0, [pc, #12]	@ (800713c <stdio_exit_handler+0x14>)
 800712e:	f000 b869 	b.w	8007204 <_fwalk_sglue>
 8007132:	bf00      	nop
 8007134:	20000020 	.word	0x20000020
 8007138:	08007ef9 	.word	0x08007ef9
 800713c:	20000030 	.word	0x20000030

08007140 <cleanup_stdio>:
 8007140:	6841      	ldr	r1, [r0, #4]
 8007142:	4b0c      	ldr	r3, [pc, #48]	@ (8007174 <cleanup_stdio+0x34>)
 8007144:	4299      	cmp	r1, r3
 8007146:	b510      	push	{r4, lr}
 8007148:	4604      	mov	r4, r0
 800714a:	d001      	beq.n	8007150 <cleanup_stdio+0x10>
 800714c:	f000 fed4 	bl	8007ef8 <_fflush_r>
 8007150:	68a1      	ldr	r1, [r4, #8]
 8007152:	4b09      	ldr	r3, [pc, #36]	@ (8007178 <cleanup_stdio+0x38>)
 8007154:	4299      	cmp	r1, r3
 8007156:	d002      	beq.n	800715e <cleanup_stdio+0x1e>
 8007158:	4620      	mov	r0, r4
 800715a:	f000 fecd 	bl	8007ef8 <_fflush_r>
 800715e:	68e1      	ldr	r1, [r4, #12]
 8007160:	4b06      	ldr	r3, [pc, #24]	@ (800717c <cleanup_stdio+0x3c>)
 8007162:	4299      	cmp	r1, r3
 8007164:	d004      	beq.n	8007170 <cleanup_stdio+0x30>
 8007166:	4620      	mov	r0, r4
 8007168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800716c:	f000 bec4 	b.w	8007ef8 <_fflush_r>
 8007170:	bd10      	pop	{r4, pc}
 8007172:	bf00      	nop
 8007174:	2000069c 	.word	0x2000069c
 8007178:	20000704 	.word	0x20000704
 800717c:	2000076c 	.word	0x2000076c

08007180 <global_stdio_init.part.0>:
 8007180:	b510      	push	{r4, lr}
 8007182:	4b0b      	ldr	r3, [pc, #44]	@ (80071b0 <global_stdio_init.part.0+0x30>)
 8007184:	4c0b      	ldr	r4, [pc, #44]	@ (80071b4 <global_stdio_init.part.0+0x34>)
 8007186:	4a0c      	ldr	r2, [pc, #48]	@ (80071b8 <global_stdio_init.part.0+0x38>)
 8007188:	601a      	str	r2, [r3, #0]
 800718a:	4620      	mov	r0, r4
 800718c:	2200      	movs	r2, #0
 800718e:	2104      	movs	r1, #4
 8007190:	f7ff ff94 	bl	80070bc <std>
 8007194:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007198:	2201      	movs	r2, #1
 800719a:	2109      	movs	r1, #9
 800719c:	f7ff ff8e 	bl	80070bc <std>
 80071a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80071a4:	2202      	movs	r2, #2
 80071a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071aa:	2112      	movs	r1, #18
 80071ac:	f7ff bf86 	b.w	80070bc <std>
 80071b0:	200007d4 	.word	0x200007d4
 80071b4:	2000069c 	.word	0x2000069c
 80071b8:	08007129 	.word	0x08007129

080071bc <__sfp_lock_acquire>:
 80071bc:	4801      	ldr	r0, [pc, #4]	@ (80071c4 <__sfp_lock_acquire+0x8>)
 80071be:	f000 ba28 	b.w	8007612 <__retarget_lock_acquire_recursive>
 80071c2:	bf00      	nop
 80071c4:	200007dd 	.word	0x200007dd

080071c8 <__sfp_lock_release>:
 80071c8:	4801      	ldr	r0, [pc, #4]	@ (80071d0 <__sfp_lock_release+0x8>)
 80071ca:	f000 ba23 	b.w	8007614 <__retarget_lock_release_recursive>
 80071ce:	bf00      	nop
 80071d0:	200007dd 	.word	0x200007dd

080071d4 <__sinit>:
 80071d4:	b510      	push	{r4, lr}
 80071d6:	4604      	mov	r4, r0
 80071d8:	f7ff fff0 	bl	80071bc <__sfp_lock_acquire>
 80071dc:	6a23      	ldr	r3, [r4, #32]
 80071de:	b11b      	cbz	r3, 80071e8 <__sinit+0x14>
 80071e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071e4:	f7ff bff0 	b.w	80071c8 <__sfp_lock_release>
 80071e8:	4b04      	ldr	r3, [pc, #16]	@ (80071fc <__sinit+0x28>)
 80071ea:	6223      	str	r3, [r4, #32]
 80071ec:	4b04      	ldr	r3, [pc, #16]	@ (8007200 <__sinit+0x2c>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1f5      	bne.n	80071e0 <__sinit+0xc>
 80071f4:	f7ff ffc4 	bl	8007180 <global_stdio_init.part.0>
 80071f8:	e7f2      	b.n	80071e0 <__sinit+0xc>
 80071fa:	bf00      	nop
 80071fc:	08007141 	.word	0x08007141
 8007200:	200007d4 	.word	0x200007d4

08007204 <_fwalk_sglue>:
 8007204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007208:	4607      	mov	r7, r0
 800720a:	4688      	mov	r8, r1
 800720c:	4614      	mov	r4, r2
 800720e:	2600      	movs	r6, #0
 8007210:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007214:	f1b9 0901 	subs.w	r9, r9, #1
 8007218:	d505      	bpl.n	8007226 <_fwalk_sglue+0x22>
 800721a:	6824      	ldr	r4, [r4, #0]
 800721c:	2c00      	cmp	r4, #0
 800721e:	d1f7      	bne.n	8007210 <_fwalk_sglue+0xc>
 8007220:	4630      	mov	r0, r6
 8007222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007226:	89ab      	ldrh	r3, [r5, #12]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d907      	bls.n	800723c <_fwalk_sglue+0x38>
 800722c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007230:	3301      	adds	r3, #1
 8007232:	d003      	beq.n	800723c <_fwalk_sglue+0x38>
 8007234:	4629      	mov	r1, r5
 8007236:	4638      	mov	r0, r7
 8007238:	47c0      	blx	r8
 800723a:	4306      	orrs	r6, r0
 800723c:	3568      	adds	r5, #104	@ 0x68
 800723e:	e7e9      	b.n	8007214 <_fwalk_sglue+0x10>

08007240 <_puts_r>:
 8007240:	6a03      	ldr	r3, [r0, #32]
 8007242:	b570      	push	{r4, r5, r6, lr}
 8007244:	6884      	ldr	r4, [r0, #8]
 8007246:	4605      	mov	r5, r0
 8007248:	460e      	mov	r6, r1
 800724a:	b90b      	cbnz	r3, 8007250 <_puts_r+0x10>
 800724c:	f7ff ffc2 	bl	80071d4 <__sinit>
 8007250:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007252:	07db      	lsls	r3, r3, #31
 8007254:	d405      	bmi.n	8007262 <_puts_r+0x22>
 8007256:	89a3      	ldrh	r3, [r4, #12]
 8007258:	0598      	lsls	r0, r3, #22
 800725a:	d402      	bmi.n	8007262 <_puts_r+0x22>
 800725c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800725e:	f000 f9d8 	bl	8007612 <__retarget_lock_acquire_recursive>
 8007262:	89a3      	ldrh	r3, [r4, #12]
 8007264:	0719      	lsls	r1, r3, #28
 8007266:	d502      	bpl.n	800726e <_puts_r+0x2e>
 8007268:	6923      	ldr	r3, [r4, #16]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d135      	bne.n	80072da <_puts_r+0x9a>
 800726e:	4621      	mov	r1, r4
 8007270:	4628      	mov	r0, r5
 8007272:	f000 f8e5 	bl	8007440 <__swsetup_r>
 8007276:	b380      	cbz	r0, 80072da <_puts_r+0x9a>
 8007278:	f04f 35ff 	mov.w	r5, #4294967295
 800727c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800727e:	07da      	lsls	r2, r3, #31
 8007280:	d405      	bmi.n	800728e <_puts_r+0x4e>
 8007282:	89a3      	ldrh	r3, [r4, #12]
 8007284:	059b      	lsls	r3, r3, #22
 8007286:	d402      	bmi.n	800728e <_puts_r+0x4e>
 8007288:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800728a:	f000 f9c3 	bl	8007614 <__retarget_lock_release_recursive>
 800728e:	4628      	mov	r0, r5
 8007290:	bd70      	pop	{r4, r5, r6, pc}
 8007292:	2b00      	cmp	r3, #0
 8007294:	da04      	bge.n	80072a0 <_puts_r+0x60>
 8007296:	69a2      	ldr	r2, [r4, #24]
 8007298:	429a      	cmp	r2, r3
 800729a:	dc17      	bgt.n	80072cc <_puts_r+0x8c>
 800729c:	290a      	cmp	r1, #10
 800729e:	d015      	beq.n	80072cc <_puts_r+0x8c>
 80072a0:	6823      	ldr	r3, [r4, #0]
 80072a2:	1c5a      	adds	r2, r3, #1
 80072a4:	6022      	str	r2, [r4, #0]
 80072a6:	7019      	strb	r1, [r3, #0]
 80072a8:	68a3      	ldr	r3, [r4, #8]
 80072aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80072ae:	3b01      	subs	r3, #1
 80072b0:	60a3      	str	r3, [r4, #8]
 80072b2:	2900      	cmp	r1, #0
 80072b4:	d1ed      	bne.n	8007292 <_puts_r+0x52>
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	da11      	bge.n	80072de <_puts_r+0x9e>
 80072ba:	4622      	mov	r2, r4
 80072bc:	210a      	movs	r1, #10
 80072be:	4628      	mov	r0, r5
 80072c0:	f000 f87f 	bl	80073c2 <__swbuf_r>
 80072c4:	3001      	adds	r0, #1
 80072c6:	d0d7      	beq.n	8007278 <_puts_r+0x38>
 80072c8:	250a      	movs	r5, #10
 80072ca:	e7d7      	b.n	800727c <_puts_r+0x3c>
 80072cc:	4622      	mov	r2, r4
 80072ce:	4628      	mov	r0, r5
 80072d0:	f000 f877 	bl	80073c2 <__swbuf_r>
 80072d4:	3001      	adds	r0, #1
 80072d6:	d1e7      	bne.n	80072a8 <_puts_r+0x68>
 80072d8:	e7ce      	b.n	8007278 <_puts_r+0x38>
 80072da:	3e01      	subs	r6, #1
 80072dc:	e7e4      	b.n	80072a8 <_puts_r+0x68>
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	1c5a      	adds	r2, r3, #1
 80072e2:	6022      	str	r2, [r4, #0]
 80072e4:	220a      	movs	r2, #10
 80072e6:	701a      	strb	r2, [r3, #0]
 80072e8:	e7ee      	b.n	80072c8 <_puts_r+0x88>
	...

080072ec <puts>:
 80072ec:	4b02      	ldr	r3, [pc, #8]	@ (80072f8 <puts+0xc>)
 80072ee:	4601      	mov	r1, r0
 80072f0:	6818      	ldr	r0, [r3, #0]
 80072f2:	f7ff bfa5 	b.w	8007240 <_puts_r>
 80072f6:	bf00      	nop
 80072f8:	2000002c 	.word	0x2000002c

080072fc <siprintf>:
 80072fc:	b40e      	push	{r1, r2, r3}
 80072fe:	b500      	push	{lr}
 8007300:	b09c      	sub	sp, #112	@ 0x70
 8007302:	ab1d      	add	r3, sp, #116	@ 0x74
 8007304:	9002      	str	r0, [sp, #8]
 8007306:	9006      	str	r0, [sp, #24]
 8007308:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800730c:	4809      	ldr	r0, [pc, #36]	@ (8007334 <siprintf+0x38>)
 800730e:	9107      	str	r1, [sp, #28]
 8007310:	9104      	str	r1, [sp, #16]
 8007312:	4909      	ldr	r1, [pc, #36]	@ (8007338 <siprintf+0x3c>)
 8007314:	f853 2b04 	ldr.w	r2, [r3], #4
 8007318:	9105      	str	r1, [sp, #20]
 800731a:	6800      	ldr	r0, [r0, #0]
 800731c:	9301      	str	r3, [sp, #4]
 800731e:	a902      	add	r1, sp, #8
 8007320:	f000 fadc 	bl	80078dc <_svfiprintf_r>
 8007324:	9b02      	ldr	r3, [sp, #8]
 8007326:	2200      	movs	r2, #0
 8007328:	701a      	strb	r2, [r3, #0]
 800732a:	b01c      	add	sp, #112	@ 0x70
 800732c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007330:	b003      	add	sp, #12
 8007332:	4770      	bx	lr
 8007334:	2000002c 	.word	0x2000002c
 8007338:	ffff0208 	.word	0xffff0208

0800733c <__sread>:
 800733c:	b510      	push	{r4, lr}
 800733e:	460c      	mov	r4, r1
 8007340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007344:	f000 f916 	bl	8007574 <_read_r>
 8007348:	2800      	cmp	r0, #0
 800734a:	bfab      	itete	ge
 800734c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800734e:	89a3      	ldrhlt	r3, [r4, #12]
 8007350:	181b      	addge	r3, r3, r0
 8007352:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007356:	bfac      	ite	ge
 8007358:	6563      	strge	r3, [r4, #84]	@ 0x54
 800735a:	81a3      	strhlt	r3, [r4, #12]
 800735c:	bd10      	pop	{r4, pc}

0800735e <__swrite>:
 800735e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007362:	461f      	mov	r7, r3
 8007364:	898b      	ldrh	r3, [r1, #12]
 8007366:	05db      	lsls	r3, r3, #23
 8007368:	4605      	mov	r5, r0
 800736a:	460c      	mov	r4, r1
 800736c:	4616      	mov	r6, r2
 800736e:	d505      	bpl.n	800737c <__swrite+0x1e>
 8007370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007374:	2302      	movs	r3, #2
 8007376:	2200      	movs	r2, #0
 8007378:	f000 f8ea 	bl	8007550 <_lseek_r>
 800737c:	89a3      	ldrh	r3, [r4, #12]
 800737e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007382:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007386:	81a3      	strh	r3, [r4, #12]
 8007388:	4632      	mov	r2, r6
 800738a:	463b      	mov	r3, r7
 800738c:	4628      	mov	r0, r5
 800738e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007392:	f000 b901 	b.w	8007598 <_write_r>

08007396 <__sseek>:
 8007396:	b510      	push	{r4, lr}
 8007398:	460c      	mov	r4, r1
 800739a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800739e:	f000 f8d7 	bl	8007550 <_lseek_r>
 80073a2:	1c43      	adds	r3, r0, #1
 80073a4:	89a3      	ldrh	r3, [r4, #12]
 80073a6:	bf15      	itete	ne
 80073a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80073aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80073ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80073b2:	81a3      	strheq	r3, [r4, #12]
 80073b4:	bf18      	it	ne
 80073b6:	81a3      	strhne	r3, [r4, #12]
 80073b8:	bd10      	pop	{r4, pc}

080073ba <__sclose>:
 80073ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073be:	f000 b8b7 	b.w	8007530 <_close_r>

080073c2 <__swbuf_r>:
 80073c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c4:	460e      	mov	r6, r1
 80073c6:	4614      	mov	r4, r2
 80073c8:	4605      	mov	r5, r0
 80073ca:	b118      	cbz	r0, 80073d4 <__swbuf_r+0x12>
 80073cc:	6a03      	ldr	r3, [r0, #32]
 80073ce:	b90b      	cbnz	r3, 80073d4 <__swbuf_r+0x12>
 80073d0:	f7ff ff00 	bl	80071d4 <__sinit>
 80073d4:	69a3      	ldr	r3, [r4, #24]
 80073d6:	60a3      	str	r3, [r4, #8]
 80073d8:	89a3      	ldrh	r3, [r4, #12]
 80073da:	071a      	lsls	r2, r3, #28
 80073dc:	d501      	bpl.n	80073e2 <__swbuf_r+0x20>
 80073de:	6923      	ldr	r3, [r4, #16]
 80073e0:	b943      	cbnz	r3, 80073f4 <__swbuf_r+0x32>
 80073e2:	4621      	mov	r1, r4
 80073e4:	4628      	mov	r0, r5
 80073e6:	f000 f82b 	bl	8007440 <__swsetup_r>
 80073ea:	b118      	cbz	r0, 80073f4 <__swbuf_r+0x32>
 80073ec:	f04f 37ff 	mov.w	r7, #4294967295
 80073f0:	4638      	mov	r0, r7
 80073f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073f4:	6823      	ldr	r3, [r4, #0]
 80073f6:	6922      	ldr	r2, [r4, #16]
 80073f8:	1a98      	subs	r0, r3, r2
 80073fa:	6963      	ldr	r3, [r4, #20]
 80073fc:	b2f6      	uxtb	r6, r6
 80073fe:	4283      	cmp	r3, r0
 8007400:	4637      	mov	r7, r6
 8007402:	dc05      	bgt.n	8007410 <__swbuf_r+0x4e>
 8007404:	4621      	mov	r1, r4
 8007406:	4628      	mov	r0, r5
 8007408:	f000 fd76 	bl	8007ef8 <_fflush_r>
 800740c:	2800      	cmp	r0, #0
 800740e:	d1ed      	bne.n	80073ec <__swbuf_r+0x2a>
 8007410:	68a3      	ldr	r3, [r4, #8]
 8007412:	3b01      	subs	r3, #1
 8007414:	60a3      	str	r3, [r4, #8]
 8007416:	6823      	ldr	r3, [r4, #0]
 8007418:	1c5a      	adds	r2, r3, #1
 800741a:	6022      	str	r2, [r4, #0]
 800741c:	701e      	strb	r6, [r3, #0]
 800741e:	6962      	ldr	r2, [r4, #20]
 8007420:	1c43      	adds	r3, r0, #1
 8007422:	429a      	cmp	r2, r3
 8007424:	d004      	beq.n	8007430 <__swbuf_r+0x6e>
 8007426:	89a3      	ldrh	r3, [r4, #12]
 8007428:	07db      	lsls	r3, r3, #31
 800742a:	d5e1      	bpl.n	80073f0 <__swbuf_r+0x2e>
 800742c:	2e0a      	cmp	r6, #10
 800742e:	d1df      	bne.n	80073f0 <__swbuf_r+0x2e>
 8007430:	4621      	mov	r1, r4
 8007432:	4628      	mov	r0, r5
 8007434:	f000 fd60 	bl	8007ef8 <_fflush_r>
 8007438:	2800      	cmp	r0, #0
 800743a:	d0d9      	beq.n	80073f0 <__swbuf_r+0x2e>
 800743c:	e7d6      	b.n	80073ec <__swbuf_r+0x2a>
	...

08007440 <__swsetup_r>:
 8007440:	b538      	push	{r3, r4, r5, lr}
 8007442:	4b29      	ldr	r3, [pc, #164]	@ (80074e8 <__swsetup_r+0xa8>)
 8007444:	4605      	mov	r5, r0
 8007446:	6818      	ldr	r0, [r3, #0]
 8007448:	460c      	mov	r4, r1
 800744a:	b118      	cbz	r0, 8007454 <__swsetup_r+0x14>
 800744c:	6a03      	ldr	r3, [r0, #32]
 800744e:	b90b      	cbnz	r3, 8007454 <__swsetup_r+0x14>
 8007450:	f7ff fec0 	bl	80071d4 <__sinit>
 8007454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007458:	0719      	lsls	r1, r3, #28
 800745a:	d422      	bmi.n	80074a2 <__swsetup_r+0x62>
 800745c:	06da      	lsls	r2, r3, #27
 800745e:	d407      	bmi.n	8007470 <__swsetup_r+0x30>
 8007460:	2209      	movs	r2, #9
 8007462:	602a      	str	r2, [r5, #0]
 8007464:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007468:	81a3      	strh	r3, [r4, #12]
 800746a:	f04f 30ff 	mov.w	r0, #4294967295
 800746e:	e033      	b.n	80074d8 <__swsetup_r+0x98>
 8007470:	0758      	lsls	r0, r3, #29
 8007472:	d512      	bpl.n	800749a <__swsetup_r+0x5a>
 8007474:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007476:	b141      	cbz	r1, 800748a <__swsetup_r+0x4a>
 8007478:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800747c:	4299      	cmp	r1, r3
 800747e:	d002      	beq.n	8007486 <__swsetup_r+0x46>
 8007480:	4628      	mov	r0, r5
 8007482:	f000 f8d7 	bl	8007634 <_free_r>
 8007486:	2300      	movs	r3, #0
 8007488:	6363      	str	r3, [r4, #52]	@ 0x34
 800748a:	89a3      	ldrh	r3, [r4, #12]
 800748c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007490:	81a3      	strh	r3, [r4, #12]
 8007492:	2300      	movs	r3, #0
 8007494:	6063      	str	r3, [r4, #4]
 8007496:	6923      	ldr	r3, [r4, #16]
 8007498:	6023      	str	r3, [r4, #0]
 800749a:	89a3      	ldrh	r3, [r4, #12]
 800749c:	f043 0308 	orr.w	r3, r3, #8
 80074a0:	81a3      	strh	r3, [r4, #12]
 80074a2:	6923      	ldr	r3, [r4, #16]
 80074a4:	b94b      	cbnz	r3, 80074ba <__swsetup_r+0x7a>
 80074a6:	89a3      	ldrh	r3, [r4, #12]
 80074a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80074ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074b0:	d003      	beq.n	80074ba <__swsetup_r+0x7a>
 80074b2:	4621      	mov	r1, r4
 80074b4:	4628      	mov	r0, r5
 80074b6:	f000 fd6d 	bl	8007f94 <__smakebuf_r>
 80074ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074be:	f013 0201 	ands.w	r2, r3, #1
 80074c2:	d00a      	beq.n	80074da <__swsetup_r+0x9a>
 80074c4:	2200      	movs	r2, #0
 80074c6:	60a2      	str	r2, [r4, #8]
 80074c8:	6962      	ldr	r2, [r4, #20]
 80074ca:	4252      	negs	r2, r2
 80074cc:	61a2      	str	r2, [r4, #24]
 80074ce:	6922      	ldr	r2, [r4, #16]
 80074d0:	b942      	cbnz	r2, 80074e4 <__swsetup_r+0xa4>
 80074d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80074d6:	d1c5      	bne.n	8007464 <__swsetup_r+0x24>
 80074d8:	bd38      	pop	{r3, r4, r5, pc}
 80074da:	0799      	lsls	r1, r3, #30
 80074dc:	bf58      	it	pl
 80074de:	6962      	ldrpl	r2, [r4, #20]
 80074e0:	60a2      	str	r2, [r4, #8]
 80074e2:	e7f4      	b.n	80074ce <__swsetup_r+0x8e>
 80074e4:	2000      	movs	r0, #0
 80074e6:	e7f7      	b.n	80074d8 <__swsetup_r+0x98>
 80074e8:	2000002c 	.word	0x2000002c

080074ec <memmove>:
 80074ec:	4288      	cmp	r0, r1
 80074ee:	b510      	push	{r4, lr}
 80074f0:	eb01 0402 	add.w	r4, r1, r2
 80074f4:	d902      	bls.n	80074fc <memmove+0x10>
 80074f6:	4284      	cmp	r4, r0
 80074f8:	4623      	mov	r3, r4
 80074fa:	d807      	bhi.n	800750c <memmove+0x20>
 80074fc:	1e43      	subs	r3, r0, #1
 80074fe:	42a1      	cmp	r1, r4
 8007500:	d008      	beq.n	8007514 <memmove+0x28>
 8007502:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007506:	f803 2f01 	strb.w	r2, [r3, #1]!
 800750a:	e7f8      	b.n	80074fe <memmove+0x12>
 800750c:	4402      	add	r2, r0
 800750e:	4601      	mov	r1, r0
 8007510:	428a      	cmp	r2, r1
 8007512:	d100      	bne.n	8007516 <memmove+0x2a>
 8007514:	bd10      	pop	{r4, pc}
 8007516:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800751a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800751e:	e7f7      	b.n	8007510 <memmove+0x24>

08007520 <memset>:
 8007520:	4402      	add	r2, r0
 8007522:	4603      	mov	r3, r0
 8007524:	4293      	cmp	r3, r2
 8007526:	d100      	bne.n	800752a <memset+0xa>
 8007528:	4770      	bx	lr
 800752a:	f803 1b01 	strb.w	r1, [r3], #1
 800752e:	e7f9      	b.n	8007524 <memset+0x4>

08007530 <_close_r>:
 8007530:	b538      	push	{r3, r4, r5, lr}
 8007532:	4d06      	ldr	r5, [pc, #24]	@ (800754c <_close_r+0x1c>)
 8007534:	2300      	movs	r3, #0
 8007536:	4604      	mov	r4, r0
 8007538:	4608      	mov	r0, r1
 800753a:	602b      	str	r3, [r5, #0]
 800753c:	f7fa f916 	bl	800176c <_close>
 8007540:	1c43      	adds	r3, r0, #1
 8007542:	d102      	bne.n	800754a <_close_r+0x1a>
 8007544:	682b      	ldr	r3, [r5, #0]
 8007546:	b103      	cbz	r3, 800754a <_close_r+0x1a>
 8007548:	6023      	str	r3, [r4, #0]
 800754a:	bd38      	pop	{r3, r4, r5, pc}
 800754c:	200007d8 	.word	0x200007d8

08007550 <_lseek_r>:
 8007550:	b538      	push	{r3, r4, r5, lr}
 8007552:	4d07      	ldr	r5, [pc, #28]	@ (8007570 <_lseek_r+0x20>)
 8007554:	4604      	mov	r4, r0
 8007556:	4608      	mov	r0, r1
 8007558:	4611      	mov	r1, r2
 800755a:	2200      	movs	r2, #0
 800755c:	602a      	str	r2, [r5, #0]
 800755e:	461a      	mov	r2, r3
 8007560:	f7fa f92b 	bl	80017ba <_lseek>
 8007564:	1c43      	adds	r3, r0, #1
 8007566:	d102      	bne.n	800756e <_lseek_r+0x1e>
 8007568:	682b      	ldr	r3, [r5, #0]
 800756a:	b103      	cbz	r3, 800756e <_lseek_r+0x1e>
 800756c:	6023      	str	r3, [r4, #0]
 800756e:	bd38      	pop	{r3, r4, r5, pc}
 8007570:	200007d8 	.word	0x200007d8

08007574 <_read_r>:
 8007574:	b538      	push	{r3, r4, r5, lr}
 8007576:	4d07      	ldr	r5, [pc, #28]	@ (8007594 <_read_r+0x20>)
 8007578:	4604      	mov	r4, r0
 800757a:	4608      	mov	r0, r1
 800757c:	4611      	mov	r1, r2
 800757e:	2200      	movs	r2, #0
 8007580:	602a      	str	r2, [r5, #0]
 8007582:	461a      	mov	r2, r3
 8007584:	f7fa f8d5 	bl	8001732 <_read>
 8007588:	1c43      	adds	r3, r0, #1
 800758a:	d102      	bne.n	8007592 <_read_r+0x1e>
 800758c:	682b      	ldr	r3, [r5, #0]
 800758e:	b103      	cbz	r3, 8007592 <_read_r+0x1e>
 8007590:	6023      	str	r3, [r4, #0]
 8007592:	bd38      	pop	{r3, r4, r5, pc}
 8007594:	200007d8 	.word	0x200007d8

08007598 <_write_r>:
 8007598:	b538      	push	{r3, r4, r5, lr}
 800759a:	4d07      	ldr	r5, [pc, #28]	@ (80075b8 <_write_r+0x20>)
 800759c:	4604      	mov	r4, r0
 800759e:	4608      	mov	r0, r1
 80075a0:	4611      	mov	r1, r2
 80075a2:	2200      	movs	r2, #0
 80075a4:	602a      	str	r2, [r5, #0]
 80075a6:	461a      	mov	r2, r3
 80075a8:	f7f9 f8de 	bl	8000768 <_write>
 80075ac:	1c43      	adds	r3, r0, #1
 80075ae:	d102      	bne.n	80075b6 <_write_r+0x1e>
 80075b0:	682b      	ldr	r3, [r5, #0]
 80075b2:	b103      	cbz	r3, 80075b6 <_write_r+0x1e>
 80075b4:	6023      	str	r3, [r4, #0]
 80075b6:	bd38      	pop	{r3, r4, r5, pc}
 80075b8:	200007d8 	.word	0x200007d8

080075bc <__errno>:
 80075bc:	4b01      	ldr	r3, [pc, #4]	@ (80075c4 <__errno+0x8>)
 80075be:	6818      	ldr	r0, [r3, #0]
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	2000002c 	.word	0x2000002c

080075c8 <__libc_init_array>:
 80075c8:	b570      	push	{r4, r5, r6, lr}
 80075ca:	4d0d      	ldr	r5, [pc, #52]	@ (8007600 <__libc_init_array+0x38>)
 80075cc:	4c0d      	ldr	r4, [pc, #52]	@ (8007604 <__libc_init_array+0x3c>)
 80075ce:	1b64      	subs	r4, r4, r5
 80075d0:	10a4      	asrs	r4, r4, #2
 80075d2:	2600      	movs	r6, #0
 80075d4:	42a6      	cmp	r6, r4
 80075d6:	d109      	bne.n	80075ec <__libc_init_array+0x24>
 80075d8:	4d0b      	ldr	r5, [pc, #44]	@ (8007608 <__libc_init_array+0x40>)
 80075da:	4c0c      	ldr	r4, [pc, #48]	@ (800760c <__libc_init_array+0x44>)
 80075dc:	f000 fd7e 	bl	80080dc <_init>
 80075e0:	1b64      	subs	r4, r4, r5
 80075e2:	10a4      	asrs	r4, r4, #2
 80075e4:	2600      	movs	r6, #0
 80075e6:	42a6      	cmp	r6, r4
 80075e8:	d105      	bne.n	80075f6 <__libc_init_array+0x2e>
 80075ea:	bd70      	pop	{r4, r5, r6, pc}
 80075ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80075f0:	4798      	blx	r3
 80075f2:	3601      	adds	r6, #1
 80075f4:	e7ee      	b.n	80075d4 <__libc_init_array+0xc>
 80075f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80075fa:	4798      	blx	r3
 80075fc:	3601      	adds	r6, #1
 80075fe:	e7f2      	b.n	80075e6 <__libc_init_array+0x1e>
 8007600:	080096e8 	.word	0x080096e8
 8007604:	080096e8 	.word	0x080096e8
 8007608:	080096e8 	.word	0x080096e8
 800760c:	080096ec 	.word	0x080096ec

08007610 <__retarget_lock_init_recursive>:
 8007610:	4770      	bx	lr

08007612 <__retarget_lock_acquire_recursive>:
 8007612:	4770      	bx	lr

08007614 <__retarget_lock_release_recursive>:
 8007614:	4770      	bx	lr

08007616 <memcpy>:
 8007616:	440a      	add	r2, r1
 8007618:	4291      	cmp	r1, r2
 800761a:	f100 33ff 	add.w	r3, r0, #4294967295
 800761e:	d100      	bne.n	8007622 <memcpy+0xc>
 8007620:	4770      	bx	lr
 8007622:	b510      	push	{r4, lr}
 8007624:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007628:	f803 4f01 	strb.w	r4, [r3, #1]!
 800762c:	4291      	cmp	r1, r2
 800762e:	d1f9      	bne.n	8007624 <memcpy+0xe>
 8007630:	bd10      	pop	{r4, pc}
	...

08007634 <_free_r>:
 8007634:	b538      	push	{r3, r4, r5, lr}
 8007636:	4605      	mov	r5, r0
 8007638:	2900      	cmp	r1, #0
 800763a:	d041      	beq.n	80076c0 <_free_r+0x8c>
 800763c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007640:	1f0c      	subs	r4, r1, #4
 8007642:	2b00      	cmp	r3, #0
 8007644:	bfb8      	it	lt
 8007646:	18e4      	addlt	r4, r4, r3
 8007648:	f000 f8e0 	bl	800780c <__malloc_lock>
 800764c:	4a1d      	ldr	r2, [pc, #116]	@ (80076c4 <_free_r+0x90>)
 800764e:	6813      	ldr	r3, [r2, #0]
 8007650:	b933      	cbnz	r3, 8007660 <_free_r+0x2c>
 8007652:	6063      	str	r3, [r4, #4]
 8007654:	6014      	str	r4, [r2, #0]
 8007656:	4628      	mov	r0, r5
 8007658:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800765c:	f000 b8dc 	b.w	8007818 <__malloc_unlock>
 8007660:	42a3      	cmp	r3, r4
 8007662:	d908      	bls.n	8007676 <_free_r+0x42>
 8007664:	6820      	ldr	r0, [r4, #0]
 8007666:	1821      	adds	r1, r4, r0
 8007668:	428b      	cmp	r3, r1
 800766a:	bf01      	itttt	eq
 800766c:	6819      	ldreq	r1, [r3, #0]
 800766e:	685b      	ldreq	r3, [r3, #4]
 8007670:	1809      	addeq	r1, r1, r0
 8007672:	6021      	streq	r1, [r4, #0]
 8007674:	e7ed      	b.n	8007652 <_free_r+0x1e>
 8007676:	461a      	mov	r2, r3
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	b10b      	cbz	r3, 8007680 <_free_r+0x4c>
 800767c:	42a3      	cmp	r3, r4
 800767e:	d9fa      	bls.n	8007676 <_free_r+0x42>
 8007680:	6811      	ldr	r1, [r2, #0]
 8007682:	1850      	adds	r0, r2, r1
 8007684:	42a0      	cmp	r0, r4
 8007686:	d10b      	bne.n	80076a0 <_free_r+0x6c>
 8007688:	6820      	ldr	r0, [r4, #0]
 800768a:	4401      	add	r1, r0
 800768c:	1850      	adds	r0, r2, r1
 800768e:	4283      	cmp	r3, r0
 8007690:	6011      	str	r1, [r2, #0]
 8007692:	d1e0      	bne.n	8007656 <_free_r+0x22>
 8007694:	6818      	ldr	r0, [r3, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	6053      	str	r3, [r2, #4]
 800769a:	4408      	add	r0, r1
 800769c:	6010      	str	r0, [r2, #0]
 800769e:	e7da      	b.n	8007656 <_free_r+0x22>
 80076a0:	d902      	bls.n	80076a8 <_free_r+0x74>
 80076a2:	230c      	movs	r3, #12
 80076a4:	602b      	str	r3, [r5, #0]
 80076a6:	e7d6      	b.n	8007656 <_free_r+0x22>
 80076a8:	6820      	ldr	r0, [r4, #0]
 80076aa:	1821      	adds	r1, r4, r0
 80076ac:	428b      	cmp	r3, r1
 80076ae:	bf04      	itt	eq
 80076b0:	6819      	ldreq	r1, [r3, #0]
 80076b2:	685b      	ldreq	r3, [r3, #4]
 80076b4:	6063      	str	r3, [r4, #4]
 80076b6:	bf04      	itt	eq
 80076b8:	1809      	addeq	r1, r1, r0
 80076ba:	6021      	streq	r1, [r4, #0]
 80076bc:	6054      	str	r4, [r2, #4]
 80076be:	e7ca      	b.n	8007656 <_free_r+0x22>
 80076c0:	bd38      	pop	{r3, r4, r5, pc}
 80076c2:	bf00      	nop
 80076c4:	200007e4 	.word	0x200007e4

080076c8 <sbrk_aligned>:
 80076c8:	b570      	push	{r4, r5, r6, lr}
 80076ca:	4e0f      	ldr	r6, [pc, #60]	@ (8007708 <sbrk_aligned+0x40>)
 80076cc:	460c      	mov	r4, r1
 80076ce:	6831      	ldr	r1, [r6, #0]
 80076d0:	4605      	mov	r5, r0
 80076d2:	b911      	cbnz	r1, 80076da <sbrk_aligned+0x12>
 80076d4:	f000 fcbc 	bl	8008050 <_sbrk_r>
 80076d8:	6030      	str	r0, [r6, #0]
 80076da:	4621      	mov	r1, r4
 80076dc:	4628      	mov	r0, r5
 80076de:	f000 fcb7 	bl	8008050 <_sbrk_r>
 80076e2:	1c43      	adds	r3, r0, #1
 80076e4:	d103      	bne.n	80076ee <sbrk_aligned+0x26>
 80076e6:	f04f 34ff 	mov.w	r4, #4294967295
 80076ea:	4620      	mov	r0, r4
 80076ec:	bd70      	pop	{r4, r5, r6, pc}
 80076ee:	1cc4      	adds	r4, r0, #3
 80076f0:	f024 0403 	bic.w	r4, r4, #3
 80076f4:	42a0      	cmp	r0, r4
 80076f6:	d0f8      	beq.n	80076ea <sbrk_aligned+0x22>
 80076f8:	1a21      	subs	r1, r4, r0
 80076fa:	4628      	mov	r0, r5
 80076fc:	f000 fca8 	bl	8008050 <_sbrk_r>
 8007700:	3001      	adds	r0, #1
 8007702:	d1f2      	bne.n	80076ea <sbrk_aligned+0x22>
 8007704:	e7ef      	b.n	80076e6 <sbrk_aligned+0x1e>
 8007706:	bf00      	nop
 8007708:	200007e0 	.word	0x200007e0

0800770c <_malloc_r>:
 800770c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007710:	1ccd      	adds	r5, r1, #3
 8007712:	f025 0503 	bic.w	r5, r5, #3
 8007716:	3508      	adds	r5, #8
 8007718:	2d0c      	cmp	r5, #12
 800771a:	bf38      	it	cc
 800771c:	250c      	movcc	r5, #12
 800771e:	2d00      	cmp	r5, #0
 8007720:	4606      	mov	r6, r0
 8007722:	db01      	blt.n	8007728 <_malloc_r+0x1c>
 8007724:	42a9      	cmp	r1, r5
 8007726:	d904      	bls.n	8007732 <_malloc_r+0x26>
 8007728:	230c      	movs	r3, #12
 800772a:	6033      	str	r3, [r6, #0]
 800772c:	2000      	movs	r0, #0
 800772e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007732:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007808 <_malloc_r+0xfc>
 8007736:	f000 f869 	bl	800780c <__malloc_lock>
 800773a:	f8d8 3000 	ldr.w	r3, [r8]
 800773e:	461c      	mov	r4, r3
 8007740:	bb44      	cbnz	r4, 8007794 <_malloc_r+0x88>
 8007742:	4629      	mov	r1, r5
 8007744:	4630      	mov	r0, r6
 8007746:	f7ff ffbf 	bl	80076c8 <sbrk_aligned>
 800774a:	1c43      	adds	r3, r0, #1
 800774c:	4604      	mov	r4, r0
 800774e:	d158      	bne.n	8007802 <_malloc_r+0xf6>
 8007750:	f8d8 4000 	ldr.w	r4, [r8]
 8007754:	4627      	mov	r7, r4
 8007756:	2f00      	cmp	r7, #0
 8007758:	d143      	bne.n	80077e2 <_malloc_r+0xd6>
 800775a:	2c00      	cmp	r4, #0
 800775c:	d04b      	beq.n	80077f6 <_malloc_r+0xea>
 800775e:	6823      	ldr	r3, [r4, #0]
 8007760:	4639      	mov	r1, r7
 8007762:	4630      	mov	r0, r6
 8007764:	eb04 0903 	add.w	r9, r4, r3
 8007768:	f000 fc72 	bl	8008050 <_sbrk_r>
 800776c:	4581      	cmp	r9, r0
 800776e:	d142      	bne.n	80077f6 <_malloc_r+0xea>
 8007770:	6821      	ldr	r1, [r4, #0]
 8007772:	1a6d      	subs	r5, r5, r1
 8007774:	4629      	mov	r1, r5
 8007776:	4630      	mov	r0, r6
 8007778:	f7ff ffa6 	bl	80076c8 <sbrk_aligned>
 800777c:	3001      	adds	r0, #1
 800777e:	d03a      	beq.n	80077f6 <_malloc_r+0xea>
 8007780:	6823      	ldr	r3, [r4, #0]
 8007782:	442b      	add	r3, r5
 8007784:	6023      	str	r3, [r4, #0]
 8007786:	f8d8 3000 	ldr.w	r3, [r8]
 800778a:	685a      	ldr	r2, [r3, #4]
 800778c:	bb62      	cbnz	r2, 80077e8 <_malloc_r+0xdc>
 800778e:	f8c8 7000 	str.w	r7, [r8]
 8007792:	e00f      	b.n	80077b4 <_malloc_r+0xa8>
 8007794:	6822      	ldr	r2, [r4, #0]
 8007796:	1b52      	subs	r2, r2, r5
 8007798:	d420      	bmi.n	80077dc <_malloc_r+0xd0>
 800779a:	2a0b      	cmp	r2, #11
 800779c:	d917      	bls.n	80077ce <_malloc_r+0xc2>
 800779e:	1961      	adds	r1, r4, r5
 80077a0:	42a3      	cmp	r3, r4
 80077a2:	6025      	str	r5, [r4, #0]
 80077a4:	bf18      	it	ne
 80077a6:	6059      	strne	r1, [r3, #4]
 80077a8:	6863      	ldr	r3, [r4, #4]
 80077aa:	bf08      	it	eq
 80077ac:	f8c8 1000 	streq.w	r1, [r8]
 80077b0:	5162      	str	r2, [r4, r5]
 80077b2:	604b      	str	r3, [r1, #4]
 80077b4:	4630      	mov	r0, r6
 80077b6:	f000 f82f 	bl	8007818 <__malloc_unlock>
 80077ba:	f104 000b 	add.w	r0, r4, #11
 80077be:	1d23      	adds	r3, r4, #4
 80077c0:	f020 0007 	bic.w	r0, r0, #7
 80077c4:	1ac2      	subs	r2, r0, r3
 80077c6:	bf1c      	itt	ne
 80077c8:	1a1b      	subne	r3, r3, r0
 80077ca:	50a3      	strne	r3, [r4, r2]
 80077cc:	e7af      	b.n	800772e <_malloc_r+0x22>
 80077ce:	6862      	ldr	r2, [r4, #4]
 80077d0:	42a3      	cmp	r3, r4
 80077d2:	bf0c      	ite	eq
 80077d4:	f8c8 2000 	streq.w	r2, [r8]
 80077d8:	605a      	strne	r2, [r3, #4]
 80077da:	e7eb      	b.n	80077b4 <_malloc_r+0xa8>
 80077dc:	4623      	mov	r3, r4
 80077de:	6864      	ldr	r4, [r4, #4]
 80077e0:	e7ae      	b.n	8007740 <_malloc_r+0x34>
 80077e2:	463c      	mov	r4, r7
 80077e4:	687f      	ldr	r7, [r7, #4]
 80077e6:	e7b6      	b.n	8007756 <_malloc_r+0x4a>
 80077e8:	461a      	mov	r2, r3
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	42a3      	cmp	r3, r4
 80077ee:	d1fb      	bne.n	80077e8 <_malloc_r+0xdc>
 80077f0:	2300      	movs	r3, #0
 80077f2:	6053      	str	r3, [r2, #4]
 80077f4:	e7de      	b.n	80077b4 <_malloc_r+0xa8>
 80077f6:	230c      	movs	r3, #12
 80077f8:	6033      	str	r3, [r6, #0]
 80077fa:	4630      	mov	r0, r6
 80077fc:	f000 f80c 	bl	8007818 <__malloc_unlock>
 8007800:	e794      	b.n	800772c <_malloc_r+0x20>
 8007802:	6005      	str	r5, [r0, #0]
 8007804:	e7d6      	b.n	80077b4 <_malloc_r+0xa8>
 8007806:	bf00      	nop
 8007808:	200007e4 	.word	0x200007e4

0800780c <__malloc_lock>:
 800780c:	4801      	ldr	r0, [pc, #4]	@ (8007814 <__malloc_lock+0x8>)
 800780e:	f7ff bf00 	b.w	8007612 <__retarget_lock_acquire_recursive>
 8007812:	bf00      	nop
 8007814:	200007dc 	.word	0x200007dc

08007818 <__malloc_unlock>:
 8007818:	4801      	ldr	r0, [pc, #4]	@ (8007820 <__malloc_unlock+0x8>)
 800781a:	f7ff befb 	b.w	8007614 <__retarget_lock_release_recursive>
 800781e:	bf00      	nop
 8007820:	200007dc 	.word	0x200007dc

08007824 <__ssputs_r>:
 8007824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007828:	688e      	ldr	r6, [r1, #8]
 800782a:	461f      	mov	r7, r3
 800782c:	42be      	cmp	r6, r7
 800782e:	680b      	ldr	r3, [r1, #0]
 8007830:	4682      	mov	sl, r0
 8007832:	460c      	mov	r4, r1
 8007834:	4690      	mov	r8, r2
 8007836:	d82d      	bhi.n	8007894 <__ssputs_r+0x70>
 8007838:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800783c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007840:	d026      	beq.n	8007890 <__ssputs_r+0x6c>
 8007842:	6965      	ldr	r5, [r4, #20]
 8007844:	6909      	ldr	r1, [r1, #16]
 8007846:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800784a:	eba3 0901 	sub.w	r9, r3, r1
 800784e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007852:	1c7b      	adds	r3, r7, #1
 8007854:	444b      	add	r3, r9
 8007856:	106d      	asrs	r5, r5, #1
 8007858:	429d      	cmp	r5, r3
 800785a:	bf38      	it	cc
 800785c:	461d      	movcc	r5, r3
 800785e:	0553      	lsls	r3, r2, #21
 8007860:	d527      	bpl.n	80078b2 <__ssputs_r+0x8e>
 8007862:	4629      	mov	r1, r5
 8007864:	f7ff ff52 	bl	800770c <_malloc_r>
 8007868:	4606      	mov	r6, r0
 800786a:	b360      	cbz	r0, 80078c6 <__ssputs_r+0xa2>
 800786c:	6921      	ldr	r1, [r4, #16]
 800786e:	464a      	mov	r2, r9
 8007870:	f7ff fed1 	bl	8007616 <memcpy>
 8007874:	89a3      	ldrh	r3, [r4, #12]
 8007876:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800787a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800787e:	81a3      	strh	r3, [r4, #12]
 8007880:	6126      	str	r6, [r4, #16]
 8007882:	6165      	str	r5, [r4, #20]
 8007884:	444e      	add	r6, r9
 8007886:	eba5 0509 	sub.w	r5, r5, r9
 800788a:	6026      	str	r6, [r4, #0]
 800788c:	60a5      	str	r5, [r4, #8]
 800788e:	463e      	mov	r6, r7
 8007890:	42be      	cmp	r6, r7
 8007892:	d900      	bls.n	8007896 <__ssputs_r+0x72>
 8007894:	463e      	mov	r6, r7
 8007896:	6820      	ldr	r0, [r4, #0]
 8007898:	4632      	mov	r2, r6
 800789a:	4641      	mov	r1, r8
 800789c:	f7ff fe26 	bl	80074ec <memmove>
 80078a0:	68a3      	ldr	r3, [r4, #8]
 80078a2:	1b9b      	subs	r3, r3, r6
 80078a4:	60a3      	str	r3, [r4, #8]
 80078a6:	6823      	ldr	r3, [r4, #0]
 80078a8:	4433      	add	r3, r6
 80078aa:	6023      	str	r3, [r4, #0]
 80078ac:	2000      	movs	r0, #0
 80078ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078b2:	462a      	mov	r2, r5
 80078b4:	f000 fbdc 	bl	8008070 <_realloc_r>
 80078b8:	4606      	mov	r6, r0
 80078ba:	2800      	cmp	r0, #0
 80078bc:	d1e0      	bne.n	8007880 <__ssputs_r+0x5c>
 80078be:	6921      	ldr	r1, [r4, #16]
 80078c0:	4650      	mov	r0, sl
 80078c2:	f7ff feb7 	bl	8007634 <_free_r>
 80078c6:	230c      	movs	r3, #12
 80078c8:	f8ca 3000 	str.w	r3, [sl]
 80078cc:	89a3      	ldrh	r3, [r4, #12]
 80078ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078d2:	81a3      	strh	r3, [r4, #12]
 80078d4:	f04f 30ff 	mov.w	r0, #4294967295
 80078d8:	e7e9      	b.n	80078ae <__ssputs_r+0x8a>
	...

080078dc <_svfiprintf_r>:
 80078dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e0:	4698      	mov	r8, r3
 80078e2:	898b      	ldrh	r3, [r1, #12]
 80078e4:	061b      	lsls	r3, r3, #24
 80078e6:	b09d      	sub	sp, #116	@ 0x74
 80078e8:	4607      	mov	r7, r0
 80078ea:	460d      	mov	r5, r1
 80078ec:	4614      	mov	r4, r2
 80078ee:	d510      	bpl.n	8007912 <_svfiprintf_r+0x36>
 80078f0:	690b      	ldr	r3, [r1, #16]
 80078f2:	b973      	cbnz	r3, 8007912 <_svfiprintf_r+0x36>
 80078f4:	2140      	movs	r1, #64	@ 0x40
 80078f6:	f7ff ff09 	bl	800770c <_malloc_r>
 80078fa:	6028      	str	r0, [r5, #0]
 80078fc:	6128      	str	r0, [r5, #16]
 80078fe:	b930      	cbnz	r0, 800790e <_svfiprintf_r+0x32>
 8007900:	230c      	movs	r3, #12
 8007902:	603b      	str	r3, [r7, #0]
 8007904:	f04f 30ff 	mov.w	r0, #4294967295
 8007908:	b01d      	add	sp, #116	@ 0x74
 800790a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800790e:	2340      	movs	r3, #64	@ 0x40
 8007910:	616b      	str	r3, [r5, #20]
 8007912:	2300      	movs	r3, #0
 8007914:	9309      	str	r3, [sp, #36]	@ 0x24
 8007916:	2320      	movs	r3, #32
 8007918:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800791c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007920:	2330      	movs	r3, #48	@ 0x30
 8007922:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007ac0 <_svfiprintf_r+0x1e4>
 8007926:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800792a:	f04f 0901 	mov.w	r9, #1
 800792e:	4623      	mov	r3, r4
 8007930:	469a      	mov	sl, r3
 8007932:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007936:	b10a      	cbz	r2, 800793c <_svfiprintf_r+0x60>
 8007938:	2a25      	cmp	r2, #37	@ 0x25
 800793a:	d1f9      	bne.n	8007930 <_svfiprintf_r+0x54>
 800793c:	ebba 0b04 	subs.w	fp, sl, r4
 8007940:	d00b      	beq.n	800795a <_svfiprintf_r+0x7e>
 8007942:	465b      	mov	r3, fp
 8007944:	4622      	mov	r2, r4
 8007946:	4629      	mov	r1, r5
 8007948:	4638      	mov	r0, r7
 800794a:	f7ff ff6b 	bl	8007824 <__ssputs_r>
 800794e:	3001      	adds	r0, #1
 8007950:	f000 80a7 	beq.w	8007aa2 <_svfiprintf_r+0x1c6>
 8007954:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007956:	445a      	add	r2, fp
 8007958:	9209      	str	r2, [sp, #36]	@ 0x24
 800795a:	f89a 3000 	ldrb.w	r3, [sl]
 800795e:	2b00      	cmp	r3, #0
 8007960:	f000 809f 	beq.w	8007aa2 <_svfiprintf_r+0x1c6>
 8007964:	2300      	movs	r3, #0
 8007966:	f04f 32ff 	mov.w	r2, #4294967295
 800796a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800796e:	f10a 0a01 	add.w	sl, sl, #1
 8007972:	9304      	str	r3, [sp, #16]
 8007974:	9307      	str	r3, [sp, #28]
 8007976:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800797a:	931a      	str	r3, [sp, #104]	@ 0x68
 800797c:	4654      	mov	r4, sl
 800797e:	2205      	movs	r2, #5
 8007980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007984:	484e      	ldr	r0, [pc, #312]	@ (8007ac0 <_svfiprintf_r+0x1e4>)
 8007986:	f7f8 fc2b 	bl	80001e0 <memchr>
 800798a:	9a04      	ldr	r2, [sp, #16]
 800798c:	b9d8      	cbnz	r0, 80079c6 <_svfiprintf_r+0xea>
 800798e:	06d0      	lsls	r0, r2, #27
 8007990:	bf44      	itt	mi
 8007992:	2320      	movmi	r3, #32
 8007994:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007998:	0711      	lsls	r1, r2, #28
 800799a:	bf44      	itt	mi
 800799c:	232b      	movmi	r3, #43	@ 0x2b
 800799e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80079a2:	f89a 3000 	ldrb.w	r3, [sl]
 80079a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80079a8:	d015      	beq.n	80079d6 <_svfiprintf_r+0xfa>
 80079aa:	9a07      	ldr	r2, [sp, #28]
 80079ac:	4654      	mov	r4, sl
 80079ae:	2000      	movs	r0, #0
 80079b0:	f04f 0c0a 	mov.w	ip, #10
 80079b4:	4621      	mov	r1, r4
 80079b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079ba:	3b30      	subs	r3, #48	@ 0x30
 80079bc:	2b09      	cmp	r3, #9
 80079be:	d94b      	bls.n	8007a58 <_svfiprintf_r+0x17c>
 80079c0:	b1b0      	cbz	r0, 80079f0 <_svfiprintf_r+0x114>
 80079c2:	9207      	str	r2, [sp, #28]
 80079c4:	e014      	b.n	80079f0 <_svfiprintf_r+0x114>
 80079c6:	eba0 0308 	sub.w	r3, r0, r8
 80079ca:	fa09 f303 	lsl.w	r3, r9, r3
 80079ce:	4313      	orrs	r3, r2
 80079d0:	9304      	str	r3, [sp, #16]
 80079d2:	46a2      	mov	sl, r4
 80079d4:	e7d2      	b.n	800797c <_svfiprintf_r+0xa0>
 80079d6:	9b03      	ldr	r3, [sp, #12]
 80079d8:	1d19      	adds	r1, r3, #4
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	9103      	str	r1, [sp, #12]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	bfbb      	ittet	lt
 80079e2:	425b      	neglt	r3, r3
 80079e4:	f042 0202 	orrlt.w	r2, r2, #2
 80079e8:	9307      	strge	r3, [sp, #28]
 80079ea:	9307      	strlt	r3, [sp, #28]
 80079ec:	bfb8      	it	lt
 80079ee:	9204      	strlt	r2, [sp, #16]
 80079f0:	7823      	ldrb	r3, [r4, #0]
 80079f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80079f4:	d10a      	bne.n	8007a0c <_svfiprintf_r+0x130>
 80079f6:	7863      	ldrb	r3, [r4, #1]
 80079f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80079fa:	d132      	bne.n	8007a62 <_svfiprintf_r+0x186>
 80079fc:	9b03      	ldr	r3, [sp, #12]
 80079fe:	1d1a      	adds	r2, r3, #4
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	9203      	str	r2, [sp, #12]
 8007a04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a08:	3402      	adds	r4, #2
 8007a0a:	9305      	str	r3, [sp, #20]
 8007a0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007ad0 <_svfiprintf_r+0x1f4>
 8007a10:	7821      	ldrb	r1, [r4, #0]
 8007a12:	2203      	movs	r2, #3
 8007a14:	4650      	mov	r0, sl
 8007a16:	f7f8 fbe3 	bl	80001e0 <memchr>
 8007a1a:	b138      	cbz	r0, 8007a2c <_svfiprintf_r+0x150>
 8007a1c:	9b04      	ldr	r3, [sp, #16]
 8007a1e:	eba0 000a 	sub.w	r0, r0, sl
 8007a22:	2240      	movs	r2, #64	@ 0x40
 8007a24:	4082      	lsls	r2, r0
 8007a26:	4313      	orrs	r3, r2
 8007a28:	3401      	adds	r4, #1
 8007a2a:	9304      	str	r3, [sp, #16]
 8007a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a30:	4824      	ldr	r0, [pc, #144]	@ (8007ac4 <_svfiprintf_r+0x1e8>)
 8007a32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a36:	2206      	movs	r2, #6
 8007a38:	f7f8 fbd2 	bl	80001e0 <memchr>
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	d036      	beq.n	8007aae <_svfiprintf_r+0x1d2>
 8007a40:	4b21      	ldr	r3, [pc, #132]	@ (8007ac8 <_svfiprintf_r+0x1ec>)
 8007a42:	bb1b      	cbnz	r3, 8007a8c <_svfiprintf_r+0x1b0>
 8007a44:	9b03      	ldr	r3, [sp, #12]
 8007a46:	3307      	adds	r3, #7
 8007a48:	f023 0307 	bic.w	r3, r3, #7
 8007a4c:	3308      	adds	r3, #8
 8007a4e:	9303      	str	r3, [sp, #12]
 8007a50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a52:	4433      	add	r3, r6
 8007a54:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a56:	e76a      	b.n	800792e <_svfiprintf_r+0x52>
 8007a58:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a5c:	460c      	mov	r4, r1
 8007a5e:	2001      	movs	r0, #1
 8007a60:	e7a8      	b.n	80079b4 <_svfiprintf_r+0xd8>
 8007a62:	2300      	movs	r3, #0
 8007a64:	3401      	adds	r4, #1
 8007a66:	9305      	str	r3, [sp, #20]
 8007a68:	4619      	mov	r1, r3
 8007a6a:	f04f 0c0a 	mov.w	ip, #10
 8007a6e:	4620      	mov	r0, r4
 8007a70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a74:	3a30      	subs	r2, #48	@ 0x30
 8007a76:	2a09      	cmp	r2, #9
 8007a78:	d903      	bls.n	8007a82 <_svfiprintf_r+0x1a6>
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d0c6      	beq.n	8007a0c <_svfiprintf_r+0x130>
 8007a7e:	9105      	str	r1, [sp, #20]
 8007a80:	e7c4      	b.n	8007a0c <_svfiprintf_r+0x130>
 8007a82:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a86:	4604      	mov	r4, r0
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e7f0      	b.n	8007a6e <_svfiprintf_r+0x192>
 8007a8c:	ab03      	add	r3, sp, #12
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	462a      	mov	r2, r5
 8007a92:	4b0e      	ldr	r3, [pc, #56]	@ (8007acc <_svfiprintf_r+0x1f0>)
 8007a94:	a904      	add	r1, sp, #16
 8007a96:	4638      	mov	r0, r7
 8007a98:	f3af 8000 	nop.w
 8007a9c:	1c42      	adds	r2, r0, #1
 8007a9e:	4606      	mov	r6, r0
 8007aa0:	d1d6      	bne.n	8007a50 <_svfiprintf_r+0x174>
 8007aa2:	89ab      	ldrh	r3, [r5, #12]
 8007aa4:	065b      	lsls	r3, r3, #25
 8007aa6:	f53f af2d 	bmi.w	8007904 <_svfiprintf_r+0x28>
 8007aaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007aac:	e72c      	b.n	8007908 <_svfiprintf_r+0x2c>
 8007aae:	ab03      	add	r3, sp, #12
 8007ab0:	9300      	str	r3, [sp, #0]
 8007ab2:	462a      	mov	r2, r5
 8007ab4:	4b05      	ldr	r3, [pc, #20]	@ (8007acc <_svfiprintf_r+0x1f0>)
 8007ab6:	a904      	add	r1, sp, #16
 8007ab8:	4638      	mov	r0, r7
 8007aba:	f000 f879 	bl	8007bb0 <_printf_i>
 8007abe:	e7ed      	b.n	8007a9c <_svfiprintf_r+0x1c0>
 8007ac0:	080096ac 	.word	0x080096ac
 8007ac4:	080096b6 	.word	0x080096b6
 8007ac8:	00000000 	.word	0x00000000
 8007acc:	08007825 	.word	0x08007825
 8007ad0:	080096b2 	.word	0x080096b2

08007ad4 <_printf_common>:
 8007ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ad8:	4616      	mov	r6, r2
 8007ada:	4698      	mov	r8, r3
 8007adc:	688a      	ldr	r2, [r1, #8]
 8007ade:	690b      	ldr	r3, [r1, #16]
 8007ae0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	bfb8      	it	lt
 8007ae8:	4613      	movlt	r3, r2
 8007aea:	6033      	str	r3, [r6, #0]
 8007aec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007af0:	4607      	mov	r7, r0
 8007af2:	460c      	mov	r4, r1
 8007af4:	b10a      	cbz	r2, 8007afa <_printf_common+0x26>
 8007af6:	3301      	adds	r3, #1
 8007af8:	6033      	str	r3, [r6, #0]
 8007afa:	6823      	ldr	r3, [r4, #0]
 8007afc:	0699      	lsls	r1, r3, #26
 8007afe:	bf42      	ittt	mi
 8007b00:	6833      	ldrmi	r3, [r6, #0]
 8007b02:	3302      	addmi	r3, #2
 8007b04:	6033      	strmi	r3, [r6, #0]
 8007b06:	6825      	ldr	r5, [r4, #0]
 8007b08:	f015 0506 	ands.w	r5, r5, #6
 8007b0c:	d106      	bne.n	8007b1c <_printf_common+0x48>
 8007b0e:	f104 0a19 	add.w	sl, r4, #25
 8007b12:	68e3      	ldr	r3, [r4, #12]
 8007b14:	6832      	ldr	r2, [r6, #0]
 8007b16:	1a9b      	subs	r3, r3, r2
 8007b18:	42ab      	cmp	r3, r5
 8007b1a:	dc26      	bgt.n	8007b6a <_printf_common+0x96>
 8007b1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007b20:	6822      	ldr	r2, [r4, #0]
 8007b22:	3b00      	subs	r3, #0
 8007b24:	bf18      	it	ne
 8007b26:	2301      	movne	r3, #1
 8007b28:	0692      	lsls	r2, r2, #26
 8007b2a:	d42b      	bmi.n	8007b84 <_printf_common+0xb0>
 8007b2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007b30:	4641      	mov	r1, r8
 8007b32:	4638      	mov	r0, r7
 8007b34:	47c8      	blx	r9
 8007b36:	3001      	adds	r0, #1
 8007b38:	d01e      	beq.n	8007b78 <_printf_common+0xa4>
 8007b3a:	6823      	ldr	r3, [r4, #0]
 8007b3c:	6922      	ldr	r2, [r4, #16]
 8007b3e:	f003 0306 	and.w	r3, r3, #6
 8007b42:	2b04      	cmp	r3, #4
 8007b44:	bf02      	ittt	eq
 8007b46:	68e5      	ldreq	r5, [r4, #12]
 8007b48:	6833      	ldreq	r3, [r6, #0]
 8007b4a:	1aed      	subeq	r5, r5, r3
 8007b4c:	68a3      	ldr	r3, [r4, #8]
 8007b4e:	bf0c      	ite	eq
 8007b50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b54:	2500      	movne	r5, #0
 8007b56:	4293      	cmp	r3, r2
 8007b58:	bfc4      	itt	gt
 8007b5a:	1a9b      	subgt	r3, r3, r2
 8007b5c:	18ed      	addgt	r5, r5, r3
 8007b5e:	2600      	movs	r6, #0
 8007b60:	341a      	adds	r4, #26
 8007b62:	42b5      	cmp	r5, r6
 8007b64:	d11a      	bne.n	8007b9c <_printf_common+0xc8>
 8007b66:	2000      	movs	r0, #0
 8007b68:	e008      	b.n	8007b7c <_printf_common+0xa8>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	4652      	mov	r2, sl
 8007b6e:	4641      	mov	r1, r8
 8007b70:	4638      	mov	r0, r7
 8007b72:	47c8      	blx	r9
 8007b74:	3001      	adds	r0, #1
 8007b76:	d103      	bne.n	8007b80 <_printf_common+0xac>
 8007b78:	f04f 30ff 	mov.w	r0, #4294967295
 8007b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b80:	3501      	adds	r5, #1
 8007b82:	e7c6      	b.n	8007b12 <_printf_common+0x3e>
 8007b84:	18e1      	adds	r1, r4, r3
 8007b86:	1c5a      	adds	r2, r3, #1
 8007b88:	2030      	movs	r0, #48	@ 0x30
 8007b8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b8e:	4422      	add	r2, r4
 8007b90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b98:	3302      	adds	r3, #2
 8007b9a:	e7c7      	b.n	8007b2c <_printf_common+0x58>
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	4622      	mov	r2, r4
 8007ba0:	4641      	mov	r1, r8
 8007ba2:	4638      	mov	r0, r7
 8007ba4:	47c8      	blx	r9
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	d0e6      	beq.n	8007b78 <_printf_common+0xa4>
 8007baa:	3601      	adds	r6, #1
 8007bac:	e7d9      	b.n	8007b62 <_printf_common+0x8e>
	...

08007bb0 <_printf_i>:
 8007bb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb4:	7e0f      	ldrb	r7, [r1, #24]
 8007bb6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007bb8:	2f78      	cmp	r7, #120	@ 0x78
 8007bba:	4691      	mov	r9, r2
 8007bbc:	4680      	mov	r8, r0
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	469a      	mov	sl, r3
 8007bc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007bc6:	d807      	bhi.n	8007bd8 <_printf_i+0x28>
 8007bc8:	2f62      	cmp	r7, #98	@ 0x62
 8007bca:	d80a      	bhi.n	8007be2 <_printf_i+0x32>
 8007bcc:	2f00      	cmp	r7, #0
 8007bce:	f000 80d2 	beq.w	8007d76 <_printf_i+0x1c6>
 8007bd2:	2f58      	cmp	r7, #88	@ 0x58
 8007bd4:	f000 80b9 	beq.w	8007d4a <_printf_i+0x19a>
 8007bd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007bdc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007be0:	e03a      	b.n	8007c58 <_printf_i+0xa8>
 8007be2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007be6:	2b15      	cmp	r3, #21
 8007be8:	d8f6      	bhi.n	8007bd8 <_printf_i+0x28>
 8007bea:	a101      	add	r1, pc, #4	@ (adr r1, 8007bf0 <_printf_i+0x40>)
 8007bec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bf0:	08007c49 	.word	0x08007c49
 8007bf4:	08007c5d 	.word	0x08007c5d
 8007bf8:	08007bd9 	.word	0x08007bd9
 8007bfc:	08007bd9 	.word	0x08007bd9
 8007c00:	08007bd9 	.word	0x08007bd9
 8007c04:	08007bd9 	.word	0x08007bd9
 8007c08:	08007c5d 	.word	0x08007c5d
 8007c0c:	08007bd9 	.word	0x08007bd9
 8007c10:	08007bd9 	.word	0x08007bd9
 8007c14:	08007bd9 	.word	0x08007bd9
 8007c18:	08007bd9 	.word	0x08007bd9
 8007c1c:	08007d5d 	.word	0x08007d5d
 8007c20:	08007c87 	.word	0x08007c87
 8007c24:	08007d17 	.word	0x08007d17
 8007c28:	08007bd9 	.word	0x08007bd9
 8007c2c:	08007bd9 	.word	0x08007bd9
 8007c30:	08007d7f 	.word	0x08007d7f
 8007c34:	08007bd9 	.word	0x08007bd9
 8007c38:	08007c87 	.word	0x08007c87
 8007c3c:	08007bd9 	.word	0x08007bd9
 8007c40:	08007bd9 	.word	0x08007bd9
 8007c44:	08007d1f 	.word	0x08007d1f
 8007c48:	6833      	ldr	r3, [r6, #0]
 8007c4a:	1d1a      	adds	r2, r3, #4
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6032      	str	r2, [r6, #0]
 8007c50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e09d      	b.n	8007d98 <_printf_i+0x1e8>
 8007c5c:	6833      	ldr	r3, [r6, #0]
 8007c5e:	6820      	ldr	r0, [r4, #0]
 8007c60:	1d19      	adds	r1, r3, #4
 8007c62:	6031      	str	r1, [r6, #0]
 8007c64:	0606      	lsls	r6, r0, #24
 8007c66:	d501      	bpl.n	8007c6c <_printf_i+0xbc>
 8007c68:	681d      	ldr	r5, [r3, #0]
 8007c6a:	e003      	b.n	8007c74 <_printf_i+0xc4>
 8007c6c:	0645      	lsls	r5, r0, #25
 8007c6e:	d5fb      	bpl.n	8007c68 <_printf_i+0xb8>
 8007c70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007c74:	2d00      	cmp	r5, #0
 8007c76:	da03      	bge.n	8007c80 <_printf_i+0xd0>
 8007c78:	232d      	movs	r3, #45	@ 0x2d
 8007c7a:	426d      	negs	r5, r5
 8007c7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c80:	4859      	ldr	r0, [pc, #356]	@ (8007de8 <_printf_i+0x238>)
 8007c82:	230a      	movs	r3, #10
 8007c84:	e011      	b.n	8007caa <_printf_i+0xfa>
 8007c86:	6821      	ldr	r1, [r4, #0]
 8007c88:	6833      	ldr	r3, [r6, #0]
 8007c8a:	0608      	lsls	r0, r1, #24
 8007c8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c90:	d402      	bmi.n	8007c98 <_printf_i+0xe8>
 8007c92:	0649      	lsls	r1, r1, #25
 8007c94:	bf48      	it	mi
 8007c96:	b2ad      	uxthmi	r5, r5
 8007c98:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c9a:	4853      	ldr	r0, [pc, #332]	@ (8007de8 <_printf_i+0x238>)
 8007c9c:	6033      	str	r3, [r6, #0]
 8007c9e:	bf14      	ite	ne
 8007ca0:	230a      	movne	r3, #10
 8007ca2:	2308      	moveq	r3, #8
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007caa:	6866      	ldr	r6, [r4, #4]
 8007cac:	60a6      	str	r6, [r4, #8]
 8007cae:	2e00      	cmp	r6, #0
 8007cb0:	bfa2      	ittt	ge
 8007cb2:	6821      	ldrge	r1, [r4, #0]
 8007cb4:	f021 0104 	bicge.w	r1, r1, #4
 8007cb8:	6021      	strge	r1, [r4, #0]
 8007cba:	b90d      	cbnz	r5, 8007cc0 <_printf_i+0x110>
 8007cbc:	2e00      	cmp	r6, #0
 8007cbe:	d04b      	beq.n	8007d58 <_printf_i+0x1a8>
 8007cc0:	4616      	mov	r6, r2
 8007cc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8007cc6:	fb03 5711 	mls	r7, r3, r1, r5
 8007cca:	5dc7      	ldrb	r7, [r0, r7]
 8007ccc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007cd0:	462f      	mov	r7, r5
 8007cd2:	42bb      	cmp	r3, r7
 8007cd4:	460d      	mov	r5, r1
 8007cd6:	d9f4      	bls.n	8007cc2 <_printf_i+0x112>
 8007cd8:	2b08      	cmp	r3, #8
 8007cda:	d10b      	bne.n	8007cf4 <_printf_i+0x144>
 8007cdc:	6823      	ldr	r3, [r4, #0]
 8007cde:	07df      	lsls	r7, r3, #31
 8007ce0:	d508      	bpl.n	8007cf4 <_printf_i+0x144>
 8007ce2:	6923      	ldr	r3, [r4, #16]
 8007ce4:	6861      	ldr	r1, [r4, #4]
 8007ce6:	4299      	cmp	r1, r3
 8007ce8:	bfde      	ittt	le
 8007cea:	2330      	movle	r3, #48	@ 0x30
 8007cec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007cf0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007cf4:	1b92      	subs	r2, r2, r6
 8007cf6:	6122      	str	r2, [r4, #16]
 8007cf8:	f8cd a000 	str.w	sl, [sp]
 8007cfc:	464b      	mov	r3, r9
 8007cfe:	aa03      	add	r2, sp, #12
 8007d00:	4621      	mov	r1, r4
 8007d02:	4640      	mov	r0, r8
 8007d04:	f7ff fee6 	bl	8007ad4 <_printf_common>
 8007d08:	3001      	adds	r0, #1
 8007d0a:	d14a      	bne.n	8007da2 <_printf_i+0x1f2>
 8007d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d10:	b004      	add	sp, #16
 8007d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d16:	6823      	ldr	r3, [r4, #0]
 8007d18:	f043 0320 	orr.w	r3, r3, #32
 8007d1c:	6023      	str	r3, [r4, #0]
 8007d1e:	4833      	ldr	r0, [pc, #204]	@ (8007dec <_printf_i+0x23c>)
 8007d20:	2778      	movs	r7, #120	@ 0x78
 8007d22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007d26:	6823      	ldr	r3, [r4, #0]
 8007d28:	6831      	ldr	r1, [r6, #0]
 8007d2a:	061f      	lsls	r7, r3, #24
 8007d2c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007d30:	d402      	bmi.n	8007d38 <_printf_i+0x188>
 8007d32:	065f      	lsls	r7, r3, #25
 8007d34:	bf48      	it	mi
 8007d36:	b2ad      	uxthmi	r5, r5
 8007d38:	6031      	str	r1, [r6, #0]
 8007d3a:	07d9      	lsls	r1, r3, #31
 8007d3c:	bf44      	itt	mi
 8007d3e:	f043 0320 	orrmi.w	r3, r3, #32
 8007d42:	6023      	strmi	r3, [r4, #0]
 8007d44:	b11d      	cbz	r5, 8007d4e <_printf_i+0x19e>
 8007d46:	2310      	movs	r3, #16
 8007d48:	e7ac      	b.n	8007ca4 <_printf_i+0xf4>
 8007d4a:	4827      	ldr	r0, [pc, #156]	@ (8007de8 <_printf_i+0x238>)
 8007d4c:	e7e9      	b.n	8007d22 <_printf_i+0x172>
 8007d4e:	6823      	ldr	r3, [r4, #0]
 8007d50:	f023 0320 	bic.w	r3, r3, #32
 8007d54:	6023      	str	r3, [r4, #0]
 8007d56:	e7f6      	b.n	8007d46 <_printf_i+0x196>
 8007d58:	4616      	mov	r6, r2
 8007d5a:	e7bd      	b.n	8007cd8 <_printf_i+0x128>
 8007d5c:	6833      	ldr	r3, [r6, #0]
 8007d5e:	6825      	ldr	r5, [r4, #0]
 8007d60:	6961      	ldr	r1, [r4, #20]
 8007d62:	1d18      	adds	r0, r3, #4
 8007d64:	6030      	str	r0, [r6, #0]
 8007d66:	062e      	lsls	r6, r5, #24
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	d501      	bpl.n	8007d70 <_printf_i+0x1c0>
 8007d6c:	6019      	str	r1, [r3, #0]
 8007d6e:	e002      	b.n	8007d76 <_printf_i+0x1c6>
 8007d70:	0668      	lsls	r0, r5, #25
 8007d72:	d5fb      	bpl.n	8007d6c <_printf_i+0x1bc>
 8007d74:	8019      	strh	r1, [r3, #0]
 8007d76:	2300      	movs	r3, #0
 8007d78:	6123      	str	r3, [r4, #16]
 8007d7a:	4616      	mov	r6, r2
 8007d7c:	e7bc      	b.n	8007cf8 <_printf_i+0x148>
 8007d7e:	6833      	ldr	r3, [r6, #0]
 8007d80:	1d1a      	adds	r2, r3, #4
 8007d82:	6032      	str	r2, [r6, #0]
 8007d84:	681e      	ldr	r6, [r3, #0]
 8007d86:	6862      	ldr	r2, [r4, #4]
 8007d88:	2100      	movs	r1, #0
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	f7f8 fa28 	bl	80001e0 <memchr>
 8007d90:	b108      	cbz	r0, 8007d96 <_printf_i+0x1e6>
 8007d92:	1b80      	subs	r0, r0, r6
 8007d94:	6060      	str	r0, [r4, #4]
 8007d96:	6863      	ldr	r3, [r4, #4]
 8007d98:	6123      	str	r3, [r4, #16]
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007da0:	e7aa      	b.n	8007cf8 <_printf_i+0x148>
 8007da2:	6923      	ldr	r3, [r4, #16]
 8007da4:	4632      	mov	r2, r6
 8007da6:	4649      	mov	r1, r9
 8007da8:	4640      	mov	r0, r8
 8007daa:	47d0      	blx	sl
 8007dac:	3001      	adds	r0, #1
 8007dae:	d0ad      	beq.n	8007d0c <_printf_i+0x15c>
 8007db0:	6823      	ldr	r3, [r4, #0]
 8007db2:	079b      	lsls	r3, r3, #30
 8007db4:	d413      	bmi.n	8007dde <_printf_i+0x22e>
 8007db6:	68e0      	ldr	r0, [r4, #12]
 8007db8:	9b03      	ldr	r3, [sp, #12]
 8007dba:	4298      	cmp	r0, r3
 8007dbc:	bfb8      	it	lt
 8007dbe:	4618      	movlt	r0, r3
 8007dc0:	e7a6      	b.n	8007d10 <_printf_i+0x160>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	4632      	mov	r2, r6
 8007dc6:	4649      	mov	r1, r9
 8007dc8:	4640      	mov	r0, r8
 8007dca:	47d0      	blx	sl
 8007dcc:	3001      	adds	r0, #1
 8007dce:	d09d      	beq.n	8007d0c <_printf_i+0x15c>
 8007dd0:	3501      	adds	r5, #1
 8007dd2:	68e3      	ldr	r3, [r4, #12]
 8007dd4:	9903      	ldr	r1, [sp, #12]
 8007dd6:	1a5b      	subs	r3, r3, r1
 8007dd8:	42ab      	cmp	r3, r5
 8007dda:	dcf2      	bgt.n	8007dc2 <_printf_i+0x212>
 8007ddc:	e7eb      	b.n	8007db6 <_printf_i+0x206>
 8007dde:	2500      	movs	r5, #0
 8007de0:	f104 0619 	add.w	r6, r4, #25
 8007de4:	e7f5      	b.n	8007dd2 <_printf_i+0x222>
 8007de6:	bf00      	nop
 8007de8:	080096bd 	.word	0x080096bd
 8007dec:	080096ce 	.word	0x080096ce

08007df0 <__sflush_r>:
 8007df0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007df8:	0716      	lsls	r6, r2, #28
 8007dfa:	4605      	mov	r5, r0
 8007dfc:	460c      	mov	r4, r1
 8007dfe:	d454      	bmi.n	8007eaa <__sflush_r+0xba>
 8007e00:	684b      	ldr	r3, [r1, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	dc02      	bgt.n	8007e0c <__sflush_r+0x1c>
 8007e06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	dd48      	ble.n	8007e9e <__sflush_r+0xae>
 8007e0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e0e:	2e00      	cmp	r6, #0
 8007e10:	d045      	beq.n	8007e9e <__sflush_r+0xae>
 8007e12:	2300      	movs	r3, #0
 8007e14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007e18:	682f      	ldr	r7, [r5, #0]
 8007e1a:	6a21      	ldr	r1, [r4, #32]
 8007e1c:	602b      	str	r3, [r5, #0]
 8007e1e:	d030      	beq.n	8007e82 <__sflush_r+0x92>
 8007e20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007e22:	89a3      	ldrh	r3, [r4, #12]
 8007e24:	0759      	lsls	r1, r3, #29
 8007e26:	d505      	bpl.n	8007e34 <__sflush_r+0x44>
 8007e28:	6863      	ldr	r3, [r4, #4]
 8007e2a:	1ad2      	subs	r2, r2, r3
 8007e2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007e2e:	b10b      	cbz	r3, 8007e34 <__sflush_r+0x44>
 8007e30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007e32:	1ad2      	subs	r2, r2, r3
 8007e34:	2300      	movs	r3, #0
 8007e36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e38:	6a21      	ldr	r1, [r4, #32]
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	47b0      	blx	r6
 8007e3e:	1c43      	adds	r3, r0, #1
 8007e40:	89a3      	ldrh	r3, [r4, #12]
 8007e42:	d106      	bne.n	8007e52 <__sflush_r+0x62>
 8007e44:	6829      	ldr	r1, [r5, #0]
 8007e46:	291d      	cmp	r1, #29
 8007e48:	d82b      	bhi.n	8007ea2 <__sflush_r+0xb2>
 8007e4a:	4a2a      	ldr	r2, [pc, #168]	@ (8007ef4 <__sflush_r+0x104>)
 8007e4c:	410a      	asrs	r2, r1
 8007e4e:	07d6      	lsls	r6, r2, #31
 8007e50:	d427      	bmi.n	8007ea2 <__sflush_r+0xb2>
 8007e52:	2200      	movs	r2, #0
 8007e54:	6062      	str	r2, [r4, #4]
 8007e56:	04d9      	lsls	r1, r3, #19
 8007e58:	6922      	ldr	r2, [r4, #16]
 8007e5a:	6022      	str	r2, [r4, #0]
 8007e5c:	d504      	bpl.n	8007e68 <__sflush_r+0x78>
 8007e5e:	1c42      	adds	r2, r0, #1
 8007e60:	d101      	bne.n	8007e66 <__sflush_r+0x76>
 8007e62:	682b      	ldr	r3, [r5, #0]
 8007e64:	b903      	cbnz	r3, 8007e68 <__sflush_r+0x78>
 8007e66:	6560      	str	r0, [r4, #84]	@ 0x54
 8007e68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e6a:	602f      	str	r7, [r5, #0]
 8007e6c:	b1b9      	cbz	r1, 8007e9e <__sflush_r+0xae>
 8007e6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e72:	4299      	cmp	r1, r3
 8007e74:	d002      	beq.n	8007e7c <__sflush_r+0x8c>
 8007e76:	4628      	mov	r0, r5
 8007e78:	f7ff fbdc 	bl	8007634 <_free_r>
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e80:	e00d      	b.n	8007e9e <__sflush_r+0xae>
 8007e82:	2301      	movs	r3, #1
 8007e84:	4628      	mov	r0, r5
 8007e86:	47b0      	blx	r6
 8007e88:	4602      	mov	r2, r0
 8007e8a:	1c50      	adds	r0, r2, #1
 8007e8c:	d1c9      	bne.n	8007e22 <__sflush_r+0x32>
 8007e8e:	682b      	ldr	r3, [r5, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d0c6      	beq.n	8007e22 <__sflush_r+0x32>
 8007e94:	2b1d      	cmp	r3, #29
 8007e96:	d001      	beq.n	8007e9c <__sflush_r+0xac>
 8007e98:	2b16      	cmp	r3, #22
 8007e9a:	d11e      	bne.n	8007eda <__sflush_r+0xea>
 8007e9c:	602f      	str	r7, [r5, #0]
 8007e9e:	2000      	movs	r0, #0
 8007ea0:	e022      	b.n	8007ee8 <__sflush_r+0xf8>
 8007ea2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ea6:	b21b      	sxth	r3, r3
 8007ea8:	e01b      	b.n	8007ee2 <__sflush_r+0xf2>
 8007eaa:	690f      	ldr	r7, [r1, #16]
 8007eac:	2f00      	cmp	r7, #0
 8007eae:	d0f6      	beq.n	8007e9e <__sflush_r+0xae>
 8007eb0:	0793      	lsls	r3, r2, #30
 8007eb2:	680e      	ldr	r6, [r1, #0]
 8007eb4:	bf08      	it	eq
 8007eb6:	694b      	ldreq	r3, [r1, #20]
 8007eb8:	600f      	str	r7, [r1, #0]
 8007eba:	bf18      	it	ne
 8007ebc:	2300      	movne	r3, #0
 8007ebe:	eba6 0807 	sub.w	r8, r6, r7
 8007ec2:	608b      	str	r3, [r1, #8]
 8007ec4:	f1b8 0f00 	cmp.w	r8, #0
 8007ec8:	dde9      	ble.n	8007e9e <__sflush_r+0xae>
 8007eca:	6a21      	ldr	r1, [r4, #32]
 8007ecc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007ece:	4643      	mov	r3, r8
 8007ed0:	463a      	mov	r2, r7
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	47b0      	blx	r6
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	dc08      	bgt.n	8007eec <__sflush_r+0xfc>
 8007eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ede:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ee2:	81a3      	strh	r3, [r4, #12]
 8007ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eec:	4407      	add	r7, r0
 8007eee:	eba8 0800 	sub.w	r8, r8, r0
 8007ef2:	e7e7      	b.n	8007ec4 <__sflush_r+0xd4>
 8007ef4:	dfbffffe 	.word	0xdfbffffe

08007ef8 <_fflush_r>:
 8007ef8:	b538      	push	{r3, r4, r5, lr}
 8007efa:	690b      	ldr	r3, [r1, #16]
 8007efc:	4605      	mov	r5, r0
 8007efe:	460c      	mov	r4, r1
 8007f00:	b913      	cbnz	r3, 8007f08 <_fflush_r+0x10>
 8007f02:	2500      	movs	r5, #0
 8007f04:	4628      	mov	r0, r5
 8007f06:	bd38      	pop	{r3, r4, r5, pc}
 8007f08:	b118      	cbz	r0, 8007f12 <_fflush_r+0x1a>
 8007f0a:	6a03      	ldr	r3, [r0, #32]
 8007f0c:	b90b      	cbnz	r3, 8007f12 <_fflush_r+0x1a>
 8007f0e:	f7ff f961 	bl	80071d4 <__sinit>
 8007f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d0f3      	beq.n	8007f02 <_fflush_r+0xa>
 8007f1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007f1c:	07d0      	lsls	r0, r2, #31
 8007f1e:	d404      	bmi.n	8007f2a <_fflush_r+0x32>
 8007f20:	0599      	lsls	r1, r3, #22
 8007f22:	d402      	bmi.n	8007f2a <_fflush_r+0x32>
 8007f24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f26:	f7ff fb74 	bl	8007612 <__retarget_lock_acquire_recursive>
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	4621      	mov	r1, r4
 8007f2e:	f7ff ff5f 	bl	8007df0 <__sflush_r>
 8007f32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f34:	07da      	lsls	r2, r3, #31
 8007f36:	4605      	mov	r5, r0
 8007f38:	d4e4      	bmi.n	8007f04 <_fflush_r+0xc>
 8007f3a:	89a3      	ldrh	r3, [r4, #12]
 8007f3c:	059b      	lsls	r3, r3, #22
 8007f3e:	d4e1      	bmi.n	8007f04 <_fflush_r+0xc>
 8007f40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f42:	f7ff fb67 	bl	8007614 <__retarget_lock_release_recursive>
 8007f46:	e7dd      	b.n	8007f04 <_fflush_r+0xc>

08007f48 <__swhatbuf_r>:
 8007f48:	b570      	push	{r4, r5, r6, lr}
 8007f4a:	460c      	mov	r4, r1
 8007f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f50:	2900      	cmp	r1, #0
 8007f52:	b096      	sub	sp, #88	@ 0x58
 8007f54:	4615      	mov	r5, r2
 8007f56:	461e      	mov	r6, r3
 8007f58:	da0d      	bge.n	8007f76 <__swhatbuf_r+0x2e>
 8007f5a:	89a3      	ldrh	r3, [r4, #12]
 8007f5c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007f60:	f04f 0100 	mov.w	r1, #0
 8007f64:	bf14      	ite	ne
 8007f66:	2340      	movne	r3, #64	@ 0x40
 8007f68:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007f6c:	2000      	movs	r0, #0
 8007f6e:	6031      	str	r1, [r6, #0]
 8007f70:	602b      	str	r3, [r5, #0]
 8007f72:	b016      	add	sp, #88	@ 0x58
 8007f74:	bd70      	pop	{r4, r5, r6, pc}
 8007f76:	466a      	mov	r2, sp
 8007f78:	f000 f848 	bl	800800c <_fstat_r>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	dbec      	blt.n	8007f5a <__swhatbuf_r+0x12>
 8007f80:	9901      	ldr	r1, [sp, #4]
 8007f82:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007f86:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007f8a:	4259      	negs	r1, r3
 8007f8c:	4159      	adcs	r1, r3
 8007f8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f92:	e7eb      	b.n	8007f6c <__swhatbuf_r+0x24>

08007f94 <__smakebuf_r>:
 8007f94:	898b      	ldrh	r3, [r1, #12]
 8007f96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f98:	079d      	lsls	r5, r3, #30
 8007f9a:	4606      	mov	r6, r0
 8007f9c:	460c      	mov	r4, r1
 8007f9e:	d507      	bpl.n	8007fb0 <__smakebuf_r+0x1c>
 8007fa0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007fa4:	6023      	str	r3, [r4, #0]
 8007fa6:	6123      	str	r3, [r4, #16]
 8007fa8:	2301      	movs	r3, #1
 8007faa:	6163      	str	r3, [r4, #20]
 8007fac:	b003      	add	sp, #12
 8007fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fb0:	ab01      	add	r3, sp, #4
 8007fb2:	466a      	mov	r2, sp
 8007fb4:	f7ff ffc8 	bl	8007f48 <__swhatbuf_r>
 8007fb8:	9f00      	ldr	r7, [sp, #0]
 8007fba:	4605      	mov	r5, r0
 8007fbc:	4639      	mov	r1, r7
 8007fbe:	4630      	mov	r0, r6
 8007fc0:	f7ff fba4 	bl	800770c <_malloc_r>
 8007fc4:	b948      	cbnz	r0, 8007fda <__smakebuf_r+0x46>
 8007fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fca:	059a      	lsls	r2, r3, #22
 8007fcc:	d4ee      	bmi.n	8007fac <__smakebuf_r+0x18>
 8007fce:	f023 0303 	bic.w	r3, r3, #3
 8007fd2:	f043 0302 	orr.w	r3, r3, #2
 8007fd6:	81a3      	strh	r3, [r4, #12]
 8007fd8:	e7e2      	b.n	8007fa0 <__smakebuf_r+0xc>
 8007fda:	89a3      	ldrh	r3, [r4, #12]
 8007fdc:	6020      	str	r0, [r4, #0]
 8007fde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fe2:	81a3      	strh	r3, [r4, #12]
 8007fe4:	9b01      	ldr	r3, [sp, #4]
 8007fe6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007fea:	b15b      	cbz	r3, 8008004 <__smakebuf_r+0x70>
 8007fec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	f000 f81d 	bl	8008030 <_isatty_r>
 8007ff6:	b128      	cbz	r0, 8008004 <__smakebuf_r+0x70>
 8007ff8:	89a3      	ldrh	r3, [r4, #12]
 8007ffa:	f023 0303 	bic.w	r3, r3, #3
 8007ffe:	f043 0301 	orr.w	r3, r3, #1
 8008002:	81a3      	strh	r3, [r4, #12]
 8008004:	89a3      	ldrh	r3, [r4, #12]
 8008006:	431d      	orrs	r5, r3
 8008008:	81a5      	strh	r5, [r4, #12]
 800800a:	e7cf      	b.n	8007fac <__smakebuf_r+0x18>

0800800c <_fstat_r>:
 800800c:	b538      	push	{r3, r4, r5, lr}
 800800e:	4d07      	ldr	r5, [pc, #28]	@ (800802c <_fstat_r+0x20>)
 8008010:	2300      	movs	r3, #0
 8008012:	4604      	mov	r4, r0
 8008014:	4608      	mov	r0, r1
 8008016:	4611      	mov	r1, r2
 8008018:	602b      	str	r3, [r5, #0]
 800801a:	f7f9 fbb3 	bl	8001784 <_fstat>
 800801e:	1c43      	adds	r3, r0, #1
 8008020:	d102      	bne.n	8008028 <_fstat_r+0x1c>
 8008022:	682b      	ldr	r3, [r5, #0]
 8008024:	b103      	cbz	r3, 8008028 <_fstat_r+0x1c>
 8008026:	6023      	str	r3, [r4, #0]
 8008028:	bd38      	pop	{r3, r4, r5, pc}
 800802a:	bf00      	nop
 800802c:	200007d8 	.word	0x200007d8

08008030 <_isatty_r>:
 8008030:	b538      	push	{r3, r4, r5, lr}
 8008032:	4d06      	ldr	r5, [pc, #24]	@ (800804c <_isatty_r+0x1c>)
 8008034:	2300      	movs	r3, #0
 8008036:	4604      	mov	r4, r0
 8008038:	4608      	mov	r0, r1
 800803a:	602b      	str	r3, [r5, #0]
 800803c:	f7f9 fbb2 	bl	80017a4 <_isatty>
 8008040:	1c43      	adds	r3, r0, #1
 8008042:	d102      	bne.n	800804a <_isatty_r+0x1a>
 8008044:	682b      	ldr	r3, [r5, #0]
 8008046:	b103      	cbz	r3, 800804a <_isatty_r+0x1a>
 8008048:	6023      	str	r3, [r4, #0]
 800804a:	bd38      	pop	{r3, r4, r5, pc}
 800804c:	200007d8 	.word	0x200007d8

08008050 <_sbrk_r>:
 8008050:	b538      	push	{r3, r4, r5, lr}
 8008052:	4d06      	ldr	r5, [pc, #24]	@ (800806c <_sbrk_r+0x1c>)
 8008054:	2300      	movs	r3, #0
 8008056:	4604      	mov	r4, r0
 8008058:	4608      	mov	r0, r1
 800805a:	602b      	str	r3, [r5, #0]
 800805c:	f7f9 fbba 	bl	80017d4 <_sbrk>
 8008060:	1c43      	adds	r3, r0, #1
 8008062:	d102      	bne.n	800806a <_sbrk_r+0x1a>
 8008064:	682b      	ldr	r3, [r5, #0]
 8008066:	b103      	cbz	r3, 800806a <_sbrk_r+0x1a>
 8008068:	6023      	str	r3, [r4, #0]
 800806a:	bd38      	pop	{r3, r4, r5, pc}
 800806c:	200007d8 	.word	0x200007d8

08008070 <_realloc_r>:
 8008070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008074:	4680      	mov	r8, r0
 8008076:	4615      	mov	r5, r2
 8008078:	460c      	mov	r4, r1
 800807a:	b921      	cbnz	r1, 8008086 <_realloc_r+0x16>
 800807c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008080:	4611      	mov	r1, r2
 8008082:	f7ff bb43 	b.w	800770c <_malloc_r>
 8008086:	b92a      	cbnz	r2, 8008094 <_realloc_r+0x24>
 8008088:	f7ff fad4 	bl	8007634 <_free_r>
 800808c:	2400      	movs	r4, #0
 800808e:	4620      	mov	r0, r4
 8008090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008094:	f000 f81a 	bl	80080cc <_malloc_usable_size_r>
 8008098:	4285      	cmp	r5, r0
 800809a:	4606      	mov	r6, r0
 800809c:	d802      	bhi.n	80080a4 <_realloc_r+0x34>
 800809e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80080a2:	d8f4      	bhi.n	800808e <_realloc_r+0x1e>
 80080a4:	4629      	mov	r1, r5
 80080a6:	4640      	mov	r0, r8
 80080a8:	f7ff fb30 	bl	800770c <_malloc_r>
 80080ac:	4607      	mov	r7, r0
 80080ae:	2800      	cmp	r0, #0
 80080b0:	d0ec      	beq.n	800808c <_realloc_r+0x1c>
 80080b2:	42b5      	cmp	r5, r6
 80080b4:	462a      	mov	r2, r5
 80080b6:	4621      	mov	r1, r4
 80080b8:	bf28      	it	cs
 80080ba:	4632      	movcs	r2, r6
 80080bc:	f7ff faab 	bl	8007616 <memcpy>
 80080c0:	4621      	mov	r1, r4
 80080c2:	4640      	mov	r0, r8
 80080c4:	f7ff fab6 	bl	8007634 <_free_r>
 80080c8:	463c      	mov	r4, r7
 80080ca:	e7e0      	b.n	800808e <_realloc_r+0x1e>

080080cc <_malloc_usable_size_r>:
 80080cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080d0:	1f18      	subs	r0, r3, #4
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	bfbc      	itt	lt
 80080d6:	580b      	ldrlt	r3, [r1, r0]
 80080d8:	18c0      	addlt	r0, r0, r3
 80080da:	4770      	bx	lr

080080dc <_init>:
 80080dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080de:	bf00      	nop
 80080e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080e2:	bc08      	pop	{r3}
 80080e4:	469e      	mov	lr, r3
 80080e6:	4770      	bx	lr

080080e8 <_fini>:
 80080e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ea:	bf00      	nop
 80080ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ee:	bc08      	pop	{r3}
 80080f0:	469e      	mov	lr, r3
 80080f2:	4770      	bx	lr
