
ProjectProof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dfc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08005f8c  08005f8c  00006f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006018  08006018  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  08006018  08006018  00007018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006020  08006020  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006020  08006020  00007020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006024  08006024  00007024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006028  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  2000005c  08006084  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08006084  000082cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b0e  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023e1  00000000  00000000  00018b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  0001af80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a98  00000000  00000000  0001bd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027bd5  00000000  00000000  0001c7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010502  00000000  00000000  000443ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb047  00000000  00000000  000548af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014f8f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e70  00000000  00000000  0014f93c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  001537ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f74 	.word	0x08005f74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005f74 	.word	0x08005f74

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fb6e 	bl	8000c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f848 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f940 	bl	8000800 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000580:	f000 f896 	bl	80006b0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000584:	f000 f90c 	bl	80007a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	   HAL_ADC_Start(&hadc1);
 8000588:	481b      	ldr	r0, [pc, #108]	@ (80005f8 <main+0x88>)
 800058a:	f000 ff49 	bl	8001420 <HAL_ADC_Start>
	   HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800058e:	f04f 31ff 	mov.w	r1, #4294967295
 8000592:	4819      	ldr	r0, [pc, #100]	@ (80005f8 <main+0x88>)
 8000594:	f000 fffe 	bl	8001594 <HAL_ADC_PollForConversion>
	   lux  = HAL_ADC_GetValue(&hadc1);
 8000598:	4817      	ldr	r0, [pc, #92]	@ (80005f8 <main+0x88>)
 800059a:	f001 f8d3 	bl	8001744 <HAL_ADC_GetValue>
 800059e:	4603      	mov	r3, r0
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	4b16      	ldr	r3, [pc, #88]	@ (80005fc <main+0x8c>)
 80005a4:	801a      	strh	r2, [r3, #0]
	   sprintf (msg, "Light : %hu \r \n", lux);
 80005a6:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <main+0x8c>)
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	461a      	mov	r2, r3
 80005ac:	4914      	ldr	r1, [pc, #80]	@ (8000600 <main+0x90>)
 80005ae:	4815      	ldr	r0, [pc, #84]	@ (8000604 <main+0x94>)
 80005b0:	f005 f840 	bl	8005634 <siprintf>
	   HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005b4:	4813      	ldr	r0, [pc, #76]	@ (8000604 <main+0x94>)
 80005b6:	f7ff fe0b 	bl	80001d0 <strlen>
 80005ba:	4603      	mov	r3, r0
 80005bc:	b29a      	uxth	r2, r3
 80005be:	f04f 33ff 	mov.w	r3, #4294967295
 80005c2:	4910      	ldr	r1, [pc, #64]	@ (8000604 <main+0x94>)
 80005c4:	4810      	ldr	r0, [pc, #64]	@ (8000608 <main+0x98>)
 80005c6:	f003 ff67 	bl	8004498 <HAL_UART_Transmit>

	   HAL_Delay(1000);  // Esperar un segundo antes de la siguiente lectura
 80005ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ce:	f000 fbbd 	bl	8000d4c <HAL_Delay>



	   if (lux < 2000){
 80005d2:	4b0a      	ldr	r3, [pc, #40]	@ (80005fc <main+0x8c>)
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80005da:	d206      	bcs.n	80005ea <main+0x7a>
		   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin , 1 );
 80005dc:	2201      	movs	r2, #1
 80005de:	2120      	movs	r1, #32
 80005e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e4:	f002 fbae 	bl	8002d44 <HAL_GPIO_WritePin>
 80005e8:	e7ce      	b.n	8000588 <main+0x18>

	   }else{
		   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin , 0 );
 80005ea:	2200      	movs	r2, #0
 80005ec:	2120      	movs	r1, #32
 80005ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f2:	f002 fba7 	bl	8002d44 <HAL_GPIO_WritePin>
	   HAL_ADC_Start(&hadc1);
 80005f6:	e7c7      	b.n	8000588 <main+0x18>
 80005f8:	20000078 	.word	0x20000078
 80005fc:	20000164 	.word	0x20000164
 8000600:	08005f8c 	.word	0x08005f8c
 8000604:	20000168 	.word	0x20000168
 8000608:	200000dc 	.word	0x200000dc

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	@ 0x58
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2244      	movs	r2, #68	@ 0x44
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f005 f82a 	bl	8005674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	463b      	mov	r3, r7
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800062e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000632:	f002 fbd1 	bl	8002dd8 <HAL_PWREx_ControlVoltageScaling>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800063c:	f000 f94e 	bl	80008dc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000648:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064a:	2310      	movs	r3, #16
 800064c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000652:	2302      	movs	r3, #2
 8000654:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000656:	2301      	movs	r3, #1
 8000658:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800065a:	230a      	movs	r3, #10
 800065c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800065e:	2307      	movs	r3, #7
 8000660:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4618      	mov	r0, r3
 8000670:	f002 fc08 	bl	8002e84 <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800067a:	f000 f92f 	bl	80008dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2303      	movs	r3, #3
 8000684:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000692:	463b      	mov	r3, r7
 8000694:	2104      	movs	r1, #4
 8000696:	4618      	mov	r0, r3
 8000698:	f002 ffd0 	bl	800363c <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006a2:	f000 f91b 	bl	80008dc <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3758      	adds	r7, #88	@ 0x58
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	@ 0x28
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006b6:	f107 031c 	add.w	r3, r7, #28
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
 80006d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006d2:	4b30      	ldr	r3, [pc, #192]	@ (8000794 <MX_ADC1_Init+0xe4>)
 80006d4:	4a30      	ldr	r2, [pc, #192]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80006d8:	4b2e      	ldr	r3, [pc, #184]	@ (8000794 <MX_ADC1_Init+0xe4>)
 80006da:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80006de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006e0:	4b2c      	ldr	r3, [pc, #176]	@ (8000794 <MX_ADC1_Init+0xe4>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000794 <MX_ADC1_Init+0xe4>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ec:	4b29      	ldr	r3, [pc, #164]	@ (8000794 <MX_ADC1_Init+0xe4>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f2:	4b28      	ldr	r3, [pc, #160]	@ (8000794 <MX_ADC1_Init+0xe4>)
 80006f4:	2204      	movs	r2, #4
 80006f6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006f8:	4b26      	ldr	r3, [pc, #152]	@ (8000794 <MX_ADC1_Init+0xe4>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006fe:	4b25      	ldr	r3, [pc, #148]	@ (8000794 <MX_ADC1_Init+0xe4>)
 8000700:	2200      	movs	r2, #0
 8000702:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000704:	4b23      	ldr	r3, [pc, #140]	@ (8000794 <MX_ADC1_Init+0xe4>)
 8000706:	2201      	movs	r2, #1
 8000708:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800070a:	4b22      	ldr	r3, [pc, #136]	@ (8000794 <MX_ADC1_Init+0xe4>)
 800070c:	2200      	movs	r2, #0
 800070e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000712:	4b20      	ldr	r3, [pc, #128]	@ (8000794 <MX_ADC1_Init+0xe4>)
 8000714:	2200      	movs	r2, #0
 8000716:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000718:	4b1e      	ldr	r3, [pc, #120]	@ (8000794 <MX_ADC1_Init+0xe4>)
 800071a:	2200      	movs	r2, #0
 800071c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800071e:	4b1d      	ldr	r3, [pc, #116]	@ (8000794 <MX_ADC1_Init+0xe4>)
 8000720:	2200      	movs	r2, #0
 8000722:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000726:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <MX_ADC1_Init+0xe4>)
 8000728:	2200      	movs	r2, #0
 800072a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800072c:	4b19      	ldr	r3, [pc, #100]	@ (8000794 <MX_ADC1_Init+0xe4>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000734:	4817      	ldr	r0, [pc, #92]	@ (8000794 <MX_ADC1_Init+0xe4>)
 8000736:	f000 fd23 	bl	8001180 <HAL_ADC_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000740:	f000 f8cc 	bl	80008dc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000744:	2300      	movs	r3, #0
 8000746:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000748:	f107 031c 	add.w	r3, r7, #28
 800074c:	4619      	mov	r1, r3
 800074e:	4811      	ldr	r0, [pc, #68]	@ (8000794 <MX_ADC1_Init+0xe4>)
 8000750:	f001 ff0e 	bl	8002570 <HAL_ADCEx_MultiModeConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800075a:	f000 f8bf 	bl	80008dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800075e:	4b0f      	ldr	r3, [pc, #60]	@ (800079c <MX_ADC1_Init+0xec>)
 8000760:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000762:	2306      	movs	r3, #6
 8000764:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000766:	2302      	movs	r3, #2
 8000768:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800076a:	237f      	movs	r3, #127	@ 0x7f
 800076c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800076e:	2304      	movs	r3, #4
 8000770:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	4619      	mov	r1, r3
 800077a:	4806      	ldr	r0, [pc, #24]	@ (8000794 <MX_ADC1_Init+0xe4>)
 800077c:	f001 fa28 	bl	8001bd0 <HAL_ADC_ConfigChannel>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000786:	f000 f8a9 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	3728      	adds	r7, #40	@ 0x28
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000078 	.word	0x20000078
 8000798:	50040000 	.word	0x50040000
 800079c:	14f00020 	.word	0x14f00020

080007a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a4:	4b14      	ldr	r3, [pc, #80]	@ (80007f8 <MX_USART2_UART_Init+0x58>)
 80007a6:	4a15      	ldr	r2, [pc, #84]	@ (80007fc <MX_USART2_UART_Init+0x5c>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007aa:	4b13      	ldr	r3, [pc, #76]	@ (80007f8 <MX_USART2_UART_Init+0x58>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <MX_USART2_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <MX_USART2_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <MX_USART2_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <MX_USART2_UART_Init+0x58>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	@ (80007f8 <MX_USART2_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <MX_USART2_UART_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <MX_USART2_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <MX_USART2_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <MX_USART2_UART_Init+0x58>)
 80007e4:	f003 fe0a 	bl	80043fc <HAL_UART_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ee:	f000 f875 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200000dc 	.word	0x200000dc
 80007fc:	40004400 	.word	0x40004400

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	@ 0x28
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b2f      	ldr	r3, [pc, #188]	@ (80008d4 <MX_GPIO_Init+0xd4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a2e      	ldr	r2, [pc, #184]	@ (80008d4 <MX_GPIO_Init+0xd4>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b2c      	ldr	r3, [pc, #176]	@ (80008d4 <MX_GPIO_Init+0xd4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082e:	4b29      	ldr	r3, [pc, #164]	@ (80008d4 <MX_GPIO_Init+0xd4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a28      	ldr	r2, [pc, #160]	@ (80008d4 <MX_GPIO_Init+0xd4>)
 8000834:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b26      	ldr	r3, [pc, #152]	@ (80008d4 <MX_GPIO_Init+0xd4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	4b23      	ldr	r3, [pc, #140]	@ (80008d4 <MX_GPIO_Init+0xd4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a22      	ldr	r2, [pc, #136]	@ (80008d4 <MX_GPIO_Init+0xd4>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b20      	ldr	r3, [pc, #128]	@ (80008d4 <MX_GPIO_Init+0xd4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	4b1d      	ldr	r3, [pc, #116]	@ (80008d4 <MX_GPIO_Init+0xd4>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	4a1c      	ldr	r2, [pc, #112]	@ (80008d4 <MX_GPIO_Init+0xd4>)
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086a:	4b1a      	ldr	r3, [pc, #104]	@ (80008d4 <MX_GPIO_Init+0xd4>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086e:	f003 0302 	and.w	r3, r3, #2
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2120      	movs	r1, #32
 800087a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800087e:	f002 fa61 	bl	8002d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000882:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000888:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800088c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	480f      	ldr	r0, [pc, #60]	@ (80008d8 <MX_GPIO_Init+0xd8>)
 800089a:	f002 f8a9 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800089e:	2320      	movs	r3, #32
 80008a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b8:	f002 f89a 	bl	80029f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008bc:	2200      	movs	r2, #0
 80008be:	2100      	movs	r1, #0
 80008c0:	2028      	movs	r0, #40	@ 0x28
 80008c2:	f001 ffe0 	bl	8002886 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008c6:	2028      	movs	r0, #40	@ 0x28
 80008c8:	f001 fff9 	bl	80028be <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008cc:	bf00      	nop
 80008ce:	3728      	adds	r7, #40	@ 0x28
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40021000 	.word	0x40021000
 80008d8:	48000800 	.word	0x48000800

080008dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e0:	b672      	cpsid	i
}
 80008e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <Error_Handler+0x8>

080008e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ee:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <HAL_MspInit+0x44>)
 80008f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008f2:	4a0e      	ldr	r2, [pc, #56]	@ (800092c <HAL_MspInit+0x44>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80008fa:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <HAL_MspInit+0x44>)
 80008fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	4b09      	ldr	r3, [pc, #36]	@ (800092c <HAL_MspInit+0x44>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800090a:	4a08      	ldr	r2, [pc, #32]	@ (800092c <HAL_MspInit+0x44>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000910:	6593      	str	r3, [r2, #88]	@ 0x58
 8000912:	4b06      	ldr	r3, [pc, #24]	@ (800092c <HAL_MspInit+0x44>)
 8000914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40021000 	.word	0x40021000

08000930 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b0ac      	sub	sp, #176	@ 0xb0
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	2288      	movs	r2, #136	@ 0x88
 800094e:	2100      	movs	r1, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f004 fe8f 	bl	8005674 <memset>
  if(hadc->Instance==ADC1)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a2b      	ldr	r2, [pc, #172]	@ (8000a08 <HAL_ADC_MspInit+0xd8>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d14f      	bne.n	8000a00 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000960:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000964:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000966:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800096a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800096e:	2302      	movs	r3, #2
 8000970:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000972:	2301      	movs	r3, #1
 8000974:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000976:	2308      	movs	r3, #8
 8000978:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800097a:	2307      	movs	r3, #7
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800097e:	2302      	movs	r3, #2
 8000980:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000982:	2302      	movs	r3, #2
 8000984:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000986:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800098a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4618      	mov	r0, r3
 8000992:	f003 f877 	bl	8003a84 <HAL_RCCEx_PeriphCLKConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800099c:	f7ff ff9e 	bl	80008dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80009a0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a0c <HAL_ADC_MspInit+0xdc>)
 80009a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a4:	4a19      	ldr	r2, [pc, #100]	@ (8000a0c <HAL_ADC_MspInit+0xdc>)
 80009a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ac:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <HAL_ADC_MspInit+0xdc>)
 80009ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b8:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <HAL_ADC_MspInit+0xdc>)
 80009ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009bc:	4a13      	ldr	r2, [pc, #76]	@ (8000a0c <HAL_ADC_MspInit+0xdc>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c4:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <HAL_ADC_MspInit+0xdc>)
 80009c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009d0:	2301      	movs	r3, #1
 80009d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009d6:	230b      	movs	r3, #11
 80009d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009e6:	4619      	mov	r1, r3
 80009e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ec:	f002 f800 	bl	80029f0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2100      	movs	r1, #0
 80009f4:	2012      	movs	r0, #18
 80009f6:	f001 ff46 	bl	8002886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80009fa:	2012      	movs	r0, #18
 80009fc:	f001 ff5f 	bl	80028be <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a00:	bf00      	nop
 8000a02:	37b0      	adds	r7, #176	@ 0xb0
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	50040000 	.word	0x50040000
 8000a0c:	40021000 	.word	0x40021000

08000a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b0ac      	sub	sp, #176	@ 0xb0
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2288      	movs	r2, #136	@ 0x88
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f004 fe1f 	bl	8005674 <memset>
  if(huart->Instance==USART2)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a25      	ldr	r2, [pc, #148]	@ (8000ad0 <HAL_UART_MspInit+0xc0>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d143      	bne.n	8000ac8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a40:	2302      	movs	r3, #2
 8000a42:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f003 f819 	bl	8003a84 <HAL_RCCEx_PeriphCLKConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a58:	f7ff ff40 	bl	80008dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad4 <HAL_UART_MspInit+0xc4>)
 8000a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a60:	4a1c      	ldr	r2, [pc, #112]	@ (8000ad4 <HAL_UART_MspInit+0xc4>)
 8000a62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a66:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a68:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad4 <HAL_UART_MspInit+0xc4>)
 8000a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a74:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <HAL_UART_MspInit+0xc4>)
 8000a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a78:	4a16      	ldr	r2, [pc, #88]	@ (8000ad4 <HAL_UART_MspInit+0xc4>)
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a80:	4b14      	ldr	r3, [pc, #80]	@ (8000ad4 <HAL_UART_MspInit+0xc4>)
 8000a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a8c:	230c      	movs	r3, #12
 8000a8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aa4:	2307      	movs	r3, #7
 8000aa6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000aae:	4619      	mov	r1, r3
 8000ab0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab4:	f001 ff9c 	bl	80029f0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2100      	movs	r1, #0
 8000abc:	2026      	movs	r0, #38	@ 0x26
 8000abe:	f001 fee2 	bl	8002886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ac2:	2026      	movs	r0, #38	@ 0x26
 8000ac4:	f001 fefb 	bl	80028be <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ac8:	bf00      	nop
 8000aca:	37b0      	adds	r7, #176	@ 0xb0
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40004400 	.word	0x40004400
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <NMI_Handler+0x4>

08000ae0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <HardFault_Handler+0x4>

08000ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <MemManage_Handler+0x4>

08000af0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <BusFault_Handler+0x4>

08000af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <UsageFault_Handler+0x4>

08000b00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2e:	f000 f8ed 	bl	8000d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000b3c:	4802      	ldr	r0, [pc, #8]	@ (8000b48 <ADC1_2_IRQHandler+0x10>)
 8000b3e:	f000 fe0f 	bl	8001760 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000078 	.word	0x20000078

08000b4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b50:	4802      	ldr	r0, [pc, #8]	@ (8000b5c <USART2_IRQHandler+0x10>)
 8000b52:	f003 fd2b 	bl	80045ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200000dc 	.word	0x200000dc

08000b60 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b64:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000b68:	f002 f904 	bl	8002d74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b78:	4a14      	ldr	r2, [pc, #80]	@ (8000bcc <_sbrk+0x5c>)
 8000b7a:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <_sbrk+0x60>)
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b84:	4b13      	ldr	r3, [pc, #76]	@ (8000bd4 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d102      	bne.n	8000b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <_sbrk+0x64>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	@ (8000bd8 <_sbrk+0x68>)
 8000b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b92:	4b10      	ldr	r3, [pc, #64]	@ (8000bd4 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d207      	bcs.n	8000bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba0:	f004 fd70 	bl	8005684 <__errno>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bae:	e009      	b.n	8000bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	@ (8000bd4 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	@ (8000bd4 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	4a05      	ldr	r2, [pc, #20]	@ (8000bd4 <_sbrk+0x64>)
 8000bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20018000 	.word	0x20018000
 8000bd0:	00000400 	.word	0x00000400
 8000bd4:	2000017c 	.word	0x2000017c
 8000bd8:	200002d0 	.word	0x200002d0

08000bdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <SystemInit+0x20>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000be6:	4a05      	ldr	r2, [pc, #20]	@ (8000bfc <SystemInit+0x20>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c04:	f7ff ffea 	bl	8000bdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c08:	480c      	ldr	r0, [pc, #48]	@ (8000c3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c0a:	490d      	ldr	r1, [pc, #52]	@ (8000c40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c44 <LoopForever+0xe>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c20:	4c0a      	ldr	r4, [pc, #40]	@ (8000c4c <LoopForever+0x16>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f004 fd2f 	bl	8005690 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c32:	f7ff fc9d 	bl	8000570 <main>

08000c36 <LoopForever>:

LoopForever:
    b LoopForever
 8000c36:	e7fe      	b.n	8000c36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c44:	08006028 	.word	0x08006028
  ldr r2, =_sbss
 8000c48:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c4c:	200002cc 	.word	0x200002cc

08000c50 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC3_IRQHandler>
	...

08000c54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <HAL_Init+0x3c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a0b      	ldr	r2, [pc, #44]	@ (8000c90 <HAL_Init+0x3c>)
 8000c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c68:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6a:	2003      	movs	r0, #3
 8000c6c:	f001 fe00 	bl	8002870 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c70:	2000      	movs	r0, #0
 8000c72:	f000 f80f 	bl	8000c94 <HAL_InitTick>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d002      	beq.n	8000c82 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	71fb      	strb	r3, [r7, #7]
 8000c80:	e001      	b.n	8000c86 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c82:	f7ff fe31 	bl	80008e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c86:	79fb      	ldrb	r3, [r7, #7]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40022000 	.word	0x40022000

08000c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ca0:	4b17      	ldr	r3, [pc, #92]	@ (8000d00 <HAL_InitTick+0x6c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d023      	beq.n	8000cf0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ca8:	4b16      	ldr	r3, [pc, #88]	@ (8000d04 <HAL_InitTick+0x70>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b14      	ldr	r3, [pc, #80]	@ (8000d00 <HAL_InitTick+0x6c>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f001 fe0b 	bl	80028da <HAL_SYSTICK_Config>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d10f      	bne.n	8000cea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b0f      	cmp	r3, #15
 8000cce:	d809      	bhi.n	8000ce4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f001 fdd5 	bl	8002886 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <HAL_InitTick+0x74>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6013      	str	r3, [r2, #0]
 8000ce2:	e007      	b.n	8000cf4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	73fb      	strb	r3, [r7, #15]
 8000ce8:	e004      	b.n	8000cf4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	73fb      	strb	r3, [r7, #15]
 8000cee:	e001      	b.n	8000cf4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000008 	.word	0x20000008
 8000d04:	20000000 	.word	0x20000000
 8000d08:	20000004 	.word	0x20000004

08000d0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d10:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <HAL_IncTick+0x20>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	461a      	mov	r2, r3
 8000d16:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <HAL_IncTick+0x24>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	4a04      	ldr	r2, [pc, #16]	@ (8000d30 <HAL_IncTick+0x24>)
 8000d1e:	6013      	str	r3, [r2, #0]
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	20000008 	.word	0x20000008
 8000d30:	20000180 	.word	0x20000180

08000d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return uwTick;
 8000d38:	4b03      	ldr	r3, [pc, #12]	@ (8000d48 <HAL_GetTick+0x14>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000180 	.word	0x20000180

08000d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d54:	f7ff ffee 	bl	8000d34 <HAL_GetTick>
 8000d58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d64:	d005      	beq.n	8000d72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d66:	4b0a      	ldr	r3, [pc, #40]	@ (8000d90 <HAL_Delay+0x44>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4413      	add	r3, r2
 8000d70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d72:	bf00      	nop
 8000d74:	f7ff ffde 	bl	8000d34 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d8f7      	bhi.n	8000d74 <HAL_Delay+0x28>
  {
  }
}
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000008 	.word	0x20000008

08000d94 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	431a      	orrs	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	609a      	str	r2, [r3, #8]
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	431a      	orrs	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b087      	sub	sp, #28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
 8000e08:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	3360      	adds	r3, #96	@ 0x60
 8000e0e:	461a      	mov	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <LL_ADC_SetOffset+0x44>)
 8000e1e:	4013      	ands	r3, r2
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000e26:	683a      	ldr	r2, [r7, #0]
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e34:	bf00      	nop
 8000e36:	371c      	adds	r7, #28
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	03fff000 	.word	0x03fff000

08000e44 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3360      	adds	r3, #96	@ 0x60
 8000e52:	461a      	mov	r2, r3
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	4413      	add	r3, r2
 8000e5a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b087      	sub	sp, #28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	3360      	adds	r3, #96	@ 0x60
 8000e80:	461a      	mov	r2, r3
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	4413      	add	r3, r2
 8000e88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	431a      	orrs	r2, r3
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e9a:	bf00      	nop
 8000e9c:	371c      	adds	r7, #28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d101      	bne.n	8000ebe <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e000      	b.n	8000ec0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	3330      	adds	r3, #48	@ 0x30
 8000edc:	461a      	mov	r2, r3
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	0a1b      	lsrs	r3, r3, #8
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	f003 030c 	and.w	r3, r3, #12
 8000ee8:	4413      	add	r3, r2
 8000eea:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	f003 031f 	and.w	r3, r3, #31
 8000ef6:	211f      	movs	r1, #31
 8000ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	401a      	ands	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	0e9b      	lsrs	r3, r3, #26
 8000f04:	f003 011f 	and.w	r1, r3, #31
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	f003 031f 	and.w	r3, r3, #31
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	431a      	orrs	r2, r3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f18:	bf00      	nop
 8000f1a:	371c      	adds	r7, #28
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f30:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d101      	bne.n	8000f3c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e000      	b.n	8000f3e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b087      	sub	sp, #28
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	60f8      	str	r0, [r7, #12]
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	3314      	adds	r3, #20
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	0e5b      	lsrs	r3, r3, #25
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	f003 0304 	and.w	r3, r3, #4
 8000f66:	4413      	add	r3, r2
 8000f68:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	0d1b      	lsrs	r3, r3, #20
 8000f72:	f003 031f 	and.w	r3, r3, #31
 8000f76:	2107      	movs	r1, #7
 8000f78:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	401a      	ands	r2, r3
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	0d1b      	lsrs	r3, r3, #20
 8000f84:	f003 031f 	and.w	r3, r3, #31
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000f94:	bf00      	nop
 8000f96:	371c      	adds	r7, #28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	401a      	ands	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0318 	and.w	r3, r3, #24
 8000fc2:	4908      	ldr	r1, [pc, #32]	@ (8000fe4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000fc4:	40d9      	lsrs	r1, r3
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	400b      	ands	r3, r1
 8000fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000fd6:	bf00      	nop
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	0007ffff 	.word	0x0007ffff

08000fe8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f003 031f 	and.w	r3, r3, #31
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001030:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6093      	str	r3, [r2, #8]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001054:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001058:	d101      	bne.n	800105e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800107c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001080:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80010a8:	d101      	bne.n	80010ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80010cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010d0:	f043 0201 	orr.w	r2, r3, #1
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d101      	bne.n	80010fc <LL_ADC_IsEnabled+0x18>
 80010f8:	2301      	movs	r3, #1
 80010fa:	e000      	b.n	80010fe <LL_ADC_IsEnabled+0x1a>
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800111a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800111e:	f043 0204 	orr.w	r2, r3, #4
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	2b04      	cmp	r3, #4
 8001144:	d101      	bne.n	800114a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f003 0308 	and.w	r3, r3, #8
 8001168:	2b08      	cmp	r3, #8
 800116a:	d101      	bne.n	8001170 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800116c:	2301      	movs	r3, #1
 800116e:	e000      	b.n	8001172 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001180:	b590      	push	{r4, r7, lr}
 8001182:	b089      	sub	sp, #36	@ 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001188:	2300      	movs	r3, #0
 800118a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e130      	b.n	80013fc <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d109      	bne.n	80011bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff fbc1 	bl	8000930 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff3f 	bl	8001044 <LL_ADC_IsDeepPowerDownEnabled>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d004      	beq.n	80011d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff25 	bl	8001020 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff5a 	bl	8001094 <LL_ADC_IsInternalRegulatorEnabled>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d115      	bne.n	8001212 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ff3e 	bl	800106c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011f0:	4b84      	ldr	r3, [pc, #528]	@ (8001404 <HAL_ADC_Init+0x284>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	099b      	lsrs	r3, r3, #6
 80011f6:	4a84      	ldr	r2, [pc, #528]	@ (8001408 <HAL_ADC_Init+0x288>)
 80011f8:	fba2 2303 	umull	r2, r3, r2, r3
 80011fc:	099b      	lsrs	r3, r3, #6
 80011fe:	3301      	adds	r3, #1
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001204:	e002      	b.n	800120c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	3b01      	subs	r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f9      	bne.n	8001206 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ff3c 	bl	8001094 <LL_ADC_IsInternalRegulatorEnabled>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d10d      	bne.n	800123e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001226:	f043 0210 	orr.w	r2, r3, #16
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001232:	f043 0201 	orr.w	r2, r3, #1
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ff75 	bl	8001132 <LL_ADC_REG_IsConversionOngoing>
 8001248:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800124e:	f003 0310 	and.w	r3, r3, #16
 8001252:	2b00      	cmp	r3, #0
 8001254:	f040 80c9 	bne.w	80013ea <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	2b00      	cmp	r3, #0
 800125c:	f040 80c5 	bne.w	80013ea <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001264:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001268:	f043 0202 	orr.w	r2, r3, #2
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff35 	bl	80010e4 <LL_ADC_IsEnabled>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d115      	bne.n	80012ac <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001280:	4862      	ldr	r0, [pc, #392]	@ (800140c <HAL_ADC_Init+0x28c>)
 8001282:	f7ff ff2f 	bl	80010e4 <LL_ADC_IsEnabled>
 8001286:	4604      	mov	r4, r0
 8001288:	4861      	ldr	r0, [pc, #388]	@ (8001410 <HAL_ADC_Init+0x290>)
 800128a:	f7ff ff2b 	bl	80010e4 <LL_ADC_IsEnabled>
 800128e:	4603      	mov	r3, r0
 8001290:	431c      	orrs	r4, r3
 8001292:	4860      	ldr	r0, [pc, #384]	@ (8001414 <HAL_ADC_Init+0x294>)
 8001294:	f7ff ff26 	bl	80010e4 <LL_ADC_IsEnabled>
 8001298:	4603      	mov	r3, r0
 800129a:	4323      	orrs	r3, r4
 800129c:	2b00      	cmp	r3, #0
 800129e:	d105      	bne.n	80012ac <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	4619      	mov	r1, r3
 80012a6:	485c      	ldr	r0, [pc, #368]	@ (8001418 <HAL_ADC_Init+0x298>)
 80012a8:	f7ff fd74 	bl	8000d94 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	7e5b      	ldrb	r3, [r3, #25]
 80012b0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012b6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80012bc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80012c2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ca:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d106      	bne.n	80012e8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012de:	3b01      	subs	r3, #1
 80012e0:	045b      	lsls	r3, r3, #17
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d009      	beq.n	8001304 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012fc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68da      	ldr	r2, [r3, #12]
 800130a:	4b44      	ldr	r3, [pc, #272]	@ (800141c <HAL_ADC_Init+0x29c>)
 800130c:	4013      	ands	r3, r2
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	6812      	ldr	r2, [r2, #0]
 8001312:	69b9      	ldr	r1, [r7, #24]
 8001314:	430b      	orrs	r3, r1
 8001316:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff1b 	bl	8001158 <LL_ADC_INJ_IsConversionOngoing>
 8001322:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d13d      	bne.n	80013a6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d13a      	bne.n	80013a6 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001334:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800133c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800134c:	f023 0302 	bic.w	r3, r3, #2
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	6812      	ldr	r2, [r2, #0]
 8001354:	69b9      	ldr	r1, [r7, #24]
 8001356:	430b      	orrs	r3, r1
 8001358:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001360:	2b01      	cmp	r3, #1
 8001362:	d118      	bne.n	8001396 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800136e:	f023 0304 	bic.w	r3, r3, #4
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800137a:	4311      	orrs	r1, r2
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001380:	4311      	orrs	r1, r2
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001386:	430a      	orrs	r2, r1
 8001388:	431a      	orrs	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f042 0201 	orr.w	r2, r2, #1
 8001392:	611a      	str	r2, [r3, #16]
 8001394:	e007      	b.n	80013a6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	691a      	ldr	r2, [r3, #16]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 0201 	bic.w	r2, r2, #1
 80013a4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d10c      	bne.n	80013c8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b4:	f023 010f 	bic.w	r1, r3, #15
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69db      	ldr	r3, [r3, #28]
 80013bc:	1e5a      	subs	r2, r3, #1
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80013c6:	e007      	b.n	80013d8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f022 020f 	bic.w	r2, r2, #15
 80013d6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013dc:	f023 0303 	bic.w	r3, r3, #3
 80013e0:	f043 0201 	orr.w	r2, r3, #1
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	655a      	str	r2, [r3, #84]	@ 0x54
 80013e8:	e007      	b.n	80013fa <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013ee:	f043 0210 	orr.w	r2, r3, #16
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80013fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3724      	adds	r7, #36	@ 0x24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd90      	pop	{r4, r7, pc}
 8001404:	20000000 	.word	0x20000000
 8001408:	053e2d63 	.word	0x053e2d63
 800140c:	50040000 	.word	0x50040000
 8001410:	50040100 	.word	0x50040100
 8001414:	50040200 	.word	0x50040200
 8001418:	50040300 	.word	0x50040300
 800141c:	fff0c007 	.word	0xfff0c007

08001420 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001428:	4857      	ldr	r0, [pc, #348]	@ (8001588 <HAL_ADC_Start+0x168>)
 800142a:	f7ff fddd 	bl	8000fe8 <LL_ADC_GetMultimode>
 800142e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fe7c 	bl	8001132 <LL_ADC_REG_IsConversionOngoing>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	f040 809c 	bne.w	800157a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001448:	2b01      	cmp	r3, #1
 800144a:	d101      	bne.n	8001450 <HAL_ADC_Start+0x30>
 800144c:	2302      	movs	r3, #2
 800144e:	e097      	b.n	8001580 <HAL_ADC_Start+0x160>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 ffab 	bl	80023b4 <ADC_Enable>
 800145e:	4603      	mov	r3, r0
 8001460:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001462:	7dfb      	ldrb	r3, [r7, #23]
 8001464:	2b00      	cmp	r3, #0
 8001466:	f040 8083 	bne.w	8001570 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800146e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001472:	f023 0301 	bic.w	r3, r3, #1
 8001476:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a42      	ldr	r2, [pc, #264]	@ (800158c <HAL_ADC_Start+0x16c>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d002      	beq.n	800148e <HAL_ADC_Start+0x6e>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	e000      	b.n	8001490 <HAL_ADC_Start+0x70>
 800148e:	4b40      	ldr	r3, [pc, #256]	@ (8001590 <HAL_ADC_Start+0x170>)
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	6812      	ldr	r2, [r2, #0]
 8001494:	4293      	cmp	r3, r2
 8001496:	d002      	beq.n	800149e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d105      	bne.n	80014aa <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014a2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014b6:	d106      	bne.n	80014c6 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014bc:	f023 0206 	bic.w	r2, r3, #6
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80014c4:	e002      	b.n	80014cc <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	221c      	movs	r2, #28
 80014d2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a2a      	ldr	r2, [pc, #168]	@ (800158c <HAL_ADC_Start+0x16c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d002      	beq.n	80014ec <HAL_ADC_Start+0xcc>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	e000      	b.n	80014ee <HAL_ADC_Start+0xce>
 80014ec:	4b28      	ldr	r3, [pc, #160]	@ (8001590 <HAL_ADC_Start+0x170>)
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	6812      	ldr	r2, [r2, #0]
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d008      	beq.n	8001508 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d005      	beq.n	8001508 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	2b05      	cmp	r3, #5
 8001500:	d002      	beq.n	8001508 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	2b09      	cmp	r3, #9
 8001506:	d114      	bne.n	8001532 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d007      	beq.n	8001526 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800151a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800151e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fded 	bl	800110a <LL_ADC_REG_StartConversion>
 8001530:	e025      	b.n	800157e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001536:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a12      	ldr	r2, [pc, #72]	@ (800158c <HAL_ADC_Start+0x16c>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d002      	beq.n	800154e <HAL_ADC_Start+0x12e>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	e000      	b.n	8001550 <HAL_ADC_Start+0x130>
 800154e:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <HAL_ADC_Start+0x170>)
 8001550:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00f      	beq.n	800157e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001562:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001566:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	655a      	str	r2, [r3, #84]	@ 0x54
 800156e:	e006      	b.n	800157e <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001578:	e001      	b.n	800157e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800157a:	2302      	movs	r3, #2
 800157c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800157e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	50040300 	.word	0x50040300
 800158c:	50040100 	.word	0x50040100
 8001590:	50040000 	.word	0x50040000

08001594 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800159e:	4866      	ldr	r0, [pc, #408]	@ (8001738 <HAL_ADC_PollForConversion+0x1a4>)
 80015a0:	f7ff fd22 	bl	8000fe8 <LL_ADC_GetMultimode>
 80015a4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	2b08      	cmp	r3, #8
 80015ac:	d102      	bne.n	80015b4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80015ae:	2308      	movs	r3, #8
 80015b0:	61fb      	str	r3, [r7, #28]
 80015b2:	e02a      	b.n	800160a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d005      	beq.n	80015c6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	2b05      	cmp	r3, #5
 80015be:	d002      	beq.n	80015c6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	2b09      	cmp	r3, #9
 80015c4:	d111      	bne.n	80015ea <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d007      	beq.n	80015e4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015d8:	f043 0220 	orr.w	r2, r3, #32
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e0a4      	b.n	800172e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80015e4:	2304      	movs	r3, #4
 80015e6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80015e8:	e00f      	b.n	800160a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80015ea:	4853      	ldr	r0, [pc, #332]	@ (8001738 <HAL_ADC_PollForConversion+0x1a4>)
 80015ec:	f7ff fd0a 	bl	8001004 <LL_ADC_GetMultiDMATransfer>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d007      	beq.n	8001606 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015fa:	f043 0220 	orr.w	r2, r3, #32
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e093      	b.n	800172e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001606:	2304      	movs	r3, #4
 8001608:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800160a:	f7ff fb93 	bl	8000d34 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001610:	e021      	b.n	8001656 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001618:	d01d      	beq.n	8001656 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800161a:	f7ff fb8b 	bl	8000d34 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d302      	bcc.n	8001630 <HAL_ADC_PollForConversion+0x9c>
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d112      	bne.n	8001656 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	4013      	ands	r3, r2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10b      	bne.n	8001656 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001642:	f043 0204 	orr.w	r2, r3, #4
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e06b      	b.n	800172e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	4013      	ands	r3, r2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0d6      	beq.n	8001612 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001668:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fc16 	bl	8000ea6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d01c      	beq.n	80016ba <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7e5b      	ldrb	r3, [r3, #25]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d118      	bne.n	80016ba <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	2b08      	cmp	r3, #8
 8001694:	d111      	bne.n	80016ba <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800169a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d105      	bne.n	80016ba <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016b2:	f043 0201 	orr.w	r2, r3, #1
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a1f      	ldr	r2, [pc, #124]	@ (800173c <HAL_ADC_PollForConversion+0x1a8>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d002      	beq.n	80016ca <HAL_ADC_PollForConversion+0x136>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	e000      	b.n	80016cc <HAL_ADC_PollForConversion+0x138>
 80016ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001740 <HAL_ADC_PollForConversion+0x1ac>)
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d008      	beq.n	80016e6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d005      	beq.n	80016e6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	2b05      	cmp	r3, #5
 80016de:	d002      	beq.n	80016e6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	2b09      	cmp	r3, #9
 80016e4:	d104      	bne.n	80016f0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	61bb      	str	r3, [r7, #24]
 80016ee:	e00c      	b.n	800170a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a11      	ldr	r2, [pc, #68]	@ (800173c <HAL_ADC_PollForConversion+0x1a8>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d002      	beq.n	8001700 <HAL_ADC_PollForConversion+0x16c>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	e000      	b.n	8001702 <HAL_ADC_PollForConversion+0x16e>
 8001700:	4b0f      	ldr	r3, [pc, #60]	@ (8001740 <HAL_ADC_PollForConversion+0x1ac>)
 8001702:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	2b08      	cmp	r3, #8
 800170e:	d104      	bne.n	800171a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2208      	movs	r2, #8
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	e008      	b.n	800172c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d103      	bne.n	800172c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	220c      	movs	r2, #12
 800172a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3720      	adds	r7, #32
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	50040300 	.word	0x50040300
 800173c:	50040100 	.word	0x50040100
 8001740:	50040000 	.word	0x50040000

08001744 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	@ 0x28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800177c:	4882      	ldr	r0, [pc, #520]	@ (8001988 <HAL_ADC_IRQHandler+0x228>)
 800177e:	f7ff fc33 	bl	8000fe8 <LL_ADC_GetMultimode>
 8001782:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d017      	beq.n	80017be <HAL_ADC_IRQHandler+0x5e>
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d012      	beq.n	80017be <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800179c:	f003 0310 	and.w	r3, r3, #16
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d105      	bne.n	80017b0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017a8:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 fed3 	bl	800255c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2202      	movs	r2, #2
 80017bc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d004      	beq.n	80017d2 <HAL_ADC_IRQHandler+0x72>
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10a      	bne.n	80017e8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 8083 	beq.w	80018e4 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	f003 0308 	and.w	r3, r3, #8
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d07d      	beq.n	80018e4 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ec:	f003 0310 	and.w	r3, r3, #16
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d105      	bne.n	8001800 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017f8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fb4e 	bl	8000ea6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d062      	beq.n	80018d6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a5d      	ldr	r2, [pc, #372]	@ (800198c <HAL_ADC_IRQHandler+0x22c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d002      	beq.n	8001820 <HAL_ADC_IRQHandler+0xc0>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	e000      	b.n	8001822 <HAL_ADC_IRQHandler+0xc2>
 8001820:	4b5b      	ldr	r3, [pc, #364]	@ (8001990 <HAL_ADC_IRQHandler+0x230>)
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6812      	ldr	r2, [r2, #0]
 8001826:	4293      	cmp	r3, r2
 8001828:	d008      	beq.n	800183c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	2b05      	cmp	r3, #5
 8001834:	d002      	beq.n	800183c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	2b09      	cmp	r3, #9
 800183a:	d104      	bne.n	8001846 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	623b      	str	r3, [r7, #32]
 8001844:	e00c      	b.n	8001860 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a50      	ldr	r2, [pc, #320]	@ (800198c <HAL_ADC_IRQHandler+0x22c>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d002      	beq.n	8001856 <HAL_ADC_IRQHandler+0xf6>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	e000      	b.n	8001858 <HAL_ADC_IRQHandler+0xf8>
 8001856:	4b4e      	ldr	r3, [pc, #312]	@ (8001990 <HAL_ADC_IRQHandler+0x230>)
 8001858:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001860:	6a3b      	ldr	r3, [r7, #32]
 8001862:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d135      	bne.n	80018d6 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	2b08      	cmp	r3, #8
 8001876:	d12e      	bne.n	80018d6 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fc58 	bl	8001132 <LL_ADC_REG_IsConversionOngoing>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d11a      	bne.n	80018be <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 020c 	bic.w	r2, r2, #12
 8001896:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800189c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d112      	bne.n	80018d6 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018b4:	f043 0201 	orr.w	r2, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	655a      	str	r2, [r3, #84]	@ 0x54
 80018bc:	e00b      	b.n	80018d6 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018c2:	f043 0210 	orr.w	r2, r3, #16
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ce:	f043 0201 	orr.w	r2, r3, #1
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 f95c 	bl	8001b94 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	220c      	movs	r2, #12
 80018e2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f003 0320 	and.w	r3, r3, #32
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d004      	beq.n	80018f8 <HAL_ADC_IRQHandler+0x198>
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	f003 0320 	and.w	r3, r3, #32
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10b      	bne.n	8001910 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f000 809f 	beq.w	8001a42 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 8099 	beq.w	8001a42 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001914:	f003 0310 	and.w	r3, r3, #16
 8001918:	2b00      	cmp	r3, #0
 800191a:	d105      	bne.n	8001928 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001920:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff faf9 	bl	8000f24 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001932:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fab4 	bl	8000ea6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800193e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a11      	ldr	r2, [pc, #68]	@ (800198c <HAL_ADC_IRQHandler+0x22c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d002      	beq.n	8001950 <HAL_ADC_IRQHandler+0x1f0>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	e000      	b.n	8001952 <HAL_ADC_IRQHandler+0x1f2>
 8001950:	4b0f      	ldr	r3, [pc, #60]	@ (8001990 <HAL_ADC_IRQHandler+0x230>)
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6812      	ldr	r2, [r2, #0]
 8001956:	4293      	cmp	r3, r2
 8001958:	d008      	beq.n	800196c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	2b06      	cmp	r3, #6
 8001964:	d002      	beq.n	800196c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	2b07      	cmp	r3, #7
 800196a:	d104      	bne.n	8001976 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	623b      	str	r3, [r7, #32]
 8001974:	e013      	b.n	800199e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a04      	ldr	r2, [pc, #16]	@ (800198c <HAL_ADC_IRQHandler+0x22c>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d009      	beq.n	8001994 <HAL_ADC_IRQHandler+0x234>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	e007      	b.n	8001996 <HAL_ADC_IRQHandler+0x236>
 8001986:	bf00      	nop
 8001988:	50040300 	.word	0x50040300
 800198c:	50040100 	.word	0x50040100
 8001990:	50040000 	.word	0x50040000
 8001994:	4b7d      	ldr	r3, [pc, #500]	@ (8001b8c <HAL_ADC_IRQHandler+0x42c>)
 8001996:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d047      	beq.n	8001a34 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80019a4:	6a3b      	ldr	r3, [r7, #32]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d007      	beq.n	80019be <HAL_ADC_IRQHandler+0x25e>
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d03f      	beq.n	8001a34 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d13a      	bne.n	8001a34 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019c8:	2b40      	cmp	r3, #64	@ 0x40
 80019ca:	d133      	bne.n	8001a34 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80019cc:	6a3b      	ldr	r3, [r7, #32]
 80019ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d12e      	bne.n	8001a34 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fbbc 	bl	8001158 <LL_ADC_INJ_IsConversionOngoing>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d11a      	bne.n	8001a1c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80019f4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d112      	bne.n	8001a34 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a12:	f043 0201 	orr.w	r2, r3, #1
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	655a      	str	r2, [r3, #84]	@ 0x54
 8001a1a:	e00b      	b.n	8001a34 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a20:	f043 0210 	orr.w	r2, r3, #16
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a2c:	f043 0201 	orr.w	r2, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 fd69 	bl	800250c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2260      	movs	r2, #96	@ 0x60
 8001a40:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d011      	beq.n	8001a70 <HAL_ADC_IRQHandler+0x310>
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00c      	beq.n	8001a70 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a5a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 f8a0 	bl	8001ba8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2280      	movs	r2, #128	@ 0x80
 8001a6e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d012      	beq.n	8001aa0 <HAL_ADC_IRQHandler+0x340>
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00d      	beq.n	8001aa0 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a88:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 fd4f 	bl	8002534 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a9e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d012      	beq.n	8001ad0 <HAL_ADC_IRQHandler+0x370>
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d00d      	beq.n	8001ad0 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ab8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 fd41 	bl	8002548 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ace:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d036      	beq.n	8001b48 <HAL_ADC_IRQHandler+0x3e8>
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	f003 0310 	and.w	r3, r3, #16
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d031      	beq.n	8001b48 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d102      	bne.n	8001af2 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001aec:	2301      	movs	r3, #1
 8001aee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001af0:	e014      	b.n	8001b1c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d008      	beq.n	8001b0a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001af8:	4825      	ldr	r0, [pc, #148]	@ (8001b90 <HAL_ADC_IRQHandler+0x430>)
 8001afa:	f7ff fa83 	bl	8001004 <LL_ADC_GetMultiDMATransfer>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00b      	beq.n	8001b1c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001b04:	2301      	movs	r3, #1
 8001b06:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b08:	e008      	b.n	8001b1c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d10e      	bne.n	8001b40 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b26:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b32:	f043 0202 	orr.w	r2, r3, #2
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f83e 	bl	8001bbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2210      	movs	r2, #16
 8001b46:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d018      	beq.n	8001b84 <HAL_ADC_IRQHandler+0x424>
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d013      	beq.n	8001b84 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b60:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6c:	f043 0208 	orr.w	r2, r3, #8
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b7c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 fcce 	bl	8002520 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001b84:	bf00      	nop
 8001b86:	3728      	adds	r7, #40	@ 0x28
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	50040000 	.word	0x50040000
 8001b90:	50040300 	.word	0x50040300

08001b94 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b0b6      	sub	sp, #216	@ 0xd8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d101      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x22>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e3c9      	b.n	8002386 <HAL_ADC_ConfigChannel+0x7b6>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fa97 	bl	8001132 <LL_ADC_REG_IsConversionOngoing>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f040 83aa 	bne.w	8002360 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b05      	cmp	r3, #5
 8001c1a:	d824      	bhi.n	8001c66 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	3b02      	subs	r3, #2
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d81b      	bhi.n	8001c5e <HAL_ADC_ConfigChannel+0x8e>
 8001c26:	a201      	add	r2, pc, #4	@ (adr r2, 8001c2c <HAL_ADC_ConfigChannel+0x5c>)
 8001c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2c:	08001c3d 	.word	0x08001c3d
 8001c30:	08001c45 	.word	0x08001c45
 8001c34:	08001c4d 	.word	0x08001c4d
 8001c38:	08001c55 	.word	0x08001c55
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001c3c:	230c      	movs	r3, #12
 8001c3e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001c42:	e010      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001c44:	2312      	movs	r3, #18
 8001c46:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001c4a:	e00c      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001c4c:	2318      	movs	r3, #24
 8001c4e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001c52:	e008      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001c54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001c5c:	e003      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001c5e:	2306      	movs	r3, #6
 8001c60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001c64:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6818      	ldr	r0, [r3, #0]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001c74:	f7ff f92a 	bl	8000ecc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff fa58 	bl	8001132 <LL_ADC_REG_IsConversionOngoing>
 8001c82:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fa64 	bl	8001158 <LL_ADC_INJ_IsConversionOngoing>
 8001c90:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f040 81a4 	bne.w	8001fe6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f040 819f 	bne.w	8001fe6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	6819      	ldr	r1, [r3, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	f7ff f948 	bl	8000f4a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	695a      	ldr	r2, [r3, #20]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	08db      	lsrs	r3, r3, #3
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d00a      	beq.n	8001cf2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6818      	ldr	r0, [r3, #0]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	6919      	ldr	r1, [r3, #16]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001cec:	f7ff f886 	bl	8000dfc <LL_ADC_SetOffset>
 8001cf0:	e179      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff f8a3 	bl	8000e44 <LL_ADC_GetOffsetChannel>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10a      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x14e>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff f898 	bl	8000e44 <LL_ADC_GetOffsetChannel>
 8001d14:	4603      	mov	r3, r0
 8001d16:	0e9b      	lsrs	r3, r3, #26
 8001d18:	f003 021f 	and.w	r2, r3, #31
 8001d1c:	e01e      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x18c>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2100      	movs	r1, #0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff f88d 	bl	8000e44 <LL_ADC_GetOffsetChannel>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001d34:	fa93 f3a3 	rbit	r3, r3
 8001d38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d40:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001d4c:	2320      	movs	r3, #32
 8001d4e:	e004      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001d50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d54:	fab3 f383 	clz	r3, r3
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d105      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x1a4>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	0e9b      	lsrs	r3, r3, #26
 8001d6e:	f003 031f 	and.w	r3, r3, #31
 8001d72:	e018      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1d6>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d80:	fa93 f3a3 	rbit	r3, r3
 8001d84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001d88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001d90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001d98:	2320      	movs	r3, #32
 8001d9a:	e004      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001d9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d106      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2200      	movs	r2, #0
 8001db0:	2100      	movs	r1, #0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff f85c 	bl	8000e70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff f840 	bl	8000e44 <LL_ADC_GetOffsetChannel>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10a      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x214>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff f835 	bl	8000e44 <LL_ADC_GetOffsetChannel>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	0e9b      	lsrs	r3, r3, #26
 8001dde:	f003 021f 	and.w	r2, r3, #31
 8001de2:	e01e      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x252>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2101      	movs	r1, #1
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff f82a 	bl	8000e44 <LL_ADC_GetOffsetChannel>
 8001df0:	4603      	mov	r3, r0
 8001df2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001dfa:	fa93 f3a3 	rbit	r3, r3
 8001dfe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001e02:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001e0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001e12:	2320      	movs	r3, #32
 8001e14:	e004      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001e16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e1a:	fab3 f383 	clz	r3, r3
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d105      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x26a>
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	0e9b      	lsrs	r3, r3, #26
 8001e34:	f003 031f 	and.w	r3, r3, #31
 8001e38:	e018      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x29c>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001e46:	fa93 f3a3 	rbit	r3, r3
 8001e4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001e4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e52:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001e56:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001e5e:	2320      	movs	r3, #32
 8001e60:	e004      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001e62:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e66:	fab3 f383 	clz	r3, r3
 8001e6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d106      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2200      	movs	r2, #0
 8001e76:	2101      	movs	r1, #1
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fff9 	bl	8000e70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2102      	movs	r1, #2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe ffdd 	bl	8000e44 <LL_ADC_GetOffsetChannel>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10a      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x2da>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2102      	movs	r1, #2
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe ffd2 	bl	8000e44 <LL_ADC_GetOffsetChannel>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	0e9b      	lsrs	r3, r3, #26
 8001ea4:	f003 021f 	and.w	r2, r3, #31
 8001ea8:	e01e      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x318>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2102      	movs	r1, #2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe ffc7 	bl	8000e44 <LL_ADC_GetOffsetChannel>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ec0:	fa93 f3a3 	rbit	r3, r3
 8001ec4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001ec8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ecc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001ed0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001ed8:	2320      	movs	r3, #32
 8001eda:	e004      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001edc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ee0:	fab3 f383 	clz	r3, r3
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d105      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x330>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	0e9b      	lsrs	r3, r3, #26
 8001efa:	f003 031f 	and.w	r3, r3, #31
 8001efe:	e014      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x35a>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001f08:	fa93 f3a3 	rbit	r3, r3
 8001f0c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001f0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001f14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001f1c:	2320      	movs	r3, #32
 8001f1e:	e004      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001f20:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f24:	fab3 f383 	clz	r3, r3
 8001f28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d106      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2200      	movs	r2, #0
 8001f34:	2102      	movs	r1, #2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe ff9a 	bl	8000e70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2103      	movs	r1, #3
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe ff7e 	bl	8000e44 <LL_ADC_GetOffsetChannel>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10a      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x398>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2103      	movs	r1, #3
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7fe ff73 	bl	8000e44 <LL_ADC_GetOffsetChannel>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	0e9b      	lsrs	r3, r3, #26
 8001f62:	f003 021f 	and.w	r2, r3, #31
 8001f66:	e017      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x3c8>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2103      	movs	r1, #3
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe ff68 	bl	8000e44 <LL_ADC_GetOffsetChannel>
 8001f74:	4603      	mov	r3, r0
 8001f76:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f78:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f7a:	fa93 f3a3 	rbit	r3, r3
 8001f7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001f80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f82:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001f84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001f8a:	2320      	movs	r3, #32
 8001f8c:	e003      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001f8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f90:	fab3 f383 	clz	r3, r3
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d105      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x3e0>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	0e9b      	lsrs	r3, r3, #26
 8001faa:	f003 031f 	and.w	r3, r3, #31
 8001fae:	e011      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x404>
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001fb8:	fa93 f3a3 	rbit	r3, r3
 8001fbc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001fbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001fc0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001fc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001fc8:	2320      	movs	r3, #32
 8001fca:	e003      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001fcc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fce:	fab3 f383 	clz	r3, r3
 8001fd2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d106      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2103      	movs	r1, #3
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe ff45 	bl	8000e70 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff f87a 	bl	80010e4 <LL_ADC_IsEnabled>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f040 8140 	bne.w	8002278 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6818      	ldr	r0, [r3, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	6819      	ldr	r1, [r3, #0]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	461a      	mov	r2, r3
 8002006:	f7fe ffcb 	bl	8000fa0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	4a8f      	ldr	r2, [pc, #572]	@ (800224c <HAL_ADC_ConfigChannel+0x67c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	f040 8131 	bne.w	8002278 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10b      	bne.n	800203e <HAL_ADC_ConfigChannel+0x46e>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	0e9b      	lsrs	r3, r3, #26
 800202c:	3301      	adds	r3, #1
 800202e:	f003 031f 	and.w	r3, r3, #31
 8002032:	2b09      	cmp	r3, #9
 8002034:	bf94      	ite	ls
 8002036:	2301      	movls	r3, #1
 8002038:	2300      	movhi	r3, #0
 800203a:	b2db      	uxtb	r3, r3
 800203c:	e019      	b.n	8002072 <HAL_ADC_ConfigChannel+0x4a2>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800204c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800204e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002050:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002056:	2320      	movs	r3, #32
 8002058:	e003      	b.n	8002062 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800205a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800205c:	fab3 f383 	clz	r3, r3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	3301      	adds	r3, #1
 8002064:	f003 031f 	and.w	r3, r3, #31
 8002068:	2b09      	cmp	r3, #9
 800206a:	bf94      	ite	ls
 800206c:	2301      	movls	r3, #1
 800206e:	2300      	movhi	r3, #0
 8002070:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002072:	2b00      	cmp	r3, #0
 8002074:	d079      	beq.n	800216a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207e:	2b00      	cmp	r3, #0
 8002080:	d107      	bne.n	8002092 <HAL_ADC_ConfigChannel+0x4c2>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	0e9b      	lsrs	r3, r3, #26
 8002088:	3301      	adds	r3, #1
 800208a:	069b      	lsls	r3, r3, #26
 800208c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002090:	e015      	b.n	80020be <HAL_ADC_ConfigChannel+0x4ee>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002098:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800209a:	fa93 f3a3 	rbit	r3, r3
 800209e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80020a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020a2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80020a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80020aa:	2320      	movs	r3, #32
 80020ac:	e003      	b.n	80020b6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80020ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020b0:	fab3 f383 	clz	r3, r3
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	3301      	adds	r3, #1
 80020b8:	069b      	lsls	r3, r3, #26
 80020ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d109      	bne.n	80020de <HAL_ADC_ConfigChannel+0x50e>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	0e9b      	lsrs	r3, r3, #26
 80020d0:	3301      	adds	r3, #1
 80020d2:	f003 031f 	and.w	r3, r3, #31
 80020d6:	2101      	movs	r1, #1
 80020d8:	fa01 f303 	lsl.w	r3, r1, r3
 80020dc:	e017      	b.n	800210e <HAL_ADC_ConfigChannel+0x53e>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020e6:	fa93 f3a3 	rbit	r3, r3
 80020ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80020ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020ee:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80020f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80020f6:	2320      	movs	r3, #32
 80020f8:	e003      	b.n	8002102 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80020fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020fc:	fab3 f383 	clz	r3, r3
 8002100:	b2db      	uxtb	r3, r3
 8002102:	3301      	adds	r3, #1
 8002104:	f003 031f 	and.w	r3, r3, #31
 8002108:	2101      	movs	r1, #1
 800210a:	fa01 f303 	lsl.w	r3, r1, r3
 800210e:	ea42 0103 	orr.w	r1, r2, r3
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10a      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x564>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	0e9b      	lsrs	r3, r3, #26
 8002124:	3301      	adds	r3, #1
 8002126:	f003 021f 	and.w	r2, r3, #31
 800212a:	4613      	mov	r3, r2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4413      	add	r3, r2
 8002130:	051b      	lsls	r3, r3, #20
 8002132:	e018      	b.n	8002166 <HAL_ADC_ConfigChannel+0x596>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800213c:	fa93 f3a3 	rbit	r3, r3
 8002140:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002144:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800214c:	2320      	movs	r3, #32
 800214e:	e003      	b.n	8002158 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002152:	fab3 f383 	clz	r3, r3
 8002156:	b2db      	uxtb	r3, r3
 8002158:	3301      	adds	r3, #1
 800215a:	f003 021f 	and.w	r2, r3, #31
 800215e:	4613      	mov	r3, r2
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	4413      	add	r3, r2
 8002164:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002166:	430b      	orrs	r3, r1
 8002168:	e081      	b.n	800226e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002172:	2b00      	cmp	r3, #0
 8002174:	d107      	bne.n	8002186 <HAL_ADC_ConfigChannel+0x5b6>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	0e9b      	lsrs	r3, r3, #26
 800217c:	3301      	adds	r3, #1
 800217e:	069b      	lsls	r3, r3, #26
 8002180:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002184:	e015      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x5e2>
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800218e:	fa93 f3a3 	rbit	r3, r3
 8002192:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002196:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800219e:	2320      	movs	r3, #32
 80021a0:	e003      	b.n	80021aa <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80021a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021a4:	fab3 f383 	clz	r3, r3
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	3301      	adds	r3, #1
 80021ac:	069b      	lsls	r3, r3, #26
 80021ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x602>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	0e9b      	lsrs	r3, r3, #26
 80021c4:	3301      	adds	r3, #1
 80021c6:	f003 031f 	and.w	r3, r3, #31
 80021ca:	2101      	movs	r1, #1
 80021cc:	fa01 f303 	lsl.w	r3, r1, r3
 80021d0:	e017      	b.n	8002202 <HAL_ADC_ConfigChannel+0x632>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	fa93 f3a3 	rbit	r3, r3
 80021de:	61bb      	str	r3, [r7, #24]
  return result;
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80021e4:	6a3b      	ldr	r3, [r7, #32]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80021ea:	2320      	movs	r3, #32
 80021ec:	e003      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80021ee:	6a3b      	ldr	r3, [r7, #32]
 80021f0:	fab3 f383 	clz	r3, r3
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	3301      	adds	r3, #1
 80021f8:	f003 031f 	and.w	r3, r3, #31
 80021fc:	2101      	movs	r1, #1
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	ea42 0103 	orr.w	r1, r2, r3
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10d      	bne.n	800222e <HAL_ADC_ConfigChannel+0x65e>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	0e9b      	lsrs	r3, r3, #26
 8002218:	3301      	adds	r3, #1
 800221a:	f003 021f 	and.w	r2, r3, #31
 800221e:	4613      	mov	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4413      	add	r3, r2
 8002224:	3b1e      	subs	r3, #30
 8002226:	051b      	lsls	r3, r3, #20
 8002228:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800222c:	e01e      	b.n	800226c <HAL_ADC_ConfigChannel+0x69c>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	fa93 f3a3 	rbit	r3, r3
 800223a:	60fb      	str	r3, [r7, #12]
  return result;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d104      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002246:	2320      	movs	r3, #32
 8002248:	e006      	b.n	8002258 <HAL_ADC_ConfigChannel+0x688>
 800224a:	bf00      	nop
 800224c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	fab3 f383 	clz	r3, r3
 8002256:	b2db      	uxtb	r3, r3
 8002258:	3301      	adds	r3, #1
 800225a:	f003 021f 	and.w	r2, r3, #31
 800225e:	4613      	mov	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4413      	add	r3, r2
 8002264:	3b1e      	subs	r3, #30
 8002266:	051b      	lsls	r3, r3, #20
 8002268:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800226c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002272:	4619      	mov	r1, r3
 8002274:	f7fe fe69 	bl	8000f4a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b44      	ldr	r3, [pc, #272]	@ (8002390 <HAL_ADC_ConfigChannel+0x7c0>)
 800227e:	4013      	ands	r3, r2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d07a      	beq.n	800237a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002284:	4843      	ldr	r0, [pc, #268]	@ (8002394 <HAL_ADC_ConfigChannel+0x7c4>)
 8002286:	f7fe fdab 	bl	8000de0 <LL_ADC_GetCommonPathInternalCh>
 800228a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a41      	ldr	r2, [pc, #260]	@ (8002398 <HAL_ADC_ConfigChannel+0x7c8>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d12c      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002298:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800229c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d126      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a3c      	ldr	r2, [pc, #240]	@ (800239c <HAL_ADC_ConfigChannel+0x7cc>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d004      	beq.n	80022b8 <HAL_ADC_ConfigChannel+0x6e8>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a3b      	ldr	r2, [pc, #236]	@ (80023a0 <HAL_ADC_ConfigChannel+0x7d0>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d15d      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022c0:	4619      	mov	r1, r3
 80022c2:	4834      	ldr	r0, [pc, #208]	@ (8002394 <HAL_ADC_ConfigChannel+0x7c4>)
 80022c4:	f7fe fd79 	bl	8000dba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022c8:	4b36      	ldr	r3, [pc, #216]	@ (80023a4 <HAL_ADC_ConfigChannel+0x7d4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	099b      	lsrs	r3, r3, #6
 80022ce:	4a36      	ldr	r2, [pc, #216]	@ (80023a8 <HAL_ADC_ConfigChannel+0x7d8>)
 80022d0:	fba2 2303 	umull	r2, r3, r2, r3
 80022d4:	099b      	lsrs	r3, r3, #6
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	4613      	mov	r3, r2
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	4413      	add	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80022e2:	e002      	b.n	80022ea <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1f9      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022f0:	e040      	b.n	8002374 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a2d      	ldr	r2, [pc, #180]	@ (80023ac <HAL_ADC_ConfigChannel+0x7dc>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d118      	bne.n	800232e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002300:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d112      	bne.n	800232e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a23      	ldr	r2, [pc, #140]	@ (800239c <HAL_ADC_ConfigChannel+0x7cc>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d004      	beq.n	800231c <HAL_ADC_ConfigChannel+0x74c>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a22      	ldr	r2, [pc, #136]	@ (80023a0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d12d      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800231c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002320:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002324:	4619      	mov	r1, r3
 8002326:	481b      	ldr	r0, [pc, #108]	@ (8002394 <HAL_ADC_ConfigChannel+0x7c4>)
 8002328:	f7fe fd47 	bl	8000dba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800232c:	e024      	b.n	8002378 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a1f      	ldr	r2, [pc, #124]	@ (80023b0 <HAL_ADC_ConfigChannel+0x7e0>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d120      	bne.n	800237a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002338:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800233c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d11a      	bne.n	800237a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a14      	ldr	r2, [pc, #80]	@ (800239c <HAL_ADC_ConfigChannel+0x7cc>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d115      	bne.n	800237a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800234e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002352:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002356:	4619      	mov	r1, r3
 8002358:	480e      	ldr	r0, [pc, #56]	@ (8002394 <HAL_ADC_ConfigChannel+0x7c4>)
 800235a:	f7fe fd2e 	bl	8000dba <LL_ADC_SetCommonPathInternalCh>
 800235e:	e00c      	b.n	800237a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002364:	f043 0220 	orr.w	r2, r3, #32
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002372:	e002      	b.n	800237a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002374:	bf00      	nop
 8002376:	e000      	b.n	800237a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002378:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002382:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002386:	4618      	mov	r0, r3
 8002388:	37d8      	adds	r7, #216	@ 0xd8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	80080000 	.word	0x80080000
 8002394:	50040300 	.word	0x50040300
 8002398:	c7520000 	.word	0xc7520000
 800239c:	50040000 	.word	0x50040000
 80023a0:	50040200 	.word	0x50040200
 80023a4:	20000000 	.word	0x20000000
 80023a8:	053e2d63 	.word	0x053e2d63
 80023ac:	cb840000 	.word	0xcb840000
 80023b0:	80000001 	.word	0x80000001

080023b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80023bc:	2300      	movs	r3, #0
 80023be:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe fe8d 	bl	80010e4 <LL_ADC_IsEnabled>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d169      	bne.n	80024a4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	4b36      	ldr	r3, [pc, #216]	@ (80024b0 <ADC_Enable+0xfc>)
 80023d8:	4013      	ands	r3, r2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00d      	beq.n	80023fa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e2:	f043 0210 	orr.w	r2, r3, #16
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ee:	f043 0201 	orr.w	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e055      	b.n	80024a6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe fe5c 	bl	80010bc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002404:	482b      	ldr	r0, [pc, #172]	@ (80024b4 <ADC_Enable+0x100>)
 8002406:	f7fe fceb 	bl	8000de0 <LL_ADC_GetCommonPathInternalCh>
 800240a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800240c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002410:	2b00      	cmp	r3, #0
 8002412:	d013      	beq.n	800243c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002414:	4b28      	ldr	r3, [pc, #160]	@ (80024b8 <ADC_Enable+0x104>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	099b      	lsrs	r3, r3, #6
 800241a:	4a28      	ldr	r2, [pc, #160]	@ (80024bc <ADC_Enable+0x108>)
 800241c:	fba2 2303 	umull	r2, r3, r2, r3
 8002420:	099b      	lsrs	r3, r3, #6
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	4613      	mov	r3, r2
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	4413      	add	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800242e:	e002      	b.n	8002436 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	3b01      	subs	r3, #1
 8002434:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1f9      	bne.n	8002430 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800243c:	f7fe fc7a 	bl	8000d34 <HAL_GetTick>
 8002440:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002442:	e028      	b.n	8002496 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe fe4b 	bl	80010e4 <LL_ADC_IsEnabled>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d104      	bne.n	800245e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f7fe fe2f 	bl	80010bc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800245e:	f7fe fc69 	bl	8000d34 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d914      	bls.n	8002496 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b01      	cmp	r3, #1
 8002478:	d00d      	beq.n	8002496 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800247e:	f043 0210 	orr.w	r2, r3, #16
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248a:	f043 0201 	orr.w	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e007      	b.n	80024a6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d1cf      	bne.n	8002444 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	8000003f 	.word	0x8000003f
 80024b4:	50040300 	.word	0x50040300
 80024b8:	20000000 	.word	0x20000000
 80024bc:	053e2d63 	.word	0x053e2d63

080024c0 <LL_ADC_IsEnabled>:
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d101      	bne.n	80024d8 <LL_ADC_IsEnabled+0x18>
 80024d4:	2301      	movs	r3, #1
 80024d6:	e000      	b.n	80024da <LL_ADC_IsEnabled+0x1a>
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <LL_ADC_REG_IsConversionOngoing>:
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d101      	bne.n	80024fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002570:	b590      	push	{r4, r7, lr}
 8002572:	b09f      	sub	sp, #124	@ 0x7c
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800258a:	2302      	movs	r3, #2
 800258c:	e093      	b.n	80026b6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002596:	2300      	movs	r3, #0
 8002598:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800259a:	2300      	movs	r3, #0
 800259c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a47      	ldr	r2, [pc, #284]	@ (80026c0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d102      	bne.n	80025ae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80025a8:	4b46      	ldr	r3, [pc, #280]	@ (80026c4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80025aa:	60bb      	str	r3, [r7, #8]
 80025ac:	e001      	b.n	80025b2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80025ae:	2300      	movs	r3, #0
 80025b0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10b      	bne.n	80025d0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025bc:	f043 0220 	orr.w	r2, r3, #32
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e072      	b.n	80026b6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff ff87 	bl	80024e6 <LL_ADC_REG_IsConversionOngoing>
 80025d8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff ff81 	bl	80024e6 <LL_ADC_REG_IsConversionOngoing>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d154      	bne.n	8002694 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80025ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d151      	bne.n	8002694 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80025f0:	4b35      	ldr	r3, [pc, #212]	@ (80026c8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80025f2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d02c      	beq.n	8002656 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80025fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800260e:	035b      	lsls	r3, r3, #13
 8002610:	430b      	orrs	r3, r1
 8002612:	431a      	orrs	r2, r3
 8002614:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002616:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002618:	4829      	ldr	r0, [pc, #164]	@ (80026c0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800261a:	f7ff ff51 	bl	80024c0 <LL_ADC_IsEnabled>
 800261e:	4604      	mov	r4, r0
 8002620:	4828      	ldr	r0, [pc, #160]	@ (80026c4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002622:	f7ff ff4d 	bl	80024c0 <LL_ADC_IsEnabled>
 8002626:	4603      	mov	r3, r0
 8002628:	431c      	orrs	r4, r3
 800262a:	4828      	ldr	r0, [pc, #160]	@ (80026cc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800262c:	f7ff ff48 	bl	80024c0 <LL_ADC_IsEnabled>
 8002630:	4603      	mov	r3, r0
 8002632:	4323      	orrs	r3, r4
 8002634:	2b00      	cmp	r3, #0
 8002636:	d137      	bne.n	80026a8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002638:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002640:	f023 030f 	bic.w	r3, r3, #15
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	6811      	ldr	r1, [r2, #0]
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	6892      	ldr	r2, [r2, #8]
 800264c:	430a      	orrs	r2, r1
 800264e:	431a      	orrs	r2, r3
 8002650:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002652:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002654:	e028      	b.n	80026a8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002656:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800265e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002660:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002662:	4817      	ldr	r0, [pc, #92]	@ (80026c0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002664:	f7ff ff2c 	bl	80024c0 <LL_ADC_IsEnabled>
 8002668:	4604      	mov	r4, r0
 800266a:	4816      	ldr	r0, [pc, #88]	@ (80026c4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800266c:	f7ff ff28 	bl	80024c0 <LL_ADC_IsEnabled>
 8002670:	4603      	mov	r3, r0
 8002672:	431c      	orrs	r4, r3
 8002674:	4815      	ldr	r0, [pc, #84]	@ (80026cc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002676:	f7ff ff23 	bl	80024c0 <LL_ADC_IsEnabled>
 800267a:	4603      	mov	r3, r0
 800267c:	4323      	orrs	r3, r4
 800267e:	2b00      	cmp	r3, #0
 8002680:	d112      	bne.n	80026a8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002682:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800268a:	f023 030f 	bic.w	r3, r3, #15
 800268e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002690:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002692:	e009      	b.n	80026a8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002698:	f043 0220 	orr.w	r2, r3, #32
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80026a6:	e000      	b.n	80026aa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80026a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80026b2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	377c      	adds	r7, #124	@ 0x7c
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd90      	pop	{r4, r7, pc}
 80026be:	bf00      	nop
 80026c0:	50040000 	.word	0x50040000
 80026c4:	50040100 	.word	0x50040100
 80026c8:	50040300 	.word	0x50040300
 80026cc:	50040200 	.word	0x50040200

080026d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002714 <__NVIC_SetPriorityGrouping+0x44>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026ec:	4013      	ands	r3, r2
 80026ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002702:	4a04      	ldr	r2, [pc, #16]	@ (8002714 <__NVIC_SetPriorityGrouping+0x44>)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	60d3      	str	r3, [r2, #12]
}
 8002708:	bf00      	nop
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800271c:	4b04      	ldr	r3, [pc, #16]	@ (8002730 <__NVIC_GetPriorityGrouping+0x18>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	0a1b      	lsrs	r3, r3, #8
 8002722:	f003 0307 	and.w	r3, r3, #7
}
 8002726:	4618      	mov	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800273e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002742:	2b00      	cmp	r3, #0
 8002744:	db0b      	blt.n	800275e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	f003 021f 	and.w	r2, r3, #31
 800274c:	4907      	ldr	r1, [pc, #28]	@ (800276c <__NVIC_EnableIRQ+0x38>)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	2001      	movs	r0, #1
 8002756:	fa00 f202 	lsl.w	r2, r0, r2
 800275a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	e000e100 	.word	0xe000e100

08002770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	6039      	str	r1, [r7, #0]
 800277a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002780:	2b00      	cmp	r3, #0
 8002782:	db0a      	blt.n	800279a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	b2da      	uxtb	r2, r3
 8002788:	490c      	ldr	r1, [pc, #48]	@ (80027bc <__NVIC_SetPriority+0x4c>)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	0112      	lsls	r2, r2, #4
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	440b      	add	r3, r1
 8002794:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002798:	e00a      	b.n	80027b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	b2da      	uxtb	r2, r3
 800279e:	4908      	ldr	r1, [pc, #32]	@ (80027c0 <__NVIC_SetPriority+0x50>)
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	3b04      	subs	r3, #4
 80027a8:	0112      	lsls	r2, r2, #4
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	440b      	add	r3, r1
 80027ae:	761a      	strb	r2, [r3, #24]
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	e000e100 	.word	0xe000e100
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b089      	sub	sp, #36	@ 0x24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f1c3 0307 	rsb	r3, r3, #7
 80027de:	2b04      	cmp	r3, #4
 80027e0:	bf28      	it	cs
 80027e2:	2304      	movcs	r3, #4
 80027e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3304      	adds	r3, #4
 80027ea:	2b06      	cmp	r3, #6
 80027ec:	d902      	bls.n	80027f4 <NVIC_EncodePriority+0x30>
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3b03      	subs	r3, #3
 80027f2:	e000      	b.n	80027f6 <NVIC_EncodePriority+0x32>
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f8:	f04f 32ff 	mov.w	r2, #4294967295
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43da      	mvns	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	401a      	ands	r2, r3
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800280c:	f04f 31ff 	mov.w	r1, #4294967295
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	fa01 f303 	lsl.w	r3, r1, r3
 8002816:	43d9      	mvns	r1, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800281c:	4313      	orrs	r3, r2
         );
}
 800281e:	4618      	mov	r0, r3
 8002820:	3724      	adds	r7, #36	@ 0x24
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
	...

0800282c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3b01      	subs	r3, #1
 8002838:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800283c:	d301      	bcc.n	8002842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800283e:	2301      	movs	r3, #1
 8002840:	e00f      	b.n	8002862 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002842:	4a0a      	ldr	r2, [pc, #40]	@ (800286c <SysTick_Config+0x40>)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3b01      	subs	r3, #1
 8002848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800284a:	210f      	movs	r1, #15
 800284c:	f04f 30ff 	mov.w	r0, #4294967295
 8002850:	f7ff ff8e 	bl	8002770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002854:	4b05      	ldr	r3, [pc, #20]	@ (800286c <SysTick_Config+0x40>)
 8002856:	2200      	movs	r2, #0
 8002858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800285a:	4b04      	ldr	r3, [pc, #16]	@ (800286c <SysTick_Config+0x40>)
 800285c:	2207      	movs	r2, #7
 800285e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	e000e010 	.word	0xe000e010

08002870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff ff29 	bl	80026d0 <__NVIC_SetPriorityGrouping>
}
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b086      	sub	sp, #24
 800288a:	af00      	add	r7, sp, #0
 800288c:	4603      	mov	r3, r0
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	607a      	str	r2, [r7, #4]
 8002892:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002898:	f7ff ff3e 	bl	8002718 <__NVIC_GetPriorityGrouping>
 800289c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	68b9      	ldr	r1, [r7, #8]
 80028a2:	6978      	ldr	r0, [r7, #20]
 80028a4:	f7ff ff8e 	bl	80027c4 <NVIC_EncodePriority>
 80028a8:	4602      	mov	r2, r0
 80028aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ae:	4611      	mov	r1, r2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff5d 	bl	8002770 <__NVIC_SetPriority>
}
 80028b6:	bf00      	nop
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	4603      	mov	r3, r0
 80028c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff31 	bl	8002734 <__NVIC_EnableIRQ>
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff ffa2 	bl	800282c <SysTick_Config>
 80028e8:	4603      	mov	r3, r0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b085      	sub	sp, #20
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d008      	beq.n	800291c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2204      	movs	r2, #4
 800290e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e022      	b.n	8002962 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 020e 	bic.w	r2, r2, #14
 800292a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0201 	bic.w	r2, r2, #1
 800293a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002940:	f003 021c 	and.w	r2, r3, #28
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002948:	2101      	movs	r1, #1
 800294a:	fa01 f202 	lsl.w	r2, r1, r2
 800294e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002960:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002962:	4618      	mov	r0, r3
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d005      	beq.n	8002992 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2204      	movs	r2, #4
 800298a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	73fb      	strb	r3, [r7, #15]
 8002990:	e029      	b.n	80029e6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 020e 	bic.w	r2, r2, #14
 80029a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0201 	bic.w	r2, r2, #1
 80029b0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b6:	f003 021c 	and.w	r2, r3, #28
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	2101      	movs	r1, #1
 80029c0:	fa01 f202 	lsl.w	r2, r1, r2
 80029c4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	4798      	blx	r3
    }
  }
  return status;
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029fe:	e17f      	b.n	8002d00 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	2101      	movs	r1, #1
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 8171 	beq.w	8002cfa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d005      	beq.n	8002a30 <HAL_GPIO_Init+0x40>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d130      	bne.n	8002a92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a66:	2201      	movs	r2, #1
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	4013      	ands	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	091b      	lsrs	r3, r3, #4
 8002a7c:	f003 0201 	and.w	r2, r3, #1
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	d118      	bne.n	8002ad0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	08db      	lsrs	r3, r3, #3
 8002aba:	f003 0201 	and.w	r2, r3, #1
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 0303 	and.w	r3, r3, #3
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d017      	beq.n	8002b0c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	4013      	ands	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0303 	and.w	r3, r3, #3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d123      	bne.n	8002b60 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	08da      	lsrs	r2, r3, #3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3208      	adds	r2, #8
 8002b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b24:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	220f      	movs	r2, #15
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	08da      	lsrs	r2, r3, #3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3208      	adds	r2, #8
 8002b5a:	6939      	ldr	r1, [r7, #16]
 8002b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4013      	ands	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 0203 	and.w	r2, r3, #3
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80ac 	beq.w	8002cfa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba2:	4b5f      	ldr	r3, [pc, #380]	@ (8002d20 <HAL_GPIO_Init+0x330>)
 8002ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ba6:	4a5e      	ldr	r2, [pc, #376]	@ (8002d20 <HAL_GPIO_Init+0x330>)
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bae:	4b5c      	ldr	r3, [pc, #368]	@ (8002d20 <HAL_GPIO_Init+0x330>)
 8002bb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	60bb      	str	r3, [r7, #8]
 8002bb8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bba:	4a5a      	ldr	r2, [pc, #360]	@ (8002d24 <HAL_GPIO_Init+0x334>)
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	089b      	lsrs	r3, r3, #2
 8002bc0:	3302      	adds	r3, #2
 8002bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	220f      	movs	r2, #15
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002be4:	d025      	beq.n	8002c32 <HAL_GPIO_Init+0x242>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a4f      	ldr	r2, [pc, #316]	@ (8002d28 <HAL_GPIO_Init+0x338>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d01f      	beq.n	8002c2e <HAL_GPIO_Init+0x23e>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a4e      	ldr	r2, [pc, #312]	@ (8002d2c <HAL_GPIO_Init+0x33c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d019      	beq.n	8002c2a <HAL_GPIO_Init+0x23a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a4d      	ldr	r2, [pc, #308]	@ (8002d30 <HAL_GPIO_Init+0x340>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d013      	beq.n	8002c26 <HAL_GPIO_Init+0x236>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a4c      	ldr	r2, [pc, #304]	@ (8002d34 <HAL_GPIO_Init+0x344>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d00d      	beq.n	8002c22 <HAL_GPIO_Init+0x232>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a4b      	ldr	r2, [pc, #300]	@ (8002d38 <HAL_GPIO_Init+0x348>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d007      	beq.n	8002c1e <HAL_GPIO_Init+0x22e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a4a      	ldr	r2, [pc, #296]	@ (8002d3c <HAL_GPIO_Init+0x34c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d101      	bne.n	8002c1a <HAL_GPIO_Init+0x22a>
 8002c16:	2306      	movs	r3, #6
 8002c18:	e00c      	b.n	8002c34 <HAL_GPIO_Init+0x244>
 8002c1a:	2307      	movs	r3, #7
 8002c1c:	e00a      	b.n	8002c34 <HAL_GPIO_Init+0x244>
 8002c1e:	2305      	movs	r3, #5
 8002c20:	e008      	b.n	8002c34 <HAL_GPIO_Init+0x244>
 8002c22:	2304      	movs	r3, #4
 8002c24:	e006      	b.n	8002c34 <HAL_GPIO_Init+0x244>
 8002c26:	2303      	movs	r3, #3
 8002c28:	e004      	b.n	8002c34 <HAL_GPIO_Init+0x244>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e002      	b.n	8002c34 <HAL_GPIO_Init+0x244>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <HAL_GPIO_Init+0x244>
 8002c32:	2300      	movs	r3, #0
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	f002 0203 	and.w	r2, r2, #3
 8002c3a:	0092      	lsls	r2, r2, #2
 8002c3c:	4093      	lsls	r3, r2
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c44:	4937      	ldr	r1, [pc, #220]	@ (8002d24 <HAL_GPIO_Init+0x334>)
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	089b      	lsrs	r3, r3, #2
 8002c4a:	3302      	adds	r3, #2
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c52:	4b3b      	ldr	r3, [pc, #236]	@ (8002d40 <HAL_GPIO_Init+0x350>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c76:	4a32      	ldr	r2, [pc, #200]	@ (8002d40 <HAL_GPIO_Init+0x350>)
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c7c:	4b30      	ldr	r3, [pc, #192]	@ (8002d40 <HAL_GPIO_Init+0x350>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ca0:	4a27      	ldr	r2, [pc, #156]	@ (8002d40 <HAL_GPIO_Init+0x350>)
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ca6:	4b26      	ldr	r3, [pc, #152]	@ (8002d40 <HAL_GPIO_Init+0x350>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cca:	4a1d      	ldr	r2, [pc, #116]	@ (8002d40 <HAL_GPIO_Init+0x350>)
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d40 <HAL_GPIO_Init+0x350>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cf4:	4a12      	ldr	r2, [pc, #72]	@ (8002d40 <HAL_GPIO_Init+0x350>)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	fa22 f303 	lsr.w	r3, r2, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f47f ae78 	bne.w	8002a00 <HAL_GPIO_Init+0x10>
  }
}
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop
 8002d14:	371c      	adds	r7, #28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40021000 	.word	0x40021000
 8002d24:	40010000 	.word	0x40010000
 8002d28:	48000400 	.word	0x48000400
 8002d2c:	48000800 	.word	0x48000800
 8002d30:	48000c00 	.word	0x48000c00
 8002d34:	48001000 	.word	0x48001000
 8002d38:	48001400 	.word	0x48001400
 8002d3c:	48001800 	.word	0x48001800
 8002d40:	40010400 	.word	0x40010400

08002d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	807b      	strh	r3, [r7, #2]
 8002d50:	4613      	mov	r3, r2
 8002d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d54:	787b      	ldrb	r3, [r7, #1]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d5a:	887a      	ldrh	r2, [r7, #2]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d60:	e002      	b.n	8002d68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d62:	887a      	ldrh	r2, [r7, #2]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d7e:	4b08      	ldr	r3, [pc, #32]	@ (8002da0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d80:	695a      	ldr	r2, [r3, #20]
 8002d82:	88fb      	ldrh	r3, [r7, #6]
 8002d84:	4013      	ands	r3, r2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d006      	beq.n	8002d98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d8a:	4a05      	ldr	r2, [pc, #20]	@ (8002da0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d8c:	88fb      	ldrh	r3, [r7, #6]
 8002d8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d90:	88fb      	ldrh	r3, [r7, #6]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 f806 	bl	8002da4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d98:	bf00      	nop
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40010400 	.word	0x40010400

08002da4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
	...

08002dbc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002dc0:	4b04      	ldr	r3, [pc, #16]	@ (8002dd4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40007000 	.word	0x40007000

08002dd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002de6:	d130      	bne.n	8002e4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002de8:	4b23      	ldr	r3, [pc, #140]	@ (8002e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002df0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002df4:	d038      	beq.n	8002e68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002df6:	4b20      	ldr	r3, [pc, #128]	@ (8002e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8002e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e04:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e06:	4b1d      	ldr	r3, [pc, #116]	@ (8002e7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2232      	movs	r2, #50	@ 0x32
 8002e0c:	fb02 f303 	mul.w	r3, r2, r3
 8002e10:	4a1b      	ldr	r2, [pc, #108]	@ (8002e80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	0c9b      	lsrs	r3, r3, #18
 8002e18:	3301      	adds	r3, #1
 8002e1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e1c:	e002      	b.n	8002e24 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	3b01      	subs	r3, #1
 8002e22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e24:	4b14      	ldr	r3, [pc, #80]	@ (8002e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e30:	d102      	bne.n	8002e38 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1f2      	bne.n	8002e1e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e38:	4b0f      	ldr	r3, [pc, #60]	@ (8002e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e44:	d110      	bne.n	8002e68 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e00f      	b.n	8002e6a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e56:	d007      	beq.n	8002e68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e58:	4b07      	ldr	r3, [pc, #28]	@ (8002e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e60:	4a05      	ldr	r2, [pc, #20]	@ (8002e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e66:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40007000 	.word	0x40007000
 8002e7c:	20000000 	.word	0x20000000
 8002e80:	431bde83 	.word	0x431bde83

08002e84 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e3ca      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e96:	4b97      	ldr	r3, [pc, #604]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ea0:	4b94      	ldr	r3, [pc, #592]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f003 0303 	and.w	r3, r3, #3
 8002ea8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0310 	and.w	r3, r3, #16
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 80e4 	beq.w	8003080 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d007      	beq.n	8002ece <HAL_RCC_OscConfig+0x4a>
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	2b0c      	cmp	r3, #12
 8002ec2:	f040 808b 	bne.w	8002fdc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	f040 8087 	bne.w	8002fdc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ece:	4b89      	ldr	r3, [pc, #548]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x62>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e3a2      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a1a      	ldr	r2, [r3, #32]
 8002eea:	4b82      	ldr	r3, [pc, #520]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d004      	beq.n	8002f00 <HAL_RCC_OscConfig+0x7c>
 8002ef6:	4b7f      	ldr	r3, [pc, #508]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002efe:	e005      	b.n	8002f0c <HAL_RCC_OscConfig+0x88>
 8002f00:	4b7c      	ldr	r3, [pc, #496]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f06:	091b      	lsrs	r3, r3, #4
 8002f08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d223      	bcs.n	8002f58 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 fd55 	bl	80039c4 <RCC_SetFlashLatencyFromMSIRange>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e383      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f24:	4b73      	ldr	r3, [pc, #460]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a72      	ldr	r2, [pc, #456]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f2a:	f043 0308 	orr.w	r3, r3, #8
 8002f2e:	6013      	str	r3, [r2, #0]
 8002f30:	4b70      	ldr	r3, [pc, #448]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	496d      	ldr	r1, [pc, #436]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f42:	4b6c      	ldr	r3, [pc, #432]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	021b      	lsls	r3, r3, #8
 8002f50:	4968      	ldr	r1, [pc, #416]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	604b      	str	r3, [r1, #4]
 8002f56:	e025      	b.n	8002fa4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f58:	4b66      	ldr	r3, [pc, #408]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a65      	ldr	r2, [pc, #404]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f5e:	f043 0308 	orr.w	r3, r3, #8
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	4b63      	ldr	r3, [pc, #396]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	4960      	ldr	r1, [pc, #384]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f76:	4b5f      	ldr	r3, [pc, #380]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	021b      	lsls	r3, r3, #8
 8002f84:	495b      	ldr	r1, [pc, #364]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d109      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 fd15 	bl	80039c4 <RCC_SetFlashLatencyFromMSIRange>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e343      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fa4:	f000 fc4a 	bl	800383c <HAL_RCC_GetSysClockFreq>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	4b52      	ldr	r3, [pc, #328]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	091b      	lsrs	r3, r3, #4
 8002fb0:	f003 030f 	and.w	r3, r3, #15
 8002fb4:	4950      	ldr	r1, [pc, #320]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 8002fb6:	5ccb      	ldrb	r3, [r1, r3]
 8002fb8:	f003 031f 	and.w	r3, r3, #31
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc0:	4a4e      	ldr	r2, [pc, #312]	@ (80030fc <HAL_RCC_OscConfig+0x278>)
 8002fc2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002fc4:	4b4e      	ldr	r3, [pc, #312]	@ (8003100 <HAL_RCC_OscConfig+0x27c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fd fe63 	bl	8000c94 <HAL_InitTick>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d052      	beq.n	800307e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
 8002fda:	e327      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d032      	beq.n	800304a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002fe4:	4b43      	ldr	r3, [pc, #268]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a42      	ldr	r2, [pc, #264]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ff0:	f7fd fea0 	bl	8000d34 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ff8:	f7fd fe9c 	bl	8000d34 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e310      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800300a:	4b3a      	ldr	r3, [pc, #232]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003016:	4b37      	ldr	r3, [pc, #220]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a36      	ldr	r2, [pc, #216]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 800301c:	f043 0308 	orr.w	r3, r3, #8
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	4b34      	ldr	r3, [pc, #208]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	4931      	ldr	r1, [pc, #196]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8003030:	4313      	orrs	r3, r2
 8003032:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003034:	4b2f      	ldr	r3, [pc, #188]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	492c      	ldr	r1, [pc, #176]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
 8003048:	e01a      	b.n	8003080 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800304a:	4b2a      	ldr	r3, [pc, #168]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a29      	ldr	r2, [pc, #164]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8003050:	f023 0301 	bic.w	r3, r3, #1
 8003054:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003056:	f7fd fe6d 	bl	8000d34 <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800305e:	f7fd fe69 	bl	8000d34 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e2dd      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003070:	4b20      	ldr	r3, [pc, #128]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f0      	bne.n	800305e <HAL_RCC_OscConfig+0x1da>
 800307c:	e000      	b.n	8003080 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800307e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d074      	beq.n	8003176 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	2b08      	cmp	r3, #8
 8003090:	d005      	beq.n	800309e <HAL_RCC_OscConfig+0x21a>
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	2b0c      	cmp	r3, #12
 8003096:	d10e      	bne.n	80030b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2b03      	cmp	r3, #3
 800309c:	d10b      	bne.n	80030b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800309e:	4b15      	ldr	r3, [pc, #84]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d064      	beq.n	8003174 <HAL_RCC_OscConfig+0x2f0>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d160      	bne.n	8003174 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e2ba      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030be:	d106      	bne.n	80030ce <HAL_RCC_OscConfig+0x24a>
 80030c0:	4b0c      	ldr	r3, [pc, #48]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a0b      	ldr	r2, [pc, #44]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 80030c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ca:	6013      	str	r3, [r2, #0]
 80030cc:	e026      	b.n	800311c <HAL_RCC_OscConfig+0x298>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030d6:	d115      	bne.n	8003104 <HAL_RCC_OscConfig+0x280>
 80030d8:	4b06      	ldr	r3, [pc, #24]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a05      	ldr	r2, [pc, #20]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 80030de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	4b03      	ldr	r3, [pc, #12]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a02      	ldr	r2, [pc, #8]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 80030ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	e014      	b.n	800311c <HAL_RCC_OscConfig+0x298>
 80030f2:	bf00      	nop
 80030f4:	40021000 	.word	0x40021000
 80030f8:	08005f9c 	.word	0x08005f9c
 80030fc:	20000000 	.word	0x20000000
 8003100:	20000004 	.word	0x20000004
 8003104:	4ba0      	ldr	r3, [pc, #640]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a9f      	ldr	r2, [pc, #636]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 800310a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	4b9d      	ldr	r3, [pc, #628]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a9c      	ldr	r2, [pc, #624]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003116:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800311a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d013      	beq.n	800314c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003124:	f7fd fe06 	bl	8000d34 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800312c:	f7fd fe02 	bl	8000d34 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b64      	cmp	r3, #100	@ 0x64
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e276      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800313e:	4b92      	ldr	r3, [pc, #584]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCC_OscConfig+0x2a8>
 800314a:	e014      	b.n	8003176 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314c:	f7fd fdf2 	bl	8000d34 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003154:	f7fd fdee 	bl	8000d34 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b64      	cmp	r3, #100	@ 0x64
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e262      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003166:	4b88      	ldr	r3, [pc, #544]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x2d0>
 8003172:	e000      	b.n	8003176 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d060      	beq.n	8003244 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	2b04      	cmp	r3, #4
 8003186:	d005      	beq.n	8003194 <HAL_RCC_OscConfig+0x310>
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	2b0c      	cmp	r3, #12
 800318c:	d119      	bne.n	80031c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2b02      	cmp	r3, #2
 8003192:	d116      	bne.n	80031c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003194:	4b7c      	ldr	r3, [pc, #496]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <HAL_RCC_OscConfig+0x328>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e23f      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ac:	4b76      	ldr	r3, [pc, #472]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	061b      	lsls	r3, r3, #24
 80031ba:	4973      	ldr	r1, [pc, #460]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031c0:	e040      	b.n	8003244 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d023      	beq.n	8003212 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031ca:	4b6f      	ldr	r3, [pc, #444]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a6e      	ldr	r2, [pc, #440]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80031d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d6:	f7fd fdad 	bl	8000d34 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031de:	f7fd fda9 	bl	8000d34 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e21d      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031f0:	4b65      	ldr	r3, [pc, #404]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031fc:	4b62      	ldr	r3, [pc, #392]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	061b      	lsls	r3, r3, #24
 800320a:	495f      	ldr	r1, [pc, #380]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 800320c:	4313      	orrs	r3, r2
 800320e:	604b      	str	r3, [r1, #4]
 8003210:	e018      	b.n	8003244 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003212:	4b5d      	ldr	r3, [pc, #372]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a5c      	ldr	r2, [pc, #368]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003218:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800321c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321e:	f7fd fd89 	bl	8000d34 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003226:	f7fd fd85 	bl	8000d34 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e1f9      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003238:	4b53      	ldr	r3, [pc, #332]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1f0      	bne.n	8003226 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0308 	and.w	r3, r3, #8
 800324c:	2b00      	cmp	r3, #0
 800324e:	d03c      	beq.n	80032ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01c      	beq.n	8003292 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003258:	4b4b      	ldr	r3, [pc, #300]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 800325a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800325e:	4a4a      	ldr	r2, [pc, #296]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003268:	f7fd fd64 	bl	8000d34 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003270:	f7fd fd60 	bl	8000d34 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e1d4      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003282:	4b41      	ldr	r3, [pc, #260]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003284:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0ef      	beq.n	8003270 <HAL_RCC_OscConfig+0x3ec>
 8003290:	e01b      	b.n	80032ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003292:	4b3d      	ldr	r3, [pc, #244]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003294:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003298:	4a3b      	ldr	r2, [pc, #236]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a2:	f7fd fd47 	bl	8000d34 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032aa:	f7fd fd43 	bl	8000d34 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e1b7      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032bc:	4b32      	ldr	r3, [pc, #200]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80032be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1ef      	bne.n	80032aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 80a6 	beq.w	8003424 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032d8:	2300      	movs	r3, #0
 80032da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80032dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80032de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10d      	bne.n	8003304 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e8:	4b27      	ldr	r3, [pc, #156]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80032ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ec:	4a26      	ldr	r2, [pc, #152]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80032ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80032f4:	4b24      	ldr	r3, [pc, #144]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80032f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032fc:	60bb      	str	r3, [r7, #8]
 80032fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003300:	2301      	movs	r3, #1
 8003302:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003304:	4b21      	ldr	r3, [pc, #132]	@ (800338c <HAL_RCC_OscConfig+0x508>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800330c:	2b00      	cmp	r3, #0
 800330e:	d118      	bne.n	8003342 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003310:	4b1e      	ldr	r3, [pc, #120]	@ (800338c <HAL_RCC_OscConfig+0x508>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a1d      	ldr	r2, [pc, #116]	@ (800338c <HAL_RCC_OscConfig+0x508>)
 8003316:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800331a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800331c:	f7fd fd0a 	bl	8000d34 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003324:	f7fd fd06 	bl	8000d34 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e17a      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003336:	4b15      	ldr	r3, [pc, #84]	@ (800338c <HAL_RCC_OscConfig+0x508>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d108      	bne.n	800335c <HAL_RCC_OscConfig+0x4d8>
 800334a:	4b0f      	ldr	r3, [pc, #60]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 800334c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003350:	4a0d      	ldr	r2, [pc, #52]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800335a:	e029      	b.n	80033b0 <HAL_RCC_OscConfig+0x52c>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2b05      	cmp	r3, #5
 8003362:	d115      	bne.n	8003390 <HAL_RCC_OscConfig+0x50c>
 8003364:	4b08      	ldr	r3, [pc, #32]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800336a:	4a07      	ldr	r2, [pc, #28]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 800336c:	f043 0304 	orr.w	r3, r3, #4
 8003370:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003374:	4b04      	ldr	r3, [pc, #16]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800337a:	4a03      	ldr	r2, [pc, #12]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003384:	e014      	b.n	80033b0 <HAL_RCC_OscConfig+0x52c>
 8003386:	bf00      	nop
 8003388:	40021000 	.word	0x40021000
 800338c:	40007000 	.word	0x40007000
 8003390:	4b9c      	ldr	r3, [pc, #624]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 8003392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003396:	4a9b      	ldr	r2, [pc, #620]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 8003398:	f023 0301 	bic.w	r3, r3, #1
 800339c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033a0:	4b98      	ldr	r3, [pc, #608]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 80033a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033a6:	4a97      	ldr	r2, [pc, #604]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 80033a8:	f023 0304 	bic.w	r3, r3, #4
 80033ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d016      	beq.n	80033e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b8:	f7fd fcbc 	bl	8000d34 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033be:	e00a      	b.n	80033d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c0:	f7fd fcb8 	bl	8000d34 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e12a      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033d6:	4b8b      	ldr	r3, [pc, #556]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 80033d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0ed      	beq.n	80033c0 <HAL_RCC_OscConfig+0x53c>
 80033e4:	e015      	b.n	8003412 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e6:	f7fd fca5 	bl	8000d34 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033ec:	e00a      	b.n	8003404 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ee:	f7fd fca1 	bl	8000d34 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e113      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003404:	4b7f      	ldr	r3, [pc, #508]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1ed      	bne.n	80033ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003412:	7ffb      	ldrb	r3, [r7, #31]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d105      	bne.n	8003424 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003418:	4b7a      	ldr	r3, [pc, #488]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 800341a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341c:	4a79      	ldr	r2, [pc, #484]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 800341e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003422:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 80fe 	beq.w	800362a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003432:	2b02      	cmp	r3, #2
 8003434:	f040 80d0 	bne.w	80035d8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003438:	4b72      	ldr	r3, [pc, #456]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f003 0203 	and.w	r2, r3, #3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003448:	429a      	cmp	r2, r3
 800344a:	d130      	bne.n	80034ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003456:	3b01      	subs	r3, #1
 8003458:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800345a:	429a      	cmp	r2, r3
 800345c:	d127      	bne.n	80034ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003468:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800346a:	429a      	cmp	r2, r3
 800346c:	d11f      	bne.n	80034ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003478:	2a07      	cmp	r2, #7
 800347a:	bf14      	ite	ne
 800347c:	2201      	movne	r2, #1
 800347e:	2200      	moveq	r2, #0
 8003480:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003482:	4293      	cmp	r3, r2
 8003484:	d113      	bne.n	80034ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003490:	085b      	lsrs	r3, r3, #1
 8003492:	3b01      	subs	r3, #1
 8003494:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003496:	429a      	cmp	r2, r3
 8003498:	d109      	bne.n	80034ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a4:	085b      	lsrs	r3, r3, #1
 80034a6:	3b01      	subs	r3, #1
 80034a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d06e      	beq.n	800358c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	2b0c      	cmp	r3, #12
 80034b2:	d069      	beq.n	8003588 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034b4:	4b53      	ldr	r3, [pc, #332]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d105      	bne.n	80034cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80034c0:	4b50      	ldr	r3, [pc, #320]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0ad      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034d0:	4b4c      	ldr	r3, [pc, #304]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 80034d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034dc:	f7fd fc2a 	bl	8000d34 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e4:	f7fd fc26 	bl	8000d34 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e09a      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034f6:	4b43      	ldr	r3, [pc, #268]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f0      	bne.n	80034e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003502:	4b40      	ldr	r3, [pc, #256]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	4b40      	ldr	r3, [pc, #256]	@ (8003608 <HAL_RCC_OscConfig+0x784>)
 8003508:	4013      	ands	r3, r2
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003512:	3a01      	subs	r2, #1
 8003514:	0112      	lsls	r2, r2, #4
 8003516:	4311      	orrs	r1, r2
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800351c:	0212      	lsls	r2, r2, #8
 800351e:	4311      	orrs	r1, r2
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003524:	0852      	lsrs	r2, r2, #1
 8003526:	3a01      	subs	r2, #1
 8003528:	0552      	lsls	r2, r2, #21
 800352a:	4311      	orrs	r1, r2
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003530:	0852      	lsrs	r2, r2, #1
 8003532:	3a01      	subs	r2, #1
 8003534:	0652      	lsls	r2, r2, #25
 8003536:	4311      	orrs	r1, r2
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800353c:	0912      	lsrs	r2, r2, #4
 800353e:	0452      	lsls	r2, r2, #17
 8003540:	430a      	orrs	r2, r1
 8003542:	4930      	ldr	r1, [pc, #192]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 8003544:	4313      	orrs	r3, r2
 8003546:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003548:	4b2e      	ldr	r3, [pc, #184]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a2d      	ldr	r2, [pc, #180]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 800354e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003552:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003554:	4b2b      	ldr	r3, [pc, #172]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	4a2a      	ldr	r2, [pc, #168]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 800355a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800355e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003560:	f7fd fbe8 	bl	8000d34 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003568:	f7fd fbe4 	bl	8000d34 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e058      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800357a:	4b22      	ldr	r3, [pc, #136]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0f0      	beq.n	8003568 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003586:	e050      	b.n	800362a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e04f      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800358c:	4b1d      	ldr	r3, [pc, #116]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d148      	bne.n	800362a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003598:	4b1a      	ldr	r3, [pc, #104]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a19      	ldr	r2, [pc, #100]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 800359e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035a4:	4b17      	ldr	r3, [pc, #92]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	4a16      	ldr	r2, [pc, #88]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 80035aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035b0:	f7fd fbc0 	bl	8000d34 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b8:	f7fd fbbc 	bl	8000d34 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e030      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f0      	beq.n	80035b8 <HAL_RCC_OscConfig+0x734>
 80035d6:	e028      	b.n	800362a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	2b0c      	cmp	r3, #12
 80035dc:	d023      	beq.n	8003626 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035de:	4b09      	ldr	r3, [pc, #36]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a08      	ldr	r2, [pc, #32]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 80035e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ea:	f7fd fba3 	bl	8000d34 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035f0:	e00c      	b.n	800360c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f2:	f7fd fb9f 	bl	8000d34 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d905      	bls.n	800360c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e013      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
 8003604:	40021000 	.word	0x40021000
 8003608:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800360c:	4b09      	ldr	r3, [pc, #36]	@ (8003634 <HAL_RCC_OscConfig+0x7b0>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1ec      	bne.n	80035f2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003618:	4b06      	ldr	r3, [pc, #24]	@ (8003634 <HAL_RCC_OscConfig+0x7b0>)
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	4905      	ldr	r1, [pc, #20]	@ (8003634 <HAL_RCC_OscConfig+0x7b0>)
 800361e:	4b06      	ldr	r3, [pc, #24]	@ (8003638 <HAL_RCC_OscConfig+0x7b4>)
 8003620:	4013      	ands	r3, r2
 8003622:	60cb      	str	r3, [r1, #12]
 8003624:	e001      	b.n	800362a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3720      	adds	r7, #32
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40021000 	.word	0x40021000
 8003638:	feeefffc 	.word	0xfeeefffc

0800363c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e0e7      	b.n	8003820 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003650:	4b75      	ldr	r3, [pc, #468]	@ (8003828 <HAL_RCC_ClockConfig+0x1ec>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d910      	bls.n	8003680 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365e:	4b72      	ldr	r3, [pc, #456]	@ (8003828 <HAL_RCC_ClockConfig+0x1ec>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f023 0207 	bic.w	r2, r3, #7
 8003666:	4970      	ldr	r1, [pc, #448]	@ (8003828 <HAL_RCC_ClockConfig+0x1ec>)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	4313      	orrs	r3, r2
 800366c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800366e:	4b6e      	ldr	r3, [pc, #440]	@ (8003828 <HAL_RCC_ClockConfig+0x1ec>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d001      	beq.n	8003680 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e0cf      	b.n	8003820 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d010      	beq.n	80036ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	4b66      	ldr	r3, [pc, #408]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003698:	429a      	cmp	r2, r3
 800369a:	d908      	bls.n	80036ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800369c:	4b63      	ldr	r3, [pc, #396]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	4960      	ldr	r1, [pc, #384]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d04c      	beq.n	8003754 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d107      	bne.n	80036d2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036c2:	4b5a      	ldr	r3, [pc, #360]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d121      	bne.n	8003712 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e0a6      	b.n	8003820 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d107      	bne.n	80036ea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036da:	4b54      	ldr	r3, [pc, #336]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d115      	bne.n	8003712 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e09a      	b.n	8003820 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d107      	bne.n	8003702 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036f2:	4b4e      	ldr	r3, [pc, #312]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d109      	bne.n	8003712 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e08e      	b.n	8003820 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003702:	4b4a      	ldr	r3, [pc, #296]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e086      	b.n	8003820 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003712:	4b46      	ldr	r3, [pc, #280]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f023 0203 	bic.w	r2, r3, #3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	4943      	ldr	r1, [pc, #268]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 8003720:	4313      	orrs	r3, r2
 8003722:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003724:	f7fd fb06 	bl	8000d34 <HAL_GetTick>
 8003728:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372a:	e00a      	b.n	8003742 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800372c:	f7fd fb02 	bl	8000d34 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800373a:	4293      	cmp	r3, r2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e06e      	b.n	8003820 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003742:	4b3a      	ldr	r3, [pc, #232]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 020c 	and.w	r2, r3, #12
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	429a      	cmp	r2, r3
 8003752:	d1eb      	bne.n	800372c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d010      	beq.n	8003782 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	4b31      	ldr	r3, [pc, #196]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800376c:	429a      	cmp	r2, r3
 800376e:	d208      	bcs.n	8003782 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003770:	4b2e      	ldr	r3, [pc, #184]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	492b      	ldr	r1, [pc, #172]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 800377e:	4313      	orrs	r3, r2
 8003780:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003782:	4b29      	ldr	r3, [pc, #164]	@ (8003828 <HAL_RCC_ClockConfig+0x1ec>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d210      	bcs.n	80037b2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003790:	4b25      	ldr	r3, [pc, #148]	@ (8003828 <HAL_RCC_ClockConfig+0x1ec>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f023 0207 	bic.w	r2, r3, #7
 8003798:	4923      	ldr	r1, [pc, #140]	@ (8003828 <HAL_RCC_ClockConfig+0x1ec>)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	4313      	orrs	r3, r2
 800379e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a0:	4b21      	ldr	r3, [pc, #132]	@ (8003828 <HAL_RCC_ClockConfig+0x1ec>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d001      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e036      	b.n	8003820 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0304 	and.w	r3, r3, #4
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d008      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037be:	4b1b      	ldr	r3, [pc, #108]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	4918      	ldr	r1, [pc, #96]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0308 	and.w	r3, r3, #8
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d009      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037dc:	4b13      	ldr	r3, [pc, #76]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	4910      	ldr	r1, [pc, #64]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037f0:	f000 f824 	bl	800383c <HAL_RCC_GetSysClockFreq>
 80037f4:	4602      	mov	r2, r0
 80037f6:	4b0d      	ldr	r3, [pc, #52]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	091b      	lsrs	r3, r3, #4
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	490b      	ldr	r1, [pc, #44]	@ (8003830 <HAL_RCC_ClockConfig+0x1f4>)
 8003802:	5ccb      	ldrb	r3, [r1, r3]
 8003804:	f003 031f 	and.w	r3, r3, #31
 8003808:	fa22 f303 	lsr.w	r3, r2, r3
 800380c:	4a09      	ldr	r2, [pc, #36]	@ (8003834 <HAL_RCC_ClockConfig+0x1f8>)
 800380e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003810:	4b09      	ldr	r3, [pc, #36]	@ (8003838 <HAL_RCC_ClockConfig+0x1fc>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f7fd fa3d 	bl	8000c94 <HAL_InitTick>
 800381a:	4603      	mov	r3, r0
 800381c:	72fb      	strb	r3, [r7, #11]

  return status;
 800381e:	7afb      	ldrb	r3, [r7, #11]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40022000 	.word	0x40022000
 800382c:	40021000 	.word	0x40021000
 8003830:	08005f9c 	.word	0x08005f9c
 8003834:	20000000 	.word	0x20000000
 8003838:	20000004 	.word	0x20000004

0800383c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800383c:	b480      	push	{r7}
 800383e:	b089      	sub	sp, #36	@ 0x24
 8003840:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	2300      	movs	r3, #0
 8003848:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800384a:	4b3e      	ldr	r3, [pc, #248]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x108>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 030c 	and.w	r3, r3, #12
 8003852:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003854:	4b3b      	ldr	r3, [pc, #236]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x108>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <HAL_RCC_GetSysClockFreq+0x34>
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	2b0c      	cmp	r3, #12
 8003868:	d121      	bne.n	80038ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d11e      	bne.n	80038ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003870:	4b34      	ldr	r3, [pc, #208]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x108>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0308 	and.w	r3, r3, #8
 8003878:	2b00      	cmp	r3, #0
 800387a:	d107      	bne.n	800388c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800387c:	4b31      	ldr	r3, [pc, #196]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x108>)
 800387e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003882:	0a1b      	lsrs	r3, r3, #8
 8003884:	f003 030f 	and.w	r3, r3, #15
 8003888:	61fb      	str	r3, [r7, #28]
 800388a:	e005      	b.n	8003898 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800388c:	4b2d      	ldr	r3, [pc, #180]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x108>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	091b      	lsrs	r3, r3, #4
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003898:	4a2b      	ldr	r2, [pc, #172]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x10c>)
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10d      	bne.n	80038c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038ac:	e00a      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d102      	bne.n	80038ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038b4:	4b25      	ldr	r3, [pc, #148]	@ (800394c <HAL_RCC_GetSysClockFreq+0x110>)
 80038b6:	61bb      	str	r3, [r7, #24]
 80038b8:	e004      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d101      	bne.n	80038c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038c0:	4b23      	ldr	r3, [pc, #140]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x114>)
 80038c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	2b0c      	cmp	r3, #12
 80038c8:	d134      	bne.n	8003934 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x108>)
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d003      	beq.n	80038e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d003      	beq.n	80038e8 <HAL_RCC_GetSysClockFreq+0xac>
 80038e0:	e005      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80038e2:	4b1a      	ldr	r3, [pc, #104]	@ (800394c <HAL_RCC_GetSysClockFreq+0x110>)
 80038e4:	617b      	str	r3, [r7, #20]
      break;
 80038e6:	e005      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80038e8:	4b19      	ldr	r3, [pc, #100]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x114>)
 80038ea:	617b      	str	r3, [r7, #20]
      break;
 80038ec:	e002      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	617b      	str	r3, [r7, #20]
      break;
 80038f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038f4:	4b13      	ldr	r3, [pc, #76]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x108>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	3301      	adds	r3, #1
 8003900:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003902:	4b10      	ldr	r3, [pc, #64]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x108>)
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	0a1b      	lsrs	r3, r3, #8
 8003908:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	fb03 f202 	mul.w	r2, r3, r2
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	fbb2 f3f3 	udiv	r3, r2, r3
 8003918:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800391a:	4b0a      	ldr	r3, [pc, #40]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x108>)
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	0e5b      	lsrs	r3, r3, #25
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	3301      	adds	r3, #1
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003932:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003934:	69bb      	ldr	r3, [r7, #24]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3724      	adds	r7, #36	@ 0x24
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40021000 	.word	0x40021000
 8003948:	08005fb4 	.word	0x08005fb4
 800394c:	00f42400 	.word	0x00f42400
 8003950:	007a1200 	.word	0x007a1200

08003954 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003958:	4b03      	ldr	r3, [pc, #12]	@ (8003968 <HAL_RCC_GetHCLKFreq+0x14>)
 800395a:	681b      	ldr	r3, [r3, #0]
}
 800395c:	4618      	mov	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	20000000 	.word	0x20000000

0800396c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003970:	f7ff fff0 	bl	8003954 <HAL_RCC_GetHCLKFreq>
 8003974:	4602      	mov	r2, r0
 8003976:	4b06      	ldr	r3, [pc, #24]	@ (8003990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	0a1b      	lsrs	r3, r3, #8
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	4904      	ldr	r1, [pc, #16]	@ (8003994 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003982:	5ccb      	ldrb	r3, [r1, r3]
 8003984:	f003 031f 	and.w	r3, r3, #31
 8003988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800398c:	4618      	mov	r0, r3
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40021000 	.word	0x40021000
 8003994:	08005fac 	.word	0x08005fac

08003998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800399c:	f7ff ffda 	bl	8003954 <HAL_RCC_GetHCLKFreq>
 80039a0:	4602      	mov	r2, r0
 80039a2:	4b06      	ldr	r3, [pc, #24]	@ (80039bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	0adb      	lsrs	r3, r3, #11
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	4904      	ldr	r1, [pc, #16]	@ (80039c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039ae:	5ccb      	ldrb	r3, [r1, r3]
 80039b0:	f003 031f 	and.w	r3, r3, #31
 80039b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40021000 	.word	0x40021000
 80039c0:	08005fac 	.word	0x08005fac

080039c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039cc:	2300      	movs	r3, #0
 80039ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039d0:	4b2a      	ldr	r3, [pc, #168]	@ (8003a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039dc:	f7ff f9ee 	bl	8002dbc <HAL_PWREx_GetVoltageRange>
 80039e0:	6178      	str	r0, [r7, #20]
 80039e2:	e014      	b.n	8003a0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039e4:	4b25      	ldr	r3, [pc, #148]	@ (8003a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e8:	4a24      	ldr	r2, [pc, #144]	@ (8003a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80039f0:	4b22      	ldr	r3, [pc, #136]	@ (8003a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039fc:	f7ff f9de 	bl	8002dbc <HAL_PWREx_GetVoltageRange>
 8003a00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a02:	4b1e      	ldr	r3, [pc, #120]	@ (8003a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a06:	4a1d      	ldr	r2, [pc, #116]	@ (8003a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a0c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a14:	d10b      	bne.n	8003a2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b80      	cmp	r3, #128	@ 0x80
 8003a1a:	d919      	bls.n	8003a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003a20:	d902      	bls.n	8003a28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a22:	2302      	movs	r3, #2
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	e013      	b.n	8003a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a28:	2301      	movs	r3, #1
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	e010      	b.n	8003a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b80      	cmp	r3, #128	@ 0x80
 8003a32:	d902      	bls.n	8003a3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a34:	2303      	movs	r3, #3
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	e00a      	b.n	8003a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b80      	cmp	r3, #128	@ 0x80
 8003a3e:	d102      	bne.n	8003a46 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a40:	2302      	movs	r3, #2
 8003a42:	613b      	str	r3, [r7, #16]
 8003a44:	e004      	b.n	8003a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b70      	cmp	r3, #112	@ 0x70
 8003a4a:	d101      	bne.n	8003a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a50:	4b0b      	ldr	r3, [pc, #44]	@ (8003a80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f023 0207 	bic.w	r2, r3, #7
 8003a58:	4909      	ldr	r1, [pc, #36]	@ (8003a80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a60:	4b07      	ldr	r3, [pc, #28]	@ (8003a80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d001      	beq.n	8003a72 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e000      	b.n	8003a74 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	40022000 	.word	0x40022000

08003a84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a90:	2300      	movs	r3, #0
 8003a92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d041      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003aa4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003aa8:	d02a      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003aaa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003aae:	d824      	bhi.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ab0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ab4:	d008      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ab6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003aba:	d81e      	bhi.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00a      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ac0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ac4:	d010      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ac6:	e018      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ac8:	4b86      	ldr	r3, [pc, #536]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	4a85      	ldr	r2, [pc, #532]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ace:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ad2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ad4:	e015      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	3304      	adds	r3, #4
 8003ada:	2100      	movs	r1, #0
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 fabb 	bl	8004058 <RCCEx_PLLSAI1_Config>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ae6:	e00c      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3320      	adds	r3, #32
 8003aec:	2100      	movs	r1, #0
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fba6 	bl	8004240 <RCCEx_PLLSAI2_Config>
 8003af4:	4603      	mov	r3, r0
 8003af6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003af8:	e003      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	74fb      	strb	r3, [r7, #19]
      break;
 8003afe:	e000      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003b00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b02:	7cfb      	ldrb	r3, [r7, #19]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10b      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b08:	4b76      	ldr	r3, [pc, #472]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b0e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b16:	4973      	ldr	r1, [pc, #460]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003b1e:	e001      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b20:	7cfb      	ldrb	r3, [r7, #19]
 8003b22:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d041      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b34:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b38:	d02a      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003b3a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b3e:	d824      	bhi.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b44:	d008      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b4a:	d81e      	bhi.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003b50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b54:	d010      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b56:	e018      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b58:	4b62      	ldr	r3, [pc, #392]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	4a61      	ldr	r2, [pc, #388]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b62:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b64:	e015      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3304      	adds	r3, #4
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 fa73 	bl	8004058 <RCCEx_PLLSAI1_Config>
 8003b72:	4603      	mov	r3, r0
 8003b74:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b76:	e00c      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3320      	adds	r3, #32
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fb5e 	bl	8004240 <RCCEx_PLLSAI2_Config>
 8003b84:	4603      	mov	r3, r0
 8003b86:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b88:	e003      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	74fb      	strb	r3, [r7, #19]
      break;
 8003b8e:	e000      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003b90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b92:	7cfb      	ldrb	r3, [r7, #19]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10b      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b98:	4b52      	ldr	r3, [pc, #328]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b9e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ba6:	494f      	ldr	r1, [pc, #316]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003bae:	e001      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb0:	7cfb      	ldrb	r3, [r7, #19]
 8003bb2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 80a0 	beq.w	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bc6:	4b47      	ldr	r3, [pc, #284]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00d      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bdc:	4b41      	ldr	r3, [pc, #260]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be0:	4a40      	ldr	r2, [pc, #256]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003be6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003be8:	4b3e      	ldr	r3, [pc, #248]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bf8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a3a      	ldr	r2, [pc, #232]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c04:	f7fd f896 	bl	8000d34 <HAL_GetTick>
 8003c08:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c0a:	e009      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c0c:	f7fd f892 	bl	8000d34 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d902      	bls.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	74fb      	strb	r3, [r7, #19]
        break;
 8003c1e:	e005      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c20:	4b31      	ldr	r3, [pc, #196]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0ef      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003c2c:	7cfb      	ldrb	r3, [r7, #19]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d15c      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c32:	4b2c      	ldr	r3, [pc, #176]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c3c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d01f      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d019      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c50:	4b24      	ldr	r3, [pc, #144]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c5c:	4b21      	ldr	r3, [pc, #132]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c62:	4a20      	ldr	r2, [pc, #128]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c72:	4a1c      	ldr	r2, [pc, #112]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c7c:	4a19      	ldr	r2, [pc, #100]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d016      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8e:	f7fd f851 	bl	8000d34 <HAL_GetTick>
 8003c92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c94:	e00b      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c96:	f7fd f84d 	bl	8000d34 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d902      	bls.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	74fb      	strb	r3, [r7, #19]
            break;
 8003cac:	e006      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cae:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0ec      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003cbc:	7cfb      	ldrb	r3, [r7, #19]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10c      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cc2:	4b08      	ldr	r3, [pc, #32]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cd2:	4904      	ldr	r1, [pc, #16]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003cda:	e009      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cdc:	7cfb      	ldrb	r3, [r7, #19]
 8003cde:	74bb      	strb	r3, [r7, #18]
 8003ce0:	e006      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003ce2:	bf00      	nop
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cec:	7cfb      	ldrb	r3, [r7, #19]
 8003cee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cf0:	7c7b      	ldrb	r3, [r7, #17]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d105      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf6:	4b9e      	ldr	r3, [pc, #632]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cfa:	4a9d      	ldr	r2, [pc, #628]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d00:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d0e:	4b98      	ldr	r3, [pc, #608]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d14:	f023 0203 	bic.w	r2, r3, #3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1c:	4994      	ldr	r1, [pc, #592]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d30:	4b8f      	ldr	r3, [pc, #572]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d36:	f023 020c 	bic.w	r2, r3, #12
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d3e:	498c      	ldr	r1, [pc, #560]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d52:	4b87      	ldr	r3, [pc, #540]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d58:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d60:	4983      	ldr	r1, [pc, #524]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0308 	and.w	r3, r3, #8
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00a      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d74:	4b7e      	ldr	r3, [pc, #504]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d7a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d82:	497b      	ldr	r1, [pc, #492]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0310 	and.w	r3, r3, #16
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00a      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d96:	4b76      	ldr	r3, [pc, #472]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003da4:	4972      	ldr	r1, [pc, #456]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003db8:	4b6d      	ldr	r3, [pc, #436]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dbe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dc6:	496a      	ldr	r1, [pc, #424]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dda:	4b65      	ldr	r3, [pc, #404]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de8:	4961      	ldr	r1, [pc, #388]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003dfc:	4b5c      	ldr	r3, [pc, #368]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e02:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e0a:	4959      	ldr	r1, [pc, #356]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e1e:	4b54      	ldr	r3, [pc, #336]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e24:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e2c:	4950      	ldr	r1, [pc, #320]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00a      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e40:	4b4b      	ldr	r3, [pc, #300]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e46:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e4e:	4948      	ldr	r1, [pc, #288]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e62:	4b43      	ldr	r3, [pc, #268]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e68:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e70:	493f      	ldr	r1, [pc, #252]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d028      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e84:	4b3a      	ldr	r3, [pc, #232]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e92:	4937      	ldr	r1, [pc, #220]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ea2:	d106      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ea4:	4b32      	ldr	r3, [pc, #200]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	4a31      	ldr	r2, [pc, #196]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003eae:	60d3      	str	r3, [r2, #12]
 8003eb0:	e011      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003eb6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003eba:	d10c      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 f8c8 	bl	8004058 <RCCEx_PLLSAI1_Config>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ecc:	7cfb      	ldrb	r3, [r7, #19]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003ed2:	7cfb      	ldrb	r3, [r7, #19]
 8003ed4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d028      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ee2:	4b23      	ldr	r3, [pc, #140]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef0:	491f      	ldr	r1, [pc, #124]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003efc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f00:	d106      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f02:	4b1b      	ldr	r3, [pc, #108]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	4a1a      	ldr	r2, [pc, #104]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f08:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f0c:	60d3      	str	r3, [r2, #12]
 8003f0e:	e011      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f18:	d10c      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	2101      	movs	r1, #1
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 f899 	bl	8004058 <RCCEx_PLLSAI1_Config>
 8003f26:	4603      	mov	r3, r0
 8003f28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f2a:	7cfb      	ldrb	r3, [r7, #19]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003f30:	7cfb      	ldrb	r3, [r7, #19]
 8003f32:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d02b      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f40:	4b0b      	ldr	r3, [pc, #44]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f46:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f4e:	4908      	ldr	r1, [pc, #32]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f5e:	d109      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f60:	4b03      	ldr	r3, [pc, #12]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	4a02      	ldr	r2, [pc, #8]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f6a:	60d3      	str	r3, [r2, #12]
 8003f6c:	e014      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003f6e:	bf00      	nop
 8003f70:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f7c:	d10c      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	3304      	adds	r3, #4
 8003f82:	2101      	movs	r1, #1
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 f867 	bl	8004058 <RCCEx_PLLSAI1_Config>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f8e:	7cfb      	ldrb	r3, [r7, #19]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003f94:	7cfb      	ldrb	r3, [r7, #19]
 8003f96:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d02f      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fa4:	4b2b      	ldr	r3, [pc, #172]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003faa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fb2:	4928      	ldr	r1, [pc, #160]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fc2:	d10d      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	2102      	movs	r1, #2
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 f844 	bl	8004058 <RCCEx_PLLSAI1_Config>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fd4:	7cfb      	ldrb	r3, [r7, #19]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d014      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003fda:	7cfb      	ldrb	r3, [r7, #19]
 8003fdc:	74bb      	strb	r3, [r7, #18]
 8003fde:	e011      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fe4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fe8:	d10c      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3320      	adds	r3, #32
 8003fee:	2102      	movs	r1, #2
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 f925 	bl	8004240 <RCCEx_PLLSAI2_Config>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ffa:	7cfb      	ldrb	r3, [r7, #19]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004000:	7cfb      	ldrb	r3, [r7, #19]
 8004002:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00a      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004010:	4b10      	ldr	r3, [pc, #64]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004016:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800401e:	490d      	ldr	r1, [pc, #52]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00b      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004032:	4b08      	ldr	r3, [pc, #32]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004038:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004042:	4904      	ldr	r1, [pc, #16]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800404a:	7cbb      	ldrb	r3, [r7, #18]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3718      	adds	r7, #24
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40021000 	.word	0x40021000

08004058 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004066:	4b75      	ldr	r3, [pc, #468]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d018      	beq.n	80040a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004072:	4b72      	ldr	r3, [pc, #456]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	f003 0203 	and.w	r2, r3, #3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d10d      	bne.n	800409e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
       ||
 8004086:	2b00      	cmp	r3, #0
 8004088:	d009      	beq.n	800409e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800408a:	4b6c      	ldr	r3, [pc, #432]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	091b      	lsrs	r3, r3, #4
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
       ||
 800409a:	429a      	cmp	r2, r3
 800409c:	d047      	beq.n	800412e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	73fb      	strb	r3, [r7, #15]
 80040a2:	e044      	b.n	800412e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b03      	cmp	r3, #3
 80040aa:	d018      	beq.n	80040de <RCCEx_PLLSAI1_Config+0x86>
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	d825      	bhi.n	80040fc <RCCEx_PLLSAI1_Config+0xa4>
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d002      	beq.n	80040ba <RCCEx_PLLSAI1_Config+0x62>
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d009      	beq.n	80040cc <RCCEx_PLLSAI1_Config+0x74>
 80040b8:	e020      	b.n	80040fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040ba:	4b60      	ldr	r3, [pc, #384]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d11d      	bne.n	8004102 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ca:	e01a      	b.n	8004102 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040cc:	4b5b      	ldr	r3, [pc, #364]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d116      	bne.n	8004106 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040dc:	e013      	b.n	8004106 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040de:	4b57      	ldr	r3, [pc, #348]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10f      	bne.n	800410a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040ea:	4b54      	ldr	r3, [pc, #336]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d109      	bne.n	800410a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040fa:	e006      	b.n	800410a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004100:	e004      	b.n	800410c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004102:	bf00      	nop
 8004104:	e002      	b.n	800410c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004106:	bf00      	nop
 8004108:	e000      	b.n	800410c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800410a:	bf00      	nop
    }

    if(status == HAL_OK)
 800410c:	7bfb      	ldrb	r3, [r7, #15]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10d      	bne.n	800412e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004112:	4b4a      	ldr	r3, [pc, #296]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6819      	ldr	r1, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	3b01      	subs	r3, #1
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	430b      	orrs	r3, r1
 8004128:	4944      	ldr	r1, [pc, #272]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 800412a:	4313      	orrs	r3, r2
 800412c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800412e:	7bfb      	ldrb	r3, [r7, #15]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d17d      	bne.n	8004230 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004134:	4b41      	ldr	r3, [pc, #260]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a40      	ldr	r2, [pc, #256]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 800413a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800413e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004140:	f7fc fdf8 	bl	8000d34 <HAL_GetTick>
 8004144:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004146:	e009      	b.n	800415c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004148:	f7fc fdf4 	bl	8000d34 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d902      	bls.n	800415c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	73fb      	strb	r3, [r7, #15]
        break;
 800415a:	e005      	b.n	8004168 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800415c:	4b37      	ldr	r3, [pc, #220]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1ef      	bne.n	8004148 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004168:	7bfb      	ldrb	r3, [r7, #15]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d160      	bne.n	8004230 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d111      	bne.n	8004198 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004174:	4b31      	ldr	r3, [pc, #196]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800417c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6892      	ldr	r2, [r2, #8]
 8004184:	0211      	lsls	r1, r2, #8
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	68d2      	ldr	r2, [r2, #12]
 800418a:	0912      	lsrs	r2, r2, #4
 800418c:	0452      	lsls	r2, r2, #17
 800418e:	430a      	orrs	r2, r1
 8004190:	492a      	ldr	r1, [pc, #168]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004192:	4313      	orrs	r3, r2
 8004194:	610b      	str	r3, [r1, #16]
 8004196:	e027      	b.n	80041e8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d112      	bne.n	80041c4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800419e:	4b27      	ldr	r3, [pc, #156]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80041a6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6892      	ldr	r2, [r2, #8]
 80041ae:	0211      	lsls	r1, r2, #8
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6912      	ldr	r2, [r2, #16]
 80041b4:	0852      	lsrs	r2, r2, #1
 80041b6:	3a01      	subs	r2, #1
 80041b8:	0552      	lsls	r2, r2, #21
 80041ba:	430a      	orrs	r2, r1
 80041bc:	491f      	ldr	r1, [pc, #124]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	610b      	str	r3, [r1, #16]
 80041c2:	e011      	b.n	80041e8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041c4:	4b1d      	ldr	r3, [pc, #116]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80041cc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6892      	ldr	r2, [r2, #8]
 80041d4:	0211      	lsls	r1, r2, #8
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6952      	ldr	r2, [r2, #20]
 80041da:	0852      	lsrs	r2, r2, #1
 80041dc:	3a01      	subs	r2, #1
 80041de:	0652      	lsls	r2, r2, #25
 80041e0:	430a      	orrs	r2, r1
 80041e2:	4916      	ldr	r1, [pc, #88]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80041e8:	4b14      	ldr	r3, [pc, #80]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a13      	ldr	r2, [pc, #76]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80041f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f4:	f7fc fd9e 	bl	8000d34 <HAL_GetTick>
 80041f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041fa:	e009      	b.n	8004210 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041fc:	f7fc fd9a 	bl	8000d34 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d902      	bls.n	8004210 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	73fb      	strb	r3, [r7, #15]
          break;
 800420e:	e005      	b.n	800421c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004210:	4b0a      	ldr	r3, [pc, #40]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0ef      	beq.n	80041fc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800421c:	7bfb      	ldrb	r3, [r7, #15]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d106      	bne.n	8004230 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004222:	4b06      	ldr	r3, [pc, #24]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004224:	691a      	ldr	r2, [r3, #16]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	4904      	ldr	r1, [pc, #16]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 800422c:	4313      	orrs	r3, r2
 800422e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004230:	7bfb      	ldrb	r3, [r7, #15]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40021000 	.word	0x40021000

08004240 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800424e:	4b6a      	ldr	r3, [pc, #424]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d018      	beq.n	800428c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800425a:	4b67      	ldr	r3, [pc, #412]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	f003 0203 	and.w	r2, r3, #3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d10d      	bne.n	8004286 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
       ||
 800426e:	2b00      	cmp	r3, #0
 8004270:	d009      	beq.n	8004286 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004272:	4b61      	ldr	r3, [pc, #388]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	091b      	lsrs	r3, r3, #4
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
       ||
 8004282:	429a      	cmp	r2, r3
 8004284:	d047      	beq.n	8004316 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	73fb      	strb	r3, [r7, #15]
 800428a:	e044      	b.n	8004316 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2b03      	cmp	r3, #3
 8004292:	d018      	beq.n	80042c6 <RCCEx_PLLSAI2_Config+0x86>
 8004294:	2b03      	cmp	r3, #3
 8004296:	d825      	bhi.n	80042e4 <RCCEx_PLLSAI2_Config+0xa4>
 8004298:	2b01      	cmp	r3, #1
 800429a:	d002      	beq.n	80042a2 <RCCEx_PLLSAI2_Config+0x62>
 800429c:	2b02      	cmp	r3, #2
 800429e:	d009      	beq.n	80042b4 <RCCEx_PLLSAI2_Config+0x74>
 80042a0:	e020      	b.n	80042e4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042a2:	4b55      	ldr	r3, [pc, #340]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d11d      	bne.n	80042ea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b2:	e01a      	b.n	80042ea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042b4:	4b50      	ldr	r3, [pc, #320]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d116      	bne.n	80042ee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042c4:	e013      	b.n	80042ee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042c6:	4b4c      	ldr	r3, [pc, #304]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10f      	bne.n	80042f2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042d2:	4b49      	ldr	r3, [pc, #292]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042e2:	e006      	b.n	80042f2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	73fb      	strb	r3, [r7, #15]
      break;
 80042e8:	e004      	b.n	80042f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042ea:	bf00      	nop
 80042ec:	e002      	b.n	80042f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042ee:	bf00      	nop
 80042f0:	e000      	b.n	80042f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10d      	bne.n	8004316 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042fa:	4b3f      	ldr	r3, [pc, #252]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6819      	ldr	r1, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	3b01      	subs	r3, #1
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	430b      	orrs	r3, r1
 8004310:	4939      	ldr	r1, [pc, #228]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004312:	4313      	orrs	r3, r2
 8004314:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d167      	bne.n	80043ec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800431c:	4b36      	ldr	r3, [pc, #216]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a35      	ldr	r2, [pc, #212]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004322:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004326:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004328:	f7fc fd04 	bl	8000d34 <HAL_GetTick>
 800432c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800432e:	e009      	b.n	8004344 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004330:	f7fc fd00 	bl	8000d34 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d902      	bls.n	8004344 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	73fb      	strb	r3, [r7, #15]
        break;
 8004342:	e005      	b.n	8004350 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004344:	4b2c      	ldr	r3, [pc, #176]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1ef      	bne.n	8004330 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004350:	7bfb      	ldrb	r3, [r7, #15]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d14a      	bne.n	80043ec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d111      	bne.n	8004380 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800435c:	4b26      	ldr	r3, [pc, #152]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004364:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6892      	ldr	r2, [r2, #8]
 800436c:	0211      	lsls	r1, r2, #8
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	68d2      	ldr	r2, [r2, #12]
 8004372:	0912      	lsrs	r2, r2, #4
 8004374:	0452      	lsls	r2, r2, #17
 8004376:	430a      	orrs	r2, r1
 8004378:	491f      	ldr	r1, [pc, #124]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800437a:	4313      	orrs	r3, r2
 800437c:	614b      	str	r3, [r1, #20]
 800437e:	e011      	b.n	80043a4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004380:	4b1d      	ldr	r3, [pc, #116]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004388:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6892      	ldr	r2, [r2, #8]
 8004390:	0211      	lsls	r1, r2, #8
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6912      	ldr	r2, [r2, #16]
 8004396:	0852      	lsrs	r2, r2, #1
 8004398:	3a01      	subs	r2, #1
 800439a:	0652      	lsls	r2, r2, #25
 800439c:	430a      	orrs	r2, r1
 800439e:	4916      	ldr	r1, [pc, #88]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80043a4:	4b14      	ldr	r3, [pc, #80]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a13      	ldr	r2, [pc, #76]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b0:	f7fc fcc0 	bl	8000d34 <HAL_GetTick>
 80043b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043b6:	e009      	b.n	80043cc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043b8:	f7fc fcbc 	bl	8000d34 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d902      	bls.n	80043cc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	73fb      	strb	r3, [r7, #15]
          break;
 80043ca:	e005      	b.n	80043d8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043cc:	4b0a      	ldr	r3, [pc, #40]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0ef      	beq.n	80043b8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d106      	bne.n	80043ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80043de:	4b06      	ldr	r3, [pc, #24]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e0:	695a      	ldr	r2, [r3, #20]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	4904      	ldr	r1, [pc, #16]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40021000 	.word	0x40021000

080043fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e040      	b.n	8004490 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004412:	2b00      	cmp	r3, #0
 8004414:	d106      	bne.n	8004424 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7fc faf6 	bl	8000a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2224      	movs	r2, #36	@ 0x24
 8004428:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0201 	bic.w	r2, r2, #1
 8004438:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fe90 	bl	8005168 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 fbd5 	bl	8004bf8 <UART_SetConfig>
 800444e:	4603      	mov	r3, r0
 8004450:	2b01      	cmp	r3, #1
 8004452:	d101      	bne.n	8004458 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e01b      	b.n	8004490 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004466:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004476:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f042 0201 	orr.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 ff0f 	bl	80052ac <UART_CheckIdleState>
 800448e:	4603      	mov	r3, r0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08a      	sub	sp, #40	@ 0x28
 800449c:	af02      	add	r7, sp, #8
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	603b      	str	r3, [r7, #0]
 80044a4:	4613      	mov	r3, r2
 80044a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044ac:	2b20      	cmp	r3, #32
 80044ae:	d177      	bne.n	80045a0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <HAL_UART_Transmit+0x24>
 80044b6:	88fb      	ldrh	r3, [r7, #6]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e070      	b.n	80045a2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2221      	movs	r2, #33	@ 0x21
 80044cc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044ce:	f7fc fc31 	bl	8000d34 <HAL_GetTick>
 80044d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	88fa      	ldrh	r2, [r7, #6]
 80044d8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	88fa      	ldrh	r2, [r7, #6]
 80044e0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044ec:	d108      	bne.n	8004500 <HAL_UART_Transmit+0x68>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d104      	bne.n	8004500 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	61bb      	str	r3, [r7, #24]
 80044fe:	e003      	b.n	8004508 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004504:	2300      	movs	r3, #0
 8004506:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004508:	e02f      	b.n	800456a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	2200      	movs	r2, #0
 8004512:	2180      	movs	r1, #128	@ 0x80
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 ff71 	bl	80053fc <UART_WaitOnFlagUntilTimeout>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d004      	beq.n	800452a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2220      	movs	r2, #32
 8004524:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e03b      	b.n	80045a2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10b      	bne.n	8004548 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	881a      	ldrh	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800453c:	b292      	uxth	r2, r2
 800453e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	3302      	adds	r3, #2
 8004544:	61bb      	str	r3, [r7, #24]
 8004546:	e007      	b.n	8004558 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	781a      	ldrb	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	3301      	adds	r3, #1
 8004556:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800455e:	b29b      	uxth	r3, r3
 8004560:	3b01      	subs	r3, #1
 8004562:	b29a      	uxth	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004570:	b29b      	uxth	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1c9      	bne.n	800450a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2200      	movs	r2, #0
 800457e:	2140      	movs	r1, #64	@ 0x40
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 ff3b 	bl	80053fc <UART_WaitOnFlagUntilTimeout>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d004      	beq.n	8004596 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2220      	movs	r2, #32
 8004590:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e005      	b.n	80045a2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2220      	movs	r2, #32
 800459a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800459c:	2300      	movs	r3, #0
 800459e:	e000      	b.n	80045a2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80045a0:	2302      	movs	r3, #2
  }
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3720      	adds	r7, #32
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
	...

080045ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b0ba      	sub	sp, #232	@ 0xe8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80045d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80045d6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80045da:	4013      	ands	r3, r2
 80045dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80045e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d115      	bne.n	8004614 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80045e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045ec:	f003 0320 	and.w	r3, r3, #32
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00f      	beq.n	8004614 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045f8:	f003 0320 	and.w	r3, r3, #32
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d009      	beq.n	8004614 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 82ca 	beq.w	8004b9e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	4798      	blx	r3
      }
      return;
 8004612:	e2c4      	b.n	8004b9e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004614:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 8117 	beq.w	800484c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800461e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d106      	bne.n	8004638 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800462a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800462e:	4b85      	ldr	r3, [pc, #532]	@ (8004844 <HAL_UART_IRQHandler+0x298>)
 8004630:	4013      	ands	r3, r2
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 810a 	beq.w	800484c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b00      	cmp	r3, #0
 8004642:	d011      	beq.n	8004668 <HAL_UART_IRQHandler+0xbc>
 8004644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00b      	beq.n	8004668 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2201      	movs	r2, #1
 8004656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800465e:	f043 0201 	orr.w	r2, r3, #1
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d011      	beq.n	8004698 <HAL_UART_IRQHandler+0xec>
 8004674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00b      	beq.n	8004698 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2202      	movs	r2, #2
 8004686:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800468e:	f043 0204 	orr.w	r2, r3, #4
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d011      	beq.n	80046c8 <HAL_UART_IRQHandler+0x11c>
 80046a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00b      	beq.n	80046c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2204      	movs	r2, #4
 80046b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046be:	f043 0202 	orr.w	r2, r3, #2
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80046c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046cc:	f003 0308 	and.w	r3, r3, #8
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d017      	beq.n	8004704 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046d8:	f003 0320 	and.w	r3, r3, #32
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d105      	bne.n	80046ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80046e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00b      	beq.n	8004704 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2208      	movs	r2, #8
 80046f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046fa:	f043 0208 	orr.w	r2, r3, #8
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004708:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800470c:	2b00      	cmp	r3, #0
 800470e:	d012      	beq.n	8004736 <HAL_UART_IRQHandler+0x18a>
 8004710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004714:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00c      	beq.n	8004736 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004724:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800472c:	f043 0220 	orr.w	r2, r3, #32
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 8230 	beq.w	8004ba2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00d      	beq.n	800476a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800474e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004752:	f003 0320 	and.w	r3, r3, #32
 8004756:	2b00      	cmp	r3, #0
 8004758:	d007      	beq.n	800476a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004770:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800477e:	2b40      	cmp	r3, #64	@ 0x40
 8004780:	d005      	beq.n	800478e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004782:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004786:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800478a:	2b00      	cmp	r3, #0
 800478c:	d04f      	beq.n	800482e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fea1 	bl	80054d6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800479e:	2b40      	cmp	r3, #64	@ 0x40
 80047a0:	d141      	bne.n	8004826 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3308      	adds	r3, #8
 80047a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047b0:	e853 3f00 	ldrex	r3, [r3]
 80047b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80047b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80047bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	3308      	adds	r3, #8
 80047ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80047ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80047d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80047da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80047de:	e841 2300 	strex	r3, r2, [r1]
 80047e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80047e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1d9      	bne.n	80047a2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d013      	beq.n	800481e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047fa:	4a13      	ldr	r2, [pc, #76]	@ (8004848 <HAL_UART_IRQHandler+0x29c>)
 80047fc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004802:	4618      	mov	r0, r3
 8004804:	f7fe f8b3 	bl	800296e <HAL_DMA_Abort_IT>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d017      	beq.n	800483e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004818:	4610      	mov	r0, r2
 800481a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800481c:	e00f      	b.n	800483e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f9d4 	bl	8004bcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004824:	e00b      	b.n	800483e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f9d0 	bl	8004bcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800482c:	e007      	b.n	800483e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f9cc 	bl	8004bcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800483c:	e1b1      	b.n	8004ba2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800483e:	bf00      	nop
    return;
 8004840:	e1af      	b.n	8004ba2 <HAL_UART_IRQHandler+0x5f6>
 8004842:	bf00      	nop
 8004844:	04000120 	.word	0x04000120
 8004848:	0800559f 	.word	0x0800559f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004850:	2b01      	cmp	r3, #1
 8004852:	f040 816a 	bne.w	8004b2a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800485a:	f003 0310 	and.w	r3, r3, #16
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 8163 	beq.w	8004b2a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004868:	f003 0310 	and.w	r3, r3, #16
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 815c 	beq.w	8004b2a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2210      	movs	r2, #16
 8004878:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004884:	2b40      	cmp	r3, #64	@ 0x40
 8004886:	f040 80d4 	bne.w	8004a32 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004896:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 80ad 	beq.w	80049fa <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80048a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048aa:	429a      	cmp	r2, r3
 80048ac:	f080 80a5 	bcs.w	80049fa <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f040 8086 	bne.w	80049d8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048d8:	e853 3f00 	ldrex	r3, [r3]
 80048dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80048e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80048f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80048fa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004902:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800490e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1da      	bne.n	80048cc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3308      	adds	r3, #8
 800491c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004920:	e853 3f00 	ldrex	r3, [r3]
 8004924:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004926:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004928:	f023 0301 	bic.w	r3, r3, #1
 800492c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3308      	adds	r3, #8
 8004936:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800493a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800493e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004940:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004942:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004946:	e841 2300 	strex	r3, r2, [r1]
 800494a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800494c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1e1      	bne.n	8004916 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3308      	adds	r3, #8
 8004958:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800495c:	e853 3f00 	ldrex	r3, [r3]
 8004960:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004962:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004964:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004968:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3308      	adds	r3, #8
 8004972:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004976:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004978:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800497c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800497e:	e841 2300 	strex	r3, r2, [r1]
 8004982:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004984:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1e3      	bne.n	8004952 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2220      	movs	r2, #32
 800498e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049a0:	e853 3f00 	ldrex	r3, [r3]
 80049a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80049a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049a8:	f023 0310 	bic.w	r3, r3, #16
 80049ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80049c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80049c2:	e841 2300 	strex	r3, r2, [r1]
 80049c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80049c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1e4      	bne.n	8004998 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fd ff8d 	bl	80028f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	4619      	mov	r1, r3
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f8f4 	bl	8004be0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80049f8:	e0d5      	b.n	8004ba6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004a00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a04:	429a      	cmp	r2, r3
 8004a06:	f040 80ce 	bne.w	8004ba6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0320 	and.w	r3, r3, #32
 8004a16:	2b20      	cmp	r3, #32
 8004a18:	f040 80c5 	bne.w	8004ba6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004a28:	4619      	mov	r1, r3
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f8d8 	bl	8004be0 <HAL_UARTEx_RxEventCallback>
      return;
 8004a30:	e0b9      	b.n	8004ba6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f000 80ab 	beq.w	8004baa <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004a54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 80a6 	beq.w	8004baa <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a66:	e853 3f00 	ldrex	r3, [r3]
 8004a6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004a80:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a82:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a88:	e841 2300 	strex	r3, r2, [r1]
 8004a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1e4      	bne.n	8004a5e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3308      	adds	r3, #8
 8004a9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9e:	e853 3f00 	ldrex	r3, [r3]
 8004aa2:	623b      	str	r3, [r7, #32]
   return(result);
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	f023 0301 	bic.w	r3, r3, #1
 8004aaa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	3308      	adds	r3, #8
 8004ab4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004ab8:	633a      	str	r2, [r7, #48]	@ 0x30
 8004aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004abe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ac0:	e841 2300 	strex	r3, r2, [r1]
 8004ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e3      	bne.n	8004a94 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	e853 3f00 	ldrex	r3, [r3]
 8004aec:	60fb      	str	r3, [r7, #12]
   return(result);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f023 0310 	bic.w	r3, r3, #16
 8004af4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	461a      	mov	r2, r3
 8004afe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b02:	61fb      	str	r3, [r7, #28]
 8004b04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b06:	69b9      	ldr	r1, [r7, #24]
 8004b08:	69fa      	ldr	r2, [r7, #28]
 8004b0a:	e841 2300 	strex	r3, r2, [r1]
 8004b0e:	617b      	str	r3, [r7, #20]
   return(result);
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1e4      	bne.n	8004ae0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2202      	movs	r2, #2
 8004b1a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b20:	4619      	mov	r1, r3
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f85c 	bl	8004be0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b28:	e03f      	b.n	8004baa <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00e      	beq.n	8004b54 <HAL_UART_IRQHandler+0x5a8>
 8004b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d008      	beq.n	8004b54 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004b4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 fd66 	bl	800561e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b52:	e02d      	b.n	8004bb0 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00e      	beq.n	8004b7e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d008      	beq.n	8004b7e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d01c      	beq.n	8004bae <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	4798      	blx	r3
    }
    return;
 8004b7c:	e017      	b.n	8004bae <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d012      	beq.n	8004bb0 <HAL_UART_IRQHandler+0x604>
 8004b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00c      	beq.n	8004bb0 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 fd17 	bl	80055ca <UART_EndTransmit_IT>
    return;
 8004b9c:	e008      	b.n	8004bb0 <HAL_UART_IRQHandler+0x604>
      return;
 8004b9e:	bf00      	nop
 8004ba0:	e006      	b.n	8004bb0 <HAL_UART_IRQHandler+0x604>
    return;
 8004ba2:	bf00      	nop
 8004ba4:	e004      	b.n	8004bb0 <HAL_UART_IRQHandler+0x604>
      return;
 8004ba6:	bf00      	nop
 8004ba8:	e002      	b.n	8004bb0 <HAL_UART_IRQHandler+0x604>
      return;
 8004baa:	bf00      	nop
 8004bac:	e000      	b.n	8004bb0 <HAL_UART_IRQHandler+0x604>
    return;
 8004bae:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004bb0:	37e8      	adds	r7, #232	@ 0xe8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop

08004bb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bfc:	b08a      	sub	sp, #40	@ 0x28
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	431a      	orrs	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	431a      	orrs	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	4ba4      	ldr	r3, [pc, #656]	@ (8004eb8 <UART_SetConfig+0x2c0>)
 8004c28:	4013      	ands	r3, r2
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	6812      	ldr	r2, [r2, #0]
 8004c2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c30:	430b      	orrs	r3, r1
 8004c32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a99      	ldr	r2, [pc, #612]	@ (8004ebc <UART_SetConfig+0x2c4>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d004      	beq.n	8004c64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c60:	4313      	orrs	r3, r2
 8004c62:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c74:	430a      	orrs	r2, r1
 8004c76:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a90      	ldr	r2, [pc, #576]	@ (8004ec0 <UART_SetConfig+0x2c8>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d126      	bne.n	8004cd0 <UART_SetConfig+0xd8>
 8004c82:	4b90      	ldr	r3, [pc, #576]	@ (8004ec4 <UART_SetConfig+0x2cc>)
 8004c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c88:	f003 0303 	and.w	r3, r3, #3
 8004c8c:	2b03      	cmp	r3, #3
 8004c8e:	d81b      	bhi.n	8004cc8 <UART_SetConfig+0xd0>
 8004c90:	a201      	add	r2, pc, #4	@ (adr r2, 8004c98 <UART_SetConfig+0xa0>)
 8004c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c96:	bf00      	nop
 8004c98:	08004ca9 	.word	0x08004ca9
 8004c9c:	08004cb9 	.word	0x08004cb9
 8004ca0:	08004cb1 	.word	0x08004cb1
 8004ca4:	08004cc1 	.word	0x08004cc1
 8004ca8:	2301      	movs	r3, #1
 8004caa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cae:	e116      	b.n	8004ede <UART_SetConfig+0x2e6>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cb6:	e112      	b.n	8004ede <UART_SetConfig+0x2e6>
 8004cb8:	2304      	movs	r3, #4
 8004cba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cbe:	e10e      	b.n	8004ede <UART_SetConfig+0x2e6>
 8004cc0:	2308      	movs	r3, #8
 8004cc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cc6:	e10a      	b.n	8004ede <UART_SetConfig+0x2e6>
 8004cc8:	2310      	movs	r3, #16
 8004cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cce:	e106      	b.n	8004ede <UART_SetConfig+0x2e6>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a7c      	ldr	r2, [pc, #496]	@ (8004ec8 <UART_SetConfig+0x2d0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d138      	bne.n	8004d4c <UART_SetConfig+0x154>
 8004cda:	4b7a      	ldr	r3, [pc, #488]	@ (8004ec4 <UART_SetConfig+0x2cc>)
 8004cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce0:	f003 030c 	and.w	r3, r3, #12
 8004ce4:	2b0c      	cmp	r3, #12
 8004ce6:	d82d      	bhi.n	8004d44 <UART_SetConfig+0x14c>
 8004ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8004cf0 <UART_SetConfig+0xf8>)
 8004cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cee:	bf00      	nop
 8004cf0:	08004d25 	.word	0x08004d25
 8004cf4:	08004d45 	.word	0x08004d45
 8004cf8:	08004d45 	.word	0x08004d45
 8004cfc:	08004d45 	.word	0x08004d45
 8004d00:	08004d35 	.word	0x08004d35
 8004d04:	08004d45 	.word	0x08004d45
 8004d08:	08004d45 	.word	0x08004d45
 8004d0c:	08004d45 	.word	0x08004d45
 8004d10:	08004d2d 	.word	0x08004d2d
 8004d14:	08004d45 	.word	0x08004d45
 8004d18:	08004d45 	.word	0x08004d45
 8004d1c:	08004d45 	.word	0x08004d45
 8004d20:	08004d3d 	.word	0x08004d3d
 8004d24:	2300      	movs	r3, #0
 8004d26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d2a:	e0d8      	b.n	8004ede <UART_SetConfig+0x2e6>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d32:	e0d4      	b.n	8004ede <UART_SetConfig+0x2e6>
 8004d34:	2304      	movs	r3, #4
 8004d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d3a:	e0d0      	b.n	8004ede <UART_SetConfig+0x2e6>
 8004d3c:	2308      	movs	r3, #8
 8004d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d42:	e0cc      	b.n	8004ede <UART_SetConfig+0x2e6>
 8004d44:	2310      	movs	r3, #16
 8004d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d4a:	e0c8      	b.n	8004ede <UART_SetConfig+0x2e6>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a5e      	ldr	r2, [pc, #376]	@ (8004ecc <UART_SetConfig+0x2d4>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d125      	bne.n	8004da2 <UART_SetConfig+0x1aa>
 8004d56:	4b5b      	ldr	r3, [pc, #364]	@ (8004ec4 <UART_SetConfig+0x2cc>)
 8004d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d5c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004d60:	2b30      	cmp	r3, #48	@ 0x30
 8004d62:	d016      	beq.n	8004d92 <UART_SetConfig+0x19a>
 8004d64:	2b30      	cmp	r3, #48	@ 0x30
 8004d66:	d818      	bhi.n	8004d9a <UART_SetConfig+0x1a2>
 8004d68:	2b20      	cmp	r3, #32
 8004d6a:	d00a      	beq.n	8004d82 <UART_SetConfig+0x18a>
 8004d6c:	2b20      	cmp	r3, #32
 8004d6e:	d814      	bhi.n	8004d9a <UART_SetConfig+0x1a2>
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d002      	beq.n	8004d7a <UART_SetConfig+0x182>
 8004d74:	2b10      	cmp	r3, #16
 8004d76:	d008      	beq.n	8004d8a <UART_SetConfig+0x192>
 8004d78:	e00f      	b.n	8004d9a <UART_SetConfig+0x1a2>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d80:	e0ad      	b.n	8004ede <UART_SetConfig+0x2e6>
 8004d82:	2302      	movs	r3, #2
 8004d84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d88:	e0a9      	b.n	8004ede <UART_SetConfig+0x2e6>
 8004d8a:	2304      	movs	r3, #4
 8004d8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d90:	e0a5      	b.n	8004ede <UART_SetConfig+0x2e6>
 8004d92:	2308      	movs	r3, #8
 8004d94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d98:	e0a1      	b.n	8004ede <UART_SetConfig+0x2e6>
 8004d9a:	2310      	movs	r3, #16
 8004d9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004da0:	e09d      	b.n	8004ede <UART_SetConfig+0x2e6>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a4a      	ldr	r2, [pc, #296]	@ (8004ed0 <UART_SetConfig+0x2d8>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d125      	bne.n	8004df8 <UART_SetConfig+0x200>
 8004dac:	4b45      	ldr	r3, [pc, #276]	@ (8004ec4 <UART_SetConfig+0x2cc>)
 8004dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004db2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004db6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004db8:	d016      	beq.n	8004de8 <UART_SetConfig+0x1f0>
 8004dba:	2bc0      	cmp	r3, #192	@ 0xc0
 8004dbc:	d818      	bhi.n	8004df0 <UART_SetConfig+0x1f8>
 8004dbe:	2b80      	cmp	r3, #128	@ 0x80
 8004dc0:	d00a      	beq.n	8004dd8 <UART_SetConfig+0x1e0>
 8004dc2:	2b80      	cmp	r3, #128	@ 0x80
 8004dc4:	d814      	bhi.n	8004df0 <UART_SetConfig+0x1f8>
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <UART_SetConfig+0x1d8>
 8004dca:	2b40      	cmp	r3, #64	@ 0x40
 8004dcc:	d008      	beq.n	8004de0 <UART_SetConfig+0x1e8>
 8004dce:	e00f      	b.n	8004df0 <UART_SetConfig+0x1f8>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dd6:	e082      	b.n	8004ede <UART_SetConfig+0x2e6>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dde:	e07e      	b.n	8004ede <UART_SetConfig+0x2e6>
 8004de0:	2304      	movs	r3, #4
 8004de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004de6:	e07a      	b.n	8004ede <UART_SetConfig+0x2e6>
 8004de8:	2308      	movs	r3, #8
 8004dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dee:	e076      	b.n	8004ede <UART_SetConfig+0x2e6>
 8004df0:	2310      	movs	r3, #16
 8004df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004df6:	e072      	b.n	8004ede <UART_SetConfig+0x2e6>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a35      	ldr	r2, [pc, #212]	@ (8004ed4 <UART_SetConfig+0x2dc>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d12a      	bne.n	8004e58 <UART_SetConfig+0x260>
 8004e02:	4b30      	ldr	r3, [pc, #192]	@ (8004ec4 <UART_SetConfig+0x2cc>)
 8004e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e10:	d01a      	beq.n	8004e48 <UART_SetConfig+0x250>
 8004e12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e16:	d81b      	bhi.n	8004e50 <UART_SetConfig+0x258>
 8004e18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e1c:	d00c      	beq.n	8004e38 <UART_SetConfig+0x240>
 8004e1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e22:	d815      	bhi.n	8004e50 <UART_SetConfig+0x258>
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <UART_SetConfig+0x238>
 8004e28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e2c:	d008      	beq.n	8004e40 <UART_SetConfig+0x248>
 8004e2e:	e00f      	b.n	8004e50 <UART_SetConfig+0x258>
 8004e30:	2300      	movs	r3, #0
 8004e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e36:	e052      	b.n	8004ede <UART_SetConfig+0x2e6>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e3e:	e04e      	b.n	8004ede <UART_SetConfig+0x2e6>
 8004e40:	2304      	movs	r3, #4
 8004e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e46:	e04a      	b.n	8004ede <UART_SetConfig+0x2e6>
 8004e48:	2308      	movs	r3, #8
 8004e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e4e:	e046      	b.n	8004ede <UART_SetConfig+0x2e6>
 8004e50:	2310      	movs	r3, #16
 8004e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e56:	e042      	b.n	8004ede <UART_SetConfig+0x2e6>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a17      	ldr	r2, [pc, #92]	@ (8004ebc <UART_SetConfig+0x2c4>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d13a      	bne.n	8004ed8 <UART_SetConfig+0x2e0>
 8004e62:	4b18      	ldr	r3, [pc, #96]	@ (8004ec4 <UART_SetConfig+0x2cc>)
 8004e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e68:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004e6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e70:	d01a      	beq.n	8004ea8 <UART_SetConfig+0x2b0>
 8004e72:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e76:	d81b      	bhi.n	8004eb0 <UART_SetConfig+0x2b8>
 8004e78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e7c:	d00c      	beq.n	8004e98 <UART_SetConfig+0x2a0>
 8004e7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e82:	d815      	bhi.n	8004eb0 <UART_SetConfig+0x2b8>
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <UART_SetConfig+0x298>
 8004e88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e8c:	d008      	beq.n	8004ea0 <UART_SetConfig+0x2a8>
 8004e8e:	e00f      	b.n	8004eb0 <UART_SetConfig+0x2b8>
 8004e90:	2300      	movs	r3, #0
 8004e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e96:	e022      	b.n	8004ede <UART_SetConfig+0x2e6>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e9e:	e01e      	b.n	8004ede <UART_SetConfig+0x2e6>
 8004ea0:	2304      	movs	r3, #4
 8004ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ea6:	e01a      	b.n	8004ede <UART_SetConfig+0x2e6>
 8004ea8:	2308      	movs	r3, #8
 8004eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eae:	e016      	b.n	8004ede <UART_SetConfig+0x2e6>
 8004eb0:	2310      	movs	r3, #16
 8004eb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eb6:	e012      	b.n	8004ede <UART_SetConfig+0x2e6>
 8004eb8:	efff69f3 	.word	0xefff69f3
 8004ebc:	40008000 	.word	0x40008000
 8004ec0:	40013800 	.word	0x40013800
 8004ec4:	40021000 	.word	0x40021000
 8004ec8:	40004400 	.word	0x40004400
 8004ecc:	40004800 	.word	0x40004800
 8004ed0:	40004c00 	.word	0x40004c00
 8004ed4:	40005000 	.word	0x40005000
 8004ed8:	2310      	movs	r3, #16
 8004eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a9f      	ldr	r2, [pc, #636]	@ (8005160 <UART_SetConfig+0x568>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d17a      	bne.n	8004fde <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ee8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004eec:	2b08      	cmp	r3, #8
 8004eee:	d824      	bhi.n	8004f3a <UART_SetConfig+0x342>
 8004ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ef8 <UART_SetConfig+0x300>)
 8004ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef6:	bf00      	nop
 8004ef8:	08004f1d 	.word	0x08004f1d
 8004efc:	08004f3b 	.word	0x08004f3b
 8004f00:	08004f25 	.word	0x08004f25
 8004f04:	08004f3b 	.word	0x08004f3b
 8004f08:	08004f2b 	.word	0x08004f2b
 8004f0c:	08004f3b 	.word	0x08004f3b
 8004f10:	08004f3b 	.word	0x08004f3b
 8004f14:	08004f3b 	.word	0x08004f3b
 8004f18:	08004f33 	.word	0x08004f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f1c:	f7fe fd26 	bl	800396c <HAL_RCC_GetPCLK1Freq>
 8004f20:	61f8      	str	r0, [r7, #28]
        break;
 8004f22:	e010      	b.n	8004f46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f24:	4b8f      	ldr	r3, [pc, #572]	@ (8005164 <UART_SetConfig+0x56c>)
 8004f26:	61fb      	str	r3, [r7, #28]
        break;
 8004f28:	e00d      	b.n	8004f46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f2a:	f7fe fc87 	bl	800383c <HAL_RCC_GetSysClockFreq>
 8004f2e:	61f8      	str	r0, [r7, #28]
        break;
 8004f30:	e009      	b.n	8004f46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f36:	61fb      	str	r3, [r7, #28]
        break;
 8004f38:	e005      	b.n	8004f46 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004f44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 80fb 	beq.w	8005144 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	4613      	mov	r3, r2
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	4413      	add	r3, r2
 8004f58:	69fa      	ldr	r2, [r7, #28]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d305      	bcc.n	8004f6a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f64:	69fa      	ldr	r2, [r7, #28]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d903      	bls.n	8004f72 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004f70:	e0e8      	b.n	8005144 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	2200      	movs	r2, #0
 8004f76:	461c      	mov	r4, r3
 8004f78:	4615      	mov	r5, r2
 8004f7a:	f04f 0200 	mov.w	r2, #0
 8004f7e:	f04f 0300 	mov.w	r3, #0
 8004f82:	022b      	lsls	r3, r5, #8
 8004f84:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004f88:	0222      	lsls	r2, r4, #8
 8004f8a:	68f9      	ldr	r1, [r7, #12]
 8004f8c:	6849      	ldr	r1, [r1, #4]
 8004f8e:	0849      	lsrs	r1, r1, #1
 8004f90:	2000      	movs	r0, #0
 8004f92:	4688      	mov	r8, r1
 8004f94:	4681      	mov	r9, r0
 8004f96:	eb12 0a08 	adds.w	sl, r2, r8
 8004f9a:	eb43 0b09 	adc.w	fp, r3, r9
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	603b      	str	r3, [r7, #0]
 8004fa6:	607a      	str	r2, [r7, #4]
 8004fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fac:	4650      	mov	r0, sl
 8004fae:	4659      	mov	r1, fp
 8004fb0:	f7fb f966 	bl	8000280 <__aeabi_uldivmod>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4613      	mov	r3, r2
 8004fba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fc2:	d308      	bcc.n	8004fd6 <UART_SetConfig+0x3de>
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fca:	d204      	bcs.n	8004fd6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	60da      	str	r2, [r3, #12]
 8004fd4:	e0b6      	b.n	8005144 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004fdc:	e0b2      	b.n	8005144 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fe6:	d15e      	bne.n	80050a6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004fe8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d828      	bhi.n	8005042 <UART_SetConfig+0x44a>
 8004ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ff8 <UART_SetConfig+0x400>)
 8004ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff6:	bf00      	nop
 8004ff8:	0800501d 	.word	0x0800501d
 8004ffc:	08005025 	.word	0x08005025
 8005000:	0800502d 	.word	0x0800502d
 8005004:	08005043 	.word	0x08005043
 8005008:	08005033 	.word	0x08005033
 800500c:	08005043 	.word	0x08005043
 8005010:	08005043 	.word	0x08005043
 8005014:	08005043 	.word	0x08005043
 8005018:	0800503b 	.word	0x0800503b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800501c:	f7fe fca6 	bl	800396c <HAL_RCC_GetPCLK1Freq>
 8005020:	61f8      	str	r0, [r7, #28]
        break;
 8005022:	e014      	b.n	800504e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005024:	f7fe fcb8 	bl	8003998 <HAL_RCC_GetPCLK2Freq>
 8005028:	61f8      	str	r0, [r7, #28]
        break;
 800502a:	e010      	b.n	800504e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800502c:	4b4d      	ldr	r3, [pc, #308]	@ (8005164 <UART_SetConfig+0x56c>)
 800502e:	61fb      	str	r3, [r7, #28]
        break;
 8005030:	e00d      	b.n	800504e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005032:	f7fe fc03 	bl	800383c <HAL_RCC_GetSysClockFreq>
 8005036:	61f8      	str	r0, [r7, #28]
        break;
 8005038:	e009      	b.n	800504e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800503a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800503e:	61fb      	str	r3, [r7, #28]
        break;
 8005040:	e005      	b.n	800504e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005042:	2300      	movs	r3, #0
 8005044:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800504c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d077      	beq.n	8005144 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	005a      	lsls	r2, r3, #1
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	085b      	lsrs	r3, r3, #1
 800505e:	441a      	add	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	fbb2 f3f3 	udiv	r3, r2, r3
 8005068:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	2b0f      	cmp	r3, #15
 800506e:	d916      	bls.n	800509e <UART_SetConfig+0x4a6>
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005076:	d212      	bcs.n	800509e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	b29b      	uxth	r3, r3
 800507c:	f023 030f 	bic.w	r3, r3, #15
 8005080:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	085b      	lsrs	r3, r3, #1
 8005086:	b29b      	uxth	r3, r3
 8005088:	f003 0307 	and.w	r3, r3, #7
 800508c:	b29a      	uxth	r2, r3
 800508e:	8afb      	ldrh	r3, [r7, #22]
 8005090:	4313      	orrs	r3, r2
 8005092:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	8afa      	ldrh	r2, [r7, #22]
 800509a:	60da      	str	r2, [r3, #12]
 800509c:	e052      	b.n	8005144 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80050a4:	e04e      	b.n	8005144 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80050aa:	2b08      	cmp	r3, #8
 80050ac:	d827      	bhi.n	80050fe <UART_SetConfig+0x506>
 80050ae:	a201      	add	r2, pc, #4	@ (adr r2, 80050b4 <UART_SetConfig+0x4bc>)
 80050b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b4:	080050d9 	.word	0x080050d9
 80050b8:	080050e1 	.word	0x080050e1
 80050bc:	080050e9 	.word	0x080050e9
 80050c0:	080050ff 	.word	0x080050ff
 80050c4:	080050ef 	.word	0x080050ef
 80050c8:	080050ff 	.word	0x080050ff
 80050cc:	080050ff 	.word	0x080050ff
 80050d0:	080050ff 	.word	0x080050ff
 80050d4:	080050f7 	.word	0x080050f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050d8:	f7fe fc48 	bl	800396c <HAL_RCC_GetPCLK1Freq>
 80050dc:	61f8      	str	r0, [r7, #28]
        break;
 80050de:	e014      	b.n	800510a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050e0:	f7fe fc5a 	bl	8003998 <HAL_RCC_GetPCLK2Freq>
 80050e4:	61f8      	str	r0, [r7, #28]
        break;
 80050e6:	e010      	b.n	800510a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050e8:	4b1e      	ldr	r3, [pc, #120]	@ (8005164 <UART_SetConfig+0x56c>)
 80050ea:	61fb      	str	r3, [r7, #28]
        break;
 80050ec:	e00d      	b.n	800510a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ee:	f7fe fba5 	bl	800383c <HAL_RCC_GetSysClockFreq>
 80050f2:	61f8      	str	r0, [r7, #28]
        break;
 80050f4:	e009      	b.n	800510a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050fa:	61fb      	str	r3, [r7, #28]
        break;
 80050fc:	e005      	b.n	800510a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80050fe:	2300      	movs	r3, #0
 8005100:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005108:	bf00      	nop
    }

    if (pclk != 0U)
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d019      	beq.n	8005144 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	085a      	lsrs	r2, r3, #1
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	441a      	add	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005122:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	2b0f      	cmp	r3, #15
 8005128:	d909      	bls.n	800513e <UART_SetConfig+0x546>
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005130:	d205      	bcs.n	800513e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	b29a      	uxth	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	60da      	str	r2, [r3, #12]
 800513c:	e002      	b.n	8005144 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005150:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005154:	4618      	mov	r0, r3
 8005156:	3728      	adds	r7, #40	@ 0x28
 8005158:	46bd      	mov	sp, r7
 800515a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800515e:	bf00      	nop
 8005160:	40008000 	.word	0x40008000
 8005164:	00f42400 	.word	0x00f42400

08005168 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005174:	f003 0308 	and.w	r3, r3, #8
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00a      	beq.n	80051d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051da:	f003 0304 	and.w	r3, r3, #4
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fc:	f003 0310 	and.w	r3, r3, #16
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00a      	beq.n	800521a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521e:	f003 0320 	and.w	r3, r3, #32
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00a      	beq.n	800523c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	430a      	orrs	r2, r1
 800523a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005244:	2b00      	cmp	r3, #0
 8005246:	d01a      	beq.n	800527e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005262:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005266:	d10a      	bne.n	800527e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	430a      	orrs	r2, r1
 800529e:	605a      	str	r2, [r3, #4]
  }
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b098      	sub	sp, #96	@ 0x60
 80052b0:	af02      	add	r7, sp, #8
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052bc:	f7fb fd3a 	bl	8000d34 <HAL_GetTick>
 80052c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0308 	and.w	r3, r3, #8
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d12e      	bne.n	800532e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052d8:	2200      	movs	r2, #0
 80052da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f88c 	bl	80053fc <UART_WaitOnFlagUntilTimeout>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d021      	beq.n	800532e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f2:	e853 3f00 	ldrex	r3, [r3]
 80052f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	461a      	mov	r2, r3
 8005306:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005308:	647b      	str	r3, [r7, #68]	@ 0x44
 800530a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800530e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005310:	e841 2300 	strex	r3, r2, [r1]
 8005314:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1e6      	bne.n	80052ea <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2220      	movs	r2, #32
 8005320:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e062      	b.n	80053f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	2b04      	cmp	r3, #4
 800533a:	d149      	bne.n	80053d0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800533c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005344:	2200      	movs	r2, #0
 8005346:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f856 	bl	80053fc <UART_WaitOnFlagUntilTimeout>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d03c      	beq.n	80053d0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535e:	e853 3f00 	ldrex	r3, [r3]
 8005362:	623b      	str	r3, [r7, #32]
   return(result);
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800536a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	461a      	mov	r2, r3
 8005372:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005374:	633b      	str	r3, [r7, #48]	@ 0x30
 8005376:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005378:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800537a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800537c:	e841 2300 	strex	r3, r2, [r1]
 8005380:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1e6      	bne.n	8005356 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3308      	adds	r3, #8
 800538e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	e853 3f00 	ldrex	r3, [r3]
 8005396:	60fb      	str	r3, [r7, #12]
   return(result);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0301 	bic.w	r3, r3, #1
 800539e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	3308      	adds	r3, #8
 80053a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053a8:	61fa      	str	r2, [r7, #28]
 80053aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ac:	69b9      	ldr	r1, [r7, #24]
 80053ae:	69fa      	ldr	r2, [r7, #28]
 80053b0:	e841 2300 	strex	r3, r2, [r1]
 80053b4:	617b      	str	r3, [r7, #20]
   return(result);
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1e5      	bne.n	8005388 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2220      	movs	r2, #32
 80053c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e011      	b.n	80053f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2220      	movs	r2, #32
 80053d4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2220      	movs	r2, #32
 80053da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3758      	adds	r7, #88	@ 0x58
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	603b      	str	r3, [r7, #0]
 8005408:	4613      	mov	r3, r2
 800540a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800540c:	e04f      	b.n	80054ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005414:	d04b      	beq.n	80054ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005416:	f7fb fc8d 	bl	8000d34 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	429a      	cmp	r2, r3
 8005424:	d302      	bcc.n	800542c <UART_WaitOnFlagUntilTimeout+0x30>
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e04e      	b.n	80054ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0304 	and.w	r3, r3, #4
 800543a:	2b00      	cmp	r3, #0
 800543c:	d037      	beq.n	80054ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2b80      	cmp	r3, #128	@ 0x80
 8005442:	d034      	beq.n	80054ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2b40      	cmp	r3, #64	@ 0x40
 8005448:	d031      	beq.n	80054ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	f003 0308 	and.w	r3, r3, #8
 8005454:	2b08      	cmp	r3, #8
 8005456:	d110      	bne.n	800547a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2208      	movs	r2, #8
 800545e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 f838 	bl	80054d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2208      	movs	r2, #8
 800546a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e029      	b.n	80054ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005484:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005488:	d111      	bne.n	80054ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005492:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 f81e 	bl	80054d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2220      	movs	r2, #32
 800549e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e00f      	b.n	80054ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69da      	ldr	r2, [r3, #28]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4013      	ands	r3, r2
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	bf0c      	ite	eq
 80054be:	2301      	moveq	r3, #1
 80054c0:	2300      	movne	r3, #0
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	461a      	mov	r2, r3
 80054c6:	79fb      	ldrb	r3, [r7, #7]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d0a0      	beq.n	800540e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b095      	sub	sp, #84	@ 0x54
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e6:	e853 3f00 	ldrex	r3, [r3]
 80054ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	461a      	mov	r2, r3
 80054fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80054fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005500:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005502:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005504:	e841 2300 	strex	r3, r2, [r1]
 8005508:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800550a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e6      	bne.n	80054de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	3308      	adds	r3, #8
 8005516:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	e853 3f00 	ldrex	r3, [r3]
 800551e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	f023 0301 	bic.w	r3, r3, #1
 8005526:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3308      	adds	r3, #8
 800552e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005530:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005532:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005534:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005536:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005538:	e841 2300 	strex	r3, r2, [r1]
 800553c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800553e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1e5      	bne.n	8005510 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005548:	2b01      	cmp	r3, #1
 800554a:	d118      	bne.n	800557e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	e853 3f00 	ldrex	r3, [r3]
 8005558:	60bb      	str	r3, [r7, #8]
   return(result);
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	f023 0310 	bic.w	r3, r3, #16
 8005560:	647b      	str	r3, [r7, #68]	@ 0x44
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800556a:	61bb      	str	r3, [r7, #24]
 800556c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556e:	6979      	ldr	r1, [r7, #20]
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	e841 2300 	strex	r3, r2, [r1]
 8005576:	613b      	str	r3, [r7, #16]
   return(result);
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1e6      	bne.n	800554c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2220      	movs	r2, #32
 8005582:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005592:	bf00      	nop
 8005594:	3754      	adds	r7, #84	@ 0x54
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b084      	sub	sp, #16
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f7ff fb05 	bl	8004bcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055c2:	bf00      	nop
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b088      	sub	sp, #32
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	e853 3f00 	ldrex	r3, [r3]
 80055de:	60bb      	str	r3, [r7, #8]
   return(result);
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055e6:	61fb      	str	r3, [r7, #28]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	461a      	mov	r2, r3
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	61bb      	str	r3, [r7, #24]
 80055f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f4:	6979      	ldr	r1, [r7, #20]
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	e841 2300 	strex	r3, r2, [r1]
 80055fc:	613b      	str	r3, [r7, #16]
   return(result);
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1e6      	bne.n	80055d2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2220      	movs	r2, #32
 8005608:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f7ff fad1 	bl	8004bb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005616:	bf00      	nop
 8005618:	3720      	adds	r7, #32
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005626:	bf00      	nop
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
	...

08005634 <siprintf>:
 8005634:	b40e      	push	{r1, r2, r3}
 8005636:	b500      	push	{lr}
 8005638:	b09c      	sub	sp, #112	@ 0x70
 800563a:	ab1d      	add	r3, sp, #116	@ 0x74
 800563c:	9002      	str	r0, [sp, #8]
 800563e:	9006      	str	r0, [sp, #24]
 8005640:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005644:	4809      	ldr	r0, [pc, #36]	@ (800566c <siprintf+0x38>)
 8005646:	9107      	str	r1, [sp, #28]
 8005648:	9104      	str	r1, [sp, #16]
 800564a:	4909      	ldr	r1, [pc, #36]	@ (8005670 <siprintf+0x3c>)
 800564c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005650:	9105      	str	r1, [sp, #20]
 8005652:	6800      	ldr	r0, [r0, #0]
 8005654:	9301      	str	r3, [sp, #4]
 8005656:	a902      	add	r1, sp, #8
 8005658:	f000 f994 	bl	8005984 <_svfiprintf_r>
 800565c:	9b02      	ldr	r3, [sp, #8]
 800565e:	2200      	movs	r2, #0
 8005660:	701a      	strb	r2, [r3, #0]
 8005662:	b01c      	add	sp, #112	@ 0x70
 8005664:	f85d eb04 	ldr.w	lr, [sp], #4
 8005668:	b003      	add	sp, #12
 800566a:	4770      	bx	lr
 800566c:	2000000c 	.word	0x2000000c
 8005670:	ffff0208 	.word	0xffff0208

08005674 <memset>:
 8005674:	4402      	add	r2, r0
 8005676:	4603      	mov	r3, r0
 8005678:	4293      	cmp	r3, r2
 800567a:	d100      	bne.n	800567e <memset+0xa>
 800567c:	4770      	bx	lr
 800567e:	f803 1b01 	strb.w	r1, [r3], #1
 8005682:	e7f9      	b.n	8005678 <memset+0x4>

08005684 <__errno>:
 8005684:	4b01      	ldr	r3, [pc, #4]	@ (800568c <__errno+0x8>)
 8005686:	6818      	ldr	r0, [r3, #0]
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	2000000c 	.word	0x2000000c

08005690 <__libc_init_array>:
 8005690:	b570      	push	{r4, r5, r6, lr}
 8005692:	4d0d      	ldr	r5, [pc, #52]	@ (80056c8 <__libc_init_array+0x38>)
 8005694:	4c0d      	ldr	r4, [pc, #52]	@ (80056cc <__libc_init_array+0x3c>)
 8005696:	1b64      	subs	r4, r4, r5
 8005698:	10a4      	asrs	r4, r4, #2
 800569a:	2600      	movs	r6, #0
 800569c:	42a6      	cmp	r6, r4
 800569e:	d109      	bne.n	80056b4 <__libc_init_array+0x24>
 80056a0:	4d0b      	ldr	r5, [pc, #44]	@ (80056d0 <__libc_init_array+0x40>)
 80056a2:	4c0c      	ldr	r4, [pc, #48]	@ (80056d4 <__libc_init_array+0x44>)
 80056a4:	f000 fc66 	bl	8005f74 <_init>
 80056a8:	1b64      	subs	r4, r4, r5
 80056aa:	10a4      	asrs	r4, r4, #2
 80056ac:	2600      	movs	r6, #0
 80056ae:	42a6      	cmp	r6, r4
 80056b0:	d105      	bne.n	80056be <__libc_init_array+0x2e>
 80056b2:	bd70      	pop	{r4, r5, r6, pc}
 80056b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80056b8:	4798      	blx	r3
 80056ba:	3601      	adds	r6, #1
 80056bc:	e7ee      	b.n	800569c <__libc_init_array+0xc>
 80056be:	f855 3b04 	ldr.w	r3, [r5], #4
 80056c2:	4798      	blx	r3
 80056c4:	3601      	adds	r6, #1
 80056c6:	e7f2      	b.n	80056ae <__libc_init_array+0x1e>
 80056c8:	08006020 	.word	0x08006020
 80056cc:	08006020 	.word	0x08006020
 80056d0:	08006020 	.word	0x08006020
 80056d4:	08006024 	.word	0x08006024

080056d8 <__retarget_lock_acquire_recursive>:
 80056d8:	4770      	bx	lr

080056da <__retarget_lock_release_recursive>:
 80056da:	4770      	bx	lr

080056dc <_free_r>:
 80056dc:	b538      	push	{r3, r4, r5, lr}
 80056de:	4605      	mov	r5, r0
 80056e0:	2900      	cmp	r1, #0
 80056e2:	d041      	beq.n	8005768 <_free_r+0x8c>
 80056e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056e8:	1f0c      	subs	r4, r1, #4
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	bfb8      	it	lt
 80056ee:	18e4      	addlt	r4, r4, r3
 80056f0:	f000 f8e0 	bl	80058b4 <__malloc_lock>
 80056f4:	4a1d      	ldr	r2, [pc, #116]	@ (800576c <_free_r+0x90>)
 80056f6:	6813      	ldr	r3, [r2, #0]
 80056f8:	b933      	cbnz	r3, 8005708 <_free_r+0x2c>
 80056fa:	6063      	str	r3, [r4, #4]
 80056fc:	6014      	str	r4, [r2, #0]
 80056fe:	4628      	mov	r0, r5
 8005700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005704:	f000 b8dc 	b.w	80058c0 <__malloc_unlock>
 8005708:	42a3      	cmp	r3, r4
 800570a:	d908      	bls.n	800571e <_free_r+0x42>
 800570c:	6820      	ldr	r0, [r4, #0]
 800570e:	1821      	adds	r1, r4, r0
 8005710:	428b      	cmp	r3, r1
 8005712:	bf01      	itttt	eq
 8005714:	6819      	ldreq	r1, [r3, #0]
 8005716:	685b      	ldreq	r3, [r3, #4]
 8005718:	1809      	addeq	r1, r1, r0
 800571a:	6021      	streq	r1, [r4, #0]
 800571c:	e7ed      	b.n	80056fa <_free_r+0x1e>
 800571e:	461a      	mov	r2, r3
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	b10b      	cbz	r3, 8005728 <_free_r+0x4c>
 8005724:	42a3      	cmp	r3, r4
 8005726:	d9fa      	bls.n	800571e <_free_r+0x42>
 8005728:	6811      	ldr	r1, [r2, #0]
 800572a:	1850      	adds	r0, r2, r1
 800572c:	42a0      	cmp	r0, r4
 800572e:	d10b      	bne.n	8005748 <_free_r+0x6c>
 8005730:	6820      	ldr	r0, [r4, #0]
 8005732:	4401      	add	r1, r0
 8005734:	1850      	adds	r0, r2, r1
 8005736:	4283      	cmp	r3, r0
 8005738:	6011      	str	r1, [r2, #0]
 800573a:	d1e0      	bne.n	80056fe <_free_r+0x22>
 800573c:	6818      	ldr	r0, [r3, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	6053      	str	r3, [r2, #4]
 8005742:	4408      	add	r0, r1
 8005744:	6010      	str	r0, [r2, #0]
 8005746:	e7da      	b.n	80056fe <_free_r+0x22>
 8005748:	d902      	bls.n	8005750 <_free_r+0x74>
 800574a:	230c      	movs	r3, #12
 800574c:	602b      	str	r3, [r5, #0]
 800574e:	e7d6      	b.n	80056fe <_free_r+0x22>
 8005750:	6820      	ldr	r0, [r4, #0]
 8005752:	1821      	adds	r1, r4, r0
 8005754:	428b      	cmp	r3, r1
 8005756:	bf04      	itt	eq
 8005758:	6819      	ldreq	r1, [r3, #0]
 800575a:	685b      	ldreq	r3, [r3, #4]
 800575c:	6063      	str	r3, [r4, #4]
 800575e:	bf04      	itt	eq
 8005760:	1809      	addeq	r1, r1, r0
 8005762:	6021      	streq	r1, [r4, #0]
 8005764:	6054      	str	r4, [r2, #4]
 8005766:	e7ca      	b.n	80056fe <_free_r+0x22>
 8005768:	bd38      	pop	{r3, r4, r5, pc}
 800576a:	bf00      	nop
 800576c:	200002c8 	.word	0x200002c8

08005770 <sbrk_aligned>:
 8005770:	b570      	push	{r4, r5, r6, lr}
 8005772:	4e0f      	ldr	r6, [pc, #60]	@ (80057b0 <sbrk_aligned+0x40>)
 8005774:	460c      	mov	r4, r1
 8005776:	6831      	ldr	r1, [r6, #0]
 8005778:	4605      	mov	r5, r0
 800577a:	b911      	cbnz	r1, 8005782 <sbrk_aligned+0x12>
 800577c:	f000 fba6 	bl	8005ecc <_sbrk_r>
 8005780:	6030      	str	r0, [r6, #0]
 8005782:	4621      	mov	r1, r4
 8005784:	4628      	mov	r0, r5
 8005786:	f000 fba1 	bl	8005ecc <_sbrk_r>
 800578a:	1c43      	adds	r3, r0, #1
 800578c:	d103      	bne.n	8005796 <sbrk_aligned+0x26>
 800578e:	f04f 34ff 	mov.w	r4, #4294967295
 8005792:	4620      	mov	r0, r4
 8005794:	bd70      	pop	{r4, r5, r6, pc}
 8005796:	1cc4      	adds	r4, r0, #3
 8005798:	f024 0403 	bic.w	r4, r4, #3
 800579c:	42a0      	cmp	r0, r4
 800579e:	d0f8      	beq.n	8005792 <sbrk_aligned+0x22>
 80057a0:	1a21      	subs	r1, r4, r0
 80057a2:	4628      	mov	r0, r5
 80057a4:	f000 fb92 	bl	8005ecc <_sbrk_r>
 80057a8:	3001      	adds	r0, #1
 80057aa:	d1f2      	bne.n	8005792 <sbrk_aligned+0x22>
 80057ac:	e7ef      	b.n	800578e <sbrk_aligned+0x1e>
 80057ae:	bf00      	nop
 80057b0:	200002c4 	.word	0x200002c4

080057b4 <_malloc_r>:
 80057b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057b8:	1ccd      	adds	r5, r1, #3
 80057ba:	f025 0503 	bic.w	r5, r5, #3
 80057be:	3508      	adds	r5, #8
 80057c0:	2d0c      	cmp	r5, #12
 80057c2:	bf38      	it	cc
 80057c4:	250c      	movcc	r5, #12
 80057c6:	2d00      	cmp	r5, #0
 80057c8:	4606      	mov	r6, r0
 80057ca:	db01      	blt.n	80057d0 <_malloc_r+0x1c>
 80057cc:	42a9      	cmp	r1, r5
 80057ce:	d904      	bls.n	80057da <_malloc_r+0x26>
 80057d0:	230c      	movs	r3, #12
 80057d2:	6033      	str	r3, [r6, #0]
 80057d4:	2000      	movs	r0, #0
 80057d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80058b0 <_malloc_r+0xfc>
 80057de:	f000 f869 	bl	80058b4 <__malloc_lock>
 80057e2:	f8d8 3000 	ldr.w	r3, [r8]
 80057e6:	461c      	mov	r4, r3
 80057e8:	bb44      	cbnz	r4, 800583c <_malloc_r+0x88>
 80057ea:	4629      	mov	r1, r5
 80057ec:	4630      	mov	r0, r6
 80057ee:	f7ff ffbf 	bl	8005770 <sbrk_aligned>
 80057f2:	1c43      	adds	r3, r0, #1
 80057f4:	4604      	mov	r4, r0
 80057f6:	d158      	bne.n	80058aa <_malloc_r+0xf6>
 80057f8:	f8d8 4000 	ldr.w	r4, [r8]
 80057fc:	4627      	mov	r7, r4
 80057fe:	2f00      	cmp	r7, #0
 8005800:	d143      	bne.n	800588a <_malloc_r+0xd6>
 8005802:	2c00      	cmp	r4, #0
 8005804:	d04b      	beq.n	800589e <_malloc_r+0xea>
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	4639      	mov	r1, r7
 800580a:	4630      	mov	r0, r6
 800580c:	eb04 0903 	add.w	r9, r4, r3
 8005810:	f000 fb5c 	bl	8005ecc <_sbrk_r>
 8005814:	4581      	cmp	r9, r0
 8005816:	d142      	bne.n	800589e <_malloc_r+0xea>
 8005818:	6821      	ldr	r1, [r4, #0]
 800581a:	1a6d      	subs	r5, r5, r1
 800581c:	4629      	mov	r1, r5
 800581e:	4630      	mov	r0, r6
 8005820:	f7ff ffa6 	bl	8005770 <sbrk_aligned>
 8005824:	3001      	adds	r0, #1
 8005826:	d03a      	beq.n	800589e <_malloc_r+0xea>
 8005828:	6823      	ldr	r3, [r4, #0]
 800582a:	442b      	add	r3, r5
 800582c:	6023      	str	r3, [r4, #0]
 800582e:	f8d8 3000 	ldr.w	r3, [r8]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	bb62      	cbnz	r2, 8005890 <_malloc_r+0xdc>
 8005836:	f8c8 7000 	str.w	r7, [r8]
 800583a:	e00f      	b.n	800585c <_malloc_r+0xa8>
 800583c:	6822      	ldr	r2, [r4, #0]
 800583e:	1b52      	subs	r2, r2, r5
 8005840:	d420      	bmi.n	8005884 <_malloc_r+0xd0>
 8005842:	2a0b      	cmp	r2, #11
 8005844:	d917      	bls.n	8005876 <_malloc_r+0xc2>
 8005846:	1961      	adds	r1, r4, r5
 8005848:	42a3      	cmp	r3, r4
 800584a:	6025      	str	r5, [r4, #0]
 800584c:	bf18      	it	ne
 800584e:	6059      	strne	r1, [r3, #4]
 8005850:	6863      	ldr	r3, [r4, #4]
 8005852:	bf08      	it	eq
 8005854:	f8c8 1000 	streq.w	r1, [r8]
 8005858:	5162      	str	r2, [r4, r5]
 800585a:	604b      	str	r3, [r1, #4]
 800585c:	4630      	mov	r0, r6
 800585e:	f000 f82f 	bl	80058c0 <__malloc_unlock>
 8005862:	f104 000b 	add.w	r0, r4, #11
 8005866:	1d23      	adds	r3, r4, #4
 8005868:	f020 0007 	bic.w	r0, r0, #7
 800586c:	1ac2      	subs	r2, r0, r3
 800586e:	bf1c      	itt	ne
 8005870:	1a1b      	subne	r3, r3, r0
 8005872:	50a3      	strne	r3, [r4, r2]
 8005874:	e7af      	b.n	80057d6 <_malloc_r+0x22>
 8005876:	6862      	ldr	r2, [r4, #4]
 8005878:	42a3      	cmp	r3, r4
 800587a:	bf0c      	ite	eq
 800587c:	f8c8 2000 	streq.w	r2, [r8]
 8005880:	605a      	strne	r2, [r3, #4]
 8005882:	e7eb      	b.n	800585c <_malloc_r+0xa8>
 8005884:	4623      	mov	r3, r4
 8005886:	6864      	ldr	r4, [r4, #4]
 8005888:	e7ae      	b.n	80057e8 <_malloc_r+0x34>
 800588a:	463c      	mov	r4, r7
 800588c:	687f      	ldr	r7, [r7, #4]
 800588e:	e7b6      	b.n	80057fe <_malloc_r+0x4a>
 8005890:	461a      	mov	r2, r3
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	42a3      	cmp	r3, r4
 8005896:	d1fb      	bne.n	8005890 <_malloc_r+0xdc>
 8005898:	2300      	movs	r3, #0
 800589a:	6053      	str	r3, [r2, #4]
 800589c:	e7de      	b.n	800585c <_malloc_r+0xa8>
 800589e:	230c      	movs	r3, #12
 80058a0:	6033      	str	r3, [r6, #0]
 80058a2:	4630      	mov	r0, r6
 80058a4:	f000 f80c 	bl	80058c0 <__malloc_unlock>
 80058a8:	e794      	b.n	80057d4 <_malloc_r+0x20>
 80058aa:	6005      	str	r5, [r0, #0]
 80058ac:	e7d6      	b.n	800585c <_malloc_r+0xa8>
 80058ae:	bf00      	nop
 80058b0:	200002c8 	.word	0x200002c8

080058b4 <__malloc_lock>:
 80058b4:	4801      	ldr	r0, [pc, #4]	@ (80058bc <__malloc_lock+0x8>)
 80058b6:	f7ff bf0f 	b.w	80056d8 <__retarget_lock_acquire_recursive>
 80058ba:	bf00      	nop
 80058bc:	200002c0 	.word	0x200002c0

080058c0 <__malloc_unlock>:
 80058c0:	4801      	ldr	r0, [pc, #4]	@ (80058c8 <__malloc_unlock+0x8>)
 80058c2:	f7ff bf0a 	b.w	80056da <__retarget_lock_release_recursive>
 80058c6:	bf00      	nop
 80058c8:	200002c0 	.word	0x200002c0

080058cc <__ssputs_r>:
 80058cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058d0:	688e      	ldr	r6, [r1, #8]
 80058d2:	461f      	mov	r7, r3
 80058d4:	42be      	cmp	r6, r7
 80058d6:	680b      	ldr	r3, [r1, #0]
 80058d8:	4682      	mov	sl, r0
 80058da:	460c      	mov	r4, r1
 80058dc:	4690      	mov	r8, r2
 80058de:	d82d      	bhi.n	800593c <__ssputs_r+0x70>
 80058e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80058e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80058e8:	d026      	beq.n	8005938 <__ssputs_r+0x6c>
 80058ea:	6965      	ldr	r5, [r4, #20]
 80058ec:	6909      	ldr	r1, [r1, #16]
 80058ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058f2:	eba3 0901 	sub.w	r9, r3, r1
 80058f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058fa:	1c7b      	adds	r3, r7, #1
 80058fc:	444b      	add	r3, r9
 80058fe:	106d      	asrs	r5, r5, #1
 8005900:	429d      	cmp	r5, r3
 8005902:	bf38      	it	cc
 8005904:	461d      	movcc	r5, r3
 8005906:	0553      	lsls	r3, r2, #21
 8005908:	d527      	bpl.n	800595a <__ssputs_r+0x8e>
 800590a:	4629      	mov	r1, r5
 800590c:	f7ff ff52 	bl	80057b4 <_malloc_r>
 8005910:	4606      	mov	r6, r0
 8005912:	b360      	cbz	r0, 800596e <__ssputs_r+0xa2>
 8005914:	6921      	ldr	r1, [r4, #16]
 8005916:	464a      	mov	r2, r9
 8005918:	f000 fae8 	bl	8005eec <memcpy>
 800591c:	89a3      	ldrh	r3, [r4, #12]
 800591e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005926:	81a3      	strh	r3, [r4, #12]
 8005928:	6126      	str	r6, [r4, #16]
 800592a:	6165      	str	r5, [r4, #20]
 800592c:	444e      	add	r6, r9
 800592e:	eba5 0509 	sub.w	r5, r5, r9
 8005932:	6026      	str	r6, [r4, #0]
 8005934:	60a5      	str	r5, [r4, #8]
 8005936:	463e      	mov	r6, r7
 8005938:	42be      	cmp	r6, r7
 800593a:	d900      	bls.n	800593e <__ssputs_r+0x72>
 800593c:	463e      	mov	r6, r7
 800593e:	6820      	ldr	r0, [r4, #0]
 8005940:	4632      	mov	r2, r6
 8005942:	4641      	mov	r1, r8
 8005944:	f000 faa8 	bl	8005e98 <memmove>
 8005948:	68a3      	ldr	r3, [r4, #8]
 800594a:	1b9b      	subs	r3, r3, r6
 800594c:	60a3      	str	r3, [r4, #8]
 800594e:	6823      	ldr	r3, [r4, #0]
 8005950:	4433      	add	r3, r6
 8005952:	6023      	str	r3, [r4, #0]
 8005954:	2000      	movs	r0, #0
 8005956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800595a:	462a      	mov	r2, r5
 800595c:	f000 fad4 	bl	8005f08 <_realloc_r>
 8005960:	4606      	mov	r6, r0
 8005962:	2800      	cmp	r0, #0
 8005964:	d1e0      	bne.n	8005928 <__ssputs_r+0x5c>
 8005966:	6921      	ldr	r1, [r4, #16]
 8005968:	4650      	mov	r0, sl
 800596a:	f7ff feb7 	bl	80056dc <_free_r>
 800596e:	230c      	movs	r3, #12
 8005970:	f8ca 3000 	str.w	r3, [sl]
 8005974:	89a3      	ldrh	r3, [r4, #12]
 8005976:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800597a:	81a3      	strh	r3, [r4, #12]
 800597c:	f04f 30ff 	mov.w	r0, #4294967295
 8005980:	e7e9      	b.n	8005956 <__ssputs_r+0x8a>
	...

08005984 <_svfiprintf_r>:
 8005984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005988:	4698      	mov	r8, r3
 800598a:	898b      	ldrh	r3, [r1, #12]
 800598c:	061b      	lsls	r3, r3, #24
 800598e:	b09d      	sub	sp, #116	@ 0x74
 8005990:	4607      	mov	r7, r0
 8005992:	460d      	mov	r5, r1
 8005994:	4614      	mov	r4, r2
 8005996:	d510      	bpl.n	80059ba <_svfiprintf_r+0x36>
 8005998:	690b      	ldr	r3, [r1, #16]
 800599a:	b973      	cbnz	r3, 80059ba <_svfiprintf_r+0x36>
 800599c:	2140      	movs	r1, #64	@ 0x40
 800599e:	f7ff ff09 	bl	80057b4 <_malloc_r>
 80059a2:	6028      	str	r0, [r5, #0]
 80059a4:	6128      	str	r0, [r5, #16]
 80059a6:	b930      	cbnz	r0, 80059b6 <_svfiprintf_r+0x32>
 80059a8:	230c      	movs	r3, #12
 80059aa:	603b      	str	r3, [r7, #0]
 80059ac:	f04f 30ff 	mov.w	r0, #4294967295
 80059b0:	b01d      	add	sp, #116	@ 0x74
 80059b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059b6:	2340      	movs	r3, #64	@ 0x40
 80059b8:	616b      	str	r3, [r5, #20]
 80059ba:	2300      	movs	r3, #0
 80059bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80059be:	2320      	movs	r3, #32
 80059c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80059c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80059c8:	2330      	movs	r3, #48	@ 0x30
 80059ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005b68 <_svfiprintf_r+0x1e4>
 80059ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80059d2:	f04f 0901 	mov.w	r9, #1
 80059d6:	4623      	mov	r3, r4
 80059d8:	469a      	mov	sl, r3
 80059da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059de:	b10a      	cbz	r2, 80059e4 <_svfiprintf_r+0x60>
 80059e0:	2a25      	cmp	r2, #37	@ 0x25
 80059e2:	d1f9      	bne.n	80059d8 <_svfiprintf_r+0x54>
 80059e4:	ebba 0b04 	subs.w	fp, sl, r4
 80059e8:	d00b      	beq.n	8005a02 <_svfiprintf_r+0x7e>
 80059ea:	465b      	mov	r3, fp
 80059ec:	4622      	mov	r2, r4
 80059ee:	4629      	mov	r1, r5
 80059f0:	4638      	mov	r0, r7
 80059f2:	f7ff ff6b 	bl	80058cc <__ssputs_r>
 80059f6:	3001      	adds	r0, #1
 80059f8:	f000 80a7 	beq.w	8005b4a <_svfiprintf_r+0x1c6>
 80059fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80059fe:	445a      	add	r2, fp
 8005a00:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a02:	f89a 3000 	ldrb.w	r3, [sl]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f000 809f 	beq.w	8005b4a <_svfiprintf_r+0x1c6>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a16:	f10a 0a01 	add.w	sl, sl, #1
 8005a1a:	9304      	str	r3, [sp, #16]
 8005a1c:	9307      	str	r3, [sp, #28]
 8005a1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a22:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a24:	4654      	mov	r4, sl
 8005a26:	2205      	movs	r2, #5
 8005a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a2c:	484e      	ldr	r0, [pc, #312]	@ (8005b68 <_svfiprintf_r+0x1e4>)
 8005a2e:	f7fa fbd7 	bl	80001e0 <memchr>
 8005a32:	9a04      	ldr	r2, [sp, #16]
 8005a34:	b9d8      	cbnz	r0, 8005a6e <_svfiprintf_r+0xea>
 8005a36:	06d0      	lsls	r0, r2, #27
 8005a38:	bf44      	itt	mi
 8005a3a:	2320      	movmi	r3, #32
 8005a3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a40:	0711      	lsls	r1, r2, #28
 8005a42:	bf44      	itt	mi
 8005a44:	232b      	movmi	r3, #43	@ 0x2b
 8005a46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a50:	d015      	beq.n	8005a7e <_svfiprintf_r+0xfa>
 8005a52:	9a07      	ldr	r2, [sp, #28]
 8005a54:	4654      	mov	r4, sl
 8005a56:	2000      	movs	r0, #0
 8005a58:	f04f 0c0a 	mov.w	ip, #10
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a62:	3b30      	subs	r3, #48	@ 0x30
 8005a64:	2b09      	cmp	r3, #9
 8005a66:	d94b      	bls.n	8005b00 <_svfiprintf_r+0x17c>
 8005a68:	b1b0      	cbz	r0, 8005a98 <_svfiprintf_r+0x114>
 8005a6a:	9207      	str	r2, [sp, #28]
 8005a6c:	e014      	b.n	8005a98 <_svfiprintf_r+0x114>
 8005a6e:	eba0 0308 	sub.w	r3, r0, r8
 8005a72:	fa09 f303 	lsl.w	r3, r9, r3
 8005a76:	4313      	orrs	r3, r2
 8005a78:	9304      	str	r3, [sp, #16]
 8005a7a:	46a2      	mov	sl, r4
 8005a7c:	e7d2      	b.n	8005a24 <_svfiprintf_r+0xa0>
 8005a7e:	9b03      	ldr	r3, [sp, #12]
 8005a80:	1d19      	adds	r1, r3, #4
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	9103      	str	r1, [sp, #12]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	bfbb      	ittet	lt
 8005a8a:	425b      	neglt	r3, r3
 8005a8c:	f042 0202 	orrlt.w	r2, r2, #2
 8005a90:	9307      	strge	r3, [sp, #28]
 8005a92:	9307      	strlt	r3, [sp, #28]
 8005a94:	bfb8      	it	lt
 8005a96:	9204      	strlt	r2, [sp, #16]
 8005a98:	7823      	ldrb	r3, [r4, #0]
 8005a9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a9c:	d10a      	bne.n	8005ab4 <_svfiprintf_r+0x130>
 8005a9e:	7863      	ldrb	r3, [r4, #1]
 8005aa0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005aa2:	d132      	bne.n	8005b0a <_svfiprintf_r+0x186>
 8005aa4:	9b03      	ldr	r3, [sp, #12]
 8005aa6:	1d1a      	adds	r2, r3, #4
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	9203      	str	r2, [sp, #12]
 8005aac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ab0:	3402      	adds	r4, #2
 8005ab2:	9305      	str	r3, [sp, #20]
 8005ab4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005b78 <_svfiprintf_r+0x1f4>
 8005ab8:	7821      	ldrb	r1, [r4, #0]
 8005aba:	2203      	movs	r2, #3
 8005abc:	4650      	mov	r0, sl
 8005abe:	f7fa fb8f 	bl	80001e0 <memchr>
 8005ac2:	b138      	cbz	r0, 8005ad4 <_svfiprintf_r+0x150>
 8005ac4:	9b04      	ldr	r3, [sp, #16]
 8005ac6:	eba0 000a 	sub.w	r0, r0, sl
 8005aca:	2240      	movs	r2, #64	@ 0x40
 8005acc:	4082      	lsls	r2, r0
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	3401      	adds	r4, #1
 8005ad2:	9304      	str	r3, [sp, #16]
 8005ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ad8:	4824      	ldr	r0, [pc, #144]	@ (8005b6c <_svfiprintf_r+0x1e8>)
 8005ada:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ade:	2206      	movs	r2, #6
 8005ae0:	f7fa fb7e 	bl	80001e0 <memchr>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	d036      	beq.n	8005b56 <_svfiprintf_r+0x1d2>
 8005ae8:	4b21      	ldr	r3, [pc, #132]	@ (8005b70 <_svfiprintf_r+0x1ec>)
 8005aea:	bb1b      	cbnz	r3, 8005b34 <_svfiprintf_r+0x1b0>
 8005aec:	9b03      	ldr	r3, [sp, #12]
 8005aee:	3307      	adds	r3, #7
 8005af0:	f023 0307 	bic.w	r3, r3, #7
 8005af4:	3308      	adds	r3, #8
 8005af6:	9303      	str	r3, [sp, #12]
 8005af8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005afa:	4433      	add	r3, r6
 8005afc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005afe:	e76a      	b.n	80059d6 <_svfiprintf_r+0x52>
 8005b00:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b04:	460c      	mov	r4, r1
 8005b06:	2001      	movs	r0, #1
 8005b08:	e7a8      	b.n	8005a5c <_svfiprintf_r+0xd8>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	3401      	adds	r4, #1
 8005b0e:	9305      	str	r3, [sp, #20]
 8005b10:	4619      	mov	r1, r3
 8005b12:	f04f 0c0a 	mov.w	ip, #10
 8005b16:	4620      	mov	r0, r4
 8005b18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b1c:	3a30      	subs	r2, #48	@ 0x30
 8005b1e:	2a09      	cmp	r2, #9
 8005b20:	d903      	bls.n	8005b2a <_svfiprintf_r+0x1a6>
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0c6      	beq.n	8005ab4 <_svfiprintf_r+0x130>
 8005b26:	9105      	str	r1, [sp, #20]
 8005b28:	e7c4      	b.n	8005ab4 <_svfiprintf_r+0x130>
 8005b2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b2e:	4604      	mov	r4, r0
 8005b30:	2301      	movs	r3, #1
 8005b32:	e7f0      	b.n	8005b16 <_svfiprintf_r+0x192>
 8005b34:	ab03      	add	r3, sp, #12
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	462a      	mov	r2, r5
 8005b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8005b74 <_svfiprintf_r+0x1f0>)
 8005b3c:	a904      	add	r1, sp, #16
 8005b3e:	4638      	mov	r0, r7
 8005b40:	f3af 8000 	nop.w
 8005b44:	1c42      	adds	r2, r0, #1
 8005b46:	4606      	mov	r6, r0
 8005b48:	d1d6      	bne.n	8005af8 <_svfiprintf_r+0x174>
 8005b4a:	89ab      	ldrh	r3, [r5, #12]
 8005b4c:	065b      	lsls	r3, r3, #25
 8005b4e:	f53f af2d 	bmi.w	80059ac <_svfiprintf_r+0x28>
 8005b52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b54:	e72c      	b.n	80059b0 <_svfiprintf_r+0x2c>
 8005b56:	ab03      	add	r3, sp, #12
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	462a      	mov	r2, r5
 8005b5c:	4b05      	ldr	r3, [pc, #20]	@ (8005b74 <_svfiprintf_r+0x1f0>)
 8005b5e:	a904      	add	r1, sp, #16
 8005b60:	4638      	mov	r0, r7
 8005b62:	f000 f879 	bl	8005c58 <_printf_i>
 8005b66:	e7ed      	b.n	8005b44 <_svfiprintf_r+0x1c0>
 8005b68:	08005fe4 	.word	0x08005fe4
 8005b6c:	08005fee 	.word	0x08005fee
 8005b70:	00000000 	.word	0x00000000
 8005b74:	080058cd 	.word	0x080058cd
 8005b78:	08005fea 	.word	0x08005fea

08005b7c <_printf_common>:
 8005b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b80:	4616      	mov	r6, r2
 8005b82:	4698      	mov	r8, r3
 8005b84:	688a      	ldr	r2, [r1, #8]
 8005b86:	690b      	ldr	r3, [r1, #16]
 8005b88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	bfb8      	it	lt
 8005b90:	4613      	movlt	r3, r2
 8005b92:	6033      	str	r3, [r6, #0]
 8005b94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005b98:	4607      	mov	r7, r0
 8005b9a:	460c      	mov	r4, r1
 8005b9c:	b10a      	cbz	r2, 8005ba2 <_printf_common+0x26>
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	6033      	str	r3, [r6, #0]
 8005ba2:	6823      	ldr	r3, [r4, #0]
 8005ba4:	0699      	lsls	r1, r3, #26
 8005ba6:	bf42      	ittt	mi
 8005ba8:	6833      	ldrmi	r3, [r6, #0]
 8005baa:	3302      	addmi	r3, #2
 8005bac:	6033      	strmi	r3, [r6, #0]
 8005bae:	6825      	ldr	r5, [r4, #0]
 8005bb0:	f015 0506 	ands.w	r5, r5, #6
 8005bb4:	d106      	bne.n	8005bc4 <_printf_common+0x48>
 8005bb6:	f104 0a19 	add.w	sl, r4, #25
 8005bba:	68e3      	ldr	r3, [r4, #12]
 8005bbc:	6832      	ldr	r2, [r6, #0]
 8005bbe:	1a9b      	subs	r3, r3, r2
 8005bc0:	42ab      	cmp	r3, r5
 8005bc2:	dc26      	bgt.n	8005c12 <_printf_common+0x96>
 8005bc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005bc8:	6822      	ldr	r2, [r4, #0]
 8005bca:	3b00      	subs	r3, #0
 8005bcc:	bf18      	it	ne
 8005bce:	2301      	movne	r3, #1
 8005bd0:	0692      	lsls	r2, r2, #26
 8005bd2:	d42b      	bmi.n	8005c2c <_printf_common+0xb0>
 8005bd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005bd8:	4641      	mov	r1, r8
 8005bda:	4638      	mov	r0, r7
 8005bdc:	47c8      	blx	r9
 8005bde:	3001      	adds	r0, #1
 8005be0:	d01e      	beq.n	8005c20 <_printf_common+0xa4>
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	6922      	ldr	r2, [r4, #16]
 8005be6:	f003 0306 	and.w	r3, r3, #6
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	bf02      	ittt	eq
 8005bee:	68e5      	ldreq	r5, [r4, #12]
 8005bf0:	6833      	ldreq	r3, [r6, #0]
 8005bf2:	1aed      	subeq	r5, r5, r3
 8005bf4:	68a3      	ldr	r3, [r4, #8]
 8005bf6:	bf0c      	ite	eq
 8005bf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bfc:	2500      	movne	r5, #0
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	bfc4      	itt	gt
 8005c02:	1a9b      	subgt	r3, r3, r2
 8005c04:	18ed      	addgt	r5, r5, r3
 8005c06:	2600      	movs	r6, #0
 8005c08:	341a      	adds	r4, #26
 8005c0a:	42b5      	cmp	r5, r6
 8005c0c:	d11a      	bne.n	8005c44 <_printf_common+0xc8>
 8005c0e:	2000      	movs	r0, #0
 8005c10:	e008      	b.n	8005c24 <_printf_common+0xa8>
 8005c12:	2301      	movs	r3, #1
 8005c14:	4652      	mov	r2, sl
 8005c16:	4641      	mov	r1, r8
 8005c18:	4638      	mov	r0, r7
 8005c1a:	47c8      	blx	r9
 8005c1c:	3001      	adds	r0, #1
 8005c1e:	d103      	bne.n	8005c28 <_printf_common+0xac>
 8005c20:	f04f 30ff 	mov.w	r0, #4294967295
 8005c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c28:	3501      	adds	r5, #1
 8005c2a:	e7c6      	b.n	8005bba <_printf_common+0x3e>
 8005c2c:	18e1      	adds	r1, r4, r3
 8005c2e:	1c5a      	adds	r2, r3, #1
 8005c30:	2030      	movs	r0, #48	@ 0x30
 8005c32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005c36:	4422      	add	r2, r4
 8005c38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005c3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005c40:	3302      	adds	r3, #2
 8005c42:	e7c7      	b.n	8005bd4 <_printf_common+0x58>
 8005c44:	2301      	movs	r3, #1
 8005c46:	4622      	mov	r2, r4
 8005c48:	4641      	mov	r1, r8
 8005c4a:	4638      	mov	r0, r7
 8005c4c:	47c8      	blx	r9
 8005c4e:	3001      	adds	r0, #1
 8005c50:	d0e6      	beq.n	8005c20 <_printf_common+0xa4>
 8005c52:	3601      	adds	r6, #1
 8005c54:	e7d9      	b.n	8005c0a <_printf_common+0x8e>
	...

08005c58 <_printf_i>:
 8005c58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c5c:	7e0f      	ldrb	r7, [r1, #24]
 8005c5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005c60:	2f78      	cmp	r7, #120	@ 0x78
 8005c62:	4691      	mov	r9, r2
 8005c64:	4680      	mov	r8, r0
 8005c66:	460c      	mov	r4, r1
 8005c68:	469a      	mov	sl, r3
 8005c6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005c6e:	d807      	bhi.n	8005c80 <_printf_i+0x28>
 8005c70:	2f62      	cmp	r7, #98	@ 0x62
 8005c72:	d80a      	bhi.n	8005c8a <_printf_i+0x32>
 8005c74:	2f00      	cmp	r7, #0
 8005c76:	f000 80d2 	beq.w	8005e1e <_printf_i+0x1c6>
 8005c7a:	2f58      	cmp	r7, #88	@ 0x58
 8005c7c:	f000 80b9 	beq.w	8005df2 <_printf_i+0x19a>
 8005c80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005c88:	e03a      	b.n	8005d00 <_printf_i+0xa8>
 8005c8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005c8e:	2b15      	cmp	r3, #21
 8005c90:	d8f6      	bhi.n	8005c80 <_printf_i+0x28>
 8005c92:	a101      	add	r1, pc, #4	@ (adr r1, 8005c98 <_printf_i+0x40>)
 8005c94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c98:	08005cf1 	.word	0x08005cf1
 8005c9c:	08005d05 	.word	0x08005d05
 8005ca0:	08005c81 	.word	0x08005c81
 8005ca4:	08005c81 	.word	0x08005c81
 8005ca8:	08005c81 	.word	0x08005c81
 8005cac:	08005c81 	.word	0x08005c81
 8005cb0:	08005d05 	.word	0x08005d05
 8005cb4:	08005c81 	.word	0x08005c81
 8005cb8:	08005c81 	.word	0x08005c81
 8005cbc:	08005c81 	.word	0x08005c81
 8005cc0:	08005c81 	.word	0x08005c81
 8005cc4:	08005e05 	.word	0x08005e05
 8005cc8:	08005d2f 	.word	0x08005d2f
 8005ccc:	08005dbf 	.word	0x08005dbf
 8005cd0:	08005c81 	.word	0x08005c81
 8005cd4:	08005c81 	.word	0x08005c81
 8005cd8:	08005e27 	.word	0x08005e27
 8005cdc:	08005c81 	.word	0x08005c81
 8005ce0:	08005d2f 	.word	0x08005d2f
 8005ce4:	08005c81 	.word	0x08005c81
 8005ce8:	08005c81 	.word	0x08005c81
 8005cec:	08005dc7 	.word	0x08005dc7
 8005cf0:	6833      	ldr	r3, [r6, #0]
 8005cf2:	1d1a      	adds	r2, r3, #4
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6032      	str	r2, [r6, #0]
 8005cf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005cfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d00:	2301      	movs	r3, #1
 8005d02:	e09d      	b.n	8005e40 <_printf_i+0x1e8>
 8005d04:	6833      	ldr	r3, [r6, #0]
 8005d06:	6820      	ldr	r0, [r4, #0]
 8005d08:	1d19      	adds	r1, r3, #4
 8005d0a:	6031      	str	r1, [r6, #0]
 8005d0c:	0606      	lsls	r6, r0, #24
 8005d0e:	d501      	bpl.n	8005d14 <_printf_i+0xbc>
 8005d10:	681d      	ldr	r5, [r3, #0]
 8005d12:	e003      	b.n	8005d1c <_printf_i+0xc4>
 8005d14:	0645      	lsls	r5, r0, #25
 8005d16:	d5fb      	bpl.n	8005d10 <_printf_i+0xb8>
 8005d18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d1c:	2d00      	cmp	r5, #0
 8005d1e:	da03      	bge.n	8005d28 <_printf_i+0xd0>
 8005d20:	232d      	movs	r3, #45	@ 0x2d
 8005d22:	426d      	negs	r5, r5
 8005d24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d28:	4859      	ldr	r0, [pc, #356]	@ (8005e90 <_printf_i+0x238>)
 8005d2a:	230a      	movs	r3, #10
 8005d2c:	e011      	b.n	8005d52 <_printf_i+0xfa>
 8005d2e:	6821      	ldr	r1, [r4, #0]
 8005d30:	6833      	ldr	r3, [r6, #0]
 8005d32:	0608      	lsls	r0, r1, #24
 8005d34:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d38:	d402      	bmi.n	8005d40 <_printf_i+0xe8>
 8005d3a:	0649      	lsls	r1, r1, #25
 8005d3c:	bf48      	it	mi
 8005d3e:	b2ad      	uxthmi	r5, r5
 8005d40:	2f6f      	cmp	r7, #111	@ 0x6f
 8005d42:	4853      	ldr	r0, [pc, #332]	@ (8005e90 <_printf_i+0x238>)
 8005d44:	6033      	str	r3, [r6, #0]
 8005d46:	bf14      	ite	ne
 8005d48:	230a      	movne	r3, #10
 8005d4a:	2308      	moveq	r3, #8
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d52:	6866      	ldr	r6, [r4, #4]
 8005d54:	60a6      	str	r6, [r4, #8]
 8005d56:	2e00      	cmp	r6, #0
 8005d58:	bfa2      	ittt	ge
 8005d5a:	6821      	ldrge	r1, [r4, #0]
 8005d5c:	f021 0104 	bicge.w	r1, r1, #4
 8005d60:	6021      	strge	r1, [r4, #0]
 8005d62:	b90d      	cbnz	r5, 8005d68 <_printf_i+0x110>
 8005d64:	2e00      	cmp	r6, #0
 8005d66:	d04b      	beq.n	8005e00 <_printf_i+0x1a8>
 8005d68:	4616      	mov	r6, r2
 8005d6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d6e:	fb03 5711 	mls	r7, r3, r1, r5
 8005d72:	5dc7      	ldrb	r7, [r0, r7]
 8005d74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d78:	462f      	mov	r7, r5
 8005d7a:	42bb      	cmp	r3, r7
 8005d7c:	460d      	mov	r5, r1
 8005d7e:	d9f4      	bls.n	8005d6a <_printf_i+0x112>
 8005d80:	2b08      	cmp	r3, #8
 8005d82:	d10b      	bne.n	8005d9c <_printf_i+0x144>
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	07df      	lsls	r7, r3, #31
 8005d88:	d508      	bpl.n	8005d9c <_printf_i+0x144>
 8005d8a:	6923      	ldr	r3, [r4, #16]
 8005d8c:	6861      	ldr	r1, [r4, #4]
 8005d8e:	4299      	cmp	r1, r3
 8005d90:	bfde      	ittt	le
 8005d92:	2330      	movle	r3, #48	@ 0x30
 8005d94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d9c:	1b92      	subs	r2, r2, r6
 8005d9e:	6122      	str	r2, [r4, #16]
 8005da0:	f8cd a000 	str.w	sl, [sp]
 8005da4:	464b      	mov	r3, r9
 8005da6:	aa03      	add	r2, sp, #12
 8005da8:	4621      	mov	r1, r4
 8005daa:	4640      	mov	r0, r8
 8005dac:	f7ff fee6 	bl	8005b7c <_printf_common>
 8005db0:	3001      	adds	r0, #1
 8005db2:	d14a      	bne.n	8005e4a <_printf_i+0x1f2>
 8005db4:	f04f 30ff 	mov.w	r0, #4294967295
 8005db8:	b004      	add	sp, #16
 8005dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	f043 0320 	orr.w	r3, r3, #32
 8005dc4:	6023      	str	r3, [r4, #0]
 8005dc6:	4833      	ldr	r0, [pc, #204]	@ (8005e94 <_printf_i+0x23c>)
 8005dc8:	2778      	movs	r7, #120	@ 0x78
 8005dca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005dce:	6823      	ldr	r3, [r4, #0]
 8005dd0:	6831      	ldr	r1, [r6, #0]
 8005dd2:	061f      	lsls	r7, r3, #24
 8005dd4:	f851 5b04 	ldr.w	r5, [r1], #4
 8005dd8:	d402      	bmi.n	8005de0 <_printf_i+0x188>
 8005dda:	065f      	lsls	r7, r3, #25
 8005ddc:	bf48      	it	mi
 8005dde:	b2ad      	uxthmi	r5, r5
 8005de0:	6031      	str	r1, [r6, #0]
 8005de2:	07d9      	lsls	r1, r3, #31
 8005de4:	bf44      	itt	mi
 8005de6:	f043 0320 	orrmi.w	r3, r3, #32
 8005dea:	6023      	strmi	r3, [r4, #0]
 8005dec:	b11d      	cbz	r5, 8005df6 <_printf_i+0x19e>
 8005dee:	2310      	movs	r3, #16
 8005df0:	e7ac      	b.n	8005d4c <_printf_i+0xf4>
 8005df2:	4827      	ldr	r0, [pc, #156]	@ (8005e90 <_printf_i+0x238>)
 8005df4:	e7e9      	b.n	8005dca <_printf_i+0x172>
 8005df6:	6823      	ldr	r3, [r4, #0]
 8005df8:	f023 0320 	bic.w	r3, r3, #32
 8005dfc:	6023      	str	r3, [r4, #0]
 8005dfe:	e7f6      	b.n	8005dee <_printf_i+0x196>
 8005e00:	4616      	mov	r6, r2
 8005e02:	e7bd      	b.n	8005d80 <_printf_i+0x128>
 8005e04:	6833      	ldr	r3, [r6, #0]
 8005e06:	6825      	ldr	r5, [r4, #0]
 8005e08:	6961      	ldr	r1, [r4, #20]
 8005e0a:	1d18      	adds	r0, r3, #4
 8005e0c:	6030      	str	r0, [r6, #0]
 8005e0e:	062e      	lsls	r6, r5, #24
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	d501      	bpl.n	8005e18 <_printf_i+0x1c0>
 8005e14:	6019      	str	r1, [r3, #0]
 8005e16:	e002      	b.n	8005e1e <_printf_i+0x1c6>
 8005e18:	0668      	lsls	r0, r5, #25
 8005e1a:	d5fb      	bpl.n	8005e14 <_printf_i+0x1bc>
 8005e1c:	8019      	strh	r1, [r3, #0]
 8005e1e:	2300      	movs	r3, #0
 8005e20:	6123      	str	r3, [r4, #16]
 8005e22:	4616      	mov	r6, r2
 8005e24:	e7bc      	b.n	8005da0 <_printf_i+0x148>
 8005e26:	6833      	ldr	r3, [r6, #0]
 8005e28:	1d1a      	adds	r2, r3, #4
 8005e2a:	6032      	str	r2, [r6, #0]
 8005e2c:	681e      	ldr	r6, [r3, #0]
 8005e2e:	6862      	ldr	r2, [r4, #4]
 8005e30:	2100      	movs	r1, #0
 8005e32:	4630      	mov	r0, r6
 8005e34:	f7fa f9d4 	bl	80001e0 <memchr>
 8005e38:	b108      	cbz	r0, 8005e3e <_printf_i+0x1e6>
 8005e3a:	1b80      	subs	r0, r0, r6
 8005e3c:	6060      	str	r0, [r4, #4]
 8005e3e:	6863      	ldr	r3, [r4, #4]
 8005e40:	6123      	str	r3, [r4, #16]
 8005e42:	2300      	movs	r3, #0
 8005e44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e48:	e7aa      	b.n	8005da0 <_printf_i+0x148>
 8005e4a:	6923      	ldr	r3, [r4, #16]
 8005e4c:	4632      	mov	r2, r6
 8005e4e:	4649      	mov	r1, r9
 8005e50:	4640      	mov	r0, r8
 8005e52:	47d0      	blx	sl
 8005e54:	3001      	adds	r0, #1
 8005e56:	d0ad      	beq.n	8005db4 <_printf_i+0x15c>
 8005e58:	6823      	ldr	r3, [r4, #0]
 8005e5a:	079b      	lsls	r3, r3, #30
 8005e5c:	d413      	bmi.n	8005e86 <_printf_i+0x22e>
 8005e5e:	68e0      	ldr	r0, [r4, #12]
 8005e60:	9b03      	ldr	r3, [sp, #12]
 8005e62:	4298      	cmp	r0, r3
 8005e64:	bfb8      	it	lt
 8005e66:	4618      	movlt	r0, r3
 8005e68:	e7a6      	b.n	8005db8 <_printf_i+0x160>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	4632      	mov	r2, r6
 8005e6e:	4649      	mov	r1, r9
 8005e70:	4640      	mov	r0, r8
 8005e72:	47d0      	blx	sl
 8005e74:	3001      	adds	r0, #1
 8005e76:	d09d      	beq.n	8005db4 <_printf_i+0x15c>
 8005e78:	3501      	adds	r5, #1
 8005e7a:	68e3      	ldr	r3, [r4, #12]
 8005e7c:	9903      	ldr	r1, [sp, #12]
 8005e7e:	1a5b      	subs	r3, r3, r1
 8005e80:	42ab      	cmp	r3, r5
 8005e82:	dcf2      	bgt.n	8005e6a <_printf_i+0x212>
 8005e84:	e7eb      	b.n	8005e5e <_printf_i+0x206>
 8005e86:	2500      	movs	r5, #0
 8005e88:	f104 0619 	add.w	r6, r4, #25
 8005e8c:	e7f5      	b.n	8005e7a <_printf_i+0x222>
 8005e8e:	bf00      	nop
 8005e90:	08005ff5 	.word	0x08005ff5
 8005e94:	08006006 	.word	0x08006006

08005e98 <memmove>:
 8005e98:	4288      	cmp	r0, r1
 8005e9a:	b510      	push	{r4, lr}
 8005e9c:	eb01 0402 	add.w	r4, r1, r2
 8005ea0:	d902      	bls.n	8005ea8 <memmove+0x10>
 8005ea2:	4284      	cmp	r4, r0
 8005ea4:	4623      	mov	r3, r4
 8005ea6:	d807      	bhi.n	8005eb8 <memmove+0x20>
 8005ea8:	1e43      	subs	r3, r0, #1
 8005eaa:	42a1      	cmp	r1, r4
 8005eac:	d008      	beq.n	8005ec0 <memmove+0x28>
 8005eae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005eb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005eb6:	e7f8      	b.n	8005eaa <memmove+0x12>
 8005eb8:	4402      	add	r2, r0
 8005eba:	4601      	mov	r1, r0
 8005ebc:	428a      	cmp	r2, r1
 8005ebe:	d100      	bne.n	8005ec2 <memmove+0x2a>
 8005ec0:	bd10      	pop	{r4, pc}
 8005ec2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ec6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005eca:	e7f7      	b.n	8005ebc <memmove+0x24>

08005ecc <_sbrk_r>:
 8005ecc:	b538      	push	{r3, r4, r5, lr}
 8005ece:	4d06      	ldr	r5, [pc, #24]	@ (8005ee8 <_sbrk_r+0x1c>)
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	4608      	mov	r0, r1
 8005ed6:	602b      	str	r3, [r5, #0]
 8005ed8:	f7fa fe4a 	bl	8000b70 <_sbrk>
 8005edc:	1c43      	adds	r3, r0, #1
 8005ede:	d102      	bne.n	8005ee6 <_sbrk_r+0x1a>
 8005ee0:	682b      	ldr	r3, [r5, #0]
 8005ee2:	b103      	cbz	r3, 8005ee6 <_sbrk_r+0x1a>
 8005ee4:	6023      	str	r3, [r4, #0]
 8005ee6:	bd38      	pop	{r3, r4, r5, pc}
 8005ee8:	200002bc 	.word	0x200002bc

08005eec <memcpy>:
 8005eec:	440a      	add	r2, r1
 8005eee:	4291      	cmp	r1, r2
 8005ef0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ef4:	d100      	bne.n	8005ef8 <memcpy+0xc>
 8005ef6:	4770      	bx	lr
 8005ef8:	b510      	push	{r4, lr}
 8005efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005efe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f02:	4291      	cmp	r1, r2
 8005f04:	d1f9      	bne.n	8005efa <memcpy+0xe>
 8005f06:	bd10      	pop	{r4, pc}

08005f08 <_realloc_r>:
 8005f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f0c:	4680      	mov	r8, r0
 8005f0e:	4615      	mov	r5, r2
 8005f10:	460c      	mov	r4, r1
 8005f12:	b921      	cbnz	r1, 8005f1e <_realloc_r+0x16>
 8005f14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f18:	4611      	mov	r1, r2
 8005f1a:	f7ff bc4b 	b.w	80057b4 <_malloc_r>
 8005f1e:	b92a      	cbnz	r2, 8005f2c <_realloc_r+0x24>
 8005f20:	f7ff fbdc 	bl	80056dc <_free_r>
 8005f24:	2400      	movs	r4, #0
 8005f26:	4620      	mov	r0, r4
 8005f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f2c:	f000 f81a 	bl	8005f64 <_malloc_usable_size_r>
 8005f30:	4285      	cmp	r5, r0
 8005f32:	4606      	mov	r6, r0
 8005f34:	d802      	bhi.n	8005f3c <_realloc_r+0x34>
 8005f36:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005f3a:	d8f4      	bhi.n	8005f26 <_realloc_r+0x1e>
 8005f3c:	4629      	mov	r1, r5
 8005f3e:	4640      	mov	r0, r8
 8005f40:	f7ff fc38 	bl	80057b4 <_malloc_r>
 8005f44:	4607      	mov	r7, r0
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d0ec      	beq.n	8005f24 <_realloc_r+0x1c>
 8005f4a:	42b5      	cmp	r5, r6
 8005f4c:	462a      	mov	r2, r5
 8005f4e:	4621      	mov	r1, r4
 8005f50:	bf28      	it	cs
 8005f52:	4632      	movcs	r2, r6
 8005f54:	f7ff ffca 	bl	8005eec <memcpy>
 8005f58:	4621      	mov	r1, r4
 8005f5a:	4640      	mov	r0, r8
 8005f5c:	f7ff fbbe 	bl	80056dc <_free_r>
 8005f60:	463c      	mov	r4, r7
 8005f62:	e7e0      	b.n	8005f26 <_realloc_r+0x1e>

08005f64 <_malloc_usable_size_r>:
 8005f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f68:	1f18      	subs	r0, r3, #4
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	bfbc      	itt	lt
 8005f6e:	580b      	ldrlt	r3, [r1, r0]
 8005f70:	18c0      	addlt	r0, r0, r3
 8005f72:	4770      	bx	lr

08005f74 <_init>:
 8005f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f76:	bf00      	nop
 8005f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f7a:	bc08      	pop	{r3}
 8005f7c:	469e      	mov	lr, r3
 8005f7e:	4770      	bx	lr

08005f80 <_fini>:
 8005f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f82:	bf00      	nop
 8005f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f86:	bc08      	pop	{r3}
 8005f88:	469e      	mov	lr, r3
 8005f8a:	4770      	bx	lr
