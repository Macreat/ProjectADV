
ProjectProof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006868  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080069f8  080069f8  000079f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a98  08006a98  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  08006a98  08006a98  00007a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006aa0  08006aa0  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006aa0  08006aa0  00007aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006aa4  08006aa4  00007aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006aa8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  2000005c  08006b04  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08006b04  00008334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011bd6  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026b4  00000000  00000000  00019c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  0001c318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab3  00000000  00000000  0001d118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028182  00000000  00000000  0001dbcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011458  00000000  00000000  00045d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb963  00000000  00000000  000571a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00152b08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fd0  00000000  00000000  00152b4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00156b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080069e0 	.word	0x080069e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080069e0 	.word	0x080069e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2f>:
 800083c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000840:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000844:	bf24      	itt	cs
 8000846:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800084a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800084e:	d90d      	bls.n	800086c <__aeabi_d2f+0x30>
 8000850:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000854:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000858:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800085c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000860:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000864:	bf08      	it	eq
 8000866:	f020 0001 	biceq.w	r0, r0, #1
 800086a:	4770      	bx	lr
 800086c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000870:	d121      	bne.n	80008b6 <__aeabi_d2f+0x7a>
 8000872:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000876:	bfbc      	itt	lt
 8000878:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800087c:	4770      	bxlt	lr
 800087e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000882:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000886:	f1c2 0218 	rsb	r2, r2, #24
 800088a:	f1c2 0c20 	rsb	ip, r2, #32
 800088e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000892:	fa20 f002 	lsr.w	r0, r0, r2
 8000896:	bf18      	it	ne
 8000898:	f040 0001 	orrne.w	r0, r0, #1
 800089c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008a8:	ea40 000c 	orr.w	r0, r0, ip
 80008ac:	fa23 f302 	lsr.w	r3, r3, r2
 80008b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008b4:	e7cc      	b.n	8000850 <__aeabi_d2f+0x14>
 80008b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ba:	d107      	bne.n	80008cc <__aeabi_d2f+0x90>
 80008bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008c0:	bf1e      	ittt	ne
 80008c2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008c6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008ca:	4770      	bxne	lr
 80008cc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <__aeabi_uldivmod>:
 80008dc:	b953      	cbnz	r3, 80008f4 <__aeabi_uldivmod+0x18>
 80008de:	b94a      	cbnz	r2, 80008f4 <__aeabi_uldivmod+0x18>
 80008e0:	2900      	cmp	r1, #0
 80008e2:	bf08      	it	eq
 80008e4:	2800      	cmpeq	r0, #0
 80008e6:	bf1c      	itt	ne
 80008e8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ec:	f04f 30ff 	movne.w	r0, #4294967295
 80008f0:	f000 b96a 	b.w	8000bc8 <__aeabi_idiv0>
 80008f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008fc:	f000 f806 	bl	800090c <__udivmoddi4>
 8000900:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000908:	b004      	add	sp, #16
 800090a:	4770      	bx	lr

0800090c <__udivmoddi4>:
 800090c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000910:	9d08      	ldr	r5, [sp, #32]
 8000912:	460c      	mov	r4, r1
 8000914:	2b00      	cmp	r3, #0
 8000916:	d14e      	bne.n	80009b6 <__udivmoddi4+0xaa>
 8000918:	4694      	mov	ip, r2
 800091a:	458c      	cmp	ip, r1
 800091c:	4686      	mov	lr, r0
 800091e:	fab2 f282 	clz	r2, r2
 8000922:	d962      	bls.n	80009ea <__udivmoddi4+0xde>
 8000924:	b14a      	cbz	r2, 800093a <__udivmoddi4+0x2e>
 8000926:	f1c2 0320 	rsb	r3, r2, #32
 800092a:	4091      	lsls	r1, r2
 800092c:	fa20 f303 	lsr.w	r3, r0, r3
 8000930:	fa0c fc02 	lsl.w	ip, ip, r2
 8000934:	4319      	orrs	r1, r3
 8000936:	fa00 fe02 	lsl.w	lr, r0, r2
 800093a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800093e:	fa1f f68c 	uxth.w	r6, ip
 8000942:	fbb1 f4f7 	udiv	r4, r1, r7
 8000946:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800094a:	fb07 1114 	mls	r1, r7, r4, r1
 800094e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000952:	fb04 f106 	mul.w	r1, r4, r6
 8000956:	4299      	cmp	r1, r3
 8000958:	d90a      	bls.n	8000970 <__udivmoddi4+0x64>
 800095a:	eb1c 0303 	adds.w	r3, ip, r3
 800095e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000962:	f080 8112 	bcs.w	8000b8a <__udivmoddi4+0x27e>
 8000966:	4299      	cmp	r1, r3
 8000968:	f240 810f 	bls.w	8000b8a <__udivmoddi4+0x27e>
 800096c:	3c02      	subs	r4, #2
 800096e:	4463      	add	r3, ip
 8000970:	1a59      	subs	r1, r3, r1
 8000972:	fa1f f38e 	uxth.w	r3, lr
 8000976:	fbb1 f0f7 	udiv	r0, r1, r7
 800097a:	fb07 1110 	mls	r1, r7, r0, r1
 800097e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000982:	fb00 f606 	mul.w	r6, r0, r6
 8000986:	429e      	cmp	r6, r3
 8000988:	d90a      	bls.n	80009a0 <__udivmoddi4+0x94>
 800098a:	eb1c 0303 	adds.w	r3, ip, r3
 800098e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000992:	f080 80fc 	bcs.w	8000b8e <__udivmoddi4+0x282>
 8000996:	429e      	cmp	r6, r3
 8000998:	f240 80f9 	bls.w	8000b8e <__udivmoddi4+0x282>
 800099c:	4463      	add	r3, ip
 800099e:	3802      	subs	r0, #2
 80009a0:	1b9b      	subs	r3, r3, r6
 80009a2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009a6:	2100      	movs	r1, #0
 80009a8:	b11d      	cbz	r5, 80009b2 <__udivmoddi4+0xa6>
 80009aa:	40d3      	lsrs	r3, r2
 80009ac:	2200      	movs	r2, #0
 80009ae:	e9c5 3200 	strd	r3, r2, [r5]
 80009b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b6:	428b      	cmp	r3, r1
 80009b8:	d905      	bls.n	80009c6 <__udivmoddi4+0xba>
 80009ba:	b10d      	cbz	r5, 80009c0 <__udivmoddi4+0xb4>
 80009bc:	e9c5 0100 	strd	r0, r1, [r5]
 80009c0:	2100      	movs	r1, #0
 80009c2:	4608      	mov	r0, r1
 80009c4:	e7f5      	b.n	80009b2 <__udivmoddi4+0xa6>
 80009c6:	fab3 f183 	clz	r1, r3
 80009ca:	2900      	cmp	r1, #0
 80009cc:	d146      	bne.n	8000a5c <__udivmoddi4+0x150>
 80009ce:	42a3      	cmp	r3, r4
 80009d0:	d302      	bcc.n	80009d8 <__udivmoddi4+0xcc>
 80009d2:	4290      	cmp	r0, r2
 80009d4:	f0c0 80f0 	bcc.w	8000bb8 <__udivmoddi4+0x2ac>
 80009d8:	1a86      	subs	r6, r0, r2
 80009da:	eb64 0303 	sbc.w	r3, r4, r3
 80009de:	2001      	movs	r0, #1
 80009e0:	2d00      	cmp	r5, #0
 80009e2:	d0e6      	beq.n	80009b2 <__udivmoddi4+0xa6>
 80009e4:	e9c5 6300 	strd	r6, r3, [r5]
 80009e8:	e7e3      	b.n	80009b2 <__udivmoddi4+0xa6>
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	f040 8090 	bne.w	8000b10 <__udivmoddi4+0x204>
 80009f0:	eba1 040c 	sub.w	r4, r1, ip
 80009f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	2101      	movs	r1, #1
 80009fe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a06:	fb08 4416 	mls	r4, r8, r6, r4
 8000a0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a0e:	fb07 f006 	mul.w	r0, r7, r6
 8000a12:	4298      	cmp	r0, r3
 8000a14:	d908      	bls.n	8000a28 <__udivmoddi4+0x11c>
 8000a16:	eb1c 0303 	adds.w	r3, ip, r3
 8000a1a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a1e:	d202      	bcs.n	8000a26 <__udivmoddi4+0x11a>
 8000a20:	4298      	cmp	r0, r3
 8000a22:	f200 80cd 	bhi.w	8000bc0 <__udivmoddi4+0x2b4>
 8000a26:	4626      	mov	r6, r4
 8000a28:	1a1c      	subs	r4, r3, r0
 8000a2a:	fa1f f38e 	uxth.w	r3, lr
 8000a2e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a32:	fb08 4410 	mls	r4, r8, r0, r4
 8000a36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a3a:	fb00 f707 	mul.w	r7, r0, r7
 8000a3e:	429f      	cmp	r7, r3
 8000a40:	d908      	bls.n	8000a54 <__udivmoddi4+0x148>
 8000a42:	eb1c 0303 	adds.w	r3, ip, r3
 8000a46:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a4a:	d202      	bcs.n	8000a52 <__udivmoddi4+0x146>
 8000a4c:	429f      	cmp	r7, r3
 8000a4e:	f200 80b0 	bhi.w	8000bb2 <__udivmoddi4+0x2a6>
 8000a52:	4620      	mov	r0, r4
 8000a54:	1bdb      	subs	r3, r3, r7
 8000a56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a5a:	e7a5      	b.n	80009a8 <__udivmoddi4+0x9c>
 8000a5c:	f1c1 0620 	rsb	r6, r1, #32
 8000a60:	408b      	lsls	r3, r1
 8000a62:	fa22 f706 	lsr.w	r7, r2, r6
 8000a66:	431f      	orrs	r7, r3
 8000a68:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a6c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a70:	ea43 030c 	orr.w	r3, r3, ip
 8000a74:	40f4      	lsrs	r4, r6
 8000a76:	fa00 f801 	lsl.w	r8, r0, r1
 8000a7a:	0c38      	lsrs	r0, r7, #16
 8000a7c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a80:	fbb4 fef0 	udiv	lr, r4, r0
 8000a84:	fa1f fc87 	uxth.w	ip, r7
 8000a88:	fb00 441e 	mls	r4, r0, lr, r4
 8000a8c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a90:	fb0e f90c 	mul.w	r9, lr, ip
 8000a94:	45a1      	cmp	r9, r4
 8000a96:	fa02 f201 	lsl.w	r2, r2, r1
 8000a9a:	d90a      	bls.n	8000ab2 <__udivmoddi4+0x1a6>
 8000a9c:	193c      	adds	r4, r7, r4
 8000a9e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000aa2:	f080 8084 	bcs.w	8000bae <__udivmoddi4+0x2a2>
 8000aa6:	45a1      	cmp	r9, r4
 8000aa8:	f240 8081 	bls.w	8000bae <__udivmoddi4+0x2a2>
 8000aac:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ab0:	443c      	add	r4, r7
 8000ab2:	eba4 0409 	sub.w	r4, r4, r9
 8000ab6:	fa1f f983 	uxth.w	r9, r3
 8000aba:	fbb4 f3f0 	udiv	r3, r4, r0
 8000abe:	fb00 4413 	mls	r4, r0, r3, r4
 8000ac2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ac6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aca:	45a4      	cmp	ip, r4
 8000acc:	d907      	bls.n	8000ade <__udivmoddi4+0x1d2>
 8000ace:	193c      	adds	r4, r7, r4
 8000ad0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ad4:	d267      	bcs.n	8000ba6 <__udivmoddi4+0x29a>
 8000ad6:	45a4      	cmp	ip, r4
 8000ad8:	d965      	bls.n	8000ba6 <__udivmoddi4+0x29a>
 8000ada:	3b02      	subs	r3, #2
 8000adc:	443c      	add	r4, r7
 8000ade:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ae2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ae6:	eba4 040c 	sub.w	r4, r4, ip
 8000aea:	429c      	cmp	r4, r3
 8000aec:	46ce      	mov	lr, r9
 8000aee:	469c      	mov	ip, r3
 8000af0:	d351      	bcc.n	8000b96 <__udivmoddi4+0x28a>
 8000af2:	d04e      	beq.n	8000b92 <__udivmoddi4+0x286>
 8000af4:	b155      	cbz	r5, 8000b0c <__udivmoddi4+0x200>
 8000af6:	ebb8 030e 	subs.w	r3, r8, lr
 8000afa:	eb64 040c 	sbc.w	r4, r4, ip
 8000afe:	fa04 f606 	lsl.w	r6, r4, r6
 8000b02:	40cb      	lsrs	r3, r1
 8000b04:	431e      	orrs	r6, r3
 8000b06:	40cc      	lsrs	r4, r1
 8000b08:	e9c5 6400 	strd	r6, r4, [r5]
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	e750      	b.n	80009b2 <__udivmoddi4+0xa6>
 8000b10:	f1c2 0320 	rsb	r3, r2, #32
 8000b14:	fa20 f103 	lsr.w	r1, r0, r3
 8000b18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b1c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b20:	4094      	lsls	r4, r2
 8000b22:	430c      	orrs	r4, r1
 8000b24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b28:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b2c:	fa1f f78c 	uxth.w	r7, ip
 8000b30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b34:	fb08 3110 	mls	r1, r8, r0, r3
 8000b38:	0c23      	lsrs	r3, r4, #16
 8000b3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3e:	fb00 f107 	mul.w	r1, r0, r7
 8000b42:	4299      	cmp	r1, r3
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x24c>
 8000b46:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b4e:	d22c      	bcs.n	8000baa <__udivmoddi4+0x29e>
 8000b50:	4299      	cmp	r1, r3
 8000b52:	d92a      	bls.n	8000baa <__udivmoddi4+0x29e>
 8000b54:	3802      	subs	r0, #2
 8000b56:	4463      	add	r3, ip
 8000b58:	1a5b      	subs	r3, r3, r1
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b60:	fb08 3311 	mls	r3, r8, r1, r3
 8000b64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b68:	fb01 f307 	mul.w	r3, r1, r7
 8000b6c:	42a3      	cmp	r3, r4
 8000b6e:	d908      	bls.n	8000b82 <__udivmoddi4+0x276>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b78:	d213      	bcs.n	8000ba2 <__udivmoddi4+0x296>
 8000b7a:	42a3      	cmp	r3, r4
 8000b7c:	d911      	bls.n	8000ba2 <__udivmoddi4+0x296>
 8000b7e:	3902      	subs	r1, #2
 8000b80:	4464      	add	r4, ip
 8000b82:	1ae4      	subs	r4, r4, r3
 8000b84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b88:	e739      	b.n	80009fe <__udivmoddi4+0xf2>
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	e6f0      	b.n	8000970 <__udivmoddi4+0x64>
 8000b8e:	4608      	mov	r0, r1
 8000b90:	e706      	b.n	80009a0 <__udivmoddi4+0x94>
 8000b92:	45c8      	cmp	r8, r9
 8000b94:	d2ae      	bcs.n	8000af4 <__udivmoddi4+0x1e8>
 8000b96:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b9a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b9e:	3801      	subs	r0, #1
 8000ba0:	e7a8      	b.n	8000af4 <__udivmoddi4+0x1e8>
 8000ba2:	4631      	mov	r1, r6
 8000ba4:	e7ed      	b.n	8000b82 <__udivmoddi4+0x276>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	e799      	b.n	8000ade <__udivmoddi4+0x1d2>
 8000baa:	4630      	mov	r0, r6
 8000bac:	e7d4      	b.n	8000b58 <__udivmoddi4+0x24c>
 8000bae:	46d6      	mov	lr, sl
 8000bb0:	e77f      	b.n	8000ab2 <__udivmoddi4+0x1a6>
 8000bb2:	4463      	add	r3, ip
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	e74d      	b.n	8000a54 <__udivmoddi4+0x148>
 8000bb8:	4606      	mov	r6, r0
 8000bba:	4623      	mov	r3, r4
 8000bbc:	4608      	mov	r0, r1
 8000bbe:	e70f      	b.n	80009e0 <__udivmoddi4+0xd4>
 8000bc0:	3e02      	subs	r6, #2
 8000bc2:	4463      	add	r3, ip
 8000bc4:	e730      	b.n	8000a28 <__udivmoddi4+0x11c>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_idiv0>:
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <LM35_Init>:
static ADC_HandleTypeDef hadc = {0};
static ADC_ChannelConfTypeDef sConfig = {0};
static uint8_t calibrated = 0;

void LM35_Init(uint16_t LM35_Instance)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	80fb      	strh	r3, [r7, #6]
	if(LM35_CfgParam[LM35_Instance].LM35_GPIO == GPIOA)
 8000bd6:	88fa      	ldrh	r2, [r7, #6]
 8000bd8:	4951      	ldr	r1, [pc, #324]	@ (8000d20 <LM35_Init+0x154>)
 8000bda:	4613      	mov	r3, r2
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	4413      	add	r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	440b      	add	r3, r1
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000bea:	d10c      	bne.n	8000c06 <LM35_Init+0x3a>
	{
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bec:	4b4d      	ldr	r3, [pc, #308]	@ (8000d24 <LM35_Init+0x158>)
 8000bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf0:	4a4c      	ldr	r2, [pc, #304]	@ (8000d24 <LM35_Init+0x158>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf8:	4b4a      	ldr	r3, [pc, #296]	@ (8000d24 <LM35_Init+0x158>)
 8000bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfc:	f003 0301 	and.w	r3, r3, #1
 8000c00:	617b      	str	r3, [r7, #20]
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	e046      	b.n	8000c94 <LM35_Init+0xc8>
	}
	else if(LM35_CfgParam[LM35_Instance].LM35_GPIO == GPIOB)
 8000c06:	88fa      	ldrh	r2, [r7, #6]
 8000c08:	4945      	ldr	r1, [pc, #276]	@ (8000d20 <LM35_Init+0x154>)
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	4413      	add	r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	440b      	add	r3, r1
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a44      	ldr	r2, [pc, #272]	@ (8000d28 <LM35_Init+0x15c>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d10c      	bne.n	8000c36 <LM35_Init+0x6a>
	{
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1c:	4b41      	ldr	r3, [pc, #260]	@ (8000d24 <LM35_Init+0x158>)
 8000c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c20:	4a40      	ldr	r2, [pc, #256]	@ (8000d24 <LM35_Init+0x158>)
 8000c22:	f043 0302 	orr.w	r3, r3, #2
 8000c26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c28:	4b3e      	ldr	r3, [pc, #248]	@ (8000d24 <LM35_Init+0x158>)
 8000c2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	e02e      	b.n	8000c94 <LM35_Init+0xc8>
	}
	else if(LM35_CfgParam[LM35_Instance].LM35_GPIO == GPIOC)
 8000c36:	88fa      	ldrh	r2, [r7, #6]
 8000c38:	4939      	ldr	r1, [pc, #228]	@ (8000d20 <LM35_Init+0x154>)
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	4413      	add	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	440b      	add	r3, r1
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a39      	ldr	r2, [pc, #228]	@ (8000d2c <LM35_Init+0x160>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d10c      	bne.n	8000c66 <LM35_Init+0x9a>
	{
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4c:	4b35      	ldr	r3, [pc, #212]	@ (8000d24 <LM35_Init+0x158>)
 8000c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c50:	4a34      	ldr	r2, [pc, #208]	@ (8000d24 <LM35_Init+0x158>)
 8000c52:	f043 0304 	orr.w	r3, r3, #4
 8000c56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c58:	4b32      	ldr	r3, [pc, #200]	@ (8000d24 <LM35_Init+0x158>)
 8000c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5c:	f003 0304 	and.w	r3, r3, #4
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	e016      	b.n	8000c94 <LM35_Init+0xc8>
	}
	else if (LM35_CfgParam[LM35_Instance].LM35_GPIO == GPIOD)
 8000c66:	88fa      	ldrh	r2, [r7, #6]
 8000c68:	492d      	ldr	r1, [pc, #180]	@ (8000d20 <LM35_Init+0x154>)
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	4413      	add	r3, r2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	440b      	add	r3, r1
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a2e      	ldr	r2, [pc, #184]	@ (8000d30 <LM35_Init+0x164>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d10b      	bne.n	8000c94 <LM35_Init+0xc8>
	{
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000c7c:	4b29      	ldr	r3, [pc, #164]	@ (8000d24 <LM35_Init+0x158>)
 8000c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c80:	4a28      	ldr	r2, [pc, #160]	@ (8000d24 <LM35_Init+0x158>)
 8000c82:	f043 0308 	orr.w	r3, r3, #8
 8000c86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c88:	4b26      	ldr	r3, [pc, #152]	@ (8000d24 <LM35_Init+0x158>)
 8000c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8c:	f003 0308 	and.w	r3, r3, #8
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	68bb      	ldr	r3, [r7, #8]
	}
	hadc.Instance = LM35_CfgParam[LM35_Instance].ADC_Instance;
 8000c94:	88fa      	ldrh	r2, [r7, #6]
 8000c96:	4922      	ldr	r1, [pc, #136]	@ (8000d20 <LM35_Init+0x154>)
 8000c98:	4613      	mov	r3, r2
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	4413      	add	r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	3304      	adds	r3, #4
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a23      	ldr	r2, [pc, #140]	@ (8000d34 <LM35_Init+0x168>)
 8000ca8:	6013      	str	r3, [r2, #0]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000caa:	4b22      	ldr	r3, [pc, #136]	@ (8000d34 <LM35_Init+0x168>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
	hadc.Init.ContinuousConvMode = DISABLE;
 8000cb0:	4b20      	ldr	r3, [pc, #128]	@ (8000d34 <LM35_Init+0x168>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	765a      	strb	r2, [r3, #25]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8000cb6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d34 <LM35_Init+0x168>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 2020 	strb.w	r2, [r3, #32]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000d34 <LM35_Init+0x168>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <LM35_Init+0x168>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
	hadc.Init.NbrOfConversion = 1;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	@ (8000d34 <LM35_Init+0x168>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	61da      	str	r2, [r3, #28]
	HAL_ADC_Init(&hadc);
 8000cd0:	4818      	ldr	r0, [pc, #96]	@ (8000d34 <LM35_Init+0x168>)
 8000cd2:	f000 fe9f 	bl	8001a14 <HAL_ADC_Init>
    sConfig.Channel = LM35_CfgParam[LM35_Instance].ADC_CH;
 8000cd6:	88fa      	ldrh	r2, [r7, #6]
 8000cd8:	4911      	ldr	r1, [pc, #68]	@ (8000d20 <LM35_Init+0x154>)
 8000cda:	4613      	mov	r3, r2
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	4413      	add	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	3308      	adds	r3, #8
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a13      	ldr	r2, [pc, #76]	@ (8000d38 <LM35_Init+0x16c>)
 8000cea:	6013      	str	r3, [r2, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cec:	4b12      	ldr	r3, [pc, #72]	@ (8000d38 <LM35_Init+0x16c>)
 8000cee:	2206      	movs	r2, #6
 8000cf0:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <LM35_Init+0x16c>)
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000cf8:	490f      	ldr	r1, [pc, #60]	@ (8000d38 <LM35_Init+0x16c>)
 8000cfa:	480e      	ldr	r0, [pc, #56]	@ (8000d34 <LM35_Init+0x168>)
 8000cfc:	f001 fbb2 	bl	8002464 <HAL_ADC_ConfigChannel>

	if(calibrated == 0)
 8000d00:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <LM35_Init+0x170>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d106      	bne.n	8000d16 <LM35_Init+0x14a>
	{
		HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED); // adding single diff
 8000d08:	217f      	movs	r1, #127	@ 0x7f
 8000d0a:	480a      	ldr	r0, [pc, #40]	@ (8000d34 <LM35_Init+0x168>)
 8000d0c:	f002 f8d4 	bl	8002eb8 <HAL_ADCEx_Calibration_Start>
		calibrated = 1;
 8000d10:	4b0a      	ldr	r3, [pc, #40]	@ (8000d3c <LM35_Init+0x170>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	701a      	strb	r2, [r3, #0]
	}
	//DWT_Delay_Init();
}
 8000d16:	bf00      	nop
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	08006a10 	.word	0x08006a10
 8000d24:	40021000 	.word	0x40021000
 8000d28:	48000400 	.word	0x48000400
 8000d2c:	48000800 	.word	0x48000800
 8000d30:	48000c00 	.word	0x48000c00
 8000d34:	20000078 	.word	0x20000078
 8000d38:	200000dc 	.word	0x200000dc
 8000d3c:	200000f4 	.word	0x200000f4

08000d40 <LM35_Read>:


float LM35_Read(uint16_t LM35_Instance)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	80fb      	strh	r3, [r7, #6]
	uint32_t AD_RES;
	float Temperature = 0;
 8000d4a:	f04f 0300 	mov.w	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]

	// Select The Sensor Instance ADC Channel
	sConfig.Channel = LM35_CfgParam[LM35_Instance].ADC_CH;
 8000d50:	88fa      	ldrh	r2, [r7, #6]
 8000d52:	491b      	ldr	r1, [pc, #108]	@ (8000dc0 <LM35_Read+0x80>)
 8000d54:	4613      	mov	r3, r2
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	4413      	add	r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	3308      	adds	r3, #8
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a18      	ldr	r2, [pc, #96]	@ (8000dc4 <LM35_Read+0x84>)
 8000d64:	6013      	str	r3, [r2, #0]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000d66:	4917      	ldr	r1, [pc, #92]	@ (8000dc4 <LM35_Read+0x84>)
 8000d68:	4817      	ldr	r0, [pc, #92]	@ (8000dc8 <LM35_Read+0x88>)
 8000d6a:	f001 fb7b 	bl	8002464 <HAL_ADC_ConfigChannel>
	// Start ADC Conversion
	HAL_ADC_Start(&hadc);
 8000d6e:	4816      	ldr	r0, [pc, #88]	@ (8000dc8 <LM35_Read+0x88>)
 8000d70:	f000 ffa0 	bl	8001cb4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, 1);
 8000d74:	2101      	movs	r1, #1
 8000d76:	4814      	ldr	r0, [pc, #80]	@ (8000dc8 <LM35_Read+0x88>)
 8000d78:	f001 f856 	bl	8001e28 <HAL_ADC_PollForConversion>
    // Get The Result & Convert To Temp In c_degrees
	AD_RES = HAL_ADC_GetValue(&hadc);
 8000d7c:	4812      	ldr	r0, [pc, #72]	@ (8000dc8 <LM35_Read+0x88>)
 8000d7e:	f001 f92b 	bl	8001fd8 <HAL_ADC_GetValue>
 8000d82:	60b8      	str	r0, [r7, #8]
	Temperature = (AD_RES * 0.0805664);
 8000d84:	68b8      	ldr	r0, [r7, #8]
 8000d86:	f7ff fcdf 	bl	8000748 <__aeabi_ui2d>
 8000d8a:	a30b      	add	r3, pc, #44	@ (adr r3, 8000db8 <LM35_Read+0x78>)
 8000d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d90:	f7ff fa6e 	bl	8000270 <__aeabi_dmul>
 8000d94:	4602      	mov	r2, r0
 8000d96:	460b      	mov	r3, r1
 8000d98:	4610      	mov	r0, r2
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f7ff fd4e 	bl	800083c <__aeabi_d2f>
 8000da0:	4603      	mov	r3, r0
 8000da2:	60fb      	str	r3, [r7, #12]

	return Temperature;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	ee07 3a90 	vmov	s15, r3
}
 8000daa:	eeb0 0a67 	vmov.f32	s0, s15
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	f3af 8000 	nop.w
 8000db8:	e5280d65 	.word	0xe5280d65
 8000dbc:	3fb49fff 	.word	0x3fb49fff
 8000dc0:	08006a10 	.word	0x08006a10
 8000dc4:	200000dc 	.word	0x200000dc
 8000dc8:	20000078 	.word	0x20000078

08000dcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dcc:	b5b0      	push	{r4, r5, r7, lr}
 8000dce:	b08e      	sub	sp, #56	@ 0x38
 8000dd0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd2:	f000 fb63 	bl	800149c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd6:	f000 f83d 	bl	8000e54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dda:	f000 f935 	bl	8001048 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000dde:	f000 f88b 	bl	8000ef8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000de2:	f000 f901 	bl	8000fe8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  LM35_Init(0);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f7ff fef0 	bl	8000bcc <LM35_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

// ...
	  float Temp1 = 0, temp2 = 0;
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000df2:	f04f 0300 	mov.w	r3, #0
 8000df6:	62bb      	str	r3, [r7, #40]	@ 0x28
	  uint8_t MSG[40] = {0};
 8000df8:	2300      	movs	r3, #0
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2224      	movs	r2, #36	@ 0x24
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f005 f96c 	bl	80060e0 <memset>
	  Temp1 = LM35_Read(0);
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f7ff ff99 	bl	8000d40 <LM35_Read>
 8000e0e:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
	  sprintf(MSG, "Temp = %.3f , %.3f\r\n", Temp1, temp2);
 8000e12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000e14:	f7ff fcba 	bl	800078c <__aeabi_f2d>
 8000e18:	4604      	mov	r4, r0
 8000e1a:	460d      	mov	r5, r1
 8000e1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000e1e:	f7ff fcb5 	bl	800078c <__aeabi_f2d>
 8000e22:	4602      	mov	r2, r0
 8000e24:	460b      	mov	r3, r1
 8000e26:	4638      	mov	r0, r7
 8000e28:	e9cd 2300 	strd	r2, r3, [sp]
 8000e2c:	4622      	mov	r2, r4
 8000e2e:	462b      	mov	r3, r5
 8000e30:	4906      	ldr	r1, [pc, #24]	@ (8000e4c <main+0x80>)
 8000e32:	f005 f935 	bl	80060a0 <siprintf>
	  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 8000e36:	4639      	mov	r1, r7
 8000e38:	2364      	movs	r3, #100	@ 0x64
 8000e3a:	2228      	movs	r2, #40	@ 0x28
 8000e3c:	4804      	ldr	r0, [pc, #16]	@ (8000e50 <main+0x84>)
 8000e3e:	f004 f861 	bl	8004f04 <HAL_UART_Transmit>
	  HAL_Delay(10);
 8000e42:	200a      	movs	r0, #10
 8000e44:	f000 fba6 	bl	8001594 <HAL_Delay>
  {
 8000e48:	bf00      	nop
 8000e4a:	e7cf      	b.n	8000dec <main+0x20>
 8000e4c:	080069f8 	.word	0x080069f8
 8000e50:	2000015c 	.word	0x2000015c

08000e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b096      	sub	sp, #88	@ 0x58
 8000e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	2244      	movs	r2, #68	@ 0x44
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f005 f93c 	bl	80060e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e68:	463b      	mov	r3, r7
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e76:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e7a:	f002 fce3 	bl	8003844 <HAL_PWREx_ControlVoltageScaling>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e84:	f000 f94e 	bl	8001124 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e90:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e92:	2310      	movs	r3, #16
 8000e94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e96:	2302      	movs	r3, #2
 8000e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000ea2:	2309      	movs	r3, #9
 8000ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ea6:	2307      	movs	r3, #7
 8000ea8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f002 fd1a 	bl	80038f0 <HAL_RCC_OscConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ec2:	f000 f92f 	bl	8001124 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec6:	230f      	movs	r3, #15
 8000ec8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000eda:	463b      	mov	r3, r7
 8000edc:	2104      	movs	r1, #4
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f003 f8e2 	bl	80040a8 <HAL_RCC_ClockConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000eea:	f000 f91b 	bl	8001124 <Error_Handler>
  }
}
 8000eee:	bf00      	nop
 8000ef0:	3758      	adds	r7, #88	@ 0x58
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	@ 0x28
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000efe:	f107 031c 	add.w	r3, r7, #28
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
 8000f18:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f1a:	4b30      	ldr	r3, [pc, #192]	@ (8000fdc <MX_ADC1_Init+0xe4>)
 8000f1c:	4a30      	ldr	r2, [pc, #192]	@ (8000fe0 <MX_ADC1_Init+0xe8>)
 8000f1e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000f20:	4b2e      	ldr	r3, [pc, #184]	@ (8000fdc <MX_ADC1_Init+0xe4>)
 8000f22:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f26:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f28:	4b2c      	ldr	r3, [pc, #176]	@ (8000fdc <MX_ADC1_Init+0xe4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000fdc <MX_ADC1_Init+0xe4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f34:	4b29      	ldr	r3, [pc, #164]	@ (8000fdc <MX_ADC1_Init+0xe4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f3a:	4b28      	ldr	r3, [pc, #160]	@ (8000fdc <MX_ADC1_Init+0xe4>)
 8000f3c:	2204      	movs	r2, #4
 8000f3e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f40:	4b26      	ldr	r3, [pc, #152]	@ (8000fdc <MX_ADC1_Init+0xe4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f46:	4b25      	ldr	r3, [pc, #148]	@ (8000fdc <MX_ADC1_Init+0xe4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f4c:	4b23      	ldr	r3, [pc, #140]	@ (8000fdc <MX_ADC1_Init+0xe4>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f52:	4b22      	ldr	r3, [pc, #136]	@ (8000fdc <MX_ADC1_Init+0xe4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f5a:	4b20      	ldr	r3, [pc, #128]	@ (8000fdc <MX_ADC1_Init+0xe4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f60:	4b1e      	ldr	r3, [pc, #120]	@ (8000fdc <MX_ADC1_Init+0xe4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f66:	4b1d      	ldr	r3, [pc, #116]	@ (8000fdc <MX_ADC1_Init+0xe4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fdc <MX_ADC1_Init+0xe4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f74:	4b19      	ldr	r3, [pc, #100]	@ (8000fdc <MX_ADC1_Init+0xe4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f7c:	4817      	ldr	r0, [pc, #92]	@ (8000fdc <MX_ADC1_Init+0xe4>)
 8000f7e:	f000 fd49 	bl	8001a14 <HAL_ADC_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000f88:	f000 f8cc 	bl	8001124 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f90:	f107 031c 	add.w	r3, r7, #28
 8000f94:	4619      	mov	r1, r3
 8000f96:	4811      	ldr	r0, [pc, #68]	@ (8000fdc <MX_ADC1_Init+0xe4>)
 8000f98:	f002 f820 	bl	8002fdc <HAL_ADCEx_MultiModeConfigChannel>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000fa2:	f000 f8bf 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <MX_ADC1_Init+0xec>)
 8000fa8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000faa:	2306      	movs	r3, #6
 8000fac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fb2:	237f      	movs	r3, #127	@ 0x7f
 8000fb4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4806      	ldr	r0, [pc, #24]	@ (8000fdc <MX_ADC1_Init+0xe4>)
 8000fc4:	f001 fa4e 	bl	8002464 <HAL_ADC_ConfigChannel>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000fce:	f000 f8a9 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	3728      	adds	r7, #40	@ 0x28
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200000f8 	.word	0x200000f8
 8000fe0:	50040000 	.word	0x50040000
 8000fe4:	14f00020 	.word	0x14f00020

08000fe8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fec:	4b14      	ldr	r3, [pc, #80]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 8000fee:	4a15      	ldr	r2, [pc, #84]	@ (8001044 <MX_USART2_UART_Init+0x5c>)
 8000ff0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ff2:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 8000ff4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ff8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001000:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001006:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800100c:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 800100e:	220c      	movs	r2, #12
 8001010:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001012:	4b0b      	ldr	r3, [pc, #44]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001018:	4b09      	ldr	r3, [pc, #36]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800101e:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001024:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 8001026:	2200      	movs	r2, #0
 8001028:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800102a:	4805      	ldr	r0, [pc, #20]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 800102c:	f003 ff1c 	bl	8004e68 <HAL_UART_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001036:	f000 f875 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2000015c 	.word	0x2000015c
 8001044:	40004400 	.word	0x40004400

08001048 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	@ 0x28
 800104c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	4b2f      	ldr	r3, [pc, #188]	@ (800111c <MX_GPIO_Init+0xd4>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001062:	4a2e      	ldr	r2, [pc, #184]	@ (800111c <MX_GPIO_Init+0xd4>)
 8001064:	f043 0304 	orr.w	r3, r3, #4
 8001068:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800106a:	4b2c      	ldr	r3, [pc, #176]	@ (800111c <MX_GPIO_Init+0xd4>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106e:	f003 0304 	and.w	r3, r3, #4
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001076:	4b29      	ldr	r3, [pc, #164]	@ (800111c <MX_GPIO_Init+0xd4>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107a:	4a28      	ldr	r2, [pc, #160]	@ (800111c <MX_GPIO_Init+0xd4>)
 800107c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001080:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001082:	4b26      	ldr	r3, [pc, #152]	@ (800111c <MX_GPIO_Init+0xd4>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	4b23      	ldr	r3, [pc, #140]	@ (800111c <MX_GPIO_Init+0xd4>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001092:	4a22      	ldr	r2, [pc, #136]	@ (800111c <MX_GPIO_Init+0xd4>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800109a:	4b20      	ldr	r3, [pc, #128]	@ (800111c <MX_GPIO_Init+0xd4>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a6:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <MX_GPIO_Init+0xd4>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	4a1c      	ldr	r2, [pc, #112]	@ (800111c <MX_GPIO_Init+0xd4>)
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b2:	4b1a      	ldr	r3, [pc, #104]	@ (800111c <MX_GPIO_Init+0xd4>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	2120      	movs	r1, #32
 80010c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c6:	f002 fb73 	bl	80037b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010d0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	480f      	ldr	r0, [pc, #60]	@ (8001120 <MX_GPIO_Init+0xd8>)
 80010e2:	f002 f9bb 	bl	800345c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010e6:	2320      	movs	r3, #32
 80010e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ea:	2301      	movs	r3, #1
 80010ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4619      	mov	r1, r3
 80010fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001100:	f002 f9ac 	bl	800345c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001104:	2200      	movs	r2, #0
 8001106:	2100      	movs	r1, #0
 8001108:	2028      	movs	r0, #40	@ 0x28
 800110a:	f002 f8f2 	bl	80032f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800110e:	2028      	movs	r0, #40	@ 0x28
 8001110:	f002 f90b 	bl	800332a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001114:	bf00      	nop
 8001116:	3728      	adds	r7, #40	@ 0x28
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40021000 	.word	0x40021000
 8001120:	48000800 	.word	0x48000800

08001124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001128:	b672      	cpsid	i
}
 800112a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <Error_Handler+0x8>

08001130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	4b0f      	ldr	r3, [pc, #60]	@ (8001174 <HAL_MspInit+0x44>)
 8001138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800113a:	4a0e      	ldr	r2, [pc, #56]	@ (8001174 <HAL_MspInit+0x44>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6613      	str	r3, [r2, #96]	@ 0x60
 8001142:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <HAL_MspInit+0x44>)
 8001144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114e:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <HAL_MspInit+0x44>)
 8001150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001152:	4a08      	ldr	r2, [pc, #32]	@ (8001174 <HAL_MspInit+0x44>)
 8001154:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001158:	6593      	str	r3, [r2, #88]	@ 0x58
 800115a:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <HAL_MspInit+0x44>)
 800115c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40021000 	.word	0x40021000

08001178 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b0ac      	sub	sp, #176	@ 0xb0
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2288      	movs	r2, #136	@ 0x88
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f004 ffa1 	bl	80060e0 <memset>
  if(hadc->Instance==ADC1)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a2b      	ldr	r2, [pc, #172]	@ (8001250 <HAL_ADC_MspInit+0xd8>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d14f      	bne.n	8001248 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011a8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80011ac:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80011ae:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80011b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80011b6:	2302      	movs	r3, #2
 80011b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80011ba:	2301      	movs	r3, #1
 80011bc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80011be:	2308      	movs	r3, #8
 80011c0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80011c2:	2307      	movs	r3, #7
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011c6:	2302      	movs	r3, #2
 80011c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011ca:	2302      	movs	r3, #2
 80011cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80011ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80011d2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4618      	mov	r0, r3
 80011da:	f003 f989 	bl	80044f0 <HAL_RCCEx_PeriphCLKConfig>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80011e4:	f7ff ff9e 	bl	8001124 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001254 <HAL_ADC_MspInit+0xdc>)
 80011ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ec:	4a19      	ldr	r2, [pc, #100]	@ (8001254 <HAL_ADC_MspInit+0xdc>)
 80011ee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f4:	4b17      	ldr	r3, [pc, #92]	@ (8001254 <HAL_ADC_MspInit+0xdc>)
 80011f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001200:	4b14      	ldr	r3, [pc, #80]	@ (8001254 <HAL_ADC_MspInit+0xdc>)
 8001202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001204:	4a13      	ldr	r2, [pc, #76]	@ (8001254 <HAL_ADC_MspInit+0xdc>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800120c:	4b11      	ldr	r3, [pc, #68]	@ (8001254 <HAL_ADC_MspInit+0xdc>)
 800120e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001218:	2301      	movs	r3, #1
 800121a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800121e:	230b      	movs	r3, #11
 8001220:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800122e:	4619      	mov	r1, r3
 8001230:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001234:	f002 f912 	bl	800345c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	2100      	movs	r1, #0
 800123c:	2012      	movs	r0, #18
 800123e:	f002 f858 	bl	80032f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001242:	2012      	movs	r0, #18
 8001244:	f002 f871 	bl	800332a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001248:	bf00      	nop
 800124a:	37b0      	adds	r7, #176	@ 0xb0
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	50040000 	.word	0x50040000
 8001254:	40021000 	.word	0x40021000

08001258 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b0ac      	sub	sp, #176	@ 0xb0
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2288      	movs	r2, #136	@ 0x88
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f004 ff31 	bl	80060e0 <memset>
  if(huart->Instance==USART2)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a25      	ldr	r2, [pc, #148]	@ (8001318 <HAL_UART_MspInit+0xc0>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d143      	bne.n	8001310 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001288:	2302      	movs	r3, #2
 800128a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800128c:	2300      	movs	r3, #0
 800128e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4618      	mov	r0, r3
 8001296:	f003 f92b 	bl	80044f0 <HAL_RCCEx_PeriphCLKConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012a0:	f7ff ff40 	bl	8001124 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012a4:	4b1d      	ldr	r3, [pc, #116]	@ (800131c <HAL_UART_MspInit+0xc4>)
 80012a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a8:	4a1c      	ldr	r2, [pc, #112]	@ (800131c <HAL_UART_MspInit+0xc4>)
 80012aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80012b0:	4b1a      	ldr	r3, [pc, #104]	@ (800131c <HAL_UART_MspInit+0xc4>)
 80012b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012bc:	4b17      	ldr	r3, [pc, #92]	@ (800131c <HAL_UART_MspInit+0xc4>)
 80012be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c0:	4a16      	ldr	r2, [pc, #88]	@ (800131c <HAL_UART_MspInit+0xc4>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c8:	4b14      	ldr	r3, [pc, #80]	@ (800131c <HAL_UART_MspInit+0xc4>)
 80012ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012d4:	230c      	movs	r3, #12
 80012d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e6:	2303      	movs	r3, #3
 80012e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012ec:	2307      	movs	r3, #7
 80012ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012f6:	4619      	mov	r1, r3
 80012f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012fc:	f002 f8ae 	bl	800345c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001300:	2200      	movs	r2, #0
 8001302:	2100      	movs	r1, #0
 8001304:	2026      	movs	r0, #38	@ 0x26
 8001306:	f001 fff4 	bl	80032f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800130a:	2026      	movs	r0, #38	@ 0x26
 800130c:	f002 f80d 	bl	800332a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001310:	bf00      	nop
 8001312:	37b0      	adds	r7, #176	@ 0xb0
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40004400 	.word	0x40004400
 800131c:	40021000 	.word	0x40021000

08001320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <NMI_Handler+0x4>

08001328 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <HardFault_Handler+0x4>

08001330 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <MemManage_Handler+0x4>

08001338 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <BusFault_Handler+0x4>

08001340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <UsageFault_Handler+0x4>

08001348 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001376:	f000 f8ed 	bl	8001554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001384:	4802      	ldr	r0, [pc, #8]	@ (8001390 <ADC1_2_IRQHandler+0x10>)
 8001386:	f000 fe35 	bl	8001ff4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200000f8 	.word	0x200000f8

08001394 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001398:	4802      	ldr	r0, [pc, #8]	@ (80013a4 <USART2_IRQHandler+0x10>)
 800139a:	f003 fe3d 	bl	8005018 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000015c 	.word	0x2000015c

080013a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80013ac:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80013b0:	f002 fa16 	bl	80037e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c0:	4a14      	ldr	r2, [pc, #80]	@ (8001414 <_sbrk+0x5c>)
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <_sbrk+0x60>)
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013cc:	4b13      	ldr	r3, [pc, #76]	@ (800141c <_sbrk+0x64>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d102      	bne.n	80013da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d4:	4b11      	ldr	r3, [pc, #68]	@ (800141c <_sbrk+0x64>)
 80013d6:	4a12      	ldr	r2, [pc, #72]	@ (8001420 <_sbrk+0x68>)
 80013d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013da:	4b10      	ldr	r3, [pc, #64]	@ (800141c <_sbrk+0x64>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d207      	bcs.n	80013f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e8:	f004 fe82 	bl	80060f0 <__errno>
 80013ec:	4603      	mov	r3, r0
 80013ee:	220c      	movs	r2, #12
 80013f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
 80013f6:	e009      	b.n	800140c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f8:	4b08      	ldr	r3, [pc, #32]	@ (800141c <_sbrk+0x64>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013fe:	4b07      	ldr	r3, [pc, #28]	@ (800141c <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	4a05      	ldr	r2, [pc, #20]	@ (800141c <_sbrk+0x64>)
 8001408:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800140a:	68fb      	ldr	r3, [r7, #12]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20018000 	.word	0x20018000
 8001418:	00000400 	.word	0x00000400
 800141c:	200001e4 	.word	0x200001e4
 8001420:	20000338 	.word	0x20000338

08001424 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001428:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <SystemInit+0x20>)
 800142a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800142e:	4a05      	ldr	r2, [pc, #20]	@ (8001444 <SystemInit+0x20>)
 8001430:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001434:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001448:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001480 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800144c:	f7ff ffea 	bl	8001424 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001450:	480c      	ldr	r0, [pc, #48]	@ (8001484 <LoopForever+0x6>)
  ldr r1, =_edata
 8001452:	490d      	ldr	r1, [pc, #52]	@ (8001488 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001454:	4a0d      	ldr	r2, [pc, #52]	@ (800148c <LoopForever+0xe>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001458:	e002      	b.n	8001460 <LoopCopyDataInit>

0800145a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800145c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145e:	3304      	adds	r3, #4

08001460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001464:	d3f9      	bcc.n	800145a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001466:	4a0a      	ldr	r2, [pc, #40]	@ (8001490 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001468:	4c0a      	ldr	r4, [pc, #40]	@ (8001494 <LoopForever+0x16>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800146c:	e001      	b.n	8001472 <LoopFillZerobss>

0800146e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001470:	3204      	adds	r2, #4

08001472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001474:	d3fb      	bcc.n	800146e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001476:	f004 fe41 	bl	80060fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800147a:	f7ff fca7 	bl	8000dcc <main>

0800147e <LoopForever>:

LoopForever:
    b LoopForever
 800147e:	e7fe      	b.n	800147e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001480:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001488:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800148c:	08006aa8 	.word	0x08006aa8
  ldr r2, =_sbss
 8001490:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001494:	20000334 	.word	0x20000334

08001498 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001498:	e7fe      	b.n	8001498 <ADC3_IRQHandler>
	...

0800149c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a6:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <HAL_Init+0x3c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a0b      	ldr	r2, [pc, #44]	@ (80014d8 <HAL_Init+0x3c>)
 80014ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014b0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b2:	2003      	movs	r0, #3
 80014b4:	f001 ff12 	bl	80032dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014b8:	2000      	movs	r0, #0
 80014ba:	f000 f80f 	bl	80014dc <HAL_InitTick>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d002      	beq.n	80014ca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	71fb      	strb	r3, [r7, #7]
 80014c8:	e001      	b.n	80014ce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014ca:	f7ff fe31 	bl	8001130 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014ce:	79fb      	ldrb	r3, [r7, #7]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40022000 	.word	0x40022000

080014dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014e8:	4b17      	ldr	r3, [pc, #92]	@ (8001548 <HAL_InitTick+0x6c>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d023      	beq.n	8001538 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014f0:	4b16      	ldr	r3, [pc, #88]	@ (800154c <HAL_InitTick+0x70>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <HAL_InitTick+0x6c>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001502:	fbb2 f3f3 	udiv	r3, r2, r3
 8001506:	4618      	mov	r0, r3
 8001508:	f001 ff1d 	bl	8003346 <HAL_SYSTICK_Config>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10f      	bne.n	8001532 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b0f      	cmp	r3, #15
 8001516:	d809      	bhi.n	800152c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001518:	2200      	movs	r2, #0
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	f001 fee7 	bl	80032f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001524:	4a0a      	ldr	r2, [pc, #40]	@ (8001550 <HAL_InitTick+0x74>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	e007      	b.n	800153c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
 8001530:	e004      	b.n	800153c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	73fb      	strb	r3, [r7, #15]
 8001536:	e001      	b.n	800153c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800153c:	7bfb      	ldrb	r3, [r7, #15]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000008 	.word	0x20000008
 800154c:	20000000 	.word	0x20000000
 8001550:	20000004 	.word	0x20000004

08001554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <HAL_IncTick+0x20>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_IncTick+0x24>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4413      	add	r3, r2
 8001564:	4a04      	ldr	r2, [pc, #16]	@ (8001578 <HAL_IncTick+0x24>)
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000008 	.word	0x20000008
 8001578:	200001e8 	.word	0x200001e8

0800157c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return uwTick;
 8001580:	4b03      	ldr	r3, [pc, #12]	@ (8001590 <HAL_GetTick+0x14>)
 8001582:	681b      	ldr	r3, [r3, #0]
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	200001e8 	.word	0x200001e8

08001594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800159c:	f7ff ffee 	bl	800157c <HAL_GetTick>
 80015a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ac:	d005      	beq.n	80015ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015ae:	4b0a      	ldr	r3, [pc, #40]	@ (80015d8 <HAL_Delay+0x44>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ba:	bf00      	nop
 80015bc:	f7ff ffde 	bl	800157c <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d8f7      	bhi.n	80015bc <HAL_Delay+0x28>
  {
  }
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000008 	.word	0x20000008

080015dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	609a      	str	r2, [r3, #8]
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
 800160a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	609a      	str	r2, [r3, #8]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001638:	4618      	mov	r0, r3
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001644:	b480      	push	{r7}
 8001646:	b087      	sub	sp, #28
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
 8001650:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	3360      	adds	r3, #96	@ 0x60
 8001656:	461a      	mov	r2, r3
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b08      	ldr	r3, [pc, #32]	@ (8001688 <LL_ADC_SetOffset+0x44>)
 8001666:	4013      	ands	r3, r2
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	4313      	orrs	r3, r2
 8001674:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800167c:	bf00      	nop
 800167e:	371c      	adds	r7, #28
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	03fff000 	.word	0x03fff000

0800168c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3360      	adds	r3, #96	@ 0x60
 800169a:	461a      	mov	r2, r3
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b087      	sub	sp, #28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	3360      	adds	r3, #96	@ 0x60
 80016c8:	461a      	mov	r2, r3
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	431a      	orrs	r2, r3
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80016e2:	bf00      	nop
 80016e4:	371c      	adds	r7, #28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001714:	b480      	push	{r7}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	3330      	adds	r3, #48	@ 0x30
 8001724:	461a      	mov	r2, r3
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	f003 030c 	and.w	r3, r3, #12
 8001730:	4413      	add	r3, r2
 8001732:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	f003 031f 	and.w	r3, r3, #31
 800173e:	211f      	movs	r1, #31
 8001740:	fa01 f303 	lsl.w	r3, r1, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	401a      	ands	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	0e9b      	lsrs	r3, r3, #26
 800174c:	f003 011f 	and.w	r1, r3, #31
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	f003 031f 	and.w	r3, r3, #31
 8001756:	fa01 f303 	lsl.w	r3, r1, r3
 800175a:	431a      	orrs	r2, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001760:	bf00      	nop
 8001762:	371c      	adds	r7, #28
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001778:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001792:	b480      	push	{r7}
 8001794:	b087      	sub	sp, #28
 8001796:	af00      	add	r7, sp, #0
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	3314      	adds	r3, #20
 80017a2:	461a      	mov	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	0e5b      	lsrs	r3, r3, #25
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	4413      	add	r3, r2
 80017b0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	0d1b      	lsrs	r3, r3, #20
 80017ba:	f003 031f 	and.w	r3, r3, #31
 80017be:	2107      	movs	r1, #7
 80017c0:	fa01 f303 	lsl.w	r3, r1, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	401a      	ands	r2, r3
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	0d1b      	lsrs	r3, r3, #20
 80017cc:	f003 031f 	and.w	r3, r3, #31
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	fa01 f303 	lsl.w	r3, r1, r3
 80017d6:	431a      	orrs	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017dc:	bf00      	nop
 80017de:	371c      	adds	r7, #28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001800:	43db      	mvns	r3, r3
 8001802:	401a      	ands	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f003 0318 	and.w	r3, r3, #24
 800180a:	4908      	ldr	r1, [pc, #32]	@ (800182c <LL_ADC_SetChannelSingleDiff+0x44>)
 800180c:	40d9      	lsrs	r1, r3
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	400b      	ands	r3, r1
 8001812:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001816:	431a      	orrs	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	0007ffff 	.word	0x0007ffff

08001830 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 031f 	and.w	r3, r3, #31
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001878:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6093      	str	r3, [r2, #8]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800189c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018a0:	d101      	bne.n	80018a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018a2:	2301      	movs	r3, #1
 80018a4:	e000      	b.n	80018a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80018c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018c8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80018f0:	d101      	bne.n	80018f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001914:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001918:	f043 0201 	orr.w	r2, r3, #1
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800193c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001940:	f043 0202 	orr.w	r2, r3, #2
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b01      	cmp	r3, #1
 8001966:	d101      	bne.n	800196c <LL_ADC_IsEnabled+0x18>
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <LL_ADC_IsEnabled+0x1a>
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b02      	cmp	r3, #2
 800198c:	d101      	bne.n	8001992 <LL_ADC_IsDisableOngoing+0x18>
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <LL_ADC_IsDisableOngoing+0x1a>
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80019b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019b4:	f043 0204 	orr.w	r2, r3, #4
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d101      	bne.n	80019e0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 0308 	and.w	r3, r3, #8
 80019fe:	2b08      	cmp	r3, #8
 8001a00:	d101      	bne.n	8001a06 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a14:	b590      	push	{r4, r7, lr}
 8001a16:	b089      	sub	sp, #36	@ 0x24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e130      	b.n	8001c90 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d109      	bne.n	8001a50 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff fb9b 	bl	8001178 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff19 	bl	800188c <LL_ADC_IsDeepPowerDownEnabled>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d004      	beq.n	8001a6a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff feff 	bl	8001868 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff ff34 	bl	80018dc <LL_ADC_IsInternalRegulatorEnabled>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d115      	bne.n	8001aa6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff ff18 	bl	80018b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a84:	4b84      	ldr	r3, [pc, #528]	@ (8001c98 <HAL_ADC_Init+0x284>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	099b      	lsrs	r3, r3, #6
 8001a8a:	4a84      	ldr	r2, [pc, #528]	@ (8001c9c <HAL_ADC_Init+0x288>)
 8001a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a90:	099b      	lsrs	r3, r3, #6
 8001a92:	3301      	adds	r3, #1
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a98:	e002      	b.n	8001aa0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f9      	bne.n	8001a9a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff ff16 	bl	80018dc <LL_ADC_IsInternalRegulatorEnabled>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10d      	bne.n	8001ad2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aba:	f043 0210 	orr.w	r2, r3, #16
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac6:	f043 0201 	orr.w	r2, r3, #1
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff ff76 	bl	80019c8 <LL_ADC_REG_IsConversionOngoing>
 8001adc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f040 80c9 	bne.w	8001c7e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f040 80c5 	bne.w	8001c7e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001af8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001afc:	f043 0202 	orr.w	r2, r3, #2
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff23 	bl	8001954 <LL_ADC_IsEnabled>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d115      	bne.n	8001b40 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b14:	4862      	ldr	r0, [pc, #392]	@ (8001ca0 <HAL_ADC_Init+0x28c>)
 8001b16:	f7ff ff1d 	bl	8001954 <LL_ADC_IsEnabled>
 8001b1a:	4604      	mov	r4, r0
 8001b1c:	4861      	ldr	r0, [pc, #388]	@ (8001ca4 <HAL_ADC_Init+0x290>)
 8001b1e:	f7ff ff19 	bl	8001954 <LL_ADC_IsEnabled>
 8001b22:	4603      	mov	r3, r0
 8001b24:	431c      	orrs	r4, r3
 8001b26:	4860      	ldr	r0, [pc, #384]	@ (8001ca8 <HAL_ADC_Init+0x294>)
 8001b28:	f7ff ff14 	bl	8001954 <LL_ADC_IsEnabled>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	4323      	orrs	r3, r4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d105      	bne.n	8001b40 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	485c      	ldr	r0, [pc, #368]	@ (8001cac <HAL_ADC_Init+0x298>)
 8001b3c:	f7ff fd4e 	bl	80015dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	7e5b      	ldrb	r3, [r3, #25]
 8001b44:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b4a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b50:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b56:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b5e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d106      	bne.n	8001b7c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b72:	3b01      	subs	r3, #1
 8001b74:	045b      	lsls	r3, r3, #17
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d009      	beq.n	8001b98 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b88:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b90:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	4b44      	ldr	r3, [pc, #272]	@ (8001cb0 <HAL_ADC_Init+0x29c>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	69b9      	ldr	r1, [r7, #24]
 8001ba8:	430b      	orrs	r3, r1
 8001baa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff1c 	bl	80019ee <LL_ADC_INJ_IsConversionOngoing>
 8001bb6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d13d      	bne.n	8001c3a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d13a      	bne.n	8001c3a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bc8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001bd0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001be0:	f023 0302 	bic.w	r3, r3, #2
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6812      	ldr	r2, [r2, #0]
 8001be8:	69b9      	ldr	r1, [r7, #24]
 8001bea:	430b      	orrs	r3, r1
 8001bec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d118      	bne.n	8001c2a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001c02:	f023 0304 	bic.w	r3, r3, #4
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c0e:	4311      	orrs	r1, r2
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001c14:	4311      	orrs	r1, r2
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0201 	orr.w	r2, r2, #1
 8001c26:	611a      	str	r2, [r3, #16]
 8001c28:	e007      	b.n	8001c3a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	691a      	ldr	r2, [r3, #16]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0201 	bic.w	r2, r2, #1
 8001c38:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d10c      	bne.n	8001c5c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c48:	f023 010f 	bic.w	r1, r3, #15
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	1e5a      	subs	r2, r3, #1
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c5a:	e007      	b.n	8001c6c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 020f 	bic.w	r2, r2, #15
 8001c6a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c70:	f023 0303 	bic.w	r3, r3, #3
 8001c74:	f043 0201 	orr.w	r2, r3, #1
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c7c:	e007      	b.n	8001c8e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c82:	f043 0210 	orr.w	r2, r3, #16
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3724      	adds	r7, #36	@ 0x24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd90      	pop	{r4, r7, pc}
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	053e2d63 	.word	0x053e2d63
 8001ca0:	50040000 	.word	0x50040000
 8001ca4:	50040100 	.word	0x50040100
 8001ca8:	50040200 	.word	0x50040200
 8001cac:	50040300 	.word	0x50040300
 8001cb0:	fff0c007 	.word	0xfff0c007

08001cb4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cbc:	4857      	ldr	r0, [pc, #348]	@ (8001e1c <HAL_ADC_Start+0x168>)
 8001cbe:	f7ff fdb7 	bl	8001830 <LL_ADC_GetMultimode>
 8001cc2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fe7d 	bl	80019c8 <LL_ADC_REG_IsConversionOngoing>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f040 809c 	bne.w	8001e0e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d101      	bne.n	8001ce4 <HAL_ADC_Start+0x30>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e097      	b.n	8001e14 <HAL_ADC_Start+0x160>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 ffab 	bl	8002c48 <ADC_Enable>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001cf6:	7dfb      	ldrb	r3, [r7, #23]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f040 8083 	bne.w	8001e04 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d02:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d06:	f023 0301 	bic.w	r3, r3, #1
 8001d0a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a42      	ldr	r2, [pc, #264]	@ (8001e20 <HAL_ADC_Start+0x16c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d002      	beq.n	8001d22 <HAL_ADC_Start+0x6e>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	e000      	b.n	8001d24 <HAL_ADC_Start+0x70>
 8001d22:	4b40      	ldr	r3, [pc, #256]	@ (8001e24 <HAL_ADC_Start+0x170>)
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d002      	beq.n	8001d32 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d105      	bne.n	8001d3e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d36:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d4a:	d106      	bne.n	8001d5a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d50:	f023 0206 	bic.w	r2, r3, #6
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d58:	e002      	b.n	8001d60 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	221c      	movs	r2, #28
 8001d66:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a2a      	ldr	r2, [pc, #168]	@ (8001e20 <HAL_ADC_Start+0x16c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d002      	beq.n	8001d80 <HAL_ADC_Start+0xcc>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	e000      	b.n	8001d82 <HAL_ADC_Start+0xce>
 8001d80:	4b28      	ldr	r3, [pc, #160]	@ (8001e24 <HAL_ADC_Start+0x170>)
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d008      	beq.n	8001d9c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	2b05      	cmp	r3, #5
 8001d94:	d002      	beq.n	8001d9c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	2b09      	cmp	r3, #9
 8001d9a:	d114      	bne.n	8001dc6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d007      	beq.n	8001dba <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001db2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fdee 	bl	80019a0 <LL_ADC_REG_StartConversion>
 8001dc4:	e025      	b.n	8001e12 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a12      	ldr	r2, [pc, #72]	@ (8001e20 <HAL_ADC_Start+0x16c>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d002      	beq.n	8001de2 <HAL_ADC_Start+0x12e>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	e000      	b.n	8001de4 <HAL_ADC_Start+0x130>
 8001de2:	4b10      	ldr	r3, [pc, #64]	@ (8001e24 <HAL_ADC_Start+0x170>)
 8001de4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00f      	beq.n	8001e12 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001dfa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	655a      	str	r2, [r3, #84]	@ 0x54
 8001e02:	e006      	b.n	8001e12 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001e0c:	e001      	b.n	8001e12 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	50040300 	.word	0x50040300
 8001e20:	50040100 	.word	0x50040100
 8001e24:	50040000 	.word	0x50040000

08001e28 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e32:	4866      	ldr	r0, [pc, #408]	@ (8001fcc <HAL_ADC_PollForConversion+0x1a4>)
 8001e34:	f7ff fcfc 	bl	8001830 <LL_ADC_GetMultimode>
 8001e38:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d102      	bne.n	8001e48 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001e42:	2308      	movs	r3, #8
 8001e44:	61fb      	str	r3, [r7, #28]
 8001e46:	e02a      	b.n	8001e9e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	2b05      	cmp	r3, #5
 8001e52:	d002      	beq.n	8001e5a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	2b09      	cmp	r3, #9
 8001e58:	d111      	bne.n	8001e7e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d007      	beq.n	8001e78 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e6c:	f043 0220 	orr.w	r2, r3, #32
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e0a4      	b.n	8001fc2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001e78:	2304      	movs	r3, #4
 8001e7a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001e7c:	e00f      	b.n	8001e9e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001e7e:	4853      	ldr	r0, [pc, #332]	@ (8001fcc <HAL_ADC_PollForConversion+0x1a4>)
 8001e80:	f7ff fce4 	bl	800184c <LL_ADC_GetMultiDMATransfer>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d007      	beq.n	8001e9a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e8e:	f043 0220 	orr.w	r2, r3, #32
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e093      	b.n	8001fc2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e9e:	f7ff fb6d 	bl	800157c <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ea4:	e021      	b.n	8001eea <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eac:	d01d      	beq.n	8001eea <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001eae:	f7ff fb65 	bl	800157c <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d302      	bcc.n	8001ec4 <HAL_ADC_PollForConversion+0x9c>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d112      	bne.n	8001eea <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10b      	bne.n	8001eea <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed6:	f043 0204 	orr.w	r2, r3, #4
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e06b      	b.n	8001fc2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0d6      	beq.n	8001ea6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001efc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fbf0 	bl	80016ee <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d01c      	beq.n	8001f4e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	7e5b      	ldrb	r3, [r3, #25]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d118      	bne.n	8001f4e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d111      	bne.n	8001f4e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f2e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d105      	bne.n	8001f4e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f46:	f043 0201 	orr.w	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a1f      	ldr	r2, [pc, #124]	@ (8001fd0 <HAL_ADC_PollForConversion+0x1a8>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d002      	beq.n	8001f5e <HAL_ADC_PollForConversion+0x136>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	e000      	b.n	8001f60 <HAL_ADC_PollForConversion+0x138>
 8001f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd4 <HAL_ADC_PollForConversion+0x1ac>)
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d008      	beq.n	8001f7a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d005      	beq.n	8001f7a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	2b05      	cmp	r3, #5
 8001f72:	d002      	beq.n	8001f7a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2b09      	cmp	r3, #9
 8001f78:	d104      	bne.n	8001f84 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	e00c      	b.n	8001f9e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a11      	ldr	r2, [pc, #68]	@ (8001fd0 <HAL_ADC_PollForConversion+0x1a8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d002      	beq.n	8001f94 <HAL_ADC_PollForConversion+0x16c>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	e000      	b.n	8001f96 <HAL_ADC_PollForConversion+0x16e>
 8001f94:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd4 <HAL_ADC_PollForConversion+0x1ac>)
 8001f96:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d104      	bne.n	8001fae <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2208      	movs	r2, #8
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	e008      	b.n	8001fc0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d103      	bne.n	8001fc0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	220c      	movs	r2, #12
 8001fbe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3720      	adds	r7, #32
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	50040300 	.word	0x50040300
 8001fd0:	50040100 	.word	0x50040100
 8001fd4:	50040000 	.word	0x50040000

08001fd8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
	...

08001ff4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08a      	sub	sp, #40	@ 0x28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002010:	4882      	ldr	r0, [pc, #520]	@ (800221c <HAL_ADC_IRQHandler+0x228>)
 8002012:	f7ff fc0d 	bl	8001830 <LL_ADC_GetMultimode>
 8002016:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d017      	beq.n	8002052 <HAL_ADC_IRQHandler+0x5e>
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d012      	beq.n	8002052 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	2b00      	cmp	r3, #0
 8002036:	d105      	bne.n	8002044 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800203c:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 ffbf 	bl	8002fc8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2202      	movs	r2, #2
 8002050:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d004      	beq.n	8002066 <HAL_ADC_IRQHandler+0x72>
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10a      	bne.n	800207c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 8083 	beq.w	8002178 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b00      	cmp	r3, #0
 800207a:	d07d      	beq.n	8002178 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002080:	f003 0310 	and.w	r3, r3, #16
 8002084:	2b00      	cmp	r3, #0
 8002086:	d105      	bne.n	8002094 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800208c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff fb28 	bl	80016ee <LL_ADC_REG_IsTriggerSourceSWStart>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d062      	beq.n	800216a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a5d      	ldr	r2, [pc, #372]	@ (8002220 <HAL_ADC_IRQHandler+0x22c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d002      	beq.n	80020b4 <HAL_ADC_IRQHandler+0xc0>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	e000      	b.n	80020b6 <HAL_ADC_IRQHandler+0xc2>
 80020b4:	4b5b      	ldr	r3, [pc, #364]	@ (8002224 <HAL_ADC_IRQHandler+0x230>)
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6812      	ldr	r2, [r2, #0]
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d008      	beq.n	80020d0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	2b05      	cmp	r3, #5
 80020c8:	d002      	beq.n	80020d0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2b09      	cmp	r3, #9
 80020ce:	d104      	bne.n	80020da <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	623b      	str	r3, [r7, #32]
 80020d8:	e00c      	b.n	80020f4 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a50      	ldr	r2, [pc, #320]	@ (8002220 <HAL_ADC_IRQHandler+0x22c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d002      	beq.n	80020ea <HAL_ADC_IRQHandler+0xf6>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	e000      	b.n	80020ec <HAL_ADC_IRQHandler+0xf8>
 80020ea:	4b4e      	ldr	r3, [pc, #312]	@ (8002224 <HAL_ADC_IRQHandler+0x230>)
 80020ec:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d135      	bne.n	800216a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	2b08      	cmp	r3, #8
 800210a:	d12e      	bne.n	800216a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fc59 	bl	80019c8 <LL_ADC_REG_IsConversionOngoing>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d11a      	bne.n	8002152 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 020c 	bic.w	r2, r2, #12
 800212a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002130:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800213c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d112      	bne.n	800216a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002148:	f043 0201 	orr.w	r2, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002150:	e00b      	b.n	800216a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002156:	f043 0210 	orr.w	r2, r3, #16
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002162:	f043 0201 	orr.w	r2, r3, #1
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f95c 	bl	8002428 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	220c      	movs	r2, #12
 8002176:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f003 0320 	and.w	r3, r3, #32
 800217e:	2b00      	cmp	r3, #0
 8002180:	d004      	beq.n	800218c <HAL_ADC_IRQHandler+0x198>
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	f003 0320 	and.w	r3, r3, #32
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10b      	bne.n	80021a4 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 809f 	beq.w	80022d6 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 8099 	beq.w	80022d6 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a8:	f003 0310 	and.w	r3, r3, #16
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d105      	bne.n	80021bc <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fad3 	bl	800176c <LL_ADC_INJ_IsTriggerSourceSWStart>
 80021c6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fa8e 	bl	80016ee <LL_ADC_REG_IsTriggerSourceSWStart>
 80021d2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a11      	ldr	r2, [pc, #68]	@ (8002220 <HAL_ADC_IRQHandler+0x22c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d002      	beq.n	80021e4 <HAL_ADC_IRQHandler+0x1f0>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	e000      	b.n	80021e6 <HAL_ADC_IRQHandler+0x1f2>
 80021e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002224 <HAL_ADC_IRQHandler+0x230>)
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6812      	ldr	r2, [r2, #0]
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d008      	beq.n	8002200 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2b06      	cmp	r3, #6
 80021f8:	d002      	beq.n	8002200 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2b07      	cmp	r3, #7
 80021fe:	d104      	bne.n	800220a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	623b      	str	r3, [r7, #32]
 8002208:	e013      	b.n	8002232 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a04      	ldr	r2, [pc, #16]	@ (8002220 <HAL_ADC_IRQHandler+0x22c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d009      	beq.n	8002228 <HAL_ADC_IRQHandler+0x234>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	e007      	b.n	800222a <HAL_ADC_IRQHandler+0x236>
 800221a:	bf00      	nop
 800221c:	50040300 	.word	0x50040300
 8002220:	50040100 	.word	0x50040100
 8002224:	50040000 	.word	0x50040000
 8002228:	4b7d      	ldr	r3, [pc, #500]	@ (8002420 <HAL_ADC_IRQHandler+0x42c>)
 800222a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d047      	beq.n	80022c8 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002238:	6a3b      	ldr	r3, [r7, #32]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d007      	beq.n	8002252 <HAL_ADC_IRQHandler+0x25e>
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d03f      	beq.n	80022c8 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002248:	6a3b      	ldr	r3, [r7, #32]
 800224a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800224e:	2b00      	cmp	r3, #0
 8002250:	d13a      	bne.n	80022c8 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800225c:	2b40      	cmp	r3, #64	@ 0x40
 800225e:	d133      	bne.n	80022c8 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d12e      	bne.n	80022c8 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fbbd 	bl	80019ee <LL_ADC_INJ_IsConversionOngoing>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d11a      	bne.n	80022b0 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002288:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800228e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800229a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d112      	bne.n	80022c8 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a6:	f043 0201 	orr.w	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	655a      	str	r2, [r3, #84]	@ 0x54
 80022ae:	e00b      	b.n	80022c8 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b4:	f043 0210 	orr.w	r2, r3, #16
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c0:	f043 0201 	orr.w	r2, r3, #1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 fe55 	bl	8002f78 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2260      	movs	r2, #96	@ 0x60
 80022d4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d011      	beq.n	8002304 <HAL_ADC_IRQHandler+0x310>
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00c      	beq.n	8002304 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f8a0 	bl	800243c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2280      	movs	r2, #128	@ 0x80
 8002302:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800230a:	2b00      	cmp	r3, #0
 800230c:	d012      	beq.n	8002334 <HAL_ADC_IRQHandler+0x340>
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00d      	beq.n	8002334 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800231c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 fe3b 	bl	8002fa0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002332:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800233a:	2b00      	cmp	r3, #0
 800233c:	d012      	beq.n	8002364 <HAL_ADC_IRQHandler+0x370>
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00d      	beq.n	8002364 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800234c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 fe2d 	bl	8002fb4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002362:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f003 0310 	and.w	r3, r3, #16
 800236a:	2b00      	cmp	r3, #0
 800236c:	d036      	beq.n	80023dc <HAL_ADC_IRQHandler+0x3e8>
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	f003 0310 	and.w	r3, r3, #16
 8002374:	2b00      	cmp	r3, #0
 8002376:	d031      	beq.n	80023dc <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800237c:	2b00      	cmp	r3, #0
 800237e:	d102      	bne.n	8002386 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002380:	2301      	movs	r3, #1
 8002382:	627b      	str	r3, [r7, #36]	@ 0x24
 8002384:	e014      	b.n	80023b0 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d008      	beq.n	800239e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800238c:	4825      	ldr	r0, [pc, #148]	@ (8002424 <HAL_ADC_IRQHandler+0x430>)
 800238e:	f7ff fa5d 	bl	800184c <LL_ADC_GetMultiDMATransfer>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00b      	beq.n	80023b0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002398:	2301      	movs	r3, #1
 800239a:	627b      	str	r3, [r7, #36]	@ 0x24
 800239c:	e008      	b.n	80023b0 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80023ac:	2301      	movs	r3, #1
 80023ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80023b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d10e      	bne.n	80023d4 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ba:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c6:	f043 0202 	orr.w	r2, r3, #2
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f83e 	bl	8002450 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2210      	movs	r2, #16
 80023da:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d018      	beq.n	8002418 <HAL_ADC_IRQHandler+0x424>
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f4:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002400:	f043 0208 	orr.w	r2, r3, #8
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002410:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 fdba 	bl	8002f8c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002418:	bf00      	nop
 800241a:	3728      	adds	r7, #40	@ 0x28
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	50040000 	.word	0x50040000
 8002424:	50040300 	.word	0x50040300

08002428 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b0b6      	sub	sp, #216	@ 0xd8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002474:	2300      	movs	r3, #0
 8002476:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x22>
 8002482:	2302      	movs	r3, #2
 8002484:	e3c9      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x7b6>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff fa98 	bl	80019c8 <LL_ADC_REG_IsConversionOngoing>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	f040 83aa 	bne.w	8002bf4 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b05      	cmp	r3, #5
 80024ae:	d824      	bhi.n	80024fa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	3b02      	subs	r3, #2
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d81b      	bhi.n	80024f2 <HAL_ADC_ConfigChannel+0x8e>
 80024ba:	a201      	add	r2, pc, #4	@ (adr r2, 80024c0 <HAL_ADC_ConfigChannel+0x5c>)
 80024bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c0:	080024d1 	.word	0x080024d1
 80024c4:	080024d9 	.word	0x080024d9
 80024c8:	080024e1 	.word	0x080024e1
 80024cc:	080024e9 	.word	0x080024e9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80024d0:	230c      	movs	r3, #12
 80024d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80024d6:	e010      	b.n	80024fa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80024d8:	2312      	movs	r3, #18
 80024da:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80024de:	e00c      	b.n	80024fa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80024e0:	2318      	movs	r3, #24
 80024e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80024e6:	e008      	b.n	80024fa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80024e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80024f0:	e003      	b.n	80024fa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80024f2:	2306      	movs	r3, #6
 80024f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80024f8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6818      	ldr	r0, [r3, #0]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002508:	f7ff f904 	bl	8001714 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff fa59 	bl	80019c8 <LL_ADC_REG_IsConversionOngoing>
 8002516:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff fa65 	bl	80019ee <LL_ADC_INJ_IsConversionOngoing>
 8002524:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002528:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800252c:	2b00      	cmp	r3, #0
 800252e:	f040 81a4 	bne.w	800287a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002532:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002536:	2b00      	cmp	r3, #0
 8002538:	f040 819f 	bne.w	800287a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	6819      	ldr	r1, [r3, #0]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	461a      	mov	r2, r3
 800254a:	f7ff f922 	bl	8001792 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	695a      	ldr	r2, [r3, #20]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	08db      	lsrs	r3, r3, #3
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	2b04      	cmp	r3, #4
 800256e:	d00a      	beq.n	8002586 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6818      	ldr	r0, [r3, #0]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	6919      	ldr	r1, [r3, #16]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002580:	f7ff f860 	bl	8001644 <LL_ADC_SetOffset>
 8002584:	e179      	b.n	800287a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2100      	movs	r1, #0
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff f87d 	bl	800168c <LL_ADC_GetOffsetChannel>
 8002592:	4603      	mov	r3, r0
 8002594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10a      	bne.n	80025b2 <HAL_ADC_ConfigChannel+0x14e>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2100      	movs	r1, #0
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff f872 	bl	800168c <LL_ADC_GetOffsetChannel>
 80025a8:	4603      	mov	r3, r0
 80025aa:	0e9b      	lsrs	r3, r3, #26
 80025ac:	f003 021f 	and.w	r2, r3, #31
 80025b0:	e01e      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x18c>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2100      	movs	r1, #0
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff f867 	bl	800168c <LL_ADC_GetOffsetChannel>
 80025be:	4603      	mov	r3, r0
 80025c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025c8:	fa93 f3a3 	rbit	r3, r3
 80025cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80025d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80025e0:	2320      	movs	r3, #32
 80025e2:	e004      	b.n	80025ee <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80025e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80025e8:	fab3 f383 	clz	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d105      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x1a4>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	0e9b      	lsrs	r3, r3, #26
 8002602:	f003 031f 	and.w	r3, r3, #31
 8002606:	e018      	b.n	800263a <HAL_ADC_ConfigChannel+0x1d6>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800261c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002620:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002624:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800262c:	2320      	movs	r3, #32
 800262e:	e004      	b.n	800263a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002630:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002634:	fab3 f383 	clz	r3, r3
 8002638:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800263a:	429a      	cmp	r2, r3
 800263c:	d106      	bne.n	800264c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2200      	movs	r2, #0
 8002644:	2100      	movs	r1, #0
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff f836 	bl	80016b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2101      	movs	r1, #1
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff f81a 	bl	800168c <LL_ADC_GetOffsetChannel>
 8002658:	4603      	mov	r3, r0
 800265a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10a      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x214>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2101      	movs	r1, #1
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff f80f 	bl	800168c <LL_ADC_GetOffsetChannel>
 800266e:	4603      	mov	r3, r0
 8002670:	0e9b      	lsrs	r3, r3, #26
 8002672:	f003 021f 	and.w	r2, r3, #31
 8002676:	e01e      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x252>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2101      	movs	r1, #1
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff f804 	bl	800168c <LL_ADC_GetOffsetChannel>
 8002684:	4603      	mov	r3, r0
 8002686:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800268e:	fa93 f3a3 	rbit	r3, r3
 8002692:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002696:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800269a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800269e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80026a6:	2320      	movs	r3, #32
 80026a8:	e004      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80026aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026ae:	fab3 f383 	clz	r3, r3
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d105      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x26a>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	0e9b      	lsrs	r3, r3, #26
 80026c8:	f003 031f 	and.w	r3, r3, #31
 80026cc:	e018      	b.n	8002700 <HAL_ADC_ConfigChannel+0x29c>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80026e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80026e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80026ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80026f2:	2320      	movs	r3, #32
 80026f4:	e004      	b.n	8002700 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80026f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002700:	429a      	cmp	r2, r3
 8002702:	d106      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2200      	movs	r2, #0
 800270a:	2101      	movs	r1, #1
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe ffd3 	bl	80016b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2102      	movs	r1, #2
 8002718:	4618      	mov	r0, r3
 800271a:	f7fe ffb7 	bl	800168c <LL_ADC_GetOffsetChannel>
 800271e:	4603      	mov	r3, r0
 8002720:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10a      	bne.n	800273e <HAL_ADC_ConfigChannel+0x2da>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2102      	movs	r1, #2
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe ffac 	bl	800168c <LL_ADC_GetOffsetChannel>
 8002734:	4603      	mov	r3, r0
 8002736:	0e9b      	lsrs	r3, r3, #26
 8002738:	f003 021f 	and.w	r2, r3, #31
 800273c:	e01e      	b.n	800277c <HAL_ADC_ConfigChannel+0x318>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2102      	movs	r1, #2
 8002744:	4618      	mov	r0, r3
 8002746:	f7fe ffa1 	bl	800168c <LL_ADC_GetOffsetChannel>
 800274a:	4603      	mov	r3, r0
 800274c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002754:	fa93 f3a3 	rbit	r3, r3
 8002758:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800275c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002760:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002764:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800276c:	2320      	movs	r3, #32
 800276e:	e004      	b.n	800277a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002770:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002774:	fab3 f383 	clz	r3, r3
 8002778:	b2db      	uxtb	r3, r3
 800277a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002784:	2b00      	cmp	r3, #0
 8002786:	d105      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x330>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	0e9b      	lsrs	r3, r3, #26
 800278e:	f003 031f 	and.w	r3, r3, #31
 8002792:	e014      	b.n	80027be <HAL_ADC_ConfigChannel+0x35a>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800279c:	fa93 f3a3 	rbit	r3, r3
 80027a0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80027a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80027a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80027b0:	2320      	movs	r3, #32
 80027b2:	e004      	b.n	80027be <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80027b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027b8:	fab3 f383 	clz	r3, r3
 80027bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027be:	429a      	cmp	r2, r3
 80027c0:	d106      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2200      	movs	r2, #0
 80027c8:	2102      	movs	r1, #2
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe ff74 	bl	80016b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2103      	movs	r1, #3
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe ff58 	bl	800168c <LL_ADC_GetOffsetChannel>
 80027dc:	4603      	mov	r3, r0
 80027de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10a      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x398>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2103      	movs	r1, #3
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fe ff4d 	bl	800168c <LL_ADC_GetOffsetChannel>
 80027f2:	4603      	mov	r3, r0
 80027f4:	0e9b      	lsrs	r3, r3, #26
 80027f6:	f003 021f 	and.w	r2, r3, #31
 80027fa:	e017      	b.n	800282c <HAL_ADC_ConfigChannel+0x3c8>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2103      	movs	r1, #3
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe ff42 	bl	800168c <LL_ADC_GetOffsetChannel>
 8002808:	4603      	mov	r3, r0
 800280a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800280e:	fa93 f3a3 	rbit	r3, r3
 8002812:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002814:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002816:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002818:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800281e:	2320      	movs	r3, #32
 8002820:	e003      	b.n	800282a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002822:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002824:	fab3 f383 	clz	r3, r3
 8002828:	b2db      	uxtb	r3, r3
 800282a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002834:	2b00      	cmp	r3, #0
 8002836:	d105      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x3e0>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	0e9b      	lsrs	r3, r3, #26
 800283e:	f003 031f 	and.w	r3, r3, #31
 8002842:	e011      	b.n	8002868 <HAL_ADC_ConfigChannel+0x404>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800284c:	fa93 f3a3 	rbit	r3, r3
 8002850:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002852:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002854:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002856:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800285c:	2320      	movs	r3, #32
 800285e:	e003      	b.n	8002868 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002860:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002862:	fab3 f383 	clz	r3, r3
 8002866:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002868:	429a      	cmp	r2, r3
 800286a:	d106      	bne.n	800287a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2200      	movs	r2, #0
 8002872:	2103      	movs	r1, #3
 8002874:	4618      	mov	r0, r3
 8002876:	f7fe ff1f 	bl	80016b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff f868 	bl	8001954 <LL_ADC_IsEnabled>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	f040 8140 	bne.w	8002b0c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6818      	ldr	r0, [r3, #0]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	6819      	ldr	r1, [r3, #0]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	461a      	mov	r2, r3
 800289a:	f7fe ffa5 	bl	80017e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	4a8f      	ldr	r2, [pc, #572]	@ (8002ae0 <HAL_ADC_ConfigChannel+0x67c>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	f040 8131 	bne.w	8002b0c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10b      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x46e>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	0e9b      	lsrs	r3, r3, #26
 80028c0:	3301      	adds	r3, #1
 80028c2:	f003 031f 	and.w	r3, r3, #31
 80028c6:	2b09      	cmp	r3, #9
 80028c8:	bf94      	ite	ls
 80028ca:	2301      	movls	r3, #1
 80028cc:	2300      	movhi	r3, #0
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	e019      	b.n	8002906 <HAL_ADC_ConfigChannel+0x4a2>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028da:	fa93 f3a3 	rbit	r3, r3
 80028de:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80028e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80028e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80028ea:	2320      	movs	r3, #32
 80028ec:	e003      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80028ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028f0:	fab3 f383 	clz	r3, r3
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	3301      	adds	r3, #1
 80028f8:	f003 031f 	and.w	r3, r3, #31
 80028fc:	2b09      	cmp	r3, #9
 80028fe:	bf94      	ite	ls
 8002900:	2301      	movls	r3, #1
 8002902:	2300      	movhi	r3, #0
 8002904:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002906:	2b00      	cmp	r3, #0
 8002908:	d079      	beq.n	80029fe <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002912:	2b00      	cmp	r3, #0
 8002914:	d107      	bne.n	8002926 <HAL_ADC_ConfigChannel+0x4c2>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	0e9b      	lsrs	r3, r3, #26
 800291c:	3301      	adds	r3, #1
 800291e:	069b      	lsls	r3, r3, #26
 8002920:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002924:	e015      	b.n	8002952 <HAL_ADC_ConfigChannel+0x4ee>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800292e:	fa93 f3a3 	rbit	r3, r3
 8002932:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002934:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002936:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002938:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800293e:	2320      	movs	r3, #32
 8002940:	e003      	b.n	800294a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002942:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002944:	fab3 f383 	clz	r3, r3
 8002948:	b2db      	uxtb	r3, r3
 800294a:	3301      	adds	r3, #1
 800294c:	069b      	lsls	r3, r3, #26
 800294e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295a:	2b00      	cmp	r3, #0
 800295c:	d109      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x50e>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	0e9b      	lsrs	r3, r3, #26
 8002964:	3301      	adds	r3, #1
 8002966:	f003 031f 	and.w	r3, r3, #31
 800296a:	2101      	movs	r1, #1
 800296c:	fa01 f303 	lsl.w	r3, r1, r3
 8002970:	e017      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x53e>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002978:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800297a:	fa93 f3a3 	rbit	r3, r3
 800297e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002982:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002984:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800298a:	2320      	movs	r3, #32
 800298c:	e003      	b.n	8002996 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800298e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002990:	fab3 f383 	clz	r3, r3
 8002994:	b2db      	uxtb	r3, r3
 8002996:	3301      	adds	r3, #1
 8002998:	f003 031f 	and.w	r3, r3, #31
 800299c:	2101      	movs	r1, #1
 800299e:	fa01 f303 	lsl.w	r3, r1, r3
 80029a2:	ea42 0103 	orr.w	r1, r2, r3
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10a      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x564>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	0e9b      	lsrs	r3, r3, #26
 80029b8:	3301      	adds	r3, #1
 80029ba:	f003 021f 	and.w	r2, r3, #31
 80029be:	4613      	mov	r3, r2
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	4413      	add	r3, r2
 80029c4:	051b      	lsls	r3, r3, #20
 80029c6:	e018      	b.n	80029fa <HAL_ADC_ConfigChannel+0x596>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029d0:	fa93 f3a3 	rbit	r3, r3
 80029d4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80029d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80029da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80029e0:	2320      	movs	r3, #32
 80029e2:	e003      	b.n	80029ec <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80029e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029e6:	fab3 f383 	clz	r3, r3
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	3301      	adds	r3, #1
 80029ee:	f003 021f 	and.w	r2, r3, #31
 80029f2:	4613      	mov	r3, r2
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	4413      	add	r3, r2
 80029f8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029fa:	430b      	orrs	r3, r1
 80029fc:	e081      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d107      	bne.n	8002a1a <HAL_ADC_ConfigChannel+0x5b6>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	0e9b      	lsrs	r3, r3, #26
 8002a10:	3301      	adds	r3, #1
 8002a12:	069b      	lsls	r3, r3, #26
 8002a14:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a18:	e015      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x5e2>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a22:	fa93 f3a3 	rbit	r3, r3
 8002a26:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002a32:	2320      	movs	r3, #32
 8002a34:	e003      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a38:	fab3 f383 	clz	r3, r3
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	3301      	adds	r3, #1
 8002a40:	069b      	lsls	r3, r3, #26
 8002a42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d109      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x602>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	0e9b      	lsrs	r3, r3, #26
 8002a58:	3301      	adds	r3, #1
 8002a5a:	f003 031f 	and.w	r3, r3, #31
 8002a5e:	2101      	movs	r1, #1
 8002a60:	fa01 f303 	lsl.w	r3, r1, r3
 8002a64:	e017      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x632>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	fa93 f3a3 	rbit	r3, r3
 8002a72:	61bb      	str	r3, [r7, #24]
  return result;
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002a7e:	2320      	movs	r3, #32
 8002a80:	e003      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	fab3 f383 	clz	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	f003 031f 	and.w	r3, r3, #31
 8002a90:	2101      	movs	r1, #1
 8002a92:	fa01 f303 	lsl.w	r3, r1, r3
 8002a96:	ea42 0103 	orr.w	r1, r2, r3
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10d      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x65e>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	0e9b      	lsrs	r3, r3, #26
 8002aac:	3301      	adds	r3, #1
 8002aae:	f003 021f 	and.w	r2, r3, #31
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3b1e      	subs	r3, #30
 8002aba:	051b      	lsls	r3, r3, #20
 8002abc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ac0:	e01e      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x69c>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	fa93 f3a3 	rbit	r3, r3
 8002ace:	60fb      	str	r3, [r7, #12]
  return result;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d104      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002ada:	2320      	movs	r3, #32
 8002adc:	e006      	b.n	8002aec <HAL_ADC_ConfigChannel+0x688>
 8002ade:	bf00      	nop
 8002ae0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	3301      	adds	r3, #1
 8002aee:	f003 021f 	and.w	r2, r3, #31
 8002af2:	4613      	mov	r3, r2
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	4413      	add	r3, r2
 8002af8:	3b1e      	subs	r3, #30
 8002afa:	051b      	lsls	r3, r3, #20
 8002afc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b00:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b06:	4619      	mov	r1, r3
 8002b08:	f7fe fe43 	bl	8001792 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b44      	ldr	r3, [pc, #272]	@ (8002c24 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d07a      	beq.n	8002c0e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b18:	4843      	ldr	r0, [pc, #268]	@ (8002c28 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b1a:	f7fe fd85 	bl	8001628 <LL_ADC_GetCommonPathInternalCh>
 8002b1e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a41      	ldr	r2, [pc, #260]	@ (8002c2c <HAL_ADC_ConfigChannel+0x7c8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d12c      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d126      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a3c      	ldr	r2, [pc, #240]	@ (8002c30 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d004      	beq.n	8002b4c <HAL_ADC_ConfigChannel+0x6e8>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a3b      	ldr	r2, [pc, #236]	@ (8002c34 <HAL_ADC_ConfigChannel+0x7d0>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d15d      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b54:	4619      	mov	r1, r3
 8002b56:	4834      	ldr	r0, [pc, #208]	@ (8002c28 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b58:	f7fe fd53 	bl	8001602 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b5c:	4b36      	ldr	r3, [pc, #216]	@ (8002c38 <HAL_ADC_ConfigChannel+0x7d4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	099b      	lsrs	r3, r3, #6
 8002b62:	4a36      	ldr	r2, [pc, #216]	@ (8002c3c <HAL_ADC_ConfigChannel+0x7d8>)
 8002b64:	fba2 2303 	umull	r2, r3, r2, r3
 8002b68:	099b      	lsrs	r3, r3, #6
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	4413      	add	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002b76:	e002      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1f9      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b84:	e040      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a2d      	ldr	r2, [pc, #180]	@ (8002c40 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d118      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d112      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a23      	ldr	r2, [pc, #140]	@ (8002c30 <HAL_ADC_ConfigChannel+0x7cc>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d004      	beq.n	8002bb0 <HAL_ADC_ConfigChannel+0x74c>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a22      	ldr	r2, [pc, #136]	@ (8002c34 <HAL_ADC_ConfigChannel+0x7d0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d12d      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bb4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bb8:	4619      	mov	r1, r3
 8002bba:	481b      	ldr	r0, [pc, #108]	@ (8002c28 <HAL_ADC_ConfigChannel+0x7c4>)
 8002bbc:	f7fe fd21 	bl	8001602 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bc0:	e024      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a1f      	ldr	r2, [pc, #124]	@ (8002c44 <HAL_ADC_ConfigChannel+0x7e0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d120      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d11a      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a14      	ldr	r2, [pc, #80]	@ (8002c30 <HAL_ADC_ConfigChannel+0x7cc>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d115      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002be2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002be6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002bea:	4619      	mov	r1, r3
 8002bec:	480e      	ldr	r0, [pc, #56]	@ (8002c28 <HAL_ADC_ConfigChannel+0x7c4>)
 8002bee:	f7fe fd08 	bl	8001602 <LL_ADC_SetCommonPathInternalCh>
 8002bf2:	e00c      	b.n	8002c0e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf8:	f043 0220 	orr.w	r2, r3, #32
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002c06:	e002      	b.n	8002c0e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c08:	bf00      	nop
 8002c0a:	e000      	b.n	8002c0e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c0c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c16:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	37d8      	adds	r7, #216	@ 0xd8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	80080000 	.word	0x80080000
 8002c28:	50040300 	.word	0x50040300
 8002c2c:	c7520000 	.word	0xc7520000
 8002c30:	50040000 	.word	0x50040000
 8002c34:	50040200 	.word	0x50040200
 8002c38:	20000000 	.word	0x20000000
 8002c3c:	053e2d63 	.word	0x053e2d63
 8002c40:	cb840000 	.word	0xcb840000
 8002c44:	80000001 	.word	0x80000001

08002c48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fe fe7b 	bl	8001954 <LL_ADC_IsEnabled>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d169      	bne.n	8002d38 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	4b36      	ldr	r3, [pc, #216]	@ (8002d44 <ADC_Enable+0xfc>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00d      	beq.n	8002c8e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c76:	f043 0210 	orr.w	r2, r3, #16
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c82:	f043 0201 	orr.w	r2, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e055      	b.n	8002d3a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe fe36 	bl	8001904 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c98:	482b      	ldr	r0, [pc, #172]	@ (8002d48 <ADC_Enable+0x100>)
 8002c9a:	f7fe fcc5 	bl	8001628 <LL_ADC_GetCommonPathInternalCh>
 8002c9e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002ca0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d013      	beq.n	8002cd0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ca8:	4b28      	ldr	r3, [pc, #160]	@ (8002d4c <ADC_Enable+0x104>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	099b      	lsrs	r3, r3, #6
 8002cae:	4a28      	ldr	r2, [pc, #160]	@ (8002d50 <ADC_Enable+0x108>)
 8002cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb4:	099b      	lsrs	r3, r3, #6
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	4613      	mov	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cc2:	e002      	b.n	8002cca <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1f9      	bne.n	8002cc4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002cd0:	f7fe fc54 	bl	800157c <HAL_GetTick>
 8002cd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cd6:	e028      	b.n	8002d2a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7fe fe39 	bl	8001954 <LL_ADC_IsEnabled>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d104      	bne.n	8002cf2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fe fe09 	bl	8001904 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cf2:	f7fe fc43 	bl	800157c <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d914      	bls.n	8002d2a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d00d      	beq.n	8002d2a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d12:	f043 0210 	orr.w	r2, r3, #16
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1e:	f043 0201 	orr.w	r2, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e007      	b.n	8002d3a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d1cf      	bne.n	8002cd8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	8000003f 	.word	0x8000003f
 8002d48:	50040300 	.word	0x50040300
 8002d4c:	20000000 	.word	0x20000000
 8002d50:	053e2d63 	.word	0x053e2d63

08002d54 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fe fe0a 	bl	800197a <LL_ADC_IsDisableOngoing>
 8002d66:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7fe fdf1 	bl	8001954 <LL_ADC_IsEnabled>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d047      	beq.n	8002e08 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d144      	bne.n	8002e08 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 030d 	and.w	r3, r3, #13
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d10c      	bne.n	8002da6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fe fdcb 	bl	800192c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d9e:	f7fe fbed 	bl	800157c <HAL_GetTick>
 8002da2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002da4:	e029      	b.n	8002dfa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002daa:	f043 0210 	orr.w	r2, r3, #16
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db6:	f043 0201 	orr.w	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e023      	b.n	8002e0a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002dc2:	f7fe fbdb 	bl	800157c <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d914      	bls.n	8002dfa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00d      	beq.n	8002dfa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de2:	f043 0210 	orr.w	r2, r3, #16
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dee:	f043 0201 	orr.w	r2, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e007      	b.n	8002e0a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1dc      	bne.n	8002dc2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <LL_ADC_IsEnabled>:
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <LL_ADC_IsEnabled+0x18>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <LL_ADC_IsEnabled+0x1a>
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <LL_ADC_StartCalibration>:
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002e4a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	609a      	str	r2, [r3, #8]
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <LL_ADC_IsCalibrationOnGoing>:
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e7e:	d101      	bne.n	8002e84 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002e80:	2301      	movs	r3, #1
 8002e82:	e000      	b.n	8002e86 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <LL_ADC_REG_IsConversionOngoing>:
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 0304 	and.w	r3, r3, #4
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d101      	bne.n	8002eaa <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_ADCEx_Calibration_Start+0x1c>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e04d      	b.n	8002f70 <HAL_ADCEx_Calibration_Start+0xb8>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7ff ff39 	bl	8002d54 <ADC_Disable>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d136      	bne.n	8002f5a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ef0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ef4:	f023 0302 	bic.w	r3, r3, #2
 8002ef8:	f043 0202 	orr.w	r2, r3, #2
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6839      	ldr	r1, [r7, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff ff96 	bl	8002e38 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002f0c:	e014      	b.n	8002f38 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	3301      	adds	r3, #1
 8002f12:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002f1a:	d30d      	bcc.n	8002f38 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f20:	f023 0312 	bic.w	r3, r3, #18
 8002f24:	f043 0210 	orr.w	r2, r3, #16
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e01b      	b.n	8002f70 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff ff94 	bl	8002e6a <LL_ADC_IsCalibrationOnGoing>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1e2      	bne.n	8002f0e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f4c:	f023 0303 	bic.w	r3, r3, #3
 8002f50:	f043 0201 	orr.w	r2, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f58:	e005      	b.n	8002f66 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f5e:	f043 0210 	orr.w	r2, r3, #16
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002fdc:	b590      	push	{r4, r7, lr}
 8002fde:	b09f      	sub	sp, #124	@ 0x7c
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e093      	b.n	8003122 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003002:	2300      	movs	r3, #0
 8003004:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003006:	2300      	movs	r3, #0
 8003008:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a47      	ldr	r2, [pc, #284]	@ (800312c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d102      	bne.n	800301a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003014:	4b46      	ldr	r3, [pc, #280]	@ (8003130 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	e001      	b.n	800301e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800301a:	2300      	movs	r3, #0
 800301c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10b      	bne.n	800303c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003028:	f043 0220 	orr.w	r2, r3, #32
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e072      	b.n	8003122 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff ff27 	bl	8002e92 <LL_ADC_REG_IsConversionOngoing>
 8003044:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff ff21 	bl	8002e92 <LL_ADC_REG_IsConversionOngoing>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d154      	bne.n	8003100 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003056:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003058:	2b00      	cmp	r3, #0
 800305a:	d151      	bne.n	8003100 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800305c:	4b35      	ldr	r3, [pc, #212]	@ (8003134 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800305e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d02c      	beq.n	80030c2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003068:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	6859      	ldr	r1, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800307a:	035b      	lsls	r3, r3, #13
 800307c:	430b      	orrs	r3, r1
 800307e:	431a      	orrs	r2, r3
 8003080:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003082:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003084:	4829      	ldr	r0, [pc, #164]	@ (800312c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003086:	f7ff fec4 	bl	8002e12 <LL_ADC_IsEnabled>
 800308a:	4604      	mov	r4, r0
 800308c:	4828      	ldr	r0, [pc, #160]	@ (8003130 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800308e:	f7ff fec0 	bl	8002e12 <LL_ADC_IsEnabled>
 8003092:	4603      	mov	r3, r0
 8003094:	431c      	orrs	r4, r3
 8003096:	4828      	ldr	r0, [pc, #160]	@ (8003138 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003098:	f7ff febb 	bl	8002e12 <LL_ADC_IsEnabled>
 800309c:	4603      	mov	r3, r0
 800309e:	4323      	orrs	r3, r4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d137      	bne.n	8003114 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80030a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80030ac:	f023 030f 	bic.w	r3, r3, #15
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	6811      	ldr	r1, [r2, #0]
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	6892      	ldr	r2, [r2, #8]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	431a      	orrs	r2, r3
 80030bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030be:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030c0:	e028      	b.n	8003114 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80030c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030cc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030ce:	4817      	ldr	r0, [pc, #92]	@ (800312c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80030d0:	f7ff fe9f 	bl	8002e12 <LL_ADC_IsEnabled>
 80030d4:	4604      	mov	r4, r0
 80030d6:	4816      	ldr	r0, [pc, #88]	@ (8003130 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80030d8:	f7ff fe9b 	bl	8002e12 <LL_ADC_IsEnabled>
 80030dc:	4603      	mov	r3, r0
 80030de:	431c      	orrs	r4, r3
 80030e0:	4815      	ldr	r0, [pc, #84]	@ (8003138 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80030e2:	f7ff fe96 	bl	8002e12 <LL_ADC_IsEnabled>
 80030e6:	4603      	mov	r3, r0
 80030e8:	4323      	orrs	r3, r4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d112      	bne.n	8003114 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80030ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80030f6:	f023 030f 	bic.w	r3, r3, #15
 80030fa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80030fc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030fe:	e009      	b.n	8003114 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003104:	f043 0220 	orr.w	r2, r3, #32
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003112:	e000      	b.n	8003116 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003114:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800311e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003122:	4618      	mov	r0, r3
 8003124:	377c      	adds	r7, #124	@ 0x7c
 8003126:	46bd      	mov	sp, r7
 8003128:	bd90      	pop	{r4, r7, pc}
 800312a:	bf00      	nop
 800312c:	50040000 	.word	0x50040000
 8003130:	50040100 	.word	0x50040100
 8003134:	50040300 	.word	0x50040300
 8003138:	50040200 	.word	0x50040200

0800313c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800314c:	4b0c      	ldr	r3, [pc, #48]	@ (8003180 <__NVIC_SetPriorityGrouping+0x44>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003158:	4013      	ands	r3, r2
 800315a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003164:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003168:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800316c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800316e:	4a04      	ldr	r2, [pc, #16]	@ (8003180 <__NVIC_SetPriorityGrouping+0x44>)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	60d3      	str	r3, [r2, #12]
}
 8003174:	bf00      	nop
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	e000ed00 	.word	0xe000ed00

08003184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003188:	4b04      	ldr	r3, [pc, #16]	@ (800319c <__NVIC_GetPriorityGrouping+0x18>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	0a1b      	lsrs	r3, r3, #8
 800318e:	f003 0307 	and.w	r3, r3, #7
}
 8003192:	4618      	mov	r0, r3
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	e000ed00 	.word	0xe000ed00

080031a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	db0b      	blt.n	80031ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	f003 021f 	and.w	r2, r3, #31
 80031b8:	4907      	ldr	r1, [pc, #28]	@ (80031d8 <__NVIC_EnableIRQ+0x38>)
 80031ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031be:	095b      	lsrs	r3, r3, #5
 80031c0:	2001      	movs	r0, #1
 80031c2:	fa00 f202 	lsl.w	r2, r0, r2
 80031c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	e000e100 	.word	0xe000e100

080031dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	6039      	str	r1, [r7, #0]
 80031e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	db0a      	blt.n	8003206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	490c      	ldr	r1, [pc, #48]	@ (8003228 <__NVIC_SetPriority+0x4c>)
 80031f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fa:	0112      	lsls	r2, r2, #4
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	440b      	add	r3, r1
 8003200:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003204:	e00a      	b.n	800321c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	b2da      	uxtb	r2, r3
 800320a:	4908      	ldr	r1, [pc, #32]	@ (800322c <__NVIC_SetPriority+0x50>)
 800320c:	79fb      	ldrb	r3, [r7, #7]
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	3b04      	subs	r3, #4
 8003214:	0112      	lsls	r2, r2, #4
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	440b      	add	r3, r1
 800321a:	761a      	strb	r2, [r3, #24]
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	e000e100 	.word	0xe000e100
 800322c:	e000ed00 	.word	0xe000ed00

08003230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003230:	b480      	push	{r7}
 8003232:	b089      	sub	sp, #36	@ 0x24
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f1c3 0307 	rsb	r3, r3, #7
 800324a:	2b04      	cmp	r3, #4
 800324c:	bf28      	it	cs
 800324e:	2304      	movcs	r3, #4
 8003250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	3304      	adds	r3, #4
 8003256:	2b06      	cmp	r3, #6
 8003258:	d902      	bls.n	8003260 <NVIC_EncodePriority+0x30>
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	3b03      	subs	r3, #3
 800325e:	e000      	b.n	8003262 <NVIC_EncodePriority+0x32>
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003264:	f04f 32ff 	mov.w	r2, #4294967295
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	43da      	mvns	r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	401a      	ands	r2, r3
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003278:	f04f 31ff 	mov.w	r1, #4294967295
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	fa01 f303 	lsl.w	r3, r1, r3
 8003282:	43d9      	mvns	r1, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003288:	4313      	orrs	r3, r2
         );
}
 800328a:	4618      	mov	r0, r3
 800328c:	3724      	adds	r7, #36	@ 0x24
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
	...

08003298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032a8:	d301      	bcc.n	80032ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032aa:	2301      	movs	r3, #1
 80032ac:	e00f      	b.n	80032ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032ae:	4a0a      	ldr	r2, [pc, #40]	@ (80032d8 <SysTick_Config+0x40>)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3b01      	subs	r3, #1
 80032b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032b6:	210f      	movs	r1, #15
 80032b8:	f04f 30ff 	mov.w	r0, #4294967295
 80032bc:	f7ff ff8e 	bl	80031dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032c0:	4b05      	ldr	r3, [pc, #20]	@ (80032d8 <SysTick_Config+0x40>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032c6:	4b04      	ldr	r3, [pc, #16]	@ (80032d8 <SysTick_Config+0x40>)
 80032c8:	2207      	movs	r2, #7
 80032ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	e000e010 	.word	0xe000e010

080032dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff ff29 	bl	800313c <__NVIC_SetPriorityGrouping>
}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b086      	sub	sp, #24
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	4603      	mov	r3, r0
 80032fa:	60b9      	str	r1, [r7, #8]
 80032fc:	607a      	str	r2, [r7, #4]
 80032fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003304:	f7ff ff3e 	bl	8003184 <__NVIC_GetPriorityGrouping>
 8003308:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	68b9      	ldr	r1, [r7, #8]
 800330e:	6978      	ldr	r0, [r7, #20]
 8003310:	f7ff ff8e 	bl	8003230 <NVIC_EncodePriority>
 8003314:	4602      	mov	r2, r0
 8003316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800331a:	4611      	mov	r1, r2
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff ff5d 	bl	80031dc <__NVIC_SetPriority>
}
 8003322:	bf00      	nop
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b082      	sub	sp, #8
 800332e:	af00      	add	r7, sp, #0
 8003330:	4603      	mov	r3, r0
 8003332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff ff31 	bl	80031a0 <__NVIC_EnableIRQ>
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff ffa2 	bl	8003298 <SysTick_Config>
 8003354:	4603      	mov	r3, r0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800335e:	b480      	push	{r7}
 8003360:	b085      	sub	sp, #20
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d008      	beq.n	8003388 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2204      	movs	r2, #4
 800337a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e022      	b.n	80033ce <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 020e 	bic.w	r2, r2, #14
 8003396:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0201 	bic.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ac:	f003 021c 	and.w	r2, r3, #28
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b4:	2101      	movs	r1, #1
 80033b6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ba:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d005      	beq.n	80033fe <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2204      	movs	r2, #4
 80033f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	73fb      	strb	r3, [r7, #15]
 80033fc:	e029      	b.n	8003452 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 020e 	bic.w	r2, r2, #14
 800340c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0201 	bic.w	r2, r2, #1
 800341c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003422:	f003 021c 	and.w	r2, r3, #28
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	2101      	movs	r1, #1
 800342c:	fa01 f202 	lsl.w	r2, r1, r2
 8003430:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	4798      	blx	r3
    }
  }
  return status;
 8003452:	7bfb      	ldrb	r3, [r7, #15]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800345c:	b480      	push	{r7}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800346a:	e17f      	b.n	800376c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	2101      	movs	r1, #1
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	fa01 f303 	lsl.w	r3, r1, r3
 8003478:	4013      	ands	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 8171 	beq.w	8003766 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	2b01      	cmp	r3, #1
 800348e:	d005      	beq.n	800349c <HAL_GPIO_Init+0x40>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 0303 	and.w	r3, r3, #3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d130      	bne.n	80034fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	2203      	movs	r2, #3
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	4013      	ands	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034d2:	2201      	movs	r2, #1
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43db      	mvns	r3, r3
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4013      	ands	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	091b      	lsrs	r3, r3, #4
 80034e8:	f003 0201 	and.w	r2, r3, #1
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	2b03      	cmp	r3, #3
 8003508:	d118      	bne.n	800353c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003510:	2201      	movs	r2, #1
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	43db      	mvns	r3, r3
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4013      	ands	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	08db      	lsrs	r3, r3, #3
 8003526:	f003 0201 	and.w	r2, r3, #1
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	4313      	orrs	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 0303 	and.w	r3, r3, #3
 8003544:	2b03      	cmp	r3, #3
 8003546:	d017      	beq.n	8003578 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	2203      	movs	r2, #3
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4013      	ands	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 0303 	and.w	r3, r3, #3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d123      	bne.n	80035cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	08da      	lsrs	r2, r3, #3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3208      	adds	r2, #8
 800358c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003590:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	220f      	movs	r2, #15
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4013      	ands	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	08da      	lsrs	r2, r3, #3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	3208      	adds	r2, #8
 80035c6:	6939      	ldr	r1, [r7, #16]
 80035c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	2203      	movs	r2, #3
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	43db      	mvns	r3, r3
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4013      	ands	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f003 0203 	and.w	r2, r3, #3
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 80ac 	beq.w	8003766 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800360e:	4b5f      	ldr	r3, [pc, #380]	@ (800378c <HAL_GPIO_Init+0x330>)
 8003610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003612:	4a5e      	ldr	r2, [pc, #376]	@ (800378c <HAL_GPIO_Init+0x330>)
 8003614:	f043 0301 	orr.w	r3, r3, #1
 8003618:	6613      	str	r3, [r2, #96]	@ 0x60
 800361a:	4b5c      	ldr	r3, [pc, #368]	@ (800378c <HAL_GPIO_Init+0x330>)
 800361c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003626:	4a5a      	ldr	r2, [pc, #360]	@ (8003790 <HAL_GPIO_Init+0x334>)
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	089b      	lsrs	r3, r3, #2
 800362c:	3302      	adds	r3, #2
 800362e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003632:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	220f      	movs	r2, #15
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	43db      	mvns	r3, r3
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4013      	ands	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003650:	d025      	beq.n	800369e <HAL_GPIO_Init+0x242>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a4f      	ldr	r2, [pc, #316]	@ (8003794 <HAL_GPIO_Init+0x338>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d01f      	beq.n	800369a <HAL_GPIO_Init+0x23e>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a4e      	ldr	r2, [pc, #312]	@ (8003798 <HAL_GPIO_Init+0x33c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d019      	beq.n	8003696 <HAL_GPIO_Init+0x23a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a4d      	ldr	r2, [pc, #308]	@ (800379c <HAL_GPIO_Init+0x340>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d013      	beq.n	8003692 <HAL_GPIO_Init+0x236>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a4c      	ldr	r2, [pc, #304]	@ (80037a0 <HAL_GPIO_Init+0x344>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d00d      	beq.n	800368e <HAL_GPIO_Init+0x232>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a4b      	ldr	r2, [pc, #300]	@ (80037a4 <HAL_GPIO_Init+0x348>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d007      	beq.n	800368a <HAL_GPIO_Init+0x22e>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a4a      	ldr	r2, [pc, #296]	@ (80037a8 <HAL_GPIO_Init+0x34c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d101      	bne.n	8003686 <HAL_GPIO_Init+0x22a>
 8003682:	2306      	movs	r3, #6
 8003684:	e00c      	b.n	80036a0 <HAL_GPIO_Init+0x244>
 8003686:	2307      	movs	r3, #7
 8003688:	e00a      	b.n	80036a0 <HAL_GPIO_Init+0x244>
 800368a:	2305      	movs	r3, #5
 800368c:	e008      	b.n	80036a0 <HAL_GPIO_Init+0x244>
 800368e:	2304      	movs	r3, #4
 8003690:	e006      	b.n	80036a0 <HAL_GPIO_Init+0x244>
 8003692:	2303      	movs	r3, #3
 8003694:	e004      	b.n	80036a0 <HAL_GPIO_Init+0x244>
 8003696:	2302      	movs	r3, #2
 8003698:	e002      	b.n	80036a0 <HAL_GPIO_Init+0x244>
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <HAL_GPIO_Init+0x244>
 800369e:	2300      	movs	r3, #0
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	f002 0203 	and.w	r2, r2, #3
 80036a6:	0092      	lsls	r2, r2, #2
 80036a8:	4093      	lsls	r3, r2
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036b0:	4937      	ldr	r1, [pc, #220]	@ (8003790 <HAL_GPIO_Init+0x334>)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	089b      	lsrs	r3, r3, #2
 80036b6:	3302      	adds	r3, #2
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036be:	4b3b      	ldr	r3, [pc, #236]	@ (80037ac <HAL_GPIO_Init+0x350>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	43db      	mvns	r3, r3
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	4013      	ands	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4313      	orrs	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036e2:	4a32      	ldr	r2, [pc, #200]	@ (80037ac <HAL_GPIO_Init+0x350>)
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80036e8:	4b30      	ldr	r3, [pc, #192]	@ (80037ac <HAL_GPIO_Init+0x350>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	43db      	mvns	r3, r3
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4013      	ands	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4313      	orrs	r3, r2
 800370a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800370c:	4a27      	ldr	r2, [pc, #156]	@ (80037ac <HAL_GPIO_Init+0x350>)
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003712:	4b26      	ldr	r3, [pc, #152]	@ (80037ac <HAL_GPIO_Init+0x350>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	43db      	mvns	r3, r3
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4013      	ands	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4313      	orrs	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003736:	4a1d      	ldr	r2, [pc, #116]	@ (80037ac <HAL_GPIO_Init+0x350>)
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800373c:	4b1b      	ldr	r3, [pc, #108]	@ (80037ac <HAL_GPIO_Init+0x350>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	43db      	mvns	r3, r3
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4013      	ands	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4313      	orrs	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003760:	4a12      	ldr	r2, [pc, #72]	@ (80037ac <HAL_GPIO_Init+0x350>)
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	3301      	adds	r3, #1
 800376a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	fa22 f303 	lsr.w	r3, r2, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	f47f ae78 	bne.w	800346c <HAL_GPIO_Init+0x10>
  }
}
 800377c:	bf00      	nop
 800377e:	bf00      	nop
 8003780:	371c      	adds	r7, #28
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40021000 	.word	0x40021000
 8003790:	40010000 	.word	0x40010000
 8003794:	48000400 	.word	0x48000400
 8003798:	48000800 	.word	0x48000800
 800379c:	48000c00 	.word	0x48000c00
 80037a0:	48001000 	.word	0x48001000
 80037a4:	48001400 	.word	0x48001400
 80037a8:	48001800 	.word	0x48001800
 80037ac:	40010400 	.word	0x40010400

080037b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	460b      	mov	r3, r1
 80037ba:	807b      	strh	r3, [r7, #2]
 80037bc:	4613      	mov	r3, r2
 80037be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037c0:	787b      	ldrb	r3, [r7, #1]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037c6:	887a      	ldrh	r2, [r7, #2]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037cc:	e002      	b.n	80037d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037ce:	887a      	ldrh	r2, [r7, #2]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80037ea:	4b08      	ldr	r3, [pc, #32]	@ (800380c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037ec:	695a      	ldr	r2, [r3, #20]
 80037ee:	88fb      	ldrh	r3, [r7, #6]
 80037f0:	4013      	ands	r3, r2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d006      	beq.n	8003804 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037f6:	4a05      	ldr	r2, [pc, #20]	@ (800380c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037f8:	88fb      	ldrh	r3, [r7, #6]
 80037fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037fc:	88fb      	ldrh	r3, [r7, #6]
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 f806 	bl	8003810 <HAL_GPIO_EXTI_Callback>
  }
}
 8003804:	bf00      	nop
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40010400 	.word	0x40010400

08003810 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
	...

08003828 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800382c:	4b04      	ldr	r3, [pc, #16]	@ (8003840 <HAL_PWREx_GetVoltageRange+0x18>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003834:	4618      	mov	r0, r3
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40007000 	.word	0x40007000

08003844 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003852:	d130      	bne.n	80038b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003854:	4b23      	ldr	r3, [pc, #140]	@ (80038e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800385c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003860:	d038      	beq.n	80038d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003862:	4b20      	ldr	r3, [pc, #128]	@ (80038e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800386a:	4a1e      	ldr	r2, [pc, #120]	@ (80038e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800386c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003870:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003872:	4b1d      	ldr	r3, [pc, #116]	@ (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2232      	movs	r2, #50	@ 0x32
 8003878:	fb02 f303 	mul.w	r3, r2, r3
 800387c:	4a1b      	ldr	r2, [pc, #108]	@ (80038ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800387e:	fba2 2303 	umull	r2, r3, r2, r3
 8003882:	0c9b      	lsrs	r3, r3, #18
 8003884:	3301      	adds	r3, #1
 8003886:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003888:	e002      	b.n	8003890 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	3b01      	subs	r3, #1
 800388e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003890:	4b14      	ldr	r3, [pc, #80]	@ (80038e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003898:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800389c:	d102      	bne.n	80038a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1f2      	bne.n	800388a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038a4:	4b0f      	ldr	r3, [pc, #60]	@ (80038e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038b0:	d110      	bne.n	80038d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e00f      	b.n	80038d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80038b6:	4b0b      	ldr	r3, [pc, #44]	@ (80038e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80038be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c2:	d007      	beq.n	80038d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038c4:	4b07      	ldr	r3, [pc, #28]	@ (80038e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038cc:	4a05      	ldr	r2, [pc, #20]	@ (80038e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	40007000 	.word	0x40007000
 80038e8:	20000000 	.word	0x20000000
 80038ec:	431bde83 	.word	0x431bde83

080038f0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e3ca      	b.n	8004098 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003902:	4b97      	ldr	r3, [pc, #604]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 030c 	and.w	r3, r3, #12
 800390a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800390c:	4b94      	ldr	r3, [pc, #592]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 80e4 	beq.w	8003aec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d007      	beq.n	800393a <HAL_RCC_OscConfig+0x4a>
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	2b0c      	cmp	r3, #12
 800392e:	f040 808b 	bne.w	8003a48 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2b01      	cmp	r3, #1
 8003936:	f040 8087 	bne.w	8003a48 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800393a:	4b89      	ldr	r3, [pc, #548]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d005      	beq.n	8003952 <HAL_RCC_OscConfig+0x62>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e3a2      	b.n	8004098 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1a      	ldr	r2, [r3, #32]
 8003956:	4b82      	ldr	r3, [pc, #520]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d004      	beq.n	800396c <HAL_RCC_OscConfig+0x7c>
 8003962:	4b7f      	ldr	r3, [pc, #508]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800396a:	e005      	b.n	8003978 <HAL_RCC_OscConfig+0x88>
 800396c:	4b7c      	ldr	r3, [pc, #496]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 800396e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003972:	091b      	lsrs	r3, r3, #4
 8003974:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003978:	4293      	cmp	r3, r2
 800397a:	d223      	bcs.n	80039c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	4618      	mov	r0, r3
 8003982:	f000 fd55 	bl	8004430 <RCC_SetFlashLatencyFromMSIRange>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e383      	b.n	8004098 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003990:	4b73      	ldr	r3, [pc, #460]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a72      	ldr	r2, [pc, #456]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003996:	f043 0308 	orr.w	r3, r3, #8
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	4b70      	ldr	r3, [pc, #448]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	496d      	ldr	r1, [pc, #436]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039ae:	4b6c      	ldr	r3, [pc, #432]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	021b      	lsls	r3, r3, #8
 80039bc:	4968      	ldr	r1, [pc, #416]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	604b      	str	r3, [r1, #4]
 80039c2:	e025      	b.n	8003a10 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039c4:	4b66      	ldr	r3, [pc, #408]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a65      	ldr	r2, [pc, #404]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 80039ca:	f043 0308 	orr.w	r3, r3, #8
 80039ce:	6013      	str	r3, [r2, #0]
 80039d0:	4b63      	ldr	r3, [pc, #396]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	4960      	ldr	r1, [pc, #384]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039e2:	4b5f      	ldr	r3, [pc, #380]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	021b      	lsls	r3, r3, #8
 80039f0:	495b      	ldr	r1, [pc, #364]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d109      	bne.n	8003a10 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 fd15 	bl	8004430 <RCC_SetFlashLatencyFromMSIRange>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e343      	b.n	8004098 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a10:	f000 fc4a 	bl	80042a8 <HAL_RCC_GetSysClockFreq>
 8003a14:	4602      	mov	r2, r0
 8003a16:	4b52      	ldr	r3, [pc, #328]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	091b      	lsrs	r3, r3, #4
 8003a1c:	f003 030f 	and.w	r3, r3, #15
 8003a20:	4950      	ldr	r1, [pc, #320]	@ (8003b64 <HAL_RCC_OscConfig+0x274>)
 8003a22:	5ccb      	ldrb	r3, [r1, r3]
 8003a24:	f003 031f 	and.w	r3, r3, #31
 8003a28:	fa22 f303 	lsr.w	r3, r2, r3
 8003a2c:	4a4e      	ldr	r2, [pc, #312]	@ (8003b68 <HAL_RCC_OscConfig+0x278>)
 8003a2e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a30:	4b4e      	ldr	r3, [pc, #312]	@ (8003b6c <HAL_RCC_OscConfig+0x27c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fd fd51 	bl	80014dc <HAL_InitTick>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d052      	beq.n	8003aea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	e327      	b.n	8004098 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d032      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a50:	4b43      	ldr	r3, [pc, #268]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a42      	ldr	r2, [pc, #264]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a5c:	f7fd fd8e 	bl	800157c <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a64:	f7fd fd8a 	bl	800157c <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e310      	b.n	8004098 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a76:	4b3a      	ldr	r3, [pc, #232]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0f0      	beq.n	8003a64 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a82:	4b37      	ldr	r3, [pc, #220]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a36      	ldr	r2, [pc, #216]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003a88:	f043 0308 	orr.w	r3, r3, #8
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	4b34      	ldr	r3, [pc, #208]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	4931      	ldr	r1, [pc, #196]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aa0:	4b2f      	ldr	r3, [pc, #188]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	021b      	lsls	r3, r3, #8
 8003aae:	492c      	ldr	r1, [pc, #176]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	604b      	str	r3, [r1, #4]
 8003ab4:	e01a      	b.n	8003aec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a29      	ldr	r2, [pc, #164]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003abc:	f023 0301 	bic.w	r3, r3, #1
 8003ac0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ac2:	f7fd fd5b 	bl	800157c <HAL_GetTick>
 8003ac6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ac8:	e008      	b.n	8003adc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003aca:	f7fd fd57 	bl	800157c <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e2dd      	b.n	8004098 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003adc:	4b20      	ldr	r3, [pc, #128]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1f0      	bne.n	8003aca <HAL_RCC_OscConfig+0x1da>
 8003ae8:	e000      	b.n	8003aec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003aea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d074      	beq.n	8003be2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	2b08      	cmp	r3, #8
 8003afc:	d005      	beq.n	8003b0a <HAL_RCC_OscConfig+0x21a>
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	2b0c      	cmp	r3, #12
 8003b02:	d10e      	bne.n	8003b22 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d10b      	bne.n	8003b22 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b0a:	4b15      	ldr	r3, [pc, #84]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d064      	beq.n	8003be0 <HAL_RCC_OscConfig+0x2f0>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d160      	bne.n	8003be0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e2ba      	b.n	8004098 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b2a:	d106      	bne.n	8003b3a <HAL_RCC_OscConfig+0x24a>
 8003b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a0b      	ldr	r2, [pc, #44]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003b32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b36:	6013      	str	r3, [r2, #0]
 8003b38:	e026      	b.n	8003b88 <HAL_RCC_OscConfig+0x298>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b42:	d115      	bne.n	8003b70 <HAL_RCC_OscConfig+0x280>
 8003b44:	4b06      	ldr	r3, [pc, #24]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a05      	ldr	r2, [pc, #20]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003b4a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b4e:	6013      	str	r3, [r2, #0]
 8003b50:	4b03      	ldr	r3, [pc, #12]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a02      	ldr	r2, [pc, #8]	@ (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003b56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	e014      	b.n	8003b88 <HAL_RCC_OscConfig+0x298>
 8003b5e:	bf00      	nop
 8003b60:	40021000 	.word	0x40021000
 8003b64:	08006a1c 	.word	0x08006a1c
 8003b68:	20000000 	.word	0x20000000
 8003b6c:	20000004 	.word	0x20000004
 8003b70:	4ba0      	ldr	r3, [pc, #640]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a9f      	ldr	r2, [pc, #636]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003b76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	4b9d      	ldr	r3, [pc, #628]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a9c      	ldr	r2, [pc, #624]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003b82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d013      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b90:	f7fd fcf4 	bl	800157c <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b98:	f7fd fcf0 	bl	800157c <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b64      	cmp	r3, #100	@ 0x64
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e276      	b.n	8004098 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003baa:	4b92      	ldr	r3, [pc, #584]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0f0      	beq.n	8003b98 <HAL_RCC_OscConfig+0x2a8>
 8003bb6:	e014      	b.n	8003be2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb8:	f7fd fce0 	bl	800157c <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc0:	f7fd fcdc 	bl	800157c <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b64      	cmp	r3, #100	@ 0x64
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e262      	b.n	8004098 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bd2:	4b88      	ldr	r3, [pc, #544]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1f0      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x2d0>
 8003bde:	e000      	b.n	8003be2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d060      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_OscConfig+0x310>
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	2b0c      	cmp	r3, #12
 8003bf8:	d119      	bne.n	8003c2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d116      	bne.n	8003c2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c00:	4b7c      	ldr	r3, [pc, #496]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d005      	beq.n	8003c18 <HAL_RCC_OscConfig+0x328>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e23f      	b.n	8004098 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c18:	4b76      	ldr	r3, [pc, #472]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	061b      	lsls	r3, r3, #24
 8003c26:	4973      	ldr	r1, [pc, #460]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c2c:	e040      	b.n	8003cb0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d023      	beq.n	8003c7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c36:	4b6f      	ldr	r3, [pc, #444]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a6e      	ldr	r2, [pc, #440]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003c3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c42:	f7fd fc9b 	bl	800157c <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c4a:	f7fd fc97 	bl	800157c <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e21d      	b.n	8004098 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c5c:	4b65      	ldr	r3, [pc, #404]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0f0      	beq.n	8003c4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c68:	4b62      	ldr	r3, [pc, #392]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	061b      	lsls	r3, r3, #24
 8003c76:	495f      	ldr	r1, [pc, #380]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	604b      	str	r3, [r1, #4]
 8003c7c:	e018      	b.n	8003cb0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c7e:	4b5d      	ldr	r3, [pc, #372]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a5c      	ldr	r2, [pc, #368]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003c84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8a:	f7fd fc77 	bl	800157c <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c90:	e008      	b.n	8003ca4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c92:	f7fd fc73 	bl	800157c <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e1f9      	b.n	8004098 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ca4:	4b53      	ldr	r3, [pc, #332]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1f0      	bne.n	8003c92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d03c      	beq.n	8003d36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d01c      	beq.n	8003cfe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cc4:	4b4b      	ldr	r3, [pc, #300]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cca:	4a4a      	ldr	r2, [pc, #296]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003ccc:	f043 0301 	orr.w	r3, r3, #1
 8003cd0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd4:	f7fd fc52 	bl	800157c <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cdc:	f7fd fc4e 	bl	800157c <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e1d4      	b.n	8004098 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cee:	4b41      	ldr	r3, [pc, #260]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0ef      	beq.n	8003cdc <HAL_RCC_OscConfig+0x3ec>
 8003cfc:	e01b      	b.n	8003d36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cfe:	4b3d      	ldr	r3, [pc, #244]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d04:	4a3b      	ldr	r2, [pc, #236]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003d06:	f023 0301 	bic.w	r3, r3, #1
 8003d0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0e:	f7fd fc35 	bl	800157c <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d16:	f7fd fc31 	bl	800157c <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e1b7      	b.n	8004098 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d28:	4b32      	ldr	r3, [pc, #200]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1ef      	bne.n	8003d16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f000 80a6 	beq.w	8003e90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d44:	2300      	movs	r3, #0
 8003d46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d48:	4b2a      	ldr	r3, [pc, #168]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10d      	bne.n	8003d70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d54:	4b27      	ldr	r3, [pc, #156]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d58:	4a26      	ldr	r2, [pc, #152]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003d5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d60:	4b24      	ldr	r3, [pc, #144]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d68:	60bb      	str	r3, [r7, #8]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d70:	4b21      	ldr	r3, [pc, #132]	@ (8003df8 <HAL_RCC_OscConfig+0x508>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d118      	bne.n	8003dae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d7c:	4b1e      	ldr	r3, [pc, #120]	@ (8003df8 <HAL_RCC_OscConfig+0x508>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a1d      	ldr	r2, [pc, #116]	@ (8003df8 <HAL_RCC_OscConfig+0x508>)
 8003d82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d88:	f7fd fbf8 	bl	800157c <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d90:	f7fd fbf4 	bl	800157c <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e17a      	b.n	8004098 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003da2:	4b15      	ldr	r3, [pc, #84]	@ (8003df8 <HAL_RCC_OscConfig+0x508>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0f0      	beq.n	8003d90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d108      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x4d8>
 8003db6:	4b0f      	ldr	r3, [pc, #60]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dc6:	e029      	b.n	8003e1c <HAL_RCC_OscConfig+0x52c>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	2b05      	cmp	r3, #5
 8003dce:	d115      	bne.n	8003dfc <HAL_RCC_OscConfig+0x50c>
 8003dd0:	4b08      	ldr	r3, [pc, #32]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd6:	4a07      	ldr	r2, [pc, #28]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003dd8:	f043 0304 	orr.w	r3, r3, #4
 8003ddc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003de0:	4b04      	ldr	r3, [pc, #16]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de6:	4a03      	ldr	r2, [pc, #12]	@ (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003de8:	f043 0301 	orr.w	r3, r3, #1
 8003dec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003df0:	e014      	b.n	8003e1c <HAL_RCC_OscConfig+0x52c>
 8003df2:	bf00      	nop
 8003df4:	40021000 	.word	0x40021000
 8003df8:	40007000 	.word	0x40007000
 8003dfc:	4b9c      	ldr	r3, [pc, #624]	@ (8004070 <HAL_RCC_OscConfig+0x780>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e02:	4a9b      	ldr	r2, [pc, #620]	@ (8004070 <HAL_RCC_OscConfig+0x780>)
 8003e04:	f023 0301 	bic.w	r3, r3, #1
 8003e08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e0c:	4b98      	ldr	r3, [pc, #608]	@ (8004070 <HAL_RCC_OscConfig+0x780>)
 8003e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e12:	4a97      	ldr	r2, [pc, #604]	@ (8004070 <HAL_RCC_OscConfig+0x780>)
 8003e14:	f023 0304 	bic.w	r3, r3, #4
 8003e18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d016      	beq.n	8003e52 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e24:	f7fd fbaa 	bl	800157c <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e2a:	e00a      	b.n	8003e42 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2c:	f7fd fba6 	bl	800157c <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e12a      	b.n	8004098 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e42:	4b8b      	ldr	r3, [pc, #556]	@ (8004070 <HAL_RCC_OscConfig+0x780>)
 8003e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0ed      	beq.n	8003e2c <HAL_RCC_OscConfig+0x53c>
 8003e50:	e015      	b.n	8003e7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e52:	f7fd fb93 	bl	800157c <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e58:	e00a      	b.n	8003e70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5a:	f7fd fb8f 	bl	800157c <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e113      	b.n	8004098 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e70:	4b7f      	ldr	r3, [pc, #508]	@ (8004070 <HAL_RCC_OscConfig+0x780>)
 8003e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1ed      	bne.n	8003e5a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e7e:	7ffb      	ldrb	r3, [r7, #31]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d105      	bne.n	8003e90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e84:	4b7a      	ldr	r3, [pc, #488]	@ (8004070 <HAL_RCC_OscConfig+0x780>)
 8003e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e88:	4a79      	ldr	r2, [pc, #484]	@ (8004070 <HAL_RCC_OscConfig+0x780>)
 8003e8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e8e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 80fe 	beq.w	8004096 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	f040 80d0 	bne.w	8004044 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ea4:	4b72      	ldr	r3, [pc, #456]	@ (8004070 <HAL_RCC_OscConfig+0x780>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f003 0203 	and.w	r2, r3, #3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d130      	bne.n	8003f1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d127      	bne.n	8003f1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ed4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d11f      	bne.n	8003f1a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003ee4:	2a07      	cmp	r2, #7
 8003ee6:	bf14      	ite	ne
 8003ee8:	2201      	movne	r2, #1
 8003eea:	2200      	moveq	r2, #0
 8003eec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d113      	bne.n	8003f1a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003efc:	085b      	lsrs	r3, r3, #1
 8003efe:	3b01      	subs	r3, #1
 8003f00:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d109      	bne.n	8003f1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f10:	085b      	lsrs	r3, r3, #1
 8003f12:	3b01      	subs	r3, #1
 8003f14:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d06e      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	2b0c      	cmp	r3, #12
 8003f1e:	d069      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f20:	4b53      	ldr	r3, [pc, #332]	@ (8004070 <HAL_RCC_OscConfig+0x780>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d105      	bne.n	8003f38 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f2c:	4b50      	ldr	r3, [pc, #320]	@ (8004070 <HAL_RCC_OscConfig+0x780>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e0ad      	b.n	8004098 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f3c:	4b4c      	ldr	r3, [pc, #304]	@ (8004070 <HAL_RCC_OscConfig+0x780>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a4b      	ldr	r2, [pc, #300]	@ (8004070 <HAL_RCC_OscConfig+0x780>)
 8003f42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f46:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f48:	f7fd fb18 	bl	800157c <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f50:	f7fd fb14 	bl	800157c <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e09a      	b.n	8004098 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f62:	4b43      	ldr	r3, [pc, #268]	@ (8004070 <HAL_RCC_OscConfig+0x780>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f0      	bne.n	8003f50 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f6e:	4b40      	ldr	r3, [pc, #256]	@ (8004070 <HAL_RCC_OscConfig+0x780>)
 8003f70:	68da      	ldr	r2, [r3, #12]
 8003f72:	4b40      	ldr	r3, [pc, #256]	@ (8004074 <HAL_RCC_OscConfig+0x784>)
 8003f74:	4013      	ands	r3, r2
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003f7e:	3a01      	subs	r2, #1
 8003f80:	0112      	lsls	r2, r2, #4
 8003f82:	4311      	orrs	r1, r2
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f88:	0212      	lsls	r2, r2, #8
 8003f8a:	4311      	orrs	r1, r2
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f90:	0852      	lsrs	r2, r2, #1
 8003f92:	3a01      	subs	r2, #1
 8003f94:	0552      	lsls	r2, r2, #21
 8003f96:	4311      	orrs	r1, r2
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003f9c:	0852      	lsrs	r2, r2, #1
 8003f9e:	3a01      	subs	r2, #1
 8003fa0:	0652      	lsls	r2, r2, #25
 8003fa2:	4311      	orrs	r1, r2
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003fa8:	0912      	lsrs	r2, r2, #4
 8003faa:	0452      	lsls	r2, r2, #17
 8003fac:	430a      	orrs	r2, r1
 8003fae:	4930      	ldr	r1, [pc, #192]	@ (8004070 <HAL_RCC_OscConfig+0x780>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fb4:	4b2e      	ldr	r3, [pc, #184]	@ (8004070 <HAL_RCC_OscConfig+0x780>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a2d      	ldr	r2, [pc, #180]	@ (8004070 <HAL_RCC_OscConfig+0x780>)
 8003fba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fbe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8004070 <HAL_RCC_OscConfig+0x780>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	4a2a      	ldr	r2, [pc, #168]	@ (8004070 <HAL_RCC_OscConfig+0x780>)
 8003fc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fcc:	f7fd fad6 	bl	800157c <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd4:	f7fd fad2 	bl	800157c <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e058      	b.n	8004098 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fe6:	4b22      	ldr	r3, [pc, #136]	@ (8004070 <HAL_RCC_OscConfig+0x780>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0f0      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ff2:	e050      	b.n	8004096 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e04f      	b.n	8004098 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8004070 <HAL_RCC_OscConfig+0x780>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d148      	bne.n	8004096 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004004:	4b1a      	ldr	r3, [pc, #104]	@ (8004070 <HAL_RCC_OscConfig+0x780>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a19      	ldr	r2, [pc, #100]	@ (8004070 <HAL_RCC_OscConfig+0x780>)
 800400a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800400e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004010:	4b17      	ldr	r3, [pc, #92]	@ (8004070 <HAL_RCC_OscConfig+0x780>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	4a16      	ldr	r2, [pc, #88]	@ (8004070 <HAL_RCC_OscConfig+0x780>)
 8004016:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800401a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800401c:	f7fd faae 	bl	800157c <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004024:	f7fd faaa 	bl	800157c <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e030      	b.n	8004098 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004036:	4b0e      	ldr	r3, [pc, #56]	@ (8004070 <HAL_RCC_OscConfig+0x780>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0f0      	beq.n	8004024 <HAL_RCC_OscConfig+0x734>
 8004042:	e028      	b.n	8004096 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	2b0c      	cmp	r3, #12
 8004048:	d023      	beq.n	8004092 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800404a:	4b09      	ldr	r3, [pc, #36]	@ (8004070 <HAL_RCC_OscConfig+0x780>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a08      	ldr	r2, [pc, #32]	@ (8004070 <HAL_RCC_OscConfig+0x780>)
 8004050:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004056:	f7fd fa91 	bl	800157c <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800405c:	e00c      	b.n	8004078 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800405e:	f7fd fa8d 	bl	800157c <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d905      	bls.n	8004078 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e013      	b.n	8004098 <HAL_RCC_OscConfig+0x7a8>
 8004070:	40021000 	.word	0x40021000
 8004074:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004078:	4b09      	ldr	r3, [pc, #36]	@ (80040a0 <HAL_RCC_OscConfig+0x7b0>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1ec      	bne.n	800405e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004084:	4b06      	ldr	r3, [pc, #24]	@ (80040a0 <HAL_RCC_OscConfig+0x7b0>)
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	4905      	ldr	r1, [pc, #20]	@ (80040a0 <HAL_RCC_OscConfig+0x7b0>)
 800408a:	4b06      	ldr	r3, [pc, #24]	@ (80040a4 <HAL_RCC_OscConfig+0x7b4>)
 800408c:	4013      	ands	r3, r2
 800408e:	60cb      	str	r3, [r1, #12]
 8004090:	e001      	b.n	8004096 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e000      	b.n	8004098 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3720      	adds	r7, #32
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40021000 	.word	0x40021000
 80040a4:	feeefffc 	.word	0xfeeefffc

080040a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e0e7      	b.n	800428c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040bc:	4b75      	ldr	r3, [pc, #468]	@ (8004294 <HAL_RCC_ClockConfig+0x1ec>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d910      	bls.n	80040ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ca:	4b72      	ldr	r3, [pc, #456]	@ (8004294 <HAL_RCC_ClockConfig+0x1ec>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f023 0207 	bic.w	r2, r3, #7
 80040d2:	4970      	ldr	r1, [pc, #448]	@ (8004294 <HAL_RCC_ClockConfig+0x1ec>)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040da:	4b6e      	ldr	r3, [pc, #440]	@ (8004294 <HAL_RCC_ClockConfig+0x1ec>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0307 	and.w	r3, r3, #7
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d001      	beq.n	80040ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0cf      	b.n	800428c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d010      	beq.n	800411a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	4b66      	ldr	r3, [pc, #408]	@ (8004298 <HAL_RCC_ClockConfig+0x1f0>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004104:	429a      	cmp	r2, r3
 8004106:	d908      	bls.n	800411a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004108:	4b63      	ldr	r3, [pc, #396]	@ (8004298 <HAL_RCC_ClockConfig+0x1f0>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	4960      	ldr	r1, [pc, #384]	@ (8004298 <HAL_RCC_ClockConfig+0x1f0>)
 8004116:	4313      	orrs	r3, r2
 8004118:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d04c      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b03      	cmp	r3, #3
 800412c:	d107      	bne.n	800413e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800412e:	4b5a      	ldr	r3, [pc, #360]	@ (8004298 <HAL_RCC_ClockConfig+0x1f0>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d121      	bne.n	800417e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e0a6      	b.n	800428c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b02      	cmp	r3, #2
 8004144:	d107      	bne.n	8004156 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004146:	4b54      	ldr	r3, [pc, #336]	@ (8004298 <HAL_RCC_ClockConfig+0x1f0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d115      	bne.n	800417e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e09a      	b.n	800428c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d107      	bne.n	800416e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800415e:	4b4e      	ldr	r3, [pc, #312]	@ (8004298 <HAL_RCC_ClockConfig+0x1f0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d109      	bne.n	800417e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e08e      	b.n	800428c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800416e:	4b4a      	ldr	r3, [pc, #296]	@ (8004298 <HAL_RCC_ClockConfig+0x1f0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e086      	b.n	800428c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800417e:	4b46      	ldr	r3, [pc, #280]	@ (8004298 <HAL_RCC_ClockConfig+0x1f0>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f023 0203 	bic.w	r2, r3, #3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	4943      	ldr	r1, [pc, #268]	@ (8004298 <HAL_RCC_ClockConfig+0x1f0>)
 800418c:	4313      	orrs	r3, r2
 800418e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004190:	f7fd f9f4 	bl	800157c <HAL_GetTick>
 8004194:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004196:	e00a      	b.n	80041ae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004198:	f7fd f9f0 	bl	800157c <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e06e      	b.n	800428c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ae:	4b3a      	ldr	r3, [pc, #232]	@ (8004298 <HAL_RCC_ClockConfig+0x1f0>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 020c 	and.w	r2, r3, #12
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	429a      	cmp	r2, r3
 80041be:	d1eb      	bne.n	8004198 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d010      	beq.n	80041ee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	4b31      	ldr	r3, [pc, #196]	@ (8004298 <HAL_RCC_ClockConfig+0x1f0>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041d8:	429a      	cmp	r2, r3
 80041da:	d208      	bcs.n	80041ee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041dc:	4b2e      	ldr	r3, [pc, #184]	@ (8004298 <HAL_RCC_ClockConfig+0x1f0>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	492b      	ldr	r1, [pc, #172]	@ (8004298 <HAL_RCC_ClockConfig+0x1f0>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041ee:	4b29      	ldr	r3, [pc, #164]	@ (8004294 <HAL_RCC_ClockConfig+0x1ec>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d210      	bcs.n	800421e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fc:	4b25      	ldr	r3, [pc, #148]	@ (8004294 <HAL_RCC_ClockConfig+0x1ec>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f023 0207 	bic.w	r2, r3, #7
 8004204:	4923      	ldr	r1, [pc, #140]	@ (8004294 <HAL_RCC_ClockConfig+0x1ec>)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	4313      	orrs	r3, r2
 800420a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800420c:	4b21      	ldr	r3, [pc, #132]	@ (8004294 <HAL_RCC_ClockConfig+0x1ec>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d001      	beq.n	800421e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e036      	b.n	800428c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0304 	and.w	r3, r3, #4
 8004226:	2b00      	cmp	r3, #0
 8004228:	d008      	beq.n	800423c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800422a:	4b1b      	ldr	r3, [pc, #108]	@ (8004298 <HAL_RCC_ClockConfig+0x1f0>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	4918      	ldr	r1, [pc, #96]	@ (8004298 <HAL_RCC_ClockConfig+0x1f0>)
 8004238:	4313      	orrs	r3, r2
 800423a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0308 	and.w	r3, r3, #8
 8004244:	2b00      	cmp	r3, #0
 8004246:	d009      	beq.n	800425c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004248:	4b13      	ldr	r3, [pc, #76]	@ (8004298 <HAL_RCC_ClockConfig+0x1f0>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	4910      	ldr	r1, [pc, #64]	@ (8004298 <HAL_RCC_ClockConfig+0x1f0>)
 8004258:	4313      	orrs	r3, r2
 800425a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800425c:	f000 f824 	bl	80042a8 <HAL_RCC_GetSysClockFreq>
 8004260:	4602      	mov	r2, r0
 8004262:	4b0d      	ldr	r3, [pc, #52]	@ (8004298 <HAL_RCC_ClockConfig+0x1f0>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	091b      	lsrs	r3, r3, #4
 8004268:	f003 030f 	and.w	r3, r3, #15
 800426c:	490b      	ldr	r1, [pc, #44]	@ (800429c <HAL_RCC_ClockConfig+0x1f4>)
 800426e:	5ccb      	ldrb	r3, [r1, r3]
 8004270:	f003 031f 	and.w	r3, r3, #31
 8004274:	fa22 f303 	lsr.w	r3, r2, r3
 8004278:	4a09      	ldr	r2, [pc, #36]	@ (80042a0 <HAL_RCC_ClockConfig+0x1f8>)
 800427a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800427c:	4b09      	ldr	r3, [pc, #36]	@ (80042a4 <HAL_RCC_ClockConfig+0x1fc>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4618      	mov	r0, r3
 8004282:	f7fd f92b 	bl	80014dc <HAL_InitTick>
 8004286:	4603      	mov	r3, r0
 8004288:	72fb      	strb	r3, [r7, #11]

  return status;
 800428a:	7afb      	ldrb	r3, [r7, #11]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40022000 	.word	0x40022000
 8004298:	40021000 	.word	0x40021000
 800429c:	08006a1c 	.word	0x08006a1c
 80042a0:	20000000 	.word	0x20000000
 80042a4:	20000004 	.word	0x20000004

080042a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b089      	sub	sp, #36	@ 0x24
 80042ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042ae:	2300      	movs	r3, #0
 80042b0:	61fb      	str	r3, [r7, #28]
 80042b2:	2300      	movs	r3, #0
 80042b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042b6:	4b3e      	ldr	r3, [pc, #248]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 030c 	and.w	r3, r3, #12
 80042be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042c0:	4b3b      	ldr	r3, [pc, #236]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0303 	and.w	r3, r3, #3
 80042c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d005      	beq.n	80042dc <HAL_RCC_GetSysClockFreq+0x34>
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	2b0c      	cmp	r3, #12
 80042d4:	d121      	bne.n	800431a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d11e      	bne.n	800431a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042dc:	4b34      	ldr	r3, [pc, #208]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0308 	and.w	r3, r3, #8
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d107      	bne.n	80042f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042e8:	4b31      	ldr	r3, [pc, #196]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042ee:	0a1b      	lsrs	r3, r3, #8
 80042f0:	f003 030f 	and.w	r3, r3, #15
 80042f4:	61fb      	str	r3, [r7, #28]
 80042f6:	e005      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042f8:	4b2d      	ldr	r3, [pc, #180]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	091b      	lsrs	r3, r3, #4
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004304:	4a2b      	ldr	r2, [pc, #172]	@ (80043b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800430c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10d      	bne.n	8004330 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004318:	e00a      	b.n	8004330 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	2b04      	cmp	r3, #4
 800431e:	d102      	bne.n	8004326 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004320:	4b25      	ldr	r3, [pc, #148]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004322:	61bb      	str	r3, [r7, #24]
 8004324:	e004      	b.n	8004330 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	2b08      	cmp	r3, #8
 800432a:	d101      	bne.n	8004330 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800432c:	4b23      	ldr	r3, [pc, #140]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x114>)
 800432e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	2b0c      	cmp	r3, #12
 8004334:	d134      	bne.n	80043a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004336:	4b1e      	ldr	r3, [pc, #120]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d003      	beq.n	800434e <HAL_RCC_GetSysClockFreq+0xa6>
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2b03      	cmp	r3, #3
 800434a:	d003      	beq.n	8004354 <HAL_RCC_GetSysClockFreq+0xac>
 800434c:	e005      	b.n	800435a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800434e:	4b1a      	ldr	r3, [pc, #104]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004350:	617b      	str	r3, [r7, #20]
      break;
 8004352:	e005      	b.n	8004360 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004354:	4b19      	ldr	r3, [pc, #100]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x114>)
 8004356:	617b      	str	r3, [r7, #20]
      break;
 8004358:	e002      	b.n	8004360 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	617b      	str	r3, [r7, #20]
      break;
 800435e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004360:	4b13      	ldr	r3, [pc, #76]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	091b      	lsrs	r3, r3, #4
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	3301      	adds	r3, #1
 800436c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800436e:	4b10      	ldr	r3, [pc, #64]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	0a1b      	lsrs	r3, r3, #8
 8004374:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	fb03 f202 	mul.w	r2, r3, r2
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	fbb2 f3f3 	udiv	r3, r2, r3
 8004384:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004386:	4b0a      	ldr	r3, [pc, #40]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	0e5b      	lsrs	r3, r3, #25
 800438c:	f003 0303 	and.w	r3, r3, #3
 8004390:	3301      	adds	r3, #1
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	fbb2 f3f3 	udiv	r3, r2, r3
 800439e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043a0:	69bb      	ldr	r3, [r7, #24]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3724      	adds	r7, #36	@ 0x24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40021000 	.word	0x40021000
 80043b4:	08006a34 	.word	0x08006a34
 80043b8:	00f42400 	.word	0x00f42400
 80043bc:	007a1200 	.word	0x007a1200

080043c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c4:	4b03      	ldr	r3, [pc, #12]	@ (80043d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80043c6:	681b      	ldr	r3, [r3, #0]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	20000000 	.word	0x20000000

080043d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043dc:	f7ff fff0 	bl	80043c0 <HAL_RCC_GetHCLKFreq>
 80043e0:	4602      	mov	r2, r0
 80043e2:	4b06      	ldr	r3, [pc, #24]	@ (80043fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	0a1b      	lsrs	r3, r3, #8
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	4904      	ldr	r1, [pc, #16]	@ (8004400 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043ee:	5ccb      	ldrb	r3, [r1, r3]
 80043f0:	f003 031f 	and.w	r3, r3, #31
 80043f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40021000 	.word	0x40021000
 8004400:	08006a2c 	.word	0x08006a2c

08004404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004408:	f7ff ffda 	bl	80043c0 <HAL_RCC_GetHCLKFreq>
 800440c:	4602      	mov	r2, r0
 800440e:	4b06      	ldr	r3, [pc, #24]	@ (8004428 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	0adb      	lsrs	r3, r3, #11
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	4904      	ldr	r1, [pc, #16]	@ (800442c <HAL_RCC_GetPCLK2Freq+0x28>)
 800441a:	5ccb      	ldrb	r3, [r1, r3]
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004424:	4618      	mov	r0, r3
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40021000 	.word	0x40021000
 800442c:	08006a2c 	.word	0x08006a2c

08004430 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004438:	2300      	movs	r3, #0
 800443a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800443c:	4b2a      	ldr	r3, [pc, #168]	@ (80044e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800443e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d003      	beq.n	8004450 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004448:	f7ff f9ee 	bl	8003828 <HAL_PWREx_GetVoltageRange>
 800444c:	6178      	str	r0, [r7, #20]
 800444e:	e014      	b.n	800447a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004450:	4b25      	ldr	r3, [pc, #148]	@ (80044e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004454:	4a24      	ldr	r2, [pc, #144]	@ (80044e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004456:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800445a:	6593      	str	r3, [r2, #88]	@ 0x58
 800445c:	4b22      	ldr	r3, [pc, #136]	@ (80044e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800445e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004460:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004468:	f7ff f9de 	bl	8003828 <HAL_PWREx_GetVoltageRange>
 800446c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800446e:	4b1e      	ldr	r3, [pc, #120]	@ (80044e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004472:	4a1d      	ldr	r2, [pc, #116]	@ (80044e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004474:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004478:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004480:	d10b      	bne.n	800449a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b80      	cmp	r3, #128	@ 0x80
 8004486:	d919      	bls.n	80044bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2ba0      	cmp	r3, #160	@ 0xa0
 800448c:	d902      	bls.n	8004494 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800448e:	2302      	movs	r3, #2
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	e013      	b.n	80044bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004494:	2301      	movs	r3, #1
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	e010      	b.n	80044bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b80      	cmp	r3, #128	@ 0x80
 800449e:	d902      	bls.n	80044a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80044a0:	2303      	movs	r3, #3
 80044a2:	613b      	str	r3, [r7, #16]
 80044a4:	e00a      	b.n	80044bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b80      	cmp	r3, #128	@ 0x80
 80044aa:	d102      	bne.n	80044b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044ac:	2302      	movs	r3, #2
 80044ae:	613b      	str	r3, [r7, #16]
 80044b0:	e004      	b.n	80044bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b70      	cmp	r3, #112	@ 0x70
 80044b6:	d101      	bne.n	80044bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044b8:	2301      	movs	r3, #1
 80044ba:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044bc:	4b0b      	ldr	r3, [pc, #44]	@ (80044ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f023 0207 	bic.w	r2, r3, #7
 80044c4:	4909      	ldr	r1, [pc, #36]	@ (80044ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044cc:	4b07      	ldr	r3, [pc, #28]	@ (80044ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d001      	beq.n	80044de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e000      	b.n	80044e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3718      	adds	r7, #24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40021000 	.word	0x40021000
 80044ec:	40022000 	.word	0x40022000

080044f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044f8:	2300      	movs	r3, #0
 80044fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044fc:	2300      	movs	r3, #0
 80044fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004508:	2b00      	cmp	r3, #0
 800450a:	d041      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004510:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004514:	d02a      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004516:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800451a:	d824      	bhi.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800451c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004520:	d008      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004522:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004526:	d81e      	bhi.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00a      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800452c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004530:	d010      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004532:	e018      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004534:	4b86      	ldr	r3, [pc, #536]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	4a85      	ldr	r2, [pc, #532]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800453a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800453e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004540:	e015      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	3304      	adds	r3, #4
 8004546:	2100      	movs	r1, #0
 8004548:	4618      	mov	r0, r3
 800454a:	f000 fabb 	bl	8004ac4 <RCCEx_PLLSAI1_Config>
 800454e:	4603      	mov	r3, r0
 8004550:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004552:	e00c      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3320      	adds	r3, #32
 8004558:	2100      	movs	r1, #0
 800455a:	4618      	mov	r0, r3
 800455c:	f000 fba6 	bl	8004cac <RCCEx_PLLSAI2_Config>
 8004560:	4603      	mov	r3, r0
 8004562:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004564:	e003      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	74fb      	strb	r3, [r7, #19]
      break;
 800456a:	e000      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800456c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800456e:	7cfb      	ldrb	r3, [r7, #19]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10b      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004574:	4b76      	ldr	r3, [pc, #472]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800457a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004582:	4973      	ldr	r1, [pc, #460]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800458a:	e001      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458c:	7cfb      	ldrb	r3, [r7, #19]
 800458e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d041      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80045a4:	d02a      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80045a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80045aa:	d824      	bhi.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045b0:	d008      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80045b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045b6:	d81e      	bhi.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00a      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80045bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045c0:	d010      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045c2:	e018      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045c4:	4b62      	ldr	r3, [pc, #392]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	4a61      	ldr	r2, [pc, #388]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045ce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045d0:	e015      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3304      	adds	r3, #4
 80045d6:	2100      	movs	r1, #0
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 fa73 	bl	8004ac4 <RCCEx_PLLSAI1_Config>
 80045de:	4603      	mov	r3, r0
 80045e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045e2:	e00c      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3320      	adds	r3, #32
 80045e8:	2100      	movs	r1, #0
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fb5e 	bl	8004cac <RCCEx_PLLSAI2_Config>
 80045f0:	4603      	mov	r3, r0
 80045f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045f4:	e003      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	74fb      	strb	r3, [r7, #19]
      break;
 80045fa:	e000      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80045fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045fe:	7cfb      	ldrb	r3, [r7, #19]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10b      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004604:	4b52      	ldr	r3, [pc, #328]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800460a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004612:	494f      	ldr	r1, [pc, #316]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800461a:	e001      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800461c:	7cfb      	ldrb	r3, [r7, #19]
 800461e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 80a0 	beq.w	800476e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800462e:	2300      	movs	r3, #0
 8004630:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004632:	4b47      	ldr	r3, [pc, #284]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004642:	2300      	movs	r3, #0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00d      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004648:	4b41      	ldr	r3, [pc, #260]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800464a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800464c:	4a40      	ldr	r2, [pc, #256]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800464e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004652:	6593      	str	r3, [r2, #88]	@ 0x58
 8004654:	4b3e      	ldr	r3, [pc, #248]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800465c:	60bb      	str	r3, [r7, #8]
 800465e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004660:	2301      	movs	r3, #1
 8004662:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004664:	4b3b      	ldr	r3, [pc, #236]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a3a      	ldr	r2, [pc, #232]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800466a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800466e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004670:	f7fc ff84 	bl	800157c <HAL_GetTick>
 8004674:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004676:	e009      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004678:	f7fc ff80 	bl	800157c <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d902      	bls.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	74fb      	strb	r3, [r7, #19]
        break;
 800468a:	e005      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800468c:	4b31      	ldr	r3, [pc, #196]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0ef      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004698:	7cfb      	ldrb	r3, [r7, #19]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d15c      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800469e:	4b2c      	ldr	r3, [pc, #176]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d01f      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d019      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046bc:	4b24      	ldr	r3, [pc, #144]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046c8:	4b21      	ldr	r3, [pc, #132]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ce:	4a20      	ldr	r2, [pc, #128]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046de:	4a1c      	ldr	r2, [pc, #112]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046e8:	4a19      	ldr	r2, [pc, #100]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d016      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fa:	f7fc ff3f 	bl	800157c <HAL_GetTick>
 80046fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004700:	e00b      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004702:	f7fc ff3b 	bl	800157c <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004710:	4293      	cmp	r3, r2
 8004712:	d902      	bls.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	74fb      	strb	r3, [r7, #19]
            break;
 8004718:	e006      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800471a:	4b0d      	ldr	r3, [pc, #52]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800471c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0ec      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004728:	7cfb      	ldrb	r3, [r7, #19]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10c      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800472e:	4b08      	ldr	r3, [pc, #32]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004734:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800473e:	4904      	ldr	r1, [pc, #16]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004746:	e009      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004748:	7cfb      	ldrb	r3, [r7, #19]
 800474a:	74bb      	strb	r3, [r7, #18]
 800474c:	e006      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800474e:	bf00      	nop
 8004750:	40021000 	.word	0x40021000
 8004754:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004758:	7cfb      	ldrb	r3, [r7, #19]
 800475a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800475c:	7c7b      	ldrb	r3, [r7, #17]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d105      	bne.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004762:	4b9e      	ldr	r3, [pc, #632]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004766:	4a9d      	ldr	r2, [pc, #628]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004768:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800476c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800477a:	4b98      	ldr	r3, [pc, #608]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800477c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004780:	f023 0203 	bic.w	r2, r3, #3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004788:	4994      	ldr	r1, [pc, #592]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478a:	4313      	orrs	r3, r2
 800478c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00a      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800479c:	4b8f      	ldr	r3, [pc, #572]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a2:	f023 020c 	bic.w	r2, r3, #12
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047aa:	498c      	ldr	r1, [pc, #560]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0304 	and.w	r3, r3, #4
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047be:	4b87      	ldr	r3, [pc, #540]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047cc:	4983      	ldr	r1, [pc, #524]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047e0:	4b7e      	ldr	r3, [pc, #504]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ee:	497b      	ldr	r1, [pc, #492]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0310 	and.w	r3, r3, #16
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004802:	4b76      	ldr	r3, [pc, #472]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004808:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004810:	4972      	ldr	r1, [pc, #456]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00a      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004824:	4b6d      	ldr	r3, [pc, #436]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800482a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004832:	496a      	ldr	r1, [pc, #424]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004846:	4b65      	ldr	r3, [pc, #404]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800484c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004854:	4961      	ldr	r1, [pc, #388]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00a      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004868:	4b5c      	ldr	r3, [pc, #368]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800486a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800486e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004876:	4959      	ldr	r1, [pc, #356]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004878:	4313      	orrs	r3, r2
 800487a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800488a:	4b54      	ldr	r3, [pc, #336]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800488c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004890:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004898:	4950      	ldr	r1, [pc, #320]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489a:	4313      	orrs	r3, r2
 800489c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00a      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048ac:	4b4b      	ldr	r3, [pc, #300]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ba:	4948      	ldr	r1, [pc, #288]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00a      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048ce:	4b43      	ldr	r3, [pc, #268]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048dc:	493f      	ldr	r1, [pc, #252]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d028      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048f0:	4b3a      	ldr	r3, [pc, #232]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048fe:	4937      	ldr	r1, [pc, #220]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004900:	4313      	orrs	r3, r2
 8004902:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800490a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800490e:	d106      	bne.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004910:	4b32      	ldr	r3, [pc, #200]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	4a31      	ldr	r2, [pc, #196]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004916:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800491a:	60d3      	str	r3, [r2, #12]
 800491c:	e011      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004922:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004926:	d10c      	bne.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3304      	adds	r3, #4
 800492c:	2101      	movs	r1, #1
 800492e:	4618      	mov	r0, r3
 8004930:	f000 f8c8 	bl	8004ac4 <RCCEx_PLLSAI1_Config>
 8004934:	4603      	mov	r3, r0
 8004936:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004938:	7cfb      	ldrb	r3, [r7, #19]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800493e:	7cfb      	ldrb	r3, [r7, #19]
 8004940:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d028      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800494e:	4b23      	ldr	r3, [pc, #140]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004954:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800495c:	491f      	ldr	r1, [pc, #124]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004968:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800496c:	d106      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800496e:	4b1b      	ldr	r3, [pc, #108]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	4a1a      	ldr	r2, [pc, #104]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004974:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004978:	60d3      	str	r3, [r2, #12]
 800497a:	e011      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004980:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004984:	d10c      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3304      	adds	r3, #4
 800498a:	2101      	movs	r1, #1
 800498c:	4618      	mov	r0, r3
 800498e:	f000 f899 	bl	8004ac4 <RCCEx_PLLSAI1_Config>
 8004992:	4603      	mov	r3, r0
 8004994:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004996:	7cfb      	ldrb	r3, [r7, #19]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800499c:	7cfb      	ldrb	r3, [r7, #19]
 800499e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d02b      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049ac:	4b0b      	ldr	r3, [pc, #44]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049ba:	4908      	ldr	r1, [pc, #32]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049ca:	d109      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049cc:	4b03      	ldr	r3, [pc, #12]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	4a02      	ldr	r2, [pc, #8]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049d6:	60d3      	str	r3, [r2, #12]
 80049d8:	e014      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80049da:	bf00      	nop
 80049dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049e8:	d10c      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3304      	adds	r3, #4
 80049ee:	2101      	movs	r1, #1
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 f867 	bl	8004ac4 <RCCEx_PLLSAI1_Config>
 80049f6:	4603      	mov	r3, r0
 80049f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049fa:	7cfb      	ldrb	r3, [r7, #19]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004a00:	7cfb      	ldrb	r3, [r7, #19]
 8004a02:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d02f      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a10:	4b2b      	ldr	r3, [pc, #172]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a16:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a1e:	4928      	ldr	r1, [pc, #160]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a2e:	d10d      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3304      	adds	r3, #4
 8004a34:	2102      	movs	r1, #2
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 f844 	bl	8004ac4 <RCCEx_PLLSAI1_Config>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a40:	7cfb      	ldrb	r3, [r7, #19]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d014      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a46:	7cfb      	ldrb	r3, [r7, #19]
 8004a48:	74bb      	strb	r3, [r7, #18]
 8004a4a:	e011      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a54:	d10c      	bne.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	3320      	adds	r3, #32
 8004a5a:	2102      	movs	r1, #2
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 f925 	bl	8004cac <RCCEx_PLLSAI2_Config>
 8004a62:	4603      	mov	r3, r0
 8004a64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a66:	7cfb      	ldrb	r3, [r7, #19]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a6c:	7cfb      	ldrb	r3, [r7, #19]
 8004a6e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00a      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a7c:	4b10      	ldr	r3, [pc, #64]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a82:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a8a:	490d      	ldr	r1, [pc, #52]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00b      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a9e:	4b08      	ldr	r3, [pc, #32]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004aae:	4904      	ldr	r1, [pc, #16]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ab6:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3718      	adds	r7, #24
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40021000 	.word	0x40021000

08004ac4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ad2:	4b75      	ldr	r3, [pc, #468]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f003 0303 	and.w	r3, r3, #3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d018      	beq.n	8004b10 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ade:	4b72      	ldr	r3, [pc, #456]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f003 0203 	and.w	r2, r3, #3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d10d      	bne.n	8004b0a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
       ||
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d009      	beq.n	8004b0a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004af6:	4b6c      	ldr	r3, [pc, #432]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	091b      	lsrs	r3, r3, #4
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
       ||
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d047      	beq.n	8004b9a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	73fb      	strb	r3, [r7, #15]
 8004b0e:	e044      	b.n	8004b9a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b03      	cmp	r3, #3
 8004b16:	d018      	beq.n	8004b4a <RCCEx_PLLSAI1_Config+0x86>
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d825      	bhi.n	8004b68 <RCCEx_PLLSAI1_Config+0xa4>
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d002      	beq.n	8004b26 <RCCEx_PLLSAI1_Config+0x62>
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d009      	beq.n	8004b38 <RCCEx_PLLSAI1_Config+0x74>
 8004b24:	e020      	b.n	8004b68 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b26:	4b60      	ldr	r3, [pc, #384]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d11d      	bne.n	8004b6e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b36:	e01a      	b.n	8004b6e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b38:	4b5b      	ldr	r3, [pc, #364]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d116      	bne.n	8004b72 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b48:	e013      	b.n	8004b72 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b4a:	4b57      	ldr	r3, [pc, #348]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10f      	bne.n	8004b76 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b56:	4b54      	ldr	r3, [pc, #336]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d109      	bne.n	8004b76 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b66:	e006      	b.n	8004b76 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b6c:	e004      	b.n	8004b78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b6e:	bf00      	nop
 8004b70:	e002      	b.n	8004b78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b72:	bf00      	nop
 8004b74:	e000      	b.n	8004b78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b76:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10d      	bne.n	8004b9a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b7e:	4b4a      	ldr	r3, [pc, #296]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6819      	ldr	r1, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	011b      	lsls	r3, r3, #4
 8004b92:	430b      	orrs	r3, r1
 8004b94:	4944      	ldr	r1, [pc, #272]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d17d      	bne.n	8004c9c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ba0:	4b41      	ldr	r3, [pc, #260]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a40      	ldr	r2, [pc, #256]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004baa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bac:	f7fc fce6 	bl	800157c <HAL_GetTick>
 8004bb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bb2:	e009      	b.n	8004bc8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bb4:	f7fc fce2 	bl	800157c <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d902      	bls.n	8004bc8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	73fb      	strb	r3, [r7, #15]
        break;
 8004bc6:	e005      	b.n	8004bd4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bc8:	4b37      	ldr	r3, [pc, #220]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1ef      	bne.n	8004bb4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d160      	bne.n	8004c9c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d111      	bne.n	8004c04 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004be0:	4b31      	ldr	r3, [pc, #196]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004be8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	6892      	ldr	r2, [r2, #8]
 8004bf0:	0211      	lsls	r1, r2, #8
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	68d2      	ldr	r2, [r2, #12]
 8004bf6:	0912      	lsrs	r2, r2, #4
 8004bf8:	0452      	lsls	r2, r2, #17
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	492a      	ldr	r1, [pc, #168]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	610b      	str	r3, [r1, #16]
 8004c02:	e027      	b.n	8004c54 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d112      	bne.n	8004c30 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c0a:	4b27      	ldr	r3, [pc, #156]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004c12:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6892      	ldr	r2, [r2, #8]
 8004c1a:	0211      	lsls	r1, r2, #8
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	6912      	ldr	r2, [r2, #16]
 8004c20:	0852      	lsrs	r2, r2, #1
 8004c22:	3a01      	subs	r2, #1
 8004c24:	0552      	lsls	r2, r2, #21
 8004c26:	430a      	orrs	r2, r1
 8004c28:	491f      	ldr	r1, [pc, #124]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	610b      	str	r3, [r1, #16]
 8004c2e:	e011      	b.n	8004c54 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c30:	4b1d      	ldr	r3, [pc, #116]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004c38:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6892      	ldr	r2, [r2, #8]
 8004c40:	0211      	lsls	r1, r2, #8
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6952      	ldr	r2, [r2, #20]
 8004c46:	0852      	lsrs	r2, r2, #1
 8004c48:	3a01      	subs	r2, #1
 8004c4a:	0652      	lsls	r2, r2, #25
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	4916      	ldr	r1, [pc, #88]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c54:	4b14      	ldr	r3, [pc, #80]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a13      	ldr	r2, [pc, #76]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c5a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c60:	f7fc fc8c 	bl	800157c <HAL_GetTick>
 8004c64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c66:	e009      	b.n	8004c7c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c68:	f7fc fc88 	bl	800157c <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d902      	bls.n	8004c7c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	73fb      	strb	r3, [r7, #15]
          break;
 8004c7a:	e005      	b.n	8004c88 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0ef      	beq.n	8004c68 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c8e:	4b06      	ldr	r3, [pc, #24]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c90:	691a      	ldr	r2, [r3, #16]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	4904      	ldr	r1, [pc, #16]	@ (8004ca8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	40021000 	.word	0x40021000

08004cac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cba:	4b6a      	ldr	r3, [pc, #424]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d018      	beq.n	8004cf8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004cc6:	4b67      	ldr	r3, [pc, #412]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f003 0203 	and.w	r2, r3, #3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d10d      	bne.n	8004cf2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
       ||
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d009      	beq.n	8004cf2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004cde:	4b61      	ldr	r3, [pc, #388]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	091b      	lsrs	r3, r3, #4
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
       ||
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d047      	beq.n	8004d82 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	73fb      	strb	r3, [r7, #15]
 8004cf6:	e044      	b.n	8004d82 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b03      	cmp	r3, #3
 8004cfe:	d018      	beq.n	8004d32 <RCCEx_PLLSAI2_Config+0x86>
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	d825      	bhi.n	8004d50 <RCCEx_PLLSAI2_Config+0xa4>
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d002      	beq.n	8004d0e <RCCEx_PLLSAI2_Config+0x62>
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d009      	beq.n	8004d20 <RCCEx_PLLSAI2_Config+0x74>
 8004d0c:	e020      	b.n	8004d50 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d0e:	4b55      	ldr	r3, [pc, #340]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d11d      	bne.n	8004d56 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d1e:	e01a      	b.n	8004d56 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d20:	4b50      	ldr	r3, [pc, #320]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d116      	bne.n	8004d5a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d30:	e013      	b.n	8004d5a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d32:	4b4c      	ldr	r3, [pc, #304]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10f      	bne.n	8004d5e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d3e:	4b49      	ldr	r3, [pc, #292]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d109      	bne.n	8004d5e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d4e:	e006      	b.n	8004d5e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	73fb      	strb	r3, [r7, #15]
      break;
 8004d54:	e004      	b.n	8004d60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d56:	bf00      	nop
 8004d58:	e002      	b.n	8004d60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d5a:	bf00      	nop
 8004d5c:	e000      	b.n	8004d60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10d      	bne.n	8004d82 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d66:	4b3f      	ldr	r3, [pc, #252]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6819      	ldr	r1, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	011b      	lsls	r3, r3, #4
 8004d7a:	430b      	orrs	r3, r1
 8004d7c:	4939      	ldr	r1, [pc, #228]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d82:	7bfb      	ldrb	r3, [r7, #15]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d167      	bne.n	8004e58 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d88:	4b36      	ldr	r3, [pc, #216]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a35      	ldr	r2, [pc, #212]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d94:	f7fc fbf2 	bl	800157c <HAL_GetTick>
 8004d98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d9a:	e009      	b.n	8004db0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d9c:	f7fc fbee 	bl	800157c <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d902      	bls.n	8004db0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	73fb      	strb	r3, [r7, #15]
        break;
 8004dae:	e005      	b.n	8004dbc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004db0:	4b2c      	ldr	r3, [pc, #176]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1ef      	bne.n	8004d9c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d14a      	bne.n	8004e58 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d111      	bne.n	8004dec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004dc8:	4b26      	ldr	r3, [pc, #152]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004dd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6892      	ldr	r2, [r2, #8]
 8004dd8:	0211      	lsls	r1, r2, #8
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	68d2      	ldr	r2, [r2, #12]
 8004dde:	0912      	lsrs	r2, r2, #4
 8004de0:	0452      	lsls	r2, r2, #17
 8004de2:	430a      	orrs	r2, r1
 8004de4:	491f      	ldr	r1, [pc, #124]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	614b      	str	r3, [r1, #20]
 8004dea:	e011      	b.n	8004e10 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004dec:	4b1d      	ldr	r3, [pc, #116]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004df4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6892      	ldr	r2, [r2, #8]
 8004dfc:	0211      	lsls	r1, r2, #8
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6912      	ldr	r2, [r2, #16]
 8004e02:	0852      	lsrs	r2, r2, #1
 8004e04:	3a01      	subs	r2, #1
 8004e06:	0652      	lsls	r2, r2, #25
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	4916      	ldr	r1, [pc, #88]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e10:	4b14      	ldr	r3, [pc, #80]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a13      	ldr	r2, [pc, #76]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e1c:	f7fc fbae 	bl	800157c <HAL_GetTick>
 8004e20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e22:	e009      	b.n	8004e38 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e24:	f7fc fbaa 	bl	800157c <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d902      	bls.n	8004e38 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	73fb      	strb	r3, [r7, #15]
          break;
 8004e36:	e005      	b.n	8004e44 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e38:	4b0a      	ldr	r3, [pc, #40]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0ef      	beq.n	8004e24 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d106      	bne.n	8004e58 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e4a:	4b06      	ldr	r3, [pc, #24]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e4c:	695a      	ldr	r2, [r3, #20]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	4904      	ldr	r1, [pc, #16]	@ (8004e64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	40021000 	.word	0x40021000

08004e68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e040      	b.n	8004efc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d106      	bne.n	8004e90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7fc f9e4 	bl	8001258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2224      	movs	r2, #36	@ 0x24
 8004e94:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0201 	bic.w	r2, r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d002      	beq.n	8004eb4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 fe90 	bl	8005bd4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 fbd5 	bl	8005664 <UART_SetConfig>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e01b      	b.n	8004efc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ed2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ee2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 0201 	orr.w	r2, r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 ff0f 	bl	8005d18 <UART_CheckIdleState>
 8004efa:	4603      	mov	r3, r0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b08a      	sub	sp, #40	@ 0x28
 8004f08:	af02      	add	r7, sp, #8
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	603b      	str	r3, [r7, #0]
 8004f10:	4613      	mov	r3, r2
 8004f12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f18:	2b20      	cmp	r3, #32
 8004f1a:	d177      	bne.n	800500c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d002      	beq.n	8004f28 <HAL_UART_Transmit+0x24>
 8004f22:	88fb      	ldrh	r3, [r7, #6]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e070      	b.n	800500e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2221      	movs	r2, #33	@ 0x21
 8004f38:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f3a:	f7fc fb1f 	bl	800157c <HAL_GetTick>
 8004f3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	88fa      	ldrh	r2, [r7, #6]
 8004f44:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	88fa      	ldrh	r2, [r7, #6]
 8004f4c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f58:	d108      	bne.n	8004f6c <HAL_UART_Transmit+0x68>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d104      	bne.n	8004f6c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004f62:	2300      	movs	r3, #0
 8004f64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	61bb      	str	r3, [r7, #24]
 8004f6a:	e003      	b.n	8004f74 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f70:	2300      	movs	r3, #0
 8004f72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f74:	e02f      	b.n	8004fd6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	2180      	movs	r1, #128	@ 0x80
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 ff71 	bl	8005e68 <UART_WaitOnFlagUntilTimeout>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d004      	beq.n	8004f96 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e03b      	b.n	800500e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10b      	bne.n	8004fb4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	881a      	ldrh	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fa8:	b292      	uxth	r2, r2
 8004faa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	3302      	adds	r3, #2
 8004fb0:	61bb      	str	r3, [r7, #24]
 8004fb2:	e007      	b.n	8004fc4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	781a      	ldrb	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1c9      	bne.n	8004f76 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	2140      	movs	r1, #64	@ 0x40
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f000 ff3b 	bl	8005e68 <UART_WaitOnFlagUntilTimeout>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d004      	beq.n	8005002 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e005      	b.n	800500e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2220      	movs	r2, #32
 8005006:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005008:	2300      	movs	r3, #0
 800500a:	e000      	b.n	800500e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800500c:	2302      	movs	r3, #2
  }
}
 800500e:	4618      	mov	r0, r3
 8005010:	3720      	adds	r7, #32
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
	...

08005018 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b0ba      	sub	sp, #232	@ 0xe8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800503e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005042:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005046:	4013      	ands	r3, r2
 8005048:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800504c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005050:	2b00      	cmp	r3, #0
 8005052:	d115      	bne.n	8005080 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005058:	f003 0320 	and.w	r3, r3, #32
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00f      	beq.n	8005080 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005064:	f003 0320 	and.w	r3, r3, #32
 8005068:	2b00      	cmp	r3, #0
 800506a:	d009      	beq.n	8005080 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 82ca 	beq.w	800560a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	4798      	blx	r3
      }
      return;
 800507e:	e2c4      	b.n	800560a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005080:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 8117 	beq.w	80052b8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800508a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005096:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800509a:	4b85      	ldr	r3, [pc, #532]	@ (80052b0 <HAL_UART_IRQHandler+0x298>)
 800509c:	4013      	ands	r3, r2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 810a 	beq.w	80052b8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80050a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d011      	beq.n	80050d4 <HAL_UART_IRQHandler+0xbc>
 80050b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00b      	beq.n	80050d4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2201      	movs	r2, #1
 80050c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050ca:	f043 0201 	orr.w	r2, r3, #1
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d011      	beq.n	8005104 <HAL_UART_IRQHandler+0xec>
 80050e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00b      	beq.n	8005104 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2202      	movs	r2, #2
 80050f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050fa:	f043 0204 	orr.w	r2, r3, #4
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b00      	cmp	r3, #0
 800510e:	d011      	beq.n	8005134 <HAL_UART_IRQHandler+0x11c>
 8005110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00b      	beq.n	8005134 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2204      	movs	r2, #4
 8005122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800512a:	f043 0202 	orr.w	r2, r3, #2
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005138:	f003 0308 	and.w	r3, r3, #8
 800513c:	2b00      	cmp	r3, #0
 800513e:	d017      	beq.n	8005170 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005144:	f003 0320 	and.w	r3, r3, #32
 8005148:	2b00      	cmp	r3, #0
 800514a:	d105      	bne.n	8005158 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800514c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005150:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00b      	beq.n	8005170 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2208      	movs	r2, #8
 800515e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005166:	f043 0208 	orr.w	r2, r3, #8
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005174:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005178:	2b00      	cmp	r3, #0
 800517a:	d012      	beq.n	80051a2 <HAL_UART_IRQHandler+0x18a>
 800517c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005180:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00c      	beq.n	80051a2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005190:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005198:	f043 0220 	orr.w	r2, r3, #32
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 8230 	beq.w	800560e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80051ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051b2:	f003 0320 	and.w	r3, r3, #32
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00d      	beq.n	80051d6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80051ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051be:	f003 0320 	and.w	r3, r3, #32
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d007      	beq.n	80051d6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ea:	2b40      	cmp	r3, #64	@ 0x40
 80051ec:	d005      	beq.n	80051fa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80051ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051f2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d04f      	beq.n	800529a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fea1 	bl	8005f42 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800520a:	2b40      	cmp	r3, #64	@ 0x40
 800520c:	d141      	bne.n	8005292 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3308      	adds	r3, #8
 8005214:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005218:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800521c:	e853 3f00 	ldrex	r3, [r3]
 8005220:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005224:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005228:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800522c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3308      	adds	r3, #8
 8005236:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800523a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800523e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005242:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005246:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800524a:	e841 2300 	strex	r3, r2, [r1]
 800524e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005252:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1d9      	bne.n	800520e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800525e:	2b00      	cmp	r3, #0
 8005260:	d013      	beq.n	800528a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005266:	4a13      	ldr	r2, [pc, #76]	@ (80052b4 <HAL_UART_IRQHandler+0x29c>)
 8005268:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800526e:	4618      	mov	r0, r3
 8005270:	f7fe f8b3 	bl	80033da <HAL_DMA_Abort_IT>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d017      	beq.n	80052aa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800527e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005284:	4610      	mov	r0, r2
 8005286:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005288:	e00f      	b.n	80052aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f9d4 	bl	8005638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005290:	e00b      	b.n	80052aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f9d0 	bl	8005638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005298:	e007      	b.n	80052aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f9cc 	bl	8005638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80052a8:	e1b1      	b.n	800560e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052aa:	bf00      	nop
    return;
 80052ac:	e1af      	b.n	800560e <HAL_UART_IRQHandler+0x5f6>
 80052ae:	bf00      	nop
 80052b0:	04000120 	.word	0x04000120
 80052b4:	0800600b 	.word	0x0800600b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052bc:	2b01      	cmp	r3, #1
 80052be:	f040 816a 	bne.w	8005596 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80052c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052c6:	f003 0310 	and.w	r3, r3, #16
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 8163 	beq.w	8005596 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80052d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052d4:	f003 0310 	and.w	r3, r3, #16
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 815c 	beq.w	8005596 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2210      	movs	r2, #16
 80052e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f0:	2b40      	cmp	r3, #64	@ 0x40
 80052f2:	f040 80d4 	bne.w	800549e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005302:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 80ad 	beq.w	8005466 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005312:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005316:	429a      	cmp	r2, r3
 8005318:	f080 80a5 	bcs.w	8005466 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005322:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0320 	and.w	r3, r3, #32
 8005332:	2b00      	cmp	r3, #0
 8005334:	f040 8086 	bne.w	8005444 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005340:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005344:	e853 3f00 	ldrex	r3, [r3]
 8005348:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800534c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005350:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005354:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	461a      	mov	r2, r3
 800535e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005362:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005366:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800536e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005372:	e841 2300 	strex	r3, r2, [r1]
 8005376:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800537a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1da      	bne.n	8005338 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	3308      	adds	r3, #8
 8005388:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800538c:	e853 3f00 	ldrex	r3, [r3]
 8005390:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005392:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005394:	f023 0301 	bic.w	r3, r3, #1
 8005398:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3308      	adds	r3, #8
 80053a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80053a6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80053aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80053ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80053b2:	e841 2300 	strex	r3, r2, [r1]
 80053b6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80053b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1e1      	bne.n	8005382 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3308      	adds	r3, #8
 80053c4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80053c8:	e853 3f00 	ldrex	r3, [r3]
 80053cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80053ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	3308      	adds	r3, #8
 80053de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80053e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80053e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80053e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80053ea:	e841 2300 	strex	r3, r2, [r1]
 80053ee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80053f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1e3      	bne.n	80053be <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2220      	movs	r2, #32
 80053fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800540c:	e853 3f00 	ldrex	r3, [r3]
 8005410:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005412:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005414:	f023 0310 	bic.w	r3, r3, #16
 8005418:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	461a      	mov	r2, r3
 8005422:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005426:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005428:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800542c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800542e:	e841 2300 	strex	r3, r2, [r1]
 8005432:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005434:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1e4      	bne.n	8005404 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800543e:	4618      	mov	r0, r3
 8005440:	f7fd ff8d 	bl	800335e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005456:	b29b      	uxth	r3, r3
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	b29b      	uxth	r3, r3
 800545c:	4619      	mov	r1, r3
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f8f4 	bl	800564c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005464:	e0d5      	b.n	8005612 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800546c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005470:	429a      	cmp	r2, r3
 8005472:	f040 80ce 	bne.w	8005612 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b20      	cmp	r3, #32
 8005484:	f040 80c5 	bne.w	8005612 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005494:	4619      	mov	r1, r3
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f8d8 	bl	800564c <HAL_UARTEx_RxEventCallback>
      return;
 800549c:	e0b9      	b.n	8005612 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 80ab 	beq.w	8005616 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80054c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 80a6 	beq.w	8005616 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d2:	e853 3f00 	ldrex	r3, [r3]
 80054d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80054ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80054ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054f4:	e841 2300 	strex	r3, r2, [r1]
 80054f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1e4      	bne.n	80054ca <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3308      	adds	r3, #8
 8005506:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550a:	e853 3f00 	ldrex	r3, [r3]
 800550e:	623b      	str	r3, [r7, #32]
   return(result);
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	f023 0301 	bic.w	r3, r3, #1
 8005516:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	3308      	adds	r3, #8
 8005520:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005524:	633a      	str	r2, [r7, #48]	@ 0x30
 8005526:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005528:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800552a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800552c:	e841 2300 	strex	r3, r2, [r1]
 8005530:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1e3      	bne.n	8005500 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2220      	movs	r2, #32
 800553c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	e853 3f00 	ldrex	r3, [r3]
 8005558:	60fb      	str	r3, [r7, #12]
   return(result);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f023 0310 	bic.w	r3, r3, #16
 8005560:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	461a      	mov	r2, r3
 800556a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800556e:	61fb      	str	r3, [r7, #28]
 8005570:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005572:	69b9      	ldr	r1, [r7, #24]
 8005574:	69fa      	ldr	r2, [r7, #28]
 8005576:	e841 2300 	strex	r3, r2, [r1]
 800557a:	617b      	str	r3, [r7, #20]
   return(result);
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1e4      	bne.n	800554c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2202      	movs	r2, #2
 8005586:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005588:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800558c:	4619      	mov	r1, r3
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f85c 	bl	800564c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005594:	e03f      	b.n	8005616 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800559a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00e      	beq.n	80055c0 <HAL_UART_IRQHandler+0x5a8>
 80055a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d008      	beq.n	80055c0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80055b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 fd66 	bl	800608a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80055be:	e02d      	b.n	800561c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80055c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00e      	beq.n	80055ea <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80055cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d008      	beq.n	80055ea <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d01c      	beq.n	800561a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	4798      	blx	r3
    }
    return;
 80055e8:	e017      	b.n	800561a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80055ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d012      	beq.n	800561c <HAL_UART_IRQHandler+0x604>
 80055f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00c      	beq.n	800561c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fd17 	bl	8006036 <UART_EndTransmit_IT>
    return;
 8005608:	e008      	b.n	800561c <HAL_UART_IRQHandler+0x604>
      return;
 800560a:	bf00      	nop
 800560c:	e006      	b.n	800561c <HAL_UART_IRQHandler+0x604>
    return;
 800560e:	bf00      	nop
 8005610:	e004      	b.n	800561c <HAL_UART_IRQHandler+0x604>
      return;
 8005612:	bf00      	nop
 8005614:	e002      	b.n	800561c <HAL_UART_IRQHandler+0x604>
      return;
 8005616:	bf00      	nop
 8005618:	e000      	b.n	800561c <HAL_UART_IRQHandler+0x604>
    return;
 800561a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800561c:	37e8      	adds	r7, #232	@ 0xe8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop

08005624 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	460b      	mov	r3, r1
 8005656:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005668:	b08a      	sub	sp, #40	@ 0x28
 800566a:	af00      	add	r7, sp, #0
 800566c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800566e:	2300      	movs	r3, #0
 8005670:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	431a      	orrs	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	431a      	orrs	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	69db      	ldr	r3, [r3, #28]
 8005688:	4313      	orrs	r3, r2
 800568a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	4ba4      	ldr	r3, [pc, #656]	@ (8005924 <UART_SetConfig+0x2c0>)
 8005694:	4013      	ands	r3, r2
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	6812      	ldr	r2, [r2, #0]
 800569a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800569c:	430b      	orrs	r3, r1
 800569e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	68da      	ldr	r2, [r3, #12]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a99      	ldr	r2, [pc, #612]	@ (8005928 <UART_SetConfig+0x2c4>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d004      	beq.n	80056d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056cc:	4313      	orrs	r3, r2
 80056ce:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056e0:	430a      	orrs	r2, r1
 80056e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a90      	ldr	r2, [pc, #576]	@ (800592c <UART_SetConfig+0x2c8>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d126      	bne.n	800573c <UART_SetConfig+0xd8>
 80056ee:	4b90      	ldr	r3, [pc, #576]	@ (8005930 <UART_SetConfig+0x2cc>)
 80056f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f4:	f003 0303 	and.w	r3, r3, #3
 80056f8:	2b03      	cmp	r3, #3
 80056fa:	d81b      	bhi.n	8005734 <UART_SetConfig+0xd0>
 80056fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005704 <UART_SetConfig+0xa0>)
 80056fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005702:	bf00      	nop
 8005704:	08005715 	.word	0x08005715
 8005708:	08005725 	.word	0x08005725
 800570c:	0800571d 	.word	0x0800571d
 8005710:	0800572d 	.word	0x0800572d
 8005714:	2301      	movs	r3, #1
 8005716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800571a:	e116      	b.n	800594a <UART_SetConfig+0x2e6>
 800571c:	2302      	movs	r3, #2
 800571e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005722:	e112      	b.n	800594a <UART_SetConfig+0x2e6>
 8005724:	2304      	movs	r3, #4
 8005726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800572a:	e10e      	b.n	800594a <UART_SetConfig+0x2e6>
 800572c:	2308      	movs	r3, #8
 800572e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005732:	e10a      	b.n	800594a <UART_SetConfig+0x2e6>
 8005734:	2310      	movs	r3, #16
 8005736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800573a:	e106      	b.n	800594a <UART_SetConfig+0x2e6>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a7c      	ldr	r2, [pc, #496]	@ (8005934 <UART_SetConfig+0x2d0>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d138      	bne.n	80057b8 <UART_SetConfig+0x154>
 8005746:	4b7a      	ldr	r3, [pc, #488]	@ (8005930 <UART_SetConfig+0x2cc>)
 8005748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800574c:	f003 030c 	and.w	r3, r3, #12
 8005750:	2b0c      	cmp	r3, #12
 8005752:	d82d      	bhi.n	80057b0 <UART_SetConfig+0x14c>
 8005754:	a201      	add	r2, pc, #4	@ (adr r2, 800575c <UART_SetConfig+0xf8>)
 8005756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575a:	bf00      	nop
 800575c:	08005791 	.word	0x08005791
 8005760:	080057b1 	.word	0x080057b1
 8005764:	080057b1 	.word	0x080057b1
 8005768:	080057b1 	.word	0x080057b1
 800576c:	080057a1 	.word	0x080057a1
 8005770:	080057b1 	.word	0x080057b1
 8005774:	080057b1 	.word	0x080057b1
 8005778:	080057b1 	.word	0x080057b1
 800577c:	08005799 	.word	0x08005799
 8005780:	080057b1 	.word	0x080057b1
 8005784:	080057b1 	.word	0x080057b1
 8005788:	080057b1 	.word	0x080057b1
 800578c:	080057a9 	.word	0x080057a9
 8005790:	2300      	movs	r3, #0
 8005792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005796:	e0d8      	b.n	800594a <UART_SetConfig+0x2e6>
 8005798:	2302      	movs	r3, #2
 800579a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800579e:	e0d4      	b.n	800594a <UART_SetConfig+0x2e6>
 80057a0:	2304      	movs	r3, #4
 80057a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057a6:	e0d0      	b.n	800594a <UART_SetConfig+0x2e6>
 80057a8:	2308      	movs	r3, #8
 80057aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057ae:	e0cc      	b.n	800594a <UART_SetConfig+0x2e6>
 80057b0:	2310      	movs	r3, #16
 80057b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057b6:	e0c8      	b.n	800594a <UART_SetConfig+0x2e6>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a5e      	ldr	r2, [pc, #376]	@ (8005938 <UART_SetConfig+0x2d4>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d125      	bne.n	800580e <UART_SetConfig+0x1aa>
 80057c2:	4b5b      	ldr	r3, [pc, #364]	@ (8005930 <UART_SetConfig+0x2cc>)
 80057c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80057cc:	2b30      	cmp	r3, #48	@ 0x30
 80057ce:	d016      	beq.n	80057fe <UART_SetConfig+0x19a>
 80057d0:	2b30      	cmp	r3, #48	@ 0x30
 80057d2:	d818      	bhi.n	8005806 <UART_SetConfig+0x1a2>
 80057d4:	2b20      	cmp	r3, #32
 80057d6:	d00a      	beq.n	80057ee <UART_SetConfig+0x18a>
 80057d8:	2b20      	cmp	r3, #32
 80057da:	d814      	bhi.n	8005806 <UART_SetConfig+0x1a2>
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d002      	beq.n	80057e6 <UART_SetConfig+0x182>
 80057e0:	2b10      	cmp	r3, #16
 80057e2:	d008      	beq.n	80057f6 <UART_SetConfig+0x192>
 80057e4:	e00f      	b.n	8005806 <UART_SetConfig+0x1a2>
 80057e6:	2300      	movs	r3, #0
 80057e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057ec:	e0ad      	b.n	800594a <UART_SetConfig+0x2e6>
 80057ee:	2302      	movs	r3, #2
 80057f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057f4:	e0a9      	b.n	800594a <UART_SetConfig+0x2e6>
 80057f6:	2304      	movs	r3, #4
 80057f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057fc:	e0a5      	b.n	800594a <UART_SetConfig+0x2e6>
 80057fe:	2308      	movs	r3, #8
 8005800:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005804:	e0a1      	b.n	800594a <UART_SetConfig+0x2e6>
 8005806:	2310      	movs	r3, #16
 8005808:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800580c:	e09d      	b.n	800594a <UART_SetConfig+0x2e6>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a4a      	ldr	r2, [pc, #296]	@ (800593c <UART_SetConfig+0x2d8>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d125      	bne.n	8005864 <UART_SetConfig+0x200>
 8005818:	4b45      	ldr	r3, [pc, #276]	@ (8005930 <UART_SetConfig+0x2cc>)
 800581a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800581e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005822:	2bc0      	cmp	r3, #192	@ 0xc0
 8005824:	d016      	beq.n	8005854 <UART_SetConfig+0x1f0>
 8005826:	2bc0      	cmp	r3, #192	@ 0xc0
 8005828:	d818      	bhi.n	800585c <UART_SetConfig+0x1f8>
 800582a:	2b80      	cmp	r3, #128	@ 0x80
 800582c:	d00a      	beq.n	8005844 <UART_SetConfig+0x1e0>
 800582e:	2b80      	cmp	r3, #128	@ 0x80
 8005830:	d814      	bhi.n	800585c <UART_SetConfig+0x1f8>
 8005832:	2b00      	cmp	r3, #0
 8005834:	d002      	beq.n	800583c <UART_SetConfig+0x1d8>
 8005836:	2b40      	cmp	r3, #64	@ 0x40
 8005838:	d008      	beq.n	800584c <UART_SetConfig+0x1e8>
 800583a:	e00f      	b.n	800585c <UART_SetConfig+0x1f8>
 800583c:	2300      	movs	r3, #0
 800583e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005842:	e082      	b.n	800594a <UART_SetConfig+0x2e6>
 8005844:	2302      	movs	r3, #2
 8005846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800584a:	e07e      	b.n	800594a <UART_SetConfig+0x2e6>
 800584c:	2304      	movs	r3, #4
 800584e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005852:	e07a      	b.n	800594a <UART_SetConfig+0x2e6>
 8005854:	2308      	movs	r3, #8
 8005856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800585a:	e076      	b.n	800594a <UART_SetConfig+0x2e6>
 800585c:	2310      	movs	r3, #16
 800585e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005862:	e072      	b.n	800594a <UART_SetConfig+0x2e6>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a35      	ldr	r2, [pc, #212]	@ (8005940 <UART_SetConfig+0x2dc>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d12a      	bne.n	80058c4 <UART_SetConfig+0x260>
 800586e:	4b30      	ldr	r3, [pc, #192]	@ (8005930 <UART_SetConfig+0x2cc>)
 8005870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005874:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005878:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800587c:	d01a      	beq.n	80058b4 <UART_SetConfig+0x250>
 800587e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005882:	d81b      	bhi.n	80058bc <UART_SetConfig+0x258>
 8005884:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005888:	d00c      	beq.n	80058a4 <UART_SetConfig+0x240>
 800588a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800588e:	d815      	bhi.n	80058bc <UART_SetConfig+0x258>
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <UART_SetConfig+0x238>
 8005894:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005898:	d008      	beq.n	80058ac <UART_SetConfig+0x248>
 800589a:	e00f      	b.n	80058bc <UART_SetConfig+0x258>
 800589c:	2300      	movs	r3, #0
 800589e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058a2:	e052      	b.n	800594a <UART_SetConfig+0x2e6>
 80058a4:	2302      	movs	r3, #2
 80058a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058aa:	e04e      	b.n	800594a <UART_SetConfig+0x2e6>
 80058ac:	2304      	movs	r3, #4
 80058ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058b2:	e04a      	b.n	800594a <UART_SetConfig+0x2e6>
 80058b4:	2308      	movs	r3, #8
 80058b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058ba:	e046      	b.n	800594a <UART_SetConfig+0x2e6>
 80058bc:	2310      	movs	r3, #16
 80058be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058c2:	e042      	b.n	800594a <UART_SetConfig+0x2e6>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a17      	ldr	r2, [pc, #92]	@ (8005928 <UART_SetConfig+0x2c4>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d13a      	bne.n	8005944 <UART_SetConfig+0x2e0>
 80058ce:	4b18      	ldr	r3, [pc, #96]	@ (8005930 <UART_SetConfig+0x2cc>)
 80058d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80058d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058dc:	d01a      	beq.n	8005914 <UART_SetConfig+0x2b0>
 80058de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058e2:	d81b      	bhi.n	800591c <UART_SetConfig+0x2b8>
 80058e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058e8:	d00c      	beq.n	8005904 <UART_SetConfig+0x2a0>
 80058ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058ee:	d815      	bhi.n	800591c <UART_SetConfig+0x2b8>
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d003      	beq.n	80058fc <UART_SetConfig+0x298>
 80058f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058f8:	d008      	beq.n	800590c <UART_SetConfig+0x2a8>
 80058fa:	e00f      	b.n	800591c <UART_SetConfig+0x2b8>
 80058fc:	2300      	movs	r3, #0
 80058fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005902:	e022      	b.n	800594a <UART_SetConfig+0x2e6>
 8005904:	2302      	movs	r3, #2
 8005906:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800590a:	e01e      	b.n	800594a <UART_SetConfig+0x2e6>
 800590c:	2304      	movs	r3, #4
 800590e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005912:	e01a      	b.n	800594a <UART_SetConfig+0x2e6>
 8005914:	2308      	movs	r3, #8
 8005916:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800591a:	e016      	b.n	800594a <UART_SetConfig+0x2e6>
 800591c:	2310      	movs	r3, #16
 800591e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005922:	e012      	b.n	800594a <UART_SetConfig+0x2e6>
 8005924:	efff69f3 	.word	0xefff69f3
 8005928:	40008000 	.word	0x40008000
 800592c:	40013800 	.word	0x40013800
 8005930:	40021000 	.word	0x40021000
 8005934:	40004400 	.word	0x40004400
 8005938:	40004800 	.word	0x40004800
 800593c:	40004c00 	.word	0x40004c00
 8005940:	40005000 	.word	0x40005000
 8005944:	2310      	movs	r3, #16
 8005946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a9f      	ldr	r2, [pc, #636]	@ (8005bcc <UART_SetConfig+0x568>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d17a      	bne.n	8005a4a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005954:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005958:	2b08      	cmp	r3, #8
 800595a:	d824      	bhi.n	80059a6 <UART_SetConfig+0x342>
 800595c:	a201      	add	r2, pc, #4	@ (adr r2, 8005964 <UART_SetConfig+0x300>)
 800595e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005962:	bf00      	nop
 8005964:	08005989 	.word	0x08005989
 8005968:	080059a7 	.word	0x080059a7
 800596c:	08005991 	.word	0x08005991
 8005970:	080059a7 	.word	0x080059a7
 8005974:	08005997 	.word	0x08005997
 8005978:	080059a7 	.word	0x080059a7
 800597c:	080059a7 	.word	0x080059a7
 8005980:	080059a7 	.word	0x080059a7
 8005984:	0800599f 	.word	0x0800599f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005988:	f7fe fd26 	bl	80043d8 <HAL_RCC_GetPCLK1Freq>
 800598c:	61f8      	str	r0, [r7, #28]
        break;
 800598e:	e010      	b.n	80059b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005990:	4b8f      	ldr	r3, [pc, #572]	@ (8005bd0 <UART_SetConfig+0x56c>)
 8005992:	61fb      	str	r3, [r7, #28]
        break;
 8005994:	e00d      	b.n	80059b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005996:	f7fe fc87 	bl	80042a8 <HAL_RCC_GetSysClockFreq>
 800599a:	61f8      	str	r0, [r7, #28]
        break;
 800599c:	e009      	b.n	80059b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800599e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059a2:	61fb      	str	r3, [r7, #28]
        break;
 80059a4:	e005      	b.n	80059b2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80059b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 80fb 	beq.w	8005bb0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	4613      	mov	r3, r2
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	4413      	add	r3, r2
 80059c4:	69fa      	ldr	r2, [r7, #28]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d305      	bcc.n	80059d6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80059d0:	69fa      	ldr	r2, [r7, #28]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d903      	bls.n	80059de <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80059dc:	e0e8      	b.n	8005bb0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	2200      	movs	r2, #0
 80059e2:	461c      	mov	r4, r3
 80059e4:	4615      	mov	r5, r2
 80059e6:	f04f 0200 	mov.w	r2, #0
 80059ea:	f04f 0300 	mov.w	r3, #0
 80059ee:	022b      	lsls	r3, r5, #8
 80059f0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80059f4:	0222      	lsls	r2, r4, #8
 80059f6:	68f9      	ldr	r1, [r7, #12]
 80059f8:	6849      	ldr	r1, [r1, #4]
 80059fa:	0849      	lsrs	r1, r1, #1
 80059fc:	2000      	movs	r0, #0
 80059fe:	4688      	mov	r8, r1
 8005a00:	4681      	mov	r9, r0
 8005a02:	eb12 0a08 	adds.w	sl, r2, r8
 8005a06:	eb43 0b09 	adc.w	fp, r3, r9
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	603b      	str	r3, [r7, #0]
 8005a12:	607a      	str	r2, [r7, #4]
 8005a14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a18:	4650      	mov	r0, sl
 8005a1a:	4659      	mov	r1, fp
 8005a1c:	f7fa ff5e 	bl	80008dc <__aeabi_uldivmod>
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	4613      	mov	r3, r2
 8005a26:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a2e:	d308      	bcc.n	8005a42 <UART_SetConfig+0x3de>
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a36:	d204      	bcs.n	8005a42 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	60da      	str	r2, [r3, #12]
 8005a40:	e0b6      	b.n	8005bb0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005a48:	e0b2      	b.n	8005bb0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a52:	d15e      	bne.n	8005b12 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005a54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d828      	bhi.n	8005aae <UART_SetConfig+0x44a>
 8005a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a64 <UART_SetConfig+0x400>)
 8005a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a62:	bf00      	nop
 8005a64:	08005a89 	.word	0x08005a89
 8005a68:	08005a91 	.word	0x08005a91
 8005a6c:	08005a99 	.word	0x08005a99
 8005a70:	08005aaf 	.word	0x08005aaf
 8005a74:	08005a9f 	.word	0x08005a9f
 8005a78:	08005aaf 	.word	0x08005aaf
 8005a7c:	08005aaf 	.word	0x08005aaf
 8005a80:	08005aaf 	.word	0x08005aaf
 8005a84:	08005aa7 	.word	0x08005aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a88:	f7fe fca6 	bl	80043d8 <HAL_RCC_GetPCLK1Freq>
 8005a8c:	61f8      	str	r0, [r7, #28]
        break;
 8005a8e:	e014      	b.n	8005aba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a90:	f7fe fcb8 	bl	8004404 <HAL_RCC_GetPCLK2Freq>
 8005a94:	61f8      	str	r0, [r7, #28]
        break;
 8005a96:	e010      	b.n	8005aba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a98:	4b4d      	ldr	r3, [pc, #308]	@ (8005bd0 <UART_SetConfig+0x56c>)
 8005a9a:	61fb      	str	r3, [r7, #28]
        break;
 8005a9c:	e00d      	b.n	8005aba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a9e:	f7fe fc03 	bl	80042a8 <HAL_RCC_GetSysClockFreq>
 8005aa2:	61f8      	str	r0, [r7, #28]
        break;
 8005aa4:	e009      	b.n	8005aba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005aaa:	61fb      	str	r3, [r7, #28]
        break;
 8005aac:	e005      	b.n	8005aba <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ab8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d077      	beq.n	8005bb0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	005a      	lsls	r2, r3, #1
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	085b      	lsrs	r3, r3, #1
 8005aca:	441a      	add	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	2b0f      	cmp	r3, #15
 8005ada:	d916      	bls.n	8005b0a <UART_SetConfig+0x4a6>
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ae2:	d212      	bcs.n	8005b0a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	f023 030f 	bic.w	r3, r3, #15
 8005aec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	085b      	lsrs	r3, r3, #1
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	8afb      	ldrh	r3, [r7, #22]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	8afa      	ldrh	r2, [r7, #22]
 8005b06:	60da      	str	r2, [r3, #12]
 8005b08:	e052      	b.n	8005bb0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005b10:	e04e      	b.n	8005bb0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b12:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b16:	2b08      	cmp	r3, #8
 8005b18:	d827      	bhi.n	8005b6a <UART_SetConfig+0x506>
 8005b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b20 <UART_SetConfig+0x4bc>)
 8005b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b20:	08005b45 	.word	0x08005b45
 8005b24:	08005b4d 	.word	0x08005b4d
 8005b28:	08005b55 	.word	0x08005b55
 8005b2c:	08005b6b 	.word	0x08005b6b
 8005b30:	08005b5b 	.word	0x08005b5b
 8005b34:	08005b6b 	.word	0x08005b6b
 8005b38:	08005b6b 	.word	0x08005b6b
 8005b3c:	08005b6b 	.word	0x08005b6b
 8005b40:	08005b63 	.word	0x08005b63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b44:	f7fe fc48 	bl	80043d8 <HAL_RCC_GetPCLK1Freq>
 8005b48:	61f8      	str	r0, [r7, #28]
        break;
 8005b4a:	e014      	b.n	8005b76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b4c:	f7fe fc5a 	bl	8004404 <HAL_RCC_GetPCLK2Freq>
 8005b50:	61f8      	str	r0, [r7, #28]
        break;
 8005b52:	e010      	b.n	8005b76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b54:	4b1e      	ldr	r3, [pc, #120]	@ (8005bd0 <UART_SetConfig+0x56c>)
 8005b56:	61fb      	str	r3, [r7, #28]
        break;
 8005b58:	e00d      	b.n	8005b76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b5a:	f7fe fba5 	bl	80042a8 <HAL_RCC_GetSysClockFreq>
 8005b5e:	61f8      	str	r0, [r7, #28]
        break;
 8005b60:	e009      	b.n	8005b76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b66:	61fb      	str	r3, [r7, #28]
        break;
 8005b68:	e005      	b.n	8005b76 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005b74:	bf00      	nop
    }

    if (pclk != 0U)
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d019      	beq.n	8005bb0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	085a      	lsrs	r2, r3, #1
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	441a      	add	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b8e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	2b0f      	cmp	r3, #15
 8005b94:	d909      	bls.n	8005baa <UART_SetConfig+0x546>
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b9c:	d205      	bcs.n	8005baa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	60da      	str	r2, [r3, #12]
 8005ba8:	e002      	b.n	8005bb0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005bbc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3728      	adds	r7, #40	@ 0x28
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bca:	bf00      	nop
 8005bcc:	40008000 	.word	0x40008000
 8005bd0:	00f42400 	.word	0x00f42400

08005bd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be0:	f003 0308 	and.w	r3, r3, #8
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00a      	beq.n	8005bfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00a      	beq.n	8005c20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00a      	beq.n	8005c42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c46:	f003 0304 	and.w	r3, r3, #4
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00a      	beq.n	8005c64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c68:	f003 0310 	and.w	r3, r3, #16
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00a      	beq.n	8005c86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8a:	f003 0320 	and.w	r3, r3, #32
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00a      	beq.n	8005ca8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d01a      	beq.n	8005cea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cd2:	d10a      	bne.n	8005cea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00a      	beq.n	8005d0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	605a      	str	r2, [r3, #4]
  }
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b098      	sub	sp, #96	@ 0x60
 8005d1c:	af02      	add	r7, sp, #8
 8005d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d28:	f7fb fc28 	bl	800157c <HAL_GetTick>
 8005d2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0308 	and.w	r3, r3, #8
 8005d38:	2b08      	cmp	r3, #8
 8005d3a:	d12e      	bne.n	8005d9a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d44:	2200      	movs	r2, #0
 8005d46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f88c 	bl	8005e68 <UART_WaitOnFlagUntilTimeout>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d021      	beq.n	8005d9a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
 8005d62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	461a      	mov	r2, r3
 8005d72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d74:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d76:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e6      	bne.n	8005d56 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e062      	b.n	8005e60 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	2b04      	cmp	r3, #4
 8005da6:	d149      	bne.n	8005e3c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005da8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005db0:	2200      	movs	r2, #0
 8005db2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f856 	bl	8005e68 <UART_WaitOnFlagUntilTimeout>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d03c      	beq.n	8005e3c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dca:	e853 3f00 	ldrex	r3, [r3]
 8005dce:	623b      	str	r3, [r7, #32]
   return(result);
 8005dd0:	6a3b      	ldr	r3, [r7, #32]
 8005dd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005de0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005de2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005de6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005de8:	e841 2300 	strex	r3, r2, [r1]
 8005dec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1e6      	bne.n	8005dc2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	3308      	adds	r3, #8
 8005dfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	e853 3f00 	ldrex	r3, [r3]
 8005e02:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0301 	bic.w	r3, r3, #1
 8005e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	3308      	adds	r3, #8
 8005e12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e14:	61fa      	str	r2, [r7, #28]
 8005e16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	69b9      	ldr	r1, [r7, #24]
 8005e1a:	69fa      	ldr	r2, [r7, #28]
 8005e1c:	e841 2300 	strex	r3, r2, [r1]
 8005e20:	617b      	str	r3, [r7, #20]
   return(result);
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1e5      	bne.n	8005df4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e011      	b.n	8005e60 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2220      	movs	r2, #32
 8005e40:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2220      	movs	r2, #32
 8005e46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3758      	adds	r7, #88	@ 0x58
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	603b      	str	r3, [r7, #0]
 8005e74:	4613      	mov	r3, r2
 8005e76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e78:	e04f      	b.n	8005f1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e80:	d04b      	beq.n	8005f1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e82:	f7fb fb7b 	bl	800157c <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d302      	bcc.n	8005e98 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e04e      	b.n	8005f3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d037      	beq.n	8005f1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2b80      	cmp	r3, #128	@ 0x80
 8005eae:	d034      	beq.n	8005f1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2b40      	cmp	r3, #64	@ 0x40
 8005eb4:	d031      	beq.n	8005f1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	69db      	ldr	r3, [r3, #28]
 8005ebc:	f003 0308 	and.w	r3, r3, #8
 8005ec0:	2b08      	cmp	r3, #8
 8005ec2:	d110      	bne.n	8005ee6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2208      	movs	r2, #8
 8005eca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 f838 	bl	8005f42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2208      	movs	r2, #8
 8005ed6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e029      	b.n	8005f3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ef0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ef4:	d111      	bne.n	8005f1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005efe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 f81e 	bl	8005f42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e00f      	b.n	8005f3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	69da      	ldr	r2, [r3, #28]
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	4013      	ands	r3, r2
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	bf0c      	ite	eq
 8005f2a:	2301      	moveq	r3, #1
 8005f2c:	2300      	movne	r3, #0
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	461a      	mov	r2, r3
 8005f32:	79fb      	ldrb	r3, [r7, #7]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d0a0      	beq.n	8005e7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b095      	sub	sp, #84	@ 0x54
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f52:	e853 3f00 	ldrex	r3, [r3]
 8005f56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	461a      	mov	r2, r3
 8005f66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f68:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f6a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f70:	e841 2300 	strex	r3, r2, [r1]
 8005f74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1e6      	bne.n	8005f4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3308      	adds	r3, #8
 8005f82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	e853 3f00 	ldrex	r3, [r3]
 8005f8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	f023 0301 	bic.w	r3, r3, #1
 8005f92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	3308      	adds	r3, #8
 8005f9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fa4:	e841 2300 	strex	r3, r2, [r1]
 8005fa8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1e5      	bne.n	8005f7c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d118      	bne.n	8005fea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	e853 3f00 	ldrex	r3, [r3]
 8005fc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	f023 0310 	bic.w	r3, r3, #16
 8005fcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fd6:	61bb      	str	r3, [r7, #24]
 8005fd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fda:	6979      	ldr	r1, [r7, #20]
 8005fdc:	69ba      	ldr	r2, [r7, #24]
 8005fde:	e841 2300 	strex	r3, r2, [r1]
 8005fe2:	613b      	str	r3, [r7, #16]
   return(result);
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1e6      	bne.n	8005fb8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2220      	movs	r2, #32
 8005fee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005ffe:	bf00      	nop
 8006000:	3754      	adds	r7, #84	@ 0x54
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b084      	sub	sp, #16
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006016:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f7ff fb05 	bl	8005638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800602e:	bf00      	nop
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b088      	sub	sp, #32
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	e853 3f00 	ldrex	r3, [r3]
 800604a:	60bb      	str	r3, [r7, #8]
   return(result);
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006052:	61fb      	str	r3, [r7, #28]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	461a      	mov	r2, r3
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	61bb      	str	r3, [r7, #24]
 800605e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006060:	6979      	ldr	r1, [r7, #20]
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	e841 2300 	strex	r3, r2, [r1]
 8006068:	613b      	str	r3, [r7, #16]
   return(result);
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1e6      	bne.n	800603e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2220      	movs	r2, #32
 8006074:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7ff fad1 	bl	8005624 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006082:	bf00      	nop
 8006084:	3720      	adds	r7, #32
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800608a:	b480      	push	{r7}
 800608c:	b083      	sub	sp, #12
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
	...

080060a0 <siprintf>:
 80060a0:	b40e      	push	{r1, r2, r3}
 80060a2:	b500      	push	{lr}
 80060a4:	b09c      	sub	sp, #112	@ 0x70
 80060a6:	ab1d      	add	r3, sp, #116	@ 0x74
 80060a8:	9002      	str	r0, [sp, #8]
 80060aa:	9006      	str	r0, [sp, #24]
 80060ac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80060b0:	4809      	ldr	r0, [pc, #36]	@ (80060d8 <siprintf+0x38>)
 80060b2:	9107      	str	r1, [sp, #28]
 80060b4:	9104      	str	r1, [sp, #16]
 80060b6:	4909      	ldr	r1, [pc, #36]	@ (80060dc <siprintf+0x3c>)
 80060b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80060bc:	9105      	str	r1, [sp, #20]
 80060be:	6800      	ldr	r0, [r0, #0]
 80060c0:	9301      	str	r3, [sp, #4]
 80060c2:	a902      	add	r1, sp, #8
 80060c4:	f000 f994 	bl	80063f0 <_svfiprintf_r>
 80060c8:	9b02      	ldr	r3, [sp, #8]
 80060ca:	2200      	movs	r2, #0
 80060cc:	701a      	strb	r2, [r3, #0]
 80060ce:	b01c      	add	sp, #112	@ 0x70
 80060d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80060d4:	b003      	add	sp, #12
 80060d6:	4770      	bx	lr
 80060d8:	2000000c 	.word	0x2000000c
 80060dc:	ffff0208 	.word	0xffff0208

080060e0 <memset>:
 80060e0:	4402      	add	r2, r0
 80060e2:	4603      	mov	r3, r0
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d100      	bne.n	80060ea <memset+0xa>
 80060e8:	4770      	bx	lr
 80060ea:	f803 1b01 	strb.w	r1, [r3], #1
 80060ee:	e7f9      	b.n	80060e4 <memset+0x4>

080060f0 <__errno>:
 80060f0:	4b01      	ldr	r3, [pc, #4]	@ (80060f8 <__errno+0x8>)
 80060f2:	6818      	ldr	r0, [r3, #0]
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	2000000c 	.word	0x2000000c

080060fc <__libc_init_array>:
 80060fc:	b570      	push	{r4, r5, r6, lr}
 80060fe:	4d0d      	ldr	r5, [pc, #52]	@ (8006134 <__libc_init_array+0x38>)
 8006100:	4c0d      	ldr	r4, [pc, #52]	@ (8006138 <__libc_init_array+0x3c>)
 8006102:	1b64      	subs	r4, r4, r5
 8006104:	10a4      	asrs	r4, r4, #2
 8006106:	2600      	movs	r6, #0
 8006108:	42a6      	cmp	r6, r4
 800610a:	d109      	bne.n	8006120 <__libc_init_array+0x24>
 800610c:	4d0b      	ldr	r5, [pc, #44]	@ (800613c <__libc_init_array+0x40>)
 800610e:	4c0c      	ldr	r4, [pc, #48]	@ (8006140 <__libc_init_array+0x44>)
 8006110:	f000 fc66 	bl	80069e0 <_init>
 8006114:	1b64      	subs	r4, r4, r5
 8006116:	10a4      	asrs	r4, r4, #2
 8006118:	2600      	movs	r6, #0
 800611a:	42a6      	cmp	r6, r4
 800611c:	d105      	bne.n	800612a <__libc_init_array+0x2e>
 800611e:	bd70      	pop	{r4, r5, r6, pc}
 8006120:	f855 3b04 	ldr.w	r3, [r5], #4
 8006124:	4798      	blx	r3
 8006126:	3601      	adds	r6, #1
 8006128:	e7ee      	b.n	8006108 <__libc_init_array+0xc>
 800612a:	f855 3b04 	ldr.w	r3, [r5], #4
 800612e:	4798      	blx	r3
 8006130:	3601      	adds	r6, #1
 8006132:	e7f2      	b.n	800611a <__libc_init_array+0x1e>
 8006134:	08006aa0 	.word	0x08006aa0
 8006138:	08006aa0 	.word	0x08006aa0
 800613c:	08006aa0 	.word	0x08006aa0
 8006140:	08006aa4 	.word	0x08006aa4

08006144 <__retarget_lock_acquire_recursive>:
 8006144:	4770      	bx	lr

08006146 <__retarget_lock_release_recursive>:
 8006146:	4770      	bx	lr

08006148 <_free_r>:
 8006148:	b538      	push	{r3, r4, r5, lr}
 800614a:	4605      	mov	r5, r0
 800614c:	2900      	cmp	r1, #0
 800614e:	d041      	beq.n	80061d4 <_free_r+0x8c>
 8006150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006154:	1f0c      	subs	r4, r1, #4
 8006156:	2b00      	cmp	r3, #0
 8006158:	bfb8      	it	lt
 800615a:	18e4      	addlt	r4, r4, r3
 800615c:	f000 f8e0 	bl	8006320 <__malloc_lock>
 8006160:	4a1d      	ldr	r2, [pc, #116]	@ (80061d8 <_free_r+0x90>)
 8006162:	6813      	ldr	r3, [r2, #0]
 8006164:	b933      	cbnz	r3, 8006174 <_free_r+0x2c>
 8006166:	6063      	str	r3, [r4, #4]
 8006168:	6014      	str	r4, [r2, #0]
 800616a:	4628      	mov	r0, r5
 800616c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006170:	f000 b8dc 	b.w	800632c <__malloc_unlock>
 8006174:	42a3      	cmp	r3, r4
 8006176:	d908      	bls.n	800618a <_free_r+0x42>
 8006178:	6820      	ldr	r0, [r4, #0]
 800617a:	1821      	adds	r1, r4, r0
 800617c:	428b      	cmp	r3, r1
 800617e:	bf01      	itttt	eq
 8006180:	6819      	ldreq	r1, [r3, #0]
 8006182:	685b      	ldreq	r3, [r3, #4]
 8006184:	1809      	addeq	r1, r1, r0
 8006186:	6021      	streq	r1, [r4, #0]
 8006188:	e7ed      	b.n	8006166 <_free_r+0x1e>
 800618a:	461a      	mov	r2, r3
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	b10b      	cbz	r3, 8006194 <_free_r+0x4c>
 8006190:	42a3      	cmp	r3, r4
 8006192:	d9fa      	bls.n	800618a <_free_r+0x42>
 8006194:	6811      	ldr	r1, [r2, #0]
 8006196:	1850      	adds	r0, r2, r1
 8006198:	42a0      	cmp	r0, r4
 800619a:	d10b      	bne.n	80061b4 <_free_r+0x6c>
 800619c:	6820      	ldr	r0, [r4, #0]
 800619e:	4401      	add	r1, r0
 80061a0:	1850      	adds	r0, r2, r1
 80061a2:	4283      	cmp	r3, r0
 80061a4:	6011      	str	r1, [r2, #0]
 80061a6:	d1e0      	bne.n	800616a <_free_r+0x22>
 80061a8:	6818      	ldr	r0, [r3, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	6053      	str	r3, [r2, #4]
 80061ae:	4408      	add	r0, r1
 80061b0:	6010      	str	r0, [r2, #0]
 80061b2:	e7da      	b.n	800616a <_free_r+0x22>
 80061b4:	d902      	bls.n	80061bc <_free_r+0x74>
 80061b6:	230c      	movs	r3, #12
 80061b8:	602b      	str	r3, [r5, #0]
 80061ba:	e7d6      	b.n	800616a <_free_r+0x22>
 80061bc:	6820      	ldr	r0, [r4, #0]
 80061be:	1821      	adds	r1, r4, r0
 80061c0:	428b      	cmp	r3, r1
 80061c2:	bf04      	itt	eq
 80061c4:	6819      	ldreq	r1, [r3, #0]
 80061c6:	685b      	ldreq	r3, [r3, #4]
 80061c8:	6063      	str	r3, [r4, #4]
 80061ca:	bf04      	itt	eq
 80061cc:	1809      	addeq	r1, r1, r0
 80061ce:	6021      	streq	r1, [r4, #0]
 80061d0:	6054      	str	r4, [r2, #4]
 80061d2:	e7ca      	b.n	800616a <_free_r+0x22>
 80061d4:	bd38      	pop	{r3, r4, r5, pc}
 80061d6:	bf00      	nop
 80061d8:	20000330 	.word	0x20000330

080061dc <sbrk_aligned>:
 80061dc:	b570      	push	{r4, r5, r6, lr}
 80061de:	4e0f      	ldr	r6, [pc, #60]	@ (800621c <sbrk_aligned+0x40>)
 80061e0:	460c      	mov	r4, r1
 80061e2:	6831      	ldr	r1, [r6, #0]
 80061e4:	4605      	mov	r5, r0
 80061e6:	b911      	cbnz	r1, 80061ee <sbrk_aligned+0x12>
 80061e8:	f000 fba6 	bl	8006938 <_sbrk_r>
 80061ec:	6030      	str	r0, [r6, #0]
 80061ee:	4621      	mov	r1, r4
 80061f0:	4628      	mov	r0, r5
 80061f2:	f000 fba1 	bl	8006938 <_sbrk_r>
 80061f6:	1c43      	adds	r3, r0, #1
 80061f8:	d103      	bne.n	8006202 <sbrk_aligned+0x26>
 80061fa:	f04f 34ff 	mov.w	r4, #4294967295
 80061fe:	4620      	mov	r0, r4
 8006200:	bd70      	pop	{r4, r5, r6, pc}
 8006202:	1cc4      	adds	r4, r0, #3
 8006204:	f024 0403 	bic.w	r4, r4, #3
 8006208:	42a0      	cmp	r0, r4
 800620a:	d0f8      	beq.n	80061fe <sbrk_aligned+0x22>
 800620c:	1a21      	subs	r1, r4, r0
 800620e:	4628      	mov	r0, r5
 8006210:	f000 fb92 	bl	8006938 <_sbrk_r>
 8006214:	3001      	adds	r0, #1
 8006216:	d1f2      	bne.n	80061fe <sbrk_aligned+0x22>
 8006218:	e7ef      	b.n	80061fa <sbrk_aligned+0x1e>
 800621a:	bf00      	nop
 800621c:	2000032c 	.word	0x2000032c

08006220 <_malloc_r>:
 8006220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006224:	1ccd      	adds	r5, r1, #3
 8006226:	f025 0503 	bic.w	r5, r5, #3
 800622a:	3508      	adds	r5, #8
 800622c:	2d0c      	cmp	r5, #12
 800622e:	bf38      	it	cc
 8006230:	250c      	movcc	r5, #12
 8006232:	2d00      	cmp	r5, #0
 8006234:	4606      	mov	r6, r0
 8006236:	db01      	blt.n	800623c <_malloc_r+0x1c>
 8006238:	42a9      	cmp	r1, r5
 800623a:	d904      	bls.n	8006246 <_malloc_r+0x26>
 800623c:	230c      	movs	r3, #12
 800623e:	6033      	str	r3, [r6, #0]
 8006240:	2000      	movs	r0, #0
 8006242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006246:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800631c <_malloc_r+0xfc>
 800624a:	f000 f869 	bl	8006320 <__malloc_lock>
 800624e:	f8d8 3000 	ldr.w	r3, [r8]
 8006252:	461c      	mov	r4, r3
 8006254:	bb44      	cbnz	r4, 80062a8 <_malloc_r+0x88>
 8006256:	4629      	mov	r1, r5
 8006258:	4630      	mov	r0, r6
 800625a:	f7ff ffbf 	bl	80061dc <sbrk_aligned>
 800625e:	1c43      	adds	r3, r0, #1
 8006260:	4604      	mov	r4, r0
 8006262:	d158      	bne.n	8006316 <_malloc_r+0xf6>
 8006264:	f8d8 4000 	ldr.w	r4, [r8]
 8006268:	4627      	mov	r7, r4
 800626a:	2f00      	cmp	r7, #0
 800626c:	d143      	bne.n	80062f6 <_malloc_r+0xd6>
 800626e:	2c00      	cmp	r4, #0
 8006270:	d04b      	beq.n	800630a <_malloc_r+0xea>
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	4639      	mov	r1, r7
 8006276:	4630      	mov	r0, r6
 8006278:	eb04 0903 	add.w	r9, r4, r3
 800627c:	f000 fb5c 	bl	8006938 <_sbrk_r>
 8006280:	4581      	cmp	r9, r0
 8006282:	d142      	bne.n	800630a <_malloc_r+0xea>
 8006284:	6821      	ldr	r1, [r4, #0]
 8006286:	1a6d      	subs	r5, r5, r1
 8006288:	4629      	mov	r1, r5
 800628a:	4630      	mov	r0, r6
 800628c:	f7ff ffa6 	bl	80061dc <sbrk_aligned>
 8006290:	3001      	adds	r0, #1
 8006292:	d03a      	beq.n	800630a <_malloc_r+0xea>
 8006294:	6823      	ldr	r3, [r4, #0]
 8006296:	442b      	add	r3, r5
 8006298:	6023      	str	r3, [r4, #0]
 800629a:	f8d8 3000 	ldr.w	r3, [r8]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	bb62      	cbnz	r2, 80062fc <_malloc_r+0xdc>
 80062a2:	f8c8 7000 	str.w	r7, [r8]
 80062a6:	e00f      	b.n	80062c8 <_malloc_r+0xa8>
 80062a8:	6822      	ldr	r2, [r4, #0]
 80062aa:	1b52      	subs	r2, r2, r5
 80062ac:	d420      	bmi.n	80062f0 <_malloc_r+0xd0>
 80062ae:	2a0b      	cmp	r2, #11
 80062b0:	d917      	bls.n	80062e2 <_malloc_r+0xc2>
 80062b2:	1961      	adds	r1, r4, r5
 80062b4:	42a3      	cmp	r3, r4
 80062b6:	6025      	str	r5, [r4, #0]
 80062b8:	bf18      	it	ne
 80062ba:	6059      	strne	r1, [r3, #4]
 80062bc:	6863      	ldr	r3, [r4, #4]
 80062be:	bf08      	it	eq
 80062c0:	f8c8 1000 	streq.w	r1, [r8]
 80062c4:	5162      	str	r2, [r4, r5]
 80062c6:	604b      	str	r3, [r1, #4]
 80062c8:	4630      	mov	r0, r6
 80062ca:	f000 f82f 	bl	800632c <__malloc_unlock>
 80062ce:	f104 000b 	add.w	r0, r4, #11
 80062d2:	1d23      	adds	r3, r4, #4
 80062d4:	f020 0007 	bic.w	r0, r0, #7
 80062d8:	1ac2      	subs	r2, r0, r3
 80062da:	bf1c      	itt	ne
 80062dc:	1a1b      	subne	r3, r3, r0
 80062de:	50a3      	strne	r3, [r4, r2]
 80062e0:	e7af      	b.n	8006242 <_malloc_r+0x22>
 80062e2:	6862      	ldr	r2, [r4, #4]
 80062e4:	42a3      	cmp	r3, r4
 80062e6:	bf0c      	ite	eq
 80062e8:	f8c8 2000 	streq.w	r2, [r8]
 80062ec:	605a      	strne	r2, [r3, #4]
 80062ee:	e7eb      	b.n	80062c8 <_malloc_r+0xa8>
 80062f0:	4623      	mov	r3, r4
 80062f2:	6864      	ldr	r4, [r4, #4]
 80062f4:	e7ae      	b.n	8006254 <_malloc_r+0x34>
 80062f6:	463c      	mov	r4, r7
 80062f8:	687f      	ldr	r7, [r7, #4]
 80062fa:	e7b6      	b.n	800626a <_malloc_r+0x4a>
 80062fc:	461a      	mov	r2, r3
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	42a3      	cmp	r3, r4
 8006302:	d1fb      	bne.n	80062fc <_malloc_r+0xdc>
 8006304:	2300      	movs	r3, #0
 8006306:	6053      	str	r3, [r2, #4]
 8006308:	e7de      	b.n	80062c8 <_malloc_r+0xa8>
 800630a:	230c      	movs	r3, #12
 800630c:	6033      	str	r3, [r6, #0]
 800630e:	4630      	mov	r0, r6
 8006310:	f000 f80c 	bl	800632c <__malloc_unlock>
 8006314:	e794      	b.n	8006240 <_malloc_r+0x20>
 8006316:	6005      	str	r5, [r0, #0]
 8006318:	e7d6      	b.n	80062c8 <_malloc_r+0xa8>
 800631a:	bf00      	nop
 800631c:	20000330 	.word	0x20000330

08006320 <__malloc_lock>:
 8006320:	4801      	ldr	r0, [pc, #4]	@ (8006328 <__malloc_lock+0x8>)
 8006322:	f7ff bf0f 	b.w	8006144 <__retarget_lock_acquire_recursive>
 8006326:	bf00      	nop
 8006328:	20000328 	.word	0x20000328

0800632c <__malloc_unlock>:
 800632c:	4801      	ldr	r0, [pc, #4]	@ (8006334 <__malloc_unlock+0x8>)
 800632e:	f7ff bf0a 	b.w	8006146 <__retarget_lock_release_recursive>
 8006332:	bf00      	nop
 8006334:	20000328 	.word	0x20000328

08006338 <__ssputs_r>:
 8006338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800633c:	688e      	ldr	r6, [r1, #8]
 800633e:	461f      	mov	r7, r3
 8006340:	42be      	cmp	r6, r7
 8006342:	680b      	ldr	r3, [r1, #0]
 8006344:	4682      	mov	sl, r0
 8006346:	460c      	mov	r4, r1
 8006348:	4690      	mov	r8, r2
 800634a:	d82d      	bhi.n	80063a8 <__ssputs_r+0x70>
 800634c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006350:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006354:	d026      	beq.n	80063a4 <__ssputs_r+0x6c>
 8006356:	6965      	ldr	r5, [r4, #20]
 8006358:	6909      	ldr	r1, [r1, #16]
 800635a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800635e:	eba3 0901 	sub.w	r9, r3, r1
 8006362:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006366:	1c7b      	adds	r3, r7, #1
 8006368:	444b      	add	r3, r9
 800636a:	106d      	asrs	r5, r5, #1
 800636c:	429d      	cmp	r5, r3
 800636e:	bf38      	it	cc
 8006370:	461d      	movcc	r5, r3
 8006372:	0553      	lsls	r3, r2, #21
 8006374:	d527      	bpl.n	80063c6 <__ssputs_r+0x8e>
 8006376:	4629      	mov	r1, r5
 8006378:	f7ff ff52 	bl	8006220 <_malloc_r>
 800637c:	4606      	mov	r6, r0
 800637e:	b360      	cbz	r0, 80063da <__ssputs_r+0xa2>
 8006380:	6921      	ldr	r1, [r4, #16]
 8006382:	464a      	mov	r2, r9
 8006384:	f000 fae8 	bl	8006958 <memcpy>
 8006388:	89a3      	ldrh	r3, [r4, #12]
 800638a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800638e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006392:	81a3      	strh	r3, [r4, #12]
 8006394:	6126      	str	r6, [r4, #16]
 8006396:	6165      	str	r5, [r4, #20]
 8006398:	444e      	add	r6, r9
 800639a:	eba5 0509 	sub.w	r5, r5, r9
 800639e:	6026      	str	r6, [r4, #0]
 80063a0:	60a5      	str	r5, [r4, #8]
 80063a2:	463e      	mov	r6, r7
 80063a4:	42be      	cmp	r6, r7
 80063a6:	d900      	bls.n	80063aa <__ssputs_r+0x72>
 80063a8:	463e      	mov	r6, r7
 80063aa:	6820      	ldr	r0, [r4, #0]
 80063ac:	4632      	mov	r2, r6
 80063ae:	4641      	mov	r1, r8
 80063b0:	f000 faa8 	bl	8006904 <memmove>
 80063b4:	68a3      	ldr	r3, [r4, #8]
 80063b6:	1b9b      	subs	r3, r3, r6
 80063b8:	60a3      	str	r3, [r4, #8]
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	4433      	add	r3, r6
 80063be:	6023      	str	r3, [r4, #0]
 80063c0:	2000      	movs	r0, #0
 80063c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063c6:	462a      	mov	r2, r5
 80063c8:	f000 fad4 	bl	8006974 <_realloc_r>
 80063cc:	4606      	mov	r6, r0
 80063ce:	2800      	cmp	r0, #0
 80063d0:	d1e0      	bne.n	8006394 <__ssputs_r+0x5c>
 80063d2:	6921      	ldr	r1, [r4, #16]
 80063d4:	4650      	mov	r0, sl
 80063d6:	f7ff feb7 	bl	8006148 <_free_r>
 80063da:	230c      	movs	r3, #12
 80063dc:	f8ca 3000 	str.w	r3, [sl]
 80063e0:	89a3      	ldrh	r3, [r4, #12]
 80063e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063e6:	81a3      	strh	r3, [r4, #12]
 80063e8:	f04f 30ff 	mov.w	r0, #4294967295
 80063ec:	e7e9      	b.n	80063c2 <__ssputs_r+0x8a>
	...

080063f0 <_svfiprintf_r>:
 80063f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f4:	4698      	mov	r8, r3
 80063f6:	898b      	ldrh	r3, [r1, #12]
 80063f8:	061b      	lsls	r3, r3, #24
 80063fa:	b09d      	sub	sp, #116	@ 0x74
 80063fc:	4607      	mov	r7, r0
 80063fe:	460d      	mov	r5, r1
 8006400:	4614      	mov	r4, r2
 8006402:	d510      	bpl.n	8006426 <_svfiprintf_r+0x36>
 8006404:	690b      	ldr	r3, [r1, #16]
 8006406:	b973      	cbnz	r3, 8006426 <_svfiprintf_r+0x36>
 8006408:	2140      	movs	r1, #64	@ 0x40
 800640a:	f7ff ff09 	bl	8006220 <_malloc_r>
 800640e:	6028      	str	r0, [r5, #0]
 8006410:	6128      	str	r0, [r5, #16]
 8006412:	b930      	cbnz	r0, 8006422 <_svfiprintf_r+0x32>
 8006414:	230c      	movs	r3, #12
 8006416:	603b      	str	r3, [r7, #0]
 8006418:	f04f 30ff 	mov.w	r0, #4294967295
 800641c:	b01d      	add	sp, #116	@ 0x74
 800641e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006422:	2340      	movs	r3, #64	@ 0x40
 8006424:	616b      	str	r3, [r5, #20]
 8006426:	2300      	movs	r3, #0
 8006428:	9309      	str	r3, [sp, #36]	@ 0x24
 800642a:	2320      	movs	r3, #32
 800642c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006430:	f8cd 800c 	str.w	r8, [sp, #12]
 8006434:	2330      	movs	r3, #48	@ 0x30
 8006436:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80065d4 <_svfiprintf_r+0x1e4>
 800643a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800643e:	f04f 0901 	mov.w	r9, #1
 8006442:	4623      	mov	r3, r4
 8006444:	469a      	mov	sl, r3
 8006446:	f813 2b01 	ldrb.w	r2, [r3], #1
 800644a:	b10a      	cbz	r2, 8006450 <_svfiprintf_r+0x60>
 800644c:	2a25      	cmp	r2, #37	@ 0x25
 800644e:	d1f9      	bne.n	8006444 <_svfiprintf_r+0x54>
 8006450:	ebba 0b04 	subs.w	fp, sl, r4
 8006454:	d00b      	beq.n	800646e <_svfiprintf_r+0x7e>
 8006456:	465b      	mov	r3, fp
 8006458:	4622      	mov	r2, r4
 800645a:	4629      	mov	r1, r5
 800645c:	4638      	mov	r0, r7
 800645e:	f7ff ff6b 	bl	8006338 <__ssputs_r>
 8006462:	3001      	adds	r0, #1
 8006464:	f000 80a7 	beq.w	80065b6 <_svfiprintf_r+0x1c6>
 8006468:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800646a:	445a      	add	r2, fp
 800646c:	9209      	str	r2, [sp, #36]	@ 0x24
 800646e:	f89a 3000 	ldrb.w	r3, [sl]
 8006472:	2b00      	cmp	r3, #0
 8006474:	f000 809f 	beq.w	80065b6 <_svfiprintf_r+0x1c6>
 8006478:	2300      	movs	r3, #0
 800647a:	f04f 32ff 	mov.w	r2, #4294967295
 800647e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006482:	f10a 0a01 	add.w	sl, sl, #1
 8006486:	9304      	str	r3, [sp, #16]
 8006488:	9307      	str	r3, [sp, #28]
 800648a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800648e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006490:	4654      	mov	r4, sl
 8006492:	2205      	movs	r2, #5
 8006494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006498:	484e      	ldr	r0, [pc, #312]	@ (80065d4 <_svfiprintf_r+0x1e4>)
 800649a:	f7f9 fe99 	bl	80001d0 <memchr>
 800649e:	9a04      	ldr	r2, [sp, #16]
 80064a0:	b9d8      	cbnz	r0, 80064da <_svfiprintf_r+0xea>
 80064a2:	06d0      	lsls	r0, r2, #27
 80064a4:	bf44      	itt	mi
 80064a6:	2320      	movmi	r3, #32
 80064a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064ac:	0711      	lsls	r1, r2, #28
 80064ae:	bf44      	itt	mi
 80064b0:	232b      	movmi	r3, #43	@ 0x2b
 80064b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064b6:	f89a 3000 	ldrb.w	r3, [sl]
 80064ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80064bc:	d015      	beq.n	80064ea <_svfiprintf_r+0xfa>
 80064be:	9a07      	ldr	r2, [sp, #28]
 80064c0:	4654      	mov	r4, sl
 80064c2:	2000      	movs	r0, #0
 80064c4:	f04f 0c0a 	mov.w	ip, #10
 80064c8:	4621      	mov	r1, r4
 80064ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064ce:	3b30      	subs	r3, #48	@ 0x30
 80064d0:	2b09      	cmp	r3, #9
 80064d2:	d94b      	bls.n	800656c <_svfiprintf_r+0x17c>
 80064d4:	b1b0      	cbz	r0, 8006504 <_svfiprintf_r+0x114>
 80064d6:	9207      	str	r2, [sp, #28]
 80064d8:	e014      	b.n	8006504 <_svfiprintf_r+0x114>
 80064da:	eba0 0308 	sub.w	r3, r0, r8
 80064de:	fa09 f303 	lsl.w	r3, r9, r3
 80064e2:	4313      	orrs	r3, r2
 80064e4:	9304      	str	r3, [sp, #16]
 80064e6:	46a2      	mov	sl, r4
 80064e8:	e7d2      	b.n	8006490 <_svfiprintf_r+0xa0>
 80064ea:	9b03      	ldr	r3, [sp, #12]
 80064ec:	1d19      	adds	r1, r3, #4
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	9103      	str	r1, [sp, #12]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	bfbb      	ittet	lt
 80064f6:	425b      	neglt	r3, r3
 80064f8:	f042 0202 	orrlt.w	r2, r2, #2
 80064fc:	9307      	strge	r3, [sp, #28]
 80064fe:	9307      	strlt	r3, [sp, #28]
 8006500:	bfb8      	it	lt
 8006502:	9204      	strlt	r2, [sp, #16]
 8006504:	7823      	ldrb	r3, [r4, #0]
 8006506:	2b2e      	cmp	r3, #46	@ 0x2e
 8006508:	d10a      	bne.n	8006520 <_svfiprintf_r+0x130>
 800650a:	7863      	ldrb	r3, [r4, #1]
 800650c:	2b2a      	cmp	r3, #42	@ 0x2a
 800650e:	d132      	bne.n	8006576 <_svfiprintf_r+0x186>
 8006510:	9b03      	ldr	r3, [sp, #12]
 8006512:	1d1a      	adds	r2, r3, #4
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	9203      	str	r2, [sp, #12]
 8006518:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800651c:	3402      	adds	r4, #2
 800651e:	9305      	str	r3, [sp, #20]
 8006520:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80065e4 <_svfiprintf_r+0x1f4>
 8006524:	7821      	ldrb	r1, [r4, #0]
 8006526:	2203      	movs	r2, #3
 8006528:	4650      	mov	r0, sl
 800652a:	f7f9 fe51 	bl	80001d0 <memchr>
 800652e:	b138      	cbz	r0, 8006540 <_svfiprintf_r+0x150>
 8006530:	9b04      	ldr	r3, [sp, #16]
 8006532:	eba0 000a 	sub.w	r0, r0, sl
 8006536:	2240      	movs	r2, #64	@ 0x40
 8006538:	4082      	lsls	r2, r0
 800653a:	4313      	orrs	r3, r2
 800653c:	3401      	adds	r4, #1
 800653e:	9304      	str	r3, [sp, #16]
 8006540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006544:	4824      	ldr	r0, [pc, #144]	@ (80065d8 <_svfiprintf_r+0x1e8>)
 8006546:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800654a:	2206      	movs	r2, #6
 800654c:	f7f9 fe40 	bl	80001d0 <memchr>
 8006550:	2800      	cmp	r0, #0
 8006552:	d036      	beq.n	80065c2 <_svfiprintf_r+0x1d2>
 8006554:	4b21      	ldr	r3, [pc, #132]	@ (80065dc <_svfiprintf_r+0x1ec>)
 8006556:	bb1b      	cbnz	r3, 80065a0 <_svfiprintf_r+0x1b0>
 8006558:	9b03      	ldr	r3, [sp, #12]
 800655a:	3307      	adds	r3, #7
 800655c:	f023 0307 	bic.w	r3, r3, #7
 8006560:	3308      	adds	r3, #8
 8006562:	9303      	str	r3, [sp, #12]
 8006564:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006566:	4433      	add	r3, r6
 8006568:	9309      	str	r3, [sp, #36]	@ 0x24
 800656a:	e76a      	b.n	8006442 <_svfiprintf_r+0x52>
 800656c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006570:	460c      	mov	r4, r1
 8006572:	2001      	movs	r0, #1
 8006574:	e7a8      	b.n	80064c8 <_svfiprintf_r+0xd8>
 8006576:	2300      	movs	r3, #0
 8006578:	3401      	adds	r4, #1
 800657a:	9305      	str	r3, [sp, #20]
 800657c:	4619      	mov	r1, r3
 800657e:	f04f 0c0a 	mov.w	ip, #10
 8006582:	4620      	mov	r0, r4
 8006584:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006588:	3a30      	subs	r2, #48	@ 0x30
 800658a:	2a09      	cmp	r2, #9
 800658c:	d903      	bls.n	8006596 <_svfiprintf_r+0x1a6>
 800658e:	2b00      	cmp	r3, #0
 8006590:	d0c6      	beq.n	8006520 <_svfiprintf_r+0x130>
 8006592:	9105      	str	r1, [sp, #20]
 8006594:	e7c4      	b.n	8006520 <_svfiprintf_r+0x130>
 8006596:	fb0c 2101 	mla	r1, ip, r1, r2
 800659a:	4604      	mov	r4, r0
 800659c:	2301      	movs	r3, #1
 800659e:	e7f0      	b.n	8006582 <_svfiprintf_r+0x192>
 80065a0:	ab03      	add	r3, sp, #12
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	462a      	mov	r2, r5
 80065a6:	4b0e      	ldr	r3, [pc, #56]	@ (80065e0 <_svfiprintf_r+0x1f0>)
 80065a8:	a904      	add	r1, sp, #16
 80065aa:	4638      	mov	r0, r7
 80065ac:	f3af 8000 	nop.w
 80065b0:	1c42      	adds	r2, r0, #1
 80065b2:	4606      	mov	r6, r0
 80065b4:	d1d6      	bne.n	8006564 <_svfiprintf_r+0x174>
 80065b6:	89ab      	ldrh	r3, [r5, #12]
 80065b8:	065b      	lsls	r3, r3, #25
 80065ba:	f53f af2d 	bmi.w	8006418 <_svfiprintf_r+0x28>
 80065be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065c0:	e72c      	b.n	800641c <_svfiprintf_r+0x2c>
 80065c2:	ab03      	add	r3, sp, #12
 80065c4:	9300      	str	r3, [sp, #0]
 80065c6:	462a      	mov	r2, r5
 80065c8:	4b05      	ldr	r3, [pc, #20]	@ (80065e0 <_svfiprintf_r+0x1f0>)
 80065ca:	a904      	add	r1, sp, #16
 80065cc:	4638      	mov	r0, r7
 80065ce:	f000 f879 	bl	80066c4 <_printf_i>
 80065d2:	e7ed      	b.n	80065b0 <_svfiprintf_r+0x1c0>
 80065d4:	08006a64 	.word	0x08006a64
 80065d8:	08006a6e 	.word	0x08006a6e
 80065dc:	00000000 	.word	0x00000000
 80065e0:	08006339 	.word	0x08006339
 80065e4:	08006a6a 	.word	0x08006a6a

080065e8 <_printf_common>:
 80065e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065ec:	4616      	mov	r6, r2
 80065ee:	4698      	mov	r8, r3
 80065f0:	688a      	ldr	r2, [r1, #8]
 80065f2:	690b      	ldr	r3, [r1, #16]
 80065f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80065f8:	4293      	cmp	r3, r2
 80065fa:	bfb8      	it	lt
 80065fc:	4613      	movlt	r3, r2
 80065fe:	6033      	str	r3, [r6, #0]
 8006600:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006604:	4607      	mov	r7, r0
 8006606:	460c      	mov	r4, r1
 8006608:	b10a      	cbz	r2, 800660e <_printf_common+0x26>
 800660a:	3301      	adds	r3, #1
 800660c:	6033      	str	r3, [r6, #0]
 800660e:	6823      	ldr	r3, [r4, #0]
 8006610:	0699      	lsls	r1, r3, #26
 8006612:	bf42      	ittt	mi
 8006614:	6833      	ldrmi	r3, [r6, #0]
 8006616:	3302      	addmi	r3, #2
 8006618:	6033      	strmi	r3, [r6, #0]
 800661a:	6825      	ldr	r5, [r4, #0]
 800661c:	f015 0506 	ands.w	r5, r5, #6
 8006620:	d106      	bne.n	8006630 <_printf_common+0x48>
 8006622:	f104 0a19 	add.w	sl, r4, #25
 8006626:	68e3      	ldr	r3, [r4, #12]
 8006628:	6832      	ldr	r2, [r6, #0]
 800662a:	1a9b      	subs	r3, r3, r2
 800662c:	42ab      	cmp	r3, r5
 800662e:	dc26      	bgt.n	800667e <_printf_common+0x96>
 8006630:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006634:	6822      	ldr	r2, [r4, #0]
 8006636:	3b00      	subs	r3, #0
 8006638:	bf18      	it	ne
 800663a:	2301      	movne	r3, #1
 800663c:	0692      	lsls	r2, r2, #26
 800663e:	d42b      	bmi.n	8006698 <_printf_common+0xb0>
 8006640:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006644:	4641      	mov	r1, r8
 8006646:	4638      	mov	r0, r7
 8006648:	47c8      	blx	r9
 800664a:	3001      	adds	r0, #1
 800664c:	d01e      	beq.n	800668c <_printf_common+0xa4>
 800664e:	6823      	ldr	r3, [r4, #0]
 8006650:	6922      	ldr	r2, [r4, #16]
 8006652:	f003 0306 	and.w	r3, r3, #6
 8006656:	2b04      	cmp	r3, #4
 8006658:	bf02      	ittt	eq
 800665a:	68e5      	ldreq	r5, [r4, #12]
 800665c:	6833      	ldreq	r3, [r6, #0]
 800665e:	1aed      	subeq	r5, r5, r3
 8006660:	68a3      	ldr	r3, [r4, #8]
 8006662:	bf0c      	ite	eq
 8006664:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006668:	2500      	movne	r5, #0
 800666a:	4293      	cmp	r3, r2
 800666c:	bfc4      	itt	gt
 800666e:	1a9b      	subgt	r3, r3, r2
 8006670:	18ed      	addgt	r5, r5, r3
 8006672:	2600      	movs	r6, #0
 8006674:	341a      	adds	r4, #26
 8006676:	42b5      	cmp	r5, r6
 8006678:	d11a      	bne.n	80066b0 <_printf_common+0xc8>
 800667a:	2000      	movs	r0, #0
 800667c:	e008      	b.n	8006690 <_printf_common+0xa8>
 800667e:	2301      	movs	r3, #1
 8006680:	4652      	mov	r2, sl
 8006682:	4641      	mov	r1, r8
 8006684:	4638      	mov	r0, r7
 8006686:	47c8      	blx	r9
 8006688:	3001      	adds	r0, #1
 800668a:	d103      	bne.n	8006694 <_printf_common+0xac>
 800668c:	f04f 30ff 	mov.w	r0, #4294967295
 8006690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006694:	3501      	adds	r5, #1
 8006696:	e7c6      	b.n	8006626 <_printf_common+0x3e>
 8006698:	18e1      	adds	r1, r4, r3
 800669a:	1c5a      	adds	r2, r3, #1
 800669c:	2030      	movs	r0, #48	@ 0x30
 800669e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80066a2:	4422      	add	r2, r4
 80066a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80066a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80066ac:	3302      	adds	r3, #2
 80066ae:	e7c7      	b.n	8006640 <_printf_common+0x58>
 80066b0:	2301      	movs	r3, #1
 80066b2:	4622      	mov	r2, r4
 80066b4:	4641      	mov	r1, r8
 80066b6:	4638      	mov	r0, r7
 80066b8:	47c8      	blx	r9
 80066ba:	3001      	adds	r0, #1
 80066bc:	d0e6      	beq.n	800668c <_printf_common+0xa4>
 80066be:	3601      	adds	r6, #1
 80066c0:	e7d9      	b.n	8006676 <_printf_common+0x8e>
	...

080066c4 <_printf_i>:
 80066c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066c8:	7e0f      	ldrb	r7, [r1, #24]
 80066ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80066cc:	2f78      	cmp	r7, #120	@ 0x78
 80066ce:	4691      	mov	r9, r2
 80066d0:	4680      	mov	r8, r0
 80066d2:	460c      	mov	r4, r1
 80066d4:	469a      	mov	sl, r3
 80066d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80066da:	d807      	bhi.n	80066ec <_printf_i+0x28>
 80066dc:	2f62      	cmp	r7, #98	@ 0x62
 80066de:	d80a      	bhi.n	80066f6 <_printf_i+0x32>
 80066e0:	2f00      	cmp	r7, #0
 80066e2:	f000 80d2 	beq.w	800688a <_printf_i+0x1c6>
 80066e6:	2f58      	cmp	r7, #88	@ 0x58
 80066e8:	f000 80b9 	beq.w	800685e <_printf_i+0x19a>
 80066ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80066f4:	e03a      	b.n	800676c <_printf_i+0xa8>
 80066f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80066fa:	2b15      	cmp	r3, #21
 80066fc:	d8f6      	bhi.n	80066ec <_printf_i+0x28>
 80066fe:	a101      	add	r1, pc, #4	@ (adr r1, 8006704 <_printf_i+0x40>)
 8006700:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006704:	0800675d 	.word	0x0800675d
 8006708:	08006771 	.word	0x08006771
 800670c:	080066ed 	.word	0x080066ed
 8006710:	080066ed 	.word	0x080066ed
 8006714:	080066ed 	.word	0x080066ed
 8006718:	080066ed 	.word	0x080066ed
 800671c:	08006771 	.word	0x08006771
 8006720:	080066ed 	.word	0x080066ed
 8006724:	080066ed 	.word	0x080066ed
 8006728:	080066ed 	.word	0x080066ed
 800672c:	080066ed 	.word	0x080066ed
 8006730:	08006871 	.word	0x08006871
 8006734:	0800679b 	.word	0x0800679b
 8006738:	0800682b 	.word	0x0800682b
 800673c:	080066ed 	.word	0x080066ed
 8006740:	080066ed 	.word	0x080066ed
 8006744:	08006893 	.word	0x08006893
 8006748:	080066ed 	.word	0x080066ed
 800674c:	0800679b 	.word	0x0800679b
 8006750:	080066ed 	.word	0x080066ed
 8006754:	080066ed 	.word	0x080066ed
 8006758:	08006833 	.word	0x08006833
 800675c:	6833      	ldr	r3, [r6, #0]
 800675e:	1d1a      	adds	r2, r3, #4
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6032      	str	r2, [r6, #0]
 8006764:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006768:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800676c:	2301      	movs	r3, #1
 800676e:	e09d      	b.n	80068ac <_printf_i+0x1e8>
 8006770:	6833      	ldr	r3, [r6, #0]
 8006772:	6820      	ldr	r0, [r4, #0]
 8006774:	1d19      	adds	r1, r3, #4
 8006776:	6031      	str	r1, [r6, #0]
 8006778:	0606      	lsls	r6, r0, #24
 800677a:	d501      	bpl.n	8006780 <_printf_i+0xbc>
 800677c:	681d      	ldr	r5, [r3, #0]
 800677e:	e003      	b.n	8006788 <_printf_i+0xc4>
 8006780:	0645      	lsls	r5, r0, #25
 8006782:	d5fb      	bpl.n	800677c <_printf_i+0xb8>
 8006784:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006788:	2d00      	cmp	r5, #0
 800678a:	da03      	bge.n	8006794 <_printf_i+0xd0>
 800678c:	232d      	movs	r3, #45	@ 0x2d
 800678e:	426d      	negs	r5, r5
 8006790:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006794:	4859      	ldr	r0, [pc, #356]	@ (80068fc <_printf_i+0x238>)
 8006796:	230a      	movs	r3, #10
 8006798:	e011      	b.n	80067be <_printf_i+0xfa>
 800679a:	6821      	ldr	r1, [r4, #0]
 800679c:	6833      	ldr	r3, [r6, #0]
 800679e:	0608      	lsls	r0, r1, #24
 80067a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80067a4:	d402      	bmi.n	80067ac <_printf_i+0xe8>
 80067a6:	0649      	lsls	r1, r1, #25
 80067a8:	bf48      	it	mi
 80067aa:	b2ad      	uxthmi	r5, r5
 80067ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80067ae:	4853      	ldr	r0, [pc, #332]	@ (80068fc <_printf_i+0x238>)
 80067b0:	6033      	str	r3, [r6, #0]
 80067b2:	bf14      	ite	ne
 80067b4:	230a      	movne	r3, #10
 80067b6:	2308      	moveq	r3, #8
 80067b8:	2100      	movs	r1, #0
 80067ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80067be:	6866      	ldr	r6, [r4, #4]
 80067c0:	60a6      	str	r6, [r4, #8]
 80067c2:	2e00      	cmp	r6, #0
 80067c4:	bfa2      	ittt	ge
 80067c6:	6821      	ldrge	r1, [r4, #0]
 80067c8:	f021 0104 	bicge.w	r1, r1, #4
 80067cc:	6021      	strge	r1, [r4, #0]
 80067ce:	b90d      	cbnz	r5, 80067d4 <_printf_i+0x110>
 80067d0:	2e00      	cmp	r6, #0
 80067d2:	d04b      	beq.n	800686c <_printf_i+0x1a8>
 80067d4:	4616      	mov	r6, r2
 80067d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80067da:	fb03 5711 	mls	r7, r3, r1, r5
 80067de:	5dc7      	ldrb	r7, [r0, r7]
 80067e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80067e4:	462f      	mov	r7, r5
 80067e6:	42bb      	cmp	r3, r7
 80067e8:	460d      	mov	r5, r1
 80067ea:	d9f4      	bls.n	80067d6 <_printf_i+0x112>
 80067ec:	2b08      	cmp	r3, #8
 80067ee:	d10b      	bne.n	8006808 <_printf_i+0x144>
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	07df      	lsls	r7, r3, #31
 80067f4:	d508      	bpl.n	8006808 <_printf_i+0x144>
 80067f6:	6923      	ldr	r3, [r4, #16]
 80067f8:	6861      	ldr	r1, [r4, #4]
 80067fa:	4299      	cmp	r1, r3
 80067fc:	bfde      	ittt	le
 80067fe:	2330      	movle	r3, #48	@ 0x30
 8006800:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006804:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006808:	1b92      	subs	r2, r2, r6
 800680a:	6122      	str	r2, [r4, #16]
 800680c:	f8cd a000 	str.w	sl, [sp]
 8006810:	464b      	mov	r3, r9
 8006812:	aa03      	add	r2, sp, #12
 8006814:	4621      	mov	r1, r4
 8006816:	4640      	mov	r0, r8
 8006818:	f7ff fee6 	bl	80065e8 <_printf_common>
 800681c:	3001      	adds	r0, #1
 800681e:	d14a      	bne.n	80068b6 <_printf_i+0x1f2>
 8006820:	f04f 30ff 	mov.w	r0, #4294967295
 8006824:	b004      	add	sp, #16
 8006826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	f043 0320 	orr.w	r3, r3, #32
 8006830:	6023      	str	r3, [r4, #0]
 8006832:	4833      	ldr	r0, [pc, #204]	@ (8006900 <_printf_i+0x23c>)
 8006834:	2778      	movs	r7, #120	@ 0x78
 8006836:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800683a:	6823      	ldr	r3, [r4, #0]
 800683c:	6831      	ldr	r1, [r6, #0]
 800683e:	061f      	lsls	r7, r3, #24
 8006840:	f851 5b04 	ldr.w	r5, [r1], #4
 8006844:	d402      	bmi.n	800684c <_printf_i+0x188>
 8006846:	065f      	lsls	r7, r3, #25
 8006848:	bf48      	it	mi
 800684a:	b2ad      	uxthmi	r5, r5
 800684c:	6031      	str	r1, [r6, #0]
 800684e:	07d9      	lsls	r1, r3, #31
 8006850:	bf44      	itt	mi
 8006852:	f043 0320 	orrmi.w	r3, r3, #32
 8006856:	6023      	strmi	r3, [r4, #0]
 8006858:	b11d      	cbz	r5, 8006862 <_printf_i+0x19e>
 800685a:	2310      	movs	r3, #16
 800685c:	e7ac      	b.n	80067b8 <_printf_i+0xf4>
 800685e:	4827      	ldr	r0, [pc, #156]	@ (80068fc <_printf_i+0x238>)
 8006860:	e7e9      	b.n	8006836 <_printf_i+0x172>
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	f023 0320 	bic.w	r3, r3, #32
 8006868:	6023      	str	r3, [r4, #0]
 800686a:	e7f6      	b.n	800685a <_printf_i+0x196>
 800686c:	4616      	mov	r6, r2
 800686e:	e7bd      	b.n	80067ec <_printf_i+0x128>
 8006870:	6833      	ldr	r3, [r6, #0]
 8006872:	6825      	ldr	r5, [r4, #0]
 8006874:	6961      	ldr	r1, [r4, #20]
 8006876:	1d18      	adds	r0, r3, #4
 8006878:	6030      	str	r0, [r6, #0]
 800687a:	062e      	lsls	r6, r5, #24
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	d501      	bpl.n	8006884 <_printf_i+0x1c0>
 8006880:	6019      	str	r1, [r3, #0]
 8006882:	e002      	b.n	800688a <_printf_i+0x1c6>
 8006884:	0668      	lsls	r0, r5, #25
 8006886:	d5fb      	bpl.n	8006880 <_printf_i+0x1bc>
 8006888:	8019      	strh	r1, [r3, #0]
 800688a:	2300      	movs	r3, #0
 800688c:	6123      	str	r3, [r4, #16]
 800688e:	4616      	mov	r6, r2
 8006890:	e7bc      	b.n	800680c <_printf_i+0x148>
 8006892:	6833      	ldr	r3, [r6, #0]
 8006894:	1d1a      	adds	r2, r3, #4
 8006896:	6032      	str	r2, [r6, #0]
 8006898:	681e      	ldr	r6, [r3, #0]
 800689a:	6862      	ldr	r2, [r4, #4]
 800689c:	2100      	movs	r1, #0
 800689e:	4630      	mov	r0, r6
 80068a0:	f7f9 fc96 	bl	80001d0 <memchr>
 80068a4:	b108      	cbz	r0, 80068aa <_printf_i+0x1e6>
 80068a6:	1b80      	subs	r0, r0, r6
 80068a8:	6060      	str	r0, [r4, #4]
 80068aa:	6863      	ldr	r3, [r4, #4]
 80068ac:	6123      	str	r3, [r4, #16]
 80068ae:	2300      	movs	r3, #0
 80068b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068b4:	e7aa      	b.n	800680c <_printf_i+0x148>
 80068b6:	6923      	ldr	r3, [r4, #16]
 80068b8:	4632      	mov	r2, r6
 80068ba:	4649      	mov	r1, r9
 80068bc:	4640      	mov	r0, r8
 80068be:	47d0      	blx	sl
 80068c0:	3001      	adds	r0, #1
 80068c2:	d0ad      	beq.n	8006820 <_printf_i+0x15c>
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	079b      	lsls	r3, r3, #30
 80068c8:	d413      	bmi.n	80068f2 <_printf_i+0x22e>
 80068ca:	68e0      	ldr	r0, [r4, #12]
 80068cc:	9b03      	ldr	r3, [sp, #12]
 80068ce:	4298      	cmp	r0, r3
 80068d0:	bfb8      	it	lt
 80068d2:	4618      	movlt	r0, r3
 80068d4:	e7a6      	b.n	8006824 <_printf_i+0x160>
 80068d6:	2301      	movs	r3, #1
 80068d8:	4632      	mov	r2, r6
 80068da:	4649      	mov	r1, r9
 80068dc:	4640      	mov	r0, r8
 80068de:	47d0      	blx	sl
 80068e0:	3001      	adds	r0, #1
 80068e2:	d09d      	beq.n	8006820 <_printf_i+0x15c>
 80068e4:	3501      	adds	r5, #1
 80068e6:	68e3      	ldr	r3, [r4, #12]
 80068e8:	9903      	ldr	r1, [sp, #12]
 80068ea:	1a5b      	subs	r3, r3, r1
 80068ec:	42ab      	cmp	r3, r5
 80068ee:	dcf2      	bgt.n	80068d6 <_printf_i+0x212>
 80068f0:	e7eb      	b.n	80068ca <_printf_i+0x206>
 80068f2:	2500      	movs	r5, #0
 80068f4:	f104 0619 	add.w	r6, r4, #25
 80068f8:	e7f5      	b.n	80068e6 <_printf_i+0x222>
 80068fa:	bf00      	nop
 80068fc:	08006a75 	.word	0x08006a75
 8006900:	08006a86 	.word	0x08006a86

08006904 <memmove>:
 8006904:	4288      	cmp	r0, r1
 8006906:	b510      	push	{r4, lr}
 8006908:	eb01 0402 	add.w	r4, r1, r2
 800690c:	d902      	bls.n	8006914 <memmove+0x10>
 800690e:	4284      	cmp	r4, r0
 8006910:	4623      	mov	r3, r4
 8006912:	d807      	bhi.n	8006924 <memmove+0x20>
 8006914:	1e43      	subs	r3, r0, #1
 8006916:	42a1      	cmp	r1, r4
 8006918:	d008      	beq.n	800692c <memmove+0x28>
 800691a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800691e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006922:	e7f8      	b.n	8006916 <memmove+0x12>
 8006924:	4402      	add	r2, r0
 8006926:	4601      	mov	r1, r0
 8006928:	428a      	cmp	r2, r1
 800692a:	d100      	bne.n	800692e <memmove+0x2a>
 800692c:	bd10      	pop	{r4, pc}
 800692e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006932:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006936:	e7f7      	b.n	8006928 <memmove+0x24>

08006938 <_sbrk_r>:
 8006938:	b538      	push	{r3, r4, r5, lr}
 800693a:	4d06      	ldr	r5, [pc, #24]	@ (8006954 <_sbrk_r+0x1c>)
 800693c:	2300      	movs	r3, #0
 800693e:	4604      	mov	r4, r0
 8006940:	4608      	mov	r0, r1
 8006942:	602b      	str	r3, [r5, #0]
 8006944:	f7fa fd38 	bl	80013b8 <_sbrk>
 8006948:	1c43      	adds	r3, r0, #1
 800694a:	d102      	bne.n	8006952 <_sbrk_r+0x1a>
 800694c:	682b      	ldr	r3, [r5, #0]
 800694e:	b103      	cbz	r3, 8006952 <_sbrk_r+0x1a>
 8006950:	6023      	str	r3, [r4, #0]
 8006952:	bd38      	pop	{r3, r4, r5, pc}
 8006954:	20000324 	.word	0x20000324

08006958 <memcpy>:
 8006958:	440a      	add	r2, r1
 800695a:	4291      	cmp	r1, r2
 800695c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006960:	d100      	bne.n	8006964 <memcpy+0xc>
 8006962:	4770      	bx	lr
 8006964:	b510      	push	{r4, lr}
 8006966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800696a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800696e:	4291      	cmp	r1, r2
 8006970:	d1f9      	bne.n	8006966 <memcpy+0xe>
 8006972:	bd10      	pop	{r4, pc}

08006974 <_realloc_r>:
 8006974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006978:	4680      	mov	r8, r0
 800697a:	4615      	mov	r5, r2
 800697c:	460c      	mov	r4, r1
 800697e:	b921      	cbnz	r1, 800698a <_realloc_r+0x16>
 8006980:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006984:	4611      	mov	r1, r2
 8006986:	f7ff bc4b 	b.w	8006220 <_malloc_r>
 800698a:	b92a      	cbnz	r2, 8006998 <_realloc_r+0x24>
 800698c:	f7ff fbdc 	bl	8006148 <_free_r>
 8006990:	2400      	movs	r4, #0
 8006992:	4620      	mov	r0, r4
 8006994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006998:	f000 f81a 	bl	80069d0 <_malloc_usable_size_r>
 800699c:	4285      	cmp	r5, r0
 800699e:	4606      	mov	r6, r0
 80069a0:	d802      	bhi.n	80069a8 <_realloc_r+0x34>
 80069a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80069a6:	d8f4      	bhi.n	8006992 <_realloc_r+0x1e>
 80069a8:	4629      	mov	r1, r5
 80069aa:	4640      	mov	r0, r8
 80069ac:	f7ff fc38 	bl	8006220 <_malloc_r>
 80069b0:	4607      	mov	r7, r0
 80069b2:	2800      	cmp	r0, #0
 80069b4:	d0ec      	beq.n	8006990 <_realloc_r+0x1c>
 80069b6:	42b5      	cmp	r5, r6
 80069b8:	462a      	mov	r2, r5
 80069ba:	4621      	mov	r1, r4
 80069bc:	bf28      	it	cs
 80069be:	4632      	movcs	r2, r6
 80069c0:	f7ff ffca 	bl	8006958 <memcpy>
 80069c4:	4621      	mov	r1, r4
 80069c6:	4640      	mov	r0, r8
 80069c8:	f7ff fbbe 	bl	8006148 <_free_r>
 80069cc:	463c      	mov	r4, r7
 80069ce:	e7e0      	b.n	8006992 <_realloc_r+0x1e>

080069d0 <_malloc_usable_size_r>:
 80069d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069d4:	1f18      	subs	r0, r3, #4
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	bfbc      	itt	lt
 80069da:	580b      	ldrlt	r3, [r1, r0]
 80069dc:	18c0      	addlt	r0, r0, r3
 80069de:	4770      	bx	lr

080069e0 <_init>:
 80069e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e2:	bf00      	nop
 80069e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069e6:	bc08      	pop	{r3}
 80069e8:	469e      	mov	lr, r3
 80069ea:	4770      	bx	lr

080069ec <_fini>:
 80069ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ee:	bf00      	nop
 80069f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069f2:	bc08      	pop	{r3}
 80069f4:	469e      	mov	lr, r3
 80069f6:	4770      	bx	lr
