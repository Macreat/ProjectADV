
ProjectProof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c0  0800647c  0800647c  0000747c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e3c  08006e3c  00008080  2**0
                  CONTENTS
  4 .ARM          00000008  08006e3c  08006e3c  00007e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e44  08006e44  00008080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e44  08006e44  00007e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e48  08006e48  00007e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08006e4c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000077c  20000080  08006ecc  00008080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007fc  08006ecc  000087fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000232cb  00000000  00000000  000080b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e00  00000000  00000000  0002b37b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00010f9e  00000000  00000000  0002f17b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001020  00000000  00000000  00040120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002324  00000000  00000000  00041140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029d19  00000000  00000000  00043464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024142  00000000  00000000  0006d17d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010119f  00000000  00000000  000912bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0019245e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003918  00000000  00000000  001924a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  00195dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006464 	.word	0x08006464

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08006464 	.word	0x08006464

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <keypad_scan_row>:

	return 1;
}

uint8_t keypad_scan_row(GPIO_TypeDef *COLUMNx_GPIO_Port, uint16_t COLUMNx_Pin)
{
 8000570:	b538      	push	{r3, r4, r5, lr}
	uint8_t row_pressed = 0xFF;
	HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
{
 8000574:	4604      	mov	r4, r0
 8000576:	460d      	mov	r5, r1
	HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, GPIO_PIN_RESET);
 8000578:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800057c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000580:	f002 f80c 	bl	800259c <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLUMNx_GPIO_Port, COLUMNx_Pin) == 0) {
 8000584:	4629      	mov	r1, r5
 8000586:	4620      	mov	r0, r4
 8000588:	f002 f802 	bl	8002590 <HAL_GPIO_ReadPin>
 800058c:	b9c0      	cbnz	r0, 80005c0 <keypad_scan_row+0x50>
		row_pressed =  1;
 800058e:	2401      	movs	r4, #1
	if (HAL_GPIO_ReadPin(COLUMNx_GPIO_Port, COLUMNx_Pin) == 0) {
		row_pressed =  4;
		goto row_scan_end;
	}
row_scan_end:
	HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000596:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800059a:	f001 ffff 	bl	800259c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, GPIO_PIN_SET);
 800059e:	481b      	ldr	r0, [pc, #108]	@ (800060c <keypad_scan_row+0x9c>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	2108      	movs	r1, #8
 80005a4:	f001 fffa 	bl	800259c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, GPIO_PIN_SET);
 80005a8:	4818      	ldr	r0, [pc, #96]	@ (800060c <keypad_scan_row+0x9c>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	2120      	movs	r1, #32
 80005ae:	f001 fff5 	bl	800259c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, GPIO_PIN_SET);
 80005b2:	4816      	ldr	r0, [pc, #88]	@ (800060c <keypad_scan_row+0x9c>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	2110      	movs	r1, #16
 80005b8:	f001 fff0 	bl	800259c <HAL_GPIO_WritePin>
	return row_pressed; // not detected
}
 80005bc:	4620      	mov	r0, r4
 80005be:	bd38      	pop	{r3, r4, r5, pc}
	HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, GPIO_PIN_RESET);
 80005c0:	4812      	ldr	r0, [pc, #72]	@ (800060c <keypad_scan_row+0x9c>)
 80005c2:	2108      	movs	r1, #8
 80005c4:	2200      	movs	r2, #0
 80005c6:	f001 ffe9 	bl	800259c <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLUMNx_GPIO_Port, COLUMNx_Pin) == 0) {
 80005ca:	4629      	mov	r1, r5
 80005cc:	4620      	mov	r0, r4
 80005ce:	f001 ffdf 	bl	8002590 <HAL_GPIO_ReadPin>
 80005d2:	b1b8      	cbz	r0, 8000604 <keypad_scan_row+0x94>
	HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, GPIO_PIN_RESET);
 80005d4:	480d      	ldr	r0, [pc, #52]	@ (800060c <keypad_scan_row+0x9c>)
 80005d6:	2120      	movs	r1, #32
 80005d8:	2200      	movs	r2, #0
 80005da:	f001 ffdf 	bl	800259c <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLUMNx_GPIO_Port, COLUMNx_Pin) == 0) {
 80005de:	4629      	mov	r1, r5
 80005e0:	4620      	mov	r0, r4
 80005e2:	f001 ffd5 	bl	8002590 <HAL_GPIO_ReadPin>
 80005e6:	b178      	cbz	r0, 8000608 <keypad_scan_row+0x98>
	HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, GPIO_PIN_RESET);
 80005e8:	4808      	ldr	r0, [pc, #32]	@ (800060c <keypad_scan_row+0x9c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	2110      	movs	r1, #16
 80005ee:	f001 ffd5 	bl	800259c <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLUMNx_GPIO_Port, COLUMNx_Pin) == 0) {
 80005f2:	4620      	mov	r0, r4
 80005f4:	4629      	mov	r1, r5
 80005f6:	f001 ffcb 	bl	8002590 <HAL_GPIO_ReadPin>
	uint8_t row_pressed = 0xFF;
 80005fa:	2800      	cmp	r0, #0
 80005fc:	bf0c      	ite	eq
 80005fe:	2404      	moveq	r4, #4
 8000600:	24ff      	movne	r4, #255	@ 0xff
row_scan_end:
 8000602:	e7c5      	b.n	8000590 <keypad_scan_row+0x20>
		row_pressed =  2;
 8000604:	2402      	movs	r4, #2
 8000606:	e7c3      	b.n	8000590 <keypad_scan_row+0x20>
		row_pressed =  3;
 8000608:	2403      	movs	r4, #3
 800060a:	e7c1      	b.n	8000590 <keypad_scan_row+0x20>
 800060c:	48000400 	.word	0x48000400

08000610 <keypad_scan>:
		{'7', '8', '9', 'C'},
		{'*', '0', '#', 'D'},
};

uint8_t keypad_scan(uint16_t GPIO_Pin)
{
 8000610:	b570      	push	{r4, r5, r6, lr}
	if (last_pressed == GPIO_Pin) {
 8000612:	4d23      	ldr	r5, [pc, #140]	@ (80006a0 <keypad_scan+0x90>)
		if (HAL_GetTick() < (last_tick + 200)) {
 8000614:	4e23      	ldr	r6, [pc, #140]	@ (80006a4 <keypad_scan+0x94>)
	if (last_pressed == GPIO_Pin) {
 8000616:	882b      	ldrh	r3, [r5, #0]
 8000618:	4283      	cmp	r3, r0
{
 800061a:	4604      	mov	r4, r0
	if (last_pressed == GPIO_Pin) {
 800061c:	d023      	beq.n	8000666 <keypad_scan+0x56>
	last_pressed = GPIO_Pin;
 800061e:	802c      	strh	r4, [r5, #0]
	last_tick = HAL_GetTick();
 8000620:	f000 ffa4 	bl	800156c <HAL_GetTick>

	if (keypad_debounce(GPIO_Pin) == 0) {
		return key_pressed;
	}
	uint8_t row = 0xFF;
	switch (GPIO_Pin) {
 8000624:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
	last_tick = HAL_GetTick();
 8000628:	6030      	str	r0, [r6, #0]
	switch (GPIO_Pin) {
 800062a:	d02e      	beq.n	800068a <keypad_scan+0x7a>
 800062c:	d80f      	bhi.n	800064e <keypad_scan+0x3e>
 800062e:	2c80      	cmp	r4, #128	@ 0x80
 8000630:	d021      	beq.n	8000676 <keypad_scan+0x66>
 8000632:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 8000636:	d11c      	bne.n	8000672 <keypad_scan+0x62>
		row = keypad_scan_row(COL_1_GPIO_Port, COL_1_Pin);
		key_pressed = keypad_chars[row - 1][1 - 1];
		break;

	case COL_2_Pin:
		row = keypad_scan_row(COL_2_GPIO_Port, COL_2_Pin);
 8000638:	4621      	mov	r1, r4
 800063a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800063e:	f7ff ff97 	bl	8000570 <keypad_scan_row>
		key_pressed = keypad_chars[row - 1][2 - 1];
 8000642:	4b19      	ldr	r3, [pc, #100]	@ (80006a8 <keypad_scan+0x98>)
 8000644:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000648:	f813 0c03 	ldrb.w	r0, [r3, #-3]
			break;
	default:
		break;
	}
	return key_pressed;
}
 800064c:	bd70      	pop	{r4, r5, r6, pc}
	switch (GPIO_Pin) {
 800064e:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 8000652:	d10e      	bne.n	8000672 <keypad_scan+0x62>
		row = keypad_scan_row(COL_1_GPIO_Port, COL_1_Pin);
 8000654:	4621      	mov	r1, r4
 8000656:	4815      	ldr	r0, [pc, #84]	@ (80006ac <keypad_scan+0x9c>)
 8000658:	f7ff ff8a 	bl	8000570 <keypad_scan_row>
		key_pressed = keypad_chars[row - 1][1 - 1];
 800065c:	4b12      	ldr	r3, [pc, #72]	@ (80006a8 <keypad_scan+0x98>)
 800065e:	3801      	subs	r0, #1
 8000660:	f813 0020 	ldrb.w	r0, [r3, r0, lsl #2]
}
 8000664:	bd70      	pop	{r4, r5, r6, pc}
		if (HAL_GetTick() < (last_tick + 200)) {
 8000666:	f000 ff81 	bl	800156c <HAL_GetTick>
 800066a:	6833      	ldr	r3, [r6, #0]
 800066c:	33c8      	adds	r3, #200	@ 0xc8
 800066e:	4298      	cmp	r0, r3
 8000670:	d2d5      	bcs.n	800061e <keypad_scan+0xe>
{
 8000672:	20ff      	movs	r0, #255	@ 0xff
}
 8000674:	bd70      	pop	{r4, r5, r6, pc}
			row = keypad_scan_row(COL_4_GPIO_Port, COL_4_Pin);
 8000676:	4621      	mov	r1, r4
 8000678:	480d      	ldr	r0, [pc, #52]	@ (80006b0 <keypad_scan+0xa0>)
 800067a:	f7ff ff79 	bl	8000570 <keypad_scan_row>
			key_pressed = keypad_chars[row - 1][4 - 1];
 800067e:	4b0a      	ldr	r3, [pc, #40]	@ (80006a8 <keypad_scan+0x98>)
 8000680:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000684:	f813 0c01 	ldrb.w	r0, [r3, #-1]
}
 8000688:	bd70      	pop	{r4, r5, r6, pc}
			row = keypad_scan_row(COL_3_GPIO_Port, COL_3_Pin);
 800068a:	4621      	mov	r1, r4
 800068c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000690:	f7ff ff6e 	bl	8000570 <keypad_scan_row>
			key_pressed = keypad_chars[row - 1][3 - 1];
 8000694:	4b04      	ldr	r3, [pc, #16]	@ (80006a8 <keypad_scan+0x98>)
 8000696:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800069a:	f813 0c02 	ldrb.w	r0, [r3, #-2]
}
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	20000000 	.word	0x20000000
 80006a4:	2000009c 	.word	0x2000009c
 80006a8:	20000004 	.word	0x20000004
 80006ac:	48000400 	.word	0x48000400
 80006b0:	48000800 	.word	0x48000800

080006b4 <_write>:
 * By using this function, any call to `printf` will output the message
 * to the UART interface, which can be monitored with a serial console.
 */

int _write(int file, char *ptr, int len)
{
 80006b4:	b510      	push	{r4, lr}
  // to using printf
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 80006b6:	230a      	movs	r3, #10
{
 80006b8:	4614      	mov	r4, r2
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 80006ba:	4803      	ldr	r0, [pc, #12]	@ (80006c8 <_write+0x14>)
 80006bc:	b292      	uxth	r2, r2
 80006be:	f003 fbcf 	bl	8003e60 <HAL_UART_Transmit>
  return len;
}
 80006c2:	4620      	mov	r0, r4
 80006c4:	bd10      	pop	{r4, pc}
 80006c6:	bf00      	nop
 80006c8:	200000f8 	.word	0x200000f8

080006cc <HAL_UART_RxCpltCallback>:

//* USART2 Callback ------------------------------------------------------------*/
/* UART Callback: Receives data and processes it */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    if (huart->Instance == USART2) {
 80006cc:	4b29      	ldr	r3, [pc, #164]	@ (8000774 <HAL_UART_RxCpltCallback+0xa8>)
 80006ce:	6802      	ldr	r2, [r0, #0]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d000      	beq.n	80006d6 <HAL_UART_RxCpltCallback+0xa>
 80006d4:	4770      	bx	lr
{
 80006d6:	b570      	push	{r4, r5, r6, lr}
        // Store digits received from USART2 into the ring buffer
        if (usart2_data >= '0' && usart2_data <= '9') {
 80006d8:	4b27      	ldr	r3, [pc, #156]	@ (8000778 <HAL_UART_RxCpltCallback+0xac>)
 80006da:	7819      	ldrb	r1, [r3, #0]
 80006dc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80006e0:	2b09      	cmp	r3, #9
{
 80006e2:	b08a      	sub	sp, #40	@ 0x28
        if (usart2_data >= '0' && usart2_data <= '9') {
 80006e4:	d93d      	bls.n	8000762 <HAL_UART_RxCpltCallback+0x96>
            ring_buffer_write(&usart2_rb, usart2_data);
        }

        // Check if the buffer has 6 digits and process the input
        if (ring_buffer_size(&usart2_rb) >= 6) {
 80006e6:	4825      	ldr	r0, [pc, #148]	@ (800077c <HAL_UART_RxCpltCallback+0xb0>)
 80006e8:	f000 fcbc 	bl	8001064 <ring_buffer_size>
 80006ec:	2805      	cmp	r0, #5
 80006ee:	d80c      	bhi.n	800070a <HAL_UART_RxCpltCallback+0x3e>
 80006f0:	4c23      	ldr	r4, [pc, #140]	@ (8000780 <HAL_UART_RxCpltCallback+0xb4>)
            sprintf(usart_oled_str, "USART: %lu", usart_input_value);
            ssd1306_WriteString(usart_oled_str, Font_6x8, White);
            ssd1306_UpdateScreen();

        }
        if (usart_input_value == "123"){
 80006f2:	4b24      	ldr	r3, [pc, #144]	@ (8000784 <HAL_UART_RxCpltCallback+0xb8>)
 80006f4:	6822      	ldr	r2, [r4, #0]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d037      	beq.n	800076a <HAL_UART_RxCpltCallback+0x9e>
        	passwordCorrect = 1 ;
        }

        HAL_UART_Receive_IT(&huart2, &usart2_data, 1);
 80006fa:	491f      	ldr	r1, [pc, #124]	@ (8000778 <HAL_UART_RxCpltCallback+0xac>)
 80006fc:	4822      	ldr	r0, [pc, #136]	@ (8000788 <HAL_UART_RxCpltCallback+0xbc>)
 80006fe:	2201      	movs	r2, #1
    }
}
 8000700:	b00a      	add	sp, #40	@ 0x28
 8000702:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HAL_UART_Receive_IT(&huart2, &usart2_data, 1);
 8000706:	f003 bc1b 	b.w	8003f40 <HAL_UART_Receive_IT>
                ring_buffer_read(&usart2_rb, (uint8_t *)&usart_str[i]);
 800070a:	4e1c      	ldr	r6, [pc, #112]	@ (800077c <HAL_UART_RxCpltCallback+0xb0>)
 800070c:	ac03      	add	r4, sp, #12
 800070e:	f10d 0512 	add.w	r5, sp, #18
 8000712:	4621      	mov	r1, r4
 8000714:	4630      	mov	r0, r6
            for (int i = 0; i < 6; i++) {
 8000716:	3401      	adds	r4, #1
                ring_buffer_read(&usart2_rb, (uint8_t *)&usart_str[i]);
 8000718:	f000 fcce 	bl	80010b8 <ring_buffer_read>
            for (int i = 0; i < 6; i++) {
 800071c:	42ac      	cmp	r4, r5
 800071e:	d1f8      	bne.n	8000712 <HAL_UART_RxCpltCallback+0x46>
            usart_input_value = strtol(usart_str, NULL, 10);
 8000720:	220a      	movs	r2, #10
 8000722:	2100      	movs	r1, #0
 8000724:	a803      	add	r0, sp, #12
 8000726:	f004 fd2f 	bl	8005188 <strtol>
 800072a:	4c15      	ldr	r4, [pc, #84]	@ (8000780 <HAL_UART_RxCpltCallback+0xb4>)
 800072c:	4601      	mov	r1, r0
            printf("USART Input: %lu\r\n", usart_input_value);
 800072e:	4817      	ldr	r0, [pc, #92]	@ (800078c <HAL_UART_RxCpltCallback+0xc0>)
            usart_input_value = strtol(usart_str, NULL, 10);
 8000730:	6021      	str	r1, [r4, #0]
            printf("USART Input: %lu\r\n", usart_input_value);
 8000732:	f004 fdf5 	bl	8005320 <iprintf>
            ssd1306_Fill(Black);
 8000736:	2000      	movs	r0, #0
 8000738:	f004 f9c4 	bl	8004ac4 <ssd1306_Fill>
            ssd1306_SetCursor(10, 30);
 800073c:	211e      	movs	r1, #30
 800073e:	200a      	movs	r0, #10
 8000740:	f004 fca2 	bl	8005088 <ssd1306_SetCursor>
            sprintf(usart_oled_str, "USART: %lu", usart_input_value);
 8000744:	6822      	ldr	r2, [r4, #0]
 8000746:	4912      	ldr	r1, [pc, #72]	@ (8000790 <HAL_UART_RxCpltCallback+0xc4>)
 8000748:	a805      	add	r0, sp, #20
 800074a:	f004 fe59 	bl	8005400 <siprintf>
            ssd1306_WriteString(usart_oled_str, Font_6x8, White);
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <HAL_UART_RxCpltCallback+0xc8>)
 8000750:	2201      	movs	r2, #1
 8000752:	9200      	str	r2, [sp, #0]
 8000754:	a805      	add	r0, sp, #20
 8000756:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000758:	f004 fc78 	bl	800504c <ssd1306_WriteString>
            ssd1306_UpdateScreen();
 800075c:	f004 f9be 	bl	8004adc <ssd1306_UpdateScreen>
 8000760:	e7c7      	b.n	80006f2 <HAL_UART_RxCpltCallback+0x26>
            ring_buffer_write(&usart2_rb, usart2_data);
 8000762:	4806      	ldr	r0, [pc, #24]	@ (800077c <HAL_UART_RxCpltCallback+0xb0>)
 8000764:	f000 fc8a 	bl	800107c <ring_buffer_write>
 8000768:	e7bd      	b.n	80006e6 <HAL_UART_RxCpltCallback+0x1a>
        	passwordCorrect = 1 ;
 800076a:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <HAL_UART_RxCpltCallback+0xcc>)
 800076c:	2201      	movs	r2, #1
 800076e:	701a      	strb	r2, [r3, #0]
 8000770:	e7c3      	b.n	80006fa <HAL_UART_RxCpltCallback+0x2e>
 8000772:	bf00      	nop
 8000774:	40004400 	.word	0x40004400
 8000778:	20000014 	.word	0x20000014
 800077c:	200000a8 	.word	0x200000a8
 8000780:	200000a4 	.word	0x200000a4
 8000784:	0800649c 	.word	0x0800649c
 8000788:	200000f8 	.word	0x200000f8
 800078c:	0800647c 	.word	0x0800647c
 8000790:	08006490 	.word	0x08006490
 8000794:	0800670c 	.word	0x0800670c
 8000798:	200000b1 	.word	0x200000b1

0800079c <HAL_GPIO_EXTI_Callback>:
 * - The result of the validation (correct or incorrect) is displayed on the OLED and transmitted via UART.
 * - The buffer is reset after validation.
 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	b084      	sub	sp, #16
	uint8_t key_pressed = keypad_scan(GPIO_Pin);
 80007a0:	f7ff ff36 	bl	8000610 <keypad_scan>
 80007a4:	b2c1      	uxtb	r1, r0

	    if (key_pressed != 0xFF) {
 80007a6:	29ff      	cmp	r1, #255	@ 0xff
	uint8_t key_pressed = keypad_scan(GPIO_Pin);
 80007a8:	f88d 100a 	strb.w	r1, [sp, #10]
	    if (key_pressed != 0xFF) {
 80007ac:	d03f      	beq.n	800082e <HAL_GPIO_EXTI_Callback+0x92>
	        // when '*' is pressed, the sequence is RESET
	        if (key_pressed == '*') {
 80007ae:	292a      	cmp	r1, #42	@ 0x2a
 80007b0:	f000 8091 	beq.w	80008d6 <HAL_GPIO_EXTI_Callback+0x13a>
	            HAL_UART_Transmit(&huart2, (uint8_t*)"Sequence restarted\n\r", 22, 10);
	            return;
	        }

	        // Write the key to the ring buffer
	        if (key_pressed != '#') {
 80007b4:	2923      	cmp	r1, #35	@ 0x23
 80007b6:	d167      	bne.n	8000888 <HAL_GPIO_EXTI_Callback+0xec>



	        uint8_t byte2 = 0;
	        uint8_t id_incorrect2 = 0;
	        uint8_t my_id2[] = "123";  // correct sequence
 80007b8:	4b58      	ldr	r3, [pc, #352]	@ (800091c <HAL_GPIO_EXTI_Callback+0x180>)

	        // Read from buffer and compare with correct key
	        for (uint8_t idx2 = 0; idx2 < sizeof(my_id2) - 1; idx2++) {
	            if (ring_buffer_read(&keyboard_ring_buffer, &byte2) != 0) {
 80007ba:	4d59      	ldr	r5, [pc, #356]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x184>)
	        uint8_t my_id2[] = "123";  // correct sequence
 80007bc:	9303      	str	r3, [sp, #12]
	        uint8_t byte2 = 0;
 80007be:	2200      	movs	r2, #0
 80007c0:	f88d 200b 	strb.w	r2, [sp, #11]
	        for (uint8_t idx2 = 0; idx2 < sizeof(my_id2) - 1; idx2++) {
 80007c4:	ac03      	add	r4, sp, #12
 80007c6:	f10d 060f 	add.w	r6, sp, #15
	            if (ring_buffer_read(&keyboard_ring_buffer, &byte2) != 0) {
 80007ca:	f10d 010b 	add.w	r1, sp, #11
 80007ce:	4628      	mov	r0, r5
 80007d0:	f000 fc72 	bl	80010b8 <ring_buffer_read>
 80007d4:	b368      	cbz	r0, 8000832 <HAL_GPIO_EXTI_Callback+0x96>
	                if (byte2 != my_id2[idx2]) {
 80007d6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80007da:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80007de:	429a      	cmp	r2, r3
 80007e0:	d127      	bne.n	8000832 <HAL_GPIO_EXTI_Callback+0x96>
	        for (uint8_t idx2 = 0; idx2 < sizeof(my_id2) - 1; idx2++) {
 80007e2:	42b4      	cmp	r4, r6
 80007e4:	d1f1      	bne.n	80007ca <HAL_GPIO_EXTI_Callback+0x2e>
	                id_incorrect2 = 1;  // if there is no space in buffer
	                break;
	            }
	        }

	        HAL_UART_Transmit(&huart2, (uint8_t*)"\n", 1, 10);
 80007e6:	230a      	movs	r3, #10
 80007e8:	2201      	movs	r2, #1
 80007ea:	494e      	ldr	r1, [pc, #312]	@ (8000924 <HAL_GPIO_EXTI_Callback+0x188>)
 80007ec:	484e      	ldr	r0, [pc, #312]	@ (8000928 <HAL_GPIO_EXTI_Callback+0x18c>)
 80007ee:	f003 fb37 	bl	8003e60 <HAL_UART_Transmit>

	        if (!id_incorrect2) {
	            // success
	            ssd1306_Fill(Black);
 80007f2:	2000      	movs	r0, #0
 80007f4:	f004 f966 	bl	8004ac4 <ssd1306_Fill>
	            ssd1306_SetCursor(10, 20);
 80007f8:	2114      	movs	r1, #20
 80007fa:	200a      	movs	r0, #10
 80007fc:	f004 fc44 	bl	8005088 <ssd1306_SetCursor>
	            ssd1306_WriteString("correct sequence\n\r", Font_6x8, White);
 8000800:	4b4a      	ldr	r3, [pc, #296]	@ (800092c <HAL_GPIO_EXTI_Callback+0x190>)
 8000802:	484b      	ldr	r0, [pc, #300]	@ (8000930 <HAL_GPIO_EXTI_Callback+0x194>)
 8000804:	2401      	movs	r4, #1
 8000806:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000808:	9400      	str	r4, [sp, #0]
 800080a:	f004 fc1f 	bl	800504c <ssd1306_WriteString>
	            ssd1306_UpdateScreen();
 800080e:	f004 f965 	bl	8004adc <ssd1306_UpdateScreen>
	            HAL_UART_Transmit(&huart2, (uint8_t*)"correct sequence\n\r", 21, 10);
 8000812:	4947      	ldr	r1, [pc, #284]	@ (8000930 <HAL_GPIO_EXTI_Callback+0x194>)
 8000814:	4844      	ldr	r0, [pc, #272]	@ (8000928 <HAL_GPIO_EXTI_Callback+0x18c>)
 8000816:	230a      	movs	r3, #10
 8000818:	2215      	movs	r2, #21
 800081a:	f003 fb21 	bl	8003e60 <HAL_UART_Transmit>
	            HAL_UART_Transmit(&huart2, (uint8_t*)"starting...\n\r", 14, 10);
 800081e:	230a      	movs	r3, #10
 8000820:	4944      	ldr	r1, [pc, #272]	@ (8000934 <HAL_GPIO_EXTI_Callback+0x198>)
 8000822:	4841      	ldr	r0, [pc, #260]	@ (8000928 <HAL_GPIO_EXTI_Callback+0x18c>)
 8000824:	220e      	movs	r2, #14
 8000826:	f003 fb1b 	bl	8003e60 <HAL_UART_Transmit>
	            passwordCorrect = 1 ;
 800082a:	4b43      	ldr	r3, [pc, #268]	@ (8000938 <HAL_GPIO_EXTI_Callback+0x19c>)
 800082c:	701c      	strb	r4, [r3, #0]
	        buffer_index = 0; // reset index buffer
	        cursor_x = 10;  //Resets the horizontal cursor position
	        cursor_y = 30;  // Restarts the vertical position of the course

	    }
}
 800082e:	b004      	add	sp, #16
 8000830:	bd70      	pop	{r4, r5, r6, pc}
	        HAL_UART_Transmit(&huart2, (uint8_t*)"\n", 1, 10);
 8000832:	230a      	movs	r3, #10
 8000834:	2201      	movs	r2, #1
 8000836:	493b      	ldr	r1, [pc, #236]	@ (8000924 <HAL_GPIO_EXTI_Callback+0x188>)
 8000838:	483b      	ldr	r0, [pc, #236]	@ (8000928 <HAL_GPIO_EXTI_Callback+0x18c>)
 800083a:	f003 fb11 	bl	8003e60 <HAL_UART_Transmit>
	            ssd1306_Fill(Black);
 800083e:	2000      	movs	r0, #0
 8000840:	f004 f940 	bl	8004ac4 <ssd1306_Fill>
	            ssd1306_SetCursor(10, 20);
 8000844:	2114      	movs	r1, #20
 8000846:	200a      	movs	r0, #10
 8000848:	f004 fc1e 	bl	8005088 <ssd1306_SetCursor>
	            ssd1306_WriteString("error. Try again ", Font_6x8, White);
 800084c:	4b37      	ldr	r3, [pc, #220]	@ (800092c <HAL_GPIO_EXTI_Callback+0x190>)
 800084e:	483b      	ldr	r0, [pc, #236]	@ (800093c <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000850:	2401      	movs	r4, #1
 8000852:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000854:	9400      	str	r4, [sp, #0]
 8000856:	f004 fbf9 	bl	800504c <ssd1306_WriteString>
	            ssd1306_UpdateScreen();
 800085a:	f004 f93f 	bl	8004adc <ssd1306_UpdateScreen>
	            HAL_UART_Transmit(&huart2, (uint8_t*)" incorrect sequence. Try again  \n\r", 12, 10);
 800085e:	4938      	ldr	r1, [pc, #224]	@ (8000940 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000860:	4831      	ldr	r0, [pc, #196]	@ (8000928 <HAL_GPIO_EXTI_Callback+0x18c>)
 8000862:	230a      	movs	r3, #10
 8000864:	220c      	movs	r2, #12
 8000866:	f003 fafb 	bl	8003e60 <HAL_UART_Transmit>
	        ring_buffer_reset(&keyboard_ring_buffer);
 800086a:	482d      	ldr	r0, [pc, #180]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x184>)
 800086c:	f000 fbf6 	bl	800105c <ring_buffer_reset>
	        memset(display_buffer, 0, sizeof(display_buffer)); // clean buffer on screen
 8000870:	4a34      	ldr	r2, [pc, #208]	@ (8000944 <HAL_GPIO_EXTI_Callback+0x1a8>)
	        buffer_index = 0; // reset index buffer
 8000872:	4935      	ldr	r1, [pc, #212]	@ (8000948 <HAL_GPIO_EXTI_Callback+0x1ac>)
	        memset(display_buffer, 0, sizeof(display_buffer)); // clean buffer on screen
 8000874:	2300      	movs	r3, #0
 8000876:	e9c2 3300 	strd	r3, r3, [r2]
 800087a:	e9c2 3302 	strd	r3, r3, [r2, #8]
 800087e:	6113      	str	r3, [r2, #16]
 8000880:	7513      	strb	r3, [r2, #20]
	        buffer_index = 0; // reset index buffer
 8000882:	700b      	strb	r3, [r1, #0]
}
 8000884:	b004      	add	sp, #16
 8000886:	bd70      	pop	{r4, r5, r6, pc}
	            ring_buffer_write(&keyboard_ring_buffer, key_pressed);
 8000888:	4825      	ldr	r0, [pc, #148]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x184>)
 800088a:	f000 fbf7 	bl	800107c <ring_buffer_write>
	            if (buffer_index < MAX_DISPLAY_CHARS) {
 800088e:	4a2e      	ldr	r2, [pc, #184]	@ (8000948 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000890:	7813      	ldrb	r3, [r2, #0]
 8000892:	2b13      	cmp	r3, #19
 8000894:	d8cb      	bhi.n	800082e <HAL_GPIO_EXTI_Callback+0x92>
	                display_buffer[buffer_index++] = key_pressed;
 8000896:	4c2b      	ldr	r4, [pc, #172]	@ (8000944 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000898:	f89d 000a 	ldrb.w	r0, [sp, #10]
 800089c:	54e0      	strb	r0, [r4, r3]
 800089e:	1c59      	adds	r1, r3, #1
 80008a0:	b2c9      	uxtb	r1, r1
	                display_buffer[buffer_index] = '\0'; // Null-terminar el buffer
 80008a2:	2000      	movs	r0, #0
 80008a4:	5460      	strb	r0, [r4, r1]
	                display_buffer[buffer_index++] = key_pressed;
 80008a6:	7011      	strb	r1, [r2, #0]
	                ssd1306_Fill(Black);
 80008a8:	f004 f90c 	bl	8004ac4 <ssd1306_Fill>
	                ssd1306_SetCursor(10, 30);
 80008ac:	211e      	movs	r1, #30
 80008ae:	200a      	movs	r0, #10
 80008b0:	f004 fbea 	bl	8005088 <ssd1306_SetCursor>
	                ssd1306_WriteString(display_buffer, Font_6x8, White);
 80008b4:	4b1d      	ldr	r3, [pc, #116]	@ (800092c <HAL_GPIO_EXTI_Callback+0x190>)
 80008b6:	2501      	movs	r5, #1
 80008b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008ba:	9500      	str	r5, [sp, #0]
 80008bc:	4620      	mov	r0, r4
 80008be:	f004 fbc5 	bl	800504c <ssd1306_WriteString>
	                ssd1306_UpdateScreen();
 80008c2:	f004 f90b 	bl	8004adc <ssd1306_UpdateScreen>
	                HAL_UART_Transmit(&huart2, &key_pressed, 1, 10);
 80008c6:	230a      	movs	r3, #10
 80008c8:	462a      	mov	r2, r5
 80008ca:	eb0d 0103 	add.w	r1, sp, r3
 80008ce:	4816      	ldr	r0, [pc, #88]	@ (8000928 <HAL_GPIO_EXTI_Callback+0x18c>)
 80008d0:	f003 fac6 	bl	8003e60 <HAL_UART_Transmit>
 80008d4:	e7ab      	b.n	800082e <HAL_GPIO_EXTI_Callback+0x92>
	            ring_buffer_reset(&keyboard_ring_buffer);
 80008d6:	4812      	ldr	r0, [pc, #72]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x184>)
 80008d8:	f000 fbc0 	bl	800105c <ring_buffer_reset>
	            memset(display_buffer, 0, sizeof(display_buffer)); //clean actual buffer on the screen
 80008dc:	4b19      	ldr	r3, [pc, #100]	@ (8000944 <HAL_GPIO_EXTI_Callback+0x1a8>)
	            buffer_index = 0; // reset index on buffer
 80008de:	4a1a      	ldr	r2, [pc, #104]	@ (8000948 <HAL_GPIO_EXTI_Callback+0x1ac>)
	            memset(display_buffer, 0, sizeof(display_buffer)); //clean actual buffer on the screen
 80008e0:	2000      	movs	r0, #0
 80008e2:	e9c3 0000 	strd	r0, r0, [r3]
 80008e6:	e9c3 0002 	strd	r0, r0, [r3, #8]
 80008ea:	6118      	str	r0, [r3, #16]
 80008ec:	7518      	strb	r0, [r3, #20]
	            buffer_index = 0; // reset index on buffer
 80008ee:	7010      	strb	r0, [r2, #0]
	            ssd1306_Fill(Black);
 80008f0:	f004 f8e8 	bl	8004ac4 <ssd1306_Fill>
	            ssd1306_SetCursor(10, 20);
 80008f4:	2114      	movs	r1, #20
 80008f6:	200a      	movs	r0, #10
 80008f8:	f004 fbc6 	bl	8005088 <ssd1306_SetCursor>
	            ssd1306_WriteString("sequence restarted", Font_6x8, White);
 80008fc:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <HAL_GPIO_EXTI_Callback+0x190>)
 80008fe:	2001      	movs	r0, #1
 8000900:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000902:	9000      	str	r0, [sp, #0]
 8000904:	4811      	ldr	r0, [pc, #68]	@ (800094c <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000906:	f004 fba1 	bl	800504c <ssd1306_WriteString>
	            ssd1306_UpdateScreen();
 800090a:	f004 f8e7 	bl	8004adc <ssd1306_UpdateScreen>
	            HAL_UART_Transmit(&huart2, (uint8_t*)"Sequence restarted\n\r", 22, 10);
 800090e:	4910      	ldr	r1, [pc, #64]	@ (8000950 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000910:	4805      	ldr	r0, [pc, #20]	@ (8000928 <HAL_GPIO_EXTI_Callback+0x18c>)
 8000912:	230a      	movs	r3, #10
 8000914:	2216      	movs	r2, #22
 8000916:	f003 faa3 	bl	8003e60 <HAL_UART_Transmit>
	            return;
 800091a:	e788      	b.n	800082e <HAL_GPIO_EXTI_Callback+0x92>
 800091c:	00333231 	.word	0x00333231
 8000920:	200000cc 	.word	0x200000cc
 8000924:	08006534 	.word	0x08006534
 8000928:	200000f8 	.word	0x200000f8
 800092c:	0800670c 	.word	0x0800670c
 8000930:	08006504 	.word	0x08006504
 8000934:	08006518 	.word	0x08006518
 8000938:	200000b1 	.word	0x200000b1
 800093c:	080064cc 	.word	0x080064cc
 8000940:	080064e0 	.word	0x080064e0
 8000944:	200000b4 	.word	0x200000b4
 8000948:	200000b2 	.word	0x200000b2
 800094c:	080064a0 	.word	0x080064a0
 8000950:	080064b4 	.word	0x080064b4
 8000954:	00000000 	.word	0x00000000

08000958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000958:	b510      	push	{r4, lr}
 800095a:	b098      	sub	sp, #96	@ 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095c:	2244      	movs	r2, #68	@ 0x44
 800095e:	2100      	movs	r1, #0
 8000960:	a806      	add	r0, sp, #24
 8000962:	f004 fe5f 	bl	8005624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000966:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000968:	f44f 7000 	mov.w	r0, #512	@ 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8000970:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000974:	9305      	str	r3, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000976:	f002 faa5 	bl	8002ec4 <HAL_PWREx_ControlVoltageScaling>
 800097a:	b108      	cbz	r0, 8000980 <SystemClock_Config+0x28>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097e:	e7fe      	b.n	800097e <SystemClock_Config+0x26>
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000980:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 80009d8 <SystemClock_Config+0x80>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000984:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000988:	2210      	movs	r2, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800098a:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800098c:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000990:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000992:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000994:	220a      	movs	r2, #10
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000996:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800099a:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800099c:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800099e:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009a2:	9112      	str	r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009a4:	9213      	str	r2, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a6:	f002 fb6d 	bl	8003084 <HAL_RCC_OscConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	b108      	cbz	r0, 80009b2 <SystemClock_Config+0x5a>
 80009ae:	b672      	cpsid	i
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <SystemClock_Config+0x58>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009b2:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b4:	240f      	movs	r4, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b6:	2203      	movs	r2, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009b8:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009bc:	e9cd 4201 	strd	r4, r2, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009c0:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c4:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009c6:	f002 fe3d 	bl	8003644 <HAL_RCC_ClockConfig>
 80009ca:	b108      	cbz	r0, 80009d0 <SystemClock_Config+0x78>
 80009cc:	b672      	cpsid	i
  while (1)
 80009ce:	e7fe      	b.n	80009ce <SystemClock_Config+0x76>
}
 80009d0:	b018      	add	sp, #96	@ 0x60
 80009d2:	bd10      	pop	{r4, pc}
 80009d4:	f3af 8000 	nop.w
 80009d8:	00000007 	.word	0x00000007
 80009dc:	00000002 	.word	0x00000002

080009e0 <PeriphCommonClock_Config>:
{
 80009e0:	b500      	push	{lr}
 80009e2:	b0a3      	sub	sp, #140	@ 0x8c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e4:	2100      	movs	r1, #0
 80009e6:	2268      	movs	r2, #104	@ 0x68
 80009e8:	a808      	add	r0, sp, #32
 80009ea:	f004 fe1b 	bl	8005624 <memset>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009ee:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8000a28 <PeriphCommonClock_Config+0x48>
 80009f2:	2001      	movs	r0, #1
 80009f4:	2108      	movs	r1, #8
 80009f6:	ed8d 7b00 	vstr	d7, [sp]
 80009fa:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8000a30 <PeriphCommonClock_Config+0x50>
 80009fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000a02:	2002      	movs	r0, #2
 8000a04:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8000a08:	e9cd 0106 	strd	r0, r1, [sp, #24]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a10:	4668      	mov	r0, sp
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a12:	ed8d 7b04 	vstr	d7, [sp, #16]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a16:	931e      	str	r3, [sp, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a18:	f002 fffc 	bl	8003a14 <HAL_RCCEx_PeriphCLKConfig>
 8000a1c:	b108      	cbz	r0, 8000a22 <PeriphCommonClock_Config+0x42>
 8000a1e:	b672      	cpsid	i
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <PeriphCommonClock_Config+0x40>
}
 8000a22:	b023      	add	sp, #140	@ 0x8c
 8000a24:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a28:	00004000 	.word	0x00004000
 8000a2c:	00000002 	.word	0x00000002
 8000a30:	00000007 	.word	0x00000007
 8000a34:	00000002 	.word	0x00000002

08000a38 <main>:
{
 8000a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	2400      	movs	r4, #0
{
 8000a3e:	b091      	sub	sp, #68	@ 0x44
  HAL_Init();
 8000a40:	f000 fd70 	bl	8001524 <HAL_Init>
  SystemClock_Config();
 8000a44:	f7ff ff88 	bl	8000958 <SystemClock_Config>
  PeriphCommonClock_Config();
 8000a48:	f7ff ffca 	bl	80009e0 <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 8000a50:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a54:	4b9a      	ldr	r3, [pc, #616]	@ (8000cc0 <main+0x288>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	940e      	str	r4, [sp, #56]	@ 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a58:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a5a:	f042 0204 	orr.w	r2, r2, #4
 8000a5e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000a60:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a62:	f002 0204 	and.w	r2, r2, #4
 8000a66:	9203      	str	r2, [sp, #12]
 8000a68:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a6c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000a70:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000a72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a74:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000a78:	9204      	str	r2, [sp, #16]
 8000a7a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a7e:	f042 0201 	orr.w	r2, r2, #1
 8000a82:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000a84:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a86:	f002 0201 	and.w	r2, r2, #1
 8000a8a:	9205      	str	r2, [sp, #20]
 8000a8c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a90:	f042 0202 	orr.w	r2, r2, #2
 8000a94:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a98:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOA, LD1_Pin|SYSTEM_LED_Pin|LD2_Pin|LD3_Pin
 8000a9c:	4622      	mov	r2, r4
 8000a9e:	f641 01f0 	movw	r1, #6384	@ 0x18f0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa2:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, LD1_Pin|SYSTEM_LED_Pin|LD2_Pin|LD3_Pin
 8000aa4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa8:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, LD1_Pin|SYSTEM_LED_Pin|LD2_Pin|LD3_Pin
 8000aaa:	f001 fd77 	bl	800259c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000aae:	4622      	mov	r2, r4
 8000ab0:	4884      	ldr	r0, [pc, #528]	@ (8000cc4 <main+0x28c>)
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	f001 fd72 	bl	800259c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, GPIO_PIN_SET);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000abe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ac2:	f001 fd6b 	bl	800259c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ROW_2_Pin|ROW_4_Pin|ROW_3_Pin, GPIO_PIN_SET);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	487e      	ldr	r0, [pc, #504]	@ (8000cc4 <main+0x28c>)
 8000aca:	2138      	movs	r1, #56	@ 0x38
 8000acc:	f001 fd66 	bl	800259c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ad0:	f44f 5500 	mov.w	r5, #8192	@ 0x2000
 8000ad4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	487b      	ldr	r0, [pc, #492]	@ (8000cc8 <main+0x290>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000adc:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ade:	e9cd 530a 	strd	r5, r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2601      	movs	r6, #1
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f001 fc30 	bl	8002348 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|SYSTEM_LED_Pin|LD2_Pin|LD3_Pin
 8000ae8:	f641 43f0 	movw	r3, #7408	@ 0x1cf0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aec:	a90a      	add	r1, sp, #40	@ 0x28
 8000aee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	e9cd 640b 	strd	r6, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Pin = LD1_Pin|SYSTEM_LED_Pin|LD2_Pin|LD3_Pin
 8000af6:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	940d      	str	r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	f001 fc25 	bl	8002348 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD4_Pin|ROW_2_Pin|ROW_4_Pin|ROW_3_Pin;
 8000afe:	2339      	movs	r3, #57	@ 0x39
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	4870      	ldr	r0, [pc, #448]	@ (8000cc4 <main+0x28c>)
 8000b02:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b04:	f44f 1588 	mov.w	r5, #1114112	@ 0x110000
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b08:	2702      	movs	r7, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	e9cd 360a 	strd	r3, r6, [sp, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b12:	f001 fc19 	bl	8002348 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = COL_1_Pin;
 8000b16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  HAL_GPIO_Init(COL_1_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	486a      	ldr	r0, [pc, #424]	@ (8000cc4 <main+0x28c>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b1c:	970c      	str	r7, [sp, #48]	@ 0x30
  HAL_GPIO_Init(COL_1_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b20:	e9cd 350a 	strd	r3, r5, [sp, #40]	@ 0x28
  HAL_GPIO_Init(COL_1_GPIO_Port, &GPIO_InitStruct);
 8000b24:	f001 fc10 	bl	8002348 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = COL_4_Pin;
 8000b28:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(COL_4_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	4867      	ldr	r0, [pc, #412]	@ (8000cc8 <main+0x290>)
  GPIO_InitStruct.Pin = COL_4_Pin;
 8000b2c:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(COL_4_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b30:	e9cd 570b 	strd	r5, r7, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(COL_4_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f001 fc08 	bl	8002348 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = COL_2_Pin|COL_3_Pin;
 8000b38:	f44f 7340 	mov.w	r3, #768	@ 0x300
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	a90a      	add	r1, sp, #40	@ 0x28
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = COL_2_Pin|COL_3_Pin;
 8000b42:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b44:	950b      	str	r5, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b46:	970c      	str	r7, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b48:	f001 fbfe 	bl	8002348 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b4c:	4622      	mov	r2, r4
 8000b4e:	4621      	mov	r1, r4
 8000b50:	2017      	movs	r0, #23
 8000b52:	f001 fb4b 	bl	80021ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b56:	2017      	movs	r0, #23
 8000b58:	f001 fb84 	bl	8002264 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b5c:	4622      	mov	r2, r4
 8000b5e:	4621      	mov	r1, r4
 8000b60:	2028      	movs	r0, #40	@ 0x28
  hadc1.Instance = ADC1;
 8000b62:	4d5a      	ldr	r5, [pc, #360]	@ (8000ccc <main+0x294>)
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b64:	f001 fb42 	bl	80021ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b68:	2028      	movs	r0, #40	@ 0x28
 8000b6a:	f001 fb7b 	bl	8002264 <HAL_NVIC_EnableIRQ>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000b6e:	4b58      	ldr	r3, [pc, #352]	@ (8000cd0 <main+0x298>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b70:	940f      	str	r4, [sp, #60]	@ 0x3c
  ADC_MultiModeTypeDef multimode = {0};
 8000b72:	e9cd 4407 	strd	r4, r4, [sp, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b76:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 8000b7a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8000b7e:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b82:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b86:	e9c5 440a 	strd	r4, r4, [r5, #40]	@ 0x28
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b8a:	612c      	str	r4, [r5, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b8c:	832c      	strh	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b8e:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b92:	f885 4030 	strb.w	r4, [r5, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b96:	636c      	str	r4, [r5, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b98:	f885 4038 	strb.w	r4, [r5, #56]	@ 0x38
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000b9c:	f44f 2880 	mov.w	r8, #262144	@ 0x40000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ba0:	2404      	movs	r4, #4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ba2:	4628      	mov	r0, r5
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000ba4:	e9c5 3800 	strd	r3, r8, [r5]
  hadc1.Init.NbrOfConversion = 1;
 8000ba8:	61ee      	str	r6, [r5, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000baa:	616c      	str	r4, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bac:	f000 fcf6 	bl	800159c <HAL_ADC_Init>
 8000bb0:	b108      	cbz	r0, 8000bb6 <main+0x17e>
 8000bb2:	b672      	cpsid	i
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <main+0x17c>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bb6:	9007      	str	r0, [sp, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000bb8:	a907      	add	r1, sp, #28
 8000bba:	4628      	mov	r0, r5
 8000bbc:	f001 fa96 	bl	80020ec <HAL_ADCEx_MultiModeConfigChannel>
 8000bc0:	b108      	cbz	r0, 8000bc6 <main+0x18e>
 8000bc2:	b672      	cpsid	i
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <main+0x18c>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bc6:	4b43      	ldr	r3, [pc, #268]	@ (8000cd4 <main+0x29c>)
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000bc8:	970c      	str	r7, [sp, #48]	@ 0x30
  sConfig.Offset = 0;
 8000bca:	900f      	str	r0, [sp, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bcc:	f04f 0906 	mov.w	r9, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bd0:	277f      	movs	r7, #127	@ 0x7f
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd2:	4628      	mov	r0, r5
 8000bd4:	a90a      	add	r1, sp, #40	@ 0x28
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bd6:	e9cd 390a 	strd	r3, r9, [sp, #40]	@ 0x28
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bda:	940e      	str	r4, [sp, #56]	@ 0x38
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bdc:	970d      	str	r7, [sp, #52]	@ 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bde:	f000 ff5f 	bl	8001aa0 <HAL_ADC_ConfigChannel>
 8000be2:	b108      	cbz	r0, 8000be8 <main+0x1b0>
 8000be4:	b672      	cpsid	i
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <main+0x1ae>
  huart2.Instance = USART2;
 8000be8:	4d3b      	ldr	r5, [pc, #236]	@ (8000cd8 <main+0x2a0>)
  huart2.Init.BaudRate = 115200;
 8000bea:	493c      	ldr	r1, [pc, #240]	@ (8000cdc <main+0x2a4>)
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bec:	6128      	str	r0, [r5, #16]
  huart2.Init.BaudRate = 115200;
 8000bee:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bf2:	e9c5 0002 	strd	r0, r0, [r5, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf6:	e9c5 0006 	strd	r0, r0, [r5, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bfa:	e9c5 0008 	strd	r0, r0, [r5, #32]
  huart2.Init.BaudRate = 115200;
 8000bfe:	e9c5 1300 	strd	r1, r3, [r5]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c02:	4628      	mov	r0, r5
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c04:	230c      	movs	r3, #12
 8000c06:	616b      	str	r3, [r5, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c08:	f003 ff28 	bl	8004a5c <HAL_UART_Init>
 8000c0c:	bb28      	cbnz	r0, 8000c5a <main+0x222>
  hadc2.Instance = ADC2;
 8000c0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	@ 8000cf4 <main+0x2bc>
 8000c12:	4b33      	ldr	r3, [pc, #204]	@ (8000ce0 <main+0x2a8>)
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000c14:	f8aa 0018 	strh.w	r0, [sl, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c18:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8000c1c:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 8000c20:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000c24:	e9ca 8001 	strd	r8, r0, [sl, #4]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c28:	e9ca 0003 	strd	r0, r0, [sl, #12]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c2c:	e9ca 000a 	strd	r0, r0, [sl, #40]	@ 0x28
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c30:	f88a 0020 	strb.w	r0, [sl, #32]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000c34:	f88a 0030 	strb.w	r0, [sl, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c38:	f8ca 0034 	str.w	r0, [sl, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000c3c:	f88a 0038 	strb.w	r0, [sl, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c40:	4650      	mov	r0, sl
  hadc2.Instance = ADC2;
 8000c42:	f8ca 3000 	str.w	r3, [sl]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c46:	f8ca 4014 	str.w	r4, [sl, #20]
  hadc2.Init.NbrOfConversion = 1;
 8000c4a:	f8ca 601c 	str.w	r6, [sl, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c4e:	f000 fca5 	bl	800159c <HAL_ADC_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	b118      	cbz	r0, 8000c5e <main+0x226>
 8000c56:	b672      	cpsid	i
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <main+0x220>
 8000c5a:	b672      	cpsid	i
 8000c5c:	e7fe      	b.n	8000c5c <main+0x224>
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c5e:	930c      	str	r3, [sp, #48]	@ 0x30
  sConfig.Offset = 0;
 8000c60:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c62:	4650      	mov	r0, sl
  sConfig.Channel = ADC_CHANNEL_6;
 8000c64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce4 <main+0x2ac>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c66:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c6a:	a90a      	add	r1, sp, #40	@ 0x28
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c6c:	e9cd 740d 	strd	r7, r4, [sp, #52]	@ 0x34
  sConfig.Channel = ADC_CHANNEL_6;
 8000c70:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c72:	f000 ff15 	bl	8001aa0 <HAL_ADC_ConfigChannel>
 8000c76:	b108      	cbz	r0, 8000c7c <main+0x244>
 8000c78:	b672      	cpsid	i
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <main+0x242>
  hi2c1.Instance = I2C1;
 8000c7c:	4c1a      	ldr	r4, [pc, #104]	@ (8000ce8 <main+0x2b0>)
  hi2c1.Init.Timing = 0x10D19CE4;
 8000c7e:	4a1b      	ldr	r2, [pc, #108]	@ (8000cec <main+0x2b4>)
 8000c80:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf0 <main+0x2b8>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c82:	6220      	str	r0, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c84:	e9c4 0602 	strd	r0, r6, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8000c88:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c8c:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c90:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x10D19CE4;
 8000c92:	e9c4 2300 	strd	r2, r3, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c96:	f001 ff61 	bl	8002b5c <HAL_I2C_Init>
 8000c9a:	4601      	mov	r1, r0
 8000c9c:	b108      	cbz	r0, 8000ca2 <main+0x26a>
 8000c9e:	b672      	cpsid	i
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <main+0x268>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	f002 f8b0 	bl	8002e08 <HAL_I2CEx_ConfigAnalogFilter>
 8000ca8:	4601      	mov	r1, r0
 8000caa:	b108      	cbz	r0, 8000cb0 <main+0x278>
 8000cac:	b672      	cpsid	i
  while (1)
 8000cae:	e7fe      	b.n	8000cae <main+0x276>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cb0:	4620      	mov	r0, r4
 8000cb2:	f002 f8d3 	bl	8002e5c <HAL_I2CEx_ConfigDigitalFilter>
 8000cb6:	4604      	mov	r4, r0
 8000cb8:	b1f0      	cbz	r0, 8000cf8 <main+0x2c0>
 8000cba:	b672      	cpsid	i
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <main+0x284>
 8000cbe:	bf00      	nop
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	48000400 	.word	0x48000400
 8000cc8:	48000800 	.word	0x48000800
 8000ccc:	20000238 	.word	0x20000238
 8000cd0:	50040000 	.word	0x50040000
 8000cd4:	14f00020 	.word	0x14f00020
 8000cd8:	200000f8 	.word	0x200000f8
 8000cdc:	40004400 	.word	0x40004400
 8000ce0:	50040100 	.word	0x50040100
 8000ce4:	19200040 	.word	0x19200040
 8000ce8:	20000180 	.word	0x20000180
 8000cec:	40005400 	.word	0x40005400
 8000cf0:	10d19ce4 	.word	0x10d19ce4
 8000cf4:	200001d4 	.word	0x200001d4
  ring_buffer_init(&keyboard_ring_buffer, keyboard_buffer_memory, BUFFER_CAPACITY);
 8000cf8:	220a      	movs	r2, #10
 8000cfa:	49b5      	ldr	r1, [pc, #724]	@ (8000fd0 <main+0x598>)
 8000cfc:	48b5      	ldr	r0, [pc, #724]	@ (8000fd4 <main+0x59c>)
 8000cfe:	4fb6      	ldr	r7, [pc, #728]	@ (8000fd8 <main+0x5a0>)
 8000d00:	f000 f9a6 	bl	8001050 <ring_buffer_init>
  ssd1306_Init();
 8000d04:	f003 ff36 	bl	8004b74 <ssd1306_Init>
  ssd1306_Fill(Black);
 8000d08:	4620      	mov	r0, r4
  ssd1306_WriteString("Starting...\r\n",Font_6x8,White);
 8000d0a:	4cb4      	ldr	r4, [pc, #720]	@ (8000fdc <main+0x5a4>)
  ssd1306_Fill(Black);
 8000d0c:	f003 feda 	bl	8004ac4 <ssd1306_Fill>
  ssd1306_SetCursor(10,20);
 8000d10:	2114      	movs	r1, #20
 8000d12:	200a      	movs	r0, #10
 8000d14:	f004 f9b8 	bl	8005088 <ssd1306_SetCursor>
  ssd1306_WriteString("Starting...\r\n",Font_6x8,White);
 8000d18:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000d1c:	48b0      	ldr	r0, [pc, #704]	@ (8000fe0 <main+0x5a8>)
 8000d1e:	9600      	str	r6, [sp, #0]
 8000d20:	f004 f994 	bl	800504c <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000d24:	f003 feda 	bl	8004adc <ssd1306_UpdateScreen>
  HAL_UART_Receive_IT(&huart2, &usart2_data, 1);
 8000d28:	49ae      	ldr	r1, [pc, #696]	@ (8000fe4 <main+0x5ac>)
 8000d2a:	4632      	mov	r2, r6
 8000d2c:	4628      	mov	r0, r5
 8000d2e:	f003 f907 	bl	8003f40 <HAL_UART_Receive_IT>
  ring_buffer_init(&usart2_rb, usart2_buffer, USART2_RB_LEN);
 8000d32:	48ad      	ldr	r0, [pc, #692]	@ (8000fe8 <main+0x5b0>)
 8000d34:	49ad      	ldr	r1, [pc, #692]	@ (8000fec <main+0x5b4>)
 8000d36:	4632      	mov	r2, r6
 8000d38:	f000 f98a 	bl	8001050 <ring_buffer_init>
  printf("Starting...\r\n");
 8000d3c:	48ac      	ldr	r0, [pc, #688]	@ (8000ff0 <main+0x5b8>)
 8000d3e:	f004 fb57 	bl	80053f0 <puts>
	  if(passwordCorrect)
 8000d42:	783b      	ldrb	r3, [r7, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d0fc      	beq.n	8000d42 <main+0x30a>
	  			 printf("correct password. Welcome to our quality air system \r\n");
 8000d48:	48aa      	ldr	r0, [pc, #680]	@ (8000ff4 <main+0x5bc>)
 8000d4a:	f8df b2f0 	ldr.w	fp, [pc, #752]	@ 800103c <main+0x604>
 8000d4e:	f8df a2f0 	ldr.w	sl, [pc, #752]	@ 8001040 <main+0x608>
 8000d52:	f8df 92f0 	ldr.w	r9, [pc, #752]	@ 8001044 <main+0x60c>
				  HAL_ADC_Start(&hadc1);
 8000d56:	f8df 82f0 	ldr.w	r8, [pc, #752]	@ 8001048 <main+0x610>
				  sprintf(uart_buff, "LDR : %hu \r\n", raw_value_LDR);
 8000d5a:	4ea7      	ldr	r6, [pc, #668]	@ (8000ff8 <main+0x5c0>)
				  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buff, strlen(uart_buff), HAL_MAX_DELAY);
 8000d5c:	4da7      	ldr	r5, [pc, #668]	@ (8000ffc <main+0x5c4>)
	  			 printf("correct password. Welcome to our quality air system \r\n");
 8000d5e:	f004 fb47 	bl	80053f0 <puts>
	  			 ssd1306_Fill(Black);
 8000d62:	2000      	movs	r0, #0
 8000d64:	f003 feae 	bl	8004ac4 <ssd1306_Fill>
				  ssd1306_SetCursor(10, 20);
 8000d68:	2114      	movs	r1, #20
 8000d6a:	200a      	movs	r0, #10
 8000d6c:	f004 f98c 	bl	8005088 <ssd1306_SetCursor>
				  ssd1306_WriteString("Welcome to our quality air system ", Font_6x8, White);
 8000d70:	2301      	movs	r3, #1
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	48a2      	ldr	r0, [pc, #648]	@ (8001000 <main+0x5c8>)
 8000d76:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000d7a:	f004 f967 	bl	800504c <ssd1306_WriteString>
				  ssd1306_UpdateScreen();
 8000d7e:	f003 fead 	bl	8004adc <ssd1306_UpdateScreen>
	  			 passwordCorrect =0  ;
 8000d82:	2300      	movs	r3, #0
 8000d84:	703b      	strb	r3, [r7, #0]
	  			    if (HAL_GetTick() - last_heartbeat_time >= 500) // toggling for 1Hz (500ms on / 500ms off)
 8000d86:	f000 fbf1 	bl	800156c <HAL_GetTick>
 8000d8a:	f8db 3000 	ldr.w	r3, [fp]
 8000d8e:	1ac3      	subs	r3, r0, r3
 8000d90:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000d94:	f080 80e6 	bcs.w	8000f64 <main+0x52c>
				  HAL_ADC_Start(&hadc1);
 8000d98:	4640      	mov	r0, r8
 8000d9a:	f001 f931 	bl	8002000 <HAL_ADC_Start>
				  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000d9e:	f04f 31ff 	mov.w	r1, #4294967295
 8000da2:	4640      	mov	r0, r8
 8000da4:	f000 fcd6 	bl	8001754 <HAL_ADC_PollForConversion>
				  raw_value_LDR = HAL_ADC_GetValue(&hadc1);
 8000da8:	4640      	mov	r0, r8
 8000daa:	f000 fd4d 	bl	8001848 <HAL_ADC_GetValue>
				  ssd1306_WriteString(buffer_LDR, Font_6x8, White); // Write LDR value
 8000dae:	2701      	movs	r7, #1
				  sprintf(buffer_LDR, "%4hu", raw_value_LDR); // Convert to 4-digit unsigned short
 8000db0:	b282      	uxth	r2, r0
 8000db2:	4994      	ldr	r1, [pc, #592]	@ (8001004 <main+0x5cc>)
				  raw_value_LDR = HAL_ADC_GetValue(&hadc1);
 8000db4:	f8aa 0000 	strh.w	r0, [sl]
				  sprintf(buffer_LDR, "%4hu", raw_value_LDR); // Convert to 4-digit unsigned short
 8000db8:	a807      	add	r0, sp, #28
 8000dba:	f004 fb21 	bl	8005400 <siprintf>
				  ssd1306_SetCursor(50, 1);  // Set cursor to top-right of the OLED
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	2032      	movs	r0, #50	@ 0x32
 8000dc2:	f004 f961 	bl	8005088 <ssd1306_SetCursor>
				  ssd1306_WriteString(buffer_LDR, Font_6x8, White); // Write LDR value
 8000dc6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000dca:	9700      	str	r7, [sp, #0]
 8000dcc:	a807      	add	r0, sp, #28
 8000dce:	f004 f93d 	bl	800504c <ssd1306_WriteString>
				  ssd1306_UpdateScreen();
 8000dd2:	f003 fe83 	bl	8004adc <ssd1306_UpdateScreen>
				  sprintf(uart_buff, "LDR : %hu \r\n", raw_value_LDR);
 8000dd6:	f8ba 2000 	ldrh.w	r2, [sl]
 8000dda:	498b      	ldr	r1, [pc, #556]	@ (8001008 <main+0x5d0>)
 8000ddc:	4630      	mov	r0, r6
 8000dde:	f004 fb0f 	bl	8005400 <siprintf>
				  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buff, strlen(uart_buff), HAL_MAX_DELAY);
 8000de2:	4630      	mov	r0, r6
 8000de4:	f7ff f9f4 	bl	80001d0 <strlen>
 8000de8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dec:	b282      	uxth	r2, r0
 8000dee:	4631      	mov	r1, r6
 8000df0:	4628      	mov	r0, r5
 8000df2:	f003 f835 	bl	8003e60 <HAL_UART_Transmit>
					HAL_ADC_Start(&hadc2);
 8000df6:	4885      	ldr	r0, [pc, #532]	@ (800100c <main+0x5d4>)
 8000df8:	f001 f902 	bl	8002000 <HAL_ADC_Start>
					HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000e00:	4882      	ldr	r0, [pc, #520]	@ (800100c <main+0x5d4>)
 8000e02:	f000 fca7 	bl	8001754 <HAL_ADC_PollForConversion>
					raw_value_NTC = HAL_ADC_GetValue(&hadc2);
 8000e06:	4881      	ldr	r0, [pc, #516]	@ (800100c <main+0x5d4>)
 8000e08:	f000 fd1e 	bl	8001848 <HAL_ADC_GetValue>
					sprintf(buffer_NTC, "%4hu", raw_value_NTC); // Convert to 4-digit unsigned short
 8000e0c:	497d      	ldr	r1, [pc, #500]	@ (8001004 <main+0x5cc>)
					raw_value_NTC = HAL_ADC_GetValue(&hadc2);
 8000e0e:	f8a9 0000 	strh.w	r0, [r9]
					sprintf(buffer_NTC, "%4hu", raw_value_NTC); // Convert to 4-digit unsigned short
 8000e12:	b282      	uxth	r2, r0
 8000e14:	a80a      	add	r0, sp, #40	@ 0x28
 8000e16:	f004 faf3 	bl	8005400 <siprintf>
					ssd1306_SetCursor(80,1);  // Adjust the cursor position slightly below LDR
 8000e1a:	4639      	mov	r1, r7
 8000e1c:	2050      	movs	r0, #80	@ 0x50
 8000e1e:	f004 f933 	bl	8005088 <ssd1306_SetCursor>
					ssd1306_WriteString(buffer_NTC, Font_6x8, White); // Write NTC value
 8000e22:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000e26:	9700      	str	r7, [sp, #0]
 8000e28:	a80a      	add	r0, sp, #40	@ 0x28
 8000e2a:	f004 f90f 	bl	800504c <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8000e2e:	f003 fe55 	bl	8004adc <ssd1306_UpdateScreen>
					sprintf(uart_buff, "NTC : %hu \r\n", raw_value_NTC);
 8000e32:	f8b9 2000 	ldrh.w	r2, [r9]
 8000e36:	4976      	ldr	r1, [pc, #472]	@ (8001010 <main+0x5d8>)
 8000e38:	4630      	mov	r0, r6
 8000e3a:	f004 fae1 	bl	8005400 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)uart_buff, strlen(uart_buff), HAL_MAX_DELAY);
 8000e3e:	4630      	mov	r0, r6
 8000e40:	f7ff f9c6 	bl	80001d0 <strlen>
 8000e44:	f04f 33ff 	mov.w	r3, #4294967295
 8000e48:	b282      	uxth	r2, r0
 8000e4a:	4631      	mov	r1, r6
 8000e4c:	4628      	mov	r0, r5
 8000e4e:	f003 f807 	bl	8003e60 <HAL_UART_Transmit>
					HAL_Delay(1000);
 8000e52:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e56:	f000 fb8f 	bl	8001578 <HAL_Delay>
	  			  		  if ( raw_value_LDR > 3000 ||  HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)== 0 ){
 8000e5a:	f8ba 2000 	ldrh.w	r2, [sl]
 8000e5e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d807      	bhi.n	8000e76 <main+0x43e>
 8000e66:	486b      	ldr	r0, [pc, #428]	@ (8001014 <main+0x5dc>)
 8000e68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e6c:	f001 fb90 	bl	8002590 <HAL_GPIO_ReadPin>
 8000e70:	2800      	cmp	r0, #0
 8000e72:	f040 8081 	bne.w	8000f78 <main+0x540>
	  			  			  	  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin , 1 );
 8000e76:	2201      	movs	r2, #1
 8000e78:	4611      	mov	r1, r2
 8000e7a:	4867      	ldr	r0, [pc, #412]	@ (8001018 <main+0x5e0>)
 8000e7c:	f001 fb8e 	bl	800259c <HAL_GPIO_WritePin>
	  			  			  	  ssd1306_SetCursor(80, 50);
 8000e80:	2132      	movs	r1, #50	@ 0x32
 8000e82:	2050      	movs	r0, #80	@ 0x50
 8000e84:	f004 f900 	bl	8005088 <ssd1306_SetCursor>
	  			  			  	  ssd1306_WriteString("optimal light detected", Font_6x8, White);
 8000e88:	2301      	movs	r3, #1
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	4863      	ldr	r0, [pc, #396]	@ (800101c <main+0x5e4>)
 8000e8e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000e92:	f004 f8db 	bl	800504c <ssd1306_WriteString>
	  			  			  	  ssd1306_UpdateScreen();
 8000e96:	f003 fe21 	bl	8004adc <ssd1306_UpdateScreen>
	  			  			  	  HAL_UART_Transmit(&huart2, (uint8_t*)" optimal light detected \n\r", 12, 10);
 8000e9a:	4961      	ldr	r1, [pc, #388]	@ (8001020 <main+0x5e8>)
 8000e9c:	230a      	movs	r3, #10
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	4628      	mov	r0, r5
 8000ea2:	f002 ffdd 	bl	8003e60 <HAL_UART_Transmit>
	  			  		 if (raw_value_NTC <= 1700) {
 8000ea6:	f8b9 3000 	ldrh.w	r3, [r9]
 8000eaa:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d828      	bhi.n	8000f04 <main+0x4cc>
	  						  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2110      	movs	r1, #16
 8000eb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eba:	f001 fb6f 	bl	800259c <HAL_GPIO_WritePin>
	  						  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2140      	movs	r1, #64	@ 0x40
 8000ec2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ec6:	f001 fb69 	bl	800259c <HAL_GPIO_WritePin>
	  						  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2180      	movs	r1, #128	@ 0x80
 8000ece:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ed2:	f001 fb63 	bl	800259c <HAL_GPIO_WritePin>
	  						  ssd1306_Fill(Black);
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f003 fdf4 	bl	8004ac4 <ssd1306_Fill>
							  ssd1306_SetCursor(10, 20);
 8000edc:	2114      	movs	r1, #20
 8000ede:	200a      	movs	r0, #10
 8000ee0:	f004 f8d2 	bl	8005088 <ssd1306_SetCursor>
							  ssd1306_WriteString("Safe temperature", Font_6x8, White);
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	484e      	ldr	r0, [pc, #312]	@ (8001024 <main+0x5ec>)
 8000eea:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000eee:	f004 f8ad 	bl	800504c <ssd1306_WriteString>
							  ssd1306_UpdateScreen();
 8000ef2:	f003 fdf3 	bl	8004adc <ssd1306_UpdateScreen>
							  HAL_UART_Transmit(&huart2, (uint8_t*)" Safe temperature threshold \n\r", 12, 10);
 8000ef6:	494c      	ldr	r1, [pc, #304]	@ (8001028 <main+0x5f0>)
 8000ef8:	230a      	movs	r3, #10
 8000efa:	220c      	movs	r2, #12
 8000efc:	4628      	mov	r0, r5
 8000efe:	f002 ffaf 	bl	8003e60 <HAL_UART_Transmit>
 8000f02:	e740      	b.n	8000d86 <main+0x34e>
	  					  else if (raw_value_NTC > 1700 && raw_value_NTC <= 3300) {
 8000f04:	f2a3 63a5 	subw	r3, r3, #1701	@ 0x6a5
 8000f08:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
	  						  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000f0c:	f04f 0201 	mov.w	r2, #1
 8000f10:	f04f 0110 	mov.w	r1, #16
 8000f14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	  					  else if (raw_value_NTC > 1700 && raw_value_NTC <= 3300) {
 8000f18:	d234      	bcs.n	8000f84 <main+0x54c>
	  						  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000f1a:	f001 fb3f 	bl	800259c <HAL_GPIO_WritePin>
	  						  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2140      	movs	r1, #64	@ 0x40
 8000f22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f26:	f001 fb39 	bl	800259c <HAL_GPIO_WritePin>
	  						  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2180      	movs	r1, #128	@ 0x80
 8000f2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f32:	f001 fb33 	bl	800259c <HAL_GPIO_WritePin>
	  						  ssd1306_Fill(Black);
 8000f36:	2000      	movs	r0, #0
 8000f38:	f003 fdc4 	bl	8004ac4 <ssd1306_Fill>
							  ssd1306_SetCursor(10, 20);
 8000f3c:	2114      	movs	r1, #20
 8000f3e:	200a      	movs	r0, #10
 8000f40:	f004 f8a2 	bl	8005088 <ssd1306_SetCursor>
							  ssd1306_WriteString("Higher temperature ", Font_6x8, White);
 8000f44:	2301      	movs	r3, #1
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	4838      	ldr	r0, [pc, #224]	@ (800102c <main+0x5f4>)
 8000f4a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000f4e:	f004 f87d 	bl	800504c <ssd1306_WriteString>
							  ssd1306_UpdateScreen();
 8000f52:	f003 fdc3 	bl	8004adc <ssd1306_UpdateScreen>
							  HAL_UART_Transmit(&huart2, (uint8_t*)" Higher than average temperature threshold \n\r", 12, 10);
 8000f56:	4936      	ldr	r1, [pc, #216]	@ (8001030 <main+0x5f8>)
 8000f58:	230a      	movs	r3, #10
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	f002 ff7f 	bl	8003e60 <HAL_UART_Transmit>
 8000f62:	e710      	b.n	8000d86 <main+0x34e>
	  			      HAL_GPIO_TogglePin(GPIOA, SYSTEM_LED_Pin);
 8000f64:	2120      	movs	r1, #32
 8000f66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f6a:	f001 fb1d 	bl	80025a8 <HAL_GPIO_TogglePin>
	  			      last_heartbeat_time = HAL_GetTick();
 8000f6e:	f000 fafd 	bl	800156c <HAL_GetTick>
 8000f72:	f8cb 0000 	str.w	r0, [fp]
 8000f76:	e70f      	b.n	8000d98 <main+0x360>
	  			  			  	  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin , 0 );
 8000f78:	4827      	ldr	r0, [pc, #156]	@ (8001018 <main+0x5e0>)
 8000f7a:	4639      	mov	r1, r7
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f001 fb0d 	bl	800259c <HAL_GPIO_WritePin>
 8000f82:	e790      	b.n	8000ea6 <main+0x46e>
	  						  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000f84:	f001 fb0a 	bl	800259c <HAL_GPIO_WritePin>
	  						  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2140      	movs	r1, #64	@ 0x40
 8000f8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f90:	f001 fb04 	bl	800259c <HAL_GPIO_WritePin>
	  						  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2180      	movs	r1, #128	@ 0x80
 8000f98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f9c:	f001 fafe 	bl	800259c <HAL_GPIO_WritePin>
	  						  ssd1306_Fill(Black);
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f003 fd8f 	bl	8004ac4 <ssd1306_Fill>
							  ssd1306_SetCursor(10, 20);
 8000fa6:	2114      	movs	r1, #20
 8000fa8:	200a      	movs	r0, #10
 8000faa:	f004 f86d 	bl	8005088 <ssd1306_SetCursor>
							  ssd1306_WriteString("H HIGH tempt detected.", Font_6x8, White);
 8000fae:	2301      	movs	r3, #1
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	4820      	ldr	r0, [pc, #128]	@ (8001034 <main+0x5fc>)
 8000fb4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000fb8:	f004 f848 	bl	800504c <ssd1306_WriteString>
							  ssd1306_UpdateScreen();
 8000fbc:	f003 fd8e 	bl	8004adc <ssd1306_UpdateScreen>
							  HAL_UART_Transmit(&huart2, (uint8_t*)" Take care.High tempt detected. \n\r", 12, 10);
 8000fc0:	491d      	ldr	r1, [pc, #116]	@ (8001038 <main+0x600>)
 8000fc2:	230a      	movs	r3, #10
 8000fc4:	220c      	movs	r2, #12
 8000fc6:	4628      	mov	r0, r5
 8000fc8:	f002 ff4a 	bl	8003e60 <HAL_UART_Transmit>
	  		  {
 8000fcc:	e6db      	b.n	8000d86 <main+0x34e>
 8000fce:	bf00      	nop
 8000fd0:	200000d4 	.word	0x200000d4
 8000fd4:	200000cc 	.word	0x200000cc
 8000fd8:	200000b1 	.word	0x200000b1
 8000fdc:	0800670c 	.word	0x0800670c
 8000fe0:	08006528 	.word	0x08006528
 8000fe4:	20000014 	.word	0x20000014
 8000fe8:	200000a8 	.word	0x200000a8
 8000fec:	200000b0 	.word	0x200000b0
 8000ff0:	08006538 	.word	0x08006538
 8000ff4:	08006548 	.word	0x08006548
 8000ff8:	200000e4 	.word	0x200000e4
 8000ffc:	200000f8 	.word	0x200000f8
 8001000:	08006580 	.word	0x08006580
 8001004:	080065a4 	.word	0x080065a4
 8001008:	080065ac 	.word	0x080065ac
 800100c:	200001d4 	.word	0x200001d4
 8001010:	080065bc 	.word	0x080065bc
 8001014:	48000800 	.word	0x48000800
 8001018:	48000400 	.word	0x48000400
 800101c:	080065cc 	.word	0x080065cc
 8001020:	080065e4 	.word	0x080065e4
 8001024:	08006600 	.word	0x08006600
 8001028:	08006614 	.word	0x08006614
 800102c:	08006634 	.word	0x08006634
 8001030:	08006648 	.word	0x08006648
 8001034:	08006678 	.word	0x08006678
 8001038:	08006690 	.word	0x08006690
 800103c:	200000a0 	.word	0x200000a0
 8001040:	200000de 	.word	0x200000de
 8001044:	200000e0 	.word	0x200000e0
 8001048:	20000238 	.word	0x20000238

0800104c <Error_Handler>:
 800104c:	b672      	cpsid	i
  while (1)
 800104e:	e7fe      	b.n	800104e <Error_Handler+0x2>

08001050 <ring_buffer_init>:
 *
 * @retval size: cantidad de datos disponibles
 */
void ring_buffer_reset(ring_buffer_t *rb)
{
	rb->head = 0;
 8001050:	2300      	movs	r3, #0
	rb->buffer = mem_add;
 8001052:	6001      	str	r1, [r0, #0]
	rb->capacity = cap;
 8001054:	71c2      	strb	r2, [r0, #7]
	rb->head = 0;
 8001056:	8083      	strh	r3, [r0, #4]
	rb->tail = 0;
	rb->is_full = 0;
 8001058:	7183      	strb	r3, [r0, #6]
}
 800105a:	4770      	bx	lr

0800105c <ring_buffer_reset>:
	rb->head = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	8083      	strh	r3, [r0, #4]
	rb->is_full = 0;
 8001060:	7183      	strb	r3, [r0, #6]
}
 8001062:	4770      	bx	lr

08001064 <ring_buffer_size>:
 * @retval size: cantidad de datos disponibles
 */
uint8_t ring_buffer_size(ring_buffer_t *rb)
{
	uint8_t size = 0;
	if (rb->head >= rb->tail) {
 8001064:	7903      	ldrb	r3, [r0, #4]
 8001066:	7942      	ldrb	r2, [r0, #5]
 8001068:	4293      	cmp	r3, r2
 800106a:	d203      	bcs.n	8001074 <ring_buffer_size+0x10>
		size = rb->head - rb->tail;
	} else if (rb->is_full == 0) {
 800106c:	7981      	ldrb	r1, [r0, #6]
		size = (rb->capacity - rb->tail) + rb->head;
 800106e:	79c0      	ldrb	r0, [r0, #7]
	} else if (rb->is_full == 0) {
 8001070:	b911      	cbnz	r1, 8001078 <ring_buffer_size+0x14>
		size = (rb->capacity - rb->tail) + rb->head;
 8001072:	4403      	add	r3, r0
 8001074:	1a9b      	subs	r3, r3, r2
 8001076:	b2d8      	uxtb	r0, r3
	} else {
		size = rb->capacity;
	}
	return size;
}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop

0800107c <ring_buffer_write>:
 *
 * @retval Ninguno
 */
void ring_buffer_write(ring_buffer_t *rb, uint8_t data)
{
	rb->buffer[rb->head] = data;
 800107c:	7903      	ldrb	r3, [r0, #4]
 800107e:	6802      	ldr	r2, [r0, #0]
{
 8001080:	b410      	push	{r4}
	rb->buffer[rb->head] = data;
 8001082:	54d1      	strb	r1, [r2, r3]
	rb->head = rb->head + 1;
 8001084:	7903      	ldrb	r3, [r0, #4]

	if (rb->head >= rb->capacity) { // si la cabeza llega al final de la memoria
 8001086:	79c1      	ldrb	r1, [r0, #7]
		rb->head = 0;
	}

	if (rb->is_full != 0) { // si se pierden datos viejos
 8001088:	7984      	ldrb	r4, [r0, #6]
		rb->tail = rb->tail + 1;
 800108a:	7942      	ldrb	r2, [r0, #5]
	rb->head = rb->head + 1;
 800108c:	3301      	adds	r3, #1
 800108e:	b2db      	uxtb	r3, r3
		rb->head = 0;
 8001090:	428b      	cmp	r3, r1
 8001092:	bf28      	it	cs
 8001094:	2300      	movcs	r3, #0
 8001096:	7103      	strb	r3, [r0, #4]
	if (rb->is_full != 0) { // si se pierden datos viejos
 8001098:	b114      	cbz	r4, 80010a0 <ring_buffer_write+0x24>
		rb->tail = rb->tail + 1;
 800109a:	3201      	adds	r2, #1
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	7142      	strb	r2, [r0, #5]
	}

	if (rb->tail >= rb->capacity) { // si la cola llega al final de la memoria
 80010a0:	4291      	cmp	r1, r2
		rb->tail = 0;
 80010a2:	bf9c      	itt	ls
 80010a4:	2200      	movls	r2, #0
 80010a6:	7142      	strbls	r2, [r0, #5]
	}

	if (rb->head == rb->tail) { // si la cabeza alcanza la cola
 80010a8:	429a      	cmp	r2, r3
		rb->is_full = 1;
 80010aa:	bf08      	it	eq
 80010ac:	2301      	moveq	r3, #1
	}
}
 80010ae:	f85d 4b04 	ldr.w	r4, [sp], #4
		rb->is_full = 1;
 80010b2:	bf08      	it	eq
 80010b4:	7183      	strbeq	r3, [r0, #6]
}
 80010b6:	4770      	bx	lr

080010b8 <ring_buffer_read>:
 * @param data: la direccion de donde se va a escribir el dato
 *
 * @retval 1: hay datos disponibles, 0: no hay datos
 */
uint8_t ring_buffer_read(ring_buffer_t *rb, uint8_t *data) // 0x20
{
 80010b8:	4603      	mov	r3, r0
	if ((rb->is_full != 0) || (rb->head != rb->tail)) { // data available
 80010ba:	7980      	ldrb	r0, [r0, #6]
 80010bc:	795a      	ldrb	r2, [r3, #5]
 80010be:	b918      	cbnz	r0, 80010c8 <ring_buffer_read+0x10>
 80010c0:	f893 c004 	ldrb.w	ip, [r3, #4]
 80010c4:	4594      	cmp	ip, r2
 80010c6:	d011      	beq.n	80010ec <ring_buffer_read+0x34>
{
 80010c8:	b410      	push	{r4}
		*data = rb->buffer[rb->tail]; // add: 0x20, val: buffer
 80010ca:	681c      	ldr	r4, [r3, #0]
 80010cc:	5ca2      	ldrb	r2, [r4, r2]
 80010ce:	700a      	strb	r2, [r1, #0]
		rb->tail = rb->tail + 1;
 80010d0:	795a      	ldrb	r2, [r3, #5]
		if (rb->tail >= rb->capacity) {
 80010d2:	79d9      	ldrb	r1, [r3, #7]
		rb->tail = rb->tail + 1;
 80010d4:	3201      	adds	r2, #1
			rb->tail = 0;
		}
		rb->is_full = 0;
 80010d6:	2000      	movs	r0, #0
		rb->tail = rb->tail + 1;
 80010d8:	b2d2      	uxtb	r2, r2
			rb->tail = 0;
 80010da:	4291      	cmp	r1, r2
 80010dc:	bf98      	it	ls
 80010de:	4602      	movls	r2, r0
		rb->is_full = 0;
 80010e0:	7198      	strb	r0, [r3, #6]
 80010e2:	715a      	strb	r2, [r3, #5]

		return 1; // buffer con datos
 80010e4:	2001      	movs	r0, #1
	}
	return 0; // buffer vacio
}
 80010e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <HAL_MspInit+0x40>)
{
 80010f2:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f4:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 80010f6:	f041 0101 	orr.w	r1, r1, #1
 80010fa:	6619      	str	r1, [r3, #96]	@ 0x60
 80010fc:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
{
 80010fe:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001100:	f004 0401 	and.w	r4, r4, #1
 8001104:	9400      	str	r4, [sp, #0]
 8001106:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001108:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 800110a:	f044 5480 	orr.w	r4, r4, #268435456	@ 0x10000000
 800110e:	659c      	str	r4, [r3, #88]	@ 0x58
 8001110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8001114:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001118:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 800111a:	2051      	movs	r0, #81	@ 0x51
 800111c:	4611      	mov	r1, r2
  __HAL_RCC_PWR_CLK_ENABLE();
 800111e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8001120:	f001 f864 	bl	80021ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8001124:	2051      	movs	r0, #81	@ 0x51

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001126:	b002      	add	sp, #8
 8001128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 800112c:	f001 b89a 	b.w	8002264 <HAL_NVIC_EnableIRQ>
 8001130:	40021000 	.word	0x40021000
 8001134:	00000000 	.word	0x00000000

08001138 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001138:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 800113a:	6802      	ldr	r2, [r0, #0]
 800113c:	493a      	ldr	r1, [pc, #232]	@ (8001228 <HAL_ADC_MspInit+0xf0>)
{
 800113e:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8001142:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001148:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800114c:	9308      	str	r3, [sp, #32]
  if(hadc->Instance==ADC1)
 800114e:	d029      	beq.n	80011a4 <HAL_ADC_MspInit+0x6c>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8001150:	4b36      	ldr	r3, [pc, #216]	@ (800122c <HAL_ADC_MspInit+0xf4>)
 8001152:	429a      	cmp	r2, r3
 8001154:	d002      	beq.n	800115c <HAL_ADC_MspInit+0x24>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001156:	b00b      	add	sp, #44	@ 0x2c
 8001158:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_ADC_CLK_ENABLED++;
 800115c:	4a34      	ldr	r2, [pc, #208]	@ (8001230 <HAL_ADC_MspInit+0xf8>)
 800115e:	6813      	ldr	r3, [r2, #0]
 8001160:	3301      	adds	r3, #1
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001162:	2b01      	cmp	r3, #1
    HAL_RCC_ADC_CLK_ENABLED++;
 8001164:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001166:	d04c      	beq.n	8001202 <HAL_ADC_MspInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001168:	4b32      	ldr	r3, [pc, #200]	@ (8001234 <HAL_ADC_MspInit+0xfc>)
 800116a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800116c:	f042 0201 	orr.w	r2, r2, #1
 8001170:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001174:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8001218 <HAL_ADC_MspInit+0xe0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001178:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001180:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001184:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001188:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f001 f8dd 	bl	8002348 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	4611      	mov	r1, r2
 8001192:	2012      	movs	r0, #18
 8001194:	f001 f82a 	bl	80021ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001198:	2012      	movs	r0, #18
 800119a:	f001 f863 	bl	8002264 <HAL_NVIC_EnableIRQ>
}
 800119e:	b00b      	add	sp, #44	@ 0x2c
 80011a0:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_ADC_CLK_ENABLED++;
 80011a4:	4a22      	ldr	r2, [pc, #136]	@ (8001230 <HAL_ADC_MspInit+0xf8>)
 80011a6:	6813      	ldr	r3, [r2, #0]
 80011a8:	3301      	adds	r3, #1
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80011aa:	2b01      	cmp	r3, #1
    HAL_RCC_ADC_CLK_ENABLED++;
 80011ac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80011ae:	d01d      	beq.n	80011ec <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	4b20      	ldr	r3, [pc, #128]	@ (8001234 <HAL_ADC_MspInit+0xfc>)
 80011b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80011b4:	f042 0201 	orr.w	r2, r2, #1
 80011b8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80011ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011bc:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8001220 <HAL_ADC_MspInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c0:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c4:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011cc:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d0:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d2:	f001 f8b9 	bl	8002348 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	4611      	mov	r1, r2
 80011da:	2012      	movs	r0, #18
 80011dc:	f001 f806 	bl	80021ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80011e0:	2012      	movs	r0, #18
 80011e2:	f001 f83f 	bl	8002264 <HAL_NVIC_EnableIRQ>
}
 80011e6:	b00b      	add	sp, #44	@ 0x2c
 80011e8:	f85d fb04 	ldr.w	pc, [sp], #4
      __HAL_RCC_ADC_CLK_ENABLE();
 80011ec:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <HAL_ADC_MspInit+0xfc>)
 80011ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80011f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80011f4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80011f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	9b00      	ldr	r3, [sp, #0]
 8001200:	e7d6      	b.n	80011b0 <HAL_ADC_MspInit+0x78>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001202:	4b0c      	ldr	r3, [pc, #48]	@ (8001234 <HAL_ADC_MspInit+0xfc>)
 8001204:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001206:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800120a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800120c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001212:	9302      	str	r3, [sp, #8]
 8001214:	9b02      	ldr	r3, [sp, #8]
 8001216:	e7a7      	b.n	8001168 <HAL_ADC_MspInit+0x30>
 8001218:	00000002 	.word	0x00000002
 800121c:	0000000b 	.word	0x0000000b
 8001220:	00000001 	.word	0x00000001
 8001224:	0000000b 	.word	0x0000000b
 8001228:	50040000 	.word	0x50040000
 800122c:	50040100 	.word	0x50040100
 8001230:	2000029c 	.word	0x2000029c
 8001234:	40021000 	.word	0x40021000

08001238 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001238:	b510      	push	{r4, lr}
 800123a:	4604      	mov	r4, r0
 800123c:	b0aa      	sub	sp, #168	@ 0xa8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001240:	2288      	movs	r2, #136	@ 0x88
 8001242:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001248:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800124c:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800124e:	f004 f9e9 	bl	8005624 <memset>
  if(hi2c->Instance==I2C1)
 8001252:	4b19      	ldr	r3, [pc, #100]	@ (80012b8 <HAL_I2C_MspInit+0x80>)
 8001254:	6822      	ldr	r2, [r4, #0]
 8001256:	429a      	cmp	r2, r3
 8001258:	d001      	beq.n	800125e <HAL_I2C_MspInit+0x26>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800125a:	b02a      	add	sp, #168	@ 0xa8
 800125c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800125e:	2340      	movs	r3, #64	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001260:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001262:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001264:	f002 fbd6 	bl	8003a14 <HAL_RCCEx_PeriphCLKConfig>
 8001268:	bb18      	cbnz	r0, 80012b2 <HAL_I2C_MspInit+0x7a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	4c14      	ldr	r4, [pc, #80]	@ (80012bc <HAL_I2C_MspInit+0x84>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126c:	4814      	ldr	r0, [pc, #80]	@ (80012c0 <HAL_I2C_MspInit+0x88>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001276:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800127e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001282:	2312      	movs	r3, #18
 8001284:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001288:	2200      	movs	r2, #0
 800128a:	2303      	movs	r3, #3
 800128c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001290:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001292:	2304      	movs	r3, #4
 8001294:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001298:	f001 f856 	bl	8002348 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800129c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800129e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012a2:	65a3      	str	r3, [r4, #88]	@ 0x58
 80012a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80012a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	9b01      	ldr	r3, [sp, #4]
}
 80012ae:	b02a      	add	sp, #168	@ 0xa8
 80012b0:	bd10      	pop	{r4, pc}
      Error_Handler();
 80012b2:	f7ff fecb 	bl	800104c <Error_Handler>
 80012b6:	e7d8      	b.n	800126a <HAL_I2C_MspInit+0x32>
 80012b8:	40005400 	.word	0x40005400
 80012bc:	40021000 	.word	0x40021000
 80012c0:	48000400 	.word	0x48000400
 80012c4:	00000000 	.word	0x00000000

080012c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012c8:	b510      	push	{r4, lr}
 80012ca:	4604      	mov	r4, r0
 80012cc:	b0aa      	sub	sp, #168	@ 0xa8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ce:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012d0:	2288      	movs	r2, #136	@ 0x88
 80012d2:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80012d8:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80012dc:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012de:	f004 f9a1 	bl	8005624 <memset>
  if(huart->Instance==USART2)
 80012e2:	4b21      	ldr	r3, [pc, #132]	@ (8001368 <HAL_UART_MspInit+0xa0>)
 80012e4:	6822      	ldr	r2, [r4, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d001      	beq.n	80012ee <HAL_UART_MspInit+0x26>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80012ea:	b02a      	add	sp, #168	@ 0xa8
 80012ec:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012ee:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f0:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012f2:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f4:	f002 fb8e 	bl	8003a14 <HAL_RCCEx_PeriphCLKConfig>
 80012f8:	bb58      	cbnz	r0, 8001352 <HAL_UART_MspInit+0x8a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80012fa:	4b1c      	ldr	r3, [pc, #112]	@ (800136c <HAL_UART_MspInit+0xa4>)
 80012fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80012fe:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001302:	659a      	str	r2, [r3, #88]	@ 0x58
 8001304:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001306:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800130a:	9200      	str	r2, [sp, #0]
 800130c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001310:	ed9f 7b11 	vldr	d7, [pc, #68]	@ 8001358 <HAL_UART_MspInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001314:	f042 0201 	orr.w	r2, r2, #1
 8001318:	64da      	str	r2, [r3, #76]	@ 0x4c
 800131a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800131c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001320:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 8001360 <HAL_UART_MspInit+0x98>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800132c:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001332:	ed8d 7b04 	vstr	d7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001336:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001338:	9a01      	ldr	r2, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133a:	f001 f805 	bl	8002348 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	4611      	mov	r1, r2
 8001342:	2026      	movs	r0, #38	@ 0x26
 8001344:	f000 ff52 	bl	80021ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001348:	2026      	movs	r0, #38	@ 0x26
 800134a:	f000 ff8b 	bl	8002264 <HAL_NVIC_EnableIRQ>
}
 800134e:	b02a      	add	sp, #168	@ 0xa8
 8001350:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001352:	f7ff fe7b 	bl	800104c <Error_Handler>
 8001356:	e7d0      	b.n	80012fa <HAL_UART_MspInit+0x32>
 8001358:	0000000c 	.word	0x0000000c
 800135c:	00000002 	.word	0x00000002
 8001360:	00000000 	.word	0x00000000
 8001364:	00000003 	.word	0x00000003
 8001368:	40004400 	.word	0x40004400
 800136c:	40021000 	.word	0x40021000

08001370 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001370:	e7fe      	b.n	8001370 <NMI_Handler>
 8001372:	bf00      	nop

08001374 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <HardFault_Handler>
 8001376:	bf00      	nop

08001378 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <MemManage_Handler>
 800137a:	bf00      	nop

0800137c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <BusFault_Handler>
 800137e:	bf00      	nop

08001380 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <UsageFault_Handler>
 8001382:	bf00      	nop

08001384 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop

08001388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop

0800138c <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop

08001390 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001390:	f000 b8e0 	b.w	8001554 <HAL_IncTick>

08001394 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001394:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001396:	4804      	ldr	r0, [pc, #16]	@ (80013a8 <ADC1_2_IRQHandler+0x14>)
 8001398:	f000 fa60 	bl	800185c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800139c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 80013a0:	4802      	ldr	r0, [pc, #8]	@ (80013ac <ADC1_2_IRQHandler+0x18>)
 80013a2:	f000 ba5b 	b.w	800185c <HAL_ADC_IRQHandler>
 80013a6:	bf00      	nop
 80013a8:	20000238 	.word	0x20000238
 80013ac:	200001d4 	.word	0x200001d4

080013b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80013b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_4_Pin);
 80013b2:	2080      	movs	r0, #128	@ 0x80
 80013b4:	f001 f902 	bl	80025bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL_2_Pin);
 80013b8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80013bc:	f001 f8fe 	bl	80025bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL_3_Pin);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(COL_3_Pin);
 80013c4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80013c8:	f001 b8f8 	b.w	80025bc <HAL_GPIO_EXTI_IRQHandler>

080013cc <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013cc:	4801      	ldr	r0, [pc, #4]	@ (80013d4 <USART2_IRQHandler+0x8>)
 80013ce:	f002 be51 	b.w	8004074 <HAL_UART_IRQHandler>
 80013d2:	bf00      	nop
 80013d4:	200000f8 	.word	0x200000f8

080013d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_1_Pin);
 80013da:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80013de:	f001 f8ed 	bl	80025bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80013e6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80013ea:	f001 b8e7 	b.w	80025bc <HAL_GPIO_EXTI_IRQHandler>
 80013ee:	bf00      	nop

080013f0 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop

080013f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013f4:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f6:	1e16      	subs	r6, r2, #0
 80013f8:	dd07      	ble.n	800140a <_read+0x16>
 80013fa:	460c      	mov	r4, r1
 80013fc:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 80013fe:	f3af 8000 	nop.w
 8001402:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001406:	42a5      	cmp	r5, r4
 8001408:	d1f9      	bne.n	80013fe <_read+0xa>
  }

  return len;
}
 800140a:	4630      	mov	r0, r6
 800140c:	bd70      	pop	{r4, r5, r6, pc}
 800140e:	bf00      	nop

08001410 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop

08001418 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001418:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800141c:	604b      	str	r3, [r1, #4]
  return 0;
}
 800141e:	2000      	movs	r0, #0
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop

08001424 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001424:	2001      	movs	r0, #1
 8001426:	4770      	bx	lr

08001428 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001428:	2000      	movs	r0, #0
 800142a:	4770      	bx	lr

0800142c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800142c:	490c      	ldr	r1, [pc, #48]	@ (8001460 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800142e:	4a0d      	ldr	r2, [pc, #52]	@ (8001464 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8001430:	680b      	ldr	r3, [r1, #0]
{
 8001432:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001434:	4c0c      	ldr	r4, [pc, #48]	@ (8001468 <_sbrk+0x3c>)
 8001436:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001438:	b12b      	cbz	r3, 8001446 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800143a:	4418      	add	r0, r3
 800143c:	4290      	cmp	r0, r2
 800143e:	d807      	bhi.n	8001450 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001440:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8001442:	4618      	mov	r0, r3
 8001444:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001446:	4b09      	ldr	r3, [pc, #36]	@ (800146c <_sbrk+0x40>)
 8001448:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800144a:	4418      	add	r0, r3
 800144c:	4290      	cmp	r0, r2
 800144e:	d9f7      	bls.n	8001440 <_sbrk+0x14>
    errno = ENOMEM;
 8001450:	f004 f936 	bl	80056c0 <__errno>
 8001454:	230c      	movs	r3, #12
 8001456:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001458:	f04f 33ff 	mov.w	r3, #4294967295
}
 800145c:	4618      	mov	r0, r3
 800145e:	bd10      	pop	{r4, pc}
 8001460:	200002a0 	.word	0x200002a0
 8001464:	20018000 	.word	0x20018000
 8001468:	00000400 	.word	0x00000400
 800146c:	20000800 	.word	0x20000800

08001470 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001470:	4a03      	ldr	r2, [pc, #12]	@ (8001480 <SystemInit+0x10>)
 8001472:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001476:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800147a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800147e:	4770      	bx	lr
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001484:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001488:	f7ff fff2 	bl	8001470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800148c:	480c      	ldr	r0, [pc, #48]	@ (80014c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800148e:	490d      	ldr	r1, [pc, #52]	@ (80014c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001490:	4a0d      	ldr	r2, [pc, #52]	@ (80014c8 <LoopForever+0xe>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001494:	e002      	b.n	800149c <LoopCopyDataInit>

08001496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149a:	3304      	adds	r3, #4

0800149c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800149c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a0:	d3f9      	bcc.n	8001496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a2:	4a0a      	ldr	r2, [pc, #40]	@ (80014cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80014a4:	4c0a      	ldr	r4, [pc, #40]	@ (80014d0 <LoopForever+0x16>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a8:	e001      	b.n	80014ae <LoopFillZerobss>

080014aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ac:	3204      	adds	r2, #4

080014ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b0:	d3fb      	bcc.n	80014aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014b2:	f004 f90b 	bl	80056cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014b6:	f7ff fabf 	bl	8000a38 <main>

080014ba <LoopForever>:

LoopForever:
    b LoopForever
 80014ba:	e7fe      	b.n	80014ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80014c8:	08006e4c 	.word	0x08006e4c
  ldr r2, =_sbss
 80014cc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80014d0:	200007fc 	.word	0x200007fc

080014d4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014d4:	e7fe      	b.n	80014d4 <ADC3_IRQHandler>
	...

080014d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014da:	4b0f      	ldr	r3, [pc, #60]	@ (8001518 <HAL_InitTick+0x40>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	b90b      	cbnz	r3, 80014e4 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 80014e0:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 80014e2:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014e4:	490d      	ldr	r1, [pc, #52]	@ (800151c <HAL_InitTick+0x44>)
 80014e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014ea:	4605      	mov	r5, r0
 80014ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f0:	6808      	ldr	r0, [r1, #0]
 80014f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80014f6:	f000 fec3 	bl	8002280 <HAL_SYSTICK_Config>
 80014fa:	4604      	mov	r4, r0
 80014fc:	2800      	cmp	r0, #0
 80014fe:	d1ef      	bne.n	80014e0 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001500:	2d0f      	cmp	r5, #15
 8001502:	d8ed      	bhi.n	80014e0 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001504:	4602      	mov	r2, r0
 8001506:	4629      	mov	r1, r5
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	f000 fe6e 	bl	80021ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001510:	4b03      	ldr	r3, [pc, #12]	@ (8001520 <HAL_InitTick+0x48>)
 8001512:	4620      	mov	r0, r4
 8001514:	601d      	str	r5, [r3, #0]
}
 8001516:	bd38      	pop	{r3, r4, r5, pc}
 8001518:	2000001c 	.word	0x2000001c
 800151c:	20000018 	.word	0x20000018
 8001520:	20000020 	.word	0x20000020

08001524 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001524:	4a0a      	ldr	r2, [pc, #40]	@ (8001550 <HAL_Init+0x2c>)
 8001526:	6813      	ldr	r3, [r2, #0]
 8001528:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
{
 800152c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001530:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001532:	f000 fe49 	bl	80021c8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001536:	2000      	movs	r0, #0
 8001538:	f7ff ffce 	bl	80014d8 <HAL_InitTick>
 800153c:	b110      	cbz	r0, 8001544 <HAL_Init+0x20>
    status = HAL_ERROR;
 800153e:	2401      	movs	r4, #1
}
 8001540:	4620      	mov	r0, r4
 8001542:	bd10      	pop	{r4, pc}
 8001544:	4604      	mov	r4, r0
    HAL_MspInit();
 8001546:	f7ff fdd3 	bl	80010f0 <HAL_MspInit>
}
 800154a:	4620      	mov	r0, r4
 800154c:	bd10      	pop	{r4, pc}
 800154e:	bf00      	nop
 8001550:	40022000 	.word	0x40022000

08001554 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001554:	4a03      	ldr	r2, [pc, #12]	@ (8001564 <HAL_IncTick+0x10>)
 8001556:	4b04      	ldr	r3, [pc, #16]	@ (8001568 <HAL_IncTick+0x14>)
 8001558:	6811      	ldr	r1, [r2, #0]
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	440b      	add	r3, r1
 800155e:	6013      	str	r3, [r2, #0]
}
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	200002a4 	.word	0x200002a4
 8001568:	2000001c 	.word	0x2000001c

0800156c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800156c:	4b01      	ldr	r3, [pc, #4]	@ (8001574 <HAL_GetTick+0x8>)
 800156e:	6818      	ldr	r0, [r3, #0]
}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	200002a4 	.word	0x200002a4

08001578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001578:	b538      	push	{r3, r4, r5, lr}
 800157a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800157c:	f7ff fff6 	bl	800156c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001580:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001582:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001584:	d002      	beq.n	800158c <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 8001586:	4b04      	ldr	r3, [pc, #16]	@ (8001598 <HAL_Delay+0x20>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800158c:	f7ff ffee 	bl	800156c <HAL_GetTick>
 8001590:	1b40      	subs	r0, r0, r5
 8001592:	42a0      	cmp	r0, r4
 8001594:	d3fa      	bcc.n	800158c <HAL_Delay+0x14>
  {
  }
}
 8001596:	bd38      	pop	{r3, r4, r5, pc}
 8001598:	2000001c 	.word	0x2000001c

0800159c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800159c:	b530      	push	{r4, r5, lr}
 800159e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80015a4:	2800      	cmp	r0, #0
 80015a6:	f000 809d 	beq.w	80016e4 <HAL_ADC_Init+0x148>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015aa:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 80015ac:	4604      	mov	r4, r0
 80015ae:	2d00      	cmp	r5, #0
 80015b0:	f000 809d 	beq.w	80016ee <HAL_ADC_Init+0x152>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015b4:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015b6:	6893      	ldr	r3, [r2, #8]
 80015b8:	009d      	lsls	r5, r3, #2
 80015ba:	d505      	bpl.n	80015c8 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80015bc:	6893      	ldr	r3, [r2, #8]
 80015be:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80015c2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015c6:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015c8:	6893      	ldr	r3, [r2, #8]
 80015ca:	00d8      	lsls	r0, r3, #3
 80015cc:	d419      	bmi.n	8001602 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015ce:	4b5a      	ldr	r3, [pc, #360]	@ (8001738 <HAL_ADC_Init+0x19c>)
 80015d0:	485a      	ldr	r0, [pc, #360]	@ (800173c <HAL_ADC_Init+0x1a0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80015d4:	6891      	ldr	r1, [r2, #8]
 80015d6:	099b      	lsrs	r3, r3, #6
 80015d8:	fba0 0303 	umull	r0, r3, r0, r3
 80015dc:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 80015e0:	099b      	lsrs	r3, r3, #6
 80015e2:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80015e6:	3301      	adds	r3, #1
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80015ee:	6091      	str	r1, [r2, #8]
 80015f0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80015f2:	9b01      	ldr	r3, [sp, #4]
 80015f4:	b12b      	cbz	r3, 8001602 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 80015f6:	9b01      	ldr	r3, [sp, #4]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80015fc:	9b01      	ldr	r3, [sp, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f9      	bne.n	80015f6 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001602:	6893      	ldr	r3, [r2, #8]
 8001604:	00d9      	lsls	r1, r3, #3
 8001606:	d470      	bmi.n	80016ea <HAL_ADC_Init+0x14e>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001608:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800160a:	f043 0310 	orr.w	r3, r3, #16
 800160e:	6563      	str	r3, [r4, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001610:	6da3      	ldr	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001612:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001614:	4303      	orrs	r3, r0
 8001616:	65a3      	str	r3, [r4, #88]	@ 0x58
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001618:	6893      	ldr	r3, [r2, #8]
 800161a:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800161e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001620:	d15c      	bne.n	80016dc <HAL_ADC_Init+0x140>
 8001622:	06db      	lsls	r3, r3, #27
 8001624:	d45a      	bmi.n	80016dc <HAL_ADC_Init+0x140>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001626:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001628:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001632:	6893      	ldr	r3, [r2, #8]
 8001634:	07dd      	lsls	r5, r3, #31
 8001636:	d410      	bmi.n	800165a <HAL_ADC_Init+0xbe>
 8001638:	4941      	ldr	r1, [pc, #260]	@ (8001740 <HAL_ADC_Init+0x1a4>)
 800163a:	4b42      	ldr	r3, [pc, #264]	@ (8001744 <HAL_ADC_Init+0x1a8>)
 800163c:	6889      	ldr	r1, [r1, #8]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	430b      	orrs	r3, r1
 8001642:	4941      	ldr	r1, [pc, #260]	@ (8001748 <HAL_ADC_Init+0x1ac>)
 8001644:	6889      	ldr	r1, [r1, #8]
 8001646:	430b      	orrs	r3, r1
 8001648:	07d9      	lsls	r1, r3, #31
 800164a:	d406      	bmi.n	800165a <HAL_ADC_Init+0xbe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800164c:	493f      	ldr	r1, [pc, #252]	@ (800174c <HAL_ADC_Init+0x1b0>)
 800164e:	6865      	ldr	r5, [r4, #4]
 8001650:	688b      	ldr	r3, [r1, #8]
 8001652:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8001656:	432b      	orrs	r3, r5
 8001658:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 800165a:	68e5      	ldr	r5, [r4, #12]
 800165c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800165e:	f894 1020 	ldrb.w	r1, [r4, #32]
                 hadc->Init.DataAlign                                                   |
 8001662:	432b      	orrs	r3, r5
 8001664:	68a5      	ldr	r5, [r4, #8]
 8001666:	432b      	orrs	r3, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001668:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800166a:	2901      	cmp	r1, #1
                 hadc->Init.DataAlign                                                   |
 800166c:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001670:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001674:	d049      	beq.n	800170a <HAL_ADC_Init+0x16e>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001676:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001678:	b121      	cbz	r1, 8001684 <HAL_ADC_Init+0xe8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 800167a:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800167c:	f401 7170 	and.w	r1, r1, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001680:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001682:	430b      	orrs	r3, r1
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001684:	68d5      	ldr	r5, [r2, #12]
 8001686:	4932      	ldr	r1, [pc, #200]	@ (8001750 <HAL_ADC_Init+0x1b4>)
 8001688:	4029      	ands	r1, r5
 800168a:	4319      	orrs	r1, r3
 800168c:	60d1      	str	r1, [r2, #12]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800168e:	6893      	ldr	r3, [r2, #8]
 8001690:	071b      	lsls	r3, r3, #28
 8001692:	d414      	bmi.n	80016be <HAL_ADC_Init+0x122>
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001694:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001696:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800169a:	7e25      	ldrb	r5, [r4, #24]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800169c:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016a0:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80016a2:	f021 0102 	bic.w	r1, r1, #2
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016a6:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80016aa:	430b      	orrs	r3, r1
 80016ac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80016ae:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d02e      	beq.n	8001714 <HAL_ADC_Init+0x178>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016b6:	6913      	ldr	r3, [r2, #16]
 80016b8:	f023 0301 	bic.w	r3, r3, #1
 80016bc:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016be:	6923      	ldr	r3, [r4, #16]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d01a      	beq.n	80016fa <HAL_ADC_Init+0x15e>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016c4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80016c6:	f023 030f 	bic.w	r3, r3, #15
 80016ca:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80016cc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80016ce:	f023 0303 	bic.w	r3, r3, #3
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	6563      	str	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 80016d8:	b003      	add	sp, #12
 80016da:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016dc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80016de:	f043 0310 	orr.w	r3, r3, #16
 80016e2:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 80016e4:	2001      	movs	r0, #1
}
 80016e6:	b003      	add	sp, #12
 80016e8:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ea:	2000      	movs	r0, #0
 80016ec:	e794      	b.n	8001618 <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 80016ee:	f7ff fd23 	bl	8001138 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80016f2:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 80016f4:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 80016f8:	e75c      	b.n	80015b4 <HAL_ADC_Init+0x18>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016fa:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80016fc:	69e3      	ldr	r3, [r4, #28]
 80016fe:	f021 010f 	bic.w	r1, r1, #15
 8001702:	3b01      	subs	r3, #1
 8001704:	430b      	orrs	r3, r1
 8001706:	6313      	str	r3, [r2, #48]	@ 0x30
 8001708:	e7e0      	b.n	80016cc <HAL_ADC_Init+0x130>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800170a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800170c:	3901      	subs	r1, #1
 800170e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8001712:	e7b0      	b.n	8001676 <HAL_ADC_Init+0xda>
        MODIFY_REG(hadc->Instance->CFGR2,
 8001714:	6911      	ldr	r1, [r2, #16]
 8001716:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001718:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800171a:	f421 61ff 	bic.w	r1, r1, #2040	@ 0x7f8
 800171e:	f021 0104 	bic.w	r1, r1, #4
 8001722:	432b      	orrs	r3, r5
 8001724:	430b      	orrs	r3, r1
 8001726:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8001728:	430b      	orrs	r3, r1
 800172a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800172c:	430b      	orrs	r3, r1
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	6113      	str	r3, [r2, #16]
 8001734:	e7c3      	b.n	80016be <HAL_ADC_Init+0x122>
 8001736:	bf00      	nop
 8001738:	20000018 	.word	0x20000018
 800173c:	053e2d63 	.word	0x053e2d63
 8001740:	50040000 	.word	0x50040000
 8001744:	50040100 	.word	0x50040100
 8001748:	50040200 	.word	0x50040200
 800174c:	50040300 	.word	0x50040300
 8001750:	fff0c007 	.word	0xfff0c007

08001754 <HAL_ADC_PollForConversion>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001754:	4a39      	ldr	r2, [pc, #228]	@ (800183c <HAL_ADC_PollForConversion+0xe8>)
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800175a:	6944      	ldr	r4, [r0, #20]
 800175c:	6897      	ldr	r7, [r2, #8]
 800175e:	2c08      	cmp	r4, #8
{
 8001760:	4605      	mov	r5, r0
 8001762:	460e      	mov	r6, r1
 8001764:	f007 071f 	and.w	r7, r7, #31
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001768:	d009      	beq.n	800177e <HAL_ADC_PollForConversion+0x2a>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800176a:	f240 2321 	movw	r3, #545	@ 0x221
 800176e:	40fb      	lsrs	r3, r7
 8001770:	07d9      	lsls	r1, r3, #31
 8001772:	d44f      	bmi.n	8001814 <HAL_ADC_PollForConversion+0xc0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001774:	6893      	ldr	r3, [r2, #8]
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001776:	f413 4f60 	tst.w	r3, #57344	@ 0xe000
 800177a:	d14f      	bne.n	800181c <HAL_ADC_PollForConversion+0xc8>
        tmp_Flag_End = (ADC_FLAG_EOC);
 800177c:	2404      	movs	r4, #4
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800177e:	f7ff fef5 	bl	800156c <HAL_GetTick>
 8001782:	1c73      	adds	r3, r6, #1

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001784:	682a      	ldr	r2, [r5, #0]
  tickstart = HAL_GetTick();
 8001786:	4680      	mov	r8, r0
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001788:	d12b      	bne.n	80017e2 <HAL_ADC_PollForConversion+0x8e>
 800178a:	6813      	ldr	r3, [r2, #0]
 800178c:	421c      	tst	r4, r3
 800178e:	d0fc      	beq.n	800178a <HAL_ADC_PollForConversion+0x36>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001790:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8001792:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001796:	656b      	str	r3, [r5, #84]	@ 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001798:	68d3      	ldr	r3, [r2, #12]
 800179a:	f413 6f40 	tst.w	r3, #3072	@ 0xc00
 800179e:	d10f      	bne.n	80017c0 <HAL_ADC_PollForConversion+0x6c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80017a0:	7e6b      	ldrb	r3, [r5, #25]
 80017a2:	b96b      	cbnz	r3, 80017c0 <HAL_ADC_PollForConversion+0x6c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80017a4:	6813      	ldr	r3, [r2, #0]
 80017a6:	071e      	lsls	r6, r3, #28
 80017a8:	d50a      	bpl.n	80017c0 <HAL_ADC_PollForConversion+0x6c>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017aa:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80017ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017b0:	656b      	str	r3, [r5, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80017b2:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80017b4:	04d8      	lsls	r0, r3, #19
 80017b6:	d403      	bmi.n	80017c0 <HAL_ADC_PollForConversion+0x6c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017b8:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	656b      	str	r3, [r5, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001840 <HAL_ADC_PollForConversion+0xec>)
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d01b      	beq.n	80017fe <HAL_ADC_PollForConversion+0xaa>
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80017c6:	2c08      	cmp	r4, #8
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80017c8:	68d3      	ldr	r3, [r2, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80017ca:	d021      	beq.n	8001810 <HAL_ADC_PollForConversion+0xbc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80017cc:	045b      	lsls	r3, r3, #17
 80017ce:	d401      	bmi.n	80017d4 <HAL_ADC_PollForConversion+0x80>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80017d0:	230c      	movs	r3, #12
 80017d2:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80017d4:	2000      	movs	r0, #0
}
 80017d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80017da:	b916      	cbnz	r6, 80017e2 <HAL_ADC_PollForConversion+0x8e>
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017dc:	6813      	ldr	r3, [r2, #0]
 80017de:	421c      	tst	r4, r3
 80017e0:	d023      	beq.n	800182a <HAL_ADC_PollForConversion+0xd6>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017e2:	6813      	ldr	r3, [r2, #0]
 80017e4:	4223      	tst	r3, r4
 80017e6:	d1d3      	bne.n	8001790 <HAL_ADC_PollForConversion+0x3c>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80017e8:	f7ff fec0 	bl	800156c <HAL_GetTick>
 80017ec:	eba0 0008 	sub.w	r0, r0, r8
 80017f0:	42b0      	cmp	r0, r6
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017f2:	682a      	ldr	r2, [r5, #0]
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80017f4:	d9f1      	bls.n	80017da <HAL_ADC_PollForConversion+0x86>
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017f6:	6813      	ldr	r3, [r2, #0]
 80017f8:	421c      	tst	r4, r3
 80017fa:	d1f2      	bne.n	80017e2 <HAL_ADC_PollForConversion+0x8e>
 80017fc:	e015      	b.n	800182a <HAL_ADC_PollForConversion+0xd6>
 80017fe:	f240 2321 	movw	r3, #545	@ 0x221
 8001802:	40fb      	lsrs	r3, r7
 8001804:	07d9      	lsls	r1, r3, #31
 8001806:	d4de      	bmi.n	80017c6 <HAL_ADC_PollForConversion+0x72>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001808:	4b0e      	ldr	r3, [pc, #56]	@ (8001844 <HAL_ADC_PollForConversion+0xf0>)
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800180a:	2c08      	cmp	r4, #8
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800180c:	68db      	ldr	r3, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800180e:	d1dd      	bne.n	80017cc <HAL_ADC_PollForConversion+0x78>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001810:	6014      	str	r4, [r2, #0]
 8001812:	e7df      	b.n	80017d4 <HAL_ADC_PollForConversion+0x80>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001814:	6803      	ldr	r3, [r0, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	07da      	lsls	r2, r3, #31
 800181a:	d5af      	bpl.n	800177c <HAL_ADC_PollForConversion+0x28>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800181c:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800181e:	f043 0320 	orr.w	r3, r3, #32
 8001822:	656b      	str	r3, [r5, #84]	@ 0x54
        return HAL_ERROR;
 8001824:	2001      	movs	r0, #1
}
 8001826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800182a:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
          __HAL_UNLOCK(hadc);
 800182c:	2200      	movs	r2, #0
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800182e:	f043 0304 	orr.w	r3, r3, #4
 8001832:	656b      	str	r3, [r5, #84]	@ 0x54
          __HAL_UNLOCK(hadc);
 8001834:	f885 2050 	strb.w	r2, [r5, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001838:	2003      	movs	r0, #3
 800183a:	e7cc      	b.n	80017d6 <HAL_ADC_PollForConversion+0x82>
 800183c:	50040300 	.word	0x50040300
 8001840:	50040100 	.word	0x50040100
 8001844:	50040000 	.word	0x50040000

08001848 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001848:	6803      	ldr	r3, [r0, #0]
 800184a:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop

08001850 <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop

08001854 <HAL_ADC_LevelOutOfWindowCallback>:
/**
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop

08001858 <HAL_ADC_ErrorCallback>:
  *           "HAL_ADC_Start_DMA()"
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop

0800185c <HAL_ADC_IRQHandler>:
{
 800185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 800185e:	6803      	ldr	r3, [r0, #0]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001860:	4a8c      	ldr	r2, [pc, #560]	@ (8001a94 <HAL_ADC_IRQHandler+0x238>)
 8001862:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001864:	685e      	ldr	r6, [r3, #4]
 8001866:	6897      	ldr	r7, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001868:	07a9      	lsls	r1, r5, #30
{
 800186a:	4604      	mov	r4, r0
 800186c:	f007 071f 	and.w	r7, r7, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001870:	d502      	bpl.n	8001878 <HAL_ADC_IRQHandler+0x1c>
 8001872:	07b2      	lsls	r2, r6, #30
 8001874:	f100 809f 	bmi.w	80019b6 <HAL_ADC_IRQHandler+0x15a>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001878:	0769      	lsls	r1, r5, #29
 800187a:	d579      	bpl.n	8001970 <HAL_ADC_IRQHandler+0x114>
 800187c:	0772      	lsls	r2, r6, #29
 800187e:	d577      	bpl.n	8001970 <HAL_ADC_IRQHandler+0x114>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001880:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001882:	06d2      	lsls	r2, r2, #27
 8001884:	d403      	bmi.n	800188e <HAL_ADC_IRQHandler+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001886:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001888:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800188c:	6562      	str	r2, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800188e:	68da      	ldr	r2, [r3, #12]
 8001890:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8001894:	d11c      	bne.n	80018d0 <HAL_ADC_IRQHandler+0x74>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001896:	4a80      	ldr	r2, [pc, #512]	@ (8001a98 <HAL_ADC_IRQHandler+0x23c>)
 8001898:	4293      	cmp	r3, r2
 800189a:	f000 80dc 	beq.w	8001a56 <HAL_ADC_IRQHandler+0x1fa>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800189e:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80018a0:	0491      	lsls	r1, r2, #18
 80018a2:	d415      	bmi.n	80018d0 <HAL_ADC_IRQHandler+0x74>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	0712      	lsls	r2, r2, #28
 80018a8:	d512      	bpl.n	80018d0 <HAL_ADC_IRQHandler+0x74>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	0750      	lsls	r0, r2, #29
 80018ae:	f100 80df 	bmi.w	8001a70 <HAL_ADC_IRQHandler+0x214>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	f022 020c 	bic.w	r2, r2, #12
 80018b8:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80018ba:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80018bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018c0:	6563      	str	r3, [r4, #84]	@ 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80018c2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80018c4:	04d9      	lsls	r1, r3, #19
 80018c6:	d403      	bmi.n	80018d0 <HAL_ADC_IRQHandler+0x74>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018c8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80018d0:	4620      	mov	r0, r4
 80018d2:	f7ff ffbd 	bl	8001850 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80018d6:	6823      	ldr	r3, [r4, #0]
 80018d8:	220c      	movs	r2, #12
 80018da:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80018dc:	06aa      	lsls	r2, r5, #26
 80018de:	d54d      	bpl.n	800197c <HAL_ADC_IRQHandler+0x120>
 80018e0:	06b0      	lsls	r0, r6, #26
 80018e2:	d54b      	bpl.n	800197c <HAL_ADC_IRQHandler+0x120>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80018e6:	06d0      	lsls	r0, r2, #27
 80018e8:	d403      	bmi.n	80018f2 <HAL_ADC_IRQHandler+0x96>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80018ea:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80018ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80018f0:	6562      	str	r2, [r4, #84]	@ 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018f2:	4969      	ldr	r1, [pc, #420]	@ (8001a98 <HAL_ADC_IRQHandler+0x23c>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80018f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80018f6:	68d8      	ldr	r0, [r3, #12]
 80018f8:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80018fa:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
 80018fe:	d068      	beq.n	80019d2 <HAL_ADC_IRQHandler+0x176>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001900:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001902:	b9d2      	cbnz	r2, 800193a <HAL_ADC_IRQHandler+0xde>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001904:	018a      	lsls	r2, r1, #6
 8001906:	f100 809e 	bmi.w	8001a46 <HAL_ADC_IRQHandler+0x1ea>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	0650      	lsls	r0, r2, #25
 800190e:	d514      	bpl.n	800193a <HAL_ADC_IRQHandler+0xde>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001910:	0289      	lsls	r1, r1, #10
 8001912:	d412      	bmi.n	800193a <HAL_ADC_IRQHandler+0xde>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	0712      	lsls	r2, r2, #28
 8001918:	f100 80b3 	bmi.w	8001a82 <HAL_ADC_IRQHandler+0x226>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001922:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001924:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001926:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800192a:	6563      	str	r3, [r4, #84]	@ 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800192c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800192e:	05d8      	lsls	r0, r3, #23
 8001930:	d403      	bmi.n	800193a <HAL_ADC_IRQHandler+0xde>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001932:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800193a:	4620      	mov	r0, r4
 800193c:	f000 fbcc 	bl	80020d8 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001940:	6823      	ldr	r3, [r4, #0]
 8001942:	2260      	movs	r2, #96	@ 0x60
 8001944:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001946:	0629      	lsls	r1, r5, #24
 8001948:	d501      	bpl.n	800194e <HAL_ADC_IRQHandler+0xf2>
 800194a:	0632      	lsls	r2, r6, #24
 800194c:	d454      	bmi.n	80019f8 <HAL_ADC_IRQHandler+0x19c>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800194e:	05e8      	lsls	r0, r5, #23
 8001950:	d501      	bpl.n	8001956 <HAL_ADC_IRQHandler+0xfa>
 8001952:	05f1      	lsls	r1, r6, #23
 8001954:	d45b      	bmi.n	8001a0e <HAL_ADC_IRQHandler+0x1b2>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001956:	05aa      	lsls	r2, r5, #22
 8001958:	d501      	bpl.n	800195e <HAL_ADC_IRQHandler+0x102>
 800195a:	05b0      	lsls	r0, r6, #22
 800195c:	d440      	bmi.n	80019e0 <HAL_ADC_IRQHandler+0x184>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800195e:	06e9      	lsls	r1, r5, #27
 8001960:	d501      	bpl.n	8001966 <HAL_ADC_IRQHandler+0x10a>
 8001962:	06f2      	lsls	r2, r6, #27
 8001964:	d40f      	bmi.n	8001986 <HAL_ADC_IRQHandler+0x12a>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001966:	0569      	lsls	r1, r5, #21
 8001968:	d501      	bpl.n	800196e <HAL_ADC_IRQHandler+0x112>
 800196a:	0572      	lsls	r2, r6, #21
 800196c:	d45b      	bmi.n	8001a26 <HAL_ADC_IRQHandler+0x1ca>
}
 800196e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001970:	0728      	lsls	r0, r5, #28
 8001972:	d5b3      	bpl.n	80018dc <HAL_ADC_IRQHandler+0x80>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001974:	0731      	lsls	r1, r6, #28
 8001976:	d483      	bmi.n	8001880 <HAL_ADC_IRQHandler+0x24>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001978:	06aa      	lsls	r2, r5, #26
 800197a:	d4b1      	bmi.n	80018e0 <HAL_ADC_IRQHandler+0x84>
 800197c:	0669      	lsls	r1, r5, #25
 800197e:	d5e2      	bpl.n	8001946 <HAL_ADC_IRQHandler+0xea>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001980:	0672      	lsls	r2, r6, #25
 8001982:	d5e0      	bpl.n	8001946 <HAL_ADC_IRQHandler+0xea>
 8001984:	e7ae      	b.n	80018e4 <HAL_ADC_IRQHandler+0x88>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001986:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8001988:	b132      	cbz	r2, 8001998 <HAL_ADC_IRQHandler+0x13c>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800198a:	2f00      	cmp	r7, #0
 800198c:	d06c      	beq.n	8001a68 <HAL_ADC_IRQHandler+0x20c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800198e:	4a41      	ldr	r2, [pc, #260]	@ (8001a94 <HAL_ADC_IRQHandler+0x238>)
 8001990:	6892      	ldr	r2, [r2, #8]
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001992:	f412 4f60 	tst.w	r2, #57344	@ 0xe000
 8001996:	d00b      	beq.n	80019b0 <HAL_ADC_IRQHandler+0x154>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001998:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800199a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800199e:	6563      	str	r3, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80019a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80019a2:	f043 0302 	orr.w	r3, r3, #2
 80019a6:	65a3      	str	r3, [r4, #88]	@ 0x58
      HAL_ADC_ErrorCallback(hadc);
 80019a8:	4620      	mov	r0, r4
 80019aa:	f7ff ff55 	bl	8001858 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	2210      	movs	r2, #16
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	e7d7      	b.n	8001966 <HAL_ADC_IRQHandler+0x10a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019b6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80019b8:	06d8      	lsls	r0, r3, #27
 80019ba:	d403      	bmi.n	80019c4 <HAL_ADC_IRQHandler+0x168>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80019bc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80019be:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019c2:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80019c4:	4620      	mov	r0, r4
 80019c6:	f000 fb8f 	bl	80020e8 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80019ca:	6823      	ldr	r3, [r4, #0]
 80019cc:	2202      	movs	r2, #2
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	e752      	b.n	8001878 <HAL_ADC_IRQHandler+0x1c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019d2:	21c1      	movs	r1, #193	@ 0xc1
 80019d4:	40f9      	lsrs	r1, r7
 80019d6:	07c9      	lsls	r1, r1, #31
 80019d8:	d492      	bmi.n	8001900 <HAL_ADC_IRQHandler+0xa4>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80019da:	4930      	ldr	r1, [pc, #192]	@ (8001a9c <HAL_ADC_IRQHandler+0x240>)
 80019dc:	68c9      	ldr	r1, [r1, #12]
 80019de:	e790      	b.n	8001902 <HAL_ADC_IRQHandler+0xa6>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80019e0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80019e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019e6:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80019e8:	4620      	mov	r0, r4
 80019ea:	f000 fb7b 	bl	80020e4 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80019ee:	6823      	ldr	r3, [r4, #0]
 80019f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	e7b2      	b.n	800195e <HAL_ADC_IRQHandler+0x102>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80019f8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80019fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019fe:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a00:	4620      	mov	r0, r4
 8001a02:	f7ff ff27 	bl	8001854 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001a06:	6823      	ldr	r3, [r4, #0]
 8001a08:	2280      	movs	r2, #128	@ 0x80
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	e79f      	b.n	800194e <HAL_ADC_IRQHandler+0xf2>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001a0e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001a10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a14:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001a16:	4620      	mov	r0, r4
 8001a18:	f000 fb62 	bl	80020e0 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001a1c:	6823      	ldr	r3, [r4, #0]
 8001a1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	e797      	b.n	8001956 <HAL_ADC_IRQHandler+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001a26:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001a28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001a2c:	6562      	str	r2, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001a2e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001a30:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001a34:	f042 0208 	orr.w	r2, r2, #8
 8001a38:	65a2      	str	r2, [r4, #88]	@ 0x58
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001a3a:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001a3c:	6019      	str	r1, [r3, #0]
}
 8001a3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001a42:	f000 bb4b 	b.w	80020dc <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a46:	f400 6040 	and.w	r0, r0, #3072	@ 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001a4a:	f401 5200 	and.w	r2, r1, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001a4e:	4302      	orrs	r2, r0
 8001a50:	f47f af73 	bne.w	800193a <HAL_ADC_IRQHandler+0xde>
 8001a54:	e759      	b.n	800190a <HAL_ADC_IRQHandler+0xae>
 8001a56:	f240 2221 	movw	r2, #545	@ 0x221
 8001a5a:	40fa      	lsrs	r2, r7
 8001a5c:	07d0      	lsls	r0, r2, #31
 8001a5e:	f53f af1e 	bmi.w	800189e <HAL_ADC_IRQHandler+0x42>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001a62:	4a0e      	ldr	r2, [pc, #56]	@ (8001a9c <HAL_ADC_IRQHandler+0x240>)
 8001a64:	68d2      	ldr	r2, [r2, #12]
 8001a66:	e71b      	b.n	80018a0 <HAL_ADC_IRQHandler+0x44>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	07d0      	lsls	r0, r2, #31
 8001a6c:	d5a0      	bpl.n	80019b0 <HAL_ADC_IRQHandler+0x154>
 8001a6e:	e793      	b.n	8001998 <HAL_ADC_IRQHandler+0x13c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a70:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001a72:	f043 0310 	orr.w	r3, r3, #16
 8001a76:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001a80:	e726      	b.n	80018d0 <HAL_ADC_IRQHandler+0x74>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a82:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001a84:	f043 0310 	orr.w	r3, r3, #16
 8001a88:	6563      	str	r3, [r4, #84]	@ 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001a92:	e752      	b.n	800193a <HAL_ADC_IRQHandler+0xde>
 8001a94:	50040300 	.word	0x50040300
 8001a98:	50040100 	.word	0x50040100
 8001a9c:	50040000 	.word	0x50040000

08001aa0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001aa4:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
{
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8001aac:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8001aae:	f04f 0000 	mov.w	r0, #0
 8001ab2:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8001ab4:	f000 8127 	beq.w	8001d06 <HAL_ADC_ConfigChannel+0x266>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ab8:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8001aba:	2001      	movs	r0, #1
 8001abc:	f883 0050 	strb.w	r0, [r3, #80]	@ 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ac0:	68a2      	ldr	r2, [r4, #8]
 8001ac2:	f012 0c04 	ands.w	ip, r2, #4
 8001ac6:	d155      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0xd4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001ac8:	6848      	ldr	r0, [r1, #4]
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001aca:	2805      	cmp	r0, #5
 8001acc:	f240 808e 	bls.w	8001bec <HAL_ADC_ConfigChannel+0x14c>
  MODIFY_REG(*preg,
 8001ad0:	f000 051f 	and.w	r5, r0, #31
 8001ad4:	f04f 0e1f 	mov.w	lr, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ad8:	0982      	lsrs	r2, r0, #6
  MODIFY_REG(*preg,
 8001ada:	fa0e fe05 	lsl.w	lr, lr, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ade:	f002 0c0c 	and.w	ip, r2, #12
  MODIFY_REG(*preg,
 8001ae2:	ea6f 0e0e 	mvn.w	lr, lr
 8001ae6:	680a      	ldr	r2, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ae8:	f104 0030 	add.w	r0, r4, #48	@ 0x30
  MODIFY_REG(*preg,
 8001aec:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001af0:	40aa      	lsls	r2, r5
 8001af2:	f850 500c 	ldr.w	r5, [r0, ip]
 8001af6:	ea05 050e 	and.w	r5, r5, lr
 8001afa:	432a      	orrs	r2, r5
 8001afc:	f840 200c 	str.w	r2, [r0, ip]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b00:	68a2      	ldr	r2, [r4, #8]
 8001b02:	0757      	lsls	r7, r2, #29
 8001b04:	d540      	bpl.n	8001b88 <HAL_ADC_ConfigChannel+0xe8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b06:	68a2      	ldr	r2, [r4, #8]
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b08:	680a      	ldr	r2, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b0a:	68a0      	ldr	r0, [r4, #8]
 8001b0c:	07c5      	lsls	r5, r0, #31
 8001b0e:	d412      	bmi.n	8001b36 <HAL_ADC_ConfigChannel+0x96>
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001b10:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8001b12:	48bb      	ldr	r0, [pc, #748]	@ (8001e00 <HAL_ADC_ConfigChannel+0x360>)
 8001b14:	f8d4 50b0 	ldr.w	r5, [r4, #176]	@ 0xb0
 8001b18:	f006 0718 	and.w	r7, r6, #24
 8001b1c:	40f8      	lsrs	r0, r7
 8001b1e:	f3c2 0712 	ubfx	r7, r2, #0, #19
 8001b22:	4010      	ands	r0, r2
 8001b24:	ea25 0507 	bic.w	r5, r5, r7
 8001b28:	4328      	orrs	r0, r5
 8001b2a:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b2e:	48b5      	ldr	r0, [pc, #724]	@ (8001e04 <HAL_ADC_ConfigChannel+0x364>)
 8001b30:	4286      	cmp	r6, r0
 8001b32:	f000 8098 	beq.w	8001c66 <HAL_ADC_ConfigChannel+0x1c6>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001b36:	49b4      	ldr	r1, [pc, #720]	@ (8001e08 <HAL_ADC_ConfigChannel+0x368>)
 8001b38:	420a      	tst	r2, r1
 8001b3a:	d019      	beq.n	8001b70 <HAL_ADC_ConfigChannel+0xd0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b3c:	48b3      	ldr	r0, [pc, #716]	@ (8001e0c <HAL_ADC_ConfigChannel+0x36c>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b3e:	4db4      	ldr	r5, [pc, #720]	@ (8001e10 <HAL_ADC_ConfigChannel+0x370>)
 8001b40:	6881      	ldr	r1, [r0, #8]
 8001b42:	42aa      	cmp	r2, r5
 8001b44:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 8001b48:	d066      	beq.n	8001c18 <HAL_ADC_ConfigChannel+0x178>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001b4a:	4db2      	ldr	r5, [pc, #712]	@ (8001e14 <HAL_ADC_ConfigChannel+0x374>)
 8001b4c:	42aa      	cmp	r2, r5
 8001b4e:	f000 80de 	beq.w	8001d0e <HAL_ADC_ConfigChannel+0x26e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b52:	4db1      	ldr	r5, [pc, #708]	@ (8001e18 <HAL_ADC_ConfigChannel+0x378>)
 8001b54:	42aa      	cmp	r2, r5
 8001b56:	d10b      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0xd0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b58:	024a      	lsls	r2, r1, #9
 8001b5a:	d409      	bmi.n	8001b70 <HAL_ADC_ConfigChannel+0xd0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001b5c:	4aaf      	ldr	r2, [pc, #700]	@ (8001e1c <HAL_ADC_ConfigChannel+0x37c>)
 8001b5e:	4294      	cmp	r4, r2
 8001b60:	d106      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0xd0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b62:	6882      	ldr	r2, [r0, #8]
 8001b64:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001b68:	4332      	orrs	r2, r6
 8001b6a:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001b6e:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b70:	2000      	movs	r0, #0
 8001b72:	e003      	b.n	8001b7c <HAL_ADC_ConfigChannel+0xdc>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001b76:	f042 0220 	orr.w	r2, r2, #32
 8001b7a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8001b82:	b002      	add	sp, #8
 8001b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b88:	68a0      	ldr	r0, [r4, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b8a:	680a      	ldr	r2, [r1, #0]
 8001b8c:	0706      	lsls	r6, r0, #28
 8001b8e:	d4bc      	bmi.n	8001b0a <HAL_ADC_ConfigChannel+0x6a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b90:	0dd0      	lsrs	r0, r2, #23
 8001b92:	f000 0004 	and.w	r0, r0, #4
 8001b96:	f104 0514 	add.w	r5, r4, #20
  MODIFY_REG(*preg,
 8001b9a:	f3c2 5c04 	ubfx	ip, r2, #20, #5
 8001b9e:	688e      	ldr	r6, [r1, #8]
 8001ba0:	582a      	ldr	r2, [r5, r0]
 8001ba2:	2707      	movs	r7, #7
 8001ba4:	fa07 f70c 	lsl.w	r7, r7, ip
 8001ba8:	fa06 f60c 	lsl.w	r6, r6, ip
 8001bac:	ea22 0207 	bic.w	r2, r2, r7
 8001bb0:	4332      	orrs	r2, r6
 8001bb2:	502a      	str	r2, [r5, r0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001bb4:	e9d1 6204 	ldrd	r6, r2, [r1, #16]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001bb8:	2e04      	cmp	r6, #4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001bba:	68e0      	ldr	r0, [r4, #12]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bbc:	f104 0560 	add.w	r5, r4, #96	@ 0x60
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001bc0:	f000 80cd 	beq.w	8001d5e <HAL_ADC_ConfigChannel+0x2be>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001bc4:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8001bc8:	0040      	lsls	r0, r0, #1
  MODIFY_REG(*preg,
 8001bca:	f855 c026 	ldr.w	ip, [r5, r6, lsl #2]
 8001bce:	4f94      	ldr	r7, [pc, #592]	@ (8001e20 <HAL_ADC_ConfigChannel+0x380>)
 8001bd0:	4082      	lsls	r2, r0
 8001bd2:	6808      	ldr	r0, [r1, #0]
 8001bd4:	ea0c 0707 	and.w	r7, ip, r7
 8001bd8:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8001bdc:	4338      	orrs	r0, r7
 8001bde:	4302      	orrs	r2, r0
 8001be0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001be4:	f845 2026 	str.w	r2, [r5, r6, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001be8:	680a      	ldr	r2, [r1, #0]
}
 8001bea:	e78e      	b.n	8001b0a <HAL_ADC_ConfigChannel+0x6a>
      switch (pConfig->Rank)
 8001bec:	3802      	subs	r0, #2
 8001bee:	2803      	cmp	r0, #3
 8001bf0:	d903      	bls.n	8001bfa <HAL_ADC_ConfigChannel+0x15a>
    if (pConfig->Rank <= 5U)
 8001bf2:	f46f 6ef8 	mvn.w	lr, #1984	@ 0x7c0
 8001bf6:	2506      	movs	r5, #6
 8001bf8:	e775      	b.n	8001ae6 <HAL_ADC_ConfigChannel+0x46>
 8001bfa:	4a8a      	ldr	r2, [pc, #552]	@ (8001e24 <HAL_ADC_ConfigChannel+0x384>)
 8001bfc:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
  MODIFY_REG(*preg,
 8001c00:	f04f 0e1f 	mov.w	lr, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001c04:	09aa      	lsrs	r2, r5, #6
  MODIFY_REG(*preg,
 8001c06:	f005 051f 	and.w	r5, r5, #31
 8001c0a:	fa0e fe05 	lsl.w	lr, lr, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001c0e:	f002 0c0c 	and.w	ip, r2, #12
  MODIFY_REG(*preg,
 8001c12:	ea6f 0e0e 	mvn.w	lr, lr
 8001c16:	e766      	b.n	8001ae6 <HAL_ADC_ConfigChannel+0x46>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c18:	0208      	lsls	r0, r1, #8
 8001c1a:	d4a9      	bmi.n	8001b70 <HAL_ADC_ConfigChannel+0xd0>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c1c:	4a7f      	ldr	r2, [pc, #508]	@ (8001e1c <HAL_ADC_ConfigChannel+0x37c>)
 8001c1e:	4294      	cmp	r4, r2
 8001c20:	d003      	beq.n	8001c2a <HAL_ADC_ConfigChannel+0x18a>
 8001c22:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8001c26:	4294      	cmp	r4, r2
 8001c28:	d1a2      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0xd0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c2a:	4978      	ldr	r1, [pc, #480]	@ (8001e0c <HAL_ADC_ConfigChannel+0x36c>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c2c:	487e      	ldr	r0, [pc, #504]	@ (8001e28 <HAL_ADC_ConfigChannel+0x388>)
 8001c2e:	688a      	ldr	r2, [r1, #8]
 8001c30:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001c34:	4332      	orrs	r2, r6
 8001c36:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001c3a:	608a      	str	r2, [r1, #8]
 8001c3c:	6802      	ldr	r2, [r0, #0]
 8001c3e:	497b      	ldr	r1, [pc, #492]	@ (8001e2c <HAL_ADC_ConfigChannel+0x38c>)
 8001c40:	0992      	lsrs	r2, r2, #6
 8001c42:	fba1 1202 	umull	r1, r2, r1, r2
 8001c46:	0992      	lsrs	r2, r2, #6
 8001c48:	3201      	adds	r2, #1
 8001c4a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001c4e:	0092      	lsls	r2, r2, #2
 8001c50:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8001c52:	9a01      	ldr	r2, [sp, #4]
 8001c54:	2a00      	cmp	r2, #0
 8001c56:	d08b      	beq.n	8001b70 <HAL_ADC_ConfigChannel+0xd0>
            wait_loop_index--;
 8001c58:	9a01      	ldr	r2, [sp, #4]
 8001c5a:	3a01      	subs	r2, #1
 8001c5c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8001c5e:	9a01      	ldr	r2, [sp, #4]
 8001c60:	2a00      	cmp	r2, #0
 8001c62:	d1f9      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x1b8>
 8001c64:	e784      	b.n	8001b70 <HAL_ADC_ConfigChannel+0xd0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c66:	2f00      	cmp	r7, #0
 8001c68:	d065      	beq.n	8001d36 <HAL_ADC_ConfigChannel+0x296>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6a:	fa92 f0a2 	rbit	r0, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c6e:	2800      	cmp	r0, #0
 8001c70:	f000 809f 	beq.w	8001db2 <HAL_ADC_ConfigChannel+0x312>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001c74:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c78:	3001      	adds	r0, #1
 8001c7a:	f000 001f 	and.w	r0, r0, #31
 8001c7e:	2809      	cmp	r0, #9
 8001c80:	f240 8097 	bls.w	8001db2 <HAL_ADC_ConfigChannel+0x312>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c84:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8001c88:	2800      	cmp	r0, #0
 8001c8a:	f000 8146 	beq.w	8001f1a <HAL_ADC_ConfigChannel+0x47a>
  return __builtin_clz(value);
 8001c8e:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c92:	3001      	adds	r0, #1
 8001c94:	0680      	lsls	r0, r0, #26
 8001c96:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8001c9e:	2d00      	cmp	r5, #0
 8001ca0:	f000 8140 	beq.w	8001f24 <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 8001ca4:	fab5 f585 	clz	r5, r5
 8001ca8:	3501      	adds	r5, #1
 8001caa:	f005 051f 	and.w	r5, r5, #31
 8001cae:	2601      	movs	r6, #1
 8001cb0:	fa06 f505 	lsl.w	r5, r6, r5
 8001cb4:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb6:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001cba:	2a00      	cmp	r2, #0
 8001cbc:	f000 8130 	beq.w	8001f20 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8001cc0:	fab2 f282 	clz	r2, r2
 8001cc4:	1c55      	adds	r5, r2, #1
 8001cc6:	f005 051f 	and.w	r5, r5, #31
 8001cca:	2203      	movs	r2, #3
 8001ccc:	f06f 061d 	mvn.w	r6, #29
 8001cd0:	fb12 6205 	smlabb	r2, r2, r5, r6
 8001cd4:	0512      	lsls	r2, r2, #20
 8001cd6:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cda:	4302      	orrs	r2, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001cdc:	0dd6      	lsrs	r6, r2, #23
  MODIFY_REG(*preg,
 8001cde:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001ce0:	f006 0604 	and.w	r6, r6, #4
 8001ce4:	f104 0514 	add.w	r5, r4, #20
  MODIFY_REG(*preg,
 8001ce8:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8001cec:	fa00 f702 	lsl.w	r7, r0, r2
 8001cf0:	f04f 0c07 	mov.w	ip, #7
 8001cf4:	59a8      	ldr	r0, [r5, r6]
 8001cf6:	fa0c f202 	lsl.w	r2, ip, r2
 8001cfa:	ea20 0202 	bic.w	r2, r0, r2
 8001cfe:	433a      	orrs	r2, r7
 8001d00:	51aa      	str	r2, [r5, r6]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d02:	680a      	ldr	r2, [r1, #0]
}
 8001d04:	e717      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x96>
  __HAL_LOCK(hadc);
 8001d06:	2002      	movs	r0, #2
}
 8001d08:	b002      	add	sp, #8
 8001d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d0e:	01c9      	lsls	r1, r1, #7
 8001d10:	f53f af2e 	bmi.w	8001b70 <HAL_ADC_ConfigChannel+0xd0>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d14:	4a41      	ldr	r2, [pc, #260]	@ (8001e1c <HAL_ADC_ConfigChannel+0x37c>)
 8001d16:	4294      	cmp	r4, r2
 8001d18:	d004      	beq.n	8001d24 <HAL_ADC_ConfigChannel+0x284>
 8001d1a:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8001d1e:	4294      	cmp	r4, r2
 8001d20:	f47f af26 	bne.w	8001b70 <HAL_ADC_ConfigChannel+0xd0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d24:	4939      	ldr	r1, [pc, #228]	@ (8001e0c <HAL_ADC_ConfigChannel+0x36c>)
 8001d26:	688a      	ldr	r2, [r1, #8]
 8001d28:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001d2c:	4332      	orrs	r2, r6
 8001d2e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8001d32:	608a      	str	r2, [r1, #8]
}
 8001d34:	e71c      	b.n	8001b70 <HAL_ADC_ConfigChannel+0xd0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d36:	0e92      	lsrs	r2, r2, #26
 8001d38:	3201      	adds	r2, #1
 8001d3a:	f002 051f 	and.w	r5, r2, #31
 8001d3e:	2001      	movs	r0, #1
 8001d40:	0692      	lsls	r2, r2, #26
 8001d42:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8001d46:	40a8      	lsls	r0, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d48:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d4a:	ea40 0002 	orr.w	r0, r0, r2
 8001d4e:	eb05 0245 	add.w	r2, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d52:	d953      	bls.n	8001dfc <HAL_ADC_ConfigChannel+0x35c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d54:	3a1e      	subs	r2, #30
 8001d56:	0512      	lsls	r2, r2, #20
 8001d58:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8001d5c:	e7bd      	b.n	8001cda <HAL_ADC_ConfigChannel+0x23a>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d5e:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d60:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8001d62:	6e26      	ldr	r6, [r4, #96]	@ 0x60
 8001d64:	f3c0 0712 	ubfx	r7, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d68:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	2f00      	cmp	r7, #0
 8001d70:	d15e      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x390>
 8001d72:	f3c0 6284 	ubfx	r2, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d76:	4296      	cmp	r6, r2
 8001d78:	f000 809f 	beq.w	8001eba <HAL_ADC_ConfigChannel+0x41a>
 8001d7c:	6e66      	ldr	r6, [r4, #100]	@ 0x64
 8001d7e:	6e66      	ldr	r6, [r4, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d80:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8001d84:	4296      	cmp	r6, r2
 8001d86:	f000 8084 	beq.w	8001e92 <HAL_ADC_ConfigChannel+0x3f2>
 8001d8a:	68ae      	ldr	r6, [r5, #8]
 8001d8c:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d8e:	f105 0c08 	add.w	ip, r5, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d92:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8001d96:	4296      	cmp	r6, r2
 8001d98:	f000 80a0 	beq.w	8001edc <HAL_ADC_ConfigChannel+0x43c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d9c:	68ee      	ldr	r6, [r5, #12]
 8001d9e:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001da0:	f105 070c 	add.w	r7, r5, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001da4:	f3c6 6584 	ubfx	r5, r6, #26, #5
 8001da8:	42aa      	cmp	r2, r5
 8001daa:	f000 80ad 	beq.w	8001f08 <HAL_ADC_ConfigChannel+0x468>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001dae:	4602      	mov	r2, r0
 8001db0:	e6ab      	b.n	8001b0a <HAL_ADC_ConfigChannel+0x6a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8001db6:	2800      	cmp	r0, #0
 8001db8:	f000 80b8 	beq.w	8001f2c <HAL_ADC_ConfigChannel+0x48c>
  return __builtin_clz(value);
 8001dbc:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001dc0:	3001      	adds	r0, #1
 8001dc2:	0680      	lsls	r0, r0, #26
 8001dc4:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc8:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8001dcc:	2d00      	cmp	r5, #0
 8001dce:	f000 80ab 	beq.w	8001f28 <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 8001dd2:	fab5 f585 	clz	r5, r5
 8001dd6:	3501      	adds	r5, #1
 8001dd8:	f005 051f 	and.w	r5, r5, #31
 8001ddc:	2601      	movs	r6, #1
 8001dde:	fa06 f505 	lsl.w	r5, r6, r5
 8001de2:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de4:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001de8:	2a00      	cmp	r2, #0
 8001dea:	f000 8093 	beq.w	8001f14 <HAL_ADC_ConfigChannel+0x474>
  return __builtin_clz(value);
 8001dee:	fab2 f282 	clz	r2, r2
 8001df2:	3201      	adds	r2, #1
 8001df4:	f002 021f 	and.w	r2, r2, #31
 8001df8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001dfc:	0512      	lsls	r2, r2, #20
 8001dfe:	e76c      	b.n	8001cda <HAL_ADC_ConfigChannel+0x23a>
 8001e00:	0007ffff 	.word	0x0007ffff
 8001e04:	407f0000 	.word	0x407f0000
 8001e08:	80080000 	.word	0x80080000
 8001e0c:	50040300 	.word	0x50040300
 8001e10:	c7520000 	.word	0xc7520000
 8001e14:	cb840000 	.word	0xcb840000
 8001e18:	80000001 	.word	0x80000001
 8001e1c:	50040000 	.word	0x50040000
 8001e20:	03fff000 	.word	0x03fff000
 8001e24:	080066fc 	.word	0x080066fc
 8001e28:	20000018 	.word	0x20000018
 8001e2c:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e30:	fa90 f7a0 	rbit	r7, r0
  if (value == 0U)
 8001e34:	b11f      	cbz	r7, 8001e3e <HAL_ADC_ConfigChannel+0x39e>
  return __builtin_clz(value);
 8001e36:	fab7 f787 	clz	r7, r7
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e3a:	42be      	cmp	r6, r7
 8001e3c:	d03d      	beq.n	8001eba <HAL_ADC_ConfigChannel+0x41a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e3e:	6e66      	ldr	r6, [r4, #100]	@ 0x64
 8001e40:	6e66      	ldr	r6, [r4, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e42:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e46:	fa90 f7a0 	rbit	r7, r0
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e4a:	f105 0c08 	add.w	ip, r5, #8
 8001e4e:	46e6      	mov	lr, ip
  if (value == 0U)
 8001e50:	b11f      	cbz	r7, 8001e5a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8001e52:	fab7 f787 	clz	r7, r7
 8001e56:	42b7      	cmp	r7, r6
 8001e58:	d01d      	beq.n	8001e96 <HAL_ADC_ConfigChannel+0x3f6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e5a:	68ae      	ldr	r6, [r5, #8]
 8001e5c:	68ae      	ldr	r6, [r5, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e5e:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	fa90 fea0 	rbit	lr, r0
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e66:	f105 070c 	add.w	r7, r5, #12
 8001e6a:	46b8      	mov	r8, r7
  if (value == 0U)
 8001e6c:	f1be 0f00 	cmp.w	lr, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_ADC_ConfigChannel+0x3da>
  return __builtin_clz(value);
 8001e72:	fabe fe8e 	clz	lr, lr
 8001e76:	45b6      	cmp	lr, r6
 8001e78:	d032      	beq.n	8001ee0 <HAL_ADC_ConfigChannel+0x440>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e7a:	68ee      	ldr	r6, [r5, #12]
 8001e7c:	68ed      	ldr	r5, [r5, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e7e:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	fa90 f6a0 	rbit	r6, r0
  if (value == 0U)
 8001e86:	2e00      	cmp	r6, #0
 8001e88:	f43f ae3f 	beq.w	8001b0a <HAL_ADC_ConfigChannel+0x6a>
  return __builtin_clz(value);
 8001e8c:	fab6 f286 	clz	r2, r6
 8001e90:	e78a      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x308>
 8001e92:	f105 0e08 	add.w	lr, r5, #8
  MODIFY_REG(*preg,
 8001e96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001e98:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e9c:	6662      	str	r2, [r4, #100]	@ 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e9e:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ea0:	68aa      	ldr	r2, [r5, #8]
 8001ea2:	68ae      	ldr	r6, [r5, #8]
 8001ea4:	f3c0 0712 	ubfx	r7, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ea8:	46f4      	mov	ip, lr
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001eaa:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001eae:	4602      	mov	r2, r0
 8001eb0:	2f00      	cmp	r7, #0
 8001eb2:	d1d6      	bne.n	8001e62 <HAL_ADC_ConfigChannel+0x3c2>
 8001eb4:	f3c0 6284 	ubfx	r2, r0, #26, #5
 8001eb8:	e76d      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x2f6>
  MODIFY_REG(*preg,
 8001eba:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8001ebc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001ec0:	6622      	str	r2, [r4, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ec2:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ec4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001ec6:	6e66      	ldr	r6, [r4, #100]	@ 0x64
 8001ec8:	f3c0 0712 	ubfx	r7, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ecc:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	2f00      	cmp	r7, #0
 8001ed4:	d1b7      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x3a6>
 8001ed6:	f3c0 6284 	ubfx	r2, r0, #26, #5
 8001eda:	e753      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x2e4>
 8001edc:	f105 080c 	add.w	r8, r5, #12
  MODIFY_REG(*preg,
 8001ee0:	f8dc 2000 	ldr.w	r2, [ip]
 8001ee4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001ee8:	f8cc 2000 	str.w	r2, [ip]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001eec:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001eee:	68ea      	ldr	r2, [r5, #12]
 8001ef0:	68ed      	ldr	r5, [r5, #12]
 8001ef2:	f3c0 0612 	ubfx	r6, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ef6:	4647      	mov	r7, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ef8:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001efc:	4602      	mov	r2, r0
 8001efe:	2e00      	cmp	r6, #0
 8001f00:	d1bf      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x3e2>
 8001f02:	f3c0 6284 	ubfx	r2, r0, #26, #5
 8001f06:	e74f      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x308>
  MODIFY_REG(*preg,
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001f0e:	603a      	str	r2, [r7, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001f10:	680a      	ldr	r2, [r1, #0]
}
 8001f12:	e5fa      	b.n	8001b0a <HAL_ADC_ConfigChannel+0x6a>
 8001f14:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8001f18:	e6df      	b.n	8001cda <HAL_ADC_ConfigChannel+0x23a>
 8001f1a:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8001f1e:	e6bc      	b.n	8001c9a <HAL_ADC_ConfigChannel+0x1fa>
 8001f20:	4a04      	ldr	r2, [pc, #16]	@ (8001f34 <HAL_ADC_ConfigChannel+0x494>)
 8001f22:	e6da      	b.n	8001cda <HAL_ADC_ConfigChannel+0x23a>
 8001f24:	2502      	movs	r5, #2
 8001f26:	e6c5      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x214>
 8001f28:	2502      	movs	r5, #2
 8001f2a:	e75a      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x342>
 8001f2c:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8001f30:	e74a      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x328>
 8001f32:	bf00      	nop
 8001f34:	fe500000 	.word	0xfe500000

08001f38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f38:	b570      	push	{r4, r5, r6, lr}
 8001f3a:	b082      	sub	sp, #8
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001f3c:	2200      	movs	r2, #0

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f3e:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 8001f40:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	07d2      	lsls	r2, r2, #31
 8001f46:	d42c      	bmi.n	8001fa2 <ADC_Enable+0x6a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001f48:	6899      	ldr	r1, [r3, #8]
 8001f4a:	4a28      	ldr	r2, [pc, #160]	@ (8001fec <ADC_Enable+0xb4>)
 8001f4c:	4211      	tst	r1, r2
 8001f4e:	4604      	mov	r4, r0
 8001f50:	d12a      	bne.n	8001fa8 <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 8001f52:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f54:	4926      	ldr	r1, [pc, #152]	@ (8001ff0 <ADC_Enable+0xb8>)
  MODIFY_REG(ADCx->CR,
 8001f56:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001f5a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f64:	688b      	ldr	r3, [r1, #8]
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001f66:	021b      	lsls	r3, r3, #8
 8001f68:	d429      	bmi.n	8001fbe <ADC_Enable+0x86>
        wait_loop_index--;
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f6a:	f7ff faff 	bl	800156c <HAL_GetTick>

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f6e:	6823      	ldr	r3, [r4, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	07d6      	lsls	r6, r2, #31
    tickstart = HAL_GetTick();
 8001f74:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f76:	d414      	bmi.n	8001fa2 <ADC_Enable+0x6a>
  MODIFY_REG(ADCx->CR,
 8001f78:	4e1e      	ldr	r6, [pc, #120]	@ (8001ff4 <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	07d0      	lsls	r0, r2, #31
 8001f7e:	d404      	bmi.n	8001f8a <ADC_Enable+0x52>
  MODIFY_REG(ADCx->CR,
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	4032      	ands	r2, r6
 8001f84:	f042 0201 	orr.w	r2, r2, #1
 8001f88:	609a      	str	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
      {
        LL_ADC_Enable(hadc->Instance);
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f8a:	f7ff faef 	bl	800156c <HAL_GetTick>
 8001f8e:	1b43      	subs	r3, r0, r5
 8001f90:	2b02      	cmp	r3, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f92:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f94:	d902      	bls.n	8001f9c <ADC_Enable+0x64>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	07d1      	lsls	r1, r2, #31
 8001f9a:	d505      	bpl.n	8001fa8 <ADC_Enable+0x70>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	07d2      	lsls	r2, r2, #31
 8001fa0:	d5eb      	bpl.n	8001f7a <ADC_Enable+0x42>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001fa2:	2000      	movs	r0, #0
}
 8001fa4:	b002      	add	sp, #8
 8001fa6:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001faa:	f043 0310 	orr.w	r3, r3, #16
 8001fae:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 8001fb2:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 8001fba:	b002      	add	sp, #8
 8001fbc:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff8 <ADC_Enable+0xc0>)
 8001fc0:	4a0e      	ldr	r2, [pc, #56]	@ (8001ffc <ADC_Enable+0xc4>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	099b      	lsrs	r3, r3, #6
 8001fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fca:	099b      	lsrs	r3, r3, #6
 8001fcc:	3301      	adds	r3, #1
 8001fce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8001fd6:	9b01      	ldr	r3, [sp, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0c6      	beq.n	8001f6a <ADC_Enable+0x32>
        wait_loop_index--;
 8001fdc:	9b01      	ldr	r3, [sp, #4]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8001fe2:	9b01      	ldr	r3, [sp, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f9      	bne.n	8001fdc <ADC_Enable+0xa4>
 8001fe8:	e7bf      	b.n	8001f6a <ADC_Enable+0x32>
 8001fea:	bf00      	nop
 8001fec:	8000003f 	.word	0x8000003f
 8001ff0:	50040300 	.word	0x50040300
 8001ff4:	7fffffc0 	.word	0x7fffffc0
 8001ff8:	20000018 	.word	0x20000018
 8001ffc:	053e2d63 	.word	0x053e2d63

08002000 <HAL_ADC_Start>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002000:	4a32      	ldr	r2, [pc, #200]	@ (80020cc <HAL_ADC_Start+0xcc>)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002002:	6803      	ldr	r3, [r0, #0]
{
 8002004:	b570      	push	{r4, r5, r6, lr}
 8002006:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002008:	689d      	ldr	r5, [r3, #8]
 800200a:	f015 0504 	ands.w	r5, r5, #4
 800200e:	d141      	bne.n	8002094 <HAL_ADC_Start+0x94>
    __HAL_LOCK(hadc);
 8002010:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8002014:	2b01      	cmp	r3, #1
 8002016:	4604      	mov	r4, r0
 8002018:	d03c      	beq.n	8002094 <HAL_ADC_Start+0x94>
 800201a:	2301      	movs	r3, #1
 800201c:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
    tmp_hal_status = ADC_Enable(hadc);
 8002020:	f7ff ff8a 	bl	8001f38 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002024:	2800      	cmp	r0, #0
 8002026:	d137      	bne.n	8002098 <HAL_ADC_Start+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8002028:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800202a:	6822      	ldr	r2, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 800202c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002030:	f023 0301 	bic.w	r3, r3, #1
 8002034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002038:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800203a:	4b25      	ldr	r3, [pc, #148]	@ (80020d0 <HAL_ADC_Start+0xd0>)
 800203c:	429a      	cmp	r2, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800203e:	f006 061f 	and.w	r6, r6, #31
 8002042:	d02c      	beq.n	800209e <HAL_ADC_Start+0x9e>
 8002044:	4611      	mov	r1, r2
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002046:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002048:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800204c:	6563      	str	r3, [r4, #84]	@ 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800204e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002050:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002054:	bf1c      	itt	ne
 8002056:	6da3      	ldrne	r3, [r4, #88]	@ 0x58
 8002058:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800205c:	65a3      	str	r3, [r4, #88]	@ 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800205e:	231c      	movs	r3, #28
 8002060:	6013      	str	r3, [r2, #0]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002062:	428a      	cmp	r2, r1
      __HAL_UNLOCK(hadc);
 8002064:	f04f 0300 	mov.w	r3, #0
 8002068:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800206c:	d01b      	beq.n	80020a6 <HAL_ADC_Start+0xa6>
 800206e:	f240 2321 	movw	r3, #545	@ 0x221
 8002072:	40f3      	lsrs	r3, r6
 8002074:	07dd      	lsls	r5, r3, #31
 8002076:	d416      	bmi.n	80020a6 <HAL_ADC_Start+0xa6>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002078:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800207a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800207e:	6563      	str	r3, [r4, #84]	@ 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002080:	68cb      	ldr	r3, [r1, #12]
 8002082:	019b      	lsls	r3, r3, #6
 8002084:	d505      	bpl.n	8002092 <HAL_ADC_Start+0x92>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002086:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002088:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800208c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002090:	6563      	str	r3, [r4, #84]	@ 0x54
}
 8002092:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 8002094:	2002      	movs	r0, #2
}
 8002096:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 8002098:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
}
 800209c:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800209e:	490d      	ldr	r1, [pc, #52]	@ (80020d4 <HAL_ADC_Start+0xd4>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020a0:	2e00      	cmp	r6, #0
 80020a2:	d1d4      	bne.n	800204e <HAL_ADC_Start+0x4e>
 80020a4:	e7cf      	b.n	8002046 <HAL_ADC_Start+0x46>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80020a6:	68d3      	ldr	r3, [r2, #12]
 80020a8:	0199      	lsls	r1, r3, #6
 80020aa:	d505      	bpl.n	80020b8 <HAL_ADC_Start+0xb8>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020ac:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80020ae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020b2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020b6:	6563      	str	r3, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 80020b8:	6893      	ldr	r3, [r2, #8]
 80020ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020be:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020c2:	f043 0304 	orr.w	r3, r3, #4
 80020c6:	6093      	str	r3, [r2, #8]
}
 80020c8:	bd70      	pop	{r4, r5, r6, pc}
 80020ca:	bf00      	nop
 80020cc:	50040300 	.word	0x50040300
 80020d0:	50040100 	.word	0x50040100
 80020d4:	50040000 	.word	0x50040000

080020d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop

080020dc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            and if a new injected context is set when queue is full (maximum 2
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop

080020e0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
/**
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop

080020e4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
/**
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop

080020e8 <HAL_ADCEx_EndOfSamplingCallback>:
/**
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop

080020ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80020ec:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020ee:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
  if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80020f2:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 80020f4:	2a01      	cmp	r2, #1
{
 80020f6:	b09a      	sub	sp, #104	@ 0x68
  __HAL_LOCK(hadc);
 80020f8:	d044      	beq.n	8002184 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80020fa:	4603      	mov	r3, r0

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80020fc:	4d2e      	ldr	r5, [pc, #184]	@ (80021b8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 80020fe:	681c      	ldr	r4, [r3, #0]
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002100:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8002102:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002104:	42ac      	cmp	r4, r5
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002106:	9216      	str	r2, [sp, #88]	@ 0x58
  __HAL_LOCK(hadc);
 8002108:	f883 0050 	strb.w	r0, [r3, #80]	@ 0x50
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800210c:	9217      	str	r2, [sp, #92]	@ 0x5c
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800210e:	d008      	beq.n	8002122 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002110:	6d59      	ldr	r1, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002112:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002116:	f041 0120 	orr.w	r1, r1, #32
 800211a:	6559      	str	r1, [r3, #84]	@ 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800211c:	b01a      	add	sp, #104	@ 0x68
 800211e:	bcf0      	pop	{r4, r5, r6, r7}
 8002120:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002122:	4a26      	ldr	r2, [pc, #152]	@ (80021bc <HAL_ADCEx_MultiModeConfigChannel+0xd0>)
 8002124:	6890      	ldr	r0, [r2, #8]
 8002126:	0740      	lsls	r0, r0, #29
 8002128:	d50b      	bpl.n	8002142 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800212a:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800212c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800212e:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8002132:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002134:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 800213c:	b01a      	add	sp, #104	@ 0x68
 800213e:	bcf0      	pop	{r4, r5, r6, r7}
 8002140:	4770      	bx	lr
 8002142:	68a0      	ldr	r0, [r4, #8]
 8002144:	0747      	lsls	r7, r0, #29
 8002146:	d4f1      	bmi.n	800212c <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002148:	b306      	cbz	r6, 800218c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800214a:	4f1d      	ldr	r7, [pc, #116]	@ (80021c0 <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 800214c:	684d      	ldr	r5, [r1, #4]
 800214e:	68b8      	ldr	r0, [r7, #8]
 8002150:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 8002154:	4328      	orrs	r0, r5
 8002156:	f893 5030 	ldrb.w	r5, [r3, #48]	@ 0x30
 800215a:	ea40 3045 	orr.w	r0, r0, r5, lsl #13
 800215e:	60b8      	str	r0, [r7, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002160:	68a0      	ldr	r0, [r4, #8]
 8002162:	6892      	ldr	r2, [r2, #8]
 8002164:	4302      	orrs	r2, r0
 8002166:	4817      	ldr	r0, [pc, #92]	@ (80021c4 <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
 8002168:	6880      	ldr	r0, [r0, #8]
 800216a:	4302      	orrs	r2, r0
 800216c:	07d5      	lsls	r5, r2, #31
 800216e:	d420      	bmi.n	80021b2 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
        MODIFY_REG(tmpADC_Common->CCR,
 8002170:	68b8      	ldr	r0, [r7, #8]
 8002172:	688a      	ldr	r2, [r1, #8]
 8002174:	f420 6171 	bic.w	r1, r0, #3856	@ 0xf10
 8002178:	4332      	orrs	r2, r6
 800217a:	f021 010f 	bic.w	r1, r1, #15
 800217e:	430a      	orrs	r2, r1
 8002180:	60ba      	str	r2, [r7, #8]
 8002182:	e016      	b.n	80021b2 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 8002184:	2002      	movs	r0, #2
}
 8002186:	b01a      	add	sp, #104	@ 0x68
 8002188:	bcf0      	pop	{r4, r5, r6, r7}
 800218a:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800218c:	480c      	ldr	r0, [pc, #48]	@ (80021c0 <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 800218e:	6881      	ldr	r1, [r0, #8]
 8002190:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8002194:	6081      	str	r1, [r0, #8]
 8002196:	490b      	ldr	r1, [pc, #44]	@ (80021c4 <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
 8002198:	68a4      	ldr	r4, [r4, #8]
 800219a:	6892      	ldr	r2, [r2, #8]
 800219c:	6889      	ldr	r1, [r1, #8]
 800219e:	4322      	orrs	r2, r4
 80021a0:	430a      	orrs	r2, r1
 80021a2:	07d4      	lsls	r4, r2, #31
 80021a4:	d405      	bmi.n	80021b2 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80021a6:	6882      	ldr	r2, [r0, #8]
 80021a8:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 80021ac:	f022 020f 	bic.w	r2, r2, #15
 80021b0:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b2:	2000      	movs	r0, #0
 80021b4:	e7bf      	b.n	8002136 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80021b6:	bf00      	nop
 80021b8:	50040000 	.word	0x50040000
 80021bc:	50040100 	.word	0x50040100
 80021c0:	50040300 	.word	0x50040300
 80021c4:	50040200 	.word	0x50040200

080021c8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c8:	4907      	ldr	r1, [pc, #28]	@ (80021e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80021ca:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021cc:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ce:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021d6:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d8:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021da:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80021e2:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021ec:	4b1b      	ldr	r3, [pc, #108]	@ (800225c <HAL_NVIC_SetPriority+0x70>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f4:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f6:	f1c3 0e07 	rsb	lr, r3, #7
 80021fa:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021fe:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002202:	bf28      	it	cs
 8002204:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002208:	f1bc 0f06 	cmp.w	ip, #6
 800220c:	d91c      	bls.n	8002248 <HAL_NVIC_SetPriority+0x5c>
 800220e:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002212:	f04f 33ff 	mov.w	r3, #4294967295
 8002216:	fa03 f30c 	lsl.w	r3, r3, ip
 800221a:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221e:	f04f 33ff 	mov.w	r3, #4294967295
 8002222:	fa03 f30e 	lsl.w	r3, r3, lr
 8002226:	ea21 0303 	bic.w	r3, r1, r3
 800222a:	fa03 f30c 	lsl.w	r3, r3, ip
 800222e:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002230:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8002232:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002234:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8002236:	db0a      	blt.n	800224e <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002238:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800223c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002240:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002244:	f85d fb04 	ldr.w	pc, [sp], #4
 8002248:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800224a:	4694      	mov	ip, r2
 800224c:	e7e7      	b.n	800221e <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224e:	4a04      	ldr	r2, [pc, #16]	@ (8002260 <HAL_NVIC_SetPriority+0x74>)
 8002250:	f000 000f 	and.w	r0, r0, #15
 8002254:	4402      	add	r2, r0
 8002256:	7613      	strb	r3, [r2, #24]
 8002258:	f85d fb04 	ldr.w	pc, [sp], #4
 800225c:	e000ed00 	.word	0xe000ed00
 8002260:	e000ecfc 	.word	0xe000ecfc

08002264 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002264:	2800      	cmp	r0, #0
 8002266:	db07      	blt.n	8002278 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002268:	4a04      	ldr	r2, [pc, #16]	@ (800227c <HAL_NVIC_EnableIRQ+0x18>)
 800226a:	0941      	lsrs	r1, r0, #5
 800226c:	2301      	movs	r3, #1
 800226e:	f000 001f 	and.w	r0, r0, #31
 8002272:	4083      	lsls	r3, r0
 8002274:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	e000e100 	.word	0xe000e100

08002280 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002280:	3801      	subs	r0, #1
 8002282:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002286:	d301      	bcc.n	800228c <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002288:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800228a:	4770      	bx	lr
{
 800228c:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800228e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002292:	4c07      	ldr	r4, [pc, #28]	@ (80022b0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002294:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002296:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 800229a:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800229e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a4:	619a      	str	r2, [r3, #24]
}
 80022a6:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022aa:	6119      	str	r1, [r3, #16]
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <HAL_DMA_Abort>:
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80022b4:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80022b8:	2a02      	cmp	r2, #2
{
 80022ba:	4603      	mov	r3, r0
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80022bc:	d006      	beq.n	80022cc <HAL_DMA_Abort+0x18>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022be:	2204      	movs	r2, #4
 80022c0:	63c2      	str	r2, [r0, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c2:	2200      	movs	r2, #0

    return HAL_ERROR;
 80022c4:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80022c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return status;
  }
}
 80022ca:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022cc:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022ce:	6c42      	ldr	r2, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022d0:	6808      	ldr	r0, [r1, #0]
 80022d2:	f020 000e 	bic.w	r0, r0, #14
 80022d6:	6008      	str	r0, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80022d8:	6808      	ldr	r0, [r1, #0]
 80022da:	f020 0001 	bic.w	r0, r0, #1
 80022de:	6008      	str	r0, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022e0:	f04f 0c01 	mov.w	ip, #1
 80022e4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80022e6:	f002 021c 	and.w	r2, r2, #28
 80022ea:	fa0c f202 	lsl.w	r2, ip, r2
 80022ee:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 80022f0:	2200      	movs	r2, #0
    return status;
 80022f2:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 80022f4:	f883 c025 	strb.w	ip, [r3, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 80022f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop

08002300 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002300:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8002304:	2a02      	cmp	r2, #2
 8002306:	d003      	beq.n	8002310 <HAL_DMA_Abort_IT+0x10>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002308:	2204      	movs	r2, #4
 800230a:	63c2      	str	r2, [r0, #60]	@ 0x3c

    status = HAL_ERROR;
 800230c:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 800230e:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002310:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002312:	6c42      	ldr	r2, [r0, #68]	@ 0x44
{
 8002314:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002316:	680c      	ldr	r4, [r1, #0]
 8002318:	f024 040e 	bic.w	r4, r4, #14
 800231c:	600c      	str	r4, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800231e:	680c      	ldr	r4, [r1, #0]
 8002320:	f024 0401 	bic.w	r4, r4, #1
 8002324:	600c      	str	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002326:	f002 021c 	and.w	r2, r2, #28
 800232a:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800232c:	2101      	movs	r1, #1
 800232e:	fa01 f202 	lsl.w	r2, r1, r2
 8002332:	6062      	str	r2, [r4, #4]
    if (hdma->XferAbortCallback != NULL)
 8002334:	6b82      	ldr	r2, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002336:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 800233a:	2400      	movs	r4, #0
 800233c:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    if (hdma->XferAbortCallback != NULL)
 8002340:	b102      	cbz	r2, 8002344 <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 8002342:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8002344:	2000      	movs	r0, #0
}
 8002346:	bd10      	pop	{r4, pc}

08002348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800234c:	680c      	ldr	r4, [r1, #0]
{
 800234e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002350:	2c00      	cmp	r4, #0
 8002352:	f000 809c 	beq.w	800248e <HAL_GPIO_Init+0x146>
  uint32_t position = 0x00u;
 8002356:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002358:	f04f 0b01 	mov.w	fp, #1
 800235c:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 8002360:	ea1e 0a04 	ands.w	sl, lr, r4
 8002364:	f000 808e 	beq.w	8002484 <HAL_GPIO_Init+0x13c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002368:	684d      	ldr	r5, [r1, #4]
 800236a:	f005 0203 	and.w	r2, r5, #3
 800236e:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002372:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002374:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002378:	fa06 f70c 	lsl.w	r7, r6, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800237c:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002380:	ea6f 0707 	mvn.w	r7, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002384:	f240 8086 	bls.w	8002494 <HAL_GPIO_Init+0x14c>
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002388:	2a03      	cmp	r2, #3
 800238a:	f040 80c1 	bne.w	8002510 <HAL_GPIO_Init+0x1c8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800238e:	f8d0 802c 	ldr.w	r8, [r0, #44]	@ 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002392:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002396:	f3c5 0ec0 	ubfx	lr, r5, #3, #1
 800239a:	fa0e fe03 	lsl.w	lr, lr, r3
 800239e:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->ASCR = temp;
 80023a2:	f8c0 e02c 	str.w	lr, [r0, #44]	@ 0x2c
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023a6:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 80023aa:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023ae:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023b2:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023b4:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80023b8:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023ba:	d063      	beq.n	8002484 <HAL_GPIO_Init+0x13c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023bc:	4f6c      	ldr	r7, [pc, #432]	@ (8002570 <HAL_GPIO_Init+0x228>)
 80023be:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80023c0:	f042 0201 	orr.w	r2, r2, #1
 80023c4:	663a      	str	r2, [r7, #96]	@ 0x60
 80023c6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80023c8:	f002 0201 	and.w	r2, r2, #1
 80023cc:	9203      	str	r2, [sp, #12]
 80023ce:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023d0:	f023 0203 	bic.w	r2, r3, #3
 80023d4:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80023d8:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023dc:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 80023e0:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023e2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80023e6:	260f      	movs	r6, #15
 80023e8:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023ec:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023f0:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023f4:	d022      	beq.n	800243c <HAL_GPIO_Init+0xf4>
 80023f6:	4e5f      	ldr	r6, [pc, #380]	@ (8002574 <HAL_GPIO_Init+0x22c>)
 80023f8:	42b0      	cmp	r0, r6
 80023fa:	f000 809c 	beq.w	8002536 <HAL_GPIO_Init+0x1ee>
 80023fe:	4e5e      	ldr	r6, [pc, #376]	@ (8002578 <HAL_GPIO_Init+0x230>)
 8002400:	42b0      	cmp	r0, r6
 8002402:	f000 809f 	beq.w	8002544 <HAL_GPIO_Init+0x1fc>
 8002406:	f8df e178 	ldr.w	lr, [pc, #376]	@ 8002580 <HAL_GPIO_Init+0x238>
 800240a:	4570      	cmp	r0, lr
 800240c:	f000 808c 	beq.w	8002528 <HAL_GPIO_Init+0x1e0>
 8002410:	f8df e170 	ldr.w	lr, [pc, #368]	@ 8002584 <HAL_GPIO_Init+0x23c>
 8002414:	4570      	cmp	r0, lr
 8002416:	f000 809c 	beq.w	8002552 <HAL_GPIO_Init+0x20a>
 800241a:	f8df e16c 	ldr.w	lr, [pc, #364]	@ 8002588 <HAL_GPIO_Init+0x240>
 800241e:	4570      	cmp	r0, lr
 8002420:	f000 809e 	beq.w	8002560 <HAL_GPIO_Init+0x218>
 8002424:	f8df e164 	ldr.w	lr, [pc, #356]	@ 800258c <HAL_GPIO_Init+0x244>
 8002428:	4570      	cmp	r0, lr
 800242a:	bf0c      	ite	eq
 800242c:	f04f 0e06 	moveq.w	lr, #6
 8002430:	f04f 0e07 	movne.w	lr, #7
 8002434:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002438:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 800243c:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800243e:	4a4f      	ldr	r2, [pc, #316]	@ (800257c <HAL_GPIO_Init+0x234>)
 8002440:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002442:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 8002444:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8002448:	4e4c      	ldr	r6, [pc, #304]	@ (800257c <HAL_GPIO_Init+0x234>)
        temp &= ~(iocurrent);
 800244a:	bf54      	ite	pl
 800244c:	403a      	andpl	r2, r7
          temp |= iocurrent;
 800244e:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 8002452:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8002454:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002456:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8002458:	4e48      	ldr	r6, [pc, #288]	@ (800257c <HAL_GPIO_Init+0x234>)
        temp &= ~(iocurrent);
 800245a:	bf54      	ite	pl
 800245c:	403a      	andpl	r2, r7
          temp |= iocurrent;
 800245e:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 8002462:	60f2      	str	r2, [r6, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002464:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002466:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8002468:	4e44      	ldr	r6, [pc, #272]	@ (800257c <HAL_GPIO_Init+0x234>)
        temp &= ~(iocurrent);
 800246a:	bf54      	ite	pl
 800246c:	403a      	andpl	r2, r7
          temp |= iocurrent;
 800246e:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 8002472:	6072      	str	r2, [r6, #4]

        temp = EXTI->IMR1;
 8002474:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002476:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8002478:	4d40      	ldr	r5, [pc, #256]	@ (800257c <HAL_GPIO_Init+0x234>)
        temp &= ~(iocurrent);
 800247a:	bf54      	ite	pl
 800247c:	403a      	andpl	r2, r7
          temp |= iocurrent;
 800247e:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 8002482:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 8002484:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002486:	fa34 f203 	lsrs.w	r2, r4, r3
 800248a:	f47f af67 	bne.w	800235c <HAL_GPIO_Init+0x14>
  }
}
 800248e:	b005      	add	sp, #20
 8002490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8002494:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002498:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800249a:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 800249e:	fa06 f80c 	lsl.w	r8, r6, ip
 80024a2:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 80024a6:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 80024aa:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024ae:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024b0:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024b4:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 80024b8:	fa0e fe03 	lsl.w	lr, lr, r3
 80024bc:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 80024c0:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 80024c4:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024c8:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024cc:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024d0:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d4:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 80024d6:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024da:	f47f af64 	bne.w	80023a6 <HAL_GPIO_Init+0x5e>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024de:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3u];
 80024e0:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024e4:	f003 0e07 	and.w	lr, r3, #7
 80024e8:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80024ec:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024f0:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3u];
 80024f4:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024f8:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024fa:	260f      	movs	r6, #15
 80024fc:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002500:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002502:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002506:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3u] = temp;
 800250a:	f8c8 e020 	str.w	lr, [r8, #32]
 800250e:	e74a      	b.n	80023a6 <HAL_GPIO_Init+0x5e>
        temp = GPIOx->PUPDR;
 8002510:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002514:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002516:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800251a:	fa06 fe0c 	lsl.w	lr, r6, ip
 800251e:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 8002522:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002526:	e73e      	b.n	80023a6 <HAL_GPIO_Init+0x5e>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002528:	f04f 0e03 	mov.w	lr, #3
 800252c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002530:	ea47 070c 	orr.w	r7, r7, ip
 8002534:	e782      	b.n	800243c <HAL_GPIO_Init+0xf4>
 8002536:	f04f 0e01 	mov.w	lr, #1
 800253a:	fa0e fc0c 	lsl.w	ip, lr, ip
 800253e:	ea47 070c 	orr.w	r7, r7, ip
 8002542:	e77b      	b.n	800243c <HAL_GPIO_Init+0xf4>
 8002544:	f04f 0e02 	mov.w	lr, #2
 8002548:	fa0e fc0c 	lsl.w	ip, lr, ip
 800254c:	ea47 070c 	orr.w	r7, r7, ip
 8002550:	e774      	b.n	800243c <HAL_GPIO_Init+0xf4>
 8002552:	f04f 0e04 	mov.w	lr, #4
 8002556:	fa0e fc0c 	lsl.w	ip, lr, ip
 800255a:	ea47 070c 	orr.w	r7, r7, ip
 800255e:	e76d      	b.n	800243c <HAL_GPIO_Init+0xf4>
 8002560:	f04f 0e05 	mov.w	lr, #5
 8002564:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002568:	ea47 070c 	orr.w	r7, r7, ip
 800256c:	e766      	b.n	800243c <HAL_GPIO_Init+0xf4>
 800256e:	bf00      	nop
 8002570:	40021000 	.word	0x40021000
 8002574:	48000400 	.word	0x48000400
 8002578:	48000800 	.word	0x48000800
 800257c:	40010400 	.word	0x40010400
 8002580:	48000c00 	.word	0x48000c00
 8002584:	48001000 	.word	0x48001000
 8002588:	48001400 	.word	0x48001400
 800258c:	48001800 	.word	0x48001800

08002590 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002590:	6903      	ldr	r3, [r0, #16]
 8002592:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002594:	bf14      	ite	ne
 8002596:	2001      	movne	r0, #1
 8002598:	2000      	moveq	r0, #0
 800259a:	4770      	bx	lr

0800259c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800259c:	b10a      	cbz	r2, 80025a2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800259e:	6181      	str	r1, [r0, #24]
 80025a0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025a2:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop

080025a8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025a8:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025aa:	ea01 0203 	and.w	r2, r1, r3
 80025ae:	ea21 0103 	bic.w	r1, r1, r3
 80025b2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80025b6:	6181      	str	r1, [r0, #24]
}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop

080025bc <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025bc:	4a04      	ldr	r2, [pc, #16]	@ (80025d0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80025be:	6951      	ldr	r1, [r2, #20]
 80025c0:	4201      	tst	r1, r0
 80025c2:	d100      	bne.n	80025c6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80025c4:	4770      	bx	lr
{
 80025c6:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025c8:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025ca:	f7fe f8e7 	bl	800079c <HAL_GPIO_EXTI_Callback>
  }
}
 80025ce:	bd08      	pop	{r3, pc}
 80025d0:	40010400 	.word	0x40010400

080025d4 <I2C_WaitOnFlagUntilTimeout.constprop.0>:
  * @param  Status The actual Flag status (SET or RESET).
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 80025d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
                                                    uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025d8:	6803      	ldr	r3, [r0, #0]
 80025da:	699a      	ldr	r2, [r3, #24]
 80025dc:	0414      	lsls	r4, r2, #16
 80025de:	f140 808a 	bpl.w	80026f6 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x122>
 80025e2:	4604      	mov	r4, r0
 80025e4:	4688      	mov	r8, r1
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025e6:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 80025ea:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80025ec:	f016 0610 	ands.w	r6, r6, #16
 80025f0:	f000 8084 	beq.w	80026fc <I2C_WaitOnFlagUntilTimeout.constprop.0+0x128>
  uint32_t error_code = 0;
 80025f4:	2600      	movs	r6, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025f6:	f8c3 901c 	str.w	r9, [r3, #28]
  uint32_t tickstart = Tickstart;
 80025fa:	4645      	mov	r5, r8
  HAL_StatusTypeDef status = HAL_OK;
 80025fc:	4637      	mov	r7, r6

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025fe:	699a      	ldr	r2, [r3, #24]
 8002600:	0692      	lsls	r2, r2, #26
 8002602:	d429      	bmi.n	8002658 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x84>
 8002604:	bb5f      	cbnz	r7, 800265e <I2C_WaitOnFlagUntilTimeout.constprop.0+0x8a>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002606:	f7fe ffb1 	bl	800156c <HAL_GetTick>
 800260a:	1b40      	subs	r0, r0, r5
 800260c:	2819      	cmp	r0, #25
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800260e:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002610:	d9f5      	bls.n	80025fe <I2C_WaitOnFlagUntilTimeout.constprop.0+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002612:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8002614:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002618:	6999      	ldr	r1, [r3, #24]
 800261a:	0409      	lsls	r1, r1, #16
          tmp2 = hi2c->Mode;
 800261c:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800261e:	d50b      	bpl.n	8002638 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x64>
 8002620:	0440      	lsls	r0, r0, #17
 8002622:	d409      	bmi.n	8002638 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x64>
              (tmp1 != I2C_CR2_STOP) && \
 8002624:	2a20      	cmp	r2, #32
 8002626:	d007      	beq.n	8002638 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x64>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800262e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002630:	f7fe ff9c 	bl	800156c <HAL_GetTick>
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002634:	6823      	ldr	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8002636:	4605      	mov	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002638:	699a      	ldr	r2, [r3, #24]
 800263a:	0691      	lsls	r1, r2, #26
 800263c:	d4df      	bmi.n	80025fe <I2C_WaitOnFlagUntilTimeout.constprop.0+0x2a>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800263e:	f7fe ff95 	bl	800156c <HAL_GetTick>
 8002642:	1b40      	subs	r0, r0, r5
 8002644:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002646:	6823      	ldr	r3, [r4, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002648:	d9f6      	bls.n	8002638 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x64>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800264a:	699a      	ldr	r2, [r3, #24]
 800264c:	0692      	lsls	r2, r2, #26
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800264e:	f04f 0620 	mov.w	r6, #32

              status = HAL_ERROR;
 8002652:	f04f 0701 	mov.w	r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002656:	d5d5      	bpl.n	8002604 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x30>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002658:	b90f      	cbnz	r7, 800265e <I2C_WaitOnFlagUntilTimeout.constprop.0+0x8a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800265a:	2220      	movs	r2, #32
 800265c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800265e:	f046 0604 	orr.w	r6, r6, #4

    status = HAL_ERROR;
 8002662:	2501      	movs	r5, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002664:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002666:	05d7      	lsls	r7, r2, #23
 8002668:	d531      	bpl.n	80026ce <I2C_WaitOnFlagUntilTimeout.constprop.0+0xfa>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800266a:	f44f 7180 	mov.w	r1, #256	@ 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800266e:	0550      	lsls	r0, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002670:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8002672:	f046 0601 	orr.w	r6, r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002676:	d504      	bpl.n	8002682 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xae>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002678:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800267c:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 800267e:	f046 0608 	orr.w	r6, r6, #8

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002682:	0592      	lsls	r2, r2, #22
 8002684:	d504      	bpl.n	8002690 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xbc>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002686:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800268a:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800268e:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002690:	699a      	ldr	r2, [r3, #24]
 8002692:	0795      	lsls	r5, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8002694:	bf44      	itt	mi
 8002696:	2200      	movmi	r2, #0
 8002698:	629a      	strmi	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800269a:	699a      	ldr	r2, [r3, #24]
 800269c:	07d0      	lsls	r0, r2, #31
 800269e:	d403      	bmi.n	80026a8 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026a0:	699a      	ldr	r2, [r3, #24]
 80026a2:	f042 0201 	orr.w	r2, r2, #1
 80026a6:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	481a      	ldr	r0, [pc, #104]	@ (8002714 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x140>)
 80026ac:	4002      	ands	r2, r0
 80026ae:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80026b0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026b2:	2120      	movs	r1, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b4:	2200      	movs	r2, #0
    hi2c->ErrorCode |= error_code;
 80026b6:	4333      	orrs	r3, r6
 80026b8:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026ba:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026be:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 80026c2:	2300      	movs	r3, #0
 80026c4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80026c8:	2001      	movs	r0, #1
}
 80026ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80026ce:	0551      	lsls	r1, r2, #21
 80026d0:	d4d2      	bmi.n	8002678 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xa4>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80026d2:	0597      	lsls	r7, r2, #22
 80026d4:	d4d7      	bmi.n	8002686 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xb2>
  if (status != HAL_OK)
 80026d6:	2d00      	cmp	r5, #0
 80026d8:	d1da      	bne.n	8002690 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xbc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026da:	f7fe ff47 	bl	800156c <HAL_GetTick>
 80026de:	eba0 0008 	sub.w	r0, r0, r8
 80026e2:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026e4:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e6:	d902      	bls.n	80026ee <I2C_WaitOnFlagUntilTimeout.constprop.0+0x11a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	0411      	lsls	r1, r2, #16
 80026ec:	d408      	bmi.n	8002700 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x12c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026ee:	699a      	ldr	r2, [r3, #24]
 80026f0:	0412      	lsls	r2, r2, #16
 80026f2:	f53f af7a 	bmi.w	80025ea <I2C_WaitOnFlagUntilTimeout.constprop.0+0x16>
  return HAL_OK;
 80026f6:	2000      	movs	r0, #0
}
 80026f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80026fc:	4635      	mov	r5, r6
 80026fe:	e7b1      	b.n	8002664 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x90>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002700:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002702:	2220      	movs	r2, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002704:	4313      	orrs	r3, r2
 8002706:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002708:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800270c:	f884 5042 	strb.w	r5, [r4, #66]	@ 0x42
          return HAL_ERROR;
 8002710:	e7d7      	b.n	80026c2 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xee>
 8002712:	bf00      	nop
 8002714:	fe00e800 	.word	0xfe00e800

08002718 <I2C_WaitOnTXISFlagUntilTimeout>:
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002718:	6803      	ldr	r3, [r0, #0]
{
 800271a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800271e:	4680      	mov	r8, r0
 8002720:	460d      	mov	r5, r1
 8002722:	4617      	mov	r7, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002724:	2610      	movs	r6, #16
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002726:	699c      	ldr	r4, [r3, #24]
 8002728:	f014 0402 	ands.w	r4, r4, #2
 800272c:	d168      	bne.n	8002800 <I2C_WaitOnTXISFlagUntilTimeout+0xe8>
  uint32_t itflag   = hi2c->Instance->ISR;
 800272e:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002730:	f012 0c10 	ands.w	ip, r2, #16
 8002734:	d062      	beq.n	80027fc <I2C_WaitOnTXISFlagUntilTimeout+0xe4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002736:	1c68      	adds	r0, r5, #1
 8002738:	61de      	str	r6, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800273a:	d164      	bne.n	8002806 <I2C_WaitOnTXISFlagUntilTimeout+0xee>
 800273c:	699a      	ldr	r2, [r3, #24]
 800273e:	0691      	lsls	r1, r2, #26
 8002740:	d5fc      	bpl.n	800273c <I2C_WaitOnTXISFlagUntilTimeout+0x24>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002742:	2220      	movs	r2, #32
 8002744:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8002746:	f044 0c04 	orr.w	ip, r4, #4
    status = HAL_ERROR;
 800274a:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 800274c:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800274e:	05d0      	lsls	r0, r2, #23
 8002750:	d534      	bpl.n	80027bc <I2C_WaitOnTXISFlagUntilTimeout+0xa4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002752:	f44f 7180 	mov.w	r1, #256	@ 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002756:	0554      	lsls	r4, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002758:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 800275a:	f04c 0c01 	orr.w	ip, ip, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800275e:	d504      	bpl.n	800276a <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002760:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002764:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8002766:	f04c 0c08 	orr.w	ip, ip, #8
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800276a:	0595      	lsls	r5, r2, #22
 800276c:	d504      	bpl.n	8002778 <I2C_WaitOnTXISFlagUntilTimeout+0x60>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800276e:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8002772:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002776:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002778:	699a      	ldr	r2, [r3, #24]
 800277a:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 800277c:	bf44      	itt	mi
 800277e:	2200      	movmi	r2, #0
 8002780:	629a      	strmi	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002782:	699a      	ldr	r2, [r3, #24]
 8002784:	07d1      	lsls	r1, r2, #31
 8002786:	d403      	bmi.n	8002790 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002788:	699a      	ldr	r2, [r3, #24]
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	483b      	ldr	r0, [pc, #236]	@ (8002880 <I2C_WaitOnTXISFlagUntilTimeout+0x168>)
 8002794:	4002      	ands	r2, r0
 8002796:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8002798:	f8d8 3044 	ldr.w	r3, [r8, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800279c:	2120      	movs	r1, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800279e:	2200      	movs	r2, #0
    hi2c->ErrorCode |= error_code;
 80027a0:	ea43 030c 	orr.w	r3, r3, ip
 80027a4:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80027a8:	f888 1041 	strb.w	r1, [r8, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ac:	f888 2042 	strb.w	r2, [r8, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 80027b0:	2300      	movs	r3, #0
 80027b2:	f888 3040 	strb.w	r3, [r8, #64]	@ 0x40
      return HAL_ERROR;
 80027b6:	2001      	movs	r0, #1
}
 80027b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80027bc:	0550      	lsls	r0, r2, #21
 80027be:	d4cf      	bmi.n	8002760 <I2C_WaitOnTXISFlagUntilTimeout+0x48>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80027c0:	0594      	lsls	r4, r2, #22
 80027c2:	d4d4      	bmi.n	800276e <I2C_WaitOnTXISFlagUntilTimeout+0x56>
  if (status != HAL_OK)
 80027c4:	2900      	cmp	r1, #0
 80027c6:	d1d7      	bne.n	8002778 <I2C_WaitOnTXISFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 80027c8:	1c6a      	adds	r2, r5, #1
 80027ca:	d0ac      	beq.n	8002726 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027cc:	f7fe fece 	bl	800156c <HAL_GetTick>
 80027d0:	1bc3      	subs	r3, r0, r7
 80027d2:	42ab      	cmp	r3, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80027d4:	f8d8 3000 	ldr.w	r3, [r8]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027d8:	d801      	bhi.n	80027de <I2C_WaitOnTXISFlagUntilTimeout+0xc6>
 80027da:	2d00      	cmp	r5, #0
 80027dc:	d1a3      	bne.n	8002726 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80027de:	699a      	ldr	r2, [r3, #24]
 80027e0:	f012 0202 	ands.w	r2, r2, #2
 80027e4:	d19f      	bne.n	8002726 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027e6:	f8d8 3044 	ldr.w	r3, [r8, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80027ea:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027ec:	430b      	orrs	r3, r1
 80027ee:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80027f2:	f888 1041 	strb.w	r1, [r8, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f6:	f888 2042 	strb.w	r2, [r8, #66]	@ 0x42
          return HAL_ERROR;
 80027fa:	e7d9      	b.n	80027b0 <I2C_WaitOnTXISFlagUntilTimeout+0x98>
  HAL_StatusTypeDef status = HAL_OK;
 80027fc:	4661      	mov	r1, ip
 80027fe:	e7a5      	b.n	800274c <I2C_WaitOnTXISFlagUntilTimeout+0x34>
  return HAL_OK;
 8002800:	2000      	movs	r0, #0
}
 8002802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint32_t tickstart = Tickstart;
 8002806:	46b9      	mov	r9, r7
  HAL_StatusTypeDef status = HAL_OK;
 8002808:	46a2      	mov	sl, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800280a:	699a      	ldr	r2, [r3, #24]
 800280c:	0692      	lsls	r2, r2, #26
 800280e:	d432      	bmi.n	8002876 <I2C_WaitOnTXISFlagUntilTimeout+0x15e>
 8002810:	f1ba 0f00 	cmp.w	sl, #0
 8002814:	d197      	bne.n	8002746 <I2C_WaitOnTXISFlagUntilTimeout+0x2e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002816:	f7fe fea9 	bl	800156c <HAL_GetTick>
 800281a:	eba0 0009 	sub.w	r0, r0, r9
 800281e:	4285      	cmp	r5, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002820:	f8d8 3000 	ldr.w	r3, [r8]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002824:	d301      	bcc.n	800282a <I2C_WaitOnTXISFlagUntilTimeout+0x112>
 8002826:	2d00      	cmp	r5, #0
 8002828:	d1ef      	bne.n	800280a <I2C_WaitOnTXISFlagUntilTimeout+0xf2>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800282a:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800282c:	f898 2042 	ldrb.w	r2, [r8, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002830:	6999      	ldr	r1, [r3, #24]
 8002832:	0409      	lsls	r1, r1, #16
          tmp2 = hi2c->Mode;
 8002834:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002836:	d50c      	bpl.n	8002852 <I2C_WaitOnTXISFlagUntilTimeout+0x13a>
 8002838:	0441      	lsls	r1, r0, #17
 800283a:	d40a      	bmi.n	8002852 <I2C_WaitOnTXISFlagUntilTimeout+0x13a>
              (tmp1 != I2C_CR2_STOP) && \
 800283c:	2a20      	cmp	r2, #32
 800283e:	d008      	beq.n	8002852 <I2C_WaitOnTXISFlagUntilTimeout+0x13a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002846:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8002848:	f7fe fe90 	bl	800156c <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800284c:	f8d8 3000 	ldr.w	r3, [r8]
            tickstart = HAL_GetTick();
 8002850:	4681      	mov	r9, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002852:	699a      	ldr	r2, [r3, #24]
 8002854:	0690      	lsls	r0, r2, #26
 8002856:	d4d8      	bmi.n	800280a <I2C_WaitOnTXISFlagUntilTimeout+0xf2>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002858:	f7fe fe88 	bl	800156c <HAL_GetTick>
 800285c:	eba0 0009 	sub.w	r0, r0, r9
 8002860:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002862:	f8d8 3000 	ldr.w	r3, [r8]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002866:	d9f4      	bls.n	8002852 <I2C_WaitOnTXISFlagUntilTimeout+0x13a>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002868:	699a      	ldr	r2, [r3, #24]
 800286a:	0692      	lsls	r2, r2, #26
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800286c:	f04f 0420 	mov.w	r4, #32
              status = HAL_ERROR;
 8002870:	f04f 0a01 	mov.w	sl, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002874:	d5cc      	bpl.n	8002810 <I2C_WaitOnTXISFlagUntilTimeout+0xf8>
    if (status == HAL_OK)
 8002876:	f1ba 0f00 	cmp.w	sl, #0
 800287a:	f43f af62 	beq.w	8002742 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
 800287e:	e762      	b.n	8002746 <I2C_WaitOnTXISFlagUntilTimeout+0x2e>
 8002880:	fe00e800 	.word	0xfe00e800

08002884 <I2C_WaitOnFlagUntilTimeout>:
{
 8002884:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002888:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800288a:	6800      	ldr	r0, [r0, #0]
{
 800288c:	4688      	mov	r8, r1
 800288e:	4617      	mov	r7, r2
 8002890:	461e      	mov	r6, r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002892:	f04f 0a10 	mov.w	sl, #16
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002896:	6983      	ldr	r3, [r0, #24]
 8002898:	ea38 0303 	bics.w	r3, r8, r3
 800289c:	bf0c      	ite	eq
 800289e:	2301      	moveq	r3, #1
 80028a0:	2300      	movne	r3, #0
 80028a2:	42bb      	cmp	r3, r7
 80028a4:	d16a      	bne.n	800297c <I2C_WaitOnFlagUntilTimeout+0xf8>
  uint32_t itflag   = hi2c->Instance->ISR;
 80028a6:	6984      	ldr	r4, [r0, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80028a8:	f014 0410 	ands.w	r4, r4, #16
 80028ac:	d064      	beq.n	8002978 <I2C_WaitOnFlagUntilTimeout+0xf4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028ae:	1c71      	adds	r1, r6, #1
 80028b0:	f8c0 a01c 	str.w	sl, [r0, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028b4:	d165      	bne.n	8002982 <I2C_WaitOnFlagUntilTimeout+0xfe>
 80028b6:	6983      	ldr	r3, [r0, #24]
 80028b8:	069a      	lsls	r2, r3, #26
 80028ba:	d5fc      	bpl.n	80028b6 <I2C_WaitOnFlagUntilTimeout+0x32>
  uint32_t error_code = 0;
 80028bc:	2400      	movs	r4, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028be:	2320      	movs	r3, #32
 80028c0:	61c3      	str	r3, [r0, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80028c2:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 80028c6:	2201      	movs	r2, #1
  itflag = hi2c->Instance->ISR;
 80028c8:	6983      	ldr	r3, [r0, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80028ca:	05d9      	lsls	r1, r3, #23
 80028cc:	d531      	bpl.n	8002932 <I2C_WaitOnFlagUntilTimeout+0xae>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80028ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80028d2:	055e      	lsls	r6, r3, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80028d4:	61c2      	str	r2, [r0, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 80028d6:	f044 0401 	orr.w	r4, r4, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80028da:	d504      	bpl.n	80028e6 <I2C_WaitOnFlagUntilTimeout+0x62>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80028dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028e0:	61c2      	str	r2, [r0, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 80028e2:	f044 0408 	orr.w	r4, r4, #8
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80028e6:	059a      	lsls	r2, r3, #22
 80028e8:	d504      	bpl.n	80028f4 <I2C_WaitOnFlagUntilTimeout+0x70>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80028ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80028ee:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80028f2:	61c3      	str	r3, [r0, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028f4:	6983      	ldr	r3, [r0, #24]
 80028f6:	0799      	lsls	r1, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 80028f8:	bf44      	itt	mi
 80028fa:	2300      	movmi	r3, #0
 80028fc:	6283      	strmi	r3, [r0, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028fe:	6983      	ldr	r3, [r0, #24]
 8002900:	07da      	lsls	r2, r3, #31
 8002902:	d403      	bmi.n	800290c <I2C_WaitOnFlagUntilTimeout+0x88>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002904:	6983      	ldr	r3, [r0, #24]
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	6183      	str	r3, [r0, #24]
    I2C_RESET_CR2(hi2c);
 800290c:	6843      	ldr	r3, [r0, #4]
 800290e:	4a3b      	ldr	r2, [pc, #236]	@ (80029fc <I2C_WaitOnFlagUntilTimeout+0x178>)
 8002910:	4013      	ands	r3, r2
 8002912:	6043      	str	r3, [r0, #4]
    hi2c->ErrorCode |= error_code;
 8002914:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002916:	2120      	movs	r1, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002918:	2200      	movs	r2, #0
    hi2c->ErrorCode |= error_code;
 800291a:	4323      	orrs	r3, r4
 800291c:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800291e:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002922:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8002926:	2300      	movs	r3, #0
 8002928:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
      return HAL_ERROR;
 800292c:	2001      	movs	r0, #1
}
 800292e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002932:	0559      	lsls	r1, r3, #21
 8002934:	d4d2      	bmi.n	80028dc <I2C_WaitOnFlagUntilTimeout+0x58>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002936:	059b      	lsls	r3, r3, #22
 8002938:	d4d7      	bmi.n	80028ea <I2C_WaitOnFlagUntilTimeout+0x66>
  if (status != HAL_OK)
 800293a:	2a00      	cmp	r2, #0
 800293c:	d1da      	bne.n	80028f4 <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 800293e:	1c73      	adds	r3, r6, #1
 8002940:	d0a9      	beq.n	8002896 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002942:	f7fe fe13 	bl	800156c <HAL_GetTick>
 8002946:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002948:	1ac3      	subs	r3, r0, r3
 800294a:	42b3      	cmp	r3, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800294c:	6828      	ldr	r0, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294e:	d801      	bhi.n	8002954 <I2C_WaitOnFlagUntilTimeout+0xd0>
 8002950:	2e00      	cmp	r6, #0
 8002952:	d19e      	bne.n	8002892 <I2C_WaitOnFlagUntilTimeout+0xe>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002954:	6983      	ldr	r3, [r0, #24]
 8002956:	ea38 0303 	bics.w	r3, r8, r3
 800295a:	bf0c      	ite	eq
 800295c:	2301      	moveq	r3, #1
 800295e:	2300      	movne	r3, #0
 8002960:	42bb      	cmp	r3, r7
 8002962:	d196      	bne.n	8002892 <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002964:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002966:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002968:	430b      	orrs	r3, r1
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800296a:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800296c:	646b      	str	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800296e:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002972:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
          return HAL_ERROR;
 8002976:	e7d6      	b.n	8002926 <I2C_WaitOnFlagUntilTimeout+0xa2>
  HAL_StatusTypeDef status = HAL_OK;
 8002978:	4622      	mov	r2, r4
 800297a:	e7a5      	b.n	80028c8 <I2C_WaitOnFlagUntilTimeout+0x44>
  return HAL_OK;
 800297c:	2000      	movs	r0, #0
}
 800297e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t error_code = 0;
 8002982:	2400      	movs	r4, #0
  uint32_t tickstart = Tickstart;
 8002984:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
  HAL_StatusTypeDef status = HAL_OK;
 8002988:	46a3      	mov	fp, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800298a:	6983      	ldr	r3, [r0, #24]
 800298c:	069b      	lsls	r3, r3, #26
 800298e:	d42f      	bmi.n	80029f0 <I2C_WaitOnFlagUntilTimeout+0x16c>
 8002990:	f1bb 0f00 	cmp.w	fp, #0
 8002994:	d195      	bne.n	80028c2 <I2C_WaitOnFlagUntilTimeout+0x3e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002996:	f7fe fde9 	bl	800156c <HAL_GetTick>
 800299a:	eba0 0009 	sub.w	r0, r0, r9
 800299e:	4286      	cmp	r6, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80029a0:	6828      	ldr	r0, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029a2:	d301      	bcc.n	80029a8 <I2C_WaitOnFlagUntilTimeout+0x124>
 80029a4:	2e00      	cmp	r6, #0
 80029a6:	d1f0      	bne.n	800298a <I2C_WaitOnFlagUntilTimeout+0x106>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80029a8:	6841      	ldr	r1, [r0, #4]
          tmp2 = hi2c->Mode;
 80029aa:	f895 3042 	ldrb.w	r3, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80029ae:	6982      	ldr	r2, [r0, #24]
 80029b0:	0412      	lsls	r2, r2, #16
          tmp2 = hi2c->Mode;
 80029b2:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80029b4:	d50b      	bpl.n	80029ce <I2C_WaitOnFlagUntilTimeout+0x14a>
 80029b6:	044a      	lsls	r2, r1, #17
 80029b8:	d409      	bmi.n	80029ce <I2C_WaitOnFlagUntilTimeout+0x14a>
              (tmp1 != I2C_CR2_STOP) && \
 80029ba:	2b20      	cmp	r3, #32
 80029bc:	d007      	beq.n	80029ce <I2C_WaitOnFlagUntilTimeout+0x14a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80029be:	6843      	ldr	r3, [r0, #4]
 80029c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029c4:	6043      	str	r3, [r0, #4]
            tickstart = HAL_GetTick();
 80029c6:	f7fe fdd1 	bl	800156c <HAL_GetTick>
 80029ca:	4681      	mov	r9, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029cc:	6828      	ldr	r0, [r5, #0]
 80029ce:	6983      	ldr	r3, [r0, #24]
 80029d0:	0699      	lsls	r1, r3, #26
 80029d2:	d4da      	bmi.n	800298a <I2C_WaitOnFlagUntilTimeout+0x106>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80029d4:	f7fe fdca 	bl	800156c <HAL_GetTick>
 80029d8:	eba0 0009 	sub.w	r0, r0, r9
 80029dc:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029de:	6828      	ldr	r0, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80029e0:	d9f5      	bls.n	80029ce <I2C_WaitOnFlagUntilTimeout+0x14a>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029e2:	6983      	ldr	r3, [r0, #24]
 80029e4:	069b      	lsls	r3, r3, #26
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80029e6:	f04f 0420 	mov.w	r4, #32
              status = HAL_ERROR;
 80029ea:	f04f 0b01 	mov.w	fp, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029ee:	d5cf      	bpl.n	8002990 <I2C_WaitOnFlagUntilTimeout+0x10c>
    if (status == HAL_OK)
 80029f0:	f1bb 0f00 	cmp.w	fp, #0
 80029f4:	f43f af63 	beq.w	80028be <I2C_WaitOnFlagUntilTimeout+0x3a>
 80029f8:	e763      	b.n	80028c2 <I2C_WaitOnFlagUntilTimeout+0x3e>
 80029fa:	bf00      	nop
 80029fc:	fe00e800 	.word	0xfe00e800

08002a00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a00:	6803      	ldr	r3, [r0, #0]
{
 8002a02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a06:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a08:	6998      	ldr	r0, [r3, #24]
 8002a0a:	0684      	lsls	r4, r0, #26
 8002a0c:	d45e      	bmi.n	8002acc <I2C_WaitOnSTOPFlagUntilTimeout+0xcc>
 8002a0e:	460e      	mov	r6, r1
 8002a10:	4617      	mov	r7, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a12:	f04f 0810 	mov.w	r8, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a16:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a18:	f012 0c10 	ands.w	ip, r2, #16
 8002a1c:	d059      	beq.n	8002ad2 <I2C_WaitOnSTOPFlagUntilTimeout+0xd2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a1e:	1c70      	adds	r0, r6, #1
 8002a20:	f8c3 801c 	str.w	r8, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a24:	d160      	bne.n	8002ae8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe8>
 8002a26:	699a      	ldr	r2, [r3, #24]
 8002a28:	0691      	lsls	r1, r2, #26
 8002a2a:	d5fc      	bpl.n	8002a26 <I2C_WaitOnSTOPFlagUntilTimeout+0x26>
  uint32_t error_code = 0;
 8002a2c:	2400      	movs	r4, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a2e:	2220      	movs	r2, #32
 8002a30:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8002a32:	f044 0c04 	orr.w	ip, r4, #4
    status = HAL_ERROR;
 8002a36:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 8002a38:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a3a:	05d0      	lsls	r0, r2, #23
 8002a3c:	d532      	bpl.n	8002aa4 <I2C_WaitOnSTOPFlagUntilTimeout+0xa4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a3e:	f44f 7180 	mov.w	r1, #256	@ 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a42:	0554      	lsls	r4, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a44:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8002a46:	f04c 0c01 	orr.w	ip, ip, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a4a:	d504      	bpl.n	8002a56 <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a4c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002a50:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8002a52:	f04c 0c08 	orr.w	ip, ip, #8
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a56:	0596      	lsls	r6, r2, #22
 8002a58:	d504      	bpl.n	8002a64 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a5e:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a62:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a64:	699a      	ldr	r2, [r3, #24]
 8002a66:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8002a68:	bf44      	itt	mi
 8002a6a:	2200      	movmi	r2, #0
 8002a6c:	629a      	strmi	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a6e:	699a      	ldr	r2, [r3, #24]
 8002a70:	07d1      	lsls	r1, r2, #31
 8002a72:	d403      	bmi.n	8002a7c <I2C_WaitOnSTOPFlagUntilTimeout+0x7c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a74:	699a      	ldr	r2, [r3, #24]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	4836      	ldr	r0, [pc, #216]	@ (8002b58 <I2C_WaitOnSTOPFlagUntilTimeout+0x158>)
 8002a80:	4002      	ands	r2, r0
 8002a82:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8002a84:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a86:	2120      	movs	r1, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a88:	2200      	movs	r2, #0
    hi2c->ErrorCode |= error_code;
 8002a8a:	ea43 030c 	orr.w	r3, r3, ip
 8002a8e:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a90:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a94:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
      return HAL_ERROR;
 8002a9e:	2001      	movs	r0, #1
}
 8002aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002aa4:	0550      	lsls	r0, r2, #21
 8002aa6:	d4d1      	bmi.n	8002a4c <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002aa8:	0594      	lsls	r4, r2, #22
 8002aaa:	d4d6      	bmi.n	8002a5a <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
  if (status != HAL_OK)
 8002aac:	2900      	cmp	r1, #0
 8002aae:	d1d9      	bne.n	8002a64 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab0:	f7fe fd5c 	bl	800156c <HAL_GetTick>
 8002ab4:	1bc0      	subs	r0, r0, r7
 8002ab6:	42b0      	cmp	r0, r6
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002ab8:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aba:	d800      	bhi.n	8002abe <I2C_WaitOnSTOPFlagUntilTimeout+0xbe>
 8002abc:	b91e      	cbnz	r6, 8002ac6 <I2C_WaitOnSTOPFlagUntilTimeout+0xc6>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002abe:	699a      	ldr	r2, [r3, #24]
 8002ac0:	f012 0220 	ands.w	r2, r2, #32
 8002ac4:	d007      	beq.n	8002ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0xd6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ac6:	699a      	ldr	r2, [r3, #24]
 8002ac8:	0692      	lsls	r2, r2, #26
 8002aca:	d5a4      	bpl.n	8002a16 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8002acc:	2000      	movs	r0, #0
}
 8002ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8002ad2:	4661      	mov	r1, ip
 8002ad4:	e7b0      	b.n	8002a38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ad6:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ad8:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ada:	430b      	orrs	r3, r1
 8002adc:	646b      	str	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ade:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae2:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
        return HAL_ERROR;
 8002ae6:	e7d7      	b.n	8002a98 <I2C_WaitOnSTOPFlagUntilTimeout+0x98>
  uint32_t error_code = 0;
 8002ae8:	2400      	movs	r4, #0
  uint32_t tickstart = Tickstart;
 8002aea:	46b9      	mov	r9, r7
  HAL_StatusTypeDef status = HAL_OK;
 8002aec:	46a2      	mov	sl, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002aee:	699a      	ldr	r2, [r3, #24]
 8002af0:	0692      	lsls	r2, r2, #26
 8002af2:	d42c      	bmi.n	8002b4e <I2C_WaitOnSTOPFlagUntilTimeout+0x14e>
 8002af4:	f1ba 0f00 	cmp.w	sl, #0
 8002af8:	d19b      	bne.n	8002a32 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002afa:	f7fe fd37 	bl	800156c <HAL_GetTick>
 8002afe:	eba0 0009 	sub.w	r0, r0, r9
 8002b02:	4286      	cmp	r6, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b04:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b06:	d301      	bcc.n	8002b0c <I2C_WaitOnSTOPFlagUntilTimeout+0x10c>
 8002b08:	2e00      	cmp	r6, #0
 8002b0a:	d1f0      	bne.n	8002aee <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b0c:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8002b0e:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b12:	6999      	ldr	r1, [r3, #24]
 8002b14:	0409      	lsls	r1, r1, #16
          tmp2 = hi2c->Mode;
 8002b16:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b18:	d50b      	bpl.n	8002b32 <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
 8002b1a:	0441      	lsls	r1, r0, #17
 8002b1c:	d409      	bmi.n	8002b32 <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
              (tmp1 != I2C_CR2_STOP) && \
 8002b1e:	2a20      	cmp	r2, #32
 8002b20:	d007      	beq.n	8002b32 <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b28:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8002b2a:	f7fe fd1f 	bl	800156c <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b2e:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8002b30:	4681      	mov	r9, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b32:	699a      	ldr	r2, [r3, #24]
 8002b34:	0690      	lsls	r0, r2, #26
 8002b36:	d4da      	bmi.n	8002aee <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b38:	f7fe fd18 	bl	800156c <HAL_GetTick>
 8002b3c:	eba0 0009 	sub.w	r0, r0, r9
 8002b40:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b42:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b44:	d9f5      	bls.n	8002b32 <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002b46:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8002b48:	f04f 0a01 	mov.w	sl, #1
 8002b4c:	e7cf      	b.n	8002aee <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
    if (status == HAL_OK)
 8002b4e:	f1ba 0f00 	cmp.w	sl, #0
 8002b52:	f43f af6c 	beq.w	8002a2e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8002b56:	e76c      	b.n	8002a32 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8002b58:	fe00e800 	.word	0xfe00e800

08002b5c <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	d054      	beq.n	8002c0a <HAL_I2C_Init+0xae>
{
 8002b60:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b62:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002b66:	4604      	mov	r4, r0
 8002b68:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d047      	beq.n	8002c00 <HAL_I2C_Init+0xa4>
  __HAL_I2C_DISABLE(hi2c);
 8002b70:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b72:	2224      	movs	r2, #36	@ 0x24
 8002b74:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002b78:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b7a:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 8002b7c:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b80:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 8002b84:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b86:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b88:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b8a:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b90:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b92:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b94:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b96:	d009      	beq.n	8002bac <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b98:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b9c:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b9e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ba0:	d107      	bne.n	8002bb2 <HAL_I2C_Init+0x56>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	e006      	b.n	8002bba <HAL_I2C_Init+0x5e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bb0:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bb8:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bba:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bbc:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bbe:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 8002bc2:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8002bc6:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bc8:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bca:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bcc:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002bce:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bd0:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bd4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bd8:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bda:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bdc:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bde:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002be0:	4301      	orrs	r1, r0
 8002be2:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002be4:	6819      	ldr	r1, [r3, #0]
 8002be6:	f041 0101 	orr.w	r1, r1, #1
 8002bea:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bec:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002bee:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf0:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bf2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bf6:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf8:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
  return HAL_OK;
 8002bfc:	4610      	mov	r0, r2
}
 8002bfe:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002c00:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8002c04:	f7fe fb18 	bl	8001238 <HAL_I2C_MspInit>
 8002c08:	e7b2      	b.n	8002b70 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8002c0a:	2001      	movs	r0, #1
}
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop

08002c10 <HAL_I2C_Mem_Write>:
{
 8002c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c14:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c16:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
{
 8002c1a:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c1c:	2820      	cmp	r0, #32
{
 8002c1e:	f8bd a02c 	ldrh.w	sl, [sp, #44]	@ 0x2c
 8002c22:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c24:	f040 80a2 	bne.w	8002d6c <HAL_I2C_Mem_Write+0x15c>
    if ((pData == NULL) || (Size == 0U))
 8002c28:	4698      	mov	r8, r3
 8002c2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 8096 	beq.w	8002d5e <HAL_I2C_Mem_Write+0x14e>
 8002c32:	f1ba 0f00 	cmp.w	sl, #0
 8002c36:	f000 8092 	beq.w	8002d5e <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8002c3a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	f000 8094 	beq.w	8002d6c <HAL_I2C_Mem_Write+0x15c>
 8002c44:	2301      	movs	r3, #1
 8002c46:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8002c4a:	460d      	mov	r5, r1
 8002c4c:	4691      	mov	r9, r2
 8002c4e:	f7fe fc8d 	bl	800156c <HAL_GetTick>
 8002c52:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c54:	4601      	mov	r1, r0
 8002c56:	4620      	mov	r0, r4
 8002c58:	f7ff fcbc 	bl	80025d4 <I2C_WaitOnFlagUntilTimeout.constprop.0>
 8002c5c:	2800      	cmp	r0, #0
 8002c5e:	f040 8081 	bne.w	8002d64 <HAL_I2C_Mem_Write+0x154>
    hi2c->pBuffPtr  = pData;
 8002c62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002c64:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c66:	2321      	movs	r3, #33	@ 0x21
 8002c68:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c6c:	6822      	ldr	r2, [r4, #0]
 8002c6e:	4963      	ldr	r1, [pc, #396]	@ (8002dfc <HAL_I2C_Mem_Write+0x1ec>)
    hi2c->XferISR   = NULL;
 8002c70:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c72:	2340      	movs	r3, #64	@ 0x40
 8002c74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c78:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 8002c7a:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c7e:	6853      	ldr	r3, [r2, #4]
 8002c80:	400b      	ands	r3, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c82:	fa5f f188 	uxtb.w	r1, r8
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c8a:	f3c5 0509 	ubfx	r5, r5, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c8e:	432b      	orrs	r3, r5
 8002c90:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c94:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c98:	6053      	str	r3, [r2, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c9a:	4639      	mov	r1, r7
 8002c9c:	4632      	mov	r2, r6
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	f7ff fd3a 	bl	8002718 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ca4:	2800      	cmp	r0, #0
 8002ca6:	d165      	bne.n	8002d74 <HAL_I2C_Mem_Write+0x164>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ca8:	f1b8 0f01 	cmp.w	r8, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cac:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cae:	d165      	bne.n	8002d7c <HAL_I2C_Mem_Write+0x16c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cb0:	fa5f f289 	uxtb.w	r2, r9
 8002cb4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002cb6:	9600      	str	r6, [sp, #0]
 8002cb8:	463b      	mov	r3, r7
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2180      	movs	r1, #128	@ 0x80
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	f7ff fde0 	bl	8002884 <I2C_WaitOnFlagUntilTimeout>
 8002cc4:	2800      	cmp	r0, #0
 8002cc6:	d155      	bne.n	8002d74 <HAL_I2C_Mem_Write+0x164>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cc8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8002cca:	6822      	ldr	r2, [r4, #0]
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2bff      	cmp	r3, #255	@ 0xff
 8002cd0:	d970      	bls.n	8002db4 <HAL_I2C_Mem_Write+0x1a4>
  MODIFY_REG(hi2c->Instance->CR2, \
 8002cd2:	6853      	ldr	r3, [r2, #4]
 8002cd4:	494a      	ldr	r1, [pc, #296]	@ (8002e00 <HAL_I2C_Mem_Write+0x1f0>)
 8002cd6:	400b      	ands	r3, r1
 8002cd8:	432b      	orrs	r3, r5
 8002cda:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 8002cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ce2:	21ff      	movs	r1, #255	@ 0xff
 8002ce4:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ce6:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002ce8:	e003      	b.n	8002cf2 <HAL_I2C_Mem_Write+0xe2>
    } while (hi2c->XferCount > 0U);
 8002cea:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d06e      	beq.n	8002dd0 <HAL_I2C_Mem_Write+0x1c0>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cf2:	4632      	mov	r2, r6
 8002cf4:	4639      	mov	r1, r7
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	f7ff fd0e 	bl	8002718 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cfc:	2800      	cmp	r0, #0
 8002cfe:	d131      	bne.n	8002d64 <HAL_I2C_Mem_Write+0x154>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d00:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002d02:	6823      	ldr	r3, [r4, #0]
 8002d04:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d08:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d0a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d0c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8002d0e:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d16:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d18:	3a01      	subs	r2, #1
 8002d1a:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d1c:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002d1e:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0e2      	beq.n	8002cea <HAL_I2C_Mem_Write+0xda>
 8002d24:	2a00      	cmp	r2, #0
 8002d26:	d1e0      	bne.n	8002cea <HAL_I2C_Mem_Write+0xda>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d28:	2180      	movs	r1, #128	@ 0x80
 8002d2a:	9600      	str	r6, [sp, #0]
 8002d2c:	463b      	mov	r3, r7
 8002d2e:	4620      	mov	r0, r4
 8002d30:	f7ff fda8 	bl	8002884 <I2C_WaitOnFlagUntilTimeout>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d34:	21ff      	movs	r1, #255	@ 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d36:	b9a8      	cbnz	r0, 8002d64 <HAL_I2C_Mem_Write+0x154>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d38:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d3a:	f8df c0c4 	ldr.w	ip, [pc, #196]	@ 8002e00 <HAL_I2C_Mem_Write+0x1f0>
 8002d3e:	6822      	ldr	r2, [r4, #0]
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	428b      	cmp	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d44:	4660      	mov	r0, ip
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d46:	d928      	bls.n	8002d9a <HAL_I2C_Mem_Write+0x18a>
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d48:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d4a:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d4c:	ea03 030c 	and.w	r3, r3, ip
 8002d50:	432b      	orrs	r3, r5
 8002d52:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 8002d56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d5a:	6053      	str	r3, [r2, #4]
}
 8002d5c:	e7c5      	b.n	8002cea <HAL_I2C_Mem_Write+0xda>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d62:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8002d64:	2001      	movs	r0, #1
}
 8002d66:	b002      	add	sp, #8
 8002d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8002d6c:	2002      	movs	r0, #2
}
 8002d6e:	b002      	add	sp, #8
 8002d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_UNLOCK(hi2c);
 8002d74:	2300      	movs	r3, #0
 8002d76:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8002d7a:	e7f3      	b.n	8002d64 <HAL_I2C_Mem_Write+0x154>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d7c:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8002d80:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d82:	4639      	mov	r1, r7
 8002d84:	4632      	mov	r2, r6
 8002d86:	4620      	mov	r0, r4
 8002d88:	f7ff fcc6 	bl	8002718 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d8c:	2800      	cmp	r0, #0
 8002d8e:	d1f1      	bne.n	8002d74 <HAL_I2C_Mem_Write+0x164>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d90:	6823      	ldr	r3, [r4, #0]
 8002d92:	fa5f f289 	uxtb.w	r2, r9
 8002d96:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d98:	e78d      	b.n	8002cb6 <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 8002d9a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d9c:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002da2:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8002da4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8002da8:	4001      	ands	r1, r0
 8002daa:	430b      	orrs	r3, r1
 8002dac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002db0:	6053      	str	r3, [r2, #4]
}
 8002db2:	e79a      	b.n	8002cea <HAL_I2C_Mem_Write+0xda>
      hi2c->XferSize = hi2c->XferCount;
 8002db4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8002db6:	4812      	ldr	r0, [pc, #72]	@ (8002e00 <HAL_I2C_Mem_Write+0x1f0>)
 8002db8:	6851      	ldr	r1, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dbe:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8002dc0:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8002dc4:	4001      	ands	r1, r0
 8002dc6:	430b      	orrs	r3, r1
 8002dc8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002dcc:	6053      	str	r3, [r2, #4]
}
 8002dce:	e790      	b.n	8002cf2 <HAL_I2C_Mem_Write+0xe2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd0:	4632      	mov	r2, r6
 8002dd2:	4639      	mov	r1, r7
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	f7ff fe13 	bl	8002a00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dda:	2800      	cmp	r0, #0
 8002ddc:	d1c2      	bne.n	8002d64 <HAL_I2C_Mem_Write+0x154>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dde:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002de0:	4d08      	ldr	r5, [pc, #32]	@ (8002e04 <HAL_I2C_Mem_Write+0x1f4>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002de2:	2120      	movs	r1, #32
 8002de4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	402a      	ands	r2, r5
 8002dea:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002dec:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8002df0:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002df4:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8002df8:	e7b5      	b.n	8002d66 <HAL_I2C_Mem_Write+0x156>
 8002dfa:	bf00      	nop
 8002dfc:	fc009800 	.word	0xfc009800
 8002e00:	fc009c00 	.word	0xfc009c00
 8002e04:	fe00e800 	.word	0xfe00e800

08002e08 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e08:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8002e0c:	2a20      	cmp	r2, #32
 8002e0e:	d123      	bne.n	8002e58 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8002e10:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e14:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8002e18:	2a01      	cmp	r2, #1
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	d01c      	beq.n	8002e58 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e1e:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e20:	2024      	movs	r0, #36	@ 0x24
{
 8002e22:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e24:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002e28:	6810      	ldr	r0, [r2, #0]
 8002e2a:	f020 0001 	bic.w	r0, r0, #1
 8002e2e:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e30:	6810      	ldr	r0, [r2, #0]
 8002e32:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8002e36:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e38:	6810      	ldr	r0, [r2, #0]
 8002e3a:	4301      	orrs	r1, r0
 8002e3c:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e3e:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e40:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 8002e44:	f041 0101 	orr.w	r1, r1, #1
 8002e48:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002e4a:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8002e4e:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e52:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002e54:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8002e58:	2002      	movs	r0, #2
}
 8002e5a:	4770      	bx	lr

08002e5c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e5c:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8002e60:	2a20      	cmp	r2, #32
 8002e62:	d122      	bne.n	8002eaa <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 8002e64:	b500      	push	{lr}
 8002e66:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e6a:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8002e6e:	2a01      	cmp	r2, #1
 8002e70:	4603      	mov	r3, r0
 8002e72:	d01c      	beq.n	8002eae <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e74:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e76:	2024      	movs	r0, #36	@ 0x24
 8002e78:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002e7c:	6810      	ldr	r0, [r2, #0]
 8002e7e:	f020 0001 	bic.w	r0, r0, #1
 8002e82:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e84:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e86:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e8a:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e8e:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e90:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e92:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 8002e96:	f041 0101 	orr.w	r1, r1, #1
 8002e9a:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002e9c:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8002ea0:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ea4:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002ea6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8002eaa:	2002      	movs	r0, #2
}
 8002eac:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002eae:	2002      	movs	r0, #2
}
 8002eb0:	f85d fb04 	ldr.w	pc, [sp], #4

08002eb4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002eb4:	4b02      	ldr	r3, [pc, #8]	@ (8002ec0 <HAL_PWREx_GetVoltageRange+0xc>)
 8002eb6:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002eb8:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40007000 	.word	0x40007000

08002ec4 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ec4:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8002ec8:	d00e      	beq.n	8002ee8 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eca:	4a1b      	ldr	r2, [pc, #108]	@ (8002f38 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002ecc:	6813      	ldr	r3, [r2, #0]
 8002ece:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ed6:	d005      	beq.n	8002ee4 <HAL_PWREx_ControlVoltageScaling+0x20>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ed8:	6813      	ldr	r3, [r2, #0]
 8002eda:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ede:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ee2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ee8:	4913      	ldr	r1, [pc, #76]	@ (8002f38 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002eea:	680b      	ldr	r3, [r1, #0]
 8002eec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ef4:	d0f6      	beq.n	8002ee4 <HAL_PWREx_ControlVoltageScaling+0x20>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ef6:	680b      	ldr	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ef8:	4a10      	ldr	r2, [pc, #64]	@ (8002f3c <HAL_PWREx_ControlVoltageScaling+0x78>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002efa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002efe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f02:	600b      	str	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f04:	6813      	ldr	r3, [r2, #0]
 8002f06:	4a0e      	ldr	r2, [pc, #56]	@ (8002f40 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002f08:	2032      	movs	r0, #50	@ 0x32
 8002f0a:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f0e:	6948      	ldr	r0, [r1, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f10:	fba2 2303 	umull	r2, r3, r2, r3
 8002f14:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f16:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f18:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f1c:	d506      	bpl.n	8002f2c <HAL_PWREx_ControlVoltageScaling+0x68>
 8002f1e:	e000      	b.n	8002f22 <HAL_PWREx_ControlVoltageScaling+0x5e>
 8002f20:	b123      	cbz	r3, 8002f2c <HAL_PWREx_ControlVoltageScaling+0x68>
 8002f22:	694a      	ldr	r2, [r1, #20]
 8002f24:	0552      	lsls	r2, r2, #21
        wait_loop_index--;
 8002f26:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f2a:	d4f9      	bmi.n	8002f20 <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f2c:	4b02      	ldr	r3, [pc, #8]	@ (8002f38 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	055b      	lsls	r3, r3, #21
 8002f32:	d5d7      	bpl.n	8002ee4 <HAL_PWREx_ControlVoltageScaling+0x20>
        return HAL_TIMEOUT;
 8002f34:	2003      	movs	r0, #3
}
 8002f36:	4770      	bx	lr
 8002f38:	40007000 	.word	0x40007000
 8002f3c:	20000018 	.word	0x20000018
 8002f40:	431bde83 	.word	0x431bde83

08002f44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f44:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f46:	4d20      	ldr	r5, [pc, #128]	@ (8002fc8 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8002f48:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002f4a:	00db      	lsls	r3, r3, #3
{
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f50:	d51a      	bpl.n	8002f88 <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f52:	f7ff ffaf 	bl	8002eb4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f56:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8002f5a:	d027      	beq.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x68>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f5c:	2c80      	cmp	r4, #128	@ 0x80
 8002f5e:	d82c      	bhi.n	8002fba <RCC_SetFlashLatencyFromMSIRange+0x76>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f60:	d02f      	beq.n	8002fc2 <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f62:	f1a4 0470 	sub.w	r4, r4, #112	@ 0x70
 8002f66:	fab4 f484 	clz	r4, r4
 8002f6a:	0964      	lsrs	r4, r4, #5
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f6c:	4917      	ldr	r1, [pc, #92]	@ (8002fcc <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8002f6e:	680b      	ldr	r3, [r1, #0]
 8002f70:	f023 0307 	bic.w	r3, r3, #7
 8002f74:	4323      	orrs	r3, r4
 8002f76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f78:	6808      	ldr	r0, [r1, #0]
 8002f7a:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002f7e:	1b00      	subs	r0, r0, r4
 8002f80:	bf18      	it	ne
 8002f82:	2001      	movne	r0, #1
 8002f84:	b003      	add	sp, #12
 8002f86:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f88:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002f8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f8e:	65ab      	str	r3, [r5, #88]	@ 0x58
 8002f90:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f96:	9301      	str	r3, [sp, #4]
 8002f98:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002f9a:	f7ff ff8b 	bl	8002eb4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f9e:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fa0:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 8002fa4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fa8:	65ab      	str	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002faa:	d1d7      	bne.n	8002f5c <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 8002fac:	2c80      	cmp	r4, #128	@ 0x80
 8002fae:	d906      	bls.n	8002fbe <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fb0:	2ca1      	cmp	r4, #161	@ 0xa1
 8002fb2:	bf34      	ite	cc
 8002fb4:	2401      	movcc	r4, #1
 8002fb6:	2402      	movcs	r4, #2
 8002fb8:	e7d8      	b.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0x28>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002fba:	2403      	movs	r4, #3
 8002fbc:	e7d6      	b.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002fbe:	2400      	movs	r4, #0
 8002fc0:	e7d4      	b.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fc2:	2402      	movs	r4, #2
 8002fc4:	e7d2      	b.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0x28>
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40022000 	.word	0x40022000

08002fd0 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fd0:	4a28      	ldr	r2, [pc, #160]	@ (8003074 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fd2:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fd4:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fd6:	f013 030c 	ands.w	r3, r3, #12
 8002fda:	d005      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x18>
 8002fdc:	2b0c      	cmp	r3, #12
 8002fde:	d035      	beq.n	800304c <HAL_RCC_GetSysClockFreq+0x7c>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d141      	bne.n	8003068 <HAL_RCC_GetSysClockFreq+0x98>
    sysclockfreq = HSI_VALUE;
 8002fe4:	4824      	ldr	r0, [pc, #144]	@ (8003078 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002fe6:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fe8:	4a22      	ldr	r2, [pc, #136]	@ (8003074 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fea:	6811      	ldr	r1, [r2, #0]
 8002fec:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fee:	bf54      	ite	pl
 8002ff0:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ff4:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8002ff6:	4921      	ldr	r1, [pc, #132]	@ (800307c <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ff8:	bf54      	ite	pl
 8002ffa:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ffe:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8003002:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003006:	b303      	cbz	r3, 800304a <HAL_RCC_GetSysClockFreq+0x7a>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003008:	2b0c      	cmp	r3, #12
 800300a:	d11d      	bne.n	8003048 <HAL_RCC_GetSysClockFreq+0x78>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800300c:	4b19      	ldr	r3, [pc, #100]	@ (8003074 <HAL_RCC_GetSysClockFreq+0xa4>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8003014:	2b02      	cmp	r3, #2
 8003016:	d025      	beq.n	8003064 <HAL_RCC_GetSysClockFreq+0x94>
 8003018:	4a19      	ldr	r2, [pc, #100]	@ (8003080 <HAL_RCC_GetSysClockFreq+0xb0>)
 800301a:	2b03      	cmp	r3, #3
 800301c:	bf08      	it	eq
 800301e:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003020:	4b14      	ldr	r3, [pc, #80]	@ (8003074 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003022:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003024:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800302c:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003030:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003034:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003036:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800303a:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800303c:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800303e:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8003042:	fbb2 f0f3 	udiv	r0, r2, r3
 8003046:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003048:	2000      	movs	r0, #0
}
 800304a:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800304c:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003050:	2a01      	cmp	r2, #1
 8003052:	d0c9      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003054:	4b07      	ldr	r3, [pc, #28]	@ (8003074 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800305c:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800305e:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 8003062:	d1d9      	bne.n	8003018 <HAL_RCC_GetSysClockFreq+0x48>
      pllvco = HSI_VALUE;
 8003064:	4804      	ldr	r0, [pc, #16]	@ (8003078 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003066:	e7db      	b.n	8003020 <HAL_RCC_GetSysClockFreq+0x50>
    sysclockfreq = HSE_VALUE;
 8003068:	2b08      	cmp	r3, #8
 800306a:	4805      	ldr	r0, [pc, #20]	@ (8003080 <HAL_RCC_GetSysClockFreq+0xb0>)
 800306c:	bf18      	it	ne
 800306e:	2000      	movne	r0, #0
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	40021000 	.word	0x40021000
 8003078:	00f42400 	.word	0x00f42400
 800307c:	080066b4 	.word	0x080066b4
 8003080:	007a1200 	.word	0x007a1200

08003084 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8003084:	2800      	cmp	r0, #0
 8003086:	f000 81f0 	beq.w	800346a <HAL_RCC_OscConfig+0x3e6>
{
 800308a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800308e:	4aa7      	ldr	r2, [pc, #668]	@ (800332c <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003090:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003092:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003094:	68d6      	ldr	r6, [r2, #12]
 8003096:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003098:	06d8      	lsls	r0, r3, #27
{
 800309a:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800309c:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030a0:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030a4:	d52e      	bpl.n	8003104 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030a6:	2d00      	cmp	r5, #0
 80030a8:	f000 8100 	beq.w	80032ac <HAL_RCC_OscConfig+0x228>
 80030ac:	2d0c      	cmp	r5, #12
 80030ae:	f000 80fa 	beq.w	80032a6 <HAL_RCC_OscConfig+0x222>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030b2:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 80030b4:	4f9d      	ldr	r7, [pc, #628]	@ (800332c <HAL_RCC_OscConfig+0x2a8>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 817e 	beq.w	80033b8 <HAL_RCC_OscConfig+0x334>
        __HAL_RCC_MSI_ENABLE();
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80030c4:	f7fe fa52 	bl	800156c <HAL_GetTick>
 80030c8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030ca:	e006      	b.n	80030da <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030cc:	f7fe fa4e 	bl	800156c <HAL_GetTick>
 80030d0:	eba0 0008 	sub.w	r0, r0, r8
 80030d4:	2802      	cmp	r0, #2
 80030d6:	f200 817f 	bhi.w	80033d8 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	079b      	lsls	r3, r3, #30
 80030de:	d5f5      	bpl.n	80030cc <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	f043 0308 	orr.w	r3, r3, #8
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	6a22      	ldr	r2, [r4, #32]
 80030ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030f0:	4313      	orrs	r3, r2
 80030f2:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	69e2      	ldr	r2, [r4, #28]
 80030f8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003100:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003102:	6823      	ldr	r3, [r4, #0]
 8003104:	07d9      	lsls	r1, r3, #31
 8003106:	f100 80a5 	bmi.w	8003254 <HAL_RCC_OscConfig+0x1d0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800310a:	0799      	lsls	r1, r3, #30
 800310c:	d523      	bpl.n	8003156 <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800310e:	2d04      	cmp	r5, #4
 8003110:	f000 8142 	beq.w	8003398 <HAL_RCC_OscConfig+0x314>
 8003114:	2d0c      	cmp	r5, #12
 8003116:	f000 813c 	beq.w	8003392 <HAL_RCC_OscConfig+0x30e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800311a:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 800311c:	4e83      	ldr	r6, [pc, #524]	@ (800332c <HAL_RCC_OscConfig+0x2a8>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 8175 	beq.w	800340e <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_HSI_ENABLE();
 8003124:	6833      	ldr	r3, [r6, #0]
 8003126:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800312a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800312c:	f7fe fa1e 	bl	800156c <HAL_GetTick>
 8003130:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003132:	e005      	b.n	8003140 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003134:	f7fe fa1a 	bl	800156c <HAL_GetTick>
 8003138:	1bc0      	subs	r0, r0, r7
 800313a:	2802      	cmp	r0, #2
 800313c:	f200 814c 	bhi.w	80033d8 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003140:	6833      	ldr	r3, [r6, #0]
 8003142:	055b      	lsls	r3, r3, #21
 8003144:	d5f6      	bpl.n	8003134 <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003146:	6873      	ldr	r3, [r6, #4]
 8003148:	6922      	ldr	r2, [r4, #16]
 800314a:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 800314e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003152:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003154:	6823      	ldr	r3, [r4, #0]
 8003156:	0719      	lsls	r1, r3, #28
 8003158:	d519      	bpl.n	800318e <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800315a:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800315c:	4e73      	ldr	r6, [pc, #460]	@ (800332c <HAL_RCC_OscConfig+0x2a8>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 8103 	beq.w	800336a <HAL_RCC_OscConfig+0x2e6>
      __HAL_RCC_LSI_ENABLE();
 8003164:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8003170:	f7fe f9fc 	bl	800156c <HAL_GetTick>
 8003174:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003176:	e005      	b.n	8003184 <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003178:	f7fe f9f8 	bl	800156c <HAL_GetTick>
 800317c:	1bc0      	subs	r0, r0, r7
 800317e:	2802      	cmp	r0, #2
 8003180:	f200 812a 	bhi.w	80033d8 <HAL_RCC_OscConfig+0x354>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003184:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8003188:	079a      	lsls	r2, r3, #30
 800318a:	d5f5      	bpl.n	8003178 <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800318c:	6823      	ldr	r3, [r4, #0]
 800318e:	0758      	lsls	r0, r3, #29
 8003190:	d53e      	bpl.n	8003210 <HAL_RCC_OscConfig+0x18c>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003192:	4b66      	ldr	r3, [pc, #408]	@ (800332c <HAL_RCC_OscConfig+0x2a8>)
 8003194:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003196:	00d1      	lsls	r1, r2, #3
 8003198:	f100 8137 	bmi.w	800340a <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_ENABLE();
 800319c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800319e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80031a2:	659a      	str	r2, [r3, #88]	@ 0x58
 80031a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031aa:	9301      	str	r3, [sp, #4]
 80031ac:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80031ae:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b0:	4f5f      	ldr	r7, [pc, #380]	@ (8003330 <HAL_RCC_OscConfig+0x2ac>)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	05da      	lsls	r2, r3, #23
 80031b6:	f140 8172 	bpl.w	800349e <HAL_RCC_OscConfig+0x41a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ba:	68a3      	ldr	r3, [r4, #8]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	f000 8138 	beq.w	8003432 <HAL_RCC_OscConfig+0x3ae>
 80031c2:	2b05      	cmp	r3, #5
 80031c4:	f000 81ec 	beq.w	80035a0 <HAL_RCC_OscConfig+0x51c>
 80031c8:	4f58      	ldr	r7, [pc, #352]	@ (800332c <HAL_RCC_OscConfig+0x2a8>)
 80031ca:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80031d6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80031da:	f022 0204 	bic.w	r2, r2, #4
 80031de:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f040 812c 	bne.w	8003440 <HAL_RCC_OscConfig+0x3bc>
      tickstart = HAL_GetTick();
 80031e8:	f7fe f9c0 	bl	800156c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ec:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80031f0:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031f2:	e006      	b.n	8003202 <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f4:	f7fe f9ba 	bl	800156c <HAL_GetTick>
 80031f8:	eba0 0008 	sub.w	r0, r0, r8
 80031fc:	4548      	cmp	r0, r9
 80031fe:	f200 80eb 	bhi.w	80033d8 <HAL_RCC_OscConfig+0x354>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003202:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003206:	0799      	lsls	r1, r3, #30
 8003208:	d4f4      	bmi.n	80031f4 <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 800320a:	2e00      	cmp	r6, #0
 800320c:	f040 8159 	bne.w	80034c2 <HAL_RCC_OscConfig+0x43e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003210:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003212:	b1db      	cbz	r3, 800324c <HAL_RCC_OscConfig+0x1c8>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003214:	2b02      	cmp	r3, #2
 8003216:	f000 816d 	beq.w	80034f4 <HAL_RCC_OscConfig+0x470>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800321a:	2d0c      	cmp	r5, #12
 800321c:	f000 8095 	beq.w	800334a <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8003220:	4c42      	ldr	r4, [pc, #264]	@ (800332c <HAL_RCC_OscConfig+0x2a8>)
 8003222:	6823      	ldr	r3, [r4, #0]
 8003224:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003228:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800322a:	f7fe f99f 	bl	800156c <HAL_GetTick>
 800322e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003230:	e005      	b.n	800323e <HAL_RCC_OscConfig+0x1ba>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003232:	f7fe f99b 	bl	800156c <HAL_GetTick>
 8003236:	1b40      	subs	r0, r0, r5
 8003238:	2802      	cmp	r0, #2
 800323a:	f200 80cd 	bhi.w	80033d8 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800323e:	6823      	ldr	r3, [r4, #0]
 8003240:	019b      	lsls	r3, r3, #6
 8003242:	d4f6      	bmi.n	8003232 <HAL_RCC_OscConfig+0x1ae>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003244:	68e2      	ldr	r2, [r4, #12]
 8003246:	4b3b      	ldr	r3, [pc, #236]	@ (8003334 <HAL_RCC_OscConfig+0x2b0>)
 8003248:	4013      	ands	r3, r2
 800324a:	60e3      	str	r3, [r4, #12]
  return HAL_OK;
 800324c:	2000      	movs	r0, #0
}
 800324e:	b003      	add	sp, #12
 8003250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003254:	2d08      	cmp	r5, #8
 8003256:	d07e      	beq.n	8003356 <HAL_RCC_OscConfig+0x2d2>
 8003258:	2d0c      	cmp	r5, #12
 800325a:	d07a      	beq.n	8003352 <HAL_RCC_OscConfig+0x2ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800325c:	6863      	ldr	r3, [r4, #4]
 800325e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003262:	f000 80bd 	beq.w	80033e0 <HAL_RCC_OscConfig+0x35c>
 8003266:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800326a:	f000 8136 	beq.w	80034da <HAL_RCC_OscConfig+0x456>
 800326e:	4f2f      	ldr	r7, [pc, #188]	@ (800332c <HAL_RCC_OscConfig+0x2a8>)
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003276:	603a      	str	r2, [r7, #0]
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800327e:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003280:	2b00      	cmp	r3, #0
 8003282:	f040 80b2 	bne.w	80033ea <HAL_RCC_OscConfig+0x366>
        tickstart = HAL_GetTick();
 8003286:	f7fe f971 	bl	800156c <HAL_GetTick>
 800328a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800328c:	e006      	b.n	800329c <HAL_RCC_OscConfig+0x218>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800328e:	f7fe f96d 	bl	800156c <HAL_GetTick>
 8003292:	eba0 0008 	sub.w	r0, r0, r8
 8003296:	2864      	cmp	r0, #100	@ 0x64
 8003298:	f200 809e 	bhi.w	80033d8 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	0398      	lsls	r0, r3, #14
 80032a0:	d4f5      	bmi.n	800328e <HAL_RCC_OscConfig+0x20a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032a2:	6823      	ldr	r3, [r4, #0]
 80032a4:	e731      	b.n	800310a <HAL_RCC_OscConfig+0x86>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80032a6:	2e01      	cmp	r6, #1
 80032a8:	f47f af03 	bne.w	80030b2 <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032ac:	4b1f      	ldr	r3, [pc, #124]	@ (800332c <HAL_RCC_OscConfig+0x2a8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	0799      	lsls	r1, r3, #30
 80032b2:	d447      	bmi.n	8003344 <HAL_RCC_OscConfig+0x2c0>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032b4:	4b1d      	ldr	r3, [pc, #116]	@ (800332c <HAL_RCC_OscConfig+0x2a8>)
 80032b6:	6a20      	ldr	r0, [r4, #32]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	0712      	lsls	r2, r2, #28
 80032bc:	bf56      	itet	pl
 80032be:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	@ 0x94
 80032c2:	681b      	ldrmi	r3, [r3, #0]
 80032c4:	091b      	lsrpl	r3, r3, #4
 80032c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032ca:	4298      	cmp	r0, r3
 80032cc:	f200 80cf 	bhi.w	800346e <HAL_RCC_OscConfig+0x3ea>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032d0:	4b16      	ldr	r3, [pc, #88]	@ (800332c <HAL_RCC_OscConfig+0x2a8>)
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	f042 0208 	orr.w	r2, r2, #8
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80032e0:	4302      	orrs	r2, r0
 80032e2:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	69e1      	ldr	r1, [r4, #28]
 80032e8:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80032ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80032f0:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032f2:	2d00      	cmp	r5, #0
 80032f4:	f000 80eb 	beq.w	80034ce <HAL_RCC_OscConfig+0x44a>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032f8:	f7ff fe6a 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 80032fc:	4b0b      	ldr	r3, [pc, #44]	@ (800332c <HAL_RCC_OscConfig+0x2a8>)
 80032fe:	4a0e      	ldr	r2, [pc, #56]	@ (8003338 <HAL_RCC_OscConfig+0x2b4>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003306:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 8003308:	4a0c      	ldr	r2, [pc, #48]	@ (800333c <HAL_RCC_OscConfig+0x2b8>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800330a:	f003 031f 	and.w	r3, r3, #31
 800330e:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 8003312:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003314:	4a0a      	ldr	r2, [pc, #40]	@ (8003340 <HAL_RCC_OscConfig+0x2bc>)
 8003316:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8003318:	f7fe f8de 	bl	80014d8 <HAL_InitTick>
        if(status != HAL_OK)
 800331c:	2800      	cmp	r0, #0
 800331e:	d196      	bne.n	800324e <HAL_RCC_OscConfig+0x1ca>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003320:	6823      	ldr	r3, [r4, #0]
 8003322:	07d9      	lsls	r1, r3, #31
 8003324:	f57f aef1 	bpl.w	800310a <HAL_RCC_OscConfig+0x86>
 8003328:	e794      	b.n	8003254 <HAL_RCC_OscConfig+0x1d0>
 800332a:	bf00      	nop
 800332c:	40021000 	.word	0x40021000
 8003330:	40007000 	.word	0x40007000
 8003334:	feeefffc 	.word	0xfeeefffc
 8003338:	080066ec 	.word	0x080066ec
 800333c:	20000020 	.word	0x20000020
 8003340:	20000018 	.word	0x20000018
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003344:	69a3      	ldr	r3, [r4, #24]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1b4      	bne.n	80032b4 <HAL_RCC_OscConfig+0x230>
    return HAL_ERROR;
 800334a:	2001      	movs	r0, #1
}
 800334c:	b003      	add	sp, #12
 800334e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003352:	2e03      	cmp	r6, #3
 8003354:	d182      	bne.n	800325c <HAL_RCC_OscConfig+0x1d8>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003356:	4a99      	ldr	r2, [pc, #612]	@ (80035bc <HAL_RCC_OscConfig+0x538>)
 8003358:	6812      	ldr	r2, [r2, #0]
 800335a:	0392      	lsls	r2, r2, #14
 800335c:	f57f aed5 	bpl.w	800310a <HAL_RCC_OscConfig+0x86>
 8003360:	6862      	ldr	r2, [r4, #4]
 8003362:	2a00      	cmp	r2, #0
 8003364:	f47f aed1 	bne.w	800310a <HAL_RCC_OscConfig+0x86>
 8003368:	e7ef      	b.n	800334a <HAL_RCC_OscConfig+0x2c6>
      __HAL_RCC_LSI_DISABLE();
 800336a:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 800336e:	f023 0301 	bic.w	r3, r3, #1
 8003372:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8003376:	f7fe f8f9 	bl	800156c <HAL_GetTick>
 800337a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800337c:	e004      	b.n	8003388 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800337e:	f7fe f8f5 	bl	800156c <HAL_GetTick>
 8003382:	1bc0      	subs	r0, r0, r7
 8003384:	2802      	cmp	r0, #2
 8003386:	d827      	bhi.n	80033d8 <HAL_RCC_OscConfig+0x354>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003388:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 800338c:	079b      	lsls	r3, r3, #30
 800338e:	d4f6      	bmi.n	800337e <HAL_RCC_OscConfig+0x2fa>
 8003390:	e6fc      	b.n	800318c <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003392:	2e02      	cmp	r6, #2
 8003394:	f47f aec1 	bne.w	800311a <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003398:	4a88      	ldr	r2, [pc, #544]	@ (80035bc <HAL_RCC_OscConfig+0x538>)
 800339a:	6812      	ldr	r2, [r2, #0]
 800339c:	0552      	lsls	r2, r2, #21
 800339e:	d502      	bpl.n	80033a6 <HAL_RCC_OscConfig+0x322>
 80033a0:	68e2      	ldr	r2, [r4, #12]
 80033a2:	2a00      	cmp	r2, #0
 80033a4:	d0d1      	beq.n	800334a <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a6:	4985      	ldr	r1, [pc, #532]	@ (80035bc <HAL_RCC_OscConfig+0x538>)
 80033a8:	6920      	ldr	r0, [r4, #16]
 80033aa:	684a      	ldr	r2, [r1, #4]
 80033ac:	f022 52f8 	bic.w	r2, r2, #520093696	@ 0x1f000000
 80033b0:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80033b4:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033b6:	e6ce      	b.n	8003156 <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	f023 0301 	bic.w	r3, r3, #1
 80033be:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80033c0:	f7fe f8d4 	bl	800156c <HAL_GetTick>
 80033c4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	0798      	lsls	r0, r3, #30
 80033ca:	d5a9      	bpl.n	8003320 <HAL_RCC_OscConfig+0x29c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033cc:	f7fe f8ce 	bl	800156c <HAL_GetTick>
 80033d0:	eba0 0008 	sub.w	r0, r0, r8
 80033d4:	2802      	cmp	r0, #2
 80033d6:	d9f6      	bls.n	80033c6 <HAL_RCC_OscConfig+0x342>
            return HAL_TIMEOUT;
 80033d8:	2003      	movs	r0, #3
}
 80033da:	b003      	add	sp, #12
 80033dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033e0:	4a76      	ldr	r2, [pc, #472]	@ (80035bc <HAL_RCC_OscConfig+0x538>)
 80033e2:	6813      	ldr	r3, [r2, #0]
 80033e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80033ea:	f7fe f8bf 	bl	800156c <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033ee:	f8df 81cc 	ldr.w	r8, [pc, #460]	@ 80035bc <HAL_RCC_OscConfig+0x538>
        tickstart = HAL_GetTick();
 80033f2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033f4:	e004      	b.n	8003400 <HAL_RCC_OscConfig+0x37c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033f6:	f7fe f8b9 	bl	800156c <HAL_GetTick>
 80033fa:	1bc0      	subs	r0, r0, r7
 80033fc:	2864      	cmp	r0, #100	@ 0x64
 80033fe:	d8eb      	bhi.n	80033d8 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003400:	f8d8 3000 	ldr.w	r3, [r8]
 8003404:	039b      	lsls	r3, r3, #14
 8003406:	d5f6      	bpl.n	80033f6 <HAL_RCC_OscConfig+0x372>
 8003408:	e74b      	b.n	80032a2 <HAL_RCC_OscConfig+0x21e>
    FlagStatus       pwrclkchanged = RESET;
 800340a:	2600      	movs	r6, #0
 800340c:	e6d0      	b.n	80031b0 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 800340e:	6833      	ldr	r3, [r6, #0]
 8003410:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003414:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003416:	f7fe f8a9 	bl	800156c <HAL_GetTick>
 800341a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800341c:	e004      	b.n	8003428 <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800341e:	f7fe f8a5 	bl	800156c <HAL_GetTick>
 8003422:	1bc0      	subs	r0, r0, r7
 8003424:	2802      	cmp	r0, #2
 8003426:	d8d7      	bhi.n	80033d8 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003428:	6833      	ldr	r3, [r6, #0]
 800342a:	0558      	lsls	r0, r3, #21
 800342c:	d4f7      	bmi.n	800341e <HAL_RCC_OscConfig+0x39a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800342e:	6823      	ldr	r3, [r4, #0]
 8003430:	e691      	b.n	8003156 <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003432:	4a62      	ldr	r2, [pc, #392]	@ (80035bc <HAL_RCC_OscConfig+0x538>)
 8003434:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8003440:	f7fe f894 	bl	800156c <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003444:	f8df 8174 	ldr.w	r8, [pc, #372]	@ 80035bc <HAL_RCC_OscConfig+0x538>
      tickstart = HAL_GetTick();
 8003448:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800344a:	f241 3988 	movw	r9, #5000	@ 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800344e:	e004      	b.n	800345a <HAL_RCC_OscConfig+0x3d6>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003450:	f7fe f88c 	bl	800156c <HAL_GetTick>
 8003454:	1bc0      	subs	r0, r0, r7
 8003456:	4548      	cmp	r0, r9
 8003458:	d8be      	bhi.n	80033d8 <HAL_RCC_OscConfig+0x354>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800345a:	f8d8 3090 	ldr.w	r3, [r8, #144]	@ 0x90
 800345e:	0798      	lsls	r0, r3, #30
 8003460:	d5f6      	bpl.n	8003450 <HAL_RCC_OscConfig+0x3cc>
    if(pwrclkchanged == SET)
 8003462:	2e00      	cmp	r6, #0
 8003464:	f43f aed4 	beq.w	8003210 <HAL_RCC_OscConfig+0x18c>
 8003468:	e02b      	b.n	80034c2 <HAL_RCC_OscConfig+0x43e>
    return HAL_ERROR;
 800346a:	2001      	movs	r0, #1
}
 800346c:	4770      	bx	lr
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800346e:	f7ff fd69 	bl	8002f44 <RCC_SetFlashLatencyFromMSIRange>
 8003472:	2800      	cmp	r0, #0
 8003474:	f47f af69 	bne.w	800334a <HAL_RCC_OscConfig+0x2c6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003478:	4b50      	ldr	r3, [pc, #320]	@ (80035bc <HAL_RCC_OscConfig+0x538>)
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	f042 0208 	orr.w	r2, r2, #8
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	6a21      	ldr	r1, [r4, #32]
 8003486:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800348a:	430a      	orrs	r2, r1
 800348c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	69e1      	ldr	r1, [r4, #28]
 8003492:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003496:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800349a:	605a      	str	r2, [r3, #4]
 800349c:	e72c      	b.n	80032f8 <HAL_RCC_OscConfig+0x274>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034a4:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80034a6:	f7fe f861 	bl	800156c <HAL_GetTick>
 80034aa:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	05db      	lsls	r3, r3, #23
 80034b0:	f53f ae83 	bmi.w	80031ba <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b4:	f7fe f85a 	bl	800156c <HAL_GetTick>
 80034b8:	eba0 0008 	sub.w	r0, r0, r8
 80034bc:	2802      	cmp	r0, #2
 80034be:	d9f5      	bls.n	80034ac <HAL_RCC_OscConfig+0x428>
 80034c0:	e78a      	b.n	80033d8 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c2:	4a3e      	ldr	r2, [pc, #248]	@ (80035bc <HAL_RCC_OscConfig+0x538>)
 80034c4:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80034c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80034cc:	e6a0      	b.n	8003210 <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034ce:	f7ff fd39 	bl	8002f44 <RCC_SetFlashLatencyFromMSIRange>
 80034d2:	2800      	cmp	r0, #0
 80034d4:	f43f af10 	beq.w	80032f8 <HAL_RCC_OscConfig+0x274>
 80034d8:	e737      	b.n	800334a <HAL_RCC_OscConfig+0x2c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034de:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80034f0:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034f2:	e77a      	b.n	80033ea <HAL_RCC_OscConfig+0x366>
      pll_config = RCC->PLLCFGR;
 80034f4:	4e31      	ldr	r6, [pc, #196]	@ (80035bc <HAL_RCC_OscConfig+0x538>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
      pll_config = RCC->PLLCFGR;
 80034f8:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fa:	f003 0103 	and.w	r1, r3, #3
 80034fe:	4291      	cmp	r1, r2
 8003500:	d060      	beq.n	80035c4 <HAL_RCC_OscConfig+0x540>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003502:	2d0c      	cmp	r5, #12
 8003504:	f43f af21 	beq.w	800334a <HAL_RCC_OscConfig+0x2c6>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003508:	4d2c      	ldr	r5, [pc, #176]	@ (80035bc <HAL_RCC_OscConfig+0x538>)
 800350a:	682b      	ldr	r3, [r5, #0]
 800350c:	015a      	lsls	r2, r3, #5
 800350e:	f53f af1c 	bmi.w	800334a <HAL_RCC_OscConfig+0x2c6>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003512:	682b      	ldr	r3, [r5, #0]
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	f53f af18 	bmi.w	800334a <HAL_RCC_OscConfig+0x2c6>
            __HAL_RCC_PLL_DISABLE();
 800351a:	682b      	ldr	r3, [r5, #0]
 800351c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003520:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8003522:	f7fe f823 	bl	800156c <HAL_GetTick>
 8003526:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003528:	e005      	b.n	8003536 <HAL_RCC_OscConfig+0x4b2>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352a:	f7fe f81f 	bl	800156c <HAL_GetTick>
 800352e:	1b80      	subs	r0, r0, r6
 8003530:	2802      	cmp	r0, #2
 8003532:	f63f af51 	bhi.w	80033d8 <HAL_RCC_OscConfig+0x354>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003536:	682b      	ldr	r3, [r5, #0]
 8003538:	019f      	lsls	r7, r3, #6
 800353a:	d4f6      	bmi.n	800352a <HAL_RCC_OscConfig+0x4a6>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800353c:	68e9      	ldr	r1, [r5, #12]
 800353e:	4b20      	ldr	r3, [pc, #128]	@ (80035c0 <HAL_RCC_OscConfig+0x53c>)
 8003540:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003542:	4e1e      	ldr	r6, [pc, #120]	@ (80035bc <HAL_RCC_OscConfig+0x538>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003544:	400b      	ands	r3, r1
 8003546:	4313      	orrs	r3, r2
 8003548:	e9d4 210c 	ldrd	r2, r1, [r4, #48]	@ 0x30
 800354c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003550:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	@ 0x38
 8003554:	3a01      	subs	r2, #1
 8003556:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800355a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800355c:	0900      	lsrs	r0, r0, #4
 800355e:	0849      	lsrs	r1, r1, #1
 8003560:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 8003564:	3901      	subs	r1, #1
 8003566:	0852      	lsrs	r2, r2, #1
 8003568:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800356c:	3a01      	subs	r2, #1
 800356e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003572:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 8003574:	682b      	ldr	r3, [r5, #0]
 8003576:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800357a:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800357c:	68eb      	ldr	r3, [r5, #12]
 800357e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003582:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 8003584:	f7fd fff2 	bl	800156c <HAL_GetTick>
 8003588:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800358a:	e005      	b.n	8003598 <HAL_RCC_OscConfig+0x514>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800358c:	f7fd ffee 	bl	800156c <HAL_GetTick>
 8003590:	1b00      	subs	r0, r0, r4
 8003592:	2802      	cmp	r0, #2
 8003594:	f63f af20 	bhi.w	80033d8 <HAL_RCC_OscConfig+0x354>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003598:	6833      	ldr	r3, [r6, #0]
 800359a:	0198      	lsls	r0, r3, #6
 800359c:	d5f6      	bpl.n	800358c <HAL_RCC_OscConfig+0x508>
 800359e:	e655      	b.n	800324c <HAL_RCC_OscConfig+0x1c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a0:	4b06      	ldr	r3, [pc, #24]	@ (80035bc <HAL_RCC_OscConfig+0x538>)
 80035a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80035a6:	f042 0204 	orr.w	r2, r2, #4
 80035aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80035ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80035b2:	f042 0201 	orr.w	r2, r2, #1
 80035b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035ba:	e741      	b.n	8003440 <HAL_RCC_OscConfig+0x3bc>
 80035bc:	40021000 	.word	0x40021000
 80035c0:	f99d808c 	.word	0xf99d808c
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80035c6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80035ca:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035cc:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80035d0:	d197      	bne.n	8003502 <HAL_RCC_OscConfig+0x47e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80035d4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035d8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80035dc:	d191      	bne.n	8003502 <HAL_RCC_OscConfig+0x47e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80035de:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80035e0:	3a07      	subs	r2, #7
 80035e2:	f403 3100 	and.w	r1, r3, #131072	@ 0x20000
 80035e6:	bf18      	it	ne
 80035e8:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035ea:	4291      	cmp	r1, r2
 80035ec:	d189      	bne.n	8003502 <HAL_RCC_OscConfig+0x47e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035ee:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80035f0:	0852      	lsrs	r2, r2, #1
 80035f2:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 80035f6:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80035f8:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80035fc:	d181      	bne.n	8003502 <HAL_RCC_OscConfig+0x47e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035fe:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003600:	0852      	lsrs	r2, r2, #1
 8003602:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8003606:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003608:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800360c:	f47f af79 	bne.w	8003502 <HAL_RCC_OscConfig+0x47e>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003610:	6833      	ldr	r3, [r6, #0]
 8003612:	0199      	lsls	r1, r3, #6
 8003614:	f53f ae1a 	bmi.w	800324c <HAL_RCC_OscConfig+0x1c8>
          __HAL_RCC_PLL_ENABLE();
 8003618:	6833      	ldr	r3, [r6, #0]
 800361a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800361e:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003620:	68f3      	ldr	r3, [r6, #12]
 8003622:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003626:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 8003628:	f7fd ffa0 	bl	800156c <HAL_GetTick>
 800362c:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800362e:	e005      	b.n	800363c <HAL_RCC_OscConfig+0x5b8>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003630:	f7fd ff9c 	bl	800156c <HAL_GetTick>
 8003634:	1b03      	subs	r3, r0, r4
 8003636:	2b02      	cmp	r3, #2
 8003638:	f63f aece 	bhi.w	80033d8 <HAL_RCC_OscConfig+0x354>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800363c:	6833      	ldr	r3, [r6, #0]
 800363e:	019a      	lsls	r2, r3, #6
 8003640:	d5f6      	bpl.n	8003630 <HAL_RCC_OscConfig+0x5ac>
 8003642:	e603      	b.n	800324c <HAL_RCC_OscConfig+0x1c8>

08003644 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003644:	2800      	cmp	r0, #0
 8003646:	f000 80a0 	beq.w	800378a <HAL_RCC_ClockConfig+0x146>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800364a:	4a54      	ldr	r2, [pc, #336]	@ (800379c <HAL_RCC_ClockConfig+0x158>)
 800364c:	6813      	ldr	r3, [r2, #0]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	428b      	cmp	r3, r1
{
 8003654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003658:	460d      	mov	r5, r1
 800365a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800365c:	d20c      	bcs.n	8003678 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365e:	6813      	ldr	r3, [r2, #0]
 8003660:	f023 0307 	bic.w	r3, r3, #7
 8003664:	430b      	orrs	r3, r1
 8003666:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003668:	6813      	ldr	r3, [r2, #0]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	428b      	cmp	r3, r1
 8003670:	d002      	beq.n	8003678 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8003672:	2001      	movs	r0, #1
}
 8003674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	0799      	lsls	r1, r3, #30
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800367c:	f003 0201 	and.w	r2, r3, #1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003680:	d570      	bpl.n	8003764 <HAL_RCC_ClockConfig+0x120>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003682:	4e47      	ldr	r6, [pc, #284]	@ (80037a0 <HAL_RCC_ClockConfig+0x15c>)
 8003684:	68a0      	ldr	r0, [r4, #8]
 8003686:	68b1      	ldr	r1, [r6, #8]
 8003688:	f001 01f0 	and.w	r1, r1, #240	@ 0xf0
 800368c:	4288      	cmp	r0, r1
 800368e:	d904      	bls.n	800369a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003690:	68b1      	ldr	r1, [r6, #8]
 8003692:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
 8003696:	4301      	orrs	r1, r0
 8003698:	60b1      	str	r1, [r6, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800369a:	b332      	cbz	r2, 80036ea <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800369c:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800369e:	4b40      	ldr	r3, [pc, #256]	@ (80037a0 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036a0:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036a2:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036a4:	d065      	beq.n	8003772 <HAL_RCC_ClockConfig+0x12e>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036a6:	2a02      	cmp	r2, #2
 80036a8:	d06c      	beq.n	8003784 <HAL_RCC_ClockConfig+0x140>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036aa:	2a00      	cmp	r2, #0
 80036ac:	d171      	bne.n	8003792 <HAL_RCC_ClockConfig+0x14e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036ae:	079e      	lsls	r6, r3, #30
 80036b0:	d5df      	bpl.n	8003672 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036b2:	4e3b      	ldr	r6, [pc, #236]	@ (80037a0 <HAL_RCC_ClockConfig+0x15c>)
 80036b4:	68b3      	ldr	r3, [r6, #8]
 80036b6:	f023 0303 	bic.w	r3, r3, #3
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80036be:	f7fd ff55 	bl	800156c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c2:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80036c6:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c8:	e004      	b.n	80036d4 <HAL_RCC_ClockConfig+0x90>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ca:	f7fd ff4f 	bl	800156c <HAL_GetTick>
 80036ce:	1bc0      	subs	r0, r0, r7
 80036d0:	4540      	cmp	r0, r8
 80036d2:	d85c      	bhi.n	800378e <HAL_RCC_ClockConfig+0x14a>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d4:	68b3      	ldr	r3, [r6, #8]
 80036d6:	6862      	ldr	r2, [r4, #4]
 80036d8:	f003 030c 	and.w	r3, r3, #12
 80036dc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80036e0:	d1f3      	bne.n	80036ca <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	0799      	lsls	r1, r3, #30
 80036e6:	d506      	bpl.n	80036f6 <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036e8:	68a0      	ldr	r0, [r4, #8]
 80036ea:	492d      	ldr	r1, [pc, #180]	@ (80037a0 <HAL_RCC_ClockConfig+0x15c>)
 80036ec:	688a      	ldr	r2, [r1, #8]
 80036ee:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80036f2:	4282      	cmp	r2, r0
 80036f4:	d840      	bhi.n	8003778 <HAL_RCC_ClockConfig+0x134>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036f6:	4929      	ldr	r1, [pc, #164]	@ (800379c <HAL_RCC_ClockConfig+0x158>)
 80036f8:	680a      	ldr	r2, [r1, #0]
 80036fa:	f002 0207 	and.w	r2, r2, #7
 80036fe:	42aa      	cmp	r2, r5
 8003700:	d909      	bls.n	8003716 <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003702:	680a      	ldr	r2, [r1, #0]
 8003704:	f022 0207 	bic.w	r2, r2, #7
 8003708:	432a      	orrs	r2, r5
 800370a:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800370c:	680a      	ldr	r2, [r1, #0]
 800370e:	f002 0207 	and.w	r2, r2, #7
 8003712:	42aa      	cmp	r2, r5
 8003714:	d1ad      	bne.n	8003672 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003716:	075a      	lsls	r2, r3, #29
 8003718:	d506      	bpl.n	8003728 <HAL_RCC_ClockConfig+0xe4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800371a:	4921      	ldr	r1, [pc, #132]	@ (80037a0 <HAL_RCC_ClockConfig+0x15c>)
 800371c:	68e0      	ldr	r0, [r4, #12]
 800371e:	688a      	ldr	r2, [r1, #8]
 8003720:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003724:	4302      	orrs	r2, r0
 8003726:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003728:	071b      	lsls	r3, r3, #28
 800372a:	d507      	bpl.n	800373c <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800372c:	4a1c      	ldr	r2, [pc, #112]	@ (80037a0 <HAL_RCC_ClockConfig+0x15c>)
 800372e:	6921      	ldr	r1, [r4, #16]
 8003730:	6893      	ldr	r3, [r2, #8]
 8003732:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8003736:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800373a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800373c:	f7ff fc48 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 8003740:	4a17      	ldr	r2, [pc, #92]	@ (80037a0 <HAL_RCC_ClockConfig+0x15c>)
 8003742:	4c18      	ldr	r4, [pc, #96]	@ (80037a4 <HAL_RCC_ClockConfig+0x160>)
 8003744:	6892      	ldr	r2, [r2, #8]
 8003746:	4918      	ldr	r1, [pc, #96]	@ (80037a8 <HAL_RCC_ClockConfig+0x164>)
 8003748:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800374c:	4603      	mov	r3, r0
 800374e:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 8003750:	4816      	ldr	r0, [pc, #88]	@ (80037ac <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003752:	f002 021f 	and.w	r2, r2, #31
 8003756:	40d3      	lsrs	r3, r2
}
 8003758:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 800375c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800375e:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8003760:	f7fd beba 	b.w	80014d8 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003764:	2a00      	cmp	r2, #0
 8003766:	d0c6      	beq.n	80036f6 <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003768:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800376a:	4b0d      	ldr	r3, [pc, #52]	@ (80037a0 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800376c:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800376e:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003770:	d199      	bne.n	80036a6 <HAL_RCC_ClockConfig+0x62>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003772:	019b      	lsls	r3, r3, #6
 8003774:	d49d      	bmi.n	80036b2 <HAL_RCC_ClockConfig+0x6e>
 8003776:	e77c      	b.n	8003672 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003778:	688a      	ldr	r2, [r1, #8]
 800377a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800377e:	4302      	orrs	r2, r0
 8003780:	608a      	str	r2, [r1, #8]
 8003782:	e7b8      	b.n	80036f6 <HAL_RCC_ClockConfig+0xb2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003784:	039f      	lsls	r7, r3, #14
 8003786:	d494      	bmi.n	80036b2 <HAL_RCC_ClockConfig+0x6e>
 8003788:	e773      	b.n	8003672 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800378a:	2001      	movs	r0, #1
}
 800378c:	4770      	bx	lr
        return HAL_TIMEOUT;
 800378e:	2003      	movs	r0, #3
 8003790:	e770      	b.n	8003674 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003792:	0558      	lsls	r0, r3, #21
 8003794:	f57f af6d 	bpl.w	8003672 <HAL_RCC_ClockConfig+0x2e>
 8003798:	e78b      	b.n	80036b2 <HAL_RCC_ClockConfig+0x6e>
 800379a:	bf00      	nop
 800379c:	40022000 	.word	0x40022000
 80037a0:	40021000 	.word	0x40021000
 80037a4:	080066ec 	.word	0x080066ec
 80037a8:	20000018 	.word	0x20000018
 80037ac:	20000020 	.word	0x20000020

080037b0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037b0:	4b05      	ldr	r3, [pc, #20]	@ (80037c8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80037b2:	4a06      	ldr	r2, [pc, #24]	@ (80037cc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80037b4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80037b6:	4906      	ldr	r1, [pc, #24]	@ (80037d0 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037b8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80037bc:	6808      	ldr	r0, [r1, #0]
 80037be:	5cd3      	ldrb	r3, [r2, r3]
 80037c0:	f003 031f 	and.w	r3, r3, #31
}
 80037c4:	40d8      	lsrs	r0, r3
 80037c6:	4770      	bx	lr
 80037c8:	40021000 	.word	0x40021000
 80037cc:	080066e4 	.word	0x080066e4
 80037d0:	20000018 	.word	0x20000018

080037d4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037d4:	4b05      	ldr	r3, [pc, #20]	@ (80037ec <HAL_RCC_GetPCLK2Freq+0x18>)
 80037d6:	4a06      	ldr	r2, [pc, #24]	@ (80037f0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80037d8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80037da:	4906      	ldr	r1, [pc, #24]	@ (80037f4 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037dc:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80037e0:	6808      	ldr	r0, [r1, #0]
 80037e2:	5cd3      	ldrb	r3, [r2, r3]
 80037e4:	f003 031f 	and.w	r3, r3, #31
}
 80037e8:	40d8      	lsrs	r0, r3
 80037ea:	4770      	bx	lr
 80037ec:	40021000 	.word	0x40021000
 80037f0:	080066e4 	.word	0x080066e4
 80037f4:	20000018 	.word	0x20000018

080037f8 <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037f8:	4a45      	ldr	r2, [pc, #276]	@ (8003910 <RCCEx_PLLSAI1_Config+0x118>)
{
 80037fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037fc:	68d6      	ldr	r6, [r2, #12]
{
 80037fe:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003800:	07b1      	lsls	r1, r6, #30
{
 8003802:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003804:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003806:	d006      	beq.n	8003816 <RCCEx_PLLSAI1_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003808:	68d1      	ldr	r1, [r2, #12]
 800380a:	f001 0103 	and.w	r1, r1, #3
 800380e:	4281      	cmp	r1, r0
 8003810:	d04c      	beq.n	80038ac <RCCEx_PLLSAI1_Config+0xb4>
 8003812:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8003814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8003816:	2802      	cmp	r0, #2
 8003818:	d059      	beq.n	80038ce <RCCEx_PLLSAI1_Config+0xd6>
 800381a:	2803      	cmp	r0, #3
 800381c:	d050      	beq.n	80038c0 <RCCEx_PLLSAI1_Config+0xc8>
 800381e:	2801      	cmp	r0, #1
 8003820:	d1f7      	bne.n	8003812 <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003822:	6812      	ldr	r2, [r2, #0]
 8003824:	0793      	lsls	r3, r2, #30
 8003826:	d5f5      	bpl.n	8003814 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003828:	4939      	ldr	r1, [pc, #228]	@ (8003910 <RCCEx_PLLSAI1_Config+0x118>)
 800382a:	68ca      	ldr	r2, [r1, #12]
 800382c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8003830:	ea42 0300 	orr.w	r3, r2, r0
 8003834:	6862      	ldr	r2, [r4, #4]
 8003836:	3a01      	subs	r2, #1
 8003838:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800383c:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 800383e:	4e34      	ldr	r6, [pc, #208]	@ (8003910 <RCCEx_PLLSAI1_Config+0x118>)
 8003840:	6833      	ldr	r3, [r6, #0]
 8003842:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003846:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003848:	f7fd fe90 	bl	800156c <HAL_GetTick>
 800384c:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800384e:	e004      	b.n	800385a <RCCEx_PLLSAI1_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003850:	f7fd fe8c 	bl	800156c <HAL_GetTick>
 8003854:	1bc3      	subs	r3, r0, r7
 8003856:	2b02      	cmp	r3, #2
 8003858:	d83d      	bhi.n	80038d6 <RCCEx_PLLSAI1_Config+0xde>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800385a:	6833      	ldr	r3, [r6, #0]
 800385c:	011a      	lsls	r2, r3, #4
 800385e:	d4f7      	bmi.n	8003850 <RCCEx_PLLSAI1_Config+0x58>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003860:	68a3      	ldr	r3, [r4, #8]
 8003862:	021a      	lsls	r2, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 8003864:	2d00      	cmp	r5, #0
 8003866:	d138      	bne.n	80038da <RCCEx_PLLSAI1_Config+0xe2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003868:	6933      	ldr	r3, [r6, #16]
 800386a:	68e1      	ldr	r1, [r4, #12]
 800386c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003870:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003874:	0909      	lsrs	r1, r1, #4
 8003876:	4313      	orrs	r3, r2
 8003878:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 800387c:	6133      	str	r3, [r6, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800387e:	4d24      	ldr	r5, [pc, #144]	@ (8003910 <RCCEx_PLLSAI1_Config+0x118>)
 8003880:	682b      	ldr	r3, [r5, #0]
 8003882:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003886:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003888:	f7fd fe70 	bl	800156c <HAL_GetTick>
 800388c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800388e:	e004      	b.n	800389a <RCCEx_PLLSAI1_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003890:	f7fd fe6c 	bl	800156c <HAL_GetTick>
 8003894:	1b80      	subs	r0, r0, r6
 8003896:	2802      	cmp	r0, #2
 8003898:	d81d      	bhi.n	80038d6 <RCCEx_PLLSAI1_Config+0xde>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800389a:	682b      	ldr	r3, [r5, #0]
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	d5f7      	bpl.n	8003890 <RCCEx_PLLSAI1_Config+0x98>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038a0:	692b      	ldr	r3, [r5, #16]
 80038a2:	69a2      	ldr	r2, [r4, #24]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	2000      	movs	r0, #0
 80038a8:	612b      	str	r3, [r5, #16]
}
 80038aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80038ac:	2900      	cmp	r1, #0
 80038ae:	d0b0      	beq.n	8003812 <RCCEx_PLLSAI1_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038b0:	68d3      	ldr	r3, [r2, #12]
       ||
 80038b2:	6862      	ldr	r2, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038b4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80038b8:	3301      	adds	r3, #1
       ||
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d1a9      	bne.n	8003812 <RCCEx_PLLSAI1_Config+0x1a>
 80038be:	e7be      	b.n	800383e <RCCEx_PLLSAI1_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038c0:	6811      	ldr	r1, [r2, #0]
 80038c2:	038e      	lsls	r6, r1, #14
 80038c4:	d4b0      	bmi.n	8003828 <RCCEx_PLLSAI1_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	0351      	lsls	r1, r2, #13
 80038ca:	d5a2      	bpl.n	8003812 <RCCEx_PLLSAI1_Config+0x1a>
 80038cc:	e7ac      	b.n	8003828 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038ce:	6812      	ldr	r2, [r2, #0]
 80038d0:	0557      	lsls	r7, r2, #21
 80038d2:	d59e      	bpl.n	8003812 <RCCEx_PLLSAI1_Config+0x1a>
 80038d4:	e7a8      	b.n	8003828 <RCCEx_PLLSAI1_Config+0x30>
 80038d6:	2003      	movs	r0, #3
}
 80038d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 80038da:	2d01      	cmp	r5, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038dc:	6933      	ldr	r3, [r6, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 80038de:	d00b      	beq.n	80038f8 <RCCEx_PLLSAI1_Config+0x100>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038e0:	6961      	ldr	r1, [r4, #20]
 80038e2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80038e6:	0849      	lsrs	r1, r1, #1
 80038e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80038ec:	3901      	subs	r1, #1
 80038ee:	4313      	orrs	r3, r2
 80038f0:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80038f4:	6133      	str	r3, [r6, #16]
 80038f6:	e7c2      	b.n	800387e <RCCEx_PLLSAI1_Config+0x86>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038f8:	6921      	ldr	r1, [r4, #16]
 80038fa:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80038fe:	0849      	lsrs	r1, r1, #1
 8003900:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003904:	3901      	subs	r1, #1
 8003906:	4313      	orrs	r3, r2
 8003908:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800390c:	6133      	str	r3, [r6, #16]
 800390e:	e7b6      	b.n	800387e <RCCEx_PLLSAI1_Config+0x86>
 8003910:	40021000 	.word	0x40021000

08003914 <RCCEx_PLLSAI2_Config>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003914:	4a3e      	ldr	r2, [pc, #248]	@ (8003a10 <RCCEx_PLLSAI2_Config+0xfc>)
{
 8003916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003918:	68d6      	ldr	r6, [r2, #12]
{
 800391a:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800391c:	07b1      	lsls	r1, r6, #30
{
 800391e:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003920:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003922:	d006      	beq.n	8003932 <RCCEx_PLLSAI2_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003924:	68d1      	ldr	r1, [r2, #12]
 8003926:	f001 0103 	and.w	r1, r1, #3
 800392a:	4281      	cmp	r1, r0
 800392c:	d04c      	beq.n	80039c8 <RCCEx_PLLSAI2_Config+0xb4>
 800392e:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8003930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai2->PLLSAI2Source)
 8003932:	2802      	cmp	r0, #2
 8003934:	d059      	beq.n	80039ea <RCCEx_PLLSAI2_Config+0xd6>
 8003936:	2803      	cmp	r0, #3
 8003938:	d050      	beq.n	80039dc <RCCEx_PLLSAI2_Config+0xc8>
 800393a:	2801      	cmp	r0, #1
 800393c:	d1f7      	bne.n	800392e <RCCEx_PLLSAI2_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800393e:	6812      	ldr	r2, [r2, #0]
 8003940:	0793      	lsls	r3, r2, #30
 8003942:	d5f5      	bpl.n	8003930 <RCCEx_PLLSAI2_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003944:	4932      	ldr	r1, [pc, #200]	@ (8003a10 <RCCEx_PLLSAI2_Config+0xfc>)
 8003946:	68ca      	ldr	r2, [r1, #12]
 8003948:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800394c:	ea42 0300 	orr.w	r3, r2, r0
 8003950:	6862      	ldr	r2, [r4, #4]
 8003952:	3a01      	subs	r2, #1
 8003954:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003958:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI2_DISABLE();
 800395a:	4e2d      	ldr	r6, [pc, #180]	@ (8003a10 <RCCEx_PLLSAI2_Config+0xfc>)
 800395c:	6833      	ldr	r3, [r6, #0]
 800395e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003962:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003964:	f7fd fe02 	bl	800156c <HAL_GetTick>
 8003968:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800396a:	e004      	b.n	8003976 <RCCEx_PLLSAI2_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800396c:	f7fd fdfe 	bl	800156c <HAL_GetTick>
 8003970:	1bc3      	subs	r3, r0, r7
 8003972:	2b02      	cmp	r3, #2
 8003974:	d83d      	bhi.n	80039f2 <RCCEx_PLLSAI2_Config+0xde>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003976:	6833      	ldr	r3, [r6, #0]
 8003978:	009a      	lsls	r2, r3, #2
 800397a:	d4f7      	bmi.n	800396c <RCCEx_PLLSAI2_Config+0x58>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800397c:	68a3      	ldr	r3, [r4, #8]
 800397e:	021a      	lsls	r2, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 8003980:	2d00      	cmp	r5, #0
 8003982:	d138      	bne.n	80039f6 <RCCEx_PLLSAI2_Config+0xe2>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003984:	6973      	ldr	r3, [r6, #20]
 8003986:	68e1      	ldr	r1, [r4, #12]
 8003988:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800398c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003990:	0909      	lsrs	r1, r1, #4
 8003992:	4313      	orrs	r3, r2
 8003994:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8003998:	6173      	str	r3, [r6, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 800399a:	4d1d      	ldr	r5, [pc, #116]	@ (8003a10 <RCCEx_PLLSAI2_Config+0xfc>)
 800399c:	682b      	ldr	r3, [r5, #0]
 800399e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039a2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80039a4:	f7fd fde2 	bl	800156c <HAL_GetTick>
 80039a8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039aa:	e004      	b.n	80039b6 <RCCEx_PLLSAI2_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039ac:	f7fd fdde 	bl	800156c <HAL_GetTick>
 80039b0:	1b80      	subs	r0, r0, r6
 80039b2:	2802      	cmp	r0, #2
 80039b4:	d81d      	bhi.n	80039f2 <RCCEx_PLLSAI2_Config+0xde>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039b6:	682b      	ldr	r3, [r5, #0]
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	d5f7      	bpl.n	80039ac <RCCEx_PLLSAI2_Config+0x98>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80039bc:	696b      	ldr	r3, [r5, #20]
 80039be:	6962      	ldr	r2, [r4, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	2000      	movs	r0, #0
 80039c4:	616b      	str	r3, [r5, #20]
}
 80039c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80039c8:	2900      	cmp	r1, #0
 80039ca:	d0b0      	beq.n	800392e <RCCEx_PLLSAI2_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039cc:	68d3      	ldr	r3, [r2, #12]
       ||
 80039ce:	6862      	ldr	r2, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039d0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80039d4:	3301      	adds	r3, #1
       ||
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d1a9      	bne.n	800392e <RCCEx_PLLSAI2_Config+0x1a>
 80039da:	e7be      	b.n	800395a <RCCEx_PLLSAI2_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039dc:	6811      	ldr	r1, [r2, #0]
 80039de:	038e      	lsls	r6, r1, #14
 80039e0:	d4b0      	bmi.n	8003944 <RCCEx_PLLSAI2_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	0351      	lsls	r1, r2, #13
 80039e6:	d5a2      	bpl.n	800392e <RCCEx_PLLSAI2_Config+0x1a>
 80039e8:	e7ac      	b.n	8003944 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	0557      	lsls	r7, r2, #21
 80039ee:	d59e      	bpl.n	800392e <RCCEx_PLLSAI2_Config+0x1a>
 80039f0:	e7a8      	b.n	8003944 <RCCEx_PLLSAI2_Config+0x30>
 80039f2:	2003      	movs	r0, #3
}
 80039f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039f6:	6973      	ldr	r3, [r6, #20]
 80039f8:	6921      	ldr	r1, [r4, #16]
 80039fa:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80039fe:	0849      	lsrs	r1, r1, #1
 8003a00:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a04:	3901      	subs	r1, #1
 8003a06:	4313      	orrs	r3, r2
 8003a08:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8003a0c:	6173      	str	r3, [r6, #20]
 8003a0e:	e7c4      	b.n	800399a <RCCEx_PLLSAI2_Config+0x86>
 8003a10:	40021000 	.word	0x40021000

08003a14 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003a14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a18:	6803      	ldr	r3, [r0, #0]
 8003a1a:	f413 6600 	ands.w	r6, r3, #2048	@ 0x800
{
 8003a1e:	b083      	sub	sp, #12
 8003a20:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a22:	d016      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003a24:	6e41      	ldr	r1, [r0, #100]	@ 0x64
 8003a26:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8003a2a:	f000 81dd 	beq.w	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 8003a2e:	f200 8117 	bhi.w	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8003a32:	2900      	cmp	r1, #0
 8003a34:	f000 81ac 	beq.w	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 8003a38:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8003a3c:	f040 81c6 	bne.w	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a40:	2100      	movs	r1, #0
 8003a42:	3020      	adds	r0, #32
 8003a44:	f7ff ff66 	bl	8003914 <RCCEx_PLLSAI2_Config>
 8003a48:	4606      	mov	r6, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a4a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003a4c:	2e00      	cmp	r6, #0
 8003a4e:	f000 81d8 	beq.w	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a52:	04d8      	lsls	r0, r3, #19
 8003a54:	f140 8115 	bpl.w	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003a58:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8003a5a:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 8003a5e:	f000 81c9 	beq.w	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003a62:	f200 816f 	bhi.w	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003a66:	2900      	cmp	r1, #0
 8003a68:	f000 819b 	beq.w	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8003a6c:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8003a70:	f040 81ae 	bne.w	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a74:	2100      	movs	r1, #0
 8003a76:	f104 0020 	add.w	r0, r4, #32
 8003a7a:	f7ff ff4b 	bl	8003914 <RCCEx_PLLSAI2_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a7e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a80:	4607      	mov	r7, r0
    if(ret == HAL_OK)
 8003a82:	2f00      	cmp	r7, #0
 8003a84:	f040 8165 	bne.w	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x33e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a88:	49b3      	ldr	r1, [pc, #716]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a8a:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8003a8c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003a90:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003a94:	4302      	orrs	r2, r0
 8003a96:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a9a:	0399      	lsls	r1, r3, #14
 8003a9c:	f100 80f5 	bmi.w	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x276>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003aa0:	07da      	lsls	r2, r3, #31
 8003aa2:	d508      	bpl.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003aa4:	49ac      	ldr	r1, [pc, #688]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003aa6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003aa8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003aac:	f022 0203 	bic.w	r2, r2, #3
 8003ab0:	4302      	orrs	r2, r0
 8003ab2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ab6:	079f      	lsls	r7, r3, #30
 8003ab8:	d508      	bpl.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003aba:	49a7      	ldr	r1, [pc, #668]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003abc:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003abe:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003ac2:	f022 020c 	bic.w	r2, r2, #12
 8003ac6:	4302      	orrs	r2, r0
 8003ac8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003acc:	075d      	lsls	r5, r3, #29
 8003ace:	d508      	bpl.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ad0:	49a1      	ldr	r1, [pc, #644]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003ad2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003ad4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003ad8:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8003adc:	4302      	orrs	r2, r0
 8003ade:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ae2:	0718      	lsls	r0, r3, #28
 8003ae4:	d508      	bpl.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ae6:	499c      	ldr	r1, [pc, #624]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003ae8:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003aea:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003aee:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8003af2:	4302      	orrs	r2, r0
 8003af4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003af8:	06d9      	lsls	r1, r3, #27
 8003afa:	d508      	bpl.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xfa>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003afc:	4996      	ldr	r1, [pc, #600]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003afe:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8003b00:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003b04:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003b08:	4302      	orrs	r2, r0
 8003b0a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b0e:	069a      	lsls	r2, r3, #26
 8003b10:	d508      	bpl.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b12:	4991      	ldr	r1, [pc, #580]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b14:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8003b16:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003b1a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003b1e:	4302      	orrs	r2, r0
 8003b20:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b24:	059f      	lsls	r7, r3, #22
 8003b26:	d508      	bpl.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b28:	498b      	ldr	r1, [pc, #556]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b2a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8003b2c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003b30:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8003b34:	4302      	orrs	r2, r0
 8003b36:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b3a:	055d      	lsls	r5, r3, #21
 8003b3c:	d508      	bpl.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b3e:	4986      	ldr	r1, [pc, #536]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b40:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8003b42:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003b46:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8003b4a:	4302      	orrs	r2, r0
 8003b4c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b50:	0658      	lsls	r0, r3, #25
 8003b52:	d508      	bpl.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b54:	4980      	ldr	r1, [pc, #512]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b56:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8003b58:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003b5c:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8003b60:	4302      	orrs	r2, r0
 8003b62:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b66:	0619      	lsls	r1, r3, #24
 8003b68:	d508      	bpl.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b6a:	497b      	ldr	r1, [pc, #492]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b6c:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8003b6e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003b72:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8003b76:	4302      	orrs	r2, r0
 8003b78:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b7c:	05da      	lsls	r2, r3, #23
 8003b7e:	d508      	bpl.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b80:	4975      	ldr	r1, [pc, #468]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b82:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b84:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003b88:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8003b8c:	4302      	orrs	r2, r0
 8003b8e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b92:	049f      	lsls	r7, r3, #18
 8003b94:	d510      	bpl.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b96:	4970      	ldr	r1, [pc, #448]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b98:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8003b9a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003b9e:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8003ba2:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ba4:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ba8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bac:	f000 8104 	beq.w	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003bb0:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8003bb4:	f000 8132 	beq.w	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x408>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003bb8:	031d      	lsls	r5, r3, #12
 8003bba:	d510      	bpl.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003bbc:	4966      	ldr	r1, [pc, #408]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003bbe:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8003bc0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003bc4:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8003bc8:	4302      	orrs	r2, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003bca:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003bce:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003bd2:	f000 80f6 	beq.w	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003bd6:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8003bda:	f000 8129 	beq.w	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bde:	0358      	lsls	r0, r3, #13
 8003be0:	d510      	bpl.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003be2:	495d      	ldr	r1, [pc, #372]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003be4:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8003be6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003bea:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8003bee:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bf0:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bf4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bf8:	f000 80d9 	beq.w	8003dae <HAL_RCCEx_PeriphCLKConfig+0x39a>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003bfc:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8003c00:	f000 8120 	beq.w	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x430>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c04:	0459      	lsls	r1, r3, #17
 8003c06:	d510      	bpl.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x216>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c08:	4853      	ldr	r0, [pc, #332]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c0a:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8003c0c:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8003c10:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003c14:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c16:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c1a:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c1e:	f000 80d9 	beq.w	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c22:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8003c26:	f000 80ee 	beq.w	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c2a:	041a      	lsls	r2, r3, #16
 8003c2c:	d508      	bpl.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c2e:	494a      	ldr	r1, [pc, #296]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c30:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8003c32:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003c36:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8003c3a:	4302      	orrs	r2, r0
 8003c3c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c40:	03db      	lsls	r3, r3, #15
 8003c42:	d509      	bpl.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x244>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c44:	4a44      	ldr	r2, [pc, #272]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c46:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8003c4a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003c4e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c52:	430b      	orrs	r3, r1
 8003c54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8003c58:	4630      	mov	r0, r6
 8003c5a:	b003      	add	sp, #12
 8003c5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Sai1ClockSelection)
 8003c60:	f5b1 0f40 	cmp.w	r1, #12582912	@ 0xc00000
 8003c64:	f040 80b2 	bne.w	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c68:	483b      	ldr	r0, [pc, #236]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c6a:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8003c6e:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8003c72:	430a      	orrs	r2, r1
 8003c74:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c78:	04d8      	lsls	r0, r3, #19
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c7a:	f04f 0600 	mov.w	r6, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c7e:	f53f aeeb 	bmi.w	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003c82:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c84:	0399      	lsls	r1, r3, #14
 8003c86:	f57f af0b 	bpl.w	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c8a:	4b33      	ldr	r3, [pc, #204]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003c8e:	00d2      	lsls	r2, r2, #3
 8003c90:	d566      	bpl.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x34c>
    FlagStatus       pwrclkchanged = RESET;
 8003c92:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c96:	4d31      	ldr	r5, [pc, #196]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8003c98:	682b      	ldr	r3, [r5, #0]
 8003c9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c9e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003ca0:	f7fd fc64 	bl	800156c <HAL_GetTick>
 8003ca4:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ca6:	e005      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca8:	f7fd fc60 	bl	800156c <HAL_GetTick>
 8003cac:	eba0 0309 	sub.w	r3, r0, r9
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d861      	bhi.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x364>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cb4:	682b      	ldr	r3, [r5, #0]
 8003cb6:	05db      	lsls	r3, r3, #23
 8003cb8:	d5f6      	bpl.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x294>
    if(ret == HAL_OK)
 8003cba:	2f00      	cmp	r7, #0
 8003cbc:	f040 80cc 	bne.w	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x444>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cc0:	4d25      	ldr	r5, [pc, #148]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x344>)
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cc2:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cc6:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cca:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8003cce:	d026      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d024      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x30a>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cd4:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cd8:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8003cdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ce0:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ce4:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8003ce8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cec:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003cf0:	07c8      	lsls	r0, r1, #31
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cf2:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        RCC->BDCR = tmpregister;
 8003cf6:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003cfa:	d510      	bpl.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x30a>
        tickstart = HAL_GetTick();
 8003cfc:	f7fd fc36 	bl	800156c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d00:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8003d04:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d06:	e004      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d08:	f7fd fc30 	bl	800156c <HAL_GetTick>
 8003d0c:	1bc0      	subs	r0, r0, r7
 8003d0e:	4548      	cmp	r0, r9
 8003d10:	d832      	bhi.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x364>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d12:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8003d16:	0799      	lsls	r1, r3, #30
 8003d18:	d5f6      	bpl.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d1a:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8003d1e:	490e      	ldr	r1, [pc, #56]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003d20:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 8003d24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d2e:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8003d30:	f1b8 0f00 	cmp.w	r8, #0
 8003d34:	f43f aeb4 	beq.w	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d38:	4907      	ldr	r1, [pc, #28]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003d3a:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8003d3c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003d40:	658a      	str	r2, [r1, #88]	@ 0x58
 8003d42:	e6ad      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003d44:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 8003d48:	d142      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003d4a:	4637      	mov	r7, r6
    if(ret == HAL_OK)
 8003d4c:	2f00      	cmp	r7, #0
 8003d4e:	f43f ae9b 	beq.w	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003d52:	463e      	mov	r6, r7
 8003d54:	e796      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x270>
 8003d56:	bf00      	nop
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	40007000 	.word	0x40007000
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d60:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003d62:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003d66:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d6e:	9301      	str	r3, [sp, #4]
 8003d70:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003d72:	f04f 0801 	mov.w	r8, #1
 8003d76:	e78e      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x282>
        ret = HAL_TIMEOUT;
 8003d78:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d7a:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8003d7c:	f1b8 0f00 	cmp.w	r8, #0
 8003d80:	f43f ae8e 	beq.w	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d84:	4935      	ldr	r1, [pc, #212]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8003d86:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8003d88:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003d8c:	658a      	str	r2, [r1, #88]	@ 0x58
 8003d8e:	e687      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d90:	3004      	adds	r0, #4
 8003d92:	f7ff fd31 	bl	80037f8 <RCCEx_PLLSAI1_Config>
 8003d96:	4606      	mov	r6, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d98:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003d9a:	2e00      	cmp	r6, #0
 8003d9c:	f47f ae59 	bne.w	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8003da0:	e02f      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003da2:	1d20      	adds	r0, r4, #4
 8003da4:	f7ff fd28 	bl	80037f8 <RCCEx_PLLSAI1_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003da8:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003daa:	4607      	mov	r7, r0
      break;
 8003dac:	e669      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dae:	68ca      	ldr	r2, [r1, #12]
 8003db0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003db4:	60ca      	str	r2, [r1, #12]
 8003db6:	e725      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003db8:	68ca      	ldr	r2, [r1, #12]
 8003dba:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003dbe:	60ca      	str	r2, [r1, #12]
 8003dc0:	e6fa      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dc2:	68ca      	ldr	r2, [r1, #12]
 8003dc4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003dc8:	60ca      	str	r2, [r1, #12]
 8003dca:	e708      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003dcc:	2601      	movs	r6, #1
 8003dce:	e640      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003dd0:	2601      	movs	r6, #1
 8003dd2:	e756      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x26e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003dd4:	2102      	movs	r1, #2
 8003dd6:	1d20      	adds	r0, r4, #4
 8003dd8:	f7ff fd0e 	bl	80037f8 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ddc:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8003dde:	2800      	cmp	r0, #0
 8003de0:	f43f af23 	beq.w	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x216>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003de4:	4606      	mov	r6, r0
 8003de6:	e720      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003de8:	481c      	ldr	r0, [pc, #112]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8003dea:	68c2      	ldr	r2, [r0, #12]
 8003dec:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003df0:	60c2      	str	r2, [r0, #12]
    if(ret == HAL_OK)
 8003df2:	e739      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x254>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003df4:	4919      	ldr	r1, [pc, #100]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8003df6:	68ca      	ldr	r2, [r1, #12]
 8003df8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003dfc:	60ca      	str	r2, [r1, #12]
    switch(PeriphClkInit->Sai1ClockSelection)
 8003dfe:	4637      	mov	r7, r6
 8003e00:	e7a4      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x338>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e02:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8003e04:	e730      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x254>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003e06:	2102      	movs	r1, #2
 8003e08:	f104 0020 	add.w	r0, r4, #32
 8003e0c:	f7ff fd82 	bl	8003914 <RCCEx_PLLSAI2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e10:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8003e12:	2800      	cmp	r0, #0
 8003e14:	f43f af09 	beq.w	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x216>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e18:	4606      	mov	r6, r0
 8003e1a:	e706      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x216>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	1d20      	adds	r0, r4, #4
 8003e20:	f7ff fcea 	bl	80037f8 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e24:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 8003e26:	2800      	cmp	r0, #0
 8003e28:	f43f aec6 	beq.w	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e2c:	4606      	mov	r6, r0
 8003e2e:	e6c3      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e30:	2101      	movs	r1, #1
 8003e32:	1d20      	adds	r0, r4, #4
 8003e34:	f7ff fce0 	bl	80037f8 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e38:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8003e3a:	2800      	cmp	r0, #0
 8003e3c:	f43f aecf 	beq.w	8003bde <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e40:	4606      	mov	r6, r0
 8003e42:	e6cc      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e44:	2101      	movs	r1, #1
 8003e46:	1d20      	adds	r0, r4, #4
 8003e48:	f7ff fcd6 	bl	80037f8 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e4c:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	f43f aed8 	beq.w	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e54:	4606      	mov	r6, r0
 8003e56:	e6d5      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003e58:	463e      	mov	r6, r7
 8003e5a:	e78e      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x366>
 8003e5c:	40021000 	.word	0x40021000

08003e60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e64:	4604      	mov	r4, r0
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e66:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8003e68:	2820      	cmp	r0, #32
 8003e6a:	d14f      	bne.n	8003f0c <HAL_UART_Transmit+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e6c:	4688      	mov	r8, r1
 8003e6e:	b109      	cbz	r1, 8003e74 <HAL_UART_Transmit+0x14>
 8003e70:	4617      	mov	r7, r2
 8003e72:	b912      	cbnz	r2, 8003e7a <HAL_UART_Transmit+0x1a>
    {
      return  HAL_ERROR;
 8003e74:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e7a:	461d      	mov	r5, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e7c:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e80:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e82:	f8c4 9084 	str.w	r9, [r4, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e86:	67e3      	str	r3, [r4, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8003e88:	f7fd fb70 	bl	800156c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e8c:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8003e8e:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 8003e96:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    tickstart = HAL_GetTick();
 8003e9a:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e9c:	d045      	beq.n	8003f2a <HAL_UART_Transmit+0xca>
    while (huart->TxXferCount > 0U)
 8003e9e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ea2:	6823      	ldr	r3, [r4, #0]
    while (huart->TxXferCount > 0U)
 8003ea4:	b292      	uxth	r2, r2
 8003ea6:	b1aa      	cbz	r2, 8003ed4 <HAL_UART_Transmit+0x74>
 8003ea8:	1c68      	adds	r0, r5, #1
 8003eaa:	d124      	bne.n	8003ef6 <HAL_UART_Transmit+0x96>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eac:	69da      	ldr	r2, [r3, #28]
 8003eae:	0612      	lsls	r2, r2, #24
 8003eb0:	d5fc      	bpl.n	8003eac <HAL_UART_Transmit+0x4c>
      if (pdata8bits == NULL)
 8003eb2:	f1b8 0f00 	cmp.w	r8, #0
 8003eb6:	d024      	beq.n	8003f02 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eb8:	f818 2b01 	ldrb.w	r2, [r8], #1
 8003ebc:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->TxXferCount--;
 8003ebe:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8003ec2:	3a01      	subs	r2, #1
 8003ec4:	b292      	uxth	r2, r2
 8003ec6:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003eca:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8003ece:	b292      	uxth	r2, r2
 8003ed0:	2a00      	cmp	r2, #0
 8003ed2:	d1e9      	bne.n	8003ea8 <HAL_UART_Transmit+0x48>
 8003ed4:	1c69      	adds	r1, r5, #1
 8003ed6:	d124      	bne.n	8003f22 <HAL_UART_Transmit+0xc2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ed8:	69da      	ldr	r2, [r3, #28]
 8003eda:	0652      	lsls	r2, r2, #25
 8003edc:	d5fc      	bpl.n	8003ed8 <HAL_UART_Transmit+0x78>
    huart->gState = HAL_UART_STATE_READY;
 8003ede:	2320      	movs	r3, #32
 8003ee0:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8003ee2:	2000      	movs	r0, #0
 8003ee4:	e7c7      	b.n	8003e76 <HAL_UART_Transmit+0x16>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee6:	f7fd fb41 	bl	800156c <HAL_GetTick>
 8003eea:	1b80      	subs	r0, r0, r6
 8003eec:	4285      	cmp	r5, r0
 8003eee:	d322      	bcc.n	8003f36 <HAL_UART_Transmit+0xd6>
 8003ef0:	b30d      	cbz	r5, 8003f36 <HAL_UART_Transmit+0xd6>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ef2:	6823      	ldr	r3, [r4, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ef6:	69da      	ldr	r2, [r3, #28]
 8003ef8:	0617      	lsls	r7, r2, #24
 8003efa:	d5f4      	bpl.n	8003ee6 <HAL_UART_Transmit+0x86>
      if (pdata8bits == NULL)
 8003efc:	f1b8 0f00 	cmp.w	r8, #0
 8003f00:	d1da      	bne.n	8003eb8 <HAL_UART_Transmit+0x58>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f02:	f839 2b02 	ldrh.w	r2, [r9], #2
 8003f06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f0a:	e7d7      	b.n	8003ebc <HAL_UART_Transmit+0x5c>
    return HAL_BUSY;
 8003f0c:	2002      	movs	r0, #2
}
 8003f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f12:	f7fd fb2b 	bl	800156c <HAL_GetTick>
 8003f16:	1b83      	subs	r3, r0, r6
 8003f18:	429d      	cmp	r5, r3
 8003f1a:	d30c      	bcc.n	8003f36 <HAL_UART_Transmit+0xd6>
 8003f1c:	b15d      	cbz	r5, 8003f36 <HAL_UART_Transmit+0xd6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f1e:	6823      	ldr	r3, [r4, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	065b      	lsls	r3, r3, #25
 8003f26:	d5f4      	bpl.n	8003f12 <HAL_UART_Transmit+0xb2>
 8003f28:	e7d9      	b.n	8003ede <HAL_UART_Transmit+0x7e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f2a:	6923      	ldr	r3, [r4, #16]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1b6      	bne.n	8003e9e <HAL_UART_Transmit+0x3e>
 8003f30:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8003f32:	4698      	mov	r8, r3
 8003f34:	e7b3      	b.n	8003e9e <HAL_UART_Transmit+0x3e>
        huart->gState = HAL_UART_STATE_READY;
 8003f36:	2320      	movs	r3, #32
 8003f38:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8003f3a:	2003      	movs	r0, #3
}
 8003f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003f40 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f40:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8003f44:	2b20      	cmp	r3, #32
 8003f46:	d155      	bne.n	8003ff4 <HAL_UART_Receive_IT+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8003f48:	b101      	cbz	r1, 8003f4c <HAL_UART_Receive_IT+0xc>
 8003f4a:	b90a      	cbnz	r2, 8003f50 <HAL_UART_Receive_IT+0x10>
      return HAL_ERROR;
 8003f4c:	2001      	movs	r0, #1
}
 8003f4e:	4770      	bx	lr
{
 8003f50:	b430      	push	{r4, r5}
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003f52:	6803      	ldr	r3, [r0, #0]
 8003f54:	4c3c      	ldr	r4, [pc, #240]	@ (8004048 <HAL_UART_Receive_IT+0x108>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f56:	2500      	movs	r5, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003f58:	42a3      	cmp	r3, r4
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f5a:	6605      	str	r5, [r0, #96]	@ 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003f5c:	d011      	beq.n	8003f82 <HAL_UART_Receive_IT+0x42>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f5e:	685c      	ldr	r4, [r3, #4]
 8003f60:	0224      	lsls	r4, r4, #8
 8003f62:	d50e      	bpl.n	8003f82 <HAL_UART_Receive_IT+0x42>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f64:	e853 4f00 	ldrex	r4, [r3]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f68:	f044 6480 	orr.w	r4, r4, #67108864	@ 0x4000000
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6c:	e843 4500 	strex	r5, r4, [r3]
 8003f70:	b13d      	cbz	r5, 8003f82 <HAL_UART_Receive_IT+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f72:	e853 cf00 	ldrex	ip, [r3]
 8003f76:	f04c 6c80 	orr.w	ip, ip, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7a:	e843 c400 	strex	r4, ip, [r3]
 8003f7e:	2c00      	cmp	r4, #0
 8003f80:	d1f7      	bne.n	8003f72 <HAL_UART_Receive_IT+0x32>
  huart->RxXferSize  = Size;
  huart->RxXferCount = Size;
  huart->RxISR       = NULL;

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003f82:	6885      	ldr	r5, [r0, #8]
  huart->pRxBuffPtr  = pData;
 8003f84:	6541      	str	r1, [r0, #84]	@ 0x54
  huart->RxISR       = NULL;
 8003f86:	2400      	movs	r4, #0
  UART_MASK_COMPUTATION(huart);
 8003f88:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
  huart->RxXferSize  = Size;
 8003f8c:	f8a0 2058 	strh.w	r2, [r0, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003f90:	f8a0 205a 	strh.w	r2, [r0, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003f94:	6684      	str	r4, [r0, #104]	@ 0x68
  UART_MASK_COMPUTATION(huart);
 8003f96:	d043      	beq.n	8004020 <HAL_UART_Receive_IT+0xe0>
 8003f98:	2d00      	cmp	r5, #0
 8003f9a:	d148      	bne.n	800402e <HAL_UART_Receive_IT+0xee>
 8003f9c:	6902      	ldr	r2, [r0, #16]
 8003f9e:	2a00      	cmp	r2, #0
 8003fa0:	bf14      	ite	ne
 8003fa2:	247f      	movne	r4, #127	@ 0x7f
 8003fa4:	24ff      	moveq	r4, #255	@ 0xff

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa6:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fa8:	2222      	movs	r2, #34	@ 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003faa:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
  UART_MASK_COMPUTATION(huart);
 8003fae:	f8a0 405c 	strh.w	r4, [r0, #92]	@ 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fb2:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb6:	f103 0208 	add.w	r2, r3, #8
 8003fba:	e852 2f00 	ldrex	r2, [r2]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc2:	f103 0408 	add.w	r4, r3, #8
 8003fc6:	e844 2100 	strex	r1, r2, [r4]
 8003fca:	2900      	cmp	r1, #0
 8003fcc:	d1f3      	bne.n	8003fb6 <HAL_UART_Receive_IT+0x76>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fce:	6882      	ldr	r2, [r0, #8]
 8003fd0:	6901      	ldr	r1, [r0, #16]
 8003fd2:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8003fd6:	d00f      	beq.n	8003ff8 <HAL_UART_Receive_IT+0xb8>
 8003fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800404c <HAL_UART_Receive_IT+0x10c>)
 8003fda:	6682      	str	r2, [r0, #104]	@ 0x68
  {
    huart->RxISR = UART_RxISR_8BIT;
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fdc:	b179      	cbz	r1, 8003ffe <HAL_UART_Receive_IT+0xbe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fde:	e853 2f00 	ldrex	r2, [r3]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003fe2:	f442 7290 	orr.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe6:	e843 2100 	strex	r1, r2, [r3]
 8003fea:	2900      	cmp	r1, #0
 8003fec:	d1f7      	bne.n	8003fde <HAL_UART_Receive_IT+0x9e>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8003fee:	2000      	movs	r0, #0
}
 8003ff0:	bc30      	pop	{r4, r5}
 8003ff2:	4770      	bx	lr
    return HAL_BUSY;
 8003ff4:	2002      	movs	r0, #2
 8003ff6:	4770      	bx	lr
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ff8:	bb11      	cbnz	r1, 8004040 <HAL_UART_Receive_IT+0x100>
 8003ffa:	4a15      	ldr	r2, [pc, #84]	@ (8004050 <HAL_UART_Receive_IT+0x110>)
 8003ffc:	6682      	str	r2, [r0, #104]	@ 0x68
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffe:	e853 2f00 	ldrex	r2, [r3]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004002:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	e843 2100 	strex	r1, r2, [r3]
 800400a:	2900      	cmp	r1, #0
 800400c:	d0ef      	beq.n	8003fee <HAL_UART_Receive_IT+0xae>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400e:	e853 2f00 	ldrex	r2, [r3]
 8004012:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004016:	e843 2100 	strex	r1, r2, [r3]
 800401a:	2900      	cmp	r1, #0
 800401c:	d1ef      	bne.n	8003ffe <HAL_UART_Receive_IT+0xbe>
 800401e:	e7e6      	b.n	8003fee <HAL_UART_Receive_IT+0xae>
  UART_MASK_COMPUTATION(huart);
 8004020:	6902      	ldr	r2, [r0, #16]
 8004022:	2a00      	cmp	r2, #0
 8004024:	f240 14ff 	movw	r4, #511	@ 0x1ff
 8004028:	bf18      	it	ne
 800402a:	24ff      	movne	r4, #255	@ 0xff
 800402c:	e7bb      	b.n	8003fa6 <HAL_UART_Receive_IT+0x66>
 800402e:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
 8004032:	d1b8      	bne.n	8003fa6 <HAL_UART_Receive_IT+0x66>
 8004034:	6902      	ldr	r2, [r0, #16]
 8004036:	2a00      	cmp	r2, #0
 8004038:	bf14      	ite	ne
 800403a:	243f      	movne	r4, #63	@ 0x3f
 800403c:	247f      	moveq	r4, #127	@ 0x7f
 800403e:	e7b2      	b.n	8003fa6 <HAL_UART_Receive_IT+0x66>
 8004040:	4a02      	ldr	r2, [pc, #8]	@ (800404c <HAL_UART_Receive_IT+0x10c>)
 8004042:	6682      	str	r2, [r0, #104]	@ 0x68
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004044:	e7cb      	b.n	8003fde <HAL_UART_Receive_IT+0x9e>
 8004046:	bf00      	nop
 8004048:	40008000 	.word	0x40008000
 800404c:	080044c9 	.word	0x080044c9
 8004050:	0800447d 	.word	0x0800447d

08004054 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop

08004058 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop

0800405c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800405c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800405e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004066:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800406a:	f7ff fff5 	bl	8004058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800406e:	bd08      	pop	{r3, pc}

08004070 <HAL_UARTEx_RxEventCallback>:
}
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop

08004074 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004074:	6803      	ldr	r3, [r0, #0]
 8004076:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004078:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800407a:	f640 0c0f 	movw	ip, #2063	@ 0x80f
  if (errorflags == 0U)
 800407e:	ea12 0f0c 	tst.w	r2, ip
{
 8004082:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004084:	689d      	ldr	r5, [r3, #8]
{
 8004086:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8004088:	d152      	bne.n	8004130 <HAL_UART_IRQHandler+0xbc>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800408a:	0696      	lsls	r6, r2, #26
 800408c:	d502      	bpl.n	8004094 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800408e:	068e      	lsls	r6, r1, #26
 8004090:	f100 80cd 	bmi.w	800422e <HAL_UART_IRQHandler+0x1ba>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004094:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8004096:	2801      	cmp	r0, #1
 8004098:	d024      	beq.n	80040e4 <HAL_UART_IRQHandler+0x70>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800409a:	02d6      	lsls	r6, r2, #11
 800409c:	d502      	bpl.n	80040a4 <HAL_UART_IRQHandler+0x30>
 800409e:	0268      	lsls	r0, r5, #9
 80040a0:	f100 80ca 	bmi.w	8004238 <HAL_UART_IRQHandler+0x1c4>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80040a4:	0616      	lsls	r6, r2, #24
 80040a6:	d414      	bmi.n	80040d2 <HAL_UART_IRQHandler+0x5e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80040a8:	0650      	lsls	r0, r2, #25
 80040aa:	d501      	bpl.n	80040b0 <HAL_UART_IRQHandler+0x3c>
 80040ac:	064a      	lsls	r2, r1, #25
 80040ae:	d400      	bmi.n	80040b2 <HAL_UART_IRQHandler+0x3e>
}
 80040b0:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b2:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	e843 2100 	strex	r1, r2, [r3]
 80040be:	2900      	cmp	r1, #0
 80040c0:	d1f7      	bne.n	80040b2 <HAL_UART_IRQHandler+0x3e>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040c2:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040c4:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80040c6:	67e2      	str	r2, [r4, #124]	@ 0x7c
  huart->TxISR = NULL;
 80040c8:	66e3      	str	r3, [r4, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040ca:	4620      	mov	r0, r4
 80040cc:	f7ff ffc2 	bl	8004054 <HAL_UART_TxCpltCallback>
}
 80040d0:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80040d2:	060d      	lsls	r5, r1, #24
 80040d4:	d5e8      	bpl.n	80040a8 <HAL_UART_IRQHandler+0x34>
    if (huart->TxISR != NULL)
 80040d6:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0e9      	beq.n	80040b0 <HAL_UART_IRQHandler+0x3c>
      huart->TxISR(huart);
 80040dc:	4620      	mov	r0, r4
}
 80040de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 80040e2:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80040e4:	06d0      	lsls	r0, r2, #27
 80040e6:	d5d8      	bpl.n	800409a <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80040e8:	06ce      	lsls	r6, r1, #27
 80040ea:	d5d6      	bpl.n	800409a <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040ec:	2210      	movs	r2, #16
 80040ee:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f0:	6899      	ldr	r1, [r3, #8]
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040f2:	f8b4 2058 	ldrh.w	r2, [r4, #88]	@ 0x58
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f6:	0648      	lsls	r0, r1, #25
 80040f8:	f140 80fb 	bpl.w	80042f2 <HAL_UART_IRQHandler+0x27e>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040fc:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80040fe:	6805      	ldr	r5, [r0, #0]
 8004100:	6869      	ldr	r1, [r5, #4]
 8004102:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 8004104:	2900      	cmp	r1, #0
 8004106:	f000 8160 	beq.w	80043ca <HAL_UART_IRQHandler+0x356>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800410a:	4291      	cmp	r1, r2
 800410c:	f080 815d 	bcs.w	80043ca <HAL_UART_IRQHandler+0x356>
        huart->RxXferCount = nb_remaining_rx_data;
 8004110:	f8a4 105a 	strh.w	r1, [r4, #90]	@ 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004114:	6829      	ldr	r1, [r5, #0]
 8004116:	0689      	lsls	r1, r1, #26
 8004118:	f140 8120 	bpl.w	800435c <HAL_UART_IRQHandler+0x2e8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800411c:	2302      	movs	r3, #2
 800411e:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004120:	f8b4 105a 	ldrh.w	r1, [r4, #90]	@ 0x5a
 8004124:	1a51      	subs	r1, r2, r1
 8004126:	4620      	mov	r0, r4
 8004128:	b289      	uxth	r1, r1
 800412a:	f7ff ffa1 	bl	8004070 <HAL_UARTEx_RxEventCallback>
}
 800412e:	bd70      	pop	{r4, r5, r6, pc}
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004130:	f015 0601 	ands.w	r6, r5, #1
 8004134:	f040 80a5 	bne.w	8004282 <HAL_UART_IRQHandler+0x20e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004138:	48a7      	ldr	r0, [pc, #668]	@ (80043d8 <HAL_UART_IRQHandler+0x364>)
 800413a:	4201      	tst	r1, r0
 800413c:	d0aa      	beq.n	8004094 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800413e:	07d5      	lsls	r5, r2, #31
 8004140:	d50f      	bpl.n	8004162 <HAL_UART_IRQHandler+0xee>
 8004142:	05c8      	lsls	r0, r1, #23
 8004144:	f140 80d1 	bpl.w	80042ea <HAL_UART_IRQHandler+0x276>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004148:	2001      	movs	r0, #1
 800414a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800414c:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8004150:	f040 0001 	orr.w	r0, r0, #1
 8004154:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004158:	0790      	lsls	r0, r2, #30
 800415a:	d57a      	bpl.n	8004252 <HAL_UART_IRQHandler+0x1de>
 800415c:	2e00      	cmp	r6, #0
 800415e:	f040 8094 	bne.w	800428a <HAL_UART_IRQHandler+0x216>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004162:	0755      	lsls	r5, r2, #29
 8004164:	f140 809b 	bpl.w	800429e <HAL_UART_IRQHandler+0x22a>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004168:	0716      	lsls	r6, r2, #28
 800416a:	f100 80bb 	bmi.w	80042e4 <HAL_UART_IRQHandler+0x270>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800416e:	0515      	lsls	r5, r2, #20
 8004170:	d50a      	bpl.n	8004188 <HAL_UART_IRQHandler+0x114>
 8004172:	0148      	lsls	r0, r1, #5
 8004174:	d508      	bpl.n	8004188 <HAL_UART_IRQHandler+0x114>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004176:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800417a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800417c:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8004180:	f040 0020 	orr.w	r0, r0, #32
 8004184:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004188:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 800418c:	2800      	cmp	r0, #0
 800418e:	d08f      	beq.n	80040b0 <HAL_UART_IRQHandler+0x3c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004190:	0692      	lsls	r2, r2, #26
 8004192:	d506      	bpl.n	80041a2 <HAL_UART_IRQHandler+0x12e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004194:	068e      	lsls	r6, r1, #26
 8004196:	d504      	bpl.n	80041a2 <HAL_UART_IRQHandler+0x12e>
        if (huart->RxISR != NULL)
 8004198:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800419a:	b112      	cbz	r2, 80041a2 <HAL_UART_IRQHandler+0x12e>
          huart->RxISR(huart);
 800419c:	4620      	mov	r0, r4
 800419e:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041a0:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 80041a2:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041a6:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80041a8:	f001 0128 	and.w	r1, r1, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041ac:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80041b0:	ea52 0501 	orrs.w	r5, r2, r1
 80041b4:	f000 8103 	beq.w	80043be <HAL_UART_IRQHandler+0x34a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b8:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041bc:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c0:	e843 2100 	strex	r1, r2, [r3]
 80041c4:	2900      	cmp	r1, #0
 80041c6:	d1f7      	bne.n	80041b8 <HAL_UART_IRQHandler+0x144>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c8:	f103 0208 	add.w	r2, r3, #8
 80041cc:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d4:	f103 0008 	add.w	r0, r3, #8
 80041d8:	e840 2100 	strex	r1, r2, [r0]
 80041dc:	2900      	cmp	r1, #0
 80041de:	d1f3      	bne.n	80041c8 <HAL_UART_IRQHandler+0x154>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041e0:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80041e2:	2a01      	cmp	r2, #1
 80041e4:	d064      	beq.n	80042b0 <HAL_UART_IRQHandler+0x23c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e6:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80041e8:	2120      	movs	r1, #32
 80041ea:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ee:	6622      	str	r2, [r4, #96]	@ 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f0:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 80041f2:	66a2      	str	r2, [r4, #104]	@ 0x68
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f4:	064d      	lsls	r5, r1, #25
 80041f6:	d56c      	bpl.n	80042d2 <HAL_UART_IRQHandler+0x25e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f8:	f103 0208 	add.w	r2, r3, #8
 80041fc:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004200:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004204:	f103 0008 	add.w	r0, r3, #8
 8004208:	e840 2100 	strex	r1, r2, [r0]
 800420c:	2900      	cmp	r1, #0
 800420e:	d1f3      	bne.n	80041f8 <HAL_UART_IRQHandler+0x184>
          if (huart->hdmarx != NULL)
 8004210:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8004212:	2800      	cmp	r0, #0
 8004214:	d05d      	beq.n	80042d2 <HAL_UART_IRQHandler+0x25e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004216:	4b71      	ldr	r3, [pc, #452]	@ (80043dc <HAL_UART_IRQHandler+0x368>)
 8004218:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800421a:	f7fe f871 	bl	8002300 <HAL_DMA_Abort_IT>
 800421e:	2800      	cmp	r0, #0
 8004220:	f43f af46 	beq.w	80040b0 <HAL_UART_IRQHandler+0x3c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004224:	6f60      	ldr	r0, [r4, #116]	@ 0x74
}
 8004226:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800422a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800422c:	4718      	bx	r3
      if (huart->RxISR != NULL)
 800422e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8004230:	2b00      	cmp	r3, #0
 8004232:	f47f af54 	bne.w	80040de <HAL_UART_IRQHandler+0x6a>
 8004236:	e73b      	b.n	80040b0 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004238:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800423c:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800423e:	621a      	str	r2, [r3, #32]
}
 8004240:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8004244:	f000 bc3c 	b.w	8004ac0 <HAL_UARTEx_WakeupCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004248:	05c8      	lsls	r0, r1, #23
 800424a:	f53f af7d 	bmi.w	8004148 <HAL_UART_IRQHandler+0xd4>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800424e:	0795      	lsls	r5, r2, #30
 8004250:	d41b      	bmi.n	800428a <HAL_UART_IRQHandler+0x216>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004252:	0750      	lsls	r0, r2, #29
 8004254:	d523      	bpl.n	800429e <HAL_UART_IRQHandler+0x22a>
 8004256:	2e00      	cmp	r6, #0
 8004258:	d086      	beq.n	8004168 <HAL_UART_IRQHandler+0xf4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800425a:	2004      	movs	r0, #4
 800425c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800425e:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004262:	0715      	lsls	r5, r2, #28
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004264:	f040 0002 	orr.w	r0, r0, #2
 8004268:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 800426c:	f57f af7f 	bpl.w	800416e <HAL_UART_IRQHandler+0xfa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004270:	2008      	movs	r0, #8
 8004272:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004274:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8004278:	f040 0008 	orr.w	r0, r0, #8
 800427c:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8004280:	e775      	b.n	800416e <HAL_UART_IRQHandler+0xfa>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004282:	07d0      	lsls	r0, r2, #31
 8004284:	d4e0      	bmi.n	8004248 <HAL_UART_IRQHandler+0x1d4>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004286:	0795      	lsls	r5, r2, #30
 8004288:	d527      	bpl.n	80042da <HAL_UART_IRQHandler+0x266>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800428a:	2002      	movs	r0, #2
 800428c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800428e:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8004292:	f040 0004 	orr.w	r0, r0, #4
 8004296:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800429a:	0750      	lsls	r0, r2, #29
 800429c:	d4dd      	bmi.n	800425a <HAL_UART_IRQHandler+0x1e6>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800429e:	0710      	lsls	r0, r2, #28
 80042a0:	f57f af65 	bpl.w	800416e <HAL_UART_IRQHandler+0xfa>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042a4:	f001 0020 	and.w	r0, r1, #32
 80042a8:	4330      	orrs	r0, r6
 80042aa:	f43f af60 	beq.w	800416e <HAL_UART_IRQHandler+0xfa>
 80042ae:	e7df      	b.n	8004270 <HAL_UART_IRQHandler+0x1fc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b0:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b8:	e843 2100 	strex	r1, r2, [r3]
 80042bc:	2900      	cmp	r1, #0
 80042be:	d092      	beq.n	80041e6 <HAL_UART_IRQHandler+0x172>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c0:	e853 2f00 	ldrex	r2, [r3]
 80042c4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c8:	e843 2100 	strex	r1, r2, [r3]
 80042cc:	2900      	cmp	r1, #0
 80042ce:	d1ef      	bne.n	80042b0 <HAL_UART_IRQHandler+0x23c>
 80042d0:	e789      	b.n	80041e6 <HAL_UART_IRQHandler+0x172>
            HAL_UART_ErrorCallback(huart);
 80042d2:	4620      	mov	r0, r4
 80042d4:	f7ff fec0 	bl	8004058 <HAL_UART_ErrorCallback>
}
 80042d8:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042da:	0756      	lsls	r6, r2, #29
 80042dc:	d4bd      	bmi.n	800425a <HAL_UART_IRQHandler+0x1e6>
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042de:	0710      	lsls	r0, r2, #28
 80042e0:	d4c6      	bmi.n	8004270 <HAL_UART_IRQHandler+0x1fc>
 80042e2:	e744      	b.n	800416e <HAL_UART_IRQHandler+0xfa>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042e4:	068d      	lsls	r5, r1, #26
 80042e6:	d4c3      	bmi.n	8004270 <HAL_UART_IRQHandler+0x1fc>
 80042e8:	e741      	b.n	800416e <HAL_UART_IRQHandler+0xfa>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042ea:	0795      	lsls	r5, r2, #30
 80042ec:	f53f af39 	bmi.w	8004162 <HAL_UART_IRQHandler+0xee>
 80042f0:	e7af      	b.n	8004252 <HAL_UART_IRQHandler+0x1de>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042f2:	f8b4 005a 	ldrh.w	r0, [r4, #90]	@ 0x5a
      if ((huart->RxXferCount > 0U)
 80042f6:	f8b4 105a 	ldrh.w	r1, [r4, #90]	@ 0x5a
 80042fa:	b289      	uxth	r1, r1
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042fc:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 80042fe:	2900      	cmp	r1, #0
 8004300:	f43f aed6 	beq.w	80040b0 <HAL_UART_IRQHandler+0x3c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004304:	1a12      	subs	r2, r2, r0
 8004306:	b291      	uxth	r1, r2
          && (nb_rx_data > 0U))
 8004308:	2900      	cmp	r1, #0
 800430a:	f43f aed1 	beq.w	80040b0 <HAL_UART_IRQHandler+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430e:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004312:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004316:	e843 2000 	strex	r0, r2, [r3]
 800431a:	2800      	cmp	r0, #0
 800431c:	d1f7      	bne.n	800430e <HAL_UART_IRQHandler+0x29a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431e:	f103 0208 	add.w	r2, r3, #8
 8004322:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004326:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432a:	f103 0508 	add.w	r5, r3, #8
 800432e:	e845 2000 	strex	r0, r2, [r5]
 8004332:	2800      	cmp	r0, #0
 8004334:	d1f3      	bne.n	800431e <HAL_UART_IRQHandler+0x2aa>
        huart->RxState = HAL_UART_STATE_READY;
 8004336:	2220      	movs	r2, #32
 8004338:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
        huart->RxISR = NULL;
 800433c:	66a0      	str	r0, [r4, #104]	@ 0x68
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800433e:	6620      	str	r0, [r4, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004344:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004348:	e843 2000 	strex	r0, r2, [r3]
 800434c:	2800      	cmp	r0, #0
 800434e:	d1f7      	bne.n	8004340 <HAL_UART_IRQHandler+0x2cc>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004350:	2302      	movs	r3, #2
 8004352:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004354:	4620      	mov	r0, r4
 8004356:	f7ff fe8b 	bl	8004070 <HAL_UARTEx_RxEventCallback>
}
 800435a:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435c:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004360:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004364:	e843 2100 	strex	r1, r2, [r3]
 8004368:	2900      	cmp	r1, #0
 800436a:	d1f7      	bne.n	800435c <HAL_UART_IRQHandler+0x2e8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436c:	f103 0208 	add.w	r2, r3, #8
 8004370:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004374:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004378:	f103 0508 	add.w	r5, r3, #8
 800437c:	e845 2100 	strex	r1, r2, [r5]
 8004380:	2900      	cmp	r1, #0
 8004382:	d1f3      	bne.n	800436c <HAL_UART_IRQHandler+0x2f8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004384:	f103 0208 	add.w	r2, r3, #8
 8004388:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800438c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004390:	f103 0508 	add.w	r5, r3, #8
 8004394:	e845 2100 	strex	r1, r2, [r5]
 8004398:	2900      	cmp	r1, #0
 800439a:	d1f3      	bne.n	8004384 <HAL_UART_IRQHandler+0x310>
          huart->RxState = HAL_UART_STATE_READY;
 800439c:	2220      	movs	r2, #32
 800439e:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a2:	6621      	str	r1, [r4, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a4:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043a8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ac:	e843 2100 	strex	r1, r2, [r3]
 80043b0:	2900      	cmp	r1, #0
 80043b2:	d1f7      	bne.n	80043a4 <HAL_UART_IRQHandler+0x330>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043b4:	f7fd ff7e 	bl	80022b4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043b8:	f8b4 2058 	ldrh.w	r2, [r4, #88]	@ 0x58
 80043bc:	e6ae      	b.n	800411c <HAL_UART_IRQHandler+0xa8>
        HAL_UART_ErrorCallback(huart);
 80043be:	4620      	mov	r0, r4
 80043c0:	f7ff fe4a 	bl	8004058 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c4:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
}
 80043c8:	bd70      	pop	{r4, r5, r6, pc}
        if (nb_remaining_rx_data == huart->RxXferSize)
 80043ca:	4291      	cmp	r1, r2
 80043cc:	f47f ae70 	bne.w	80040b0 <HAL_UART_IRQHandler+0x3c>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80043d0:	682b      	ldr	r3, [r5, #0]
 80043d2:	069b      	lsls	r3, r3, #26
 80043d4:	d4bc      	bmi.n	8004350 <HAL_UART_IRQHandler+0x2dc>
}
 80043d6:	bd70      	pop	{r4, r5, r6, pc}
 80043d8:	04000120 	.word	0x04000120
 80043dc:	0800405d 	.word	0x0800405d

080043e0 <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 80043e0:	b510      	push	{r4, lr}
 80043e2:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e4:	e853 2f00 	ldrex	r2, [r3]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043e8:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ec:	e843 2100 	strex	r1, r2, [r3]
 80043f0:	2900      	cmp	r1, #0
 80043f2:	d1f7      	bne.n	80043e4 <UART_RxISR_16BIT.part.0+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f4:	f103 0208 	add.w	r2, r3, #8
 80043f8:	e852 2f00 	ldrex	r2, [r2]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043fc:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004400:	f103 0408 	add.w	r4, r3, #8
 8004404:	e844 2100 	strex	r1, r2, [r4]
 8004408:	2900      	cmp	r1, #0
 800440a:	d1f3      	bne.n	80043f4 <UART_RxISR_16BIT.part.0+0x14>
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800440c:	4a1a      	ldr	r2, [pc, #104]	@ (8004478 <UART_RxISR_16BIT.part.0+0x98>)
      huart->RxISR = NULL;
 800440e:	6681      	str	r1, [r0, #104]	@ 0x68
      huart->RxState = HAL_UART_STATE_READY;
 8004410:	2420      	movs	r4, #32
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004412:	4293      	cmp	r3, r2
      huart->RxState = HAL_UART_STATE_READY;
 8004414:	f8c0 4080 	str.w	r4, [r0, #128]	@ 0x80
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004418:	6641      	str	r1, [r0, #100]	@ 0x64
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800441a:	d002      	beq.n	8004422 <UART_RxISR_16BIT.part.0+0x42>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	0211      	lsls	r1, r2, #8
 8004420:	d416      	bmi.n	8004450 <UART_RxISR_16BIT.part.0+0x70>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004422:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8004424:	2a01      	cmp	r2, #1
 8004426:	d124      	bne.n	8004472 <UART_RxISR_16BIT.part.0+0x92>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004428:	2200      	movs	r2, #0
 800442a:	6602      	str	r2, [r0, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442c:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004430:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004434:	e843 2100 	strex	r1, r2, [r3]
 8004438:	2900      	cmp	r1, #0
 800443a:	d1f7      	bne.n	800442c <UART_RxISR_16BIT.part.0+0x4c>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800443c:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800443e:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004442:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004444:	bf44      	itt	mi
 8004446:	2210      	movmi	r2, #16
 8004448:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800444a:	f7ff fe11 	bl	8004070 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800444e:	bd10      	pop	{r4, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004450:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004454:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004458:	e843 2100 	strex	r1, r2, [r3]
 800445c:	2900      	cmp	r1, #0
 800445e:	d0e0      	beq.n	8004422 <UART_RxISR_16BIT.part.0+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004460:	e853 2f00 	ldrex	r2, [r3]
 8004464:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004468:	e843 2100 	strex	r1, r2, [r3]
 800446c:	2900      	cmp	r1, #0
 800446e:	d1ef      	bne.n	8004450 <UART_RxISR_16BIT.part.0+0x70>
 8004470:	e7d7      	b.n	8004422 <UART_RxISR_16BIT.part.0+0x42>
        HAL_UART_RxCpltCallback(huart);
 8004472:	f7fc f92b 	bl	80006cc <HAL_UART_RxCpltCallback>
}
 8004476:	bd10      	pop	{r4, pc}
 8004478:	40008000 	.word	0x40008000

0800447c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800447c:	b410      	push	{r4}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800447e:	f8d0 4080 	ldr.w	r4, [r0, #128]	@ 0x80
  uint16_t uhMask = huart->Mask;
 8004482:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004486:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004488:	2c22      	cmp	r4, #34	@ 0x22
 800448a:	d007      	beq.n	800449c <UART_RxISR_16BIT+0x20>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800448c:	8b13      	ldrh	r3, [r2, #24]
 800448e:	b29b      	uxth	r3, r3
 8004490:	f043 0308 	orr.w	r3, r3, #8
 8004494:	8313      	strh	r3, [r2, #24]
  }
}
 8004496:	f85d 4b04 	ldr.w	r4, [sp], #4
 800449a:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800449c:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 800449e:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 80044a0:	4011      	ands	r1, r2
 80044a2:	f824 1b02 	strh.w	r1, [r4], #2
    huart->RxXferCount--;
 80044a6:	f8b0 205a 	ldrh.w	r2, [r0, #90]	@ 0x5a
    huart->pRxBuffPtr += 2U;
 80044aa:	6544      	str	r4, [r0, #84]	@ 0x54
    huart->RxXferCount--;
 80044ac:	3a01      	subs	r2, #1
 80044ae:	b292      	uxth	r2, r2
 80044b0:	f8a0 205a 	strh.w	r2, [r0, #90]	@ 0x5a
    if (huart->RxXferCount == 0U)
 80044b4:	f8b0 305a 	ldrh.w	r3, [r0, #90]	@ 0x5a
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1eb      	bne.n	8004496 <UART_RxISR_16BIT+0x1a>
}
 80044be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044c2:	f7ff bf8d 	b.w	80043e0 <UART_RxISR_16BIT.part.0>
 80044c6:	bf00      	nop

080044c8 <UART_RxISR_8BIT>:
{
 80044c8:	b410      	push	{r4}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044ca:	f8d0 4080 	ldr.w	r4, [r0, #128]	@ 0x80
  uint16_t uhMask = huart->Mask;
 80044ce:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80044d2:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044d4:	2c22      	cmp	r4, #34	@ 0x22
 80044d6:	d007      	beq.n	80044e8 <UART_RxISR_8BIT+0x20>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044d8:	8b13      	ldrh	r3, [r2, #24]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	f043 0308 	orr.w	r3, r3, #8
 80044e0:	8313      	strh	r3, [r2, #24]
}
 80044e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044e6:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80044e8:	8c94      	ldrh	r4, [r2, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80044ea:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 80044ec:	4021      	ands	r1, r4
 80044ee:	7011      	strb	r1, [r2, #0]
    huart->RxXferCount--;
 80044f0:	f8b0 205a 	ldrh.w	r2, [r0, #90]	@ 0x5a
    huart->pRxBuffPtr++;
 80044f4:	6d41      	ldr	r1, [r0, #84]	@ 0x54
    huart->RxXferCount--;
 80044f6:	3a01      	subs	r2, #1
 80044f8:	b292      	uxth	r2, r2
 80044fa:	f8a0 205a 	strh.w	r2, [r0, #90]	@ 0x5a
    if (huart->RxXferCount == 0U)
 80044fe:	f8b0 205a 	ldrh.w	r2, [r0, #90]	@ 0x5a
    huart->pRxBuffPtr++;
 8004502:	3101      	adds	r1, #1
    if (huart->RxXferCount == 0U)
 8004504:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 8004506:	6541      	str	r1, [r0, #84]	@ 0x54
    if (huart->RxXferCount == 0U)
 8004508:	2a00      	cmp	r2, #0
 800450a:	d1ea      	bne.n	80044e2 <UART_RxISR_8BIT+0x1a>
}
 800450c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004510:	f7ff bf66 	b.w	80043e0 <UART_RxISR_16BIT.part.0>

08004514 <UART_SetConfig>:
{
 8004514:	b538      	push	{r3, r4, r5, lr}
 8004516:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8004518:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800451a:	6882      	ldr	r2, [r0, #8]
 800451c:	6900      	ldr	r0, [r0, #16]
 800451e:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004520:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004522:	4302      	orrs	r2, r0
 8004524:	430a      	orrs	r2, r1
 8004526:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004528:	4981      	ldr	r1, [pc, #516]	@ (8004730 <UART_SetConfig+0x21c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800452a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800452c:	4029      	ands	r1, r5
 800452e:	430a      	orrs	r2, r1
 8004530:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	68e1      	ldr	r1, [r4, #12]
 8004536:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800453a:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800453c:	497d      	ldr	r1, [pc, #500]	@ (8004734 <UART_SetConfig+0x220>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800453e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004540:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004542:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004544:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004546:	d03f      	beq.n	80045c8 <UART_SetConfig+0xb4>
    tmpreg |= huart->Init.OneBitSampling;
 8004548:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800454a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 800454e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004550:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004552:	4979      	ldr	r1, [pc, #484]	@ (8004738 <UART_SetConfig+0x224>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004554:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004556:	428b      	cmp	r3, r1
 8004558:	d115      	bne.n	8004586 <UART_SetConfig+0x72>
 800455a:	4b78      	ldr	r3, [pc, #480]	@ (800473c <UART_SetConfig+0x228>)
 800455c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004560:	f003 0303 	and.w	r3, r3, #3
 8004564:	2b02      	cmp	r3, #2
 8004566:	f000 808d 	beq.w	8004684 <UART_SetConfig+0x170>
 800456a:	2b03      	cmp	r3, #3
 800456c:	d077      	beq.n	800465e <UART_SetConfig+0x14a>
 800456e:	2b01      	cmp	r3, #1
 8004570:	d06d      	beq.n	800464e <UART_SetConfig+0x13a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004572:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004576:	f000 80cf 	beq.w	8004718 <UART_SetConfig+0x204>
        pclk = HAL_RCC_GetPCLK2Freq();
 800457a:	f7ff f92b 	bl	80037d4 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800457e:	2800      	cmp	r0, #0
 8004580:	d172      	bne.n	8004668 <UART_SetConfig+0x154>
        pclk = (uint32_t) HSI_VALUE;
 8004582:	2000      	movs	r0, #0
 8004584:	e01c      	b.n	80045c0 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004586:	4a6e      	ldr	r2, [pc, #440]	@ (8004740 <UART_SetConfig+0x22c>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d10f      	bne.n	80045ac <UART_SetConfig+0x98>
 800458c:	4b6b      	ldr	r3, [pc, #428]	@ (800473c <UART_SetConfig+0x228>)
 800458e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004592:	f003 030c 	and.w	r3, r3, #12
 8004596:	2b0c      	cmp	r3, #12
 8004598:	d811      	bhi.n	80045be <UART_SetConfig+0xaa>
 800459a:	e8df f003 	tbb	[pc, r3]
 800459e:	1082      	.short	0x1082
 80045a0:	10581010 	.word	0x10581010
 80045a4:	10731010 	.word	0x10731010
 80045a8:	1010      	.short	0x1010
 80045aa:	60          	.byte	0x60
 80045ab:	00          	.byte	0x00
 80045ac:	4a65      	ldr	r2, [pc, #404]	@ (8004744 <UART_SetConfig+0x230>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d07d      	beq.n	80046ae <UART_SetConfig+0x19a>
 80045b2:	4a65      	ldr	r2, [pc, #404]	@ (8004748 <UART_SetConfig+0x234>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d03f      	beq.n	8004638 <UART_SetConfig+0x124>
 80045b8:	4a64      	ldr	r2, [pc, #400]	@ (800474c <UART_SetConfig+0x238>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d067      	beq.n	800468e <UART_SetConfig+0x17a>
        ret = HAL_ERROR;
 80045be:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 80045c6:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045c8:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045cc:	485b      	ldr	r0, [pc, #364]	@ (800473c <UART_SetConfig+0x228>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045ce:	430a      	orrs	r2, r1
 80045d0:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045d2:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80045d6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80045da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045de:	d07e      	beq.n	80046de <UART_SetConfig+0x1ca>
 80045e0:	d807      	bhi.n	80045f2 <UART_SetConfig+0xde>
 80045e2:	b323      	cbz	r3, 800462e <UART_SetConfig+0x11a>
 80045e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045e8:	d1e9      	bne.n	80045be <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetSysClockFreq();
 80045ea:	f7fe fcf1 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80045ee:	b928      	cbnz	r0, 80045fc <UART_SetConfig+0xe8>
 80045f0:	e7c7      	b.n	8004582 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045f6:	d1e2      	bne.n	80045be <UART_SetConfig+0xaa>
        pclk = (uint32_t) LSE_VALUE;
 80045f8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045fc:	6862      	ldr	r2, [r4, #4]
 80045fe:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8004602:	4283      	cmp	r3, r0
 8004604:	d8db      	bhi.n	80045be <UART_SetConfig+0xaa>
 8004606:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800460a:	d8d8      	bhi.n	80045be <UART_SetConfig+0xaa>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800460c:	0851      	lsrs	r1, r2, #1
 800460e:	2300      	movs	r3, #0
 8004610:	468c      	mov	ip, r1
 8004612:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8004616:	4619      	mov	r1, r3
 8004618:	fbe0 c105 	umlal	ip, r1, r0, r5
 800461c:	4660      	mov	r0, ip
 800461e:	f7fb fe2f 	bl	8000280 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004622:	4b4b      	ldr	r3, [pc, #300]	@ (8004750 <UART_SetConfig+0x23c>)
 8004624:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8004628:	429a      	cmp	r2, r3
 800462a:	d8c8      	bhi.n	80045be <UART_SetConfig+0xaa>
 800462c:	e027      	b.n	800467e <UART_SetConfig+0x16a>
        pclk = HAL_RCC_GetPCLK1Freq();
 800462e:	f7ff f8bf 	bl	80037b0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004632:	2800      	cmp	r0, #0
 8004634:	d1e2      	bne.n	80045fc <UART_SetConfig+0xe8>
 8004636:	e7a4      	b.n	8004582 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004638:	4b40      	ldr	r3, [pc, #256]	@ (800473c <UART_SetConfig+0x228>)
 800463a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800463e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004642:	2b80      	cmp	r3, #128	@ 0x80
 8004644:	d01e      	beq.n	8004684 <UART_SetConfig+0x170>
 8004646:	d83f      	bhi.n	80046c8 <UART_SetConfig+0x1b4>
 8004648:	b35b      	cbz	r3, 80046a2 <UART_SetConfig+0x18e>
 800464a:	2b40      	cmp	r3, #64	@ 0x40
 800464c:	d1b7      	bne.n	80045be <UART_SetConfig+0xaa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800464e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004652:	d069      	beq.n	8004728 <UART_SetConfig+0x214>
        pclk = HAL_RCC_GetSysClockFreq();
 8004654:	f7fe fcbc 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
        break;
 8004658:	e791      	b.n	800457e <UART_SetConfig+0x6a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800465a:	2b30      	cmp	r3, #48	@ 0x30
 800465c:	d1af      	bne.n	80045be <UART_SetConfig+0xaa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800465e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004662:	d05e      	beq.n	8004722 <UART_SetConfig+0x20e>
        pclk = (uint32_t) LSE_VALUE;
 8004664:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004668:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800466a:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800466e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004672:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004676:	f1a0 0310 	sub.w	r3, r0, #16
 800467a:	4293      	cmp	r3, r2
 800467c:	d89f      	bhi.n	80045be <UART_SetConfig+0xaa>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	60d8      	str	r0, [r3, #12]
 8004682:	e77e      	b.n	8004582 <UART_SetConfig+0x6e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004684:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004688:	d049      	beq.n	800471e <UART_SetConfig+0x20a>
        pclk = (uint32_t) HSI_VALUE;
 800468a:	4832      	ldr	r0, [pc, #200]	@ (8004754 <UART_SetConfig+0x240>)
 800468c:	e7ec      	b.n	8004668 <UART_SetConfig+0x154>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800468e:	4b2b      	ldr	r3, [pc, #172]	@ (800473c <UART_SetConfig+0x228>)
 8004690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004694:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004698:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800469c:	d0f2      	beq.n	8004684 <UART_SetConfig+0x170>
 800469e:	d81a      	bhi.n	80046d6 <UART_SetConfig+0x1c2>
 80046a0:	b9ab      	cbnz	r3, 80046ce <UART_SetConfig+0x1ba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046a2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80046a6:	d01c      	beq.n	80046e2 <UART_SetConfig+0x1ce>
        pclk = HAL_RCC_GetPCLK1Freq();
 80046a8:	f7ff f882 	bl	80037b0 <HAL_RCC_GetPCLK1Freq>
        break;
 80046ac:	e767      	b.n	800457e <UART_SetConfig+0x6a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046ae:	4b23      	ldr	r3, [pc, #140]	@ (800473c <UART_SetConfig+0x228>)
 80046b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80046b8:	2b20      	cmp	r3, #32
 80046ba:	d0e3      	beq.n	8004684 <UART_SetConfig+0x170>
 80046bc:	d8cd      	bhi.n	800465a <UART_SetConfig+0x146>
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0ef      	beq.n	80046a2 <UART_SetConfig+0x18e>
 80046c2:	2b10      	cmp	r3, #16
 80046c4:	d0c3      	beq.n	800464e <UART_SetConfig+0x13a>
 80046c6:	e77a      	b.n	80045be <UART_SetConfig+0xaa>
 80046c8:	2bc0      	cmp	r3, #192	@ 0xc0
 80046ca:	d0c8      	beq.n	800465e <UART_SetConfig+0x14a>
 80046cc:	e777      	b.n	80045be <UART_SetConfig+0xaa>
 80046ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046d2:	d0bc      	beq.n	800464e <UART_SetConfig+0x13a>
 80046d4:	e773      	b.n	80045be <UART_SetConfig+0xaa>
 80046d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046da:	d0c0      	beq.n	800465e <UART_SetConfig+0x14a>
 80046dc:	e76f      	b.n	80045be <UART_SetConfig+0xaa>
        pclk = (uint32_t) HSI_VALUE;
 80046de:	481d      	ldr	r0, [pc, #116]	@ (8004754 <UART_SetConfig+0x240>)
 80046e0:	e78c      	b.n	80045fc <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetPCLK1Freq();
 80046e2:	f7ff f865 	bl	80037b0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80046e6:	2800      	cmp	r0, #0
 80046e8:	f43f af4b 	beq.w	8004582 <UART_SetConfig+0x6e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046ec:	0040      	lsls	r0, r0, #1
 80046ee:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046f0:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046f4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80046f8:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046fc:	f1a3 0110 	sub.w	r1, r3, #16
 8004700:	4291      	cmp	r1, r2
 8004702:	f63f af5c 	bhi.w	80045be <UART_SetConfig+0xaa>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004706:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 800470a:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800470c:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800470e:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8004712:	4313      	orrs	r3, r2
 8004714:	60cb      	str	r3, [r1, #12]
 8004716:	e734      	b.n	8004582 <UART_SetConfig+0x6e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004718:	f7ff f85c 	bl	80037d4 <HAL_RCC_GetPCLK2Freq>
        break;
 800471c:	e7e3      	b.n	80046e6 <UART_SetConfig+0x1d2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800471e:	480e      	ldr	r0, [pc, #56]	@ (8004758 <UART_SetConfig+0x244>)
 8004720:	e7e5      	b.n	80046ee <UART_SetConfig+0x1da>
 8004722:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8004726:	e7e2      	b.n	80046ee <UART_SetConfig+0x1da>
        pclk = HAL_RCC_GetSysClockFreq();
 8004728:	f7fe fc52 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
        break;
 800472c:	e7db      	b.n	80046e6 <UART_SetConfig+0x1d2>
 800472e:	bf00      	nop
 8004730:	efff69f3 	.word	0xefff69f3
 8004734:	40008000 	.word	0x40008000
 8004738:	40013800 	.word	0x40013800
 800473c:	40021000 	.word	0x40021000
 8004740:	40004400 	.word	0x40004400
 8004744:	40004800 	.word	0x40004800
 8004748:	40004c00 	.word	0x40004c00
 800474c:	40005000 	.word	0x40005000
 8004750:	000ffcff 	.word	0x000ffcff
 8004754:	00f42400 	.word	0x00f42400
 8004758:	01e84800 	.word	0x01e84800

0800475c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800475c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800475e:	071a      	lsls	r2, r3, #28
{
 8004760:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004762:	d506      	bpl.n	8004772 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004764:	6801      	ldr	r1, [r0, #0]
 8004766:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8004768:	684a      	ldr	r2, [r1, #4]
 800476a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800476e:	4322      	orrs	r2, r4
 8004770:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004772:	07dc      	lsls	r4, r3, #31
 8004774:	d506      	bpl.n	8004784 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004776:	6801      	ldr	r1, [r0, #0]
 8004778:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800477a:	684a      	ldr	r2, [r1, #4]
 800477c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004780:	4322      	orrs	r2, r4
 8004782:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004784:	0799      	lsls	r1, r3, #30
 8004786:	d506      	bpl.n	8004796 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004788:	6801      	ldr	r1, [r0, #0]
 800478a:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800478c:	684a      	ldr	r2, [r1, #4]
 800478e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004792:	4322      	orrs	r2, r4
 8004794:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004796:	075a      	lsls	r2, r3, #29
 8004798:	d506      	bpl.n	80047a8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800479a:	6801      	ldr	r1, [r0, #0]
 800479c:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800479e:	684a      	ldr	r2, [r1, #4]
 80047a0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80047a4:	4322      	orrs	r2, r4
 80047a6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047a8:	06dc      	lsls	r4, r3, #27
 80047aa:	d506      	bpl.n	80047ba <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047ac:	6801      	ldr	r1, [r0, #0]
 80047ae:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80047b0:	688a      	ldr	r2, [r1, #8]
 80047b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80047b6:	4322      	orrs	r2, r4
 80047b8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047ba:	0699      	lsls	r1, r3, #26
 80047bc:	d506      	bpl.n	80047cc <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047be:	6801      	ldr	r1, [r0, #0]
 80047c0:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80047c2:	688a      	ldr	r2, [r1, #8]
 80047c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047c8:	4322      	orrs	r2, r4
 80047ca:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047cc:	065a      	lsls	r2, r3, #25
 80047ce:	d509      	bpl.n	80047e4 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047d0:	6801      	ldr	r1, [r0, #0]
 80047d2:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80047d4:	684a      	ldr	r2, [r1, #4]
 80047d6:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80047da:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047dc:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047e0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047e2:	d00b      	beq.n	80047fc <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047e4:	061b      	lsls	r3, r3, #24
 80047e6:	d506      	bpl.n	80047f6 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047e8:	6802      	ldr	r2, [r0, #0]
 80047ea:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80047ec:	6853      	ldr	r3, [r2, #4]
 80047ee:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80047f2:	430b      	orrs	r3, r1
 80047f4:	6053      	str	r3, [r2, #4]
}
 80047f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047fa:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047fc:	684a      	ldr	r2, [r1, #4]
 80047fe:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8004800:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8004804:	4322      	orrs	r2, r4
 8004806:	604a      	str	r2, [r1, #4]
 8004808:	e7ec      	b.n	80047e4 <UART_AdvFeatureConfig+0x88>
 800480a:	bf00      	nop

0800480c <UART_CheckIdleState>:
{
 800480c:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800480e:	2300      	movs	r3, #0
{
 8004810:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004812:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8004816:	f7fc fea9 	bl	800156c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800481a:	6822      	ldr	r2, [r4, #0]
 800481c:	6813      	ldr	r3, [r2, #0]
 800481e:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 8004820:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004822:	d40e      	bmi.n	8004842 <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004824:	6813      	ldr	r3, [r2, #0]
 8004826:	0759      	lsls	r1, r3, #29
 8004828:	d42f      	bmi.n	800488a <UART_CheckIdleState+0x7e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800482a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800482c:	2220      	movs	r2, #32
 800482e:	67e2      	str	r2, [r4, #124]	@ 0x7c
  return HAL_OK;
 8004830:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8004832:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004836:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004838:	6663      	str	r3, [r4, #100]	@ 0x64
      __HAL_UNLOCK(huart);
 800483a:	2300      	movs	r3, #0
 800483c:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 8004840:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004842:	69d3      	ldr	r3, [r2, #28]
 8004844:	0298      	lsls	r0, r3, #10
 8004846:	d4ed      	bmi.n	8004824 <UART_CheckIdleState+0x18>
 8004848:	e00c      	b.n	8004864 <UART_CheckIdleState+0x58>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800484a:	6819      	ldr	r1, [r3, #0]
 800484c:	0749      	lsls	r1, r1, #29
 800484e:	461a      	mov	r2, r3
 8004850:	d505      	bpl.n	800485e <UART_CheckIdleState+0x52>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004852:	69d9      	ldr	r1, [r3, #28]
 8004854:	0708      	lsls	r0, r1, #28
 8004856:	d449      	bmi.n	80048ec <UART_CheckIdleState+0xe0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004858:	69d9      	ldr	r1, [r3, #28]
 800485a:	0509      	lsls	r1, r1, #20
 800485c:	d474      	bmi.n	8004948 <UART_CheckIdleState+0x13c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	0298      	lsls	r0, r3, #10
 8004862:	d4df      	bmi.n	8004824 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004864:	f7fc fe82 	bl	800156c <HAL_GetTick>
 8004868:	1b43      	subs	r3, r0, r5
 800486a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800486e:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004870:	d3eb      	bcc.n	800484a <UART_CheckIdleState+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004872:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004876:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487a:	e843 2100 	strex	r1, r2, [r3]
 800487e:	2900      	cmp	r1, #0
 8004880:	d1f7      	bne.n	8004872 <UART_CheckIdleState+0x66>
      huart->gState = HAL_UART_STATE_READY;
 8004882:	2320      	movs	r3, #32
 8004884:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8004886:	2003      	movs	r0, #3
 8004888:	e7d7      	b.n	800483a <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800488a:	69d3      	ldr	r3, [r2, #28]
 800488c:	025b      	lsls	r3, r3, #9
 800488e:	d4cc      	bmi.n	800482a <UART_CheckIdleState+0x1e>
 8004890:	e00d      	b.n	80048ae <UART_CheckIdleState+0xa2>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	0750      	lsls	r0, r2, #29
 8004896:	d507      	bpl.n	80048a8 <UART_CheckIdleState+0x9c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004898:	69da      	ldr	r2, [r3, #28]
 800489a:	0711      	lsls	r1, r2, #28
 800489c:	f100 8082 	bmi.w	80049a4 <UART_CheckIdleState+0x198>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048a0:	69da      	ldr	r2, [r3, #28]
 80048a2:	0512      	lsls	r2, r2, #20
 80048a4:	f100 80ac 	bmi.w	8004a00 <UART_CheckIdleState+0x1f4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	025b      	lsls	r3, r3, #9
 80048ac:	d4bd      	bmi.n	800482a <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ae:	f7fc fe5d 	bl	800156c <HAL_GetTick>
 80048b2:	1b43      	subs	r3, r0, r5
 80048b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048b8:	6823      	ldr	r3, [r4, #0]
 80048ba:	d3ea      	bcc.n	8004892 <UART_CheckIdleState+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048bc:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048c0:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c4:	e843 2100 	strex	r1, r2, [r3]
 80048c8:	2900      	cmp	r1, #0
 80048ca:	d1f7      	bne.n	80048bc <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048cc:	f103 0208 	add.w	r2, r3, #8
 80048d0:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d8:	f103 0008 	add.w	r0, r3, #8
 80048dc:	e840 2100 	strex	r1, r2, [r0]
 80048e0:	2900      	cmp	r1, #0
 80048e2:	d1f3      	bne.n	80048cc <UART_CheckIdleState+0xc0>
      huart->RxState = HAL_UART_STATE_READY;
 80048e4:	2320      	movs	r3, #32
 80048e6:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 80048ea:	e7cc      	b.n	8004886 <UART_CheckIdleState+0x7a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048ec:	2208      	movs	r2, #8
 80048ee:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f0:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048f4:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f8:	e843 2100 	strex	r1, r2, [r3]
 80048fc:	2900      	cmp	r1, #0
 80048fe:	d1f7      	bne.n	80048f0 <UART_CheckIdleState+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004900:	f103 0208 	add.w	r2, r3, #8
 8004904:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004908:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490c:	f103 0008 	add.w	r0, r3, #8
 8004910:	e840 2100 	strex	r1, r2, [r0]
 8004914:	2900      	cmp	r1, #0
 8004916:	d1f3      	bne.n	8004900 <UART_CheckIdleState+0xf4>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004918:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800491a:	2a01      	cmp	r2, #1
 800491c:	d00b      	beq.n	8004936 <UART_CheckIdleState+0x12a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800491e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004920:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004922:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004924:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8004928:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492a:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 800492c:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004930:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_ERROR;
 8004934:	e79d      	b.n	8004872 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004936:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800493a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493e:	e843 2100 	strex	r1, r2, [r3]
 8004942:	2900      	cmp	r1, #0
 8004944:	d1f7      	bne.n	8004936 <UART_CheckIdleState+0x12a>
 8004946:	e7ea      	b.n	800491e <UART_CheckIdleState+0x112>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004948:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800494c:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004952:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004956:	e843 2100 	strex	r1, r2, [r3]
 800495a:	2900      	cmp	r1, #0
 800495c:	d1f7      	bne.n	800494e <UART_CheckIdleState+0x142>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495e:	f103 0208 	add.w	r2, r3, #8
 8004962:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004966:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496a:	f103 0008 	add.w	r0, r3, #8
 800496e:	e840 2100 	strex	r1, r2, [r0]
 8004972:	2900      	cmp	r1, #0
 8004974:	d1f3      	bne.n	800495e <UART_CheckIdleState+0x152>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004976:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004978:	2a01      	cmp	r2, #1
 800497a:	d00a      	beq.n	8004992 <UART_CheckIdleState+0x186>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800497c:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800497e:	2120      	movs	r1, #32
 8004980:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8004984:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004986:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8004988:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800498c:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 8004990:	e76f      	b.n	8004872 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004992:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004996:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499a:	e843 2100 	strex	r1, r2, [r3]
 800499e:	2900      	cmp	r1, #0
 80049a0:	d1f7      	bne.n	8004992 <UART_CheckIdleState+0x186>
 80049a2:	e7eb      	b.n	800497c <UART_CheckIdleState+0x170>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049a4:	2208      	movs	r2, #8
 80049a6:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a8:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ac:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b0:	e843 2100 	strex	r1, r2, [r3]
 80049b4:	2900      	cmp	r1, #0
 80049b6:	d1f7      	bne.n	80049a8 <UART_CheckIdleState+0x19c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b8:	f103 0208 	add.w	r2, r3, #8
 80049bc:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c4:	f103 0008 	add.w	r0, r3, #8
 80049c8:	e840 2100 	strex	r1, r2, [r0]
 80049cc:	2900      	cmp	r1, #0
 80049ce:	d1f3      	bne.n	80049b8 <UART_CheckIdleState+0x1ac>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049d0:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80049d2:	2a01      	cmp	r2, #1
 80049d4:	d00b      	beq.n	80049ee <UART_CheckIdleState+0x1e2>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d6:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80049d8:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049da:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80049dc:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 80049e0:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e2:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 80049e4:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049e8:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_ERROR;
 80049ec:	e766      	b.n	80048bc <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ee:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f6:	e843 2100 	strex	r1, r2, [r3]
 80049fa:	2900      	cmp	r1, #0
 80049fc:	d1f7      	bne.n	80049ee <UART_CheckIdleState+0x1e2>
 80049fe:	e7ea      	b.n	80049d6 <UART_CheckIdleState+0x1ca>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a04:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a06:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a0a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0e:	e843 2100 	strex	r1, r2, [r3]
 8004a12:	2900      	cmp	r1, #0
 8004a14:	d1f7      	bne.n	8004a06 <UART_CheckIdleState+0x1fa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a16:	f103 0208 	add.w	r2, r3, #8
 8004a1a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a1e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a22:	f103 0008 	add.w	r0, r3, #8
 8004a26:	e840 2100 	strex	r1, r2, [r0]
 8004a2a:	2900      	cmp	r1, #0
 8004a2c:	d1f3      	bne.n	8004a16 <UART_CheckIdleState+0x20a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a2e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004a30:	2a01      	cmp	r2, #1
 8004a32:	d00a      	beq.n	8004a4a <UART_CheckIdleState+0x23e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a34:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004a36:	2120      	movs	r1, #32
 8004a38:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8004a3c:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a3e:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8004a40:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a44:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 8004a48:	e738      	b.n	80048bc <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a4e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a52:	e843 2100 	strex	r1, r2, [r3]
 8004a56:	2900      	cmp	r1, #0
 8004a58:	d1f7      	bne.n	8004a4a <UART_CheckIdleState+0x23e>
 8004a5a:	e7eb      	b.n	8004a34 <UART_CheckIdleState+0x228>

08004a5c <HAL_UART_Init>:
  if (huart == NULL)
 8004a5c:	b370      	cbz	r0, 8004abc <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004a5e:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
{
 8004a60:	b510      	push	{r4, lr}
 8004a62:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004a64:	b32b      	cbz	r3, 8004ab2 <HAL_UART_Init+0x56>
  __HAL_UART_DISABLE(huart);
 8004a66:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a68:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  huart->gState = HAL_UART_STATE_BUSY;
 8004a6a:	2324      	movs	r3, #36	@ 0x24
 8004a6c:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8004a6e:	6813      	ldr	r3, [r2, #0]
 8004a70:	f023 0301 	bic.w	r3, r3, #1
 8004a74:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a76:	b9c1      	cbnz	r1, 8004aaa <HAL_UART_Init+0x4e>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f7ff fd4b 	bl	8004514 <UART_SetConfig>
 8004a7e:	2801      	cmp	r0, #1
 8004a80:	d011      	beq.n	8004aa6 <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a8c:	689a      	ldr	r2, [r3, #8]
 8004a8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a92:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8004a9a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8004a9c:	601a      	str	r2, [r3, #0]
}
 8004a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8004aa2:	f7ff beb3 	b.w	800480c <UART_CheckIdleState>
}
 8004aa6:	2001      	movs	r0, #1
 8004aa8:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8004aaa:	4620      	mov	r0, r4
 8004aac:	f7ff fe56 	bl	800475c <UART_AdvFeatureConfig>
 8004ab0:	e7e2      	b.n	8004a78 <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 8004ab2:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8004ab6:	f7fc fc07 	bl	80012c8 <HAL_UART_MspInit>
 8004aba:	e7d4      	b.n	8004a66 <HAL_UART_Init+0xa>
}
 8004abc:	2001      	movs	r0, #1
 8004abe:	4770      	bx	lr

08004ac0 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop

08004ac4 <ssd1306_Fill>:
    SSD1306.Initialized = 1;
}

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004aca:	4803      	ldr	r0, [pc, #12]	@ (8004ad8 <ssd1306_Fill+0x14>)
 8004acc:	bf14      	ite	ne
 8004ace:	21ff      	movne	r1, #255	@ 0xff
 8004ad0:	2100      	moveq	r1, #0
 8004ad2:	f000 bda7 	b.w	8005624 <memset>
 8004ad6:	bf00      	nop
 8004ad8:	200002b0 	.word	0x200002b0

08004adc <ssd1306_UpdateScreen>:
}

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8004adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae0:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8004b70 <ssd1306_UpdateScreen+0x94>
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004ae4:	4f21      	ldr	r7, [pc, #132]	@ (8004b6c <ssd1306_UpdateScreen+0x90>)
void ssd1306_UpdateScreen(void) {
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	25b0      	movs	r5, #176	@ 0xb0
 8004aea:	f10d 0817 	add.w	r8, sp, #23
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004aee:	f04f 0a00 	mov.w	sl, #0
 8004af2:	2401      	movs	r4, #1
 8004af4:	f04f 36ff 	mov.w	r6, #4294967295
 8004af8:	4623      	mov	r3, r4
 8004afa:	2200      	movs	r2, #0
 8004afc:	2178      	movs	r1, #120	@ 0x78
 8004afe:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004b02:	f8cd 8000 	str.w	r8, [sp]
 8004b06:	4638      	mov	r0, r7
 8004b08:	f88d 5017 	strb.w	r5, [sp, #23]
 8004b0c:	f7fe f880 	bl	8002c10 <HAL_I2C_Mem_Write>
 8004b10:	4623      	mov	r3, r4
 8004b12:	2200      	movs	r2, #0
 8004b14:	2178      	movs	r1, #120	@ 0x78
 8004b16:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004b1a:	f8cd 8000 	str.w	r8, [sp]
 8004b1e:	4638      	mov	r0, r7
 8004b20:	f88d a017 	strb.w	sl, [sp, #23]
 8004b24:	f7fe f874 	bl	8002c10 <HAL_I2C_Mem_Write>
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8004b28:	f04f 0c10 	mov.w	ip, #16
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004b2c:	4623      	mov	r3, r4
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2178      	movs	r1, #120	@ 0x78
 8004b32:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004b36:	f8cd 8000 	str.w	r8, [sp]
 8004b3a:	4638      	mov	r0, r7
 8004b3c:	f88d c017 	strb.w	ip, [sp, #23]
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004b40:	4425      	add	r5, r4
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004b42:	f7fe f865 	bl	8002c10 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8004b46:	2380      	movs	r3, #128	@ 0x80
 8004b48:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8004b4c:	f8cd 9000 	str.w	r9, [sp]
 8004b50:	4623      	mov	r3, r4
 8004b52:	2240      	movs	r2, #64	@ 0x40
 8004b54:	2178      	movs	r1, #120	@ 0x78
 8004b56:	4638      	mov	r0, r7
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004b58:	b2ed      	uxtb	r5, r5
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8004b5a:	f7fe f859 	bl	8002c10 <HAL_I2C_Mem_Write>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004b5e:	2db8      	cmp	r5, #184	@ 0xb8
 8004b60:	f109 0980 	add.w	r9, r9, #128	@ 0x80
 8004b64:	d1c5      	bne.n	8004af2 <ssd1306_UpdateScreen+0x16>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
    }
}
 8004b66:	b006      	add	sp, #24
 8004b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b6c:	20000180 	.word	0x20000180
 8004b70:	200002b0 	.word	0x200002b0

08004b74 <ssd1306_Init>:
void ssd1306_Init(void) {
 8004b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    HAL_Delay(100);
 8004b78:	2064      	movs	r0, #100	@ 0x64
void ssd1306_Init(void) {
 8004b7a:	b086      	sub	sp, #24
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004b7c:	4fc2      	ldr	r7, [pc, #776]	@ (8004e88 <ssd1306_Init+0x314>)
    if (on) {
        value = 0xAF;   // Display on
        SSD1306.DisplayOn = 1;
    } else {
        value = 0xAE;   // Display off
        SSD1306.DisplayOn = 0;
 8004b7e:	f8df 9310 	ldr.w	r9, [pc, #784]	@ 8004e90 <ssd1306_Init+0x31c>
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004b82:	2401      	movs	r4, #1
        SSD1306.DisplayOn = 0;
 8004b84:	2500      	movs	r5, #0
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004b86:	f04f 36ff 	mov.w	r6, #4294967295
 8004b8a:	f10d 0817 	add.w	r8, sp, #23
    HAL_Delay(100);
 8004b8e:	f7fc fcf3 	bl	8001578 <HAL_Delay>
        SSD1306.DisplayOn = 0;
 8004b92:	20ae      	movs	r0, #174	@ 0xae
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004b94:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004b98:	f8cd 8000 	str.w	r8, [sp]
 8004b9c:	4623      	mov	r3, r4
 8004b9e:	462a      	mov	r2, r5
 8004ba0:	f88d 0017 	strb.w	r0, [sp, #23]
        SSD1306.DisplayOn = 0;
 8004ba4:	f889 5005 	strb.w	r5, [r9, #5]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004ba8:	2178      	movs	r1, #120	@ 0x78
 8004baa:	4638      	mov	r0, r7
 8004bac:	f7fe f830 	bl	8002c10 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004bb0:	f04f 0a20 	mov.w	sl, #32
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004bb4:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004bb8:	4623      	mov	r3, r4
 8004bba:	462a      	mov	r2, r5
 8004bbc:	f8cd 8000 	str.w	r8, [sp]
 8004bc0:	2178      	movs	r1, #120	@ 0x78
 8004bc2:	4638      	mov	r0, r7
 8004bc4:	f88d a017 	strb.w	sl, [sp, #23]
 8004bc8:	f7fe f822 	bl	8002c10 <HAL_I2C_Mem_Write>
 8004bcc:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004bd0:	4623      	mov	r3, r4
 8004bd2:	462a      	mov	r2, r5
 8004bd4:	f8cd 8000 	str.w	r8, [sp]
 8004bd8:	2178      	movs	r1, #120	@ 0x78
 8004bda:	4638      	mov	r0, r7
 8004bdc:	f88d 5017 	strb.w	r5, [sp, #23]
 8004be0:	f7fe f816 	bl	8002c10 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004be4:	20b0      	movs	r0, #176	@ 0xb0
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004be6:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004bea:	4623      	mov	r3, r4
 8004bec:	462a      	mov	r2, r5
 8004bee:	f88d 0017 	strb.w	r0, [sp, #23]
 8004bf2:	f8cd 8000 	str.w	r8, [sp]
 8004bf6:	2178      	movs	r1, #120	@ 0x78
 8004bf8:	4638      	mov	r0, r7
 8004bfa:	f7fe f809 	bl	8002c10 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8004bfe:	20c8      	movs	r0, #200	@ 0xc8
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004c00:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004c04:	4623      	mov	r3, r4
 8004c06:	462a      	mov	r2, r5
 8004c08:	f88d 0017 	strb.w	r0, [sp, #23]
 8004c0c:	f8cd 8000 	str.w	r8, [sp]
 8004c10:	2178      	movs	r1, #120	@ 0x78
 8004c12:	4638      	mov	r0, r7
 8004c14:	f7fd fffc 	bl	8002c10 <HAL_I2C_Mem_Write>
 8004c18:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004c1c:	4623      	mov	r3, r4
 8004c1e:	462a      	mov	r2, r5
 8004c20:	f8cd 8000 	str.w	r8, [sp]
 8004c24:	2178      	movs	r1, #120	@ 0x78
 8004c26:	4638      	mov	r0, r7
 8004c28:	f88d 5017 	strb.w	r5, [sp, #23]
 8004c2c:	f7fd fff0 	bl	8002c10 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x10); //---set high column address
 8004c30:	2010      	movs	r0, #16
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004c32:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004c36:	4623      	mov	r3, r4
 8004c38:	462a      	mov	r2, r5
 8004c3a:	f88d 0017 	strb.w	r0, [sp, #23]
 8004c3e:	f8cd 8000 	str.w	r8, [sp]
 8004c42:	2178      	movs	r1, #120	@ 0x78
 8004c44:	4638      	mov	r0, r7
 8004c46:	f7fd ffe3 	bl	8002c10 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8004c4a:	2040      	movs	r0, #64	@ 0x40
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004c4c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004c50:	4623      	mov	r3, r4
 8004c52:	462a      	mov	r2, r5
 8004c54:	f88d 0017 	strb.w	r0, [sp, #23]
 8004c58:	f8cd 8000 	str.w	r8, [sp]
 8004c5c:	2178      	movs	r1, #120	@ 0x78
 8004c5e:	4638      	mov	r0, r7
 8004c60:	f7fd ffd6 	bl	8002c10 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8004c64:	2081      	movs	r0, #129	@ 0x81
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004c66:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004c6a:	4623      	mov	r3, r4
 8004c6c:	462a      	mov	r2, r5
 8004c6e:	f88d 0017 	strb.w	r0, [sp, #23]
 8004c72:	f8cd 8000 	str.w	r8, [sp]
 8004c76:	2178      	movs	r1, #120	@ 0x78
 8004c78:	4638      	mov	r0, r7
 8004c7a:	f7fd ffc9 	bl	8002c10 <HAL_I2C_Mem_Write>
 8004c7e:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004c82:	4623      	mov	r3, r4
 8004c84:	462a      	mov	r2, r5
 8004c86:	f8cd 8000 	str.w	r8, [sp]
 8004c8a:	2178      	movs	r1, #120	@ 0x78
 8004c8c:	4638      	mov	r0, r7
 8004c8e:	f88d 6017 	strb.w	r6, [sp, #23]
 8004c92:	f7fd ffbd 	bl	8002c10 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8004c96:	20a1      	movs	r0, #161	@ 0xa1
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004c98:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004c9c:	4623      	mov	r3, r4
 8004c9e:	462a      	mov	r2, r5
 8004ca0:	f88d 0017 	strb.w	r0, [sp, #23]
 8004ca4:	f8cd 8000 	str.w	r8, [sp]
 8004ca8:	2178      	movs	r1, #120	@ 0x78
 8004caa:	4638      	mov	r0, r7
 8004cac:	f7fd ffb0 	bl	8002c10 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xA6); //--set normal color
 8004cb0:	20a6      	movs	r0, #166	@ 0xa6
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004cb2:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004cb6:	4623      	mov	r3, r4
 8004cb8:	462a      	mov	r2, r5
 8004cba:	f88d 0017 	strb.w	r0, [sp, #23]
 8004cbe:	f8cd 8000 	str.w	r8, [sp]
 8004cc2:	2178      	movs	r1, #120	@ 0x78
 8004cc4:	4638      	mov	r0, r7
 8004cc6:	f7fd ffa3 	bl	8002c10 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004cca:	20a8      	movs	r0, #168	@ 0xa8
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004ccc:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004cd0:	4623      	mov	r3, r4
 8004cd2:	462a      	mov	r2, r5
 8004cd4:	f88d 0017 	strb.w	r0, [sp, #23]
 8004cd8:	f8cd 8000 	str.w	r8, [sp]
 8004cdc:	2178      	movs	r1, #120	@ 0x78
 8004cde:	4638      	mov	r0, r7
 8004ce0:	f7fd ff96 	bl	8002c10 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x3F); //
 8004ce4:	203f      	movs	r0, #63	@ 0x3f
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004ce6:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004cea:	4623      	mov	r3, r4
 8004cec:	462a      	mov	r2, r5
 8004cee:	f88d 0017 	strb.w	r0, [sp, #23]
 8004cf2:	f8cd 8000 	str.w	r8, [sp]
 8004cf6:	2178      	movs	r1, #120	@ 0x78
 8004cf8:	4638      	mov	r0, r7
 8004cfa:	f7fd ff89 	bl	8002c10 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004cfe:	20a4      	movs	r0, #164	@ 0xa4
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004d00:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004d04:	4623      	mov	r3, r4
 8004d06:	462a      	mov	r2, r5
 8004d08:	f88d 0017 	strb.w	r0, [sp, #23]
 8004d0c:	f8cd 8000 	str.w	r8, [sp]
 8004d10:	2178      	movs	r1, #120	@ 0x78
 8004d12:	4638      	mov	r0, r7
 8004d14:	f7fd ff7c 	bl	8002c10 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8004d18:	20d3      	movs	r0, #211	@ 0xd3
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004d1a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004d1e:	4623      	mov	r3, r4
 8004d20:	462a      	mov	r2, r5
 8004d22:	f88d 0017 	strb.w	r0, [sp, #23]
 8004d26:	f8cd 8000 	str.w	r8, [sp]
 8004d2a:	2178      	movs	r1, #120	@ 0x78
 8004d2c:	4638      	mov	r0, r7
 8004d2e:	f7fd ff6f 	bl	8002c10 <HAL_I2C_Mem_Write>
 8004d32:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004d36:	4623      	mov	r3, r4
 8004d38:	462a      	mov	r2, r5
 8004d3a:	f8cd 8000 	str.w	r8, [sp]
 8004d3e:	2178      	movs	r1, #120	@ 0x78
 8004d40:	4638      	mov	r0, r7
 8004d42:	f88d 5017 	strb.w	r5, [sp, #23]
 8004d46:	f7fd ff63 	bl	8002c10 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004d4a:	20d5      	movs	r0, #213	@ 0xd5
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004d4c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004d50:	4623      	mov	r3, r4
 8004d52:	462a      	mov	r2, r5
 8004d54:	f88d 0017 	strb.w	r0, [sp, #23]
 8004d58:	f8cd 8000 	str.w	r8, [sp]
 8004d5c:	2178      	movs	r1, #120	@ 0x78
 8004d5e:	4638      	mov	r0, r7
 8004d60:	f7fd ff56 	bl	8002c10 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004d64:	20f0      	movs	r0, #240	@ 0xf0
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004d66:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004d6a:	4623      	mov	r3, r4
 8004d6c:	462a      	mov	r2, r5
 8004d6e:	f88d 0017 	strb.w	r0, [sp, #23]
 8004d72:	f8cd 8000 	str.w	r8, [sp]
 8004d76:	2178      	movs	r1, #120	@ 0x78
 8004d78:	4638      	mov	r0, r7
 8004d7a:	f7fd ff49 	bl	8002c10 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8004d7e:	20d9      	movs	r0, #217	@ 0xd9
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004d80:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004d84:	4623      	mov	r3, r4
 8004d86:	462a      	mov	r2, r5
 8004d88:	f88d 0017 	strb.w	r0, [sp, #23]
 8004d8c:	f8cd 8000 	str.w	r8, [sp]
 8004d90:	2178      	movs	r1, #120	@ 0x78
 8004d92:	4638      	mov	r0, r7
 8004d94:	f7fd ff3c 	bl	8002c10 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x22); //
 8004d98:	2022      	movs	r0, #34	@ 0x22
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004d9a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004d9e:	4623      	mov	r3, r4
 8004da0:	462a      	mov	r2, r5
 8004da2:	f88d 0017 	strb.w	r0, [sp, #23]
 8004da6:	f8cd 8000 	str.w	r8, [sp]
 8004daa:	2178      	movs	r1, #120	@ 0x78
 8004dac:	4638      	mov	r0, r7
 8004dae:	f7fd ff2f 	bl	8002c10 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8004db2:	20da      	movs	r0, #218	@ 0xda
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004db4:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004db8:	4623      	mov	r3, r4
 8004dba:	462a      	mov	r2, r5
 8004dbc:	f88d 0017 	strb.w	r0, [sp, #23]
 8004dc0:	f8cd 8000 	str.w	r8, [sp]
 8004dc4:	2178      	movs	r1, #120	@ 0x78
 8004dc6:	4638      	mov	r0, r7
 8004dc8:	f7fd ff22 	bl	8002c10 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x12);
 8004dcc:	2012      	movs	r0, #18
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004dce:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004dd2:	4623      	mov	r3, r4
 8004dd4:	462a      	mov	r2, r5
 8004dd6:	f88d 0017 	strb.w	r0, [sp, #23]
 8004dda:	f8cd 8000 	str.w	r8, [sp]
 8004dde:	2178      	movs	r1, #120	@ 0x78
 8004de0:	4638      	mov	r0, r7
 8004de2:	f7fd ff15 	bl	8002c10 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 8004de6:	20db      	movs	r0, #219	@ 0xdb
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004de8:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004dec:	4623      	mov	r3, r4
 8004dee:	462a      	mov	r2, r5
 8004df0:	f88d 0017 	strb.w	r0, [sp, #23]
 8004df4:	f8cd 8000 	str.w	r8, [sp]
 8004df8:	2178      	movs	r1, #120	@ 0x78
 8004dfa:	4638      	mov	r0, r7
 8004dfc:	f7fd ff08 	bl	8002c10 <HAL_I2C_Mem_Write>
 8004e00:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004e04:	4623      	mov	r3, r4
 8004e06:	462a      	mov	r2, r5
 8004e08:	f8cd 8000 	str.w	r8, [sp]
 8004e0c:	2178      	movs	r1, #120	@ 0x78
 8004e0e:	4638      	mov	r0, r7
 8004e10:	f88d a017 	strb.w	sl, [sp, #23]
 8004e14:	f7fd fefc 	bl	8002c10 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004e18:	208d      	movs	r0, #141	@ 0x8d
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004e1a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004e1e:	4623      	mov	r3, r4
 8004e20:	462a      	mov	r2, r5
 8004e22:	f88d 0017 	strb.w	r0, [sp, #23]
 8004e26:	f8cd 8000 	str.w	r8, [sp]
 8004e2a:	2178      	movs	r1, #120	@ 0x78
 8004e2c:	4638      	mov	r0, r7
 8004e2e:	f7fd feef 	bl	8002c10 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x14); //
 8004e32:	2014      	movs	r0, #20
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004e34:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004e38:	4623      	mov	r3, r4
 8004e3a:	462a      	mov	r2, r5
 8004e3c:	f88d 0017 	strb.w	r0, [sp, #23]
 8004e40:	f8cd 8000 	str.w	r8, [sp]
 8004e44:	2178      	movs	r1, #120	@ 0x78
 8004e46:	4638      	mov	r0, r7
 8004e48:	f7fd fee2 	bl	8002c10 <HAL_I2C_Mem_Write>
 8004e4c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004e50:	4623      	mov	r3, r4
 8004e52:	f8cd 8000 	str.w	r8, [sp]
 8004e56:	462a      	mov	r2, r5
 8004e58:	4638      	mov	r0, r7
        SSD1306.DisplayOn = 1;
 8004e5a:	f889 4005 	strb.w	r4, [r9, #5]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004e5e:	2178      	movs	r1, #120	@ 0x78
 8004e60:	26af      	movs	r6, #175	@ 0xaf
 8004e62:	f88d 6017 	strb.w	r6, [sp, #23]
 8004e66:	f7fd fed3 	bl	8002c10 <HAL_I2C_Mem_Write>
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8004e6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e6e:	4629      	mov	r1, r5
 8004e70:	4806      	ldr	r0, [pc, #24]	@ (8004e8c <ssd1306_Init+0x318>)
 8004e72:	f000 fbd7 	bl	8005624 <memset>
    ssd1306_UpdateScreen();
 8004e76:	f7ff fe31 	bl	8004adc <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 8004e7a:	f8c9 5000 	str.w	r5, [r9]
    SSD1306.Initialized = 1;
 8004e7e:	f889 4004 	strb.w	r4, [r9, #4]
}
 8004e82:	b006      	add	sp, #24
 8004e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e88:	20000180 	.word	0x20000180
 8004e8c:	200002b0 	.word	0x200002b0
 8004e90:	200002a8 	.word	0x200002a8

08004e94 <ssd1306_WriteChar>:
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8004e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e98:	b089      	sub	sp, #36	@ 0x24
    if (ch < 32 || ch > 126)
 8004e9a:	f1a0 0520 	sub.w	r5, r0, #32
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8004e9e:	ac08      	add	r4, sp, #32
 8004ea0:	e904 000e 	stmdb	r4, {r1, r2, r3}
    if (ch < 32 || ch > 126)
 8004ea4:	b2eb      	uxtb	r3, r5
 8004ea6:	2b5e      	cmp	r3, #94	@ 0x5e
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8004ea8:	f89d 9048 	ldrb.w	r9, [sp, #72]	@ 0x48
    if (ch < 32 || ch > 126)
 8004eac:	d870      	bhi.n	8004f90 <ssd1306_WriteChar+0xfc>
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8004eae:	4965      	ldr	r1, [pc, #404]	@ (8005044 <ssd1306_WriteChar+0x1b0>)
 8004eb0:	f89d 4014 	ldrb.w	r4, [sp, #20]
 8004eb4:	f8b1 e000 	ldrh.w	lr, [r1]
 8004eb8:	eb0e 0304 	add.w	r3, lr, r4
 8004ebc:	2b80      	cmp	r3, #128	@ 0x80
 8004ebe:	dc67      	bgt.n	8004f90 <ssd1306_WriteChar+0xfc>
 8004ec0:	f89d 2015 	ldrb.w	r2, [sp, #21]
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8004ec4:	8849      	ldrh	r1, [r1, #2]
 8004ec6:	188b      	adds	r3, r1, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8004ec8:	2b40      	cmp	r3, #64	@ 0x40
 8004eca:	dc61      	bgt.n	8004f90 <ssd1306_WriteChar+0xfc>
 8004ecc:	9b07      	ldr	r3, [sp, #28]
    for(i = 0; i < Font.height; i++) {
 8004ece:	2a00      	cmp	r2, #0
 8004ed0:	d053      	beq.n	8004f7a <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8004ed2:	fb02 f605 	mul.w	r6, r2, r5
 8004ed6:	4432      	add	r2, r6
 8004ed8:	9d06      	ldr	r5, [sp, #24]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004eda:	f8cd e010 	str.w	lr, [sp, #16]
 8004ede:	f106 4600 	add.w	r6, r6, #2147483648	@ 0x80000000
 8004ee2:	3e01      	subs	r6, #1
 8004ee4:	eb05 0646 	add.w	r6, r5, r6, lsl #1
 8004ee8:	3d02      	subs	r5, #2
 8004eea:	eb05 0b42 	add.w	fp, r5, r2, lsl #1
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004eee:	4d56      	ldr	r5, [pc, #344]	@ (8005048 <ssd1306_WriteChar+0x1b4>)
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004ef0:	f8cd b004 	str.w	fp, [sp, #4]
 8004ef4:	b2c9      	uxtb	r1, r1
 8004ef6:	fa5f fa8e 	uxtb.w	sl, lr
 8004efa:	461a      	mov	r2, r3
 8004efc:	4680      	mov	r8, r0
        b = Font.data[(ch - 32) * Font.height + i];
 8004efe:	f836 0f02 	ldrh.w	r0, [r6, #2]!
        for(j = 0; j < Font.width; j++) {
 8004f02:	b38c      	cbz	r4, 8004f68 <ssd1306_WriteChar+0xd4>
 8004f04:	293f      	cmp	r1, #63	@ 0x3f
 8004f06:	4696      	mov	lr, r2
 8004f08:	d82d      	bhi.n	8004f66 <ssd1306_WriteChar+0xd2>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	f001 0c07 	and.w	ip, r1, #7
 8004f10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004f14:	ea6f 030c 	mvn.w	r3, ip
 8004f18:	08ca      	lsrs	r2, r1, #3
 8004f1a:	f1b9 0f01 	cmp.w	r9, #1
 8004f1e:	fa5f fb83 	uxtb.w	fp, r3
 8004f22:	ea4f 12c2 	mov.w	r2, r2, lsl #7
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004f26:	4653      	mov	r3, sl
 8004f28:	d036      	beq.n	8004f98 <ssd1306_WriteChar+0x104>
 8004f2a:	f1b9 0f00 	cmp.w	r9, #0
 8004f2e:	d066      	beq.n	8004ffe <ssd1306_WriteChar+0x16a>
        for(j = 0; j < Font.width; j++) {
 8004f30:	2700      	movs	r7, #0
 8004f32:	9602      	str	r6, [sp, #8]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004f34:	0618      	lsls	r0, r3, #24
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004f36:	eb03 0602 	add.w	r6, r3, r2
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004f3a:	d405      	bmi.n	8004f48 <ssd1306_WriteChar+0xb4>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004f3c:	f815 c006 	ldrb.w	ip, [r5, r6]
 8004f40:	ea0b 0c0c 	and.w	ip, fp, ip
 8004f44:	f805 c006 	strb.w	ip, [r5, r6]
        for(j = 0; j < Font.width; j++) {
 8004f48:	3701      	adds	r7, #1
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	42bc      	cmp	r4, r7
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	d1f0      	bne.n	8004f34 <ssd1306_WriteChar+0xa0>
 8004f52:	9e02      	ldr	r6, [sp, #8]
    for(i = 0; i < Font.height; i++) {
 8004f54:	9b01      	ldr	r3, [sp, #4]
 8004f56:	3101      	adds	r1, #1
 8004f58:	42b3      	cmp	r3, r6
 8004f5a:	b2c9      	uxtb	r1, r1
 8004f5c:	d04a      	beq.n	8004ff4 <ssd1306_WriteChar+0x160>
        b = Font.data[(ch - 32) * Font.height + i];
 8004f5e:	293f      	cmp	r1, #63	@ 0x3f
 8004f60:	f836 0f02 	ldrh.w	r0, [r6, #2]!
        for(j = 0; j < Font.width; j++) {
 8004f64:	d9d1      	bls.n	8004f0a <ssd1306_WriteChar+0x76>
 8004f66:	4672      	mov	r2, lr
    for(i = 0; i < Font.height; i++) {
 8004f68:	9b01      	ldr	r3, [sp, #4]
 8004f6a:	3101      	adds	r1, #1
 8004f6c:	429e      	cmp	r6, r3
 8004f6e:	b2c9      	uxtb	r1, r1
 8004f70:	d1c5      	bne.n	8004efe <ssd1306_WriteChar+0x6a>
 8004f72:	f8dd e010 	ldr.w	lr, [sp, #16]
 8004f76:	4613      	mov	r3, r2
 8004f78:	4640      	mov	r0, r8
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8004f7a:	b113      	cbz	r3, 8004f82 <ssd1306_WriteChar+0xee>
 8004f7c:	4403      	add	r3, r0
 8004f7e:	f813 4c20 	ldrb.w	r4, [r3, #-32]
 8004f82:	4b30      	ldr	r3, [pc, #192]	@ (8005044 <ssd1306_WriteChar+0x1b0>)
 8004f84:	44a6      	add	lr, r4
 8004f86:	f8a3 e000 	strh.w	lr, [r3]
}
 8004f8a:	b009      	add	sp, #36	@ 0x24
 8004f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0;
 8004f90:	2000      	movs	r0, #0
}
 8004f92:	b009      	add	sp, #36	@ 0x24
 8004f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(j = 0; j < Font.width; j++) {
 8004f98:	e9cd 6e02 	strd	r6, lr, [sp, #8]
 8004f9c:	2700      	movs	r7, #0
 8004f9e:	e00d      	b.n	8004fbc <ssd1306_WriteChar+0x128>
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004fa0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004fa4:	d105      	bne.n	8004fb2 <ssd1306_WriteChar+0x11e>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004fa6:	f815 e006 	ldrb.w	lr, [r5, r6]
 8004faa:	ea4e 0e0c 	orr.w	lr, lr, ip
 8004fae:	f805 e006 	strb.w	lr, [r5, r6]
        for(j = 0; j < Font.width; j++) {
 8004fb2:	3701      	adds	r7, #1
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	42bc      	cmp	r4, r7
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	d014      	beq.n	8004fe6 <ssd1306_WriteChar+0x152>
            if((b << j) & 0x8000)  {
 8004fbc:	fa00 f607 	lsl.w	r6, r0, r7
 8004fc0:	f416 4f00 	tst.w	r6, #32768	@ 0x8000
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004fc4:	eb03 0602 	add.w	r6, r3, r2
            if((b << j) & 0x8000)  {
 8004fc8:	d1ea      	bne.n	8004fa0 <ssd1306_WriteChar+0x10c>
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004fca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004fce:	d1f0      	bne.n	8004fb2 <ssd1306_WriteChar+0x11e>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004fd0:	f815 e006 	ldrb.w	lr, [r5, r6]
        for(j = 0; j < Font.width; j++) {
 8004fd4:	3701      	adds	r7, #1
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004fd6:	ea0b 0e0e 	and.w	lr, fp, lr
        for(j = 0; j < Font.width; j++) {
 8004fda:	3301      	adds	r3, #1
 8004fdc:	42bc      	cmp	r4, r7
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004fde:	f805 e006 	strb.w	lr, [r5, r6]
        for(j = 0; j < Font.width; j++) {
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	d1ea      	bne.n	8004fbc <ssd1306_WriteChar+0x128>
 8004fe6:	e9dd 6e02 	ldrd	r6, lr, [sp, #8]
    for(i = 0; i < Font.height; i++) {
 8004fea:	9b01      	ldr	r3, [sp, #4]
 8004fec:	3101      	adds	r1, #1
 8004fee:	42b3      	cmp	r3, r6
 8004ff0:	b2c9      	uxtb	r1, r1
 8004ff2:	d1b4      	bne.n	8004f5e <ssd1306_WriteChar+0xca>
 8004ff4:	4673      	mov	r3, lr
 8004ff6:	4640      	mov	r0, r8
 8004ff8:	f8dd e010 	ldr.w	lr, [sp, #16]
 8004ffc:	e7bd      	b.n	8004f7a <ssd1306_WriteChar+0xe6>
        for(j = 0; j < Font.width; j++) {
 8004ffe:	e9cd 6e02 	strd	r6, lr, [sp, #8]
 8005002:	464f      	mov	r7, r9
 8005004:	e00d      	b.n	8005022 <ssd1306_WriteChar+0x18e>
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8005006:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800500a:	d105      	bne.n	8005018 <ssd1306_WriteChar+0x184>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800500c:	f815 e006 	ldrb.w	lr, [r5, r6]
 8005010:	ea0b 0e0e 	and.w	lr, fp, lr
 8005014:	f805 e006 	strb.w	lr, [r5, r6]
        for(j = 0; j < Font.width; j++) {
 8005018:	3701      	adds	r7, #1
 800501a:	3301      	adds	r3, #1
 800501c:	42a7      	cmp	r7, r4
 800501e:	b2db      	uxtb	r3, r3
 8005020:	d0e1      	beq.n	8004fe6 <ssd1306_WriteChar+0x152>
            if((b << j) & 0x8000)  {
 8005022:	fa00 f607 	lsl.w	r6, r0, r7
 8005026:	f416 4f00 	tst.w	r6, #32768	@ 0x8000
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800502a:	eb03 0602 	add.w	r6, r3, r2
            if((b << j) & 0x8000)  {
 800502e:	d1ea      	bne.n	8005006 <ssd1306_WriteChar+0x172>
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8005030:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005034:	d1f0      	bne.n	8005018 <ssd1306_WriteChar+0x184>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005036:	f815 e006 	ldrb.w	lr, [r5, r6]
 800503a:	ea4e 0e0c 	orr.w	lr, lr, ip
 800503e:	f805 e006 	strb.w	lr, [r5, r6]
 8005042:	e7e9      	b.n	8005018 <ssd1306_WriteChar+0x184>
 8005044:	200002a8 	.word	0x200002a8
 8005048:	200002b0 	.word	0x200002b0

0800504c <ssd1306_WriteString>:
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800504c:	b570      	push	{r4, r5, r6, lr}
 800504e:	4605      	mov	r5, r0
 8005050:	b086      	sub	sp, #24
    while (*str) {
 8005052:	7800      	ldrb	r0, [r0, #0]
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8005054:	f89d 6028 	ldrb.w	r6, [sp, #40]	@ 0x28
 8005058:	ac03      	add	r4, sp, #12
 800505a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    while (*str) {
 800505e:	b918      	cbnz	r0, 8005068 <ssd1306_WriteString+0x1c>
 8005060:	e00d      	b.n	800507e <ssd1306_WriteString+0x32>
 8005062:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8005066:	b150      	cbz	r0, 800507e <ssd1306_WriteString+0x32>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8005068:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800506c:	9600      	str	r6, [sp, #0]
 800506e:	f7ff ff11 	bl	8004e94 <ssd1306_WriteChar>
 8005072:	782b      	ldrb	r3, [r5, #0]
 8005074:	4298      	cmp	r0, r3
 8005076:	d0f4      	beq.n	8005062 <ssd1306_WriteString+0x16>
}
 8005078:	4618      	mov	r0, r3
 800507a:	b006      	add	sp, #24
 800507c:	bd70      	pop	{r4, r5, r6, pc}
    return *str;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	b006      	add	sp, #24
 8005084:	bd70      	pop	{r4, r5, r6, pc}
 8005086:	bf00      	nop

08005088 <ssd1306_SetCursor>:
    SSD1306.CurrentX = x;
 8005088:	4b01      	ldr	r3, [pc, #4]	@ (8005090 <ssd1306_SetCursor+0x8>)
 800508a:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 800508c:	8059      	strh	r1, [r3, #2]
}
 800508e:	4770      	bx	lr
 8005090:	200002a8 	.word	0x200002a8

08005094 <_strtol_l.constprop.0>:
 8005094:	2b24      	cmp	r3, #36	@ 0x24
 8005096:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800509a:	4686      	mov	lr, r0
 800509c:	4690      	mov	r8, r2
 800509e:	d801      	bhi.n	80050a4 <_strtol_l.constprop.0+0x10>
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d106      	bne.n	80050b2 <_strtol_l.constprop.0+0x1e>
 80050a4:	f000 fb0c 	bl	80056c0 <__errno>
 80050a8:	2316      	movs	r3, #22
 80050aa:	6003      	str	r3, [r0, #0]
 80050ac:	2000      	movs	r0, #0
 80050ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b2:	4834      	ldr	r0, [pc, #208]	@ (8005184 <_strtol_l.constprop.0+0xf0>)
 80050b4:	460d      	mov	r5, r1
 80050b6:	462a      	mov	r2, r5
 80050b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80050bc:	5d06      	ldrb	r6, [r0, r4]
 80050be:	f016 0608 	ands.w	r6, r6, #8
 80050c2:	d1f8      	bne.n	80050b6 <_strtol_l.constprop.0+0x22>
 80050c4:	2c2d      	cmp	r4, #45	@ 0x2d
 80050c6:	d12d      	bne.n	8005124 <_strtol_l.constprop.0+0x90>
 80050c8:	782c      	ldrb	r4, [r5, #0]
 80050ca:	2601      	movs	r6, #1
 80050cc:	1c95      	adds	r5, r2, #2
 80050ce:	f033 0210 	bics.w	r2, r3, #16
 80050d2:	d109      	bne.n	80050e8 <_strtol_l.constprop.0+0x54>
 80050d4:	2c30      	cmp	r4, #48	@ 0x30
 80050d6:	d12a      	bne.n	800512e <_strtol_l.constprop.0+0x9a>
 80050d8:	782a      	ldrb	r2, [r5, #0]
 80050da:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80050de:	2a58      	cmp	r2, #88	@ 0x58
 80050e0:	d125      	bne.n	800512e <_strtol_l.constprop.0+0x9a>
 80050e2:	786c      	ldrb	r4, [r5, #1]
 80050e4:	2310      	movs	r3, #16
 80050e6:	3502      	adds	r5, #2
 80050e8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80050ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 80050f0:	2200      	movs	r2, #0
 80050f2:	fbbc f9f3 	udiv	r9, ip, r3
 80050f6:	4610      	mov	r0, r2
 80050f8:	fb03 ca19 	mls	sl, r3, r9, ip
 80050fc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005100:	2f09      	cmp	r7, #9
 8005102:	d81b      	bhi.n	800513c <_strtol_l.constprop.0+0xa8>
 8005104:	463c      	mov	r4, r7
 8005106:	42a3      	cmp	r3, r4
 8005108:	dd27      	ble.n	800515a <_strtol_l.constprop.0+0xc6>
 800510a:	1c57      	adds	r7, r2, #1
 800510c:	d007      	beq.n	800511e <_strtol_l.constprop.0+0x8a>
 800510e:	4581      	cmp	r9, r0
 8005110:	d320      	bcc.n	8005154 <_strtol_l.constprop.0+0xc0>
 8005112:	d101      	bne.n	8005118 <_strtol_l.constprop.0+0x84>
 8005114:	45a2      	cmp	sl, r4
 8005116:	db1d      	blt.n	8005154 <_strtol_l.constprop.0+0xc0>
 8005118:	fb00 4003 	mla	r0, r0, r3, r4
 800511c:	2201      	movs	r2, #1
 800511e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005122:	e7eb      	b.n	80050fc <_strtol_l.constprop.0+0x68>
 8005124:	2c2b      	cmp	r4, #43	@ 0x2b
 8005126:	bf04      	itt	eq
 8005128:	782c      	ldrbeq	r4, [r5, #0]
 800512a:	1c95      	addeq	r5, r2, #2
 800512c:	e7cf      	b.n	80050ce <_strtol_l.constprop.0+0x3a>
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1da      	bne.n	80050e8 <_strtol_l.constprop.0+0x54>
 8005132:	2c30      	cmp	r4, #48	@ 0x30
 8005134:	bf0c      	ite	eq
 8005136:	2308      	moveq	r3, #8
 8005138:	230a      	movne	r3, #10
 800513a:	e7d5      	b.n	80050e8 <_strtol_l.constprop.0+0x54>
 800513c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005140:	2f19      	cmp	r7, #25
 8005142:	d801      	bhi.n	8005148 <_strtol_l.constprop.0+0xb4>
 8005144:	3c37      	subs	r4, #55	@ 0x37
 8005146:	e7de      	b.n	8005106 <_strtol_l.constprop.0+0x72>
 8005148:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800514c:	2f19      	cmp	r7, #25
 800514e:	d804      	bhi.n	800515a <_strtol_l.constprop.0+0xc6>
 8005150:	3c57      	subs	r4, #87	@ 0x57
 8005152:	e7d8      	b.n	8005106 <_strtol_l.constprop.0+0x72>
 8005154:	f04f 32ff 	mov.w	r2, #4294967295
 8005158:	e7e1      	b.n	800511e <_strtol_l.constprop.0+0x8a>
 800515a:	1c53      	adds	r3, r2, #1
 800515c:	d108      	bne.n	8005170 <_strtol_l.constprop.0+0xdc>
 800515e:	2322      	movs	r3, #34	@ 0x22
 8005160:	f8ce 3000 	str.w	r3, [lr]
 8005164:	4660      	mov	r0, ip
 8005166:	f1b8 0f00 	cmp.w	r8, #0
 800516a:	d0a0      	beq.n	80050ae <_strtol_l.constprop.0+0x1a>
 800516c:	1e69      	subs	r1, r5, #1
 800516e:	e006      	b.n	800517e <_strtol_l.constprop.0+0xea>
 8005170:	b106      	cbz	r6, 8005174 <_strtol_l.constprop.0+0xe0>
 8005172:	4240      	negs	r0, r0
 8005174:	f1b8 0f00 	cmp.w	r8, #0
 8005178:	d099      	beq.n	80050ae <_strtol_l.constprop.0+0x1a>
 800517a:	2a00      	cmp	r2, #0
 800517c:	d1f6      	bne.n	800516c <_strtol_l.constprop.0+0xd8>
 800517e:	f8c8 1000 	str.w	r1, [r8]
 8005182:	e794      	b.n	80050ae <_strtol_l.constprop.0+0x1a>
 8005184:	08006d09 	.word	0x08006d09

08005188 <strtol>:
 8005188:	4613      	mov	r3, r2
 800518a:	460a      	mov	r2, r1
 800518c:	4601      	mov	r1, r0
 800518e:	4802      	ldr	r0, [pc, #8]	@ (8005198 <strtol+0x10>)
 8005190:	6800      	ldr	r0, [r0, #0]
 8005192:	f7ff bf7f 	b.w	8005094 <_strtol_l.constprop.0>
 8005196:	bf00      	nop
 8005198:	20000030 	.word	0x20000030

0800519c <std>:
 800519c:	2300      	movs	r3, #0
 800519e:	b510      	push	{r4, lr}
 80051a0:	4604      	mov	r4, r0
 80051a2:	e9c0 3300 	strd	r3, r3, [r0]
 80051a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051aa:	6083      	str	r3, [r0, #8]
 80051ac:	8181      	strh	r1, [r0, #12]
 80051ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80051b0:	81c2      	strh	r2, [r0, #14]
 80051b2:	6183      	str	r3, [r0, #24]
 80051b4:	4619      	mov	r1, r3
 80051b6:	2208      	movs	r2, #8
 80051b8:	305c      	adds	r0, #92	@ 0x5c
 80051ba:	f000 fa33 	bl	8005624 <memset>
 80051be:	4b0d      	ldr	r3, [pc, #52]	@ (80051f4 <std+0x58>)
 80051c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80051c2:	4b0d      	ldr	r3, [pc, #52]	@ (80051f8 <std+0x5c>)
 80051c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80051c6:	4b0d      	ldr	r3, [pc, #52]	@ (80051fc <std+0x60>)
 80051c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80051ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005200 <std+0x64>)
 80051cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80051ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005204 <std+0x68>)
 80051d0:	6224      	str	r4, [r4, #32]
 80051d2:	429c      	cmp	r4, r3
 80051d4:	d006      	beq.n	80051e4 <std+0x48>
 80051d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80051da:	4294      	cmp	r4, r2
 80051dc:	d002      	beq.n	80051e4 <std+0x48>
 80051de:	33d0      	adds	r3, #208	@ 0xd0
 80051e0:	429c      	cmp	r4, r3
 80051e2:	d105      	bne.n	80051f0 <std+0x54>
 80051e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80051e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051ec:	f000 ba92 	b.w	8005714 <__retarget_lock_init_recursive>
 80051f0:	bd10      	pop	{r4, pc}
 80051f2:	bf00      	nop
 80051f4:	08005441 	.word	0x08005441
 80051f8:	08005463 	.word	0x08005463
 80051fc:	0800549b 	.word	0x0800549b
 8005200:	080054bf 	.word	0x080054bf
 8005204:	200006b0 	.word	0x200006b0

08005208 <stdio_exit_handler>:
 8005208:	4a02      	ldr	r2, [pc, #8]	@ (8005214 <stdio_exit_handler+0xc>)
 800520a:	4903      	ldr	r1, [pc, #12]	@ (8005218 <stdio_exit_handler+0x10>)
 800520c:	4803      	ldr	r0, [pc, #12]	@ (800521c <stdio_exit_handler+0x14>)
 800520e:	f000 b869 	b.w	80052e4 <_fwalk_sglue>
 8005212:	bf00      	nop
 8005214:	20000024 	.word	0x20000024
 8005218:	08006281 	.word	0x08006281
 800521c:	20000034 	.word	0x20000034

08005220 <cleanup_stdio>:
 8005220:	6841      	ldr	r1, [r0, #4]
 8005222:	4b0c      	ldr	r3, [pc, #48]	@ (8005254 <cleanup_stdio+0x34>)
 8005224:	4299      	cmp	r1, r3
 8005226:	b510      	push	{r4, lr}
 8005228:	4604      	mov	r4, r0
 800522a:	d001      	beq.n	8005230 <cleanup_stdio+0x10>
 800522c:	f001 f828 	bl	8006280 <_fflush_r>
 8005230:	68a1      	ldr	r1, [r4, #8]
 8005232:	4b09      	ldr	r3, [pc, #36]	@ (8005258 <cleanup_stdio+0x38>)
 8005234:	4299      	cmp	r1, r3
 8005236:	d002      	beq.n	800523e <cleanup_stdio+0x1e>
 8005238:	4620      	mov	r0, r4
 800523a:	f001 f821 	bl	8006280 <_fflush_r>
 800523e:	68e1      	ldr	r1, [r4, #12]
 8005240:	4b06      	ldr	r3, [pc, #24]	@ (800525c <cleanup_stdio+0x3c>)
 8005242:	4299      	cmp	r1, r3
 8005244:	d004      	beq.n	8005250 <cleanup_stdio+0x30>
 8005246:	4620      	mov	r0, r4
 8005248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800524c:	f001 b818 	b.w	8006280 <_fflush_r>
 8005250:	bd10      	pop	{r4, pc}
 8005252:	bf00      	nop
 8005254:	200006b0 	.word	0x200006b0
 8005258:	20000718 	.word	0x20000718
 800525c:	20000780 	.word	0x20000780

08005260 <global_stdio_init.part.0>:
 8005260:	b510      	push	{r4, lr}
 8005262:	4b0b      	ldr	r3, [pc, #44]	@ (8005290 <global_stdio_init.part.0+0x30>)
 8005264:	4c0b      	ldr	r4, [pc, #44]	@ (8005294 <global_stdio_init.part.0+0x34>)
 8005266:	4a0c      	ldr	r2, [pc, #48]	@ (8005298 <global_stdio_init.part.0+0x38>)
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	4620      	mov	r0, r4
 800526c:	2200      	movs	r2, #0
 800526e:	2104      	movs	r1, #4
 8005270:	f7ff ff94 	bl	800519c <std>
 8005274:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005278:	2201      	movs	r2, #1
 800527a:	2109      	movs	r1, #9
 800527c:	f7ff ff8e 	bl	800519c <std>
 8005280:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005284:	2202      	movs	r2, #2
 8005286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800528a:	2112      	movs	r1, #18
 800528c:	f7ff bf86 	b.w	800519c <std>
 8005290:	200007e8 	.word	0x200007e8
 8005294:	200006b0 	.word	0x200006b0
 8005298:	08005209 	.word	0x08005209

0800529c <__sfp_lock_acquire>:
 800529c:	4801      	ldr	r0, [pc, #4]	@ (80052a4 <__sfp_lock_acquire+0x8>)
 800529e:	f000 ba3a 	b.w	8005716 <__retarget_lock_acquire_recursive>
 80052a2:	bf00      	nop
 80052a4:	200007f1 	.word	0x200007f1

080052a8 <__sfp_lock_release>:
 80052a8:	4801      	ldr	r0, [pc, #4]	@ (80052b0 <__sfp_lock_release+0x8>)
 80052aa:	f000 ba35 	b.w	8005718 <__retarget_lock_release_recursive>
 80052ae:	bf00      	nop
 80052b0:	200007f1 	.word	0x200007f1

080052b4 <__sinit>:
 80052b4:	b510      	push	{r4, lr}
 80052b6:	4604      	mov	r4, r0
 80052b8:	f7ff fff0 	bl	800529c <__sfp_lock_acquire>
 80052bc:	6a23      	ldr	r3, [r4, #32]
 80052be:	b11b      	cbz	r3, 80052c8 <__sinit+0x14>
 80052c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052c4:	f7ff bff0 	b.w	80052a8 <__sfp_lock_release>
 80052c8:	4b04      	ldr	r3, [pc, #16]	@ (80052dc <__sinit+0x28>)
 80052ca:	6223      	str	r3, [r4, #32]
 80052cc:	4b04      	ldr	r3, [pc, #16]	@ (80052e0 <__sinit+0x2c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1f5      	bne.n	80052c0 <__sinit+0xc>
 80052d4:	f7ff ffc4 	bl	8005260 <global_stdio_init.part.0>
 80052d8:	e7f2      	b.n	80052c0 <__sinit+0xc>
 80052da:	bf00      	nop
 80052dc:	08005221 	.word	0x08005221
 80052e0:	200007e8 	.word	0x200007e8

080052e4 <_fwalk_sglue>:
 80052e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052e8:	4607      	mov	r7, r0
 80052ea:	4688      	mov	r8, r1
 80052ec:	4614      	mov	r4, r2
 80052ee:	2600      	movs	r6, #0
 80052f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052f4:	f1b9 0901 	subs.w	r9, r9, #1
 80052f8:	d505      	bpl.n	8005306 <_fwalk_sglue+0x22>
 80052fa:	6824      	ldr	r4, [r4, #0]
 80052fc:	2c00      	cmp	r4, #0
 80052fe:	d1f7      	bne.n	80052f0 <_fwalk_sglue+0xc>
 8005300:	4630      	mov	r0, r6
 8005302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005306:	89ab      	ldrh	r3, [r5, #12]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d907      	bls.n	800531c <_fwalk_sglue+0x38>
 800530c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005310:	3301      	adds	r3, #1
 8005312:	d003      	beq.n	800531c <_fwalk_sglue+0x38>
 8005314:	4629      	mov	r1, r5
 8005316:	4638      	mov	r0, r7
 8005318:	47c0      	blx	r8
 800531a:	4306      	orrs	r6, r0
 800531c:	3568      	adds	r5, #104	@ 0x68
 800531e:	e7e9      	b.n	80052f4 <_fwalk_sglue+0x10>

08005320 <iprintf>:
 8005320:	b40f      	push	{r0, r1, r2, r3}
 8005322:	b507      	push	{r0, r1, r2, lr}
 8005324:	4906      	ldr	r1, [pc, #24]	@ (8005340 <iprintf+0x20>)
 8005326:	ab04      	add	r3, sp, #16
 8005328:	6808      	ldr	r0, [r1, #0]
 800532a:	f853 2b04 	ldr.w	r2, [r3], #4
 800532e:	6881      	ldr	r1, [r0, #8]
 8005330:	9301      	str	r3, [sp, #4]
 8005332:	f000 fc7b 	bl	8005c2c <_vfiprintf_r>
 8005336:	b003      	add	sp, #12
 8005338:	f85d eb04 	ldr.w	lr, [sp], #4
 800533c:	b004      	add	sp, #16
 800533e:	4770      	bx	lr
 8005340:	20000030 	.word	0x20000030

08005344 <_puts_r>:
 8005344:	6a03      	ldr	r3, [r0, #32]
 8005346:	b570      	push	{r4, r5, r6, lr}
 8005348:	6884      	ldr	r4, [r0, #8]
 800534a:	4605      	mov	r5, r0
 800534c:	460e      	mov	r6, r1
 800534e:	b90b      	cbnz	r3, 8005354 <_puts_r+0x10>
 8005350:	f7ff ffb0 	bl	80052b4 <__sinit>
 8005354:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005356:	07db      	lsls	r3, r3, #31
 8005358:	d405      	bmi.n	8005366 <_puts_r+0x22>
 800535a:	89a3      	ldrh	r3, [r4, #12]
 800535c:	0598      	lsls	r0, r3, #22
 800535e:	d402      	bmi.n	8005366 <_puts_r+0x22>
 8005360:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005362:	f000 f9d8 	bl	8005716 <__retarget_lock_acquire_recursive>
 8005366:	89a3      	ldrh	r3, [r4, #12]
 8005368:	0719      	lsls	r1, r3, #28
 800536a:	d502      	bpl.n	8005372 <_puts_r+0x2e>
 800536c:	6923      	ldr	r3, [r4, #16]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d135      	bne.n	80053de <_puts_r+0x9a>
 8005372:	4621      	mov	r1, r4
 8005374:	4628      	mov	r0, r5
 8005376:	f000 f8e5 	bl	8005544 <__swsetup_r>
 800537a:	b380      	cbz	r0, 80053de <_puts_r+0x9a>
 800537c:	f04f 35ff 	mov.w	r5, #4294967295
 8005380:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005382:	07da      	lsls	r2, r3, #31
 8005384:	d405      	bmi.n	8005392 <_puts_r+0x4e>
 8005386:	89a3      	ldrh	r3, [r4, #12]
 8005388:	059b      	lsls	r3, r3, #22
 800538a:	d402      	bmi.n	8005392 <_puts_r+0x4e>
 800538c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800538e:	f000 f9c3 	bl	8005718 <__retarget_lock_release_recursive>
 8005392:	4628      	mov	r0, r5
 8005394:	bd70      	pop	{r4, r5, r6, pc}
 8005396:	2b00      	cmp	r3, #0
 8005398:	da04      	bge.n	80053a4 <_puts_r+0x60>
 800539a:	69a2      	ldr	r2, [r4, #24]
 800539c:	429a      	cmp	r2, r3
 800539e:	dc17      	bgt.n	80053d0 <_puts_r+0x8c>
 80053a0:	290a      	cmp	r1, #10
 80053a2:	d015      	beq.n	80053d0 <_puts_r+0x8c>
 80053a4:	6823      	ldr	r3, [r4, #0]
 80053a6:	1c5a      	adds	r2, r3, #1
 80053a8:	6022      	str	r2, [r4, #0]
 80053aa:	7019      	strb	r1, [r3, #0]
 80053ac:	68a3      	ldr	r3, [r4, #8]
 80053ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80053b2:	3b01      	subs	r3, #1
 80053b4:	60a3      	str	r3, [r4, #8]
 80053b6:	2900      	cmp	r1, #0
 80053b8:	d1ed      	bne.n	8005396 <_puts_r+0x52>
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	da11      	bge.n	80053e2 <_puts_r+0x9e>
 80053be:	4622      	mov	r2, r4
 80053c0:	210a      	movs	r1, #10
 80053c2:	4628      	mov	r0, r5
 80053c4:	f000 f87f 	bl	80054c6 <__swbuf_r>
 80053c8:	3001      	adds	r0, #1
 80053ca:	d0d7      	beq.n	800537c <_puts_r+0x38>
 80053cc:	250a      	movs	r5, #10
 80053ce:	e7d7      	b.n	8005380 <_puts_r+0x3c>
 80053d0:	4622      	mov	r2, r4
 80053d2:	4628      	mov	r0, r5
 80053d4:	f000 f877 	bl	80054c6 <__swbuf_r>
 80053d8:	3001      	adds	r0, #1
 80053da:	d1e7      	bne.n	80053ac <_puts_r+0x68>
 80053dc:	e7ce      	b.n	800537c <_puts_r+0x38>
 80053de:	3e01      	subs	r6, #1
 80053e0:	e7e4      	b.n	80053ac <_puts_r+0x68>
 80053e2:	6823      	ldr	r3, [r4, #0]
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	6022      	str	r2, [r4, #0]
 80053e8:	220a      	movs	r2, #10
 80053ea:	701a      	strb	r2, [r3, #0]
 80053ec:	e7ee      	b.n	80053cc <_puts_r+0x88>
	...

080053f0 <puts>:
 80053f0:	4b02      	ldr	r3, [pc, #8]	@ (80053fc <puts+0xc>)
 80053f2:	4601      	mov	r1, r0
 80053f4:	6818      	ldr	r0, [r3, #0]
 80053f6:	f7ff bfa5 	b.w	8005344 <_puts_r>
 80053fa:	bf00      	nop
 80053fc:	20000030 	.word	0x20000030

08005400 <siprintf>:
 8005400:	b40e      	push	{r1, r2, r3}
 8005402:	b500      	push	{lr}
 8005404:	b09c      	sub	sp, #112	@ 0x70
 8005406:	ab1d      	add	r3, sp, #116	@ 0x74
 8005408:	9002      	str	r0, [sp, #8]
 800540a:	9006      	str	r0, [sp, #24]
 800540c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005410:	4809      	ldr	r0, [pc, #36]	@ (8005438 <siprintf+0x38>)
 8005412:	9107      	str	r1, [sp, #28]
 8005414:	9104      	str	r1, [sp, #16]
 8005416:	4909      	ldr	r1, [pc, #36]	@ (800543c <siprintf+0x3c>)
 8005418:	f853 2b04 	ldr.w	r2, [r3], #4
 800541c:	9105      	str	r1, [sp, #20]
 800541e:	6800      	ldr	r0, [r0, #0]
 8005420:	9301      	str	r3, [sp, #4]
 8005422:	a902      	add	r1, sp, #8
 8005424:	f000 fadc 	bl	80059e0 <_svfiprintf_r>
 8005428:	9b02      	ldr	r3, [sp, #8]
 800542a:	2200      	movs	r2, #0
 800542c:	701a      	strb	r2, [r3, #0]
 800542e:	b01c      	add	sp, #112	@ 0x70
 8005430:	f85d eb04 	ldr.w	lr, [sp], #4
 8005434:	b003      	add	sp, #12
 8005436:	4770      	bx	lr
 8005438:	20000030 	.word	0x20000030
 800543c:	ffff0208 	.word	0xffff0208

08005440 <__sread>:
 8005440:	b510      	push	{r4, lr}
 8005442:	460c      	mov	r4, r1
 8005444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005448:	f000 f916 	bl	8005678 <_read_r>
 800544c:	2800      	cmp	r0, #0
 800544e:	bfab      	itete	ge
 8005450:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005452:	89a3      	ldrhlt	r3, [r4, #12]
 8005454:	181b      	addge	r3, r3, r0
 8005456:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800545a:	bfac      	ite	ge
 800545c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800545e:	81a3      	strhlt	r3, [r4, #12]
 8005460:	bd10      	pop	{r4, pc}

08005462 <__swrite>:
 8005462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005466:	461f      	mov	r7, r3
 8005468:	898b      	ldrh	r3, [r1, #12]
 800546a:	05db      	lsls	r3, r3, #23
 800546c:	4605      	mov	r5, r0
 800546e:	460c      	mov	r4, r1
 8005470:	4616      	mov	r6, r2
 8005472:	d505      	bpl.n	8005480 <__swrite+0x1e>
 8005474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005478:	2302      	movs	r3, #2
 800547a:	2200      	movs	r2, #0
 800547c:	f000 f8ea 	bl	8005654 <_lseek_r>
 8005480:	89a3      	ldrh	r3, [r4, #12]
 8005482:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005486:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800548a:	81a3      	strh	r3, [r4, #12]
 800548c:	4632      	mov	r2, r6
 800548e:	463b      	mov	r3, r7
 8005490:	4628      	mov	r0, r5
 8005492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005496:	f000 b901 	b.w	800569c <_write_r>

0800549a <__sseek>:
 800549a:	b510      	push	{r4, lr}
 800549c:	460c      	mov	r4, r1
 800549e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054a2:	f000 f8d7 	bl	8005654 <_lseek_r>
 80054a6:	1c43      	adds	r3, r0, #1
 80054a8:	89a3      	ldrh	r3, [r4, #12]
 80054aa:	bf15      	itete	ne
 80054ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80054ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80054b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80054b6:	81a3      	strheq	r3, [r4, #12]
 80054b8:	bf18      	it	ne
 80054ba:	81a3      	strhne	r3, [r4, #12]
 80054bc:	bd10      	pop	{r4, pc}

080054be <__sclose>:
 80054be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054c2:	f000 b8b7 	b.w	8005634 <_close_r>

080054c6 <__swbuf_r>:
 80054c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c8:	460e      	mov	r6, r1
 80054ca:	4614      	mov	r4, r2
 80054cc:	4605      	mov	r5, r0
 80054ce:	b118      	cbz	r0, 80054d8 <__swbuf_r+0x12>
 80054d0:	6a03      	ldr	r3, [r0, #32]
 80054d2:	b90b      	cbnz	r3, 80054d8 <__swbuf_r+0x12>
 80054d4:	f7ff feee 	bl	80052b4 <__sinit>
 80054d8:	69a3      	ldr	r3, [r4, #24]
 80054da:	60a3      	str	r3, [r4, #8]
 80054dc:	89a3      	ldrh	r3, [r4, #12]
 80054de:	071a      	lsls	r2, r3, #28
 80054e0:	d501      	bpl.n	80054e6 <__swbuf_r+0x20>
 80054e2:	6923      	ldr	r3, [r4, #16]
 80054e4:	b943      	cbnz	r3, 80054f8 <__swbuf_r+0x32>
 80054e6:	4621      	mov	r1, r4
 80054e8:	4628      	mov	r0, r5
 80054ea:	f000 f82b 	bl	8005544 <__swsetup_r>
 80054ee:	b118      	cbz	r0, 80054f8 <__swbuf_r+0x32>
 80054f0:	f04f 37ff 	mov.w	r7, #4294967295
 80054f4:	4638      	mov	r0, r7
 80054f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054f8:	6823      	ldr	r3, [r4, #0]
 80054fa:	6922      	ldr	r2, [r4, #16]
 80054fc:	1a98      	subs	r0, r3, r2
 80054fe:	6963      	ldr	r3, [r4, #20]
 8005500:	b2f6      	uxtb	r6, r6
 8005502:	4283      	cmp	r3, r0
 8005504:	4637      	mov	r7, r6
 8005506:	dc05      	bgt.n	8005514 <__swbuf_r+0x4e>
 8005508:	4621      	mov	r1, r4
 800550a:	4628      	mov	r0, r5
 800550c:	f000 feb8 	bl	8006280 <_fflush_r>
 8005510:	2800      	cmp	r0, #0
 8005512:	d1ed      	bne.n	80054f0 <__swbuf_r+0x2a>
 8005514:	68a3      	ldr	r3, [r4, #8]
 8005516:	3b01      	subs	r3, #1
 8005518:	60a3      	str	r3, [r4, #8]
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	1c5a      	adds	r2, r3, #1
 800551e:	6022      	str	r2, [r4, #0]
 8005520:	701e      	strb	r6, [r3, #0]
 8005522:	6962      	ldr	r2, [r4, #20]
 8005524:	1c43      	adds	r3, r0, #1
 8005526:	429a      	cmp	r2, r3
 8005528:	d004      	beq.n	8005534 <__swbuf_r+0x6e>
 800552a:	89a3      	ldrh	r3, [r4, #12]
 800552c:	07db      	lsls	r3, r3, #31
 800552e:	d5e1      	bpl.n	80054f4 <__swbuf_r+0x2e>
 8005530:	2e0a      	cmp	r6, #10
 8005532:	d1df      	bne.n	80054f4 <__swbuf_r+0x2e>
 8005534:	4621      	mov	r1, r4
 8005536:	4628      	mov	r0, r5
 8005538:	f000 fea2 	bl	8006280 <_fflush_r>
 800553c:	2800      	cmp	r0, #0
 800553e:	d0d9      	beq.n	80054f4 <__swbuf_r+0x2e>
 8005540:	e7d6      	b.n	80054f0 <__swbuf_r+0x2a>
	...

08005544 <__swsetup_r>:
 8005544:	b538      	push	{r3, r4, r5, lr}
 8005546:	4b29      	ldr	r3, [pc, #164]	@ (80055ec <__swsetup_r+0xa8>)
 8005548:	4605      	mov	r5, r0
 800554a:	6818      	ldr	r0, [r3, #0]
 800554c:	460c      	mov	r4, r1
 800554e:	b118      	cbz	r0, 8005558 <__swsetup_r+0x14>
 8005550:	6a03      	ldr	r3, [r0, #32]
 8005552:	b90b      	cbnz	r3, 8005558 <__swsetup_r+0x14>
 8005554:	f7ff feae 	bl	80052b4 <__sinit>
 8005558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800555c:	0719      	lsls	r1, r3, #28
 800555e:	d422      	bmi.n	80055a6 <__swsetup_r+0x62>
 8005560:	06da      	lsls	r2, r3, #27
 8005562:	d407      	bmi.n	8005574 <__swsetup_r+0x30>
 8005564:	2209      	movs	r2, #9
 8005566:	602a      	str	r2, [r5, #0]
 8005568:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800556c:	81a3      	strh	r3, [r4, #12]
 800556e:	f04f 30ff 	mov.w	r0, #4294967295
 8005572:	e033      	b.n	80055dc <__swsetup_r+0x98>
 8005574:	0758      	lsls	r0, r3, #29
 8005576:	d512      	bpl.n	800559e <__swsetup_r+0x5a>
 8005578:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800557a:	b141      	cbz	r1, 800558e <__swsetup_r+0x4a>
 800557c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005580:	4299      	cmp	r1, r3
 8005582:	d002      	beq.n	800558a <__swsetup_r+0x46>
 8005584:	4628      	mov	r0, r5
 8005586:	f000 f8d7 	bl	8005738 <_free_r>
 800558a:	2300      	movs	r3, #0
 800558c:	6363      	str	r3, [r4, #52]	@ 0x34
 800558e:	89a3      	ldrh	r3, [r4, #12]
 8005590:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005594:	81a3      	strh	r3, [r4, #12]
 8005596:	2300      	movs	r3, #0
 8005598:	6063      	str	r3, [r4, #4]
 800559a:	6923      	ldr	r3, [r4, #16]
 800559c:	6023      	str	r3, [r4, #0]
 800559e:	89a3      	ldrh	r3, [r4, #12]
 80055a0:	f043 0308 	orr.w	r3, r3, #8
 80055a4:	81a3      	strh	r3, [r4, #12]
 80055a6:	6923      	ldr	r3, [r4, #16]
 80055a8:	b94b      	cbnz	r3, 80055be <__swsetup_r+0x7a>
 80055aa:	89a3      	ldrh	r3, [r4, #12]
 80055ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80055b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055b4:	d003      	beq.n	80055be <__swsetup_r+0x7a>
 80055b6:	4621      	mov	r1, r4
 80055b8:	4628      	mov	r0, r5
 80055ba:	f000 feaf 	bl	800631c <__smakebuf_r>
 80055be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055c2:	f013 0201 	ands.w	r2, r3, #1
 80055c6:	d00a      	beq.n	80055de <__swsetup_r+0x9a>
 80055c8:	2200      	movs	r2, #0
 80055ca:	60a2      	str	r2, [r4, #8]
 80055cc:	6962      	ldr	r2, [r4, #20]
 80055ce:	4252      	negs	r2, r2
 80055d0:	61a2      	str	r2, [r4, #24]
 80055d2:	6922      	ldr	r2, [r4, #16]
 80055d4:	b942      	cbnz	r2, 80055e8 <__swsetup_r+0xa4>
 80055d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80055da:	d1c5      	bne.n	8005568 <__swsetup_r+0x24>
 80055dc:	bd38      	pop	{r3, r4, r5, pc}
 80055de:	0799      	lsls	r1, r3, #30
 80055e0:	bf58      	it	pl
 80055e2:	6962      	ldrpl	r2, [r4, #20]
 80055e4:	60a2      	str	r2, [r4, #8]
 80055e6:	e7f4      	b.n	80055d2 <__swsetup_r+0x8e>
 80055e8:	2000      	movs	r0, #0
 80055ea:	e7f7      	b.n	80055dc <__swsetup_r+0x98>
 80055ec:	20000030 	.word	0x20000030

080055f0 <memmove>:
 80055f0:	4288      	cmp	r0, r1
 80055f2:	b510      	push	{r4, lr}
 80055f4:	eb01 0402 	add.w	r4, r1, r2
 80055f8:	d902      	bls.n	8005600 <memmove+0x10>
 80055fa:	4284      	cmp	r4, r0
 80055fc:	4623      	mov	r3, r4
 80055fe:	d807      	bhi.n	8005610 <memmove+0x20>
 8005600:	1e43      	subs	r3, r0, #1
 8005602:	42a1      	cmp	r1, r4
 8005604:	d008      	beq.n	8005618 <memmove+0x28>
 8005606:	f811 2b01 	ldrb.w	r2, [r1], #1
 800560a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800560e:	e7f8      	b.n	8005602 <memmove+0x12>
 8005610:	4402      	add	r2, r0
 8005612:	4601      	mov	r1, r0
 8005614:	428a      	cmp	r2, r1
 8005616:	d100      	bne.n	800561a <memmove+0x2a>
 8005618:	bd10      	pop	{r4, pc}
 800561a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800561e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005622:	e7f7      	b.n	8005614 <memmove+0x24>

08005624 <memset>:
 8005624:	4402      	add	r2, r0
 8005626:	4603      	mov	r3, r0
 8005628:	4293      	cmp	r3, r2
 800562a:	d100      	bne.n	800562e <memset+0xa>
 800562c:	4770      	bx	lr
 800562e:	f803 1b01 	strb.w	r1, [r3], #1
 8005632:	e7f9      	b.n	8005628 <memset+0x4>

08005634 <_close_r>:
 8005634:	b538      	push	{r3, r4, r5, lr}
 8005636:	4d06      	ldr	r5, [pc, #24]	@ (8005650 <_close_r+0x1c>)
 8005638:	2300      	movs	r3, #0
 800563a:	4604      	mov	r4, r0
 800563c:	4608      	mov	r0, r1
 800563e:	602b      	str	r3, [r5, #0]
 8005640:	f7fb fee6 	bl	8001410 <_close>
 8005644:	1c43      	adds	r3, r0, #1
 8005646:	d102      	bne.n	800564e <_close_r+0x1a>
 8005648:	682b      	ldr	r3, [r5, #0]
 800564a:	b103      	cbz	r3, 800564e <_close_r+0x1a>
 800564c:	6023      	str	r3, [r4, #0]
 800564e:	bd38      	pop	{r3, r4, r5, pc}
 8005650:	200007ec 	.word	0x200007ec

08005654 <_lseek_r>:
 8005654:	b538      	push	{r3, r4, r5, lr}
 8005656:	4d07      	ldr	r5, [pc, #28]	@ (8005674 <_lseek_r+0x20>)
 8005658:	4604      	mov	r4, r0
 800565a:	4608      	mov	r0, r1
 800565c:	4611      	mov	r1, r2
 800565e:	2200      	movs	r2, #0
 8005660:	602a      	str	r2, [r5, #0]
 8005662:	461a      	mov	r2, r3
 8005664:	f7fb fee0 	bl	8001428 <_lseek>
 8005668:	1c43      	adds	r3, r0, #1
 800566a:	d102      	bne.n	8005672 <_lseek_r+0x1e>
 800566c:	682b      	ldr	r3, [r5, #0]
 800566e:	b103      	cbz	r3, 8005672 <_lseek_r+0x1e>
 8005670:	6023      	str	r3, [r4, #0]
 8005672:	bd38      	pop	{r3, r4, r5, pc}
 8005674:	200007ec 	.word	0x200007ec

08005678 <_read_r>:
 8005678:	b538      	push	{r3, r4, r5, lr}
 800567a:	4d07      	ldr	r5, [pc, #28]	@ (8005698 <_read_r+0x20>)
 800567c:	4604      	mov	r4, r0
 800567e:	4608      	mov	r0, r1
 8005680:	4611      	mov	r1, r2
 8005682:	2200      	movs	r2, #0
 8005684:	602a      	str	r2, [r5, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	f7fb feb4 	bl	80013f4 <_read>
 800568c:	1c43      	adds	r3, r0, #1
 800568e:	d102      	bne.n	8005696 <_read_r+0x1e>
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	b103      	cbz	r3, 8005696 <_read_r+0x1e>
 8005694:	6023      	str	r3, [r4, #0]
 8005696:	bd38      	pop	{r3, r4, r5, pc}
 8005698:	200007ec 	.word	0x200007ec

0800569c <_write_r>:
 800569c:	b538      	push	{r3, r4, r5, lr}
 800569e:	4d07      	ldr	r5, [pc, #28]	@ (80056bc <_write_r+0x20>)
 80056a0:	4604      	mov	r4, r0
 80056a2:	4608      	mov	r0, r1
 80056a4:	4611      	mov	r1, r2
 80056a6:	2200      	movs	r2, #0
 80056a8:	602a      	str	r2, [r5, #0]
 80056aa:	461a      	mov	r2, r3
 80056ac:	f7fb f802 	bl	80006b4 <_write>
 80056b0:	1c43      	adds	r3, r0, #1
 80056b2:	d102      	bne.n	80056ba <_write_r+0x1e>
 80056b4:	682b      	ldr	r3, [r5, #0]
 80056b6:	b103      	cbz	r3, 80056ba <_write_r+0x1e>
 80056b8:	6023      	str	r3, [r4, #0]
 80056ba:	bd38      	pop	{r3, r4, r5, pc}
 80056bc:	200007ec 	.word	0x200007ec

080056c0 <__errno>:
 80056c0:	4b01      	ldr	r3, [pc, #4]	@ (80056c8 <__errno+0x8>)
 80056c2:	6818      	ldr	r0, [r3, #0]
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	20000030 	.word	0x20000030

080056cc <__libc_init_array>:
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	4d0d      	ldr	r5, [pc, #52]	@ (8005704 <__libc_init_array+0x38>)
 80056d0:	4c0d      	ldr	r4, [pc, #52]	@ (8005708 <__libc_init_array+0x3c>)
 80056d2:	1b64      	subs	r4, r4, r5
 80056d4:	10a4      	asrs	r4, r4, #2
 80056d6:	2600      	movs	r6, #0
 80056d8:	42a6      	cmp	r6, r4
 80056da:	d109      	bne.n	80056f0 <__libc_init_array+0x24>
 80056dc:	4d0b      	ldr	r5, [pc, #44]	@ (800570c <__libc_init_array+0x40>)
 80056de:	4c0c      	ldr	r4, [pc, #48]	@ (8005710 <__libc_init_array+0x44>)
 80056e0:	f000 fec0 	bl	8006464 <_init>
 80056e4:	1b64      	subs	r4, r4, r5
 80056e6:	10a4      	asrs	r4, r4, #2
 80056e8:	2600      	movs	r6, #0
 80056ea:	42a6      	cmp	r6, r4
 80056ec:	d105      	bne.n	80056fa <__libc_init_array+0x2e>
 80056ee:	bd70      	pop	{r4, r5, r6, pc}
 80056f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80056f4:	4798      	blx	r3
 80056f6:	3601      	adds	r6, #1
 80056f8:	e7ee      	b.n	80056d8 <__libc_init_array+0xc>
 80056fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80056fe:	4798      	blx	r3
 8005700:	3601      	adds	r6, #1
 8005702:	e7f2      	b.n	80056ea <__libc_init_array+0x1e>
 8005704:	08006e44 	.word	0x08006e44
 8005708:	08006e44 	.word	0x08006e44
 800570c:	08006e44 	.word	0x08006e44
 8005710:	08006e48 	.word	0x08006e48

08005714 <__retarget_lock_init_recursive>:
 8005714:	4770      	bx	lr

08005716 <__retarget_lock_acquire_recursive>:
 8005716:	4770      	bx	lr

08005718 <__retarget_lock_release_recursive>:
 8005718:	4770      	bx	lr

0800571a <memcpy>:
 800571a:	440a      	add	r2, r1
 800571c:	4291      	cmp	r1, r2
 800571e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005722:	d100      	bne.n	8005726 <memcpy+0xc>
 8005724:	4770      	bx	lr
 8005726:	b510      	push	{r4, lr}
 8005728:	f811 4b01 	ldrb.w	r4, [r1], #1
 800572c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005730:	4291      	cmp	r1, r2
 8005732:	d1f9      	bne.n	8005728 <memcpy+0xe>
 8005734:	bd10      	pop	{r4, pc}
	...

08005738 <_free_r>:
 8005738:	b538      	push	{r3, r4, r5, lr}
 800573a:	4605      	mov	r5, r0
 800573c:	2900      	cmp	r1, #0
 800573e:	d041      	beq.n	80057c4 <_free_r+0x8c>
 8005740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005744:	1f0c      	subs	r4, r1, #4
 8005746:	2b00      	cmp	r3, #0
 8005748:	bfb8      	it	lt
 800574a:	18e4      	addlt	r4, r4, r3
 800574c:	f000 f8e0 	bl	8005910 <__malloc_lock>
 8005750:	4a1d      	ldr	r2, [pc, #116]	@ (80057c8 <_free_r+0x90>)
 8005752:	6813      	ldr	r3, [r2, #0]
 8005754:	b933      	cbnz	r3, 8005764 <_free_r+0x2c>
 8005756:	6063      	str	r3, [r4, #4]
 8005758:	6014      	str	r4, [r2, #0]
 800575a:	4628      	mov	r0, r5
 800575c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005760:	f000 b8dc 	b.w	800591c <__malloc_unlock>
 8005764:	42a3      	cmp	r3, r4
 8005766:	d908      	bls.n	800577a <_free_r+0x42>
 8005768:	6820      	ldr	r0, [r4, #0]
 800576a:	1821      	adds	r1, r4, r0
 800576c:	428b      	cmp	r3, r1
 800576e:	bf01      	itttt	eq
 8005770:	6819      	ldreq	r1, [r3, #0]
 8005772:	685b      	ldreq	r3, [r3, #4]
 8005774:	1809      	addeq	r1, r1, r0
 8005776:	6021      	streq	r1, [r4, #0]
 8005778:	e7ed      	b.n	8005756 <_free_r+0x1e>
 800577a:	461a      	mov	r2, r3
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	b10b      	cbz	r3, 8005784 <_free_r+0x4c>
 8005780:	42a3      	cmp	r3, r4
 8005782:	d9fa      	bls.n	800577a <_free_r+0x42>
 8005784:	6811      	ldr	r1, [r2, #0]
 8005786:	1850      	adds	r0, r2, r1
 8005788:	42a0      	cmp	r0, r4
 800578a:	d10b      	bne.n	80057a4 <_free_r+0x6c>
 800578c:	6820      	ldr	r0, [r4, #0]
 800578e:	4401      	add	r1, r0
 8005790:	1850      	adds	r0, r2, r1
 8005792:	4283      	cmp	r3, r0
 8005794:	6011      	str	r1, [r2, #0]
 8005796:	d1e0      	bne.n	800575a <_free_r+0x22>
 8005798:	6818      	ldr	r0, [r3, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	6053      	str	r3, [r2, #4]
 800579e:	4408      	add	r0, r1
 80057a0:	6010      	str	r0, [r2, #0]
 80057a2:	e7da      	b.n	800575a <_free_r+0x22>
 80057a4:	d902      	bls.n	80057ac <_free_r+0x74>
 80057a6:	230c      	movs	r3, #12
 80057a8:	602b      	str	r3, [r5, #0]
 80057aa:	e7d6      	b.n	800575a <_free_r+0x22>
 80057ac:	6820      	ldr	r0, [r4, #0]
 80057ae:	1821      	adds	r1, r4, r0
 80057b0:	428b      	cmp	r3, r1
 80057b2:	bf04      	itt	eq
 80057b4:	6819      	ldreq	r1, [r3, #0]
 80057b6:	685b      	ldreq	r3, [r3, #4]
 80057b8:	6063      	str	r3, [r4, #4]
 80057ba:	bf04      	itt	eq
 80057bc:	1809      	addeq	r1, r1, r0
 80057be:	6021      	streq	r1, [r4, #0]
 80057c0:	6054      	str	r4, [r2, #4]
 80057c2:	e7ca      	b.n	800575a <_free_r+0x22>
 80057c4:	bd38      	pop	{r3, r4, r5, pc}
 80057c6:	bf00      	nop
 80057c8:	200007f8 	.word	0x200007f8

080057cc <sbrk_aligned>:
 80057cc:	b570      	push	{r4, r5, r6, lr}
 80057ce:	4e0f      	ldr	r6, [pc, #60]	@ (800580c <sbrk_aligned+0x40>)
 80057d0:	460c      	mov	r4, r1
 80057d2:	6831      	ldr	r1, [r6, #0]
 80057d4:	4605      	mov	r5, r0
 80057d6:	b911      	cbnz	r1, 80057de <sbrk_aligned+0x12>
 80057d8:	f000 fdfe 	bl	80063d8 <_sbrk_r>
 80057dc:	6030      	str	r0, [r6, #0]
 80057de:	4621      	mov	r1, r4
 80057e0:	4628      	mov	r0, r5
 80057e2:	f000 fdf9 	bl	80063d8 <_sbrk_r>
 80057e6:	1c43      	adds	r3, r0, #1
 80057e8:	d103      	bne.n	80057f2 <sbrk_aligned+0x26>
 80057ea:	f04f 34ff 	mov.w	r4, #4294967295
 80057ee:	4620      	mov	r0, r4
 80057f0:	bd70      	pop	{r4, r5, r6, pc}
 80057f2:	1cc4      	adds	r4, r0, #3
 80057f4:	f024 0403 	bic.w	r4, r4, #3
 80057f8:	42a0      	cmp	r0, r4
 80057fa:	d0f8      	beq.n	80057ee <sbrk_aligned+0x22>
 80057fc:	1a21      	subs	r1, r4, r0
 80057fe:	4628      	mov	r0, r5
 8005800:	f000 fdea 	bl	80063d8 <_sbrk_r>
 8005804:	3001      	adds	r0, #1
 8005806:	d1f2      	bne.n	80057ee <sbrk_aligned+0x22>
 8005808:	e7ef      	b.n	80057ea <sbrk_aligned+0x1e>
 800580a:	bf00      	nop
 800580c:	200007f4 	.word	0x200007f4

08005810 <_malloc_r>:
 8005810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005814:	1ccd      	adds	r5, r1, #3
 8005816:	f025 0503 	bic.w	r5, r5, #3
 800581a:	3508      	adds	r5, #8
 800581c:	2d0c      	cmp	r5, #12
 800581e:	bf38      	it	cc
 8005820:	250c      	movcc	r5, #12
 8005822:	2d00      	cmp	r5, #0
 8005824:	4606      	mov	r6, r0
 8005826:	db01      	blt.n	800582c <_malloc_r+0x1c>
 8005828:	42a9      	cmp	r1, r5
 800582a:	d904      	bls.n	8005836 <_malloc_r+0x26>
 800582c:	230c      	movs	r3, #12
 800582e:	6033      	str	r3, [r6, #0]
 8005830:	2000      	movs	r0, #0
 8005832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005836:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800590c <_malloc_r+0xfc>
 800583a:	f000 f869 	bl	8005910 <__malloc_lock>
 800583e:	f8d8 3000 	ldr.w	r3, [r8]
 8005842:	461c      	mov	r4, r3
 8005844:	bb44      	cbnz	r4, 8005898 <_malloc_r+0x88>
 8005846:	4629      	mov	r1, r5
 8005848:	4630      	mov	r0, r6
 800584a:	f7ff ffbf 	bl	80057cc <sbrk_aligned>
 800584e:	1c43      	adds	r3, r0, #1
 8005850:	4604      	mov	r4, r0
 8005852:	d158      	bne.n	8005906 <_malloc_r+0xf6>
 8005854:	f8d8 4000 	ldr.w	r4, [r8]
 8005858:	4627      	mov	r7, r4
 800585a:	2f00      	cmp	r7, #0
 800585c:	d143      	bne.n	80058e6 <_malloc_r+0xd6>
 800585e:	2c00      	cmp	r4, #0
 8005860:	d04b      	beq.n	80058fa <_malloc_r+0xea>
 8005862:	6823      	ldr	r3, [r4, #0]
 8005864:	4639      	mov	r1, r7
 8005866:	4630      	mov	r0, r6
 8005868:	eb04 0903 	add.w	r9, r4, r3
 800586c:	f000 fdb4 	bl	80063d8 <_sbrk_r>
 8005870:	4581      	cmp	r9, r0
 8005872:	d142      	bne.n	80058fa <_malloc_r+0xea>
 8005874:	6821      	ldr	r1, [r4, #0]
 8005876:	1a6d      	subs	r5, r5, r1
 8005878:	4629      	mov	r1, r5
 800587a:	4630      	mov	r0, r6
 800587c:	f7ff ffa6 	bl	80057cc <sbrk_aligned>
 8005880:	3001      	adds	r0, #1
 8005882:	d03a      	beq.n	80058fa <_malloc_r+0xea>
 8005884:	6823      	ldr	r3, [r4, #0]
 8005886:	442b      	add	r3, r5
 8005888:	6023      	str	r3, [r4, #0]
 800588a:	f8d8 3000 	ldr.w	r3, [r8]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	bb62      	cbnz	r2, 80058ec <_malloc_r+0xdc>
 8005892:	f8c8 7000 	str.w	r7, [r8]
 8005896:	e00f      	b.n	80058b8 <_malloc_r+0xa8>
 8005898:	6822      	ldr	r2, [r4, #0]
 800589a:	1b52      	subs	r2, r2, r5
 800589c:	d420      	bmi.n	80058e0 <_malloc_r+0xd0>
 800589e:	2a0b      	cmp	r2, #11
 80058a0:	d917      	bls.n	80058d2 <_malloc_r+0xc2>
 80058a2:	1961      	adds	r1, r4, r5
 80058a4:	42a3      	cmp	r3, r4
 80058a6:	6025      	str	r5, [r4, #0]
 80058a8:	bf18      	it	ne
 80058aa:	6059      	strne	r1, [r3, #4]
 80058ac:	6863      	ldr	r3, [r4, #4]
 80058ae:	bf08      	it	eq
 80058b0:	f8c8 1000 	streq.w	r1, [r8]
 80058b4:	5162      	str	r2, [r4, r5]
 80058b6:	604b      	str	r3, [r1, #4]
 80058b8:	4630      	mov	r0, r6
 80058ba:	f000 f82f 	bl	800591c <__malloc_unlock>
 80058be:	f104 000b 	add.w	r0, r4, #11
 80058c2:	1d23      	adds	r3, r4, #4
 80058c4:	f020 0007 	bic.w	r0, r0, #7
 80058c8:	1ac2      	subs	r2, r0, r3
 80058ca:	bf1c      	itt	ne
 80058cc:	1a1b      	subne	r3, r3, r0
 80058ce:	50a3      	strne	r3, [r4, r2]
 80058d0:	e7af      	b.n	8005832 <_malloc_r+0x22>
 80058d2:	6862      	ldr	r2, [r4, #4]
 80058d4:	42a3      	cmp	r3, r4
 80058d6:	bf0c      	ite	eq
 80058d8:	f8c8 2000 	streq.w	r2, [r8]
 80058dc:	605a      	strne	r2, [r3, #4]
 80058de:	e7eb      	b.n	80058b8 <_malloc_r+0xa8>
 80058e0:	4623      	mov	r3, r4
 80058e2:	6864      	ldr	r4, [r4, #4]
 80058e4:	e7ae      	b.n	8005844 <_malloc_r+0x34>
 80058e6:	463c      	mov	r4, r7
 80058e8:	687f      	ldr	r7, [r7, #4]
 80058ea:	e7b6      	b.n	800585a <_malloc_r+0x4a>
 80058ec:	461a      	mov	r2, r3
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	42a3      	cmp	r3, r4
 80058f2:	d1fb      	bne.n	80058ec <_malloc_r+0xdc>
 80058f4:	2300      	movs	r3, #0
 80058f6:	6053      	str	r3, [r2, #4]
 80058f8:	e7de      	b.n	80058b8 <_malloc_r+0xa8>
 80058fa:	230c      	movs	r3, #12
 80058fc:	6033      	str	r3, [r6, #0]
 80058fe:	4630      	mov	r0, r6
 8005900:	f000 f80c 	bl	800591c <__malloc_unlock>
 8005904:	e794      	b.n	8005830 <_malloc_r+0x20>
 8005906:	6005      	str	r5, [r0, #0]
 8005908:	e7d6      	b.n	80058b8 <_malloc_r+0xa8>
 800590a:	bf00      	nop
 800590c:	200007f8 	.word	0x200007f8

08005910 <__malloc_lock>:
 8005910:	4801      	ldr	r0, [pc, #4]	@ (8005918 <__malloc_lock+0x8>)
 8005912:	f7ff bf00 	b.w	8005716 <__retarget_lock_acquire_recursive>
 8005916:	bf00      	nop
 8005918:	200007f0 	.word	0x200007f0

0800591c <__malloc_unlock>:
 800591c:	4801      	ldr	r0, [pc, #4]	@ (8005924 <__malloc_unlock+0x8>)
 800591e:	f7ff befb 	b.w	8005718 <__retarget_lock_release_recursive>
 8005922:	bf00      	nop
 8005924:	200007f0 	.word	0x200007f0

08005928 <__ssputs_r>:
 8005928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800592c:	688e      	ldr	r6, [r1, #8]
 800592e:	461f      	mov	r7, r3
 8005930:	42be      	cmp	r6, r7
 8005932:	680b      	ldr	r3, [r1, #0]
 8005934:	4682      	mov	sl, r0
 8005936:	460c      	mov	r4, r1
 8005938:	4690      	mov	r8, r2
 800593a:	d82d      	bhi.n	8005998 <__ssputs_r+0x70>
 800593c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005940:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005944:	d026      	beq.n	8005994 <__ssputs_r+0x6c>
 8005946:	6965      	ldr	r5, [r4, #20]
 8005948:	6909      	ldr	r1, [r1, #16]
 800594a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800594e:	eba3 0901 	sub.w	r9, r3, r1
 8005952:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005956:	1c7b      	adds	r3, r7, #1
 8005958:	444b      	add	r3, r9
 800595a:	106d      	asrs	r5, r5, #1
 800595c:	429d      	cmp	r5, r3
 800595e:	bf38      	it	cc
 8005960:	461d      	movcc	r5, r3
 8005962:	0553      	lsls	r3, r2, #21
 8005964:	d527      	bpl.n	80059b6 <__ssputs_r+0x8e>
 8005966:	4629      	mov	r1, r5
 8005968:	f7ff ff52 	bl	8005810 <_malloc_r>
 800596c:	4606      	mov	r6, r0
 800596e:	b360      	cbz	r0, 80059ca <__ssputs_r+0xa2>
 8005970:	6921      	ldr	r1, [r4, #16]
 8005972:	464a      	mov	r2, r9
 8005974:	f7ff fed1 	bl	800571a <memcpy>
 8005978:	89a3      	ldrh	r3, [r4, #12]
 800597a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800597e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005982:	81a3      	strh	r3, [r4, #12]
 8005984:	6126      	str	r6, [r4, #16]
 8005986:	6165      	str	r5, [r4, #20]
 8005988:	444e      	add	r6, r9
 800598a:	eba5 0509 	sub.w	r5, r5, r9
 800598e:	6026      	str	r6, [r4, #0]
 8005990:	60a5      	str	r5, [r4, #8]
 8005992:	463e      	mov	r6, r7
 8005994:	42be      	cmp	r6, r7
 8005996:	d900      	bls.n	800599a <__ssputs_r+0x72>
 8005998:	463e      	mov	r6, r7
 800599a:	6820      	ldr	r0, [r4, #0]
 800599c:	4632      	mov	r2, r6
 800599e:	4641      	mov	r1, r8
 80059a0:	f7ff fe26 	bl	80055f0 <memmove>
 80059a4:	68a3      	ldr	r3, [r4, #8]
 80059a6:	1b9b      	subs	r3, r3, r6
 80059a8:	60a3      	str	r3, [r4, #8]
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	4433      	add	r3, r6
 80059ae:	6023      	str	r3, [r4, #0]
 80059b0:	2000      	movs	r0, #0
 80059b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059b6:	462a      	mov	r2, r5
 80059b8:	f000 fd1e 	bl	80063f8 <_realloc_r>
 80059bc:	4606      	mov	r6, r0
 80059be:	2800      	cmp	r0, #0
 80059c0:	d1e0      	bne.n	8005984 <__ssputs_r+0x5c>
 80059c2:	6921      	ldr	r1, [r4, #16]
 80059c4:	4650      	mov	r0, sl
 80059c6:	f7ff feb7 	bl	8005738 <_free_r>
 80059ca:	230c      	movs	r3, #12
 80059cc:	f8ca 3000 	str.w	r3, [sl]
 80059d0:	89a3      	ldrh	r3, [r4, #12]
 80059d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059d6:	81a3      	strh	r3, [r4, #12]
 80059d8:	f04f 30ff 	mov.w	r0, #4294967295
 80059dc:	e7e9      	b.n	80059b2 <__ssputs_r+0x8a>
	...

080059e0 <_svfiprintf_r>:
 80059e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e4:	4698      	mov	r8, r3
 80059e6:	898b      	ldrh	r3, [r1, #12]
 80059e8:	061b      	lsls	r3, r3, #24
 80059ea:	b09d      	sub	sp, #116	@ 0x74
 80059ec:	4607      	mov	r7, r0
 80059ee:	460d      	mov	r5, r1
 80059f0:	4614      	mov	r4, r2
 80059f2:	d510      	bpl.n	8005a16 <_svfiprintf_r+0x36>
 80059f4:	690b      	ldr	r3, [r1, #16]
 80059f6:	b973      	cbnz	r3, 8005a16 <_svfiprintf_r+0x36>
 80059f8:	2140      	movs	r1, #64	@ 0x40
 80059fa:	f7ff ff09 	bl	8005810 <_malloc_r>
 80059fe:	6028      	str	r0, [r5, #0]
 8005a00:	6128      	str	r0, [r5, #16]
 8005a02:	b930      	cbnz	r0, 8005a12 <_svfiprintf_r+0x32>
 8005a04:	230c      	movs	r3, #12
 8005a06:	603b      	str	r3, [r7, #0]
 8005a08:	f04f 30ff 	mov.w	r0, #4294967295
 8005a0c:	b01d      	add	sp, #116	@ 0x74
 8005a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a12:	2340      	movs	r3, #64	@ 0x40
 8005a14:	616b      	str	r3, [r5, #20]
 8005a16:	2300      	movs	r3, #0
 8005a18:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a1a:	2320      	movs	r3, #32
 8005a1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a20:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a24:	2330      	movs	r3, #48	@ 0x30
 8005a26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005bc4 <_svfiprintf_r+0x1e4>
 8005a2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a2e:	f04f 0901 	mov.w	r9, #1
 8005a32:	4623      	mov	r3, r4
 8005a34:	469a      	mov	sl, r3
 8005a36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a3a:	b10a      	cbz	r2, 8005a40 <_svfiprintf_r+0x60>
 8005a3c:	2a25      	cmp	r2, #37	@ 0x25
 8005a3e:	d1f9      	bne.n	8005a34 <_svfiprintf_r+0x54>
 8005a40:	ebba 0b04 	subs.w	fp, sl, r4
 8005a44:	d00b      	beq.n	8005a5e <_svfiprintf_r+0x7e>
 8005a46:	465b      	mov	r3, fp
 8005a48:	4622      	mov	r2, r4
 8005a4a:	4629      	mov	r1, r5
 8005a4c:	4638      	mov	r0, r7
 8005a4e:	f7ff ff6b 	bl	8005928 <__ssputs_r>
 8005a52:	3001      	adds	r0, #1
 8005a54:	f000 80a7 	beq.w	8005ba6 <_svfiprintf_r+0x1c6>
 8005a58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a5a:	445a      	add	r2, fp
 8005a5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a5e:	f89a 3000 	ldrb.w	r3, [sl]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 809f 	beq.w	8005ba6 <_svfiprintf_r+0x1c6>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a72:	f10a 0a01 	add.w	sl, sl, #1
 8005a76:	9304      	str	r3, [sp, #16]
 8005a78:	9307      	str	r3, [sp, #28]
 8005a7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a80:	4654      	mov	r4, sl
 8005a82:	2205      	movs	r2, #5
 8005a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a88:	484e      	ldr	r0, [pc, #312]	@ (8005bc4 <_svfiprintf_r+0x1e4>)
 8005a8a:	f7fa fba9 	bl	80001e0 <memchr>
 8005a8e:	9a04      	ldr	r2, [sp, #16]
 8005a90:	b9d8      	cbnz	r0, 8005aca <_svfiprintf_r+0xea>
 8005a92:	06d0      	lsls	r0, r2, #27
 8005a94:	bf44      	itt	mi
 8005a96:	2320      	movmi	r3, #32
 8005a98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a9c:	0711      	lsls	r1, r2, #28
 8005a9e:	bf44      	itt	mi
 8005aa0:	232b      	movmi	r3, #43	@ 0x2b
 8005aa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005aa6:	f89a 3000 	ldrb.w	r3, [sl]
 8005aaa:	2b2a      	cmp	r3, #42	@ 0x2a
 8005aac:	d015      	beq.n	8005ada <_svfiprintf_r+0xfa>
 8005aae:	9a07      	ldr	r2, [sp, #28]
 8005ab0:	4654      	mov	r4, sl
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	f04f 0c0a 	mov.w	ip, #10
 8005ab8:	4621      	mov	r1, r4
 8005aba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005abe:	3b30      	subs	r3, #48	@ 0x30
 8005ac0:	2b09      	cmp	r3, #9
 8005ac2:	d94b      	bls.n	8005b5c <_svfiprintf_r+0x17c>
 8005ac4:	b1b0      	cbz	r0, 8005af4 <_svfiprintf_r+0x114>
 8005ac6:	9207      	str	r2, [sp, #28]
 8005ac8:	e014      	b.n	8005af4 <_svfiprintf_r+0x114>
 8005aca:	eba0 0308 	sub.w	r3, r0, r8
 8005ace:	fa09 f303 	lsl.w	r3, r9, r3
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	9304      	str	r3, [sp, #16]
 8005ad6:	46a2      	mov	sl, r4
 8005ad8:	e7d2      	b.n	8005a80 <_svfiprintf_r+0xa0>
 8005ada:	9b03      	ldr	r3, [sp, #12]
 8005adc:	1d19      	adds	r1, r3, #4
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	9103      	str	r1, [sp, #12]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	bfbb      	ittet	lt
 8005ae6:	425b      	neglt	r3, r3
 8005ae8:	f042 0202 	orrlt.w	r2, r2, #2
 8005aec:	9307      	strge	r3, [sp, #28]
 8005aee:	9307      	strlt	r3, [sp, #28]
 8005af0:	bfb8      	it	lt
 8005af2:	9204      	strlt	r2, [sp, #16]
 8005af4:	7823      	ldrb	r3, [r4, #0]
 8005af6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005af8:	d10a      	bne.n	8005b10 <_svfiprintf_r+0x130>
 8005afa:	7863      	ldrb	r3, [r4, #1]
 8005afc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005afe:	d132      	bne.n	8005b66 <_svfiprintf_r+0x186>
 8005b00:	9b03      	ldr	r3, [sp, #12]
 8005b02:	1d1a      	adds	r2, r3, #4
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	9203      	str	r2, [sp, #12]
 8005b08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b0c:	3402      	adds	r4, #2
 8005b0e:	9305      	str	r3, [sp, #20]
 8005b10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005bd4 <_svfiprintf_r+0x1f4>
 8005b14:	7821      	ldrb	r1, [r4, #0]
 8005b16:	2203      	movs	r2, #3
 8005b18:	4650      	mov	r0, sl
 8005b1a:	f7fa fb61 	bl	80001e0 <memchr>
 8005b1e:	b138      	cbz	r0, 8005b30 <_svfiprintf_r+0x150>
 8005b20:	9b04      	ldr	r3, [sp, #16]
 8005b22:	eba0 000a 	sub.w	r0, r0, sl
 8005b26:	2240      	movs	r2, #64	@ 0x40
 8005b28:	4082      	lsls	r2, r0
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	3401      	adds	r4, #1
 8005b2e:	9304      	str	r3, [sp, #16]
 8005b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b34:	4824      	ldr	r0, [pc, #144]	@ (8005bc8 <_svfiprintf_r+0x1e8>)
 8005b36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b3a:	2206      	movs	r2, #6
 8005b3c:	f7fa fb50 	bl	80001e0 <memchr>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	d036      	beq.n	8005bb2 <_svfiprintf_r+0x1d2>
 8005b44:	4b21      	ldr	r3, [pc, #132]	@ (8005bcc <_svfiprintf_r+0x1ec>)
 8005b46:	bb1b      	cbnz	r3, 8005b90 <_svfiprintf_r+0x1b0>
 8005b48:	9b03      	ldr	r3, [sp, #12]
 8005b4a:	3307      	adds	r3, #7
 8005b4c:	f023 0307 	bic.w	r3, r3, #7
 8005b50:	3308      	adds	r3, #8
 8005b52:	9303      	str	r3, [sp, #12]
 8005b54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b56:	4433      	add	r3, r6
 8005b58:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b5a:	e76a      	b.n	8005a32 <_svfiprintf_r+0x52>
 8005b5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b60:	460c      	mov	r4, r1
 8005b62:	2001      	movs	r0, #1
 8005b64:	e7a8      	b.n	8005ab8 <_svfiprintf_r+0xd8>
 8005b66:	2300      	movs	r3, #0
 8005b68:	3401      	adds	r4, #1
 8005b6a:	9305      	str	r3, [sp, #20]
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	f04f 0c0a 	mov.w	ip, #10
 8005b72:	4620      	mov	r0, r4
 8005b74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b78:	3a30      	subs	r2, #48	@ 0x30
 8005b7a:	2a09      	cmp	r2, #9
 8005b7c:	d903      	bls.n	8005b86 <_svfiprintf_r+0x1a6>
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d0c6      	beq.n	8005b10 <_svfiprintf_r+0x130>
 8005b82:	9105      	str	r1, [sp, #20]
 8005b84:	e7c4      	b.n	8005b10 <_svfiprintf_r+0x130>
 8005b86:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e7f0      	b.n	8005b72 <_svfiprintf_r+0x192>
 8005b90:	ab03      	add	r3, sp, #12
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	462a      	mov	r2, r5
 8005b96:	4b0e      	ldr	r3, [pc, #56]	@ (8005bd0 <_svfiprintf_r+0x1f0>)
 8005b98:	a904      	add	r1, sp, #16
 8005b9a:	4638      	mov	r0, r7
 8005b9c:	f3af 8000 	nop.w
 8005ba0:	1c42      	adds	r2, r0, #1
 8005ba2:	4606      	mov	r6, r0
 8005ba4:	d1d6      	bne.n	8005b54 <_svfiprintf_r+0x174>
 8005ba6:	89ab      	ldrh	r3, [r5, #12]
 8005ba8:	065b      	lsls	r3, r3, #25
 8005baa:	f53f af2d 	bmi.w	8005a08 <_svfiprintf_r+0x28>
 8005bae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005bb0:	e72c      	b.n	8005a0c <_svfiprintf_r+0x2c>
 8005bb2:	ab03      	add	r3, sp, #12
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	462a      	mov	r2, r5
 8005bb8:	4b05      	ldr	r3, [pc, #20]	@ (8005bd0 <_svfiprintf_r+0x1f0>)
 8005bba:	a904      	add	r1, sp, #16
 8005bbc:	4638      	mov	r0, r7
 8005bbe:	f000 f9bb 	bl	8005f38 <_printf_i>
 8005bc2:	e7ed      	b.n	8005ba0 <_svfiprintf_r+0x1c0>
 8005bc4:	08006e09 	.word	0x08006e09
 8005bc8:	08006e13 	.word	0x08006e13
 8005bcc:	00000000 	.word	0x00000000
 8005bd0:	08005929 	.word	0x08005929
 8005bd4:	08006e0f 	.word	0x08006e0f

08005bd8 <__sfputc_r>:
 8005bd8:	6893      	ldr	r3, [r2, #8]
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	b410      	push	{r4}
 8005be0:	6093      	str	r3, [r2, #8]
 8005be2:	da08      	bge.n	8005bf6 <__sfputc_r+0x1e>
 8005be4:	6994      	ldr	r4, [r2, #24]
 8005be6:	42a3      	cmp	r3, r4
 8005be8:	db01      	blt.n	8005bee <__sfputc_r+0x16>
 8005bea:	290a      	cmp	r1, #10
 8005bec:	d103      	bne.n	8005bf6 <__sfputc_r+0x1e>
 8005bee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bf2:	f7ff bc68 	b.w	80054c6 <__swbuf_r>
 8005bf6:	6813      	ldr	r3, [r2, #0]
 8005bf8:	1c58      	adds	r0, r3, #1
 8005bfa:	6010      	str	r0, [r2, #0]
 8005bfc:	7019      	strb	r1, [r3, #0]
 8005bfe:	4608      	mov	r0, r1
 8005c00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <__sfputs_r>:
 8005c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c08:	4606      	mov	r6, r0
 8005c0a:	460f      	mov	r7, r1
 8005c0c:	4614      	mov	r4, r2
 8005c0e:	18d5      	adds	r5, r2, r3
 8005c10:	42ac      	cmp	r4, r5
 8005c12:	d101      	bne.n	8005c18 <__sfputs_r+0x12>
 8005c14:	2000      	movs	r0, #0
 8005c16:	e007      	b.n	8005c28 <__sfputs_r+0x22>
 8005c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c1c:	463a      	mov	r2, r7
 8005c1e:	4630      	mov	r0, r6
 8005c20:	f7ff ffda 	bl	8005bd8 <__sfputc_r>
 8005c24:	1c43      	adds	r3, r0, #1
 8005c26:	d1f3      	bne.n	8005c10 <__sfputs_r+0xa>
 8005c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c2c <_vfiprintf_r>:
 8005c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c30:	460d      	mov	r5, r1
 8005c32:	b09d      	sub	sp, #116	@ 0x74
 8005c34:	4614      	mov	r4, r2
 8005c36:	4698      	mov	r8, r3
 8005c38:	4606      	mov	r6, r0
 8005c3a:	b118      	cbz	r0, 8005c44 <_vfiprintf_r+0x18>
 8005c3c:	6a03      	ldr	r3, [r0, #32]
 8005c3e:	b90b      	cbnz	r3, 8005c44 <_vfiprintf_r+0x18>
 8005c40:	f7ff fb38 	bl	80052b4 <__sinit>
 8005c44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c46:	07d9      	lsls	r1, r3, #31
 8005c48:	d405      	bmi.n	8005c56 <_vfiprintf_r+0x2a>
 8005c4a:	89ab      	ldrh	r3, [r5, #12]
 8005c4c:	059a      	lsls	r2, r3, #22
 8005c4e:	d402      	bmi.n	8005c56 <_vfiprintf_r+0x2a>
 8005c50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c52:	f7ff fd60 	bl	8005716 <__retarget_lock_acquire_recursive>
 8005c56:	89ab      	ldrh	r3, [r5, #12]
 8005c58:	071b      	lsls	r3, r3, #28
 8005c5a:	d501      	bpl.n	8005c60 <_vfiprintf_r+0x34>
 8005c5c:	692b      	ldr	r3, [r5, #16]
 8005c5e:	b99b      	cbnz	r3, 8005c88 <_vfiprintf_r+0x5c>
 8005c60:	4629      	mov	r1, r5
 8005c62:	4630      	mov	r0, r6
 8005c64:	f7ff fc6e 	bl	8005544 <__swsetup_r>
 8005c68:	b170      	cbz	r0, 8005c88 <_vfiprintf_r+0x5c>
 8005c6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c6c:	07dc      	lsls	r4, r3, #31
 8005c6e:	d504      	bpl.n	8005c7a <_vfiprintf_r+0x4e>
 8005c70:	f04f 30ff 	mov.w	r0, #4294967295
 8005c74:	b01d      	add	sp, #116	@ 0x74
 8005c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c7a:	89ab      	ldrh	r3, [r5, #12]
 8005c7c:	0598      	lsls	r0, r3, #22
 8005c7e:	d4f7      	bmi.n	8005c70 <_vfiprintf_r+0x44>
 8005c80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c82:	f7ff fd49 	bl	8005718 <__retarget_lock_release_recursive>
 8005c86:	e7f3      	b.n	8005c70 <_vfiprintf_r+0x44>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c8c:	2320      	movs	r3, #32
 8005c8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c92:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c96:	2330      	movs	r3, #48	@ 0x30
 8005c98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005e48 <_vfiprintf_r+0x21c>
 8005c9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ca0:	f04f 0901 	mov.w	r9, #1
 8005ca4:	4623      	mov	r3, r4
 8005ca6:	469a      	mov	sl, r3
 8005ca8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cac:	b10a      	cbz	r2, 8005cb2 <_vfiprintf_r+0x86>
 8005cae:	2a25      	cmp	r2, #37	@ 0x25
 8005cb0:	d1f9      	bne.n	8005ca6 <_vfiprintf_r+0x7a>
 8005cb2:	ebba 0b04 	subs.w	fp, sl, r4
 8005cb6:	d00b      	beq.n	8005cd0 <_vfiprintf_r+0xa4>
 8005cb8:	465b      	mov	r3, fp
 8005cba:	4622      	mov	r2, r4
 8005cbc:	4629      	mov	r1, r5
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	f7ff ffa1 	bl	8005c06 <__sfputs_r>
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	f000 80a7 	beq.w	8005e18 <_vfiprintf_r+0x1ec>
 8005cca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ccc:	445a      	add	r2, fp
 8005cce:	9209      	str	r2, [sp, #36]	@ 0x24
 8005cd0:	f89a 3000 	ldrb.w	r3, [sl]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 809f 	beq.w	8005e18 <_vfiprintf_r+0x1ec>
 8005cda:	2300      	movs	r3, #0
 8005cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ce4:	f10a 0a01 	add.w	sl, sl, #1
 8005ce8:	9304      	str	r3, [sp, #16]
 8005cea:	9307      	str	r3, [sp, #28]
 8005cec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005cf0:	931a      	str	r3, [sp, #104]	@ 0x68
 8005cf2:	4654      	mov	r4, sl
 8005cf4:	2205      	movs	r2, #5
 8005cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cfa:	4853      	ldr	r0, [pc, #332]	@ (8005e48 <_vfiprintf_r+0x21c>)
 8005cfc:	f7fa fa70 	bl	80001e0 <memchr>
 8005d00:	9a04      	ldr	r2, [sp, #16]
 8005d02:	b9d8      	cbnz	r0, 8005d3c <_vfiprintf_r+0x110>
 8005d04:	06d1      	lsls	r1, r2, #27
 8005d06:	bf44      	itt	mi
 8005d08:	2320      	movmi	r3, #32
 8005d0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d0e:	0713      	lsls	r3, r2, #28
 8005d10:	bf44      	itt	mi
 8005d12:	232b      	movmi	r3, #43	@ 0x2b
 8005d14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d18:	f89a 3000 	ldrb.w	r3, [sl]
 8005d1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d1e:	d015      	beq.n	8005d4c <_vfiprintf_r+0x120>
 8005d20:	9a07      	ldr	r2, [sp, #28]
 8005d22:	4654      	mov	r4, sl
 8005d24:	2000      	movs	r0, #0
 8005d26:	f04f 0c0a 	mov.w	ip, #10
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d30:	3b30      	subs	r3, #48	@ 0x30
 8005d32:	2b09      	cmp	r3, #9
 8005d34:	d94b      	bls.n	8005dce <_vfiprintf_r+0x1a2>
 8005d36:	b1b0      	cbz	r0, 8005d66 <_vfiprintf_r+0x13a>
 8005d38:	9207      	str	r2, [sp, #28]
 8005d3a:	e014      	b.n	8005d66 <_vfiprintf_r+0x13a>
 8005d3c:	eba0 0308 	sub.w	r3, r0, r8
 8005d40:	fa09 f303 	lsl.w	r3, r9, r3
 8005d44:	4313      	orrs	r3, r2
 8005d46:	9304      	str	r3, [sp, #16]
 8005d48:	46a2      	mov	sl, r4
 8005d4a:	e7d2      	b.n	8005cf2 <_vfiprintf_r+0xc6>
 8005d4c:	9b03      	ldr	r3, [sp, #12]
 8005d4e:	1d19      	adds	r1, r3, #4
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	9103      	str	r1, [sp, #12]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	bfbb      	ittet	lt
 8005d58:	425b      	neglt	r3, r3
 8005d5a:	f042 0202 	orrlt.w	r2, r2, #2
 8005d5e:	9307      	strge	r3, [sp, #28]
 8005d60:	9307      	strlt	r3, [sp, #28]
 8005d62:	bfb8      	it	lt
 8005d64:	9204      	strlt	r2, [sp, #16]
 8005d66:	7823      	ldrb	r3, [r4, #0]
 8005d68:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d6a:	d10a      	bne.n	8005d82 <_vfiprintf_r+0x156>
 8005d6c:	7863      	ldrb	r3, [r4, #1]
 8005d6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d70:	d132      	bne.n	8005dd8 <_vfiprintf_r+0x1ac>
 8005d72:	9b03      	ldr	r3, [sp, #12]
 8005d74:	1d1a      	adds	r2, r3, #4
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	9203      	str	r2, [sp, #12]
 8005d7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d7e:	3402      	adds	r4, #2
 8005d80:	9305      	str	r3, [sp, #20]
 8005d82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005e58 <_vfiprintf_r+0x22c>
 8005d86:	7821      	ldrb	r1, [r4, #0]
 8005d88:	2203      	movs	r2, #3
 8005d8a:	4650      	mov	r0, sl
 8005d8c:	f7fa fa28 	bl	80001e0 <memchr>
 8005d90:	b138      	cbz	r0, 8005da2 <_vfiprintf_r+0x176>
 8005d92:	9b04      	ldr	r3, [sp, #16]
 8005d94:	eba0 000a 	sub.w	r0, r0, sl
 8005d98:	2240      	movs	r2, #64	@ 0x40
 8005d9a:	4082      	lsls	r2, r0
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	3401      	adds	r4, #1
 8005da0:	9304      	str	r3, [sp, #16]
 8005da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005da6:	4829      	ldr	r0, [pc, #164]	@ (8005e4c <_vfiprintf_r+0x220>)
 8005da8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005dac:	2206      	movs	r2, #6
 8005dae:	f7fa fa17 	bl	80001e0 <memchr>
 8005db2:	2800      	cmp	r0, #0
 8005db4:	d03f      	beq.n	8005e36 <_vfiprintf_r+0x20a>
 8005db6:	4b26      	ldr	r3, [pc, #152]	@ (8005e50 <_vfiprintf_r+0x224>)
 8005db8:	bb1b      	cbnz	r3, 8005e02 <_vfiprintf_r+0x1d6>
 8005dba:	9b03      	ldr	r3, [sp, #12]
 8005dbc:	3307      	adds	r3, #7
 8005dbe:	f023 0307 	bic.w	r3, r3, #7
 8005dc2:	3308      	adds	r3, #8
 8005dc4:	9303      	str	r3, [sp, #12]
 8005dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dc8:	443b      	add	r3, r7
 8005dca:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dcc:	e76a      	b.n	8005ca4 <_vfiprintf_r+0x78>
 8005dce:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dd2:	460c      	mov	r4, r1
 8005dd4:	2001      	movs	r0, #1
 8005dd6:	e7a8      	b.n	8005d2a <_vfiprintf_r+0xfe>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	3401      	adds	r4, #1
 8005ddc:	9305      	str	r3, [sp, #20]
 8005dde:	4619      	mov	r1, r3
 8005de0:	f04f 0c0a 	mov.w	ip, #10
 8005de4:	4620      	mov	r0, r4
 8005de6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dea:	3a30      	subs	r2, #48	@ 0x30
 8005dec:	2a09      	cmp	r2, #9
 8005dee:	d903      	bls.n	8005df8 <_vfiprintf_r+0x1cc>
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d0c6      	beq.n	8005d82 <_vfiprintf_r+0x156>
 8005df4:	9105      	str	r1, [sp, #20]
 8005df6:	e7c4      	b.n	8005d82 <_vfiprintf_r+0x156>
 8005df8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e7f0      	b.n	8005de4 <_vfiprintf_r+0x1b8>
 8005e02:	ab03      	add	r3, sp, #12
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	462a      	mov	r2, r5
 8005e08:	4b12      	ldr	r3, [pc, #72]	@ (8005e54 <_vfiprintf_r+0x228>)
 8005e0a:	a904      	add	r1, sp, #16
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	f3af 8000 	nop.w
 8005e12:	4607      	mov	r7, r0
 8005e14:	1c78      	adds	r0, r7, #1
 8005e16:	d1d6      	bne.n	8005dc6 <_vfiprintf_r+0x19a>
 8005e18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e1a:	07d9      	lsls	r1, r3, #31
 8005e1c:	d405      	bmi.n	8005e2a <_vfiprintf_r+0x1fe>
 8005e1e:	89ab      	ldrh	r3, [r5, #12]
 8005e20:	059a      	lsls	r2, r3, #22
 8005e22:	d402      	bmi.n	8005e2a <_vfiprintf_r+0x1fe>
 8005e24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e26:	f7ff fc77 	bl	8005718 <__retarget_lock_release_recursive>
 8005e2a:	89ab      	ldrh	r3, [r5, #12]
 8005e2c:	065b      	lsls	r3, r3, #25
 8005e2e:	f53f af1f 	bmi.w	8005c70 <_vfiprintf_r+0x44>
 8005e32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e34:	e71e      	b.n	8005c74 <_vfiprintf_r+0x48>
 8005e36:	ab03      	add	r3, sp, #12
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	462a      	mov	r2, r5
 8005e3c:	4b05      	ldr	r3, [pc, #20]	@ (8005e54 <_vfiprintf_r+0x228>)
 8005e3e:	a904      	add	r1, sp, #16
 8005e40:	4630      	mov	r0, r6
 8005e42:	f000 f879 	bl	8005f38 <_printf_i>
 8005e46:	e7e4      	b.n	8005e12 <_vfiprintf_r+0x1e6>
 8005e48:	08006e09 	.word	0x08006e09
 8005e4c:	08006e13 	.word	0x08006e13
 8005e50:	00000000 	.word	0x00000000
 8005e54:	08005c07 	.word	0x08005c07
 8005e58:	08006e0f 	.word	0x08006e0f

08005e5c <_printf_common>:
 8005e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e60:	4616      	mov	r6, r2
 8005e62:	4698      	mov	r8, r3
 8005e64:	688a      	ldr	r2, [r1, #8]
 8005e66:	690b      	ldr	r3, [r1, #16]
 8005e68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	bfb8      	it	lt
 8005e70:	4613      	movlt	r3, r2
 8005e72:	6033      	str	r3, [r6, #0]
 8005e74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e78:	4607      	mov	r7, r0
 8005e7a:	460c      	mov	r4, r1
 8005e7c:	b10a      	cbz	r2, 8005e82 <_printf_common+0x26>
 8005e7e:	3301      	adds	r3, #1
 8005e80:	6033      	str	r3, [r6, #0]
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	0699      	lsls	r1, r3, #26
 8005e86:	bf42      	ittt	mi
 8005e88:	6833      	ldrmi	r3, [r6, #0]
 8005e8a:	3302      	addmi	r3, #2
 8005e8c:	6033      	strmi	r3, [r6, #0]
 8005e8e:	6825      	ldr	r5, [r4, #0]
 8005e90:	f015 0506 	ands.w	r5, r5, #6
 8005e94:	d106      	bne.n	8005ea4 <_printf_common+0x48>
 8005e96:	f104 0a19 	add.w	sl, r4, #25
 8005e9a:	68e3      	ldr	r3, [r4, #12]
 8005e9c:	6832      	ldr	r2, [r6, #0]
 8005e9e:	1a9b      	subs	r3, r3, r2
 8005ea0:	42ab      	cmp	r3, r5
 8005ea2:	dc26      	bgt.n	8005ef2 <_printf_common+0x96>
 8005ea4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ea8:	6822      	ldr	r2, [r4, #0]
 8005eaa:	3b00      	subs	r3, #0
 8005eac:	bf18      	it	ne
 8005eae:	2301      	movne	r3, #1
 8005eb0:	0692      	lsls	r2, r2, #26
 8005eb2:	d42b      	bmi.n	8005f0c <_printf_common+0xb0>
 8005eb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005eb8:	4641      	mov	r1, r8
 8005eba:	4638      	mov	r0, r7
 8005ebc:	47c8      	blx	r9
 8005ebe:	3001      	adds	r0, #1
 8005ec0:	d01e      	beq.n	8005f00 <_printf_common+0xa4>
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	6922      	ldr	r2, [r4, #16]
 8005ec6:	f003 0306 	and.w	r3, r3, #6
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	bf02      	ittt	eq
 8005ece:	68e5      	ldreq	r5, [r4, #12]
 8005ed0:	6833      	ldreq	r3, [r6, #0]
 8005ed2:	1aed      	subeq	r5, r5, r3
 8005ed4:	68a3      	ldr	r3, [r4, #8]
 8005ed6:	bf0c      	ite	eq
 8005ed8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005edc:	2500      	movne	r5, #0
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	bfc4      	itt	gt
 8005ee2:	1a9b      	subgt	r3, r3, r2
 8005ee4:	18ed      	addgt	r5, r5, r3
 8005ee6:	2600      	movs	r6, #0
 8005ee8:	341a      	adds	r4, #26
 8005eea:	42b5      	cmp	r5, r6
 8005eec:	d11a      	bne.n	8005f24 <_printf_common+0xc8>
 8005eee:	2000      	movs	r0, #0
 8005ef0:	e008      	b.n	8005f04 <_printf_common+0xa8>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	4652      	mov	r2, sl
 8005ef6:	4641      	mov	r1, r8
 8005ef8:	4638      	mov	r0, r7
 8005efa:	47c8      	blx	r9
 8005efc:	3001      	adds	r0, #1
 8005efe:	d103      	bne.n	8005f08 <_printf_common+0xac>
 8005f00:	f04f 30ff 	mov.w	r0, #4294967295
 8005f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f08:	3501      	adds	r5, #1
 8005f0a:	e7c6      	b.n	8005e9a <_printf_common+0x3e>
 8005f0c:	18e1      	adds	r1, r4, r3
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	2030      	movs	r0, #48	@ 0x30
 8005f12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f16:	4422      	add	r2, r4
 8005f18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f20:	3302      	adds	r3, #2
 8005f22:	e7c7      	b.n	8005eb4 <_printf_common+0x58>
 8005f24:	2301      	movs	r3, #1
 8005f26:	4622      	mov	r2, r4
 8005f28:	4641      	mov	r1, r8
 8005f2a:	4638      	mov	r0, r7
 8005f2c:	47c8      	blx	r9
 8005f2e:	3001      	adds	r0, #1
 8005f30:	d0e6      	beq.n	8005f00 <_printf_common+0xa4>
 8005f32:	3601      	adds	r6, #1
 8005f34:	e7d9      	b.n	8005eea <_printf_common+0x8e>
	...

08005f38 <_printf_i>:
 8005f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f3c:	7e0f      	ldrb	r7, [r1, #24]
 8005f3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f40:	2f78      	cmp	r7, #120	@ 0x78
 8005f42:	4691      	mov	r9, r2
 8005f44:	4680      	mov	r8, r0
 8005f46:	460c      	mov	r4, r1
 8005f48:	469a      	mov	sl, r3
 8005f4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f4e:	d807      	bhi.n	8005f60 <_printf_i+0x28>
 8005f50:	2f62      	cmp	r7, #98	@ 0x62
 8005f52:	d80a      	bhi.n	8005f6a <_printf_i+0x32>
 8005f54:	2f00      	cmp	r7, #0
 8005f56:	f000 80d2 	beq.w	80060fe <_printf_i+0x1c6>
 8005f5a:	2f58      	cmp	r7, #88	@ 0x58
 8005f5c:	f000 80b9 	beq.w	80060d2 <_printf_i+0x19a>
 8005f60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f68:	e03a      	b.n	8005fe0 <_printf_i+0xa8>
 8005f6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f6e:	2b15      	cmp	r3, #21
 8005f70:	d8f6      	bhi.n	8005f60 <_printf_i+0x28>
 8005f72:	a101      	add	r1, pc, #4	@ (adr r1, 8005f78 <_printf_i+0x40>)
 8005f74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f78:	08005fd1 	.word	0x08005fd1
 8005f7c:	08005fe5 	.word	0x08005fe5
 8005f80:	08005f61 	.word	0x08005f61
 8005f84:	08005f61 	.word	0x08005f61
 8005f88:	08005f61 	.word	0x08005f61
 8005f8c:	08005f61 	.word	0x08005f61
 8005f90:	08005fe5 	.word	0x08005fe5
 8005f94:	08005f61 	.word	0x08005f61
 8005f98:	08005f61 	.word	0x08005f61
 8005f9c:	08005f61 	.word	0x08005f61
 8005fa0:	08005f61 	.word	0x08005f61
 8005fa4:	080060e5 	.word	0x080060e5
 8005fa8:	0800600f 	.word	0x0800600f
 8005fac:	0800609f 	.word	0x0800609f
 8005fb0:	08005f61 	.word	0x08005f61
 8005fb4:	08005f61 	.word	0x08005f61
 8005fb8:	08006107 	.word	0x08006107
 8005fbc:	08005f61 	.word	0x08005f61
 8005fc0:	0800600f 	.word	0x0800600f
 8005fc4:	08005f61 	.word	0x08005f61
 8005fc8:	08005f61 	.word	0x08005f61
 8005fcc:	080060a7 	.word	0x080060a7
 8005fd0:	6833      	ldr	r3, [r6, #0]
 8005fd2:	1d1a      	adds	r2, r3, #4
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	6032      	str	r2, [r6, #0]
 8005fd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e09d      	b.n	8006120 <_printf_i+0x1e8>
 8005fe4:	6833      	ldr	r3, [r6, #0]
 8005fe6:	6820      	ldr	r0, [r4, #0]
 8005fe8:	1d19      	adds	r1, r3, #4
 8005fea:	6031      	str	r1, [r6, #0]
 8005fec:	0606      	lsls	r6, r0, #24
 8005fee:	d501      	bpl.n	8005ff4 <_printf_i+0xbc>
 8005ff0:	681d      	ldr	r5, [r3, #0]
 8005ff2:	e003      	b.n	8005ffc <_printf_i+0xc4>
 8005ff4:	0645      	lsls	r5, r0, #25
 8005ff6:	d5fb      	bpl.n	8005ff0 <_printf_i+0xb8>
 8005ff8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ffc:	2d00      	cmp	r5, #0
 8005ffe:	da03      	bge.n	8006008 <_printf_i+0xd0>
 8006000:	232d      	movs	r3, #45	@ 0x2d
 8006002:	426d      	negs	r5, r5
 8006004:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006008:	4859      	ldr	r0, [pc, #356]	@ (8006170 <_printf_i+0x238>)
 800600a:	230a      	movs	r3, #10
 800600c:	e011      	b.n	8006032 <_printf_i+0xfa>
 800600e:	6821      	ldr	r1, [r4, #0]
 8006010:	6833      	ldr	r3, [r6, #0]
 8006012:	0608      	lsls	r0, r1, #24
 8006014:	f853 5b04 	ldr.w	r5, [r3], #4
 8006018:	d402      	bmi.n	8006020 <_printf_i+0xe8>
 800601a:	0649      	lsls	r1, r1, #25
 800601c:	bf48      	it	mi
 800601e:	b2ad      	uxthmi	r5, r5
 8006020:	2f6f      	cmp	r7, #111	@ 0x6f
 8006022:	4853      	ldr	r0, [pc, #332]	@ (8006170 <_printf_i+0x238>)
 8006024:	6033      	str	r3, [r6, #0]
 8006026:	bf14      	ite	ne
 8006028:	230a      	movne	r3, #10
 800602a:	2308      	moveq	r3, #8
 800602c:	2100      	movs	r1, #0
 800602e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006032:	6866      	ldr	r6, [r4, #4]
 8006034:	60a6      	str	r6, [r4, #8]
 8006036:	2e00      	cmp	r6, #0
 8006038:	bfa2      	ittt	ge
 800603a:	6821      	ldrge	r1, [r4, #0]
 800603c:	f021 0104 	bicge.w	r1, r1, #4
 8006040:	6021      	strge	r1, [r4, #0]
 8006042:	b90d      	cbnz	r5, 8006048 <_printf_i+0x110>
 8006044:	2e00      	cmp	r6, #0
 8006046:	d04b      	beq.n	80060e0 <_printf_i+0x1a8>
 8006048:	4616      	mov	r6, r2
 800604a:	fbb5 f1f3 	udiv	r1, r5, r3
 800604e:	fb03 5711 	mls	r7, r3, r1, r5
 8006052:	5dc7      	ldrb	r7, [r0, r7]
 8006054:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006058:	462f      	mov	r7, r5
 800605a:	42bb      	cmp	r3, r7
 800605c:	460d      	mov	r5, r1
 800605e:	d9f4      	bls.n	800604a <_printf_i+0x112>
 8006060:	2b08      	cmp	r3, #8
 8006062:	d10b      	bne.n	800607c <_printf_i+0x144>
 8006064:	6823      	ldr	r3, [r4, #0]
 8006066:	07df      	lsls	r7, r3, #31
 8006068:	d508      	bpl.n	800607c <_printf_i+0x144>
 800606a:	6923      	ldr	r3, [r4, #16]
 800606c:	6861      	ldr	r1, [r4, #4]
 800606e:	4299      	cmp	r1, r3
 8006070:	bfde      	ittt	le
 8006072:	2330      	movle	r3, #48	@ 0x30
 8006074:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006078:	f106 36ff 	addle.w	r6, r6, #4294967295
 800607c:	1b92      	subs	r2, r2, r6
 800607e:	6122      	str	r2, [r4, #16]
 8006080:	f8cd a000 	str.w	sl, [sp]
 8006084:	464b      	mov	r3, r9
 8006086:	aa03      	add	r2, sp, #12
 8006088:	4621      	mov	r1, r4
 800608a:	4640      	mov	r0, r8
 800608c:	f7ff fee6 	bl	8005e5c <_printf_common>
 8006090:	3001      	adds	r0, #1
 8006092:	d14a      	bne.n	800612a <_printf_i+0x1f2>
 8006094:	f04f 30ff 	mov.w	r0, #4294967295
 8006098:	b004      	add	sp, #16
 800609a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800609e:	6823      	ldr	r3, [r4, #0]
 80060a0:	f043 0320 	orr.w	r3, r3, #32
 80060a4:	6023      	str	r3, [r4, #0]
 80060a6:	4833      	ldr	r0, [pc, #204]	@ (8006174 <_printf_i+0x23c>)
 80060a8:	2778      	movs	r7, #120	@ 0x78
 80060aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	6831      	ldr	r1, [r6, #0]
 80060b2:	061f      	lsls	r7, r3, #24
 80060b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80060b8:	d402      	bmi.n	80060c0 <_printf_i+0x188>
 80060ba:	065f      	lsls	r7, r3, #25
 80060bc:	bf48      	it	mi
 80060be:	b2ad      	uxthmi	r5, r5
 80060c0:	6031      	str	r1, [r6, #0]
 80060c2:	07d9      	lsls	r1, r3, #31
 80060c4:	bf44      	itt	mi
 80060c6:	f043 0320 	orrmi.w	r3, r3, #32
 80060ca:	6023      	strmi	r3, [r4, #0]
 80060cc:	b11d      	cbz	r5, 80060d6 <_printf_i+0x19e>
 80060ce:	2310      	movs	r3, #16
 80060d0:	e7ac      	b.n	800602c <_printf_i+0xf4>
 80060d2:	4827      	ldr	r0, [pc, #156]	@ (8006170 <_printf_i+0x238>)
 80060d4:	e7e9      	b.n	80060aa <_printf_i+0x172>
 80060d6:	6823      	ldr	r3, [r4, #0]
 80060d8:	f023 0320 	bic.w	r3, r3, #32
 80060dc:	6023      	str	r3, [r4, #0]
 80060de:	e7f6      	b.n	80060ce <_printf_i+0x196>
 80060e0:	4616      	mov	r6, r2
 80060e2:	e7bd      	b.n	8006060 <_printf_i+0x128>
 80060e4:	6833      	ldr	r3, [r6, #0]
 80060e6:	6825      	ldr	r5, [r4, #0]
 80060e8:	6961      	ldr	r1, [r4, #20]
 80060ea:	1d18      	adds	r0, r3, #4
 80060ec:	6030      	str	r0, [r6, #0]
 80060ee:	062e      	lsls	r6, r5, #24
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	d501      	bpl.n	80060f8 <_printf_i+0x1c0>
 80060f4:	6019      	str	r1, [r3, #0]
 80060f6:	e002      	b.n	80060fe <_printf_i+0x1c6>
 80060f8:	0668      	lsls	r0, r5, #25
 80060fa:	d5fb      	bpl.n	80060f4 <_printf_i+0x1bc>
 80060fc:	8019      	strh	r1, [r3, #0]
 80060fe:	2300      	movs	r3, #0
 8006100:	6123      	str	r3, [r4, #16]
 8006102:	4616      	mov	r6, r2
 8006104:	e7bc      	b.n	8006080 <_printf_i+0x148>
 8006106:	6833      	ldr	r3, [r6, #0]
 8006108:	1d1a      	adds	r2, r3, #4
 800610a:	6032      	str	r2, [r6, #0]
 800610c:	681e      	ldr	r6, [r3, #0]
 800610e:	6862      	ldr	r2, [r4, #4]
 8006110:	2100      	movs	r1, #0
 8006112:	4630      	mov	r0, r6
 8006114:	f7fa f864 	bl	80001e0 <memchr>
 8006118:	b108      	cbz	r0, 800611e <_printf_i+0x1e6>
 800611a:	1b80      	subs	r0, r0, r6
 800611c:	6060      	str	r0, [r4, #4]
 800611e:	6863      	ldr	r3, [r4, #4]
 8006120:	6123      	str	r3, [r4, #16]
 8006122:	2300      	movs	r3, #0
 8006124:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006128:	e7aa      	b.n	8006080 <_printf_i+0x148>
 800612a:	6923      	ldr	r3, [r4, #16]
 800612c:	4632      	mov	r2, r6
 800612e:	4649      	mov	r1, r9
 8006130:	4640      	mov	r0, r8
 8006132:	47d0      	blx	sl
 8006134:	3001      	adds	r0, #1
 8006136:	d0ad      	beq.n	8006094 <_printf_i+0x15c>
 8006138:	6823      	ldr	r3, [r4, #0]
 800613a:	079b      	lsls	r3, r3, #30
 800613c:	d413      	bmi.n	8006166 <_printf_i+0x22e>
 800613e:	68e0      	ldr	r0, [r4, #12]
 8006140:	9b03      	ldr	r3, [sp, #12]
 8006142:	4298      	cmp	r0, r3
 8006144:	bfb8      	it	lt
 8006146:	4618      	movlt	r0, r3
 8006148:	e7a6      	b.n	8006098 <_printf_i+0x160>
 800614a:	2301      	movs	r3, #1
 800614c:	4632      	mov	r2, r6
 800614e:	4649      	mov	r1, r9
 8006150:	4640      	mov	r0, r8
 8006152:	47d0      	blx	sl
 8006154:	3001      	adds	r0, #1
 8006156:	d09d      	beq.n	8006094 <_printf_i+0x15c>
 8006158:	3501      	adds	r5, #1
 800615a:	68e3      	ldr	r3, [r4, #12]
 800615c:	9903      	ldr	r1, [sp, #12]
 800615e:	1a5b      	subs	r3, r3, r1
 8006160:	42ab      	cmp	r3, r5
 8006162:	dcf2      	bgt.n	800614a <_printf_i+0x212>
 8006164:	e7eb      	b.n	800613e <_printf_i+0x206>
 8006166:	2500      	movs	r5, #0
 8006168:	f104 0619 	add.w	r6, r4, #25
 800616c:	e7f5      	b.n	800615a <_printf_i+0x222>
 800616e:	bf00      	nop
 8006170:	08006e1a 	.word	0x08006e1a
 8006174:	08006e2b 	.word	0x08006e2b

08006178 <__sflush_r>:
 8006178:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800617c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006180:	0716      	lsls	r6, r2, #28
 8006182:	4605      	mov	r5, r0
 8006184:	460c      	mov	r4, r1
 8006186:	d454      	bmi.n	8006232 <__sflush_r+0xba>
 8006188:	684b      	ldr	r3, [r1, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	dc02      	bgt.n	8006194 <__sflush_r+0x1c>
 800618e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006190:	2b00      	cmp	r3, #0
 8006192:	dd48      	ble.n	8006226 <__sflush_r+0xae>
 8006194:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006196:	2e00      	cmp	r6, #0
 8006198:	d045      	beq.n	8006226 <__sflush_r+0xae>
 800619a:	2300      	movs	r3, #0
 800619c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80061a0:	682f      	ldr	r7, [r5, #0]
 80061a2:	6a21      	ldr	r1, [r4, #32]
 80061a4:	602b      	str	r3, [r5, #0]
 80061a6:	d030      	beq.n	800620a <__sflush_r+0x92>
 80061a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80061aa:	89a3      	ldrh	r3, [r4, #12]
 80061ac:	0759      	lsls	r1, r3, #29
 80061ae:	d505      	bpl.n	80061bc <__sflush_r+0x44>
 80061b0:	6863      	ldr	r3, [r4, #4]
 80061b2:	1ad2      	subs	r2, r2, r3
 80061b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80061b6:	b10b      	cbz	r3, 80061bc <__sflush_r+0x44>
 80061b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80061ba:	1ad2      	subs	r2, r2, r3
 80061bc:	2300      	movs	r3, #0
 80061be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061c0:	6a21      	ldr	r1, [r4, #32]
 80061c2:	4628      	mov	r0, r5
 80061c4:	47b0      	blx	r6
 80061c6:	1c43      	adds	r3, r0, #1
 80061c8:	89a3      	ldrh	r3, [r4, #12]
 80061ca:	d106      	bne.n	80061da <__sflush_r+0x62>
 80061cc:	6829      	ldr	r1, [r5, #0]
 80061ce:	291d      	cmp	r1, #29
 80061d0:	d82b      	bhi.n	800622a <__sflush_r+0xb2>
 80061d2:	4a2a      	ldr	r2, [pc, #168]	@ (800627c <__sflush_r+0x104>)
 80061d4:	410a      	asrs	r2, r1
 80061d6:	07d6      	lsls	r6, r2, #31
 80061d8:	d427      	bmi.n	800622a <__sflush_r+0xb2>
 80061da:	2200      	movs	r2, #0
 80061dc:	6062      	str	r2, [r4, #4]
 80061de:	04d9      	lsls	r1, r3, #19
 80061e0:	6922      	ldr	r2, [r4, #16]
 80061e2:	6022      	str	r2, [r4, #0]
 80061e4:	d504      	bpl.n	80061f0 <__sflush_r+0x78>
 80061e6:	1c42      	adds	r2, r0, #1
 80061e8:	d101      	bne.n	80061ee <__sflush_r+0x76>
 80061ea:	682b      	ldr	r3, [r5, #0]
 80061ec:	b903      	cbnz	r3, 80061f0 <__sflush_r+0x78>
 80061ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80061f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061f2:	602f      	str	r7, [r5, #0]
 80061f4:	b1b9      	cbz	r1, 8006226 <__sflush_r+0xae>
 80061f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80061fa:	4299      	cmp	r1, r3
 80061fc:	d002      	beq.n	8006204 <__sflush_r+0x8c>
 80061fe:	4628      	mov	r0, r5
 8006200:	f7ff fa9a 	bl	8005738 <_free_r>
 8006204:	2300      	movs	r3, #0
 8006206:	6363      	str	r3, [r4, #52]	@ 0x34
 8006208:	e00d      	b.n	8006226 <__sflush_r+0xae>
 800620a:	2301      	movs	r3, #1
 800620c:	4628      	mov	r0, r5
 800620e:	47b0      	blx	r6
 8006210:	4602      	mov	r2, r0
 8006212:	1c50      	adds	r0, r2, #1
 8006214:	d1c9      	bne.n	80061aa <__sflush_r+0x32>
 8006216:	682b      	ldr	r3, [r5, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d0c6      	beq.n	80061aa <__sflush_r+0x32>
 800621c:	2b1d      	cmp	r3, #29
 800621e:	d001      	beq.n	8006224 <__sflush_r+0xac>
 8006220:	2b16      	cmp	r3, #22
 8006222:	d11e      	bne.n	8006262 <__sflush_r+0xea>
 8006224:	602f      	str	r7, [r5, #0]
 8006226:	2000      	movs	r0, #0
 8006228:	e022      	b.n	8006270 <__sflush_r+0xf8>
 800622a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800622e:	b21b      	sxth	r3, r3
 8006230:	e01b      	b.n	800626a <__sflush_r+0xf2>
 8006232:	690f      	ldr	r7, [r1, #16]
 8006234:	2f00      	cmp	r7, #0
 8006236:	d0f6      	beq.n	8006226 <__sflush_r+0xae>
 8006238:	0793      	lsls	r3, r2, #30
 800623a:	680e      	ldr	r6, [r1, #0]
 800623c:	bf08      	it	eq
 800623e:	694b      	ldreq	r3, [r1, #20]
 8006240:	600f      	str	r7, [r1, #0]
 8006242:	bf18      	it	ne
 8006244:	2300      	movne	r3, #0
 8006246:	eba6 0807 	sub.w	r8, r6, r7
 800624a:	608b      	str	r3, [r1, #8]
 800624c:	f1b8 0f00 	cmp.w	r8, #0
 8006250:	dde9      	ble.n	8006226 <__sflush_r+0xae>
 8006252:	6a21      	ldr	r1, [r4, #32]
 8006254:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006256:	4643      	mov	r3, r8
 8006258:	463a      	mov	r2, r7
 800625a:	4628      	mov	r0, r5
 800625c:	47b0      	blx	r6
 800625e:	2800      	cmp	r0, #0
 8006260:	dc08      	bgt.n	8006274 <__sflush_r+0xfc>
 8006262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800626a:	81a3      	strh	r3, [r4, #12]
 800626c:	f04f 30ff 	mov.w	r0, #4294967295
 8006270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006274:	4407      	add	r7, r0
 8006276:	eba8 0800 	sub.w	r8, r8, r0
 800627a:	e7e7      	b.n	800624c <__sflush_r+0xd4>
 800627c:	dfbffffe 	.word	0xdfbffffe

08006280 <_fflush_r>:
 8006280:	b538      	push	{r3, r4, r5, lr}
 8006282:	690b      	ldr	r3, [r1, #16]
 8006284:	4605      	mov	r5, r0
 8006286:	460c      	mov	r4, r1
 8006288:	b913      	cbnz	r3, 8006290 <_fflush_r+0x10>
 800628a:	2500      	movs	r5, #0
 800628c:	4628      	mov	r0, r5
 800628e:	bd38      	pop	{r3, r4, r5, pc}
 8006290:	b118      	cbz	r0, 800629a <_fflush_r+0x1a>
 8006292:	6a03      	ldr	r3, [r0, #32]
 8006294:	b90b      	cbnz	r3, 800629a <_fflush_r+0x1a>
 8006296:	f7ff f80d 	bl	80052b4 <__sinit>
 800629a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d0f3      	beq.n	800628a <_fflush_r+0xa>
 80062a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80062a4:	07d0      	lsls	r0, r2, #31
 80062a6:	d404      	bmi.n	80062b2 <_fflush_r+0x32>
 80062a8:	0599      	lsls	r1, r3, #22
 80062aa:	d402      	bmi.n	80062b2 <_fflush_r+0x32>
 80062ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062ae:	f7ff fa32 	bl	8005716 <__retarget_lock_acquire_recursive>
 80062b2:	4628      	mov	r0, r5
 80062b4:	4621      	mov	r1, r4
 80062b6:	f7ff ff5f 	bl	8006178 <__sflush_r>
 80062ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062bc:	07da      	lsls	r2, r3, #31
 80062be:	4605      	mov	r5, r0
 80062c0:	d4e4      	bmi.n	800628c <_fflush_r+0xc>
 80062c2:	89a3      	ldrh	r3, [r4, #12]
 80062c4:	059b      	lsls	r3, r3, #22
 80062c6:	d4e1      	bmi.n	800628c <_fflush_r+0xc>
 80062c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062ca:	f7ff fa25 	bl	8005718 <__retarget_lock_release_recursive>
 80062ce:	e7dd      	b.n	800628c <_fflush_r+0xc>

080062d0 <__swhatbuf_r>:
 80062d0:	b570      	push	{r4, r5, r6, lr}
 80062d2:	460c      	mov	r4, r1
 80062d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062d8:	2900      	cmp	r1, #0
 80062da:	b096      	sub	sp, #88	@ 0x58
 80062dc:	4615      	mov	r5, r2
 80062de:	461e      	mov	r6, r3
 80062e0:	da0d      	bge.n	80062fe <__swhatbuf_r+0x2e>
 80062e2:	89a3      	ldrh	r3, [r4, #12]
 80062e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80062e8:	f04f 0100 	mov.w	r1, #0
 80062ec:	bf14      	ite	ne
 80062ee:	2340      	movne	r3, #64	@ 0x40
 80062f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80062f4:	2000      	movs	r0, #0
 80062f6:	6031      	str	r1, [r6, #0]
 80062f8:	602b      	str	r3, [r5, #0]
 80062fa:	b016      	add	sp, #88	@ 0x58
 80062fc:	bd70      	pop	{r4, r5, r6, pc}
 80062fe:	466a      	mov	r2, sp
 8006300:	f000 f848 	bl	8006394 <_fstat_r>
 8006304:	2800      	cmp	r0, #0
 8006306:	dbec      	blt.n	80062e2 <__swhatbuf_r+0x12>
 8006308:	9901      	ldr	r1, [sp, #4]
 800630a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800630e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006312:	4259      	negs	r1, r3
 8006314:	4159      	adcs	r1, r3
 8006316:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800631a:	e7eb      	b.n	80062f4 <__swhatbuf_r+0x24>

0800631c <__smakebuf_r>:
 800631c:	898b      	ldrh	r3, [r1, #12]
 800631e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006320:	079d      	lsls	r5, r3, #30
 8006322:	4606      	mov	r6, r0
 8006324:	460c      	mov	r4, r1
 8006326:	d507      	bpl.n	8006338 <__smakebuf_r+0x1c>
 8006328:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800632c:	6023      	str	r3, [r4, #0]
 800632e:	6123      	str	r3, [r4, #16]
 8006330:	2301      	movs	r3, #1
 8006332:	6163      	str	r3, [r4, #20]
 8006334:	b003      	add	sp, #12
 8006336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006338:	ab01      	add	r3, sp, #4
 800633a:	466a      	mov	r2, sp
 800633c:	f7ff ffc8 	bl	80062d0 <__swhatbuf_r>
 8006340:	9f00      	ldr	r7, [sp, #0]
 8006342:	4605      	mov	r5, r0
 8006344:	4639      	mov	r1, r7
 8006346:	4630      	mov	r0, r6
 8006348:	f7ff fa62 	bl	8005810 <_malloc_r>
 800634c:	b948      	cbnz	r0, 8006362 <__smakebuf_r+0x46>
 800634e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006352:	059a      	lsls	r2, r3, #22
 8006354:	d4ee      	bmi.n	8006334 <__smakebuf_r+0x18>
 8006356:	f023 0303 	bic.w	r3, r3, #3
 800635a:	f043 0302 	orr.w	r3, r3, #2
 800635e:	81a3      	strh	r3, [r4, #12]
 8006360:	e7e2      	b.n	8006328 <__smakebuf_r+0xc>
 8006362:	89a3      	ldrh	r3, [r4, #12]
 8006364:	6020      	str	r0, [r4, #0]
 8006366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800636a:	81a3      	strh	r3, [r4, #12]
 800636c:	9b01      	ldr	r3, [sp, #4]
 800636e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006372:	b15b      	cbz	r3, 800638c <__smakebuf_r+0x70>
 8006374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006378:	4630      	mov	r0, r6
 800637a:	f000 f81d 	bl	80063b8 <_isatty_r>
 800637e:	b128      	cbz	r0, 800638c <__smakebuf_r+0x70>
 8006380:	89a3      	ldrh	r3, [r4, #12]
 8006382:	f023 0303 	bic.w	r3, r3, #3
 8006386:	f043 0301 	orr.w	r3, r3, #1
 800638a:	81a3      	strh	r3, [r4, #12]
 800638c:	89a3      	ldrh	r3, [r4, #12]
 800638e:	431d      	orrs	r5, r3
 8006390:	81a5      	strh	r5, [r4, #12]
 8006392:	e7cf      	b.n	8006334 <__smakebuf_r+0x18>

08006394 <_fstat_r>:
 8006394:	b538      	push	{r3, r4, r5, lr}
 8006396:	4d07      	ldr	r5, [pc, #28]	@ (80063b4 <_fstat_r+0x20>)
 8006398:	2300      	movs	r3, #0
 800639a:	4604      	mov	r4, r0
 800639c:	4608      	mov	r0, r1
 800639e:	4611      	mov	r1, r2
 80063a0:	602b      	str	r3, [r5, #0]
 80063a2:	f7fb f839 	bl	8001418 <_fstat>
 80063a6:	1c43      	adds	r3, r0, #1
 80063a8:	d102      	bne.n	80063b0 <_fstat_r+0x1c>
 80063aa:	682b      	ldr	r3, [r5, #0]
 80063ac:	b103      	cbz	r3, 80063b0 <_fstat_r+0x1c>
 80063ae:	6023      	str	r3, [r4, #0]
 80063b0:	bd38      	pop	{r3, r4, r5, pc}
 80063b2:	bf00      	nop
 80063b4:	200007ec 	.word	0x200007ec

080063b8 <_isatty_r>:
 80063b8:	b538      	push	{r3, r4, r5, lr}
 80063ba:	4d06      	ldr	r5, [pc, #24]	@ (80063d4 <_isatty_r+0x1c>)
 80063bc:	2300      	movs	r3, #0
 80063be:	4604      	mov	r4, r0
 80063c0:	4608      	mov	r0, r1
 80063c2:	602b      	str	r3, [r5, #0]
 80063c4:	f7fb f82e 	bl	8001424 <_isatty>
 80063c8:	1c43      	adds	r3, r0, #1
 80063ca:	d102      	bne.n	80063d2 <_isatty_r+0x1a>
 80063cc:	682b      	ldr	r3, [r5, #0]
 80063ce:	b103      	cbz	r3, 80063d2 <_isatty_r+0x1a>
 80063d0:	6023      	str	r3, [r4, #0]
 80063d2:	bd38      	pop	{r3, r4, r5, pc}
 80063d4:	200007ec 	.word	0x200007ec

080063d8 <_sbrk_r>:
 80063d8:	b538      	push	{r3, r4, r5, lr}
 80063da:	4d06      	ldr	r5, [pc, #24]	@ (80063f4 <_sbrk_r+0x1c>)
 80063dc:	2300      	movs	r3, #0
 80063de:	4604      	mov	r4, r0
 80063e0:	4608      	mov	r0, r1
 80063e2:	602b      	str	r3, [r5, #0]
 80063e4:	f7fb f822 	bl	800142c <_sbrk>
 80063e8:	1c43      	adds	r3, r0, #1
 80063ea:	d102      	bne.n	80063f2 <_sbrk_r+0x1a>
 80063ec:	682b      	ldr	r3, [r5, #0]
 80063ee:	b103      	cbz	r3, 80063f2 <_sbrk_r+0x1a>
 80063f0:	6023      	str	r3, [r4, #0]
 80063f2:	bd38      	pop	{r3, r4, r5, pc}
 80063f4:	200007ec 	.word	0x200007ec

080063f8 <_realloc_r>:
 80063f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063fc:	4680      	mov	r8, r0
 80063fe:	4615      	mov	r5, r2
 8006400:	460c      	mov	r4, r1
 8006402:	b921      	cbnz	r1, 800640e <_realloc_r+0x16>
 8006404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006408:	4611      	mov	r1, r2
 800640a:	f7ff ba01 	b.w	8005810 <_malloc_r>
 800640e:	b92a      	cbnz	r2, 800641c <_realloc_r+0x24>
 8006410:	f7ff f992 	bl	8005738 <_free_r>
 8006414:	2400      	movs	r4, #0
 8006416:	4620      	mov	r0, r4
 8006418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800641c:	f000 f81a 	bl	8006454 <_malloc_usable_size_r>
 8006420:	4285      	cmp	r5, r0
 8006422:	4606      	mov	r6, r0
 8006424:	d802      	bhi.n	800642c <_realloc_r+0x34>
 8006426:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800642a:	d8f4      	bhi.n	8006416 <_realloc_r+0x1e>
 800642c:	4629      	mov	r1, r5
 800642e:	4640      	mov	r0, r8
 8006430:	f7ff f9ee 	bl	8005810 <_malloc_r>
 8006434:	4607      	mov	r7, r0
 8006436:	2800      	cmp	r0, #0
 8006438:	d0ec      	beq.n	8006414 <_realloc_r+0x1c>
 800643a:	42b5      	cmp	r5, r6
 800643c:	462a      	mov	r2, r5
 800643e:	4621      	mov	r1, r4
 8006440:	bf28      	it	cs
 8006442:	4632      	movcs	r2, r6
 8006444:	f7ff f969 	bl	800571a <memcpy>
 8006448:	4621      	mov	r1, r4
 800644a:	4640      	mov	r0, r8
 800644c:	f7ff f974 	bl	8005738 <_free_r>
 8006450:	463c      	mov	r4, r7
 8006452:	e7e0      	b.n	8006416 <_realloc_r+0x1e>

08006454 <_malloc_usable_size_r>:
 8006454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006458:	1f18      	subs	r0, r3, #4
 800645a:	2b00      	cmp	r3, #0
 800645c:	bfbc      	itt	lt
 800645e:	580b      	ldrlt	r3, [r1, r0]
 8006460:	18c0      	addlt	r0, r0, r3
 8006462:	4770      	bx	lr

08006464 <_init>:
 8006464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006466:	bf00      	nop
 8006468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800646a:	bc08      	pop	{r3}
 800646c:	469e      	mov	lr, r3
 800646e:	4770      	bx	lr

08006470 <_fini>:
 8006470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006472:	bf00      	nop
 8006474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006476:	bc08      	pop	{r3}
 8006478:	469e      	mov	lr, r3
 800647a:	4770      	bx	lr
