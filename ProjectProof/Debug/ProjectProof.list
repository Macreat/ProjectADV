
ProjectProof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fdc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800616c  0800616c  0000716c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006208  08006208  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  08006208  08006208  00007208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006210  08006210  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006210  08006210  00007210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006214  08006214  00007214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006218  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  2000005c  08006274  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08006274  00008338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ed7  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f7  00000000  00000000  00018f63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  0001b360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa6  00000000  00000000  0001c130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027bf3  00000000  00000000  0001cbd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000105f1  00000000  00000000  000447c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb12f  00000000  00000000  00054dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014fee9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003eb4  00000000  00000000  0014ff2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00153de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006154 	.word	0x08006154

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08006154 	.word	0x08006154

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fc5e 	bl	8000e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f886 	bl	8000688 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800057c:	f000 f8d5 	bl	800072a <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 fa0a 	bl	8000998 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000584:	f000 f8fc 	bl	8000780 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000588:	f000 f9d6 	bl	8000938 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 800058c:	f000 f970 	bl	8000870 <MX_ADC2_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	   HAL_ADC_Start(&hadc1);
 8000590:	4835      	ldr	r0, [pc, #212]	@ (8000668 <main+0xf8>)
 8000592:	f001 f835 	bl	8001600 <HAL_ADC_Start>
	   HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000596:	f04f 31ff 	mov.w	r1, #4294967295
 800059a:	4833      	ldr	r0, [pc, #204]	@ (8000668 <main+0xf8>)
 800059c:	f001 f8ea 	bl	8001774 <HAL_ADC_PollForConversion>
	   lux  = HAL_ADC_GetValue(&hadc1);
 80005a0:	4831      	ldr	r0, [pc, #196]	@ (8000668 <main+0xf8>)
 80005a2:	f001 f9bf 	bl	8001924 <HAL_ADC_GetValue>
 80005a6:	4603      	mov	r3, r0
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	4b30      	ldr	r3, [pc, #192]	@ (800066c <main+0xfc>)
 80005ac:	801a      	strh	r2, [r3, #0]
	   sprintf (msg, "Light : %hu \r\n", lux);
 80005ae:	4b2f      	ldr	r3, [pc, #188]	@ (800066c <main+0xfc>)
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	461a      	mov	r2, r3
 80005b4:	492e      	ldr	r1, [pc, #184]	@ (8000670 <main+0x100>)
 80005b6:	482f      	ldr	r0, [pc, #188]	@ (8000674 <main+0x104>)
 80005b8:	f005 f92c 	bl	8005814 <siprintf>
	   HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005bc:	482d      	ldr	r0, [pc, #180]	@ (8000674 <main+0x104>)
 80005be:	f7ff fe07 	bl	80001d0 <strlen>
 80005c2:	4603      	mov	r3, r0
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ca:	492a      	ldr	r1, [pc, #168]	@ (8000674 <main+0x104>)
 80005cc:	482a      	ldr	r0, [pc, #168]	@ (8000678 <main+0x108>)
 80005ce:	f004 f853 	bl	8004678 <HAL_UART_Transmit>

	   HAL_ADC_Start(&hadc2);
 80005d2:	482a      	ldr	r0, [pc, #168]	@ (800067c <main+0x10c>)
 80005d4:	f001 f814 	bl	8001600 <HAL_ADC_Start>
	   HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80005d8:	f04f 31ff 	mov.w	r1, #4294967295
 80005dc:	4827      	ldr	r0, [pc, #156]	@ (800067c <main+0x10c>)
 80005de:	f001 f8c9 	bl	8001774 <HAL_ADC_PollForConversion>
	   raw_value  = HAL_ADC_GetValue(&hadc2);
 80005e2:	4826      	ldr	r0, [pc, #152]	@ (800067c <main+0x10c>)
 80005e4:	f001 f99e 	bl	8001924 <HAL_ADC_GetValue>
 80005e8:	4603      	mov	r3, r0
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	4b24      	ldr	r3, [pc, #144]	@ (8000680 <main+0x110>)
 80005ee:	801a      	strh	r2, [r3, #0]
	   sprintf (msg, "NTC : %hu \r\n", raw_value);
 80005f0:	4b23      	ldr	r3, [pc, #140]	@ (8000680 <main+0x110>)
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	461a      	mov	r2, r3
 80005f6:	4923      	ldr	r1, [pc, #140]	@ (8000684 <main+0x114>)
 80005f8:	481e      	ldr	r0, [pc, #120]	@ (8000674 <main+0x104>)
 80005fa:	f005 f90b 	bl	8005814 <siprintf>
	   HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005fe:	481d      	ldr	r0, [pc, #116]	@ (8000674 <main+0x104>)
 8000600:	f7ff fde6 	bl	80001d0 <strlen>
 8000604:	4603      	mov	r3, r0
 8000606:	b29a      	uxth	r2, r3
 8000608:	f04f 33ff 	mov.w	r3, #4294967295
 800060c:	4919      	ldr	r1, [pc, #100]	@ (8000674 <main+0x104>)
 800060e:	481a      	ldr	r0, [pc, #104]	@ (8000678 <main+0x108>)
 8000610:	f004 f832 	bl	8004678 <HAL_UART_Transmit>

	   HAL_Delay(1000);  // Esperar un segundo antes de la siguiente lectura
 8000614:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000618:	f000 fc88 	bl	8000f2c <HAL_Delay>

	   if ( raw_value > 2000){
 800061c:	4b18      	ldr	r3, [pc, #96]	@ (8000680 <main+0x110>)
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000624:	d906      	bls.n	8000634 <main+0xc4>
	   		   HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin , 1 );
 8000626:	2201      	movs	r2, #1
 8000628:	2140      	movs	r1, #64	@ 0x40
 800062a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800062e:	f002 fc79 	bl	8002f24 <HAL_GPIO_WritePin>
 8000632:	e005      	b.n	8000640 <main+0xd0>

	   	   }else{
	   		   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin , 0 );
 8000634:	2200      	movs	r2, #0
 8000636:	2120      	movs	r1, #32
 8000638:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800063c:	f002 fc72 	bl	8002f24 <HAL_GPIO_WritePin>

	   	   }


	   if (lux < 2000){
 8000640:	4b0a      	ldr	r3, [pc, #40]	@ (800066c <main+0xfc>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000648:	d206      	bcs.n	8000658 <main+0xe8>
		   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin , 1 );
 800064a:	2201      	movs	r2, #1
 800064c:	2120      	movs	r1, #32
 800064e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000652:	f002 fc67 	bl	8002f24 <HAL_GPIO_WritePin>
 8000656:	e79b      	b.n	8000590 <main+0x20>

	   }else{
		   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin , 0 );
 8000658:	2200      	movs	r2, #0
 800065a:	2120      	movs	r1, #32
 800065c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000660:	f002 fc60 	bl	8002f24 <HAL_GPIO_WritePin>
	   HAL_ADC_Start(&hadc1);
 8000664:	e794      	b.n	8000590 <main+0x20>
 8000666:	bf00      	nop
 8000668:	20000078 	.word	0x20000078
 800066c:	200001c8 	.word	0x200001c8
 8000670:	0800616c 	.word	0x0800616c
 8000674:	200001cc 	.word	0x200001cc
 8000678:	20000140 	.word	0x20000140
 800067c:	200000dc 	.word	0x200000dc
 8000680:	200001e0 	.word	0x200001e0
 8000684:	0800617c 	.word	0x0800617c

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b096      	sub	sp, #88	@ 0x58
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	2244      	movs	r2, #68	@ 0x44
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f005 f8dc 	bl	8005854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	463b      	mov	r3, r7
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006ae:	f002 fc83 	bl	8002fb8 <HAL_PWREx_ControlVoltageScaling>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006b8:	f000 f9dc 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c6:	2310      	movs	r3, #16
 80006c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	2302      	movs	r3, #2
 80006cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ce:	2302      	movs	r3, #2
 80006d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006d2:	2301      	movs	r3, #1
 80006d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006d6:	230a      	movs	r3, #10
 80006d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006da:	2307      	movs	r3, #7
 80006dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006de:	2302      	movs	r3, #2
 80006e0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 fcba 	bl	8003064 <HAL_RCC_OscConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006f6:	f000 f9bd 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fa:	230f      	movs	r3, #15
 80006fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fe:	2303      	movs	r3, #3
 8000700:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800070e:	463b      	mov	r3, r7
 8000710:	2104      	movs	r1, #4
 8000712:	4618      	mov	r0, r3
 8000714:	f003 f882 	bl	800381c <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800071e:	f000 f9a9 	bl	8000a74 <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3758      	adds	r7, #88	@ 0x58
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	b0a2      	sub	sp, #136	@ 0x88
 800072e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000730:	463b      	mov	r3, r7
 8000732:	2288      	movs	r2, #136	@ 0x88
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f005 f88c 	bl	8005854 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800073c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000740:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000742:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000746:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000748:	2302      	movs	r3, #2
 800074a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800074c:	2301      	movs	r3, #1
 800074e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000750:	2308      	movs	r3, #8
 8000752:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000754:	2307      	movs	r3, #7
 8000756:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800075c:	2302      	movs	r3, #2
 800075e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000760:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000764:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000766:	463b      	mov	r3, r7
 8000768:	4618      	mov	r0, r3
 800076a:	f003 fa7b 	bl	8003c64 <HAL_RCCEx_PeriphCLKConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000774:	f000 f97e 	bl	8000a74 <Error_Handler>
  }
}
 8000778:	bf00      	nop
 800077a:	3788      	adds	r7, #136	@ 0x88
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	@ 0x28
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
 80007a0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007a2:	4b30      	ldr	r3, [pc, #192]	@ (8000864 <MX_ADC1_Init+0xe4>)
 80007a4:	4a30      	ldr	r2, [pc, #192]	@ (8000868 <MX_ADC1_Init+0xe8>)
 80007a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80007a8:	4b2e      	ldr	r3, [pc, #184]	@ (8000864 <MX_ADC1_Init+0xe4>)
 80007aa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007b0:	4b2c      	ldr	r3, [pc, #176]	@ (8000864 <MX_ADC1_Init+0xe4>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000864 <MX_ADC1_Init+0xe4>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007bc:	4b29      	ldr	r3, [pc, #164]	@ (8000864 <MX_ADC1_Init+0xe4>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c2:	4b28      	ldr	r3, [pc, #160]	@ (8000864 <MX_ADC1_Init+0xe4>)
 80007c4:	2204      	movs	r2, #4
 80007c6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007c8:	4b26      	ldr	r3, [pc, #152]	@ (8000864 <MX_ADC1_Init+0xe4>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007ce:	4b25      	ldr	r3, [pc, #148]	@ (8000864 <MX_ADC1_Init+0xe4>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007d4:	4b23      	ldr	r3, [pc, #140]	@ (8000864 <MX_ADC1_Init+0xe4>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007da:	4b22      	ldr	r3, [pc, #136]	@ (8000864 <MX_ADC1_Init+0xe4>)
 80007dc:	2200      	movs	r2, #0
 80007de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e2:	4b20      	ldr	r3, [pc, #128]	@ (8000864 <MX_ADC1_Init+0xe4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000864 <MX_ADC1_Init+0xe4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000864 <MX_ADC1_Init+0xe4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000864 <MX_ADC1_Init+0xe4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007fc:	4b19      	ldr	r3, [pc, #100]	@ (8000864 <MX_ADC1_Init+0xe4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000804:	4817      	ldr	r0, [pc, #92]	@ (8000864 <MX_ADC1_Init+0xe4>)
 8000806:	f000 fdab 	bl	8001360 <HAL_ADC_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000810:	f000 f930 	bl	8000a74 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	4811      	ldr	r0, [pc, #68]	@ (8000864 <MX_ADC1_Init+0xe4>)
 8000820:	f001 ff96 	bl	8002750 <HAL_ADCEx_MultiModeConfigChannel>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800082a:	f000 f923 	bl	8000a74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800082e:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <MX_ADC1_Init+0xec>)
 8000830:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000832:	2306      	movs	r3, #6
 8000834:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000836:	2302      	movs	r3, #2
 8000838:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800083a:	237f      	movs	r3, #127	@ 0x7f
 800083c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800083e:	2304      	movs	r3, #4
 8000840:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	4619      	mov	r1, r3
 800084a:	4806      	ldr	r0, [pc, #24]	@ (8000864 <MX_ADC1_Init+0xe4>)
 800084c:	f001 fab0 	bl	8001db0 <HAL_ADC_ConfigChannel>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000856:	f000 f90d 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	3728      	adds	r7, #40	@ 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000078 	.word	0x20000078
 8000868:	50040000 	.word	0x50040000
 800086c:	14f00020 	.word	0x14f00020

08000870 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000876:	463b      	mov	r3, r7
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
 8000884:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000886:	4b29      	ldr	r3, [pc, #164]	@ (800092c <MX_ADC2_Init+0xbc>)
 8000888:	4a29      	ldr	r2, [pc, #164]	@ (8000930 <MX_ADC2_Init+0xc0>)
 800088a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800088c:	4b27      	ldr	r3, [pc, #156]	@ (800092c <MX_ADC2_Init+0xbc>)
 800088e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000892:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000894:	4b25      	ldr	r3, [pc, #148]	@ (800092c <MX_ADC2_Init+0xbc>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800089a:	4b24      	ldr	r3, [pc, #144]	@ (800092c <MX_ADC2_Init+0xbc>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008a0:	4b22      	ldr	r3, [pc, #136]	@ (800092c <MX_ADC2_Init+0xbc>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008a6:	4b21      	ldr	r3, [pc, #132]	@ (800092c <MX_ADC2_Init+0xbc>)
 80008a8:	2204      	movs	r2, #4
 80008aa:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008ac:	4b1f      	ldr	r3, [pc, #124]	@ (800092c <MX_ADC2_Init+0xbc>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008b2:	4b1e      	ldr	r3, [pc, #120]	@ (800092c <MX_ADC2_Init+0xbc>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80008b8:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <MX_ADC2_Init+0xbc>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008be:	4b1b      	ldr	r3, [pc, #108]	@ (800092c <MX_ADC2_Init+0xbc>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c6:	4b19      	ldr	r3, [pc, #100]	@ (800092c <MX_ADC2_Init+0xbc>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008cc:	4b17      	ldr	r3, [pc, #92]	@ (800092c <MX_ADC2_Init+0xbc>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80008d2:	4b16      	ldr	r3, [pc, #88]	@ (800092c <MX_ADC2_Init+0xbc>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008da:	4b14      	ldr	r3, [pc, #80]	@ (800092c <MX_ADC2_Init+0xbc>)
 80008dc:	2200      	movs	r2, #0
 80008de:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80008e0:	4b12      	ldr	r3, [pc, #72]	@ (800092c <MX_ADC2_Init+0xbc>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008e8:	4810      	ldr	r0, [pc, #64]	@ (800092c <MX_ADC2_Init+0xbc>)
 80008ea:	f000 fd39 	bl	8001360 <HAL_ADC_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 80008f4:	f000 f8be 	bl	8000a74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80008f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000934 <MX_ADC2_Init+0xc4>)
 80008fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008fc:	2306      	movs	r3, #6
 80008fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000900:	2300      	movs	r3, #0
 8000902:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000904:	237f      	movs	r3, #127	@ 0x7f
 8000906:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000908:	2304      	movs	r3, #4
 800090a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000910:	463b      	mov	r3, r7
 8000912:	4619      	mov	r1, r3
 8000914:	4805      	ldr	r0, [pc, #20]	@ (800092c <MX_ADC2_Init+0xbc>)
 8000916:	f001 fa4b 	bl	8001db0 <HAL_ADC_ConfigChannel>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000920:	f000 f8a8 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200000dc 	.word	0x200000dc
 8000930:	50040100 	.word	0x50040100
 8000934:	19200040 	.word	0x19200040

08000938 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800093c:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <MX_USART2_UART_Init+0x58>)
 800093e:	4a15      	ldr	r2, [pc, #84]	@ (8000994 <MX_USART2_UART_Init+0x5c>)
 8000940:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000942:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <MX_USART2_UART_Init+0x58>)
 8000944:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000948:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <MX_USART2_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000950:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <MX_USART2_UART_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000956:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <MX_USART2_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800095c:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <MX_USART2_UART_Init+0x58>)
 800095e:	220c      	movs	r2, #12
 8000960:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <MX_USART2_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000968:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <MX_USART2_UART_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096e:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <MX_USART2_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000974:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <MX_USART2_UART_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	@ (8000990 <MX_USART2_UART_Init+0x58>)
 800097c:	f003 fe2e 	bl	80045dc <HAL_UART_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000986:	f000 f875 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000140 	.word	0x20000140
 8000994:	40004400 	.word	0x40004400

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	@ 0x28
 800099c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	4b2f      	ldr	r3, [pc, #188]	@ (8000a6c <MX_GPIO_Init+0xd4>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b2:	4a2e      	ldr	r2, [pc, #184]	@ (8000a6c <MX_GPIO_Init+0xd4>)
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ba:	4b2c      	ldr	r3, [pc, #176]	@ (8000a6c <MX_GPIO_Init+0xd4>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009be:	f003 0304 	and.w	r3, r3, #4
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c6:	4b29      	ldr	r3, [pc, #164]	@ (8000a6c <MX_GPIO_Init+0xd4>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ca:	4a28      	ldr	r2, [pc, #160]	@ (8000a6c <MX_GPIO_Init+0xd4>)
 80009cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d2:	4b26      	ldr	r3, [pc, #152]	@ (8000a6c <MX_GPIO_Init+0xd4>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4b23      	ldr	r3, [pc, #140]	@ (8000a6c <MX_GPIO_Init+0xd4>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e2:	4a22      	ldr	r2, [pc, #136]	@ (8000a6c <MX_GPIO_Init+0xd4>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ea:	4b20      	ldr	r3, [pc, #128]	@ (8000a6c <MX_GPIO_Init+0xd4>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a6c <MX_GPIO_Init+0xd4>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fa:	4a1c      	ldr	r2, [pc, #112]	@ (8000a6c <MX_GPIO_Init+0xd4>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a02:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <MX_GPIO_Init+0xd4>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	21e0      	movs	r1, #224	@ 0xe0
 8000a12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a16:	f002 fa85 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a20:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4619      	mov	r1, r3
 8000a30:	480f      	ldr	r0, [pc, #60]	@ (8000a70 <MX_GPIO_Init+0xd8>)
 8000a32:	f002 f8cd 	bl	8002bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000a36:	23e0      	movs	r3, #224	@ 0xe0
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a50:	f002 f8be 	bl	8002bd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2100      	movs	r1, #0
 8000a58:	2028      	movs	r0, #40	@ 0x28
 8000a5a:	f002 f804 	bl	8002a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a5e:	2028      	movs	r0, #40	@ 0x28
 8000a60:	f002 f81d 	bl	8002a9e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a64:	bf00      	nop
 8000a66:	3728      	adds	r7, #40	@ 0x28
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	48000800 	.word	0x48000800

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <Error_Handler+0x8>

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <HAL_MspInit+0x44>)
 8000a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac4 <HAL_MspInit+0x44>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <HAL_MspInit+0x44>)
 8000a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <HAL_MspInit+0x44>)
 8000aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa2:	4a08      	ldr	r2, [pc, #32]	@ (8000ac4 <HAL_MspInit+0x44>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <HAL_MspInit+0x44>)
 8000aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08c      	sub	sp, #48	@ 0x30
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a3c      	ldr	r2, [pc, #240]	@ (8000bd8 <HAL_ADC_MspInit+0x110>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d136      	bne.n	8000b58 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000aea:	4b3c      	ldr	r3, [pc, #240]	@ (8000bdc <HAL_ADC_MspInit+0x114>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	3301      	adds	r3, #1
 8000af0:	4a3a      	ldr	r2, [pc, #232]	@ (8000bdc <HAL_ADC_MspInit+0x114>)
 8000af2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000af4:	4b39      	ldr	r3, [pc, #228]	@ (8000bdc <HAL_ADC_MspInit+0x114>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d10b      	bne.n	8000b14 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000afc:	4b38      	ldr	r3, [pc, #224]	@ (8000be0 <HAL_ADC_MspInit+0x118>)
 8000afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b00:	4a37      	ldr	r2, [pc, #220]	@ (8000be0 <HAL_ADC_MspInit+0x118>)
 8000b02:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b08:	4b35      	ldr	r3, [pc, #212]	@ (8000be0 <HAL_ADC_MspInit+0x118>)
 8000b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b10:	61bb      	str	r3, [r7, #24]
 8000b12:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b14:	4b32      	ldr	r3, [pc, #200]	@ (8000be0 <HAL_ADC_MspInit+0x118>)
 8000b16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b18:	4a31      	ldr	r2, [pc, #196]	@ (8000be0 <HAL_ADC_MspInit+0x118>)
 8000b1a:	f043 0301 	orr.w	r3, r3, #1
 8000b1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b20:	4b2f      	ldr	r3, [pc, #188]	@ (8000be0 <HAL_ADC_MspInit+0x118>)
 8000b22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b24:	f003 0301 	and.w	r3, r3, #1
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b30:	230b      	movs	r3, #11
 8000b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b42:	f002 f845 	bl	8002bd0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2012      	movs	r0, #18
 8000b4c:	f001 ff8b 	bl	8002a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000b50:	2012      	movs	r0, #18
 8000b52:	f001 ffa4 	bl	8002a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000b56:	e03a      	b.n	8000bce <HAL_ADC_MspInit+0x106>
  else if(hadc->Instance==ADC2)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a21      	ldr	r2, [pc, #132]	@ (8000be4 <HAL_ADC_MspInit+0x11c>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d135      	bne.n	8000bce <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000b62:	4b1e      	ldr	r3, [pc, #120]	@ (8000bdc <HAL_ADC_MspInit+0x114>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	3301      	adds	r3, #1
 8000b68:	4a1c      	ldr	r2, [pc, #112]	@ (8000bdc <HAL_ADC_MspInit+0x114>)
 8000b6a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bdc <HAL_ADC_MspInit+0x114>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d10b      	bne.n	8000b8c <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000b74:	4b1a      	ldr	r3, [pc, #104]	@ (8000be0 <HAL_ADC_MspInit+0x118>)
 8000b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b78:	4a19      	ldr	r2, [pc, #100]	@ (8000be0 <HAL_ADC_MspInit+0x118>)
 8000b7a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b80:	4b17      	ldr	r3, [pc, #92]	@ (8000be0 <HAL_ADC_MspInit+0x118>)
 8000b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	4b14      	ldr	r3, [pc, #80]	@ (8000be0 <HAL_ADC_MspInit+0x118>)
 8000b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b90:	4a13      	ldr	r2, [pc, #76]	@ (8000be0 <HAL_ADC_MspInit+0x118>)
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b98:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <HAL_ADC_MspInit+0x118>)
 8000b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9c:	f003 0301 	and.w	r3, r3, #1
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ba8:	230b      	movs	r3, #11
 8000baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f107 031c 	add.w	r3, r7, #28
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bba:	f002 f809 	bl	8002bd0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	2012      	movs	r0, #18
 8000bc4:	f001 ff4f 	bl	8002a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000bc8:	2012      	movs	r0, #18
 8000bca:	f001 ff68 	bl	8002a9e <HAL_NVIC_EnableIRQ>
}
 8000bce:	bf00      	nop
 8000bd0:	3730      	adds	r7, #48	@ 0x30
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	50040000 	.word	0x50040000
 8000bdc:	200001e4 	.word	0x200001e4
 8000be0:	40021000 	.word	0x40021000
 8000be4:	50040100 	.word	0x50040100

08000be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b0ac      	sub	sp, #176	@ 0xb0
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2288      	movs	r2, #136	@ 0x88
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f004 fe23 	bl	8005854 <memset>
  if(huart->Instance==USART2)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a25      	ldr	r2, [pc, #148]	@ (8000ca8 <HAL_UART_MspInit+0xc0>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d143      	bne.n	8000ca0 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4618      	mov	r0, r3
 8000c26:	f003 f81d 	bl	8003c64 <HAL_RCCEx_PeriphCLKConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c30:	f7ff ff20 	bl	8000a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c34:	4b1d      	ldr	r3, [pc, #116]	@ (8000cac <HAL_UART_MspInit+0xc4>)
 8000c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c38:	4a1c      	ldr	r2, [pc, #112]	@ (8000cac <HAL_UART_MspInit+0xc4>)
 8000c3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c40:	4b1a      	ldr	r3, [pc, #104]	@ (8000cac <HAL_UART_MspInit+0xc4>)
 8000c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4c:	4b17      	ldr	r3, [pc, #92]	@ (8000cac <HAL_UART_MspInit+0xc4>)
 8000c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c50:	4a16      	ldr	r2, [pc, #88]	@ (8000cac <HAL_UART_MspInit+0xc4>)
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c58:	4b14      	ldr	r3, [pc, #80]	@ (8000cac <HAL_UART_MspInit+0xc4>)
 8000c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c64:	230c      	movs	r3, #12
 8000c66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c76:	2303      	movs	r3, #3
 8000c78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c7c:	2307      	movs	r3, #7
 8000c7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c86:	4619      	mov	r1, r3
 8000c88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c8c:	f001 ffa0 	bl	8002bd0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2100      	movs	r1, #0
 8000c94:	2026      	movs	r0, #38	@ 0x26
 8000c96:	f001 fee6 	bl	8002a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c9a:	2026      	movs	r0, #38	@ 0x26
 8000c9c:	f001 feff 	bl	8002a9e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ca0:	bf00      	nop
 8000ca2:	37b0      	adds	r7, #176	@ 0xb0
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40004400 	.word	0x40004400
 8000cac:	40021000 	.word	0x40021000

08000cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <NMI_Handler+0x4>

08000cb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <HardFault_Handler+0x4>

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <BusFault_Handler+0x4>

08000cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <UsageFault_Handler+0x4>

08000cd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d06:	f000 f8f1 	bl	8000eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d14:	4803      	ldr	r0, [pc, #12]	@ (8000d24 <ADC1_2_IRQHandler+0x14>)
 8000d16:	f000 fe13 	bl	8001940 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000d1a:	4803      	ldr	r0, [pc, #12]	@ (8000d28 <ADC1_2_IRQHandler+0x18>)
 8000d1c:	f000 fe10 	bl	8001940 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000078 	.word	0x20000078
 8000d28:	200000dc 	.word	0x200000dc

08000d2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d30:	4802      	ldr	r0, [pc, #8]	@ (8000d3c <USART2_IRQHandler+0x10>)
 8000d32:	f003 fd2b 	bl	800478c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000140 	.word	0x20000140

08000d40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d44:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d48:	f002 f904 	bl	8002f54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d58:	4a14      	ldr	r2, [pc, #80]	@ (8000dac <_sbrk+0x5c>)
 8000d5a:	4b15      	ldr	r3, [pc, #84]	@ (8000db0 <_sbrk+0x60>)
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d64:	4b13      	ldr	r3, [pc, #76]	@ (8000db4 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d102      	bne.n	8000d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	@ (8000db4 <_sbrk+0x64>)
 8000d6e:	4a12      	ldr	r2, [pc, #72]	@ (8000db8 <_sbrk+0x68>)
 8000d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d72:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <_sbrk+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d207      	bcs.n	8000d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d80:	f004 fd70 	bl	8005864 <__errno>
 8000d84:	4603      	mov	r3, r0
 8000d86:	220c      	movs	r2, #12
 8000d88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8e:	e009      	b.n	8000da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d90:	4b08      	ldr	r3, [pc, #32]	@ (8000db4 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d96:	4b07      	ldr	r3, [pc, #28]	@ (8000db4 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	4a05      	ldr	r2, [pc, #20]	@ (8000db4 <_sbrk+0x64>)
 8000da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000da2:	68fb      	ldr	r3, [r7, #12]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20018000 	.word	0x20018000
 8000db0:	00000400 	.word	0x00000400
 8000db4:	200001e8 	.word	0x200001e8
 8000db8:	20000338 	.word	0x20000338

08000dbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dc0:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <SystemInit+0x20>)
 8000dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dc6:	4a05      	ldr	r2, [pc, #20]	@ (8000ddc <SystemInit+0x20>)
 8000dc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000de0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000de4:	f7ff ffea 	bl	8000dbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de8:	480c      	ldr	r0, [pc, #48]	@ (8000e1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000dea:	490d      	ldr	r1, [pc, #52]	@ (8000e20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dec:	4a0d      	ldr	r2, [pc, #52]	@ (8000e24 <LoopForever+0xe>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df0:	e002      	b.n	8000df8 <LoopCopyDataInit>

08000df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df6:	3304      	adds	r3, #4

08000df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dfc:	d3f9      	bcc.n	8000df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000e28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e00:	4c0a      	ldr	r4, [pc, #40]	@ (8000e2c <LoopForever+0x16>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e04:	e001      	b.n	8000e0a <LoopFillZerobss>

08000e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e08:	3204      	adds	r2, #4

08000e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e0c:	d3fb      	bcc.n	8000e06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e0e:	f004 fd2f 	bl	8005870 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e12:	f7ff fbad 	bl	8000570 <main>

08000e16 <LoopForever>:

LoopForever:
    b LoopForever
 8000e16:	e7fe      	b.n	8000e16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e18:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e20:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e24:	08006218 	.word	0x08006218
  ldr r2, =_sbss
 8000e28:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e2c:	20000338 	.word	0x20000338

08000e30 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e30:	e7fe      	b.n	8000e30 <ADC3_IRQHandler>
	...

08000e34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <HAL_Init+0x3c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a0b      	ldr	r2, [pc, #44]	@ (8000e70 <HAL_Init+0x3c>)
 8000e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e48:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4a:	2003      	movs	r0, #3
 8000e4c:	f001 fe00 	bl	8002a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e50:	2000      	movs	r0, #0
 8000e52:	f000 f80f 	bl	8000e74 <HAL_InitTick>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d002      	beq.n	8000e62 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	71fb      	strb	r3, [r7, #7]
 8000e60:	e001      	b.n	8000e66 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e62:	f7ff fe0d 	bl	8000a80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e66:	79fb      	ldrb	r3, [r7, #7]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40022000 	.word	0x40022000

08000e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e80:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <HAL_InitTick+0x6c>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d023      	beq.n	8000ed0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e88:	4b16      	ldr	r3, [pc, #88]	@ (8000ee4 <HAL_InitTick+0x70>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <HAL_InitTick+0x6c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f001 fe0b 	bl	8002aba <HAL_SYSTICK_Config>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10f      	bne.n	8000eca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b0f      	cmp	r3, #15
 8000eae:	d809      	bhi.n	8000ec4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb8:	f001 fdd5 	bl	8002a66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee8 <HAL_InitTick+0x74>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	e007      	b.n	8000ed4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	73fb      	strb	r3, [r7, #15]
 8000ec8:	e004      	b.n	8000ed4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	73fb      	strb	r3, [r7, #15]
 8000ece:	e001      	b.n	8000ed4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	20000004 	.word	0x20000004

08000eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <HAL_IncTick+0x20>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <HAL_IncTick+0x24>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a04      	ldr	r2, [pc, #16]	@ (8000f10 <HAL_IncTick+0x24>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	200001ec 	.word	0x200001ec

08000f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return uwTick;
 8000f18:	4b03      	ldr	r3, [pc, #12]	@ (8000f28 <HAL_GetTick+0x14>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	200001ec 	.word	0x200001ec

08000f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f34:	f7ff ffee 	bl	8000f14 <HAL_GetTick>
 8000f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f44:	d005      	beq.n	8000f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f46:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <HAL_Delay+0x44>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f52:	bf00      	nop
 8000f54:	f7ff ffde 	bl	8000f14 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d8f7      	bhi.n	8000f54 <HAL_Delay+0x28>
  {
  }
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000008 	.word	0x20000008

08000f74 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b087      	sub	sp, #28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	3360      	adds	r3, #96	@ 0x60
 8000fee:	461a      	mov	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <LL_ADC_SetOffset+0x44>)
 8000ffe:	4013      	ands	r3, r2
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	430a      	orrs	r2, r1
 800100a:	4313      	orrs	r3, r2
 800100c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001014:	bf00      	nop
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	03fff000 	.word	0x03fff000

08001024 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3360      	adds	r3, #96	@ 0x60
 8001032:	461a      	mov	r2, r3
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001044:	4618      	mov	r0, r3
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001050:	b480      	push	{r7}
 8001052:	b087      	sub	sp, #28
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	3360      	adds	r3, #96	@ 0x60
 8001060:	461a      	mov	r2, r3
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	431a      	orrs	r2, r3
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800107a:	bf00      	nop
 800107c:	371c      	adds	r7, #28
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800109a:	2301      	movs	r3, #1
 800109c:	e000      	b.n	80010a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800109e:	2300      	movs	r3, #0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b087      	sub	sp, #28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	3330      	adds	r3, #48	@ 0x30
 80010bc:	461a      	mov	r2, r3
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	f003 030c 	and.w	r3, r3, #12
 80010c8:	4413      	add	r3, r2
 80010ca:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	f003 031f 	and.w	r3, r3, #31
 80010d6:	211f      	movs	r1, #31
 80010d8:	fa01 f303 	lsl.w	r3, r1, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	401a      	ands	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	0e9b      	lsrs	r3, r3, #26
 80010e4:	f003 011f 	and.w	r1, r3, #31
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	f003 031f 	and.w	r3, r3, #31
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	431a      	orrs	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010f8:	bf00      	nop
 80010fa:	371c      	adds	r7, #28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001110:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001118:	2301      	movs	r3, #1
 800111a:	e000      	b.n	800111e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800112a:	b480      	push	{r7}
 800112c:	b087      	sub	sp, #28
 800112e:	af00      	add	r7, sp, #0
 8001130:	60f8      	str	r0, [r7, #12]
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	3314      	adds	r3, #20
 800113a:	461a      	mov	r2, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	0e5b      	lsrs	r3, r3, #25
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	4413      	add	r3, r2
 8001148:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	0d1b      	lsrs	r3, r3, #20
 8001152:	f003 031f 	and.w	r3, r3, #31
 8001156:	2107      	movs	r1, #7
 8001158:	fa01 f303 	lsl.w	r3, r1, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	401a      	ands	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	0d1b      	lsrs	r3, r3, #20
 8001164:	f003 031f 	and.w	r3, r3, #31
 8001168:	6879      	ldr	r1, [r7, #4]
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	431a      	orrs	r2, r3
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001174:	bf00      	nop
 8001176:	371c      	adds	r7, #28
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001198:	43db      	mvns	r3, r3
 800119a:	401a      	ands	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f003 0318 	and.w	r3, r3, #24
 80011a2:	4908      	ldr	r1, [pc, #32]	@ (80011c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80011a4:	40d9      	lsrs	r1, r3
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	400b      	ands	r3, r1
 80011aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011ae:	431a      	orrs	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80011b6:	bf00      	nop
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	0007ffff 	.word	0x0007ffff

080011c8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 031f 	and.w	r3, r3, #31
}
 80011d8:	4618      	mov	r0, r3
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001210:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	6093      	str	r3, [r2, #8]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001234:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001238:	d101      	bne.n	800123e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800123a:	2301      	movs	r3, #1
 800123c:	e000      	b.n	8001240 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800125c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001260:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001284:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001288:	d101      	bne.n	800128e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80012ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012b0:	f043 0201 	orr.w	r2, r3, #1
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d101      	bne.n	80012dc <LL_ADC_IsEnabled+0x18>
 80012d8:	2301      	movs	r3, #1
 80012da:	e000      	b.n	80012de <LL_ADC_IsEnabled+0x1a>
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80012fa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012fe:	f043 0204 	orr.w	r2, r3, #4
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	2b04      	cmp	r3, #4
 8001324:	d101      	bne.n	800132a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	2b08      	cmp	r3, #8
 800134a:	d101      	bne.n	8001350 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800134c:	2301      	movs	r3, #1
 800134e:	e000      	b.n	8001352 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b089      	sub	sp, #36	@ 0x24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001368:	2300      	movs	r3, #0
 800136a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e130      	b.n	80015dc <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001384:	2b00      	cmp	r3, #0
 8001386:	d109      	bne.n	800139c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff fb9d 	bl	8000ac8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff3f 	bl	8001224 <LL_ADC_IsDeepPowerDownEnabled>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d004      	beq.n	80013b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff25 	bl	8001200 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff ff5a 	bl	8001274 <LL_ADC_IsInternalRegulatorEnabled>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d115      	bne.n	80013f2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff ff3e 	bl	800124c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013d0:	4b84      	ldr	r3, [pc, #528]	@ (80015e4 <HAL_ADC_Init+0x284>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	099b      	lsrs	r3, r3, #6
 80013d6:	4a84      	ldr	r2, [pc, #528]	@ (80015e8 <HAL_ADC_Init+0x288>)
 80013d8:	fba2 2303 	umull	r2, r3, r2, r3
 80013dc:	099b      	lsrs	r3, r3, #6
 80013de:	3301      	adds	r3, #1
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013e4:	e002      	b.n	80013ec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f9      	bne.n	80013e6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ff3c 	bl	8001274 <LL_ADC_IsInternalRegulatorEnabled>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10d      	bne.n	800141e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001406:	f043 0210 	orr.w	r2, r3, #16
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001412:	f043 0201 	orr.w	r2, r3, #1
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ff75 	bl	8001312 <LL_ADC_REG_IsConversionOngoing>
 8001428:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800142e:	f003 0310 	and.w	r3, r3, #16
 8001432:	2b00      	cmp	r3, #0
 8001434:	f040 80c9 	bne.w	80015ca <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	2b00      	cmp	r3, #0
 800143c:	f040 80c5 	bne.w	80015ca <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001444:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001448:	f043 0202 	orr.w	r2, r3, #2
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff35 	bl	80012c4 <LL_ADC_IsEnabled>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d115      	bne.n	800148c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001460:	4862      	ldr	r0, [pc, #392]	@ (80015ec <HAL_ADC_Init+0x28c>)
 8001462:	f7ff ff2f 	bl	80012c4 <LL_ADC_IsEnabled>
 8001466:	4604      	mov	r4, r0
 8001468:	4861      	ldr	r0, [pc, #388]	@ (80015f0 <HAL_ADC_Init+0x290>)
 800146a:	f7ff ff2b 	bl	80012c4 <LL_ADC_IsEnabled>
 800146e:	4603      	mov	r3, r0
 8001470:	431c      	orrs	r4, r3
 8001472:	4860      	ldr	r0, [pc, #384]	@ (80015f4 <HAL_ADC_Init+0x294>)
 8001474:	f7ff ff26 	bl	80012c4 <LL_ADC_IsEnabled>
 8001478:	4603      	mov	r3, r0
 800147a:	4323      	orrs	r3, r4
 800147c:	2b00      	cmp	r3, #0
 800147e:	d105      	bne.n	800148c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	4619      	mov	r1, r3
 8001486:	485c      	ldr	r0, [pc, #368]	@ (80015f8 <HAL_ADC_Init+0x298>)
 8001488:	f7ff fd74 	bl	8000f74 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	7e5b      	ldrb	r3, [r3, #25]
 8001490:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001496:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800149c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80014a2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014aa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d106      	bne.n	80014c8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014be:	3b01      	subs	r3, #1
 80014c0:	045b      	lsls	r3, r3, #17
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d009      	beq.n	80014e4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014dc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68da      	ldr	r2, [r3, #12]
 80014ea:	4b44      	ldr	r3, [pc, #272]	@ (80015fc <HAL_ADC_Init+0x29c>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	6812      	ldr	r2, [r2, #0]
 80014f2:	69b9      	ldr	r1, [r7, #24]
 80014f4:	430b      	orrs	r3, r1
 80014f6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff1b 	bl	8001338 <LL_ADC_INJ_IsConversionOngoing>
 8001502:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d13d      	bne.n	8001586 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d13a      	bne.n	8001586 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001514:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800151c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800152c:	f023 0302 	bic.w	r3, r3, #2
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6812      	ldr	r2, [r2, #0]
 8001534:	69b9      	ldr	r1, [r7, #24]
 8001536:	430b      	orrs	r3, r1
 8001538:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001540:	2b01      	cmp	r3, #1
 8001542:	d118      	bne.n	8001576 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800154e:	f023 0304 	bic.w	r3, r3, #4
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800155a:	4311      	orrs	r1, r2
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001560:	4311      	orrs	r1, r2
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001566:	430a      	orrs	r2, r1
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f042 0201 	orr.w	r2, r2, #1
 8001572:	611a      	str	r2, [r3, #16]
 8001574:	e007      	b.n	8001586 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	691a      	ldr	r2, [r3, #16]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0201 	bic.w	r2, r2, #1
 8001584:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d10c      	bne.n	80015a8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001594:	f023 010f 	bic.w	r1, r3, #15
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	1e5a      	subs	r2, r3, #1
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80015a6:	e007      	b.n	80015b8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 020f 	bic.w	r2, r2, #15
 80015b6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015bc:	f023 0303 	bic.w	r3, r3, #3
 80015c0:	f043 0201 	orr.w	r2, r3, #1
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	655a      	str	r2, [r3, #84]	@ 0x54
 80015c8:	e007      	b.n	80015da <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ce:	f043 0210 	orr.w	r2, r3, #16
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80015da:	7ffb      	ldrb	r3, [r7, #31]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3724      	adds	r7, #36	@ 0x24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd90      	pop	{r4, r7, pc}
 80015e4:	20000000 	.word	0x20000000
 80015e8:	053e2d63 	.word	0x053e2d63
 80015ec:	50040000 	.word	0x50040000
 80015f0:	50040100 	.word	0x50040100
 80015f4:	50040200 	.word	0x50040200
 80015f8:	50040300 	.word	0x50040300
 80015fc:	fff0c007 	.word	0xfff0c007

08001600 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001608:	4857      	ldr	r0, [pc, #348]	@ (8001768 <HAL_ADC_Start+0x168>)
 800160a:	f7ff fddd 	bl	80011c8 <LL_ADC_GetMultimode>
 800160e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fe7c 	bl	8001312 <LL_ADC_REG_IsConversionOngoing>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	f040 809c 	bne.w	800175a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001628:	2b01      	cmp	r3, #1
 800162a:	d101      	bne.n	8001630 <HAL_ADC_Start+0x30>
 800162c:	2302      	movs	r3, #2
 800162e:	e097      	b.n	8001760 <HAL_ADC_Start+0x160>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 ffab 	bl	8002594 <ADC_Enable>
 800163e:	4603      	mov	r3, r0
 8001640:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001642:	7dfb      	ldrb	r3, [r7, #23]
 8001644:	2b00      	cmp	r3, #0
 8001646:	f040 8083 	bne.w	8001750 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800164e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001652:	f023 0301 	bic.w	r3, r3, #1
 8001656:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a42      	ldr	r2, [pc, #264]	@ (800176c <HAL_ADC_Start+0x16c>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d002      	beq.n	800166e <HAL_ADC_Start+0x6e>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	e000      	b.n	8001670 <HAL_ADC_Start+0x70>
 800166e:	4b40      	ldr	r3, [pc, #256]	@ (8001770 <HAL_ADC_Start+0x170>)
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	4293      	cmp	r3, r2
 8001676:	d002      	beq.n	800167e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d105      	bne.n	800168a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001682:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800168e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001692:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001696:	d106      	bne.n	80016a6 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169c:	f023 0206 	bic.w	r2, r3, #6
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	659a      	str	r2, [r3, #88]	@ 0x58
 80016a4:	e002      	b.n	80016ac <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	221c      	movs	r2, #28
 80016b2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a2a      	ldr	r2, [pc, #168]	@ (800176c <HAL_ADC_Start+0x16c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d002      	beq.n	80016cc <HAL_ADC_Start+0xcc>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	e000      	b.n	80016ce <HAL_ADC_Start+0xce>
 80016cc:	4b28      	ldr	r3, [pc, #160]	@ (8001770 <HAL_ADC_Start+0x170>)
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	6812      	ldr	r2, [r2, #0]
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d008      	beq.n	80016e8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	2b05      	cmp	r3, #5
 80016e0:	d002      	beq.n	80016e8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	2b09      	cmp	r3, #9
 80016e6:	d114      	bne.n	8001712 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d007      	beq.n	8001706 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80016fe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fded 	bl	80012ea <LL_ADC_REG_StartConversion>
 8001710:	e025      	b.n	800175e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001716:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a12      	ldr	r2, [pc, #72]	@ (800176c <HAL_ADC_Start+0x16c>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d002      	beq.n	800172e <HAL_ADC_Start+0x12e>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	e000      	b.n	8001730 <HAL_ADC_Start+0x130>
 800172e:	4b10      	ldr	r3, [pc, #64]	@ (8001770 <HAL_ADC_Start+0x170>)
 8001730:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00f      	beq.n	800175e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001742:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001746:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	655a      	str	r2, [r3, #84]	@ 0x54
 800174e:	e006      	b.n	800175e <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001758:	e001      	b.n	800175e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800175a:	2302      	movs	r3, #2
 800175c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800175e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	50040300 	.word	0x50040300
 800176c:	50040100 	.word	0x50040100
 8001770:	50040000 	.word	0x50040000

08001774 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800177e:	4866      	ldr	r0, [pc, #408]	@ (8001918 <HAL_ADC_PollForConversion+0x1a4>)
 8001780:	f7ff fd22 	bl	80011c8 <LL_ADC_GetMultimode>
 8001784:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	2b08      	cmp	r3, #8
 800178c:	d102      	bne.n	8001794 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800178e:	2308      	movs	r3, #8
 8001790:	61fb      	str	r3, [r7, #28]
 8001792:	e02a      	b.n	80017ea <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d005      	beq.n	80017a6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	2b05      	cmp	r3, #5
 800179e:	d002      	beq.n	80017a6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	2b09      	cmp	r3, #9
 80017a4:	d111      	bne.n	80017ca <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d007      	beq.n	80017c4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017b8:	f043 0220 	orr.w	r2, r3, #32
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e0a4      	b.n	800190e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80017c4:	2304      	movs	r3, #4
 80017c6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80017c8:	e00f      	b.n	80017ea <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80017ca:	4853      	ldr	r0, [pc, #332]	@ (8001918 <HAL_ADC_PollForConversion+0x1a4>)
 80017cc:	f7ff fd0a 	bl	80011e4 <LL_ADC_GetMultiDMATransfer>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d007      	beq.n	80017e6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017da:	f043 0220 	orr.w	r2, r3, #32
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e093      	b.n	800190e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80017e6:	2304      	movs	r3, #4
 80017e8:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80017ea:	f7ff fb93 	bl	8000f14 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017f0:	e021      	b.n	8001836 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f8:	d01d      	beq.n	8001836 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80017fa:	f7ff fb8b 	bl	8000f14 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d302      	bcc.n	8001810 <HAL_ADC_PollForConversion+0x9c>
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d112      	bne.n	8001836 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	4013      	ands	r3, r2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10b      	bne.n	8001836 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001822:	f043 0204 	orr.w	r2, r3, #4
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e06b      	b.n	800190e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	4013      	ands	r3, r2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0d6      	beq.n	80017f2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001848:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fc16 	bl	8001086 <LL_ADC_REG_IsTriggerSourceSWStart>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d01c      	beq.n	800189a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	7e5b      	ldrb	r3, [r3, #25]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d118      	bne.n	800189a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0308 	and.w	r3, r3, #8
 8001872:	2b08      	cmp	r3, #8
 8001874:	d111      	bne.n	800189a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800187a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001886:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d105      	bne.n	800189a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001892:	f043 0201 	orr.w	r2, r3, #1
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a1f      	ldr	r2, [pc, #124]	@ (800191c <HAL_ADC_PollForConversion+0x1a8>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d002      	beq.n	80018aa <HAL_ADC_PollForConversion+0x136>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	e000      	b.n	80018ac <HAL_ADC_PollForConversion+0x138>
 80018aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001920 <HAL_ADC_PollForConversion+0x1ac>)
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d008      	beq.n	80018c6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d005      	beq.n	80018c6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	2b05      	cmp	r3, #5
 80018be:	d002      	beq.n	80018c6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	2b09      	cmp	r3, #9
 80018c4:	d104      	bne.n	80018d0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	61bb      	str	r3, [r7, #24]
 80018ce:	e00c      	b.n	80018ea <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a11      	ldr	r2, [pc, #68]	@ (800191c <HAL_ADC_PollForConversion+0x1a8>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d002      	beq.n	80018e0 <HAL_ADC_PollForConversion+0x16c>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	e000      	b.n	80018e2 <HAL_ADC_PollForConversion+0x16e>
 80018e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001920 <HAL_ADC_PollForConversion+0x1ac>)
 80018e2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d104      	bne.n	80018fa <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2208      	movs	r2, #8
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	e008      	b.n	800190c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d103      	bne.n	800190c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	220c      	movs	r2, #12
 800190a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3720      	adds	r7, #32
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	50040300 	.word	0x50040300
 800191c:	50040100 	.word	0x50040100
 8001920:	50040000 	.word	0x50040000

08001924 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	@ 0x28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001948:	2300      	movs	r3, #0
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800195c:	4882      	ldr	r0, [pc, #520]	@ (8001b68 <HAL_ADC_IRQHandler+0x228>)
 800195e:	f7ff fc33 	bl	80011c8 <LL_ADC_GetMultimode>
 8001962:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d017      	beq.n	800199e <HAL_ADC_IRQHandler+0x5e>
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d012      	beq.n	800199e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800197c:	f003 0310 	and.w	r3, r3, #16
 8001980:	2b00      	cmp	r3, #0
 8001982:	d105      	bne.n	8001990 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001988:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 fed3 	bl	800273c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2202      	movs	r2, #2
 800199c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d004      	beq.n	80019b2 <HAL_ADC_IRQHandler+0x72>
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10a      	bne.n	80019c8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 8083 	beq.w	8001ac4 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d07d      	beq.n	8001ac4 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019cc:	f003 0310 	and.w	r3, r3, #16
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d105      	bne.n	80019e0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019d8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fb4e 	bl	8001086 <LL_ADC_REG_IsTriggerSourceSWStart>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d062      	beq.n	8001ab6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a5d      	ldr	r2, [pc, #372]	@ (8001b6c <HAL_ADC_IRQHandler+0x22c>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d002      	beq.n	8001a00 <HAL_ADC_IRQHandler+0xc0>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	e000      	b.n	8001a02 <HAL_ADC_IRQHandler+0xc2>
 8001a00:	4b5b      	ldr	r3, [pc, #364]	@ (8001b70 <HAL_ADC_IRQHandler+0x230>)
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6812      	ldr	r2, [r2, #0]
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d008      	beq.n	8001a1c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	2b05      	cmp	r3, #5
 8001a14:	d002      	beq.n	8001a1c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	2b09      	cmp	r3, #9
 8001a1a:	d104      	bne.n	8001a26 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	623b      	str	r3, [r7, #32]
 8001a24:	e00c      	b.n	8001a40 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a50      	ldr	r2, [pc, #320]	@ (8001b6c <HAL_ADC_IRQHandler+0x22c>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d002      	beq.n	8001a36 <HAL_ADC_IRQHandler+0xf6>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	e000      	b.n	8001a38 <HAL_ADC_IRQHandler+0xf8>
 8001a36:	4b4e      	ldr	r3, [pc, #312]	@ (8001b70 <HAL_ADC_IRQHandler+0x230>)
 8001a38:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001a40:	6a3b      	ldr	r3, [r7, #32]
 8001a42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d135      	bne.n	8001ab6 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d12e      	bne.n	8001ab6 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fc58 	bl	8001312 <LL_ADC_REG_IsConversionOngoing>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d11a      	bne.n	8001a9e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 020c 	bic.w	r2, r2, #12
 8001a76:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d112      	bne.n	8001ab6 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a94:	f043 0201 	orr.w	r2, r3, #1
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	655a      	str	r2, [r3, #84]	@ 0x54
 8001a9c:	e00b      	b.n	8001ab6 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aa2:	f043 0210 	orr.w	r2, r3, #16
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aae:	f043 0201 	orr.w	r2, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f95c 	bl	8001d74 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	220c      	movs	r2, #12
 8001ac2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f003 0320 	and.w	r3, r3, #32
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d004      	beq.n	8001ad8 <HAL_ADC_IRQHandler+0x198>
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	f003 0320 	and.w	r3, r3, #32
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10b      	bne.n	8001af0 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 809f 	beq.w	8001c22 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 8099 	beq.w	8001c22 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001af4:	f003 0310 	and.w	r3, r3, #16
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d105      	bne.n	8001b08 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b00:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff faf9 	bl	8001104 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001b12:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fab4 	bl	8001086 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b1e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a11      	ldr	r2, [pc, #68]	@ (8001b6c <HAL_ADC_IRQHandler+0x22c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d002      	beq.n	8001b30 <HAL_ADC_IRQHandler+0x1f0>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	e000      	b.n	8001b32 <HAL_ADC_IRQHandler+0x1f2>
 8001b30:	4b0f      	ldr	r3, [pc, #60]	@ (8001b70 <HAL_ADC_IRQHandler+0x230>)
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6812      	ldr	r2, [r2, #0]
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d008      	beq.n	8001b4c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d005      	beq.n	8001b4c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	2b06      	cmp	r3, #6
 8001b44:	d002      	beq.n	8001b4c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	2b07      	cmp	r3, #7
 8001b4a:	d104      	bne.n	8001b56 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	623b      	str	r3, [r7, #32]
 8001b54:	e013      	b.n	8001b7e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a04      	ldr	r2, [pc, #16]	@ (8001b6c <HAL_ADC_IRQHandler+0x22c>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d009      	beq.n	8001b74 <HAL_ADC_IRQHandler+0x234>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	e007      	b.n	8001b76 <HAL_ADC_IRQHandler+0x236>
 8001b66:	bf00      	nop
 8001b68:	50040300 	.word	0x50040300
 8001b6c:	50040100 	.word	0x50040100
 8001b70:	50040000 	.word	0x50040000
 8001b74:	4b7d      	ldr	r3, [pc, #500]	@ (8001d6c <HAL_ADC_IRQHandler+0x42c>)
 8001b76:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d047      	beq.n	8001c14 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d007      	beq.n	8001b9e <HAL_ADC_IRQHandler+0x25e>
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d03f      	beq.n	8001c14 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d13a      	bne.n	8001c14 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ba8:	2b40      	cmp	r3, #64	@ 0x40
 8001baa:	d133      	bne.n	8001c14 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d12e      	bne.n	8001c14 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fbbc 	bl	8001338 <LL_ADC_INJ_IsConversionOngoing>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d11a      	bne.n	8001bfc <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001bd4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bda:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d112      	bne.n	8001c14 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf2:	f043 0201 	orr.w	r2, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	655a      	str	r2, [r3, #84]	@ 0x54
 8001bfa:	e00b      	b.n	8001c14 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c00:	f043 0210 	orr.w	r2, r3, #16
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c0c:	f043 0201 	orr.w	r2, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 fd69 	bl	80026ec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2260      	movs	r2, #96	@ 0x60
 8001c20:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d011      	beq.n	8001c50 <HAL_ADC_IRQHandler+0x310>
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00c      	beq.n	8001c50 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c3a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f8a0 	bl	8001d88 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2280      	movs	r2, #128	@ 0x80
 8001c4e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d012      	beq.n	8001c80 <HAL_ADC_IRQHandler+0x340>
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00d      	beq.n	8001c80 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c68:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 fd4f 	bl	8002714 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c7e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d012      	beq.n	8001cb0 <HAL_ADC_IRQHandler+0x370>
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00d      	beq.n	8001cb0 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c98:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 fd41 	bl	8002728 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f003 0310 	and.w	r3, r3, #16
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d036      	beq.n	8001d28 <HAL_ADC_IRQHandler+0x3e8>
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	f003 0310 	and.w	r3, r3, #16
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d031      	beq.n	8001d28 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d102      	bne.n	8001cd2 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cd0:	e014      	b.n	8001cfc <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d008      	beq.n	8001cea <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001cd8:	4825      	ldr	r0, [pc, #148]	@ (8001d70 <HAL_ADC_IRQHandler+0x430>)
 8001cda:	f7ff fa83 	bl	80011e4 <LL_ADC_GetMultiDMATransfer>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00b      	beq.n	8001cfc <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ce8:	e008      	b.n	8001cfc <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d10e      	bne.n	8001d20 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d06:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d12:	f043 0202 	orr.w	r2, r3, #2
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f83e 	bl	8001d9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2210      	movs	r2, #16
 8001d26:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d018      	beq.n	8001d64 <HAL_ADC_IRQHandler+0x424>
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d013      	beq.n	8001d64 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d40:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4c:	f043 0208 	orr.w	r2, r3, #8
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d5c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 fcce 	bl	8002700 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001d64:	bf00      	nop
 8001d66:	3728      	adds	r7, #40	@ 0x28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	50040000 	.word	0x50040000
 8001d70:	50040300 	.word	0x50040300

08001d74 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b0b6      	sub	sp, #216	@ 0xd8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d101      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x22>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e3c9      	b.n	8002566 <HAL_ADC_ConfigChannel+0x7b6>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fa97 	bl	8001312 <LL_ADC_REG_IsConversionOngoing>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f040 83aa 	bne.w	8002540 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b05      	cmp	r3, #5
 8001dfa:	d824      	bhi.n	8001e46 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	3b02      	subs	r3, #2
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d81b      	bhi.n	8001e3e <HAL_ADC_ConfigChannel+0x8e>
 8001e06:	a201      	add	r2, pc, #4	@ (adr r2, 8001e0c <HAL_ADC_ConfigChannel+0x5c>)
 8001e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e0c:	08001e1d 	.word	0x08001e1d
 8001e10:	08001e25 	.word	0x08001e25
 8001e14:	08001e2d 	.word	0x08001e2d
 8001e18:	08001e35 	.word	0x08001e35
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001e1c:	230c      	movs	r3, #12
 8001e1e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e22:	e010      	b.n	8001e46 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001e24:	2312      	movs	r3, #18
 8001e26:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e2a:	e00c      	b.n	8001e46 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001e2c:	2318      	movs	r3, #24
 8001e2e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e32:	e008      	b.n	8001e46 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001e34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e3c:	e003      	b.n	8001e46 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001e3e:	2306      	movs	r3, #6
 8001e40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e44:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6818      	ldr	r0, [r3, #0]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001e54:	f7ff f92a 	bl	80010ac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fa58 	bl	8001312 <LL_ADC_REG_IsConversionOngoing>
 8001e62:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fa64 	bl	8001338 <LL_ADC_INJ_IsConversionOngoing>
 8001e70:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f040 81a4 	bne.w	80021c6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f040 819f 	bne.w	80021c6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	6819      	ldr	r1, [r3, #0]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	461a      	mov	r2, r3
 8001e96:	f7ff f948 	bl	800112a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	695a      	ldr	r2, [r3, #20]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	08db      	lsrs	r3, r3, #3
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d00a      	beq.n	8001ed2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6818      	ldr	r0, [r3, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	6919      	ldr	r1, [r3, #16]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ecc:	f7ff f886 	bl	8000fdc <LL_ADC_SetOffset>
 8001ed0:	e179      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff f8a3 	bl	8001024 <LL_ADC_GetOffsetChannel>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10a      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x14e>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff f898 	bl	8001024 <LL_ADC_GetOffsetChannel>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	0e9b      	lsrs	r3, r3, #26
 8001ef8:	f003 021f 	and.w	r2, r3, #31
 8001efc:	e01e      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x18c>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2100      	movs	r1, #0
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff f88d 	bl	8001024 <LL_ADC_GetOffsetChannel>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f20:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001f2c:	2320      	movs	r3, #32
 8001f2e:	e004      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001f30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001f34:	fab3 f383 	clz	r3, r3
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d105      	bne.n	8001f54 <HAL_ADC_ConfigChannel+0x1a4>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	0e9b      	lsrs	r3, r3, #26
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	e018      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x1d6>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f60:	fa93 f3a3 	rbit	r3, r3
 8001f64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001f68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001f70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001f78:	2320      	movs	r3, #32
 8001f7a:	e004      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001f7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001f80:	fab3 f383 	clz	r3, r3
 8001f84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d106      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2100      	movs	r1, #0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff f85c 	bl	8001050 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff f840 	bl	8001024 <LL_ADC_GetOffsetChannel>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10a      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x214>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff f835 	bl	8001024 <LL_ADC_GetOffsetChannel>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	0e9b      	lsrs	r3, r3, #26
 8001fbe:	f003 021f 	and.w	r2, r3, #31
 8001fc2:	e01e      	b.n	8002002 <HAL_ADC_ConfigChannel+0x252>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2101      	movs	r1, #1
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff f82a 	bl	8001024 <LL_ADC_GetOffsetChannel>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001fe2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001fe6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001fea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001ff2:	2320      	movs	r3, #32
 8001ff4:	e004      	b.n	8002000 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001ff6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001ffa:	fab3 f383 	clz	r3, r3
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200a:	2b00      	cmp	r3, #0
 800200c:	d105      	bne.n	800201a <HAL_ADC_ConfigChannel+0x26a>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	0e9b      	lsrs	r3, r3, #26
 8002014:	f003 031f 	and.w	r3, r3, #31
 8002018:	e018      	b.n	800204c <HAL_ADC_ConfigChannel+0x29c>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002022:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002026:	fa93 f3a3 	rbit	r3, r3
 800202a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800202e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002032:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002036:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800203e:	2320      	movs	r3, #32
 8002040:	e004      	b.n	800204c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002042:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800204c:	429a      	cmp	r2, r3
 800204e:	d106      	bne.n	800205e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2200      	movs	r2, #0
 8002056:	2101      	movs	r1, #1
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe fff9 	bl	8001050 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2102      	movs	r1, #2
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe ffdd 	bl	8001024 <LL_ADC_GetOffsetChannel>
 800206a:	4603      	mov	r3, r0
 800206c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10a      	bne.n	800208a <HAL_ADC_ConfigChannel+0x2da>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2102      	movs	r1, #2
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe ffd2 	bl	8001024 <LL_ADC_GetOffsetChannel>
 8002080:	4603      	mov	r3, r0
 8002082:	0e9b      	lsrs	r3, r3, #26
 8002084:	f003 021f 	and.w	r2, r3, #31
 8002088:	e01e      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x318>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2102      	movs	r1, #2
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe ffc7 	bl	8001024 <LL_ADC_GetOffsetChannel>
 8002096:	4603      	mov	r3, r0
 8002098:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020a0:	fa93 f3a3 	rbit	r3, r3
 80020a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80020a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80020ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80020b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80020b8:	2320      	movs	r3, #32
 80020ba:	e004      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80020bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020c0:	fab3 f383 	clz	r3, r3
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d105      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x330>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	0e9b      	lsrs	r3, r3, #26
 80020da:	f003 031f 	and.w	r3, r3, #31
 80020de:	e014      	b.n	800210a <HAL_ADC_ConfigChannel+0x35a>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80020e8:	fa93 f3a3 	rbit	r3, r3
 80020ec:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80020ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80020f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80020fc:	2320      	movs	r3, #32
 80020fe:	e004      	b.n	800210a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002100:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002104:	fab3 f383 	clz	r3, r3
 8002108:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800210a:	429a      	cmp	r2, r3
 800210c:	d106      	bne.n	800211c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2200      	movs	r2, #0
 8002114:	2102      	movs	r1, #2
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe ff9a 	bl	8001050 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2103      	movs	r1, #3
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe ff7e 	bl	8001024 <LL_ADC_GetOffsetChannel>
 8002128:	4603      	mov	r3, r0
 800212a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10a      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x398>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2103      	movs	r1, #3
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe ff73 	bl	8001024 <LL_ADC_GetOffsetChannel>
 800213e:	4603      	mov	r3, r0
 8002140:	0e9b      	lsrs	r3, r3, #26
 8002142:	f003 021f 	and.w	r2, r3, #31
 8002146:	e017      	b.n	8002178 <HAL_ADC_ConfigChannel+0x3c8>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2103      	movs	r1, #3
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe ff68 	bl	8001024 <LL_ADC_GetOffsetChannel>
 8002154:	4603      	mov	r3, r0
 8002156:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002158:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002160:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002162:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002164:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800216a:	2320      	movs	r3, #32
 800216c:	e003      	b.n	8002176 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800216e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002170:	fab3 f383 	clz	r3, r3
 8002174:	b2db      	uxtb	r3, r3
 8002176:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002180:	2b00      	cmp	r3, #0
 8002182:	d105      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x3e0>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	0e9b      	lsrs	r3, r3, #26
 800218a:	f003 031f 	and.w	r3, r3, #31
 800218e:	e011      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x404>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002198:	fa93 f3a3 	rbit	r3, r3
 800219c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800219e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021a0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80021a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80021a8:	2320      	movs	r3, #32
 80021aa:	e003      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80021ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d106      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2200      	movs	r2, #0
 80021be:	2103      	movs	r1, #3
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe ff45 	bl	8001050 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff f87a 	bl	80012c4 <LL_ADC_IsEnabled>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f040 8140 	bne.w	8002458 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6818      	ldr	r0, [r3, #0]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	6819      	ldr	r1, [r3, #0]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	461a      	mov	r2, r3
 80021e6:	f7fe ffcb 	bl	8001180 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	4a8f      	ldr	r2, [pc, #572]	@ (800242c <HAL_ADC_ConfigChannel+0x67c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	f040 8131 	bne.w	8002458 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10b      	bne.n	800221e <HAL_ADC_ConfigChannel+0x46e>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	0e9b      	lsrs	r3, r3, #26
 800220c:	3301      	adds	r3, #1
 800220e:	f003 031f 	and.w	r3, r3, #31
 8002212:	2b09      	cmp	r3, #9
 8002214:	bf94      	ite	ls
 8002216:	2301      	movls	r3, #1
 8002218:	2300      	movhi	r3, #0
 800221a:	b2db      	uxtb	r3, r3
 800221c:	e019      	b.n	8002252 <HAL_ADC_ConfigChannel+0x4a2>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002224:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800222c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800222e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002230:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002236:	2320      	movs	r3, #32
 8002238:	e003      	b.n	8002242 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800223a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800223c:	fab3 f383 	clz	r3, r3
 8002240:	b2db      	uxtb	r3, r3
 8002242:	3301      	adds	r3, #1
 8002244:	f003 031f 	and.w	r3, r3, #31
 8002248:	2b09      	cmp	r3, #9
 800224a:	bf94      	ite	ls
 800224c:	2301      	movls	r3, #1
 800224e:	2300      	movhi	r3, #0
 8002250:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002252:	2b00      	cmp	r3, #0
 8002254:	d079      	beq.n	800234a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800225e:	2b00      	cmp	r3, #0
 8002260:	d107      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x4c2>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	0e9b      	lsrs	r3, r3, #26
 8002268:	3301      	adds	r3, #1
 800226a:	069b      	lsls	r3, r3, #26
 800226c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002270:	e015      	b.n	800229e <HAL_ADC_ConfigChannel+0x4ee>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002278:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800227a:	fa93 f3a3 	rbit	r3, r3
 800227e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002280:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002282:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002284:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800228a:	2320      	movs	r3, #32
 800228c:	e003      	b.n	8002296 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800228e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002290:	fab3 f383 	clz	r3, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	3301      	adds	r3, #1
 8002298:	069b      	lsls	r3, r3, #26
 800229a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d109      	bne.n	80022be <HAL_ADC_ConfigChannel+0x50e>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	0e9b      	lsrs	r3, r3, #26
 80022b0:	3301      	adds	r3, #1
 80022b2:	f003 031f 	and.w	r3, r3, #31
 80022b6:	2101      	movs	r1, #1
 80022b8:	fa01 f303 	lsl.w	r3, r1, r3
 80022bc:	e017      	b.n	80022ee <HAL_ADC_ConfigChannel+0x53e>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022c6:	fa93 f3a3 	rbit	r3, r3
 80022ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80022cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022ce:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80022d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80022d6:	2320      	movs	r3, #32
 80022d8:	e003      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80022da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022dc:	fab3 f383 	clz	r3, r3
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	3301      	adds	r3, #1
 80022e4:	f003 031f 	and.w	r3, r3, #31
 80022e8:	2101      	movs	r1, #1
 80022ea:	fa01 f303 	lsl.w	r3, r1, r3
 80022ee:	ea42 0103 	orr.w	r1, r2, r3
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10a      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x564>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	0e9b      	lsrs	r3, r3, #26
 8002304:	3301      	adds	r3, #1
 8002306:	f003 021f 	and.w	r2, r3, #31
 800230a:	4613      	mov	r3, r2
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	4413      	add	r3, r2
 8002310:	051b      	lsls	r3, r3, #20
 8002312:	e018      	b.n	8002346 <HAL_ADC_ConfigChannel+0x596>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800231c:	fa93 f3a3 	rbit	r3, r3
 8002320:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002324:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800232c:	2320      	movs	r3, #32
 800232e:	e003      	b.n	8002338 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002332:	fab3 f383 	clz	r3, r3
 8002336:	b2db      	uxtb	r3, r3
 8002338:	3301      	adds	r3, #1
 800233a:	f003 021f 	and.w	r2, r3, #31
 800233e:	4613      	mov	r3, r2
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	4413      	add	r3, r2
 8002344:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002346:	430b      	orrs	r3, r1
 8002348:	e081      	b.n	800244e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002352:	2b00      	cmp	r3, #0
 8002354:	d107      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x5b6>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	0e9b      	lsrs	r3, r3, #26
 800235c:	3301      	adds	r3, #1
 800235e:	069b      	lsls	r3, r3, #26
 8002360:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002364:	e015      	b.n	8002392 <HAL_ADC_ConfigChannel+0x5e2>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002376:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800237e:	2320      	movs	r3, #32
 8002380:	e003      	b.n	800238a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002384:	fab3 f383 	clz	r3, r3
 8002388:	b2db      	uxtb	r3, r3
 800238a:	3301      	adds	r3, #1
 800238c:	069b      	lsls	r3, r3, #26
 800238e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239a:	2b00      	cmp	r3, #0
 800239c:	d109      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x602>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	0e9b      	lsrs	r3, r3, #26
 80023a4:	3301      	adds	r3, #1
 80023a6:	f003 031f 	and.w	r3, r3, #31
 80023aa:	2101      	movs	r1, #1
 80023ac:	fa01 f303 	lsl.w	r3, r1, r3
 80023b0:	e017      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x632>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	61bb      	str	r3, [r7, #24]
  return result;
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80023ca:	2320      	movs	r3, #32
 80023cc:	e003      	b.n	80023d6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	fab3 f383 	clz	r3, r3
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	3301      	adds	r3, #1
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	2101      	movs	r1, #1
 80023de:	fa01 f303 	lsl.w	r3, r1, r3
 80023e2:	ea42 0103 	orr.w	r1, r2, r3
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10d      	bne.n	800240e <HAL_ADC_ConfigChannel+0x65e>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	0e9b      	lsrs	r3, r3, #26
 80023f8:	3301      	adds	r3, #1
 80023fa:	f003 021f 	and.w	r2, r3, #31
 80023fe:	4613      	mov	r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	4413      	add	r3, r2
 8002404:	3b1e      	subs	r3, #30
 8002406:	051b      	lsls	r3, r3, #20
 8002408:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800240c:	e01e      	b.n	800244c <HAL_ADC_ConfigChannel+0x69c>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	fa93 f3a3 	rbit	r3, r3
 800241a:	60fb      	str	r3, [r7, #12]
  return result;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d104      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002426:	2320      	movs	r3, #32
 8002428:	e006      	b.n	8002438 <HAL_ADC_ConfigChannel+0x688>
 800242a:	bf00      	nop
 800242c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	3301      	adds	r3, #1
 800243a:	f003 021f 	and.w	r2, r3, #31
 800243e:	4613      	mov	r3, r2
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	4413      	add	r3, r2
 8002444:	3b1e      	subs	r3, #30
 8002446:	051b      	lsls	r3, r3, #20
 8002448:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800244c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002452:	4619      	mov	r1, r3
 8002454:	f7fe fe69 	bl	800112a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b44      	ldr	r3, [pc, #272]	@ (8002570 <HAL_ADC_ConfigChannel+0x7c0>)
 800245e:	4013      	ands	r3, r2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d07a      	beq.n	800255a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002464:	4843      	ldr	r0, [pc, #268]	@ (8002574 <HAL_ADC_ConfigChannel+0x7c4>)
 8002466:	f7fe fdab 	bl	8000fc0 <LL_ADC_GetCommonPathInternalCh>
 800246a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a41      	ldr	r2, [pc, #260]	@ (8002578 <HAL_ADC_ConfigChannel+0x7c8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d12c      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002478:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800247c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d126      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a3c      	ldr	r2, [pc, #240]	@ (800257c <HAL_ADC_ConfigChannel+0x7cc>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d004      	beq.n	8002498 <HAL_ADC_ConfigChannel+0x6e8>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a3b      	ldr	r2, [pc, #236]	@ (8002580 <HAL_ADC_ConfigChannel+0x7d0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d15d      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002498:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800249c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024a0:	4619      	mov	r1, r3
 80024a2:	4834      	ldr	r0, [pc, #208]	@ (8002574 <HAL_ADC_ConfigChannel+0x7c4>)
 80024a4:	f7fe fd79 	bl	8000f9a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024a8:	4b36      	ldr	r3, [pc, #216]	@ (8002584 <HAL_ADC_ConfigChannel+0x7d4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	099b      	lsrs	r3, r3, #6
 80024ae:	4a36      	ldr	r2, [pc, #216]	@ (8002588 <HAL_ADC_ConfigChannel+0x7d8>)
 80024b0:	fba2 2303 	umull	r2, r3, r2, r3
 80024b4:	099b      	lsrs	r3, r3, #6
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	4613      	mov	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80024c2:	e002      	b.n	80024ca <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1f9      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024d0:	e040      	b.n	8002554 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a2d      	ldr	r2, [pc, #180]	@ (800258c <HAL_ADC_ConfigChannel+0x7dc>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d118      	bne.n	800250e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d112      	bne.n	800250e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a23      	ldr	r2, [pc, #140]	@ (800257c <HAL_ADC_ConfigChannel+0x7cc>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d004      	beq.n	80024fc <HAL_ADC_ConfigChannel+0x74c>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a22      	ldr	r2, [pc, #136]	@ (8002580 <HAL_ADC_ConfigChannel+0x7d0>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d12d      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002500:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002504:	4619      	mov	r1, r3
 8002506:	481b      	ldr	r0, [pc, #108]	@ (8002574 <HAL_ADC_ConfigChannel+0x7c4>)
 8002508:	f7fe fd47 	bl	8000f9a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800250c:	e024      	b.n	8002558 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a1f      	ldr	r2, [pc, #124]	@ (8002590 <HAL_ADC_ConfigChannel+0x7e0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d120      	bne.n	800255a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002518:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800251c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d11a      	bne.n	800255a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a14      	ldr	r2, [pc, #80]	@ (800257c <HAL_ADC_ConfigChannel+0x7cc>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d115      	bne.n	800255a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800252e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002532:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002536:	4619      	mov	r1, r3
 8002538:	480e      	ldr	r0, [pc, #56]	@ (8002574 <HAL_ADC_ConfigChannel+0x7c4>)
 800253a:	f7fe fd2e 	bl	8000f9a <LL_ADC_SetCommonPathInternalCh>
 800253e:	e00c      	b.n	800255a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002544:	f043 0220 	orr.w	r2, r3, #32
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002552:	e002      	b.n	800255a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002554:	bf00      	nop
 8002556:	e000      	b.n	800255a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002558:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002562:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002566:	4618      	mov	r0, r3
 8002568:	37d8      	adds	r7, #216	@ 0xd8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	80080000 	.word	0x80080000
 8002574:	50040300 	.word	0x50040300
 8002578:	c7520000 	.word	0xc7520000
 800257c:	50040000 	.word	0x50040000
 8002580:	50040200 	.word	0x50040200
 8002584:	20000000 	.word	0x20000000
 8002588:	053e2d63 	.word	0x053e2d63
 800258c:	cb840000 	.word	0xcb840000
 8002590:	80000001 	.word	0x80000001

08002594 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800259c:	2300      	movs	r3, #0
 800259e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fe fe8d 	bl	80012c4 <LL_ADC_IsEnabled>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d169      	bne.n	8002684 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	4b36      	ldr	r3, [pc, #216]	@ (8002690 <ADC_Enable+0xfc>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00d      	beq.n	80025da <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c2:	f043 0210 	orr.w	r2, r3, #16
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ce:	f043 0201 	orr.w	r2, r3, #1
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e055      	b.n	8002686 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fe fe5c 	bl	800129c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80025e4:	482b      	ldr	r0, [pc, #172]	@ (8002694 <ADC_Enable+0x100>)
 80025e6:	f7fe fceb 	bl	8000fc0 <LL_ADC_GetCommonPathInternalCh>
 80025ea:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80025ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d013      	beq.n	800261c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025f4:	4b28      	ldr	r3, [pc, #160]	@ (8002698 <ADC_Enable+0x104>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	099b      	lsrs	r3, r3, #6
 80025fa:	4a28      	ldr	r2, [pc, #160]	@ (800269c <ADC_Enable+0x108>)
 80025fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002600:	099b      	lsrs	r3, r3, #6
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	4613      	mov	r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800260e:	e002      	b.n	8002616 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	3b01      	subs	r3, #1
 8002614:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f9      	bne.n	8002610 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800261c:	f7fe fc7a 	bl	8000f14 <HAL_GetTick>
 8002620:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002622:	e028      	b.n	8002676 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7fe fe4b 	bl	80012c4 <LL_ADC_IsEnabled>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d104      	bne.n	800263e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f7fe fe2f 	bl	800129c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800263e:	f7fe fc69 	bl	8000f14 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d914      	bls.n	8002676 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b01      	cmp	r3, #1
 8002658:	d00d      	beq.n	8002676 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800265e:	f043 0210 	orr.w	r2, r3, #16
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266a:	f043 0201 	orr.w	r2, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e007      	b.n	8002686 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d1cf      	bne.n	8002624 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	8000003f 	.word	0x8000003f
 8002694:	50040300 	.word	0x50040300
 8002698:	20000000 	.word	0x20000000
 800269c:	053e2d63 	.word	0x053e2d63

080026a0 <LL_ADC_IsEnabled>:
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <LL_ADC_IsEnabled+0x18>
 80026b4:	2301      	movs	r3, #1
 80026b6:	e000      	b.n	80026ba <LL_ADC_IsEnabled+0x1a>
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <LL_ADC_REG_IsConversionOngoing>:
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d101      	bne.n	80026de <LL_ADC_REG_IsConversionOngoing+0x18>
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002750:	b590      	push	{r4, r7, lr}
 8002752:	b09f      	sub	sp, #124	@ 0x7c
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800275a:	2300      	movs	r3, #0
 800275c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002766:	2b01      	cmp	r3, #1
 8002768:	d101      	bne.n	800276e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800276a:	2302      	movs	r3, #2
 800276c:	e093      	b.n	8002896 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002776:	2300      	movs	r3, #0
 8002778:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800277a:	2300      	movs	r3, #0
 800277c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a47      	ldr	r2, [pc, #284]	@ (80028a0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d102      	bne.n	800278e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002788:	4b46      	ldr	r3, [pc, #280]	@ (80028a4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	e001      	b.n	8002792 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800278e:	2300      	movs	r3, #0
 8002790:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10b      	bne.n	80027b0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800279c:	f043 0220 	orr.w	r2, r3, #32
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e072      	b.n	8002896 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff ff87 	bl	80026c6 <LL_ADC_REG_IsConversionOngoing>
 80027b8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff ff81 	bl	80026c6 <LL_ADC_REG_IsConversionOngoing>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d154      	bne.n	8002874 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80027ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d151      	bne.n	8002874 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80027d0:	4b35      	ldr	r3, [pc, #212]	@ (80028a8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80027d2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d02c      	beq.n	8002836 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80027dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	6859      	ldr	r1, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80027ee:	035b      	lsls	r3, r3, #13
 80027f0:	430b      	orrs	r3, r1
 80027f2:	431a      	orrs	r2, r3
 80027f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027f6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027f8:	4829      	ldr	r0, [pc, #164]	@ (80028a0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80027fa:	f7ff ff51 	bl	80026a0 <LL_ADC_IsEnabled>
 80027fe:	4604      	mov	r4, r0
 8002800:	4828      	ldr	r0, [pc, #160]	@ (80028a4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002802:	f7ff ff4d 	bl	80026a0 <LL_ADC_IsEnabled>
 8002806:	4603      	mov	r3, r0
 8002808:	431c      	orrs	r4, r3
 800280a:	4828      	ldr	r0, [pc, #160]	@ (80028ac <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800280c:	f7ff ff48 	bl	80026a0 <LL_ADC_IsEnabled>
 8002810:	4603      	mov	r3, r0
 8002812:	4323      	orrs	r3, r4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d137      	bne.n	8002888 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002818:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002820:	f023 030f 	bic.w	r3, r3, #15
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	6811      	ldr	r1, [r2, #0]
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	6892      	ldr	r2, [r2, #8]
 800282c:	430a      	orrs	r2, r1
 800282e:	431a      	orrs	r2, r3
 8002830:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002832:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002834:	e028      	b.n	8002888 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002836:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800283e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002840:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002842:	4817      	ldr	r0, [pc, #92]	@ (80028a0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002844:	f7ff ff2c 	bl	80026a0 <LL_ADC_IsEnabled>
 8002848:	4604      	mov	r4, r0
 800284a:	4816      	ldr	r0, [pc, #88]	@ (80028a4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800284c:	f7ff ff28 	bl	80026a0 <LL_ADC_IsEnabled>
 8002850:	4603      	mov	r3, r0
 8002852:	431c      	orrs	r4, r3
 8002854:	4815      	ldr	r0, [pc, #84]	@ (80028ac <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002856:	f7ff ff23 	bl	80026a0 <LL_ADC_IsEnabled>
 800285a:	4603      	mov	r3, r0
 800285c:	4323      	orrs	r3, r4
 800285e:	2b00      	cmp	r3, #0
 8002860:	d112      	bne.n	8002888 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002862:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800286a:	f023 030f 	bic.w	r3, r3, #15
 800286e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002870:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002872:	e009      	b.n	8002888 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002878:	f043 0220 	orr.w	r2, r3, #32
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002886:	e000      	b.n	800288a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002888:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002892:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002896:	4618      	mov	r0, r3
 8002898:	377c      	adds	r7, #124	@ 0x7c
 800289a:	46bd      	mov	sp, r7
 800289c:	bd90      	pop	{r4, r7, pc}
 800289e:	bf00      	nop
 80028a0:	50040000 	.word	0x50040000
 80028a4:	50040100 	.word	0x50040100
 80028a8:	50040300 	.word	0x50040300
 80028ac:	50040200 	.word	0x50040200

080028b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c0:	4b0c      	ldr	r3, [pc, #48]	@ (80028f4 <__NVIC_SetPriorityGrouping+0x44>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028cc:	4013      	ands	r3, r2
 80028ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028e2:	4a04      	ldr	r2, [pc, #16]	@ (80028f4 <__NVIC_SetPriorityGrouping+0x44>)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	60d3      	str	r3, [r2, #12]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028fc:	4b04      	ldr	r3, [pc, #16]	@ (8002910 <__NVIC_GetPriorityGrouping+0x18>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	0a1b      	lsrs	r3, r3, #8
 8002902:	f003 0307 	and.w	r3, r3, #7
}
 8002906:	4618      	mov	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002922:	2b00      	cmp	r3, #0
 8002924:	db0b      	blt.n	800293e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	f003 021f 	and.w	r2, r3, #31
 800292c:	4907      	ldr	r1, [pc, #28]	@ (800294c <__NVIC_EnableIRQ+0x38>)
 800292e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002932:	095b      	lsrs	r3, r3, #5
 8002934:	2001      	movs	r0, #1
 8002936:	fa00 f202 	lsl.w	r2, r0, r2
 800293a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	e000e100 	.word	0xe000e100

08002950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	6039      	str	r1, [r7, #0]
 800295a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800295c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002960:	2b00      	cmp	r3, #0
 8002962:	db0a      	blt.n	800297a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	b2da      	uxtb	r2, r3
 8002968:	490c      	ldr	r1, [pc, #48]	@ (800299c <__NVIC_SetPriority+0x4c>)
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	0112      	lsls	r2, r2, #4
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	440b      	add	r3, r1
 8002974:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002978:	e00a      	b.n	8002990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	b2da      	uxtb	r2, r3
 800297e:	4908      	ldr	r1, [pc, #32]	@ (80029a0 <__NVIC_SetPriority+0x50>)
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	3b04      	subs	r3, #4
 8002988:	0112      	lsls	r2, r2, #4
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	440b      	add	r3, r1
 800298e:	761a      	strb	r2, [r3, #24]
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000e100 	.word	0xe000e100
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b089      	sub	sp, #36	@ 0x24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f1c3 0307 	rsb	r3, r3, #7
 80029be:	2b04      	cmp	r3, #4
 80029c0:	bf28      	it	cs
 80029c2:	2304      	movcs	r3, #4
 80029c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3304      	adds	r3, #4
 80029ca:	2b06      	cmp	r3, #6
 80029cc:	d902      	bls.n	80029d4 <NVIC_EncodePriority+0x30>
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3b03      	subs	r3, #3
 80029d2:	e000      	b.n	80029d6 <NVIC_EncodePriority+0x32>
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d8:	f04f 32ff 	mov.w	r2, #4294967295
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43da      	mvns	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	401a      	ands	r2, r3
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ec:	f04f 31ff 	mov.w	r1, #4294967295
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	fa01 f303 	lsl.w	r3, r1, r3
 80029f6:	43d9      	mvns	r1, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029fc:	4313      	orrs	r3, r2
         );
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3724      	adds	r7, #36	@ 0x24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a1c:	d301      	bcc.n	8002a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e00f      	b.n	8002a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a22:	4a0a      	ldr	r2, [pc, #40]	@ (8002a4c <SysTick_Config+0x40>)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a2a:	210f      	movs	r1, #15
 8002a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a30:	f7ff ff8e 	bl	8002950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a34:	4b05      	ldr	r3, [pc, #20]	@ (8002a4c <SysTick_Config+0x40>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a3a:	4b04      	ldr	r3, [pc, #16]	@ (8002a4c <SysTick_Config+0x40>)
 8002a3c:	2207      	movs	r2, #7
 8002a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	e000e010 	.word	0xe000e010

08002a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff ff29 	bl	80028b0 <__NVIC_SetPriorityGrouping>
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b086      	sub	sp, #24
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a78:	f7ff ff3e 	bl	80028f8 <__NVIC_GetPriorityGrouping>
 8002a7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	68b9      	ldr	r1, [r7, #8]
 8002a82:	6978      	ldr	r0, [r7, #20]
 8002a84:	f7ff ff8e 	bl	80029a4 <NVIC_EncodePriority>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff ff5d 	bl	8002950 <__NVIC_SetPriority>
}
 8002a96:	bf00      	nop
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ff31 	bl	8002914 <__NVIC_EnableIRQ>
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff ffa2 	bl	8002a0c <SysTick_Config>
 8002ac8:	4603      	mov	r3, r0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ada:	2300      	movs	r3, #0
 8002adc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d008      	beq.n	8002afc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2204      	movs	r2, #4
 8002aee:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e022      	b.n	8002b42 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 020e 	bic.w	r2, r2, #14
 8002b0a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0201 	bic.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b20:	f003 021c 	and.w	r2, r3, #28
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b28:	2101      	movs	r1, #1
 8002b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b2e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b084      	sub	sp, #16
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d005      	beq.n	8002b72 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2204      	movs	r2, #4
 8002b6a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	73fb      	strb	r3, [r7, #15]
 8002b70:	e029      	b.n	8002bc6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 020e 	bic.w	r2, r2, #14
 8002b80:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0201 	bic.w	r2, r2, #1
 8002b90:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b96:	f003 021c 	and.w	r2, r3, #28
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	4798      	blx	r3
    }
  }
  return status;
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b087      	sub	sp, #28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bde:	e17f      	b.n	8002ee0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	2101      	movs	r1, #1
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bec:	4013      	ands	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 8171 	beq.w	8002eda <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d005      	beq.n	8002c10 <HAL_GPIO_Init+0x40>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d130      	bne.n	8002c72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	4013      	ands	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c46:	2201      	movs	r2, #1
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	4013      	ands	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	091b      	lsrs	r3, r3, #4
 8002c5c:	f003 0201 	and.w	r2, r3, #1
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	d118      	bne.n	8002cb0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002c84:	2201      	movs	r2, #1
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4013      	ands	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	08db      	lsrs	r3, r3, #3
 8002c9a:	f003 0201 	and.w	r2, r3, #1
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d017      	beq.n	8002cec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 0303 	and.w	r3, r3, #3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d123      	bne.n	8002d40 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	08da      	lsrs	r2, r3, #3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3208      	adds	r2, #8
 8002d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d04:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	220f      	movs	r2, #15
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	08da      	lsrs	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3208      	adds	r2, #8
 8002d3a:	6939      	ldr	r1, [r7, #16]
 8002d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	2203      	movs	r2, #3
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	43db      	mvns	r3, r3
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4013      	ands	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 0203 	and.w	r2, r3, #3
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 80ac 	beq.w	8002eda <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d82:	4b5f      	ldr	r3, [pc, #380]	@ (8002f00 <HAL_GPIO_Init+0x330>)
 8002d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d86:	4a5e      	ldr	r2, [pc, #376]	@ (8002f00 <HAL_GPIO_Init+0x330>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d8e:	4b5c      	ldr	r3, [pc, #368]	@ (8002f00 <HAL_GPIO_Init+0x330>)
 8002d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d9a:	4a5a      	ldr	r2, [pc, #360]	@ (8002f04 <HAL_GPIO_Init+0x334>)
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	089b      	lsrs	r3, r3, #2
 8002da0:	3302      	adds	r3, #2
 8002da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	220f      	movs	r2, #15
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43db      	mvns	r3, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002dc4:	d025      	beq.n	8002e12 <HAL_GPIO_Init+0x242>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a4f      	ldr	r2, [pc, #316]	@ (8002f08 <HAL_GPIO_Init+0x338>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d01f      	beq.n	8002e0e <HAL_GPIO_Init+0x23e>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a4e      	ldr	r2, [pc, #312]	@ (8002f0c <HAL_GPIO_Init+0x33c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d019      	beq.n	8002e0a <HAL_GPIO_Init+0x23a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a4d      	ldr	r2, [pc, #308]	@ (8002f10 <HAL_GPIO_Init+0x340>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d013      	beq.n	8002e06 <HAL_GPIO_Init+0x236>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a4c      	ldr	r2, [pc, #304]	@ (8002f14 <HAL_GPIO_Init+0x344>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00d      	beq.n	8002e02 <HAL_GPIO_Init+0x232>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a4b      	ldr	r2, [pc, #300]	@ (8002f18 <HAL_GPIO_Init+0x348>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d007      	beq.n	8002dfe <HAL_GPIO_Init+0x22e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a4a      	ldr	r2, [pc, #296]	@ (8002f1c <HAL_GPIO_Init+0x34c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d101      	bne.n	8002dfa <HAL_GPIO_Init+0x22a>
 8002df6:	2306      	movs	r3, #6
 8002df8:	e00c      	b.n	8002e14 <HAL_GPIO_Init+0x244>
 8002dfa:	2307      	movs	r3, #7
 8002dfc:	e00a      	b.n	8002e14 <HAL_GPIO_Init+0x244>
 8002dfe:	2305      	movs	r3, #5
 8002e00:	e008      	b.n	8002e14 <HAL_GPIO_Init+0x244>
 8002e02:	2304      	movs	r3, #4
 8002e04:	e006      	b.n	8002e14 <HAL_GPIO_Init+0x244>
 8002e06:	2303      	movs	r3, #3
 8002e08:	e004      	b.n	8002e14 <HAL_GPIO_Init+0x244>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e002      	b.n	8002e14 <HAL_GPIO_Init+0x244>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <HAL_GPIO_Init+0x244>
 8002e12:	2300      	movs	r3, #0
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	f002 0203 	and.w	r2, r2, #3
 8002e1a:	0092      	lsls	r2, r2, #2
 8002e1c:	4093      	lsls	r3, r2
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e24:	4937      	ldr	r1, [pc, #220]	@ (8002f04 <HAL_GPIO_Init+0x334>)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	089b      	lsrs	r3, r3, #2
 8002e2a:	3302      	adds	r3, #2
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e32:	4b3b      	ldr	r3, [pc, #236]	@ (8002f20 <HAL_GPIO_Init+0x350>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e56:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <HAL_GPIO_Init+0x350>)
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e5c:	4b30      	ldr	r3, [pc, #192]	@ (8002f20 <HAL_GPIO_Init+0x350>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	43db      	mvns	r3, r3
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e80:	4a27      	ldr	r2, [pc, #156]	@ (8002f20 <HAL_GPIO_Init+0x350>)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e86:	4b26      	ldr	r3, [pc, #152]	@ (8002f20 <HAL_GPIO_Init+0x350>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4013      	ands	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002eaa:	4a1d      	ldr	r2, [pc, #116]	@ (8002f20 <HAL_GPIO_Init+0x350>)
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f20 <HAL_GPIO_Init+0x350>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ed4:	4a12      	ldr	r2, [pc, #72]	@ (8002f20 <HAL_GPIO_Init+0x350>)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	3301      	adds	r3, #1
 8002ede:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f47f ae78 	bne.w	8002be0 <HAL_GPIO_Init+0x10>
  }
}
 8002ef0:	bf00      	nop
 8002ef2:	bf00      	nop
 8002ef4:	371c      	adds	r7, #28
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40010000 	.word	0x40010000
 8002f08:	48000400 	.word	0x48000400
 8002f0c:	48000800 	.word	0x48000800
 8002f10:	48000c00 	.word	0x48000c00
 8002f14:	48001000 	.word	0x48001000
 8002f18:	48001400 	.word	0x48001400
 8002f1c:	48001800 	.word	0x48001800
 8002f20:	40010400 	.word	0x40010400

08002f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	807b      	strh	r3, [r7, #2]
 8002f30:	4613      	mov	r3, r2
 8002f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f34:	787b      	ldrb	r3, [r7, #1]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f3a:	887a      	ldrh	r2, [r7, #2]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f40:	e002      	b.n	8002f48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f42:	887a      	ldrh	r2, [r7, #2]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f5e:	4b08      	ldr	r3, [pc, #32]	@ (8002f80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f60:	695a      	ldr	r2, [r3, #20]
 8002f62:	88fb      	ldrh	r3, [r7, #6]
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d006      	beq.n	8002f78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f6a:	4a05      	ldr	r2, [pc, #20]	@ (8002f80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f6c:	88fb      	ldrh	r3, [r7, #6]
 8002f6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f70:	88fb      	ldrh	r3, [r7, #6]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 f806 	bl	8002f84 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40010400 	.word	0x40010400

08002f84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
	...

08002f9c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002fa0:	4b04      	ldr	r3, [pc, #16]	@ (8002fb4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40007000 	.word	0x40007000

08002fb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fc6:	d130      	bne.n	800302a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fc8:	4b23      	ldr	r3, [pc, #140]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fd4:	d038      	beq.n	8003048 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fd6:	4b20      	ldr	r3, [pc, #128]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fde:	4a1e      	ldr	r2, [pc, #120]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fe0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fe4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800305c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2232      	movs	r2, #50	@ 0x32
 8002fec:	fb02 f303 	mul.w	r3, r2, r3
 8002ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8003060 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff6:	0c9b      	lsrs	r3, r3, #18
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ffc:	e002      	b.n	8003004 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	3b01      	subs	r3, #1
 8003002:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003004:	4b14      	ldr	r3, [pc, #80]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800300c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003010:	d102      	bne.n	8003018 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1f2      	bne.n	8002ffe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003018:	4b0f      	ldr	r3, [pc, #60]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003020:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003024:	d110      	bne.n	8003048 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e00f      	b.n	800304a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800302a:	4b0b      	ldr	r3, [pc, #44]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003036:	d007      	beq.n	8003048 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003038:	4b07      	ldr	r3, [pc, #28]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003040:	4a05      	ldr	r2, [pc, #20]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003042:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003046:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40007000 	.word	0x40007000
 800305c:	20000000 	.word	0x20000000
 8003060:	431bde83 	.word	0x431bde83

08003064 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e3ca      	b.n	800380c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003076:	4b97      	ldr	r3, [pc, #604]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 030c 	and.w	r3, r3, #12
 800307e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003080:	4b94      	ldr	r3, [pc, #592]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f003 0303 	and.w	r3, r3, #3
 8003088:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0310 	and.w	r3, r3, #16
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 80e4 	beq.w	8003260 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d007      	beq.n	80030ae <HAL_RCC_OscConfig+0x4a>
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	2b0c      	cmp	r3, #12
 80030a2:	f040 808b 	bne.w	80031bc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	f040 8087 	bne.w	80031bc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030ae:	4b89      	ldr	r3, [pc, #548]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d005      	beq.n	80030c6 <HAL_RCC_OscConfig+0x62>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e3a2      	b.n	800380c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1a      	ldr	r2, [r3, #32]
 80030ca:	4b82      	ldr	r3, [pc, #520]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d004      	beq.n	80030e0 <HAL_RCC_OscConfig+0x7c>
 80030d6:	4b7f      	ldr	r3, [pc, #508]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030de:	e005      	b.n	80030ec <HAL_RCC_OscConfig+0x88>
 80030e0:	4b7c      	ldr	r3, [pc, #496]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 80030e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030e6:	091b      	lsrs	r3, r3, #4
 80030e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d223      	bcs.n	8003138 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 fd55 	bl	8003ba4 <RCC_SetFlashLatencyFromMSIRange>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e383      	b.n	800380c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003104:	4b73      	ldr	r3, [pc, #460]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a72      	ldr	r2, [pc, #456]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 800310a:	f043 0308 	orr.w	r3, r3, #8
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	4b70      	ldr	r3, [pc, #448]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	496d      	ldr	r1, [pc, #436]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 800311e:	4313      	orrs	r3, r2
 8003120:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003122:	4b6c      	ldr	r3, [pc, #432]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	021b      	lsls	r3, r3, #8
 8003130:	4968      	ldr	r1, [pc, #416]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 8003132:	4313      	orrs	r3, r2
 8003134:	604b      	str	r3, [r1, #4]
 8003136:	e025      	b.n	8003184 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003138:	4b66      	ldr	r3, [pc, #408]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a65      	ldr	r2, [pc, #404]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 800313e:	f043 0308 	orr.w	r3, r3, #8
 8003142:	6013      	str	r3, [r2, #0]
 8003144:	4b63      	ldr	r3, [pc, #396]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	4960      	ldr	r1, [pc, #384]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 8003152:	4313      	orrs	r3, r2
 8003154:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003156:	4b5f      	ldr	r3, [pc, #380]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	021b      	lsls	r3, r3, #8
 8003164:	495b      	ldr	r1, [pc, #364]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 8003166:	4313      	orrs	r3, r2
 8003168:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d109      	bne.n	8003184 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fd15 	bl	8003ba4 <RCC_SetFlashLatencyFromMSIRange>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e343      	b.n	800380c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003184:	f000 fc4a 	bl	8003a1c <HAL_RCC_GetSysClockFreq>
 8003188:	4602      	mov	r2, r0
 800318a:	4b52      	ldr	r3, [pc, #328]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	091b      	lsrs	r3, r3, #4
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	4950      	ldr	r1, [pc, #320]	@ (80032d8 <HAL_RCC_OscConfig+0x274>)
 8003196:	5ccb      	ldrb	r3, [r1, r3]
 8003198:	f003 031f 	and.w	r3, r3, #31
 800319c:	fa22 f303 	lsr.w	r3, r2, r3
 80031a0:	4a4e      	ldr	r2, [pc, #312]	@ (80032dc <HAL_RCC_OscConfig+0x278>)
 80031a2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80031a4:	4b4e      	ldr	r3, [pc, #312]	@ (80032e0 <HAL_RCC_OscConfig+0x27c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fd fe63 	bl	8000e74 <HAL_InitTick>
 80031ae:	4603      	mov	r3, r0
 80031b0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d052      	beq.n	800325e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
 80031ba:	e327      	b.n	800380c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d032      	beq.n	800322a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031c4:	4b43      	ldr	r3, [pc, #268]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a42      	ldr	r2, [pc, #264]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 80031ca:	f043 0301 	orr.w	r3, r3, #1
 80031ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031d0:	f7fd fea0 	bl	8000f14 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031d8:	f7fd fe9c 	bl	8000f14 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e310      	b.n	800380c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031ea:	4b3a      	ldr	r3, [pc, #232]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0f0      	beq.n	80031d8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031f6:	4b37      	ldr	r3, [pc, #220]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a36      	ldr	r2, [pc, #216]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 80031fc:	f043 0308 	orr.w	r3, r3, #8
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	4b34      	ldr	r3, [pc, #208]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	4931      	ldr	r1, [pc, #196]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 8003210:	4313      	orrs	r3, r2
 8003212:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003214:	4b2f      	ldr	r3, [pc, #188]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	021b      	lsls	r3, r3, #8
 8003222:	492c      	ldr	r1, [pc, #176]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 8003224:	4313      	orrs	r3, r2
 8003226:	604b      	str	r3, [r1, #4]
 8003228:	e01a      	b.n	8003260 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800322a:	4b2a      	ldr	r3, [pc, #168]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a29      	ldr	r2, [pc, #164]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 8003230:	f023 0301 	bic.w	r3, r3, #1
 8003234:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003236:	f7fd fe6d 	bl	8000f14 <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800323e:	f7fd fe69 	bl	8000f14 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e2dd      	b.n	800380c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003250:	4b20      	ldr	r3, [pc, #128]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1f0      	bne.n	800323e <HAL_RCC_OscConfig+0x1da>
 800325c:	e000      	b.n	8003260 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800325e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d074      	beq.n	8003356 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	2b08      	cmp	r3, #8
 8003270:	d005      	beq.n	800327e <HAL_RCC_OscConfig+0x21a>
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	2b0c      	cmp	r3, #12
 8003276:	d10e      	bne.n	8003296 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	2b03      	cmp	r3, #3
 800327c:	d10b      	bne.n	8003296 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800327e:	4b15      	ldr	r3, [pc, #84]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d064      	beq.n	8003354 <HAL_RCC_OscConfig+0x2f0>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d160      	bne.n	8003354 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e2ba      	b.n	800380c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800329e:	d106      	bne.n	80032ae <HAL_RCC_OscConfig+0x24a>
 80032a0:	4b0c      	ldr	r3, [pc, #48]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a0b      	ldr	r2, [pc, #44]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 80032a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032aa:	6013      	str	r3, [r2, #0]
 80032ac:	e026      	b.n	80032fc <HAL_RCC_OscConfig+0x298>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032b6:	d115      	bne.n	80032e4 <HAL_RCC_OscConfig+0x280>
 80032b8:	4b06      	ldr	r3, [pc, #24]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a05      	ldr	r2, [pc, #20]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 80032be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032c2:	6013      	str	r3, [r2, #0]
 80032c4:	4b03      	ldr	r3, [pc, #12]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a02      	ldr	r2, [pc, #8]	@ (80032d4 <HAL_RCC_OscConfig+0x270>)
 80032ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	e014      	b.n	80032fc <HAL_RCC_OscConfig+0x298>
 80032d2:	bf00      	nop
 80032d4:	40021000 	.word	0x40021000
 80032d8:	0800618c 	.word	0x0800618c
 80032dc:	20000000 	.word	0x20000000
 80032e0:	20000004 	.word	0x20000004
 80032e4:	4ba0      	ldr	r3, [pc, #640]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a9f      	ldr	r2, [pc, #636]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 80032ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	4b9d      	ldr	r3, [pc, #628]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a9c      	ldr	r2, [pc, #624]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 80032f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d013      	beq.n	800332c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7fd fe06 	bl	8000f14 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800330c:	f7fd fe02 	bl	8000f14 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b64      	cmp	r3, #100	@ 0x64
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e276      	b.n	800380c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800331e:	4b92      	ldr	r3, [pc, #584]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCC_OscConfig+0x2a8>
 800332a:	e014      	b.n	8003356 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332c:	f7fd fdf2 	bl	8000f14 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003334:	f7fd fdee 	bl	8000f14 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b64      	cmp	r3, #100	@ 0x64
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e262      	b.n	800380c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003346:	4b88      	ldr	r3, [pc, #544]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0x2d0>
 8003352:	e000      	b.n	8003356 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d060      	beq.n	8003424 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	2b04      	cmp	r3, #4
 8003366:	d005      	beq.n	8003374 <HAL_RCC_OscConfig+0x310>
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	2b0c      	cmp	r3, #12
 800336c:	d119      	bne.n	80033a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	2b02      	cmp	r3, #2
 8003372:	d116      	bne.n	80033a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003374:	4b7c      	ldr	r3, [pc, #496]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <HAL_RCC_OscConfig+0x328>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e23f      	b.n	800380c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800338c:	4b76      	ldr	r3, [pc, #472]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	061b      	lsls	r3, r3, #24
 800339a:	4973      	ldr	r1, [pc, #460]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 800339c:	4313      	orrs	r3, r2
 800339e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033a0:	e040      	b.n	8003424 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d023      	beq.n	80033f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033aa:	4b6f      	ldr	r3, [pc, #444]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a6e      	ldr	r2, [pc, #440]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 80033b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b6:	f7fd fdad 	bl	8000f14 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033be:	f7fd fda9 	bl	8000f14 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e21d      	b.n	800380c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033d0:	4b65      	ldr	r3, [pc, #404]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0f0      	beq.n	80033be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033dc:	4b62      	ldr	r3, [pc, #392]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	061b      	lsls	r3, r3, #24
 80033ea:	495f      	ldr	r1, [pc, #380]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	604b      	str	r3, [r1, #4]
 80033f0:	e018      	b.n	8003424 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033f2:	4b5d      	ldr	r3, [pc, #372]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a5c      	ldr	r2, [pc, #368]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 80033f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fe:	f7fd fd89 	bl	8000f14 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003406:	f7fd fd85 	bl	8000f14 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e1f9      	b.n	800380c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003418:	4b53      	ldr	r3, [pc, #332]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1f0      	bne.n	8003406 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0308 	and.w	r3, r3, #8
 800342c:	2b00      	cmp	r3, #0
 800342e:	d03c      	beq.n	80034aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d01c      	beq.n	8003472 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003438:	4b4b      	ldr	r3, [pc, #300]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 800343a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800343e:	4a4a      	ldr	r2, [pc, #296]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003448:	f7fd fd64 	bl	8000f14 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003450:	f7fd fd60 	bl	8000f14 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e1d4      	b.n	800380c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003462:	4b41      	ldr	r3, [pc, #260]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 8003464:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0ef      	beq.n	8003450 <HAL_RCC_OscConfig+0x3ec>
 8003470:	e01b      	b.n	80034aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003472:	4b3d      	ldr	r3, [pc, #244]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 8003474:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003478:	4a3b      	ldr	r2, [pc, #236]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 800347a:	f023 0301 	bic.w	r3, r3, #1
 800347e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003482:	f7fd fd47 	bl	8000f14 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800348a:	f7fd fd43 	bl	8000f14 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e1b7      	b.n	800380c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800349c:	4b32      	ldr	r3, [pc, #200]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 800349e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1ef      	bne.n	800348a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 80a6 	beq.w	8003604 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034b8:	2300      	movs	r3, #0
 80034ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034bc:	4b2a      	ldr	r3, [pc, #168]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 80034be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10d      	bne.n	80034e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c8:	4b27      	ldr	r3, [pc, #156]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 80034ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034cc:	4a26      	ldr	r2, [pc, #152]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 80034ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80034d4:	4b24      	ldr	r3, [pc, #144]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 80034d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034dc:	60bb      	str	r3, [r7, #8]
 80034de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034e0:	2301      	movs	r3, #1
 80034e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034e4:	4b21      	ldr	r3, [pc, #132]	@ (800356c <HAL_RCC_OscConfig+0x508>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d118      	bne.n	8003522 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034f0:	4b1e      	ldr	r3, [pc, #120]	@ (800356c <HAL_RCC_OscConfig+0x508>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a1d      	ldr	r2, [pc, #116]	@ (800356c <HAL_RCC_OscConfig+0x508>)
 80034f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034fc:	f7fd fd0a 	bl	8000f14 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003504:	f7fd fd06 	bl	8000f14 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e17a      	b.n	800380c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003516:	4b15      	ldr	r3, [pc, #84]	@ (800356c <HAL_RCC_OscConfig+0x508>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0f0      	beq.n	8003504 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d108      	bne.n	800353c <HAL_RCC_OscConfig+0x4d8>
 800352a:	4b0f      	ldr	r3, [pc, #60]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 800352c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003530:	4a0d      	ldr	r2, [pc, #52]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 8003532:	f043 0301 	orr.w	r3, r3, #1
 8003536:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800353a:	e029      	b.n	8003590 <HAL_RCC_OscConfig+0x52c>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	2b05      	cmp	r3, #5
 8003542:	d115      	bne.n	8003570 <HAL_RCC_OscConfig+0x50c>
 8003544:	4b08      	ldr	r3, [pc, #32]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800354a:	4a07      	ldr	r2, [pc, #28]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 800354c:	f043 0304 	orr.w	r3, r3, #4
 8003550:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003554:	4b04      	ldr	r3, [pc, #16]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 8003556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800355a:	4a03      	ldr	r2, [pc, #12]	@ (8003568 <HAL_RCC_OscConfig+0x504>)
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003564:	e014      	b.n	8003590 <HAL_RCC_OscConfig+0x52c>
 8003566:	bf00      	nop
 8003568:	40021000 	.word	0x40021000
 800356c:	40007000 	.word	0x40007000
 8003570:	4b9c      	ldr	r3, [pc, #624]	@ (80037e4 <HAL_RCC_OscConfig+0x780>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003576:	4a9b      	ldr	r2, [pc, #620]	@ (80037e4 <HAL_RCC_OscConfig+0x780>)
 8003578:	f023 0301 	bic.w	r3, r3, #1
 800357c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003580:	4b98      	ldr	r3, [pc, #608]	@ (80037e4 <HAL_RCC_OscConfig+0x780>)
 8003582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003586:	4a97      	ldr	r2, [pc, #604]	@ (80037e4 <HAL_RCC_OscConfig+0x780>)
 8003588:	f023 0304 	bic.w	r3, r3, #4
 800358c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d016      	beq.n	80035c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003598:	f7fd fcbc 	bl	8000f14 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800359e:	e00a      	b.n	80035b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a0:	f7fd fcb8 	bl	8000f14 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e12a      	b.n	800380c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035b6:	4b8b      	ldr	r3, [pc, #556]	@ (80037e4 <HAL_RCC_OscConfig+0x780>)
 80035b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0ed      	beq.n	80035a0 <HAL_RCC_OscConfig+0x53c>
 80035c4:	e015      	b.n	80035f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c6:	f7fd fca5 	bl	8000f14 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035cc:	e00a      	b.n	80035e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ce:	f7fd fca1 	bl	8000f14 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035dc:	4293      	cmp	r3, r2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e113      	b.n	800380c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035e4:	4b7f      	ldr	r3, [pc, #508]	@ (80037e4 <HAL_RCC_OscConfig+0x780>)
 80035e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1ed      	bne.n	80035ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035f2:	7ffb      	ldrb	r3, [r7, #31]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d105      	bne.n	8003604 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f8:	4b7a      	ldr	r3, [pc, #488]	@ (80037e4 <HAL_RCC_OscConfig+0x780>)
 80035fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fc:	4a79      	ldr	r2, [pc, #484]	@ (80037e4 <HAL_RCC_OscConfig+0x780>)
 80035fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003602:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 80fe 	beq.w	800380a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003612:	2b02      	cmp	r3, #2
 8003614:	f040 80d0 	bne.w	80037b8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003618:	4b72      	ldr	r3, [pc, #456]	@ (80037e4 <HAL_RCC_OscConfig+0x780>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f003 0203 	and.w	r2, r3, #3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003628:	429a      	cmp	r2, r3
 800362a:	d130      	bne.n	800368e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003636:	3b01      	subs	r3, #1
 8003638:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800363a:	429a      	cmp	r2, r3
 800363c:	d127      	bne.n	800368e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003648:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800364a:	429a      	cmp	r2, r3
 800364c:	d11f      	bne.n	800368e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003658:	2a07      	cmp	r2, #7
 800365a:	bf14      	ite	ne
 800365c:	2201      	movne	r2, #1
 800365e:	2200      	moveq	r2, #0
 8003660:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003662:	4293      	cmp	r3, r2
 8003664:	d113      	bne.n	800368e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003670:	085b      	lsrs	r3, r3, #1
 8003672:	3b01      	subs	r3, #1
 8003674:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003676:	429a      	cmp	r2, r3
 8003678:	d109      	bne.n	800368e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003684:	085b      	lsrs	r3, r3, #1
 8003686:	3b01      	subs	r3, #1
 8003688:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800368a:	429a      	cmp	r2, r3
 800368c:	d06e      	beq.n	800376c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	2b0c      	cmp	r3, #12
 8003692:	d069      	beq.n	8003768 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003694:	4b53      	ldr	r3, [pc, #332]	@ (80037e4 <HAL_RCC_OscConfig+0x780>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d105      	bne.n	80036ac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80036a0:	4b50      	ldr	r3, [pc, #320]	@ (80037e4 <HAL_RCC_OscConfig+0x780>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0ad      	b.n	800380c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036b0:	4b4c      	ldr	r3, [pc, #304]	@ (80037e4 <HAL_RCC_OscConfig+0x780>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a4b      	ldr	r2, [pc, #300]	@ (80037e4 <HAL_RCC_OscConfig+0x780>)
 80036b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036ba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036bc:	f7fd fc2a 	bl	8000f14 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c4:	f7fd fc26 	bl	8000f14 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e09a      	b.n	800380c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036d6:	4b43      	ldr	r3, [pc, #268]	@ (80037e4 <HAL_RCC_OscConfig+0x780>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1f0      	bne.n	80036c4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036e2:	4b40      	ldr	r3, [pc, #256]	@ (80037e4 <HAL_RCC_OscConfig+0x780>)
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	4b40      	ldr	r3, [pc, #256]	@ (80037e8 <HAL_RCC_OscConfig+0x784>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80036f2:	3a01      	subs	r2, #1
 80036f4:	0112      	lsls	r2, r2, #4
 80036f6:	4311      	orrs	r1, r2
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80036fc:	0212      	lsls	r2, r2, #8
 80036fe:	4311      	orrs	r1, r2
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003704:	0852      	lsrs	r2, r2, #1
 8003706:	3a01      	subs	r2, #1
 8003708:	0552      	lsls	r2, r2, #21
 800370a:	4311      	orrs	r1, r2
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003710:	0852      	lsrs	r2, r2, #1
 8003712:	3a01      	subs	r2, #1
 8003714:	0652      	lsls	r2, r2, #25
 8003716:	4311      	orrs	r1, r2
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800371c:	0912      	lsrs	r2, r2, #4
 800371e:	0452      	lsls	r2, r2, #17
 8003720:	430a      	orrs	r2, r1
 8003722:	4930      	ldr	r1, [pc, #192]	@ (80037e4 <HAL_RCC_OscConfig+0x780>)
 8003724:	4313      	orrs	r3, r2
 8003726:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003728:	4b2e      	ldr	r3, [pc, #184]	@ (80037e4 <HAL_RCC_OscConfig+0x780>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a2d      	ldr	r2, [pc, #180]	@ (80037e4 <HAL_RCC_OscConfig+0x780>)
 800372e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003732:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003734:	4b2b      	ldr	r3, [pc, #172]	@ (80037e4 <HAL_RCC_OscConfig+0x780>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4a2a      	ldr	r2, [pc, #168]	@ (80037e4 <HAL_RCC_OscConfig+0x780>)
 800373a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800373e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003740:	f7fd fbe8 	bl	8000f14 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003748:	f7fd fbe4 	bl	8000f14 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e058      	b.n	800380c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800375a:	4b22      	ldr	r3, [pc, #136]	@ (80037e4 <HAL_RCC_OscConfig+0x780>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f0      	beq.n	8003748 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003766:	e050      	b.n	800380a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e04f      	b.n	800380c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800376c:	4b1d      	ldr	r3, [pc, #116]	@ (80037e4 <HAL_RCC_OscConfig+0x780>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d148      	bne.n	800380a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003778:	4b1a      	ldr	r3, [pc, #104]	@ (80037e4 <HAL_RCC_OscConfig+0x780>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a19      	ldr	r2, [pc, #100]	@ (80037e4 <HAL_RCC_OscConfig+0x780>)
 800377e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003782:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003784:	4b17      	ldr	r3, [pc, #92]	@ (80037e4 <HAL_RCC_OscConfig+0x780>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	4a16      	ldr	r2, [pc, #88]	@ (80037e4 <HAL_RCC_OscConfig+0x780>)
 800378a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800378e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003790:	f7fd fbc0 	bl	8000f14 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003798:	f7fd fbbc 	bl	8000f14 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e030      	b.n	800380c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037aa:	4b0e      	ldr	r3, [pc, #56]	@ (80037e4 <HAL_RCC_OscConfig+0x780>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f0      	beq.n	8003798 <HAL_RCC_OscConfig+0x734>
 80037b6:	e028      	b.n	800380a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	2b0c      	cmp	r3, #12
 80037bc:	d023      	beq.n	8003806 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037be:	4b09      	ldr	r3, [pc, #36]	@ (80037e4 <HAL_RCC_OscConfig+0x780>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a08      	ldr	r2, [pc, #32]	@ (80037e4 <HAL_RCC_OscConfig+0x780>)
 80037c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ca:	f7fd fba3 	bl	8000f14 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037d0:	e00c      	b.n	80037ec <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d2:	f7fd fb9f 	bl	8000f14 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d905      	bls.n	80037ec <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e013      	b.n	800380c <HAL_RCC_OscConfig+0x7a8>
 80037e4:	40021000 	.word	0x40021000
 80037e8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ec:	4b09      	ldr	r3, [pc, #36]	@ (8003814 <HAL_RCC_OscConfig+0x7b0>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1ec      	bne.n	80037d2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037f8:	4b06      	ldr	r3, [pc, #24]	@ (8003814 <HAL_RCC_OscConfig+0x7b0>)
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	4905      	ldr	r1, [pc, #20]	@ (8003814 <HAL_RCC_OscConfig+0x7b0>)
 80037fe:	4b06      	ldr	r3, [pc, #24]	@ (8003818 <HAL_RCC_OscConfig+0x7b4>)
 8003800:	4013      	ands	r3, r2
 8003802:	60cb      	str	r3, [r1, #12]
 8003804:	e001      	b.n	800380a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3720      	adds	r7, #32
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40021000 	.word	0x40021000
 8003818:	feeefffc 	.word	0xfeeefffc

0800381c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0e7      	b.n	8003a00 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003830:	4b75      	ldr	r3, [pc, #468]	@ (8003a08 <HAL_RCC_ClockConfig+0x1ec>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d910      	bls.n	8003860 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383e:	4b72      	ldr	r3, [pc, #456]	@ (8003a08 <HAL_RCC_ClockConfig+0x1ec>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f023 0207 	bic.w	r2, r3, #7
 8003846:	4970      	ldr	r1, [pc, #448]	@ (8003a08 <HAL_RCC_ClockConfig+0x1ec>)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	4313      	orrs	r3, r2
 800384c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800384e:	4b6e      	ldr	r3, [pc, #440]	@ (8003a08 <HAL_RCC_ClockConfig+0x1ec>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d001      	beq.n	8003860 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e0cf      	b.n	8003a00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d010      	beq.n	800388e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	4b66      	ldr	r3, [pc, #408]	@ (8003a0c <HAL_RCC_ClockConfig+0x1f0>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003878:	429a      	cmp	r2, r3
 800387a:	d908      	bls.n	800388e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800387c:	4b63      	ldr	r3, [pc, #396]	@ (8003a0c <HAL_RCC_ClockConfig+0x1f0>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	4960      	ldr	r1, [pc, #384]	@ (8003a0c <HAL_RCC_ClockConfig+0x1f0>)
 800388a:	4313      	orrs	r3, r2
 800388c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d04c      	beq.n	8003934 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d107      	bne.n	80038b2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038a2:	4b5a      	ldr	r3, [pc, #360]	@ (8003a0c <HAL_RCC_ClockConfig+0x1f0>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d121      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e0a6      	b.n	8003a00 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d107      	bne.n	80038ca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038ba:	4b54      	ldr	r3, [pc, #336]	@ (8003a0c <HAL_RCC_ClockConfig+0x1f0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d115      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e09a      	b.n	8003a00 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d107      	bne.n	80038e2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038d2:	4b4e      	ldr	r3, [pc, #312]	@ (8003a0c <HAL_RCC_ClockConfig+0x1f0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d109      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e08e      	b.n	8003a00 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038e2:	4b4a      	ldr	r3, [pc, #296]	@ (8003a0c <HAL_RCC_ClockConfig+0x1f0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e086      	b.n	8003a00 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038f2:	4b46      	ldr	r3, [pc, #280]	@ (8003a0c <HAL_RCC_ClockConfig+0x1f0>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f023 0203 	bic.w	r2, r3, #3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	4943      	ldr	r1, [pc, #268]	@ (8003a0c <HAL_RCC_ClockConfig+0x1f0>)
 8003900:	4313      	orrs	r3, r2
 8003902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003904:	f7fd fb06 	bl	8000f14 <HAL_GetTick>
 8003908:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390a:	e00a      	b.n	8003922 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800390c:	f7fd fb02 	bl	8000f14 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800391a:	4293      	cmp	r3, r2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e06e      	b.n	8003a00 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003922:	4b3a      	ldr	r3, [pc, #232]	@ (8003a0c <HAL_RCC_ClockConfig+0x1f0>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 020c 	and.w	r2, r3, #12
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	429a      	cmp	r2, r3
 8003932:	d1eb      	bne.n	800390c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d010      	beq.n	8003962 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	4b31      	ldr	r3, [pc, #196]	@ (8003a0c <HAL_RCC_ClockConfig+0x1f0>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800394c:	429a      	cmp	r2, r3
 800394e:	d208      	bcs.n	8003962 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003950:	4b2e      	ldr	r3, [pc, #184]	@ (8003a0c <HAL_RCC_ClockConfig+0x1f0>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	492b      	ldr	r1, [pc, #172]	@ (8003a0c <HAL_RCC_ClockConfig+0x1f0>)
 800395e:	4313      	orrs	r3, r2
 8003960:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003962:	4b29      	ldr	r3, [pc, #164]	@ (8003a08 <HAL_RCC_ClockConfig+0x1ec>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d210      	bcs.n	8003992 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003970:	4b25      	ldr	r3, [pc, #148]	@ (8003a08 <HAL_RCC_ClockConfig+0x1ec>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f023 0207 	bic.w	r2, r3, #7
 8003978:	4923      	ldr	r1, [pc, #140]	@ (8003a08 <HAL_RCC_ClockConfig+0x1ec>)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	4313      	orrs	r3, r2
 800397e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003980:	4b21      	ldr	r3, [pc, #132]	@ (8003a08 <HAL_RCC_ClockConfig+0x1ec>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d001      	beq.n	8003992 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e036      	b.n	8003a00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	2b00      	cmp	r3, #0
 800399c:	d008      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800399e:	4b1b      	ldr	r3, [pc, #108]	@ (8003a0c <HAL_RCC_ClockConfig+0x1f0>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	4918      	ldr	r1, [pc, #96]	@ (8003a0c <HAL_RCC_ClockConfig+0x1f0>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0308 	and.w	r3, r3, #8
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d009      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039bc:	4b13      	ldr	r3, [pc, #76]	@ (8003a0c <HAL_RCC_ClockConfig+0x1f0>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	4910      	ldr	r1, [pc, #64]	@ (8003a0c <HAL_RCC_ClockConfig+0x1f0>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039d0:	f000 f824 	bl	8003a1c <HAL_RCC_GetSysClockFreq>
 80039d4:	4602      	mov	r2, r0
 80039d6:	4b0d      	ldr	r3, [pc, #52]	@ (8003a0c <HAL_RCC_ClockConfig+0x1f0>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	091b      	lsrs	r3, r3, #4
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	490b      	ldr	r1, [pc, #44]	@ (8003a10 <HAL_RCC_ClockConfig+0x1f4>)
 80039e2:	5ccb      	ldrb	r3, [r1, r3]
 80039e4:	f003 031f 	and.w	r3, r3, #31
 80039e8:	fa22 f303 	lsr.w	r3, r2, r3
 80039ec:	4a09      	ldr	r2, [pc, #36]	@ (8003a14 <HAL_RCC_ClockConfig+0x1f8>)
 80039ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039f0:	4b09      	ldr	r3, [pc, #36]	@ (8003a18 <HAL_RCC_ClockConfig+0x1fc>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fd fa3d 	bl	8000e74 <HAL_InitTick>
 80039fa:	4603      	mov	r3, r0
 80039fc:	72fb      	strb	r3, [r7, #11]

  return status;
 80039fe:	7afb      	ldrb	r3, [r7, #11]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40022000 	.word	0x40022000
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	0800618c 	.word	0x0800618c
 8003a14:	20000000 	.word	0x20000000
 8003a18:	20000004 	.word	0x20000004

08003a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b089      	sub	sp, #36	@ 0x24
 8003a20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	61fb      	str	r3, [r7, #28]
 8003a26:	2300      	movs	r3, #0
 8003a28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a2a:	4b3e      	ldr	r3, [pc, #248]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
 8003a32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a34:	4b3b      	ldr	r3, [pc, #236]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f003 0303 	and.w	r3, r3, #3
 8003a3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <HAL_RCC_GetSysClockFreq+0x34>
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	2b0c      	cmp	r3, #12
 8003a48:	d121      	bne.n	8003a8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d11e      	bne.n	8003a8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a50:	4b34      	ldr	r3, [pc, #208]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d107      	bne.n	8003a6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a5c:	4b31      	ldr	r3, [pc, #196]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a62:	0a1b      	lsrs	r3, r3, #8
 8003a64:	f003 030f 	and.w	r3, r3, #15
 8003a68:	61fb      	str	r3, [r7, #28]
 8003a6a:	e005      	b.n	8003a78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a6c:	4b2d      	ldr	r3, [pc, #180]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	091b      	lsrs	r3, r3, #4
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a78:	4a2b      	ldr	r2, [pc, #172]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10d      	bne.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a8c:	e00a      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d102      	bne.n	8003a9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a94:	4b25      	ldr	r3, [pc, #148]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x110>)
 8003a96:	61bb      	str	r3, [r7, #24]
 8003a98:	e004      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	d101      	bne.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003aa0:	4b23      	ldr	r3, [pc, #140]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x114>)
 8003aa2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	2b0c      	cmp	r3, #12
 8003aa8:	d134      	bne.n	8003b14 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d003      	beq.n	8003ac2 <HAL_RCC_GetSysClockFreq+0xa6>
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b03      	cmp	r3, #3
 8003abe:	d003      	beq.n	8003ac8 <HAL_RCC_GetSysClockFreq+0xac>
 8003ac0:	e005      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x110>)
 8003ac4:	617b      	str	r3, [r7, #20]
      break;
 8003ac6:	e005      	b.n	8003ad4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ac8:	4b19      	ldr	r3, [pc, #100]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x114>)
 8003aca:	617b      	str	r3, [r7, #20]
      break;
 8003acc:	e002      	b.n	8003ad4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	617b      	str	r3, [r7, #20]
      break;
 8003ad2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ad4:	4b13      	ldr	r3, [pc, #76]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	091b      	lsrs	r3, r3, #4
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	3301      	adds	r3, #1
 8003ae0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ae2:	4b10      	ldr	r3, [pc, #64]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	0a1b      	lsrs	r3, r3, #8
 8003ae8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	fb03 f202 	mul.w	r2, r3, r2
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003afa:	4b0a      	ldr	r3, [pc, #40]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	0e5b      	lsrs	r3, r3, #25
 8003b00:	f003 0303 	and.w	r3, r3, #3
 8003b04:	3301      	adds	r3, #1
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b12:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b14:	69bb      	ldr	r3, [r7, #24]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3724      	adds	r7, #36	@ 0x24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	40021000 	.word	0x40021000
 8003b28:	080061a4 	.word	0x080061a4
 8003b2c:	00f42400 	.word	0x00f42400
 8003b30:	007a1200 	.word	0x007a1200

08003b34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b38:	4b03      	ldr	r3, [pc, #12]	@ (8003b48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	20000000 	.word	0x20000000

08003b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b50:	f7ff fff0 	bl	8003b34 <HAL_RCC_GetHCLKFreq>
 8003b54:	4602      	mov	r2, r0
 8003b56:	4b06      	ldr	r3, [pc, #24]	@ (8003b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	0a1b      	lsrs	r3, r3, #8
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	4904      	ldr	r1, [pc, #16]	@ (8003b74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b62:	5ccb      	ldrb	r3, [r1, r3]
 8003b64:	f003 031f 	and.w	r3, r3, #31
 8003b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40021000 	.word	0x40021000
 8003b74:	0800619c 	.word	0x0800619c

08003b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b7c:	f7ff ffda 	bl	8003b34 <HAL_RCC_GetHCLKFreq>
 8003b80:	4602      	mov	r2, r0
 8003b82:	4b06      	ldr	r3, [pc, #24]	@ (8003b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	0adb      	lsrs	r3, r3, #11
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	4904      	ldr	r1, [pc, #16]	@ (8003ba0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b8e:	5ccb      	ldrb	r3, [r1, r3]
 8003b90:	f003 031f 	and.w	r3, r3, #31
 8003b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	0800619c 	.word	0x0800619c

08003ba4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003bac:	2300      	movs	r3, #0
 8003bae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8003c5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bbc:	f7ff f9ee 	bl	8002f9c <HAL_PWREx_GetVoltageRange>
 8003bc0:	6178      	str	r0, [r7, #20]
 8003bc2:	e014      	b.n	8003bee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bc4:	4b25      	ldr	r3, [pc, #148]	@ (8003c5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc8:	4a24      	ldr	r2, [pc, #144]	@ (8003c5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bce:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bd0:	4b22      	ldr	r3, [pc, #136]	@ (8003c5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bdc:	f7ff f9de 	bl	8002f9c <HAL_PWREx_GetVoltageRange>
 8003be0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003be2:	4b1e      	ldr	r3, [pc, #120]	@ (8003c5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be6:	4a1d      	ldr	r2, [pc, #116]	@ (8003c5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003be8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bec:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bf4:	d10b      	bne.n	8003c0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b80      	cmp	r3, #128	@ 0x80
 8003bfa:	d919      	bls.n	8003c30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2ba0      	cmp	r3, #160	@ 0xa0
 8003c00:	d902      	bls.n	8003c08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c02:	2302      	movs	r3, #2
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	e013      	b.n	8003c30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c08:	2301      	movs	r3, #1
 8003c0a:	613b      	str	r3, [r7, #16]
 8003c0c:	e010      	b.n	8003c30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b80      	cmp	r3, #128	@ 0x80
 8003c12:	d902      	bls.n	8003c1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c14:	2303      	movs	r3, #3
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	e00a      	b.n	8003c30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b80      	cmp	r3, #128	@ 0x80
 8003c1e:	d102      	bne.n	8003c26 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c20:	2302      	movs	r3, #2
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	e004      	b.n	8003c30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b70      	cmp	r3, #112	@ 0x70
 8003c2a:	d101      	bne.n	8003c30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c30:	4b0b      	ldr	r3, [pc, #44]	@ (8003c60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f023 0207 	bic.w	r2, r3, #7
 8003c38:	4909      	ldr	r1, [pc, #36]	@ (8003c60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c40:	4b07      	ldr	r3, [pc, #28]	@ (8003c60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d001      	beq.n	8003c52 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	40022000 	.word	0x40022000

08003c64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c70:	2300      	movs	r3, #0
 8003c72:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d041      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c84:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c88:	d02a      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c8a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c8e:	d824      	bhi.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c90:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c94:	d008      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c96:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c9a:	d81e      	bhi.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ca0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ca4:	d010      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ca6:	e018      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ca8:	4b86      	ldr	r3, [pc, #536]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	4a85      	ldr	r2, [pc, #532]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cb2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cb4:	e015      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	2100      	movs	r1, #0
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 fabb 	bl	8004238 <RCCEx_PLLSAI1_Config>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cc6:	e00c      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3320      	adds	r3, #32
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fba6 	bl	8004420 <RCCEx_PLLSAI2_Config>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cd8:	e003      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	74fb      	strb	r3, [r7, #19]
      break;
 8003cde:	e000      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ce0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ce2:	7cfb      	ldrb	r3, [r7, #19]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10b      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ce8:	4b76      	ldr	r3, [pc, #472]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cf6:	4973      	ldr	r1, [pc, #460]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003cfe:	e001      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d00:	7cfb      	ldrb	r3, [r7, #19]
 8003d02:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d041      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d14:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d18:	d02a      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003d1a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d1e:	d824      	bhi.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d24:	d008      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d2a:	d81e      	bhi.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003d30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d34:	d010      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d36:	e018      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d38:	4b62      	ldr	r3, [pc, #392]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	4a61      	ldr	r2, [pc, #388]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d42:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d44:	e015      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3304      	adds	r3, #4
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 fa73 	bl	8004238 <RCCEx_PLLSAI1_Config>
 8003d52:	4603      	mov	r3, r0
 8003d54:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d56:	e00c      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3320      	adds	r3, #32
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fb5e 	bl	8004420 <RCCEx_PLLSAI2_Config>
 8003d64:	4603      	mov	r3, r0
 8003d66:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d68:	e003      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	74fb      	strb	r3, [r7, #19]
      break;
 8003d6e:	e000      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003d70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d72:	7cfb      	ldrb	r3, [r7, #19]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10b      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d78:	4b52      	ldr	r3, [pc, #328]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d7e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d86:	494f      	ldr	r1, [pc, #316]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d8e:	e001      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d90:	7cfb      	ldrb	r3, [r7, #19]
 8003d92:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 80a0 	beq.w	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003da2:	2300      	movs	r3, #0
 8003da4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003da6:	4b47      	ldr	r3, [pc, #284]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003db2:	2301      	movs	r3, #1
 8003db4:	e000      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003db6:	2300      	movs	r3, #0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00d      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dbc:	4b41      	ldr	r3, [pc, #260]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc0:	4a40      	ldr	r2, [pc, #256]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dc8:	4b3e      	ldr	r3, [pc, #248]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dd0:	60bb      	str	r3, [r7, #8]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dd8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a3a      	ldr	r2, [pc, #232]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003de2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003de4:	f7fd f896 	bl	8000f14 <HAL_GetTick>
 8003de8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dea:	e009      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dec:	f7fd f892 	bl	8000f14 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d902      	bls.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	74fb      	strb	r3, [r7, #19]
        break;
 8003dfe:	e005      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e00:	4b31      	ldr	r3, [pc, #196]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0ef      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003e0c:	7cfb      	ldrb	r3, [r7, #19]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d15c      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e12:	4b2c      	ldr	r3, [pc, #176]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e1c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d01f      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d019      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e30:	4b24      	ldr	r3, [pc, #144]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e3c:	4b21      	ldr	r3, [pc, #132]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e42:	4a20      	ldr	r2, [pc, #128]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e52:	4a1c      	ldr	r2, [pc, #112]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e5c:	4a19      	ldr	r2, [pc, #100]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d016      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6e:	f7fd f851 	bl	8000f14 <HAL_GetTick>
 8003e72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e74:	e00b      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e76:	f7fd f84d 	bl	8000f14 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d902      	bls.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	74fb      	strb	r3, [r7, #19]
            break;
 8003e8c:	e006      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0ec      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003e9c:	7cfb      	ldrb	r3, [r7, #19]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10c      	bne.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ea2:	4b08      	ldr	r3, [pc, #32]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eb2:	4904      	ldr	r1, [pc, #16]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003eba:	e009      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ebc:	7cfb      	ldrb	r3, [r7, #19]
 8003ebe:	74bb      	strb	r3, [r7, #18]
 8003ec0:	e006      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003ec2:	bf00      	nop
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ecc:	7cfb      	ldrb	r3, [r7, #19]
 8003ece:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ed0:	7c7b      	ldrb	r3, [r7, #17]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d105      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ed6:	4b9e      	ldr	r3, [pc, #632]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eda:	4a9d      	ldr	r2, [pc, #628]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003edc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ee0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003eee:	4b98      	ldr	r3, [pc, #608]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef4:	f023 0203 	bic.w	r2, r3, #3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efc:	4994      	ldr	r1, [pc, #592]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00a      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f10:	4b8f      	ldr	r3, [pc, #572]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f16:	f023 020c 	bic.w	r2, r3, #12
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f1e:	498c      	ldr	r1, [pc, #560]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0304 	and.w	r3, r3, #4
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f32:	4b87      	ldr	r3, [pc, #540]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f38:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f40:	4983      	ldr	r1, [pc, #524]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0308 	and.w	r3, r3, #8
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00a      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f54:	4b7e      	ldr	r3, [pc, #504]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f5a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f62:	497b      	ldr	r1, [pc, #492]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0310 	and.w	r3, r3, #16
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f76:	4b76      	ldr	r3, [pc, #472]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f84:	4972      	ldr	r1, [pc, #456]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0320 	and.w	r3, r3, #32
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f98:	4b6d      	ldr	r3, [pc, #436]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fa6:	496a      	ldr	r1, [pc, #424]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fba:	4b65      	ldr	r3, [pc, #404]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc8:	4961      	ldr	r1, [pc, #388]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00a      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fdc:	4b5c      	ldr	r3, [pc, #368]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fea:	4959      	ldr	r1, [pc, #356]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ffe:	4b54      	ldr	r3, [pc, #336]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004004:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800400c:	4950      	ldr	r1, [pc, #320]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00a      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004020:	4b4b      	ldr	r3, [pc, #300]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004026:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800402e:	4948      	ldr	r1, [pc, #288]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004030:	4313      	orrs	r3, r2
 8004032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004042:	4b43      	ldr	r3, [pc, #268]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004048:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004050:	493f      	ldr	r1, [pc, #252]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d028      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004064:	4b3a      	ldr	r3, [pc, #232]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800406a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004072:	4937      	ldr	r1, [pc, #220]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004074:	4313      	orrs	r3, r2
 8004076:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800407e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004082:	d106      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004084:	4b32      	ldr	r3, [pc, #200]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	4a31      	ldr	r2, [pc, #196]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800408a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800408e:	60d3      	str	r3, [r2, #12]
 8004090:	e011      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004096:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800409a:	d10c      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3304      	adds	r3, #4
 80040a0:	2101      	movs	r1, #1
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 f8c8 	bl	8004238 <RCCEx_PLLSAI1_Config>
 80040a8:	4603      	mov	r3, r0
 80040aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80040ac:	7cfb      	ldrb	r3, [r7, #19]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80040b2:	7cfb      	ldrb	r3, [r7, #19]
 80040b4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d028      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040c2:	4b23      	ldr	r3, [pc, #140]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d0:	491f      	ldr	r1, [pc, #124]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040e0:	d106      	bne.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	4a1a      	ldr	r2, [pc, #104]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040ec:	60d3      	str	r3, [r2, #12]
 80040ee:	e011      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040f8:	d10c      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	3304      	adds	r3, #4
 80040fe:	2101      	movs	r1, #1
 8004100:	4618      	mov	r0, r3
 8004102:	f000 f899 	bl	8004238 <RCCEx_PLLSAI1_Config>
 8004106:	4603      	mov	r3, r0
 8004108:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800410a:	7cfb      	ldrb	r3, [r7, #19]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004110:	7cfb      	ldrb	r3, [r7, #19]
 8004112:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d02b      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004120:	4b0b      	ldr	r3, [pc, #44]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004126:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800412e:	4908      	ldr	r1, [pc, #32]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800413a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800413e:	d109      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004140:	4b03      	ldr	r3, [pc, #12]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4a02      	ldr	r2, [pc, #8]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004146:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800414a:	60d3      	str	r3, [r2, #12]
 800414c:	e014      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800414e:	bf00      	nop
 8004150:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004158:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800415c:	d10c      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3304      	adds	r3, #4
 8004162:	2101      	movs	r1, #1
 8004164:	4618      	mov	r0, r3
 8004166:	f000 f867 	bl	8004238 <RCCEx_PLLSAI1_Config>
 800416a:	4603      	mov	r3, r0
 800416c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800416e:	7cfb      	ldrb	r3, [r7, #19]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004174:	7cfb      	ldrb	r3, [r7, #19]
 8004176:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d02f      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004184:	4b2b      	ldr	r3, [pc, #172]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800418a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004192:	4928      	ldr	r1, [pc, #160]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800419e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041a2:	d10d      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3304      	adds	r3, #4
 80041a8:	2102      	movs	r1, #2
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 f844 	bl	8004238 <RCCEx_PLLSAI1_Config>
 80041b0:	4603      	mov	r3, r0
 80041b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041b4:	7cfb      	ldrb	r3, [r7, #19]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d014      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041ba:	7cfb      	ldrb	r3, [r7, #19]
 80041bc:	74bb      	strb	r3, [r7, #18]
 80041be:	e011      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041c8:	d10c      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	3320      	adds	r3, #32
 80041ce:	2102      	movs	r1, #2
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 f925 	bl	8004420 <RCCEx_PLLSAI2_Config>
 80041d6:	4603      	mov	r3, r0
 80041d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041da:	7cfb      	ldrb	r3, [r7, #19]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041e0:	7cfb      	ldrb	r3, [r7, #19]
 80041e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00a      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041f0:	4b10      	ldr	r3, [pc, #64]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041fe:	490d      	ldr	r1, [pc, #52]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00b      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004212:	4b08      	ldr	r3, [pc, #32]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004218:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004222:	4904      	ldr	r1, [pc, #16]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004224:	4313      	orrs	r3, r2
 8004226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800422a:	7cbb      	ldrb	r3, [r7, #18]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40021000 	.word	0x40021000

08004238 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004246:	4b75      	ldr	r3, [pc, #468]	@ (800441c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d018      	beq.n	8004284 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004252:	4b72      	ldr	r3, [pc, #456]	@ (800441c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f003 0203 	and.w	r2, r3, #3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d10d      	bne.n	800427e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
       ||
 8004266:	2b00      	cmp	r3, #0
 8004268:	d009      	beq.n	800427e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800426a:	4b6c      	ldr	r3, [pc, #432]	@ (800441c <RCCEx_PLLSAI1_Config+0x1e4>)
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	091b      	lsrs	r3, r3, #4
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
       ||
 800427a:	429a      	cmp	r2, r3
 800427c:	d047      	beq.n	800430e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	73fb      	strb	r3, [r7, #15]
 8004282:	e044      	b.n	800430e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b03      	cmp	r3, #3
 800428a:	d018      	beq.n	80042be <RCCEx_PLLSAI1_Config+0x86>
 800428c:	2b03      	cmp	r3, #3
 800428e:	d825      	bhi.n	80042dc <RCCEx_PLLSAI1_Config+0xa4>
 8004290:	2b01      	cmp	r3, #1
 8004292:	d002      	beq.n	800429a <RCCEx_PLLSAI1_Config+0x62>
 8004294:	2b02      	cmp	r3, #2
 8004296:	d009      	beq.n	80042ac <RCCEx_PLLSAI1_Config+0x74>
 8004298:	e020      	b.n	80042dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800429a:	4b60      	ldr	r3, [pc, #384]	@ (800441c <RCCEx_PLLSAI1_Config+0x1e4>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d11d      	bne.n	80042e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042aa:	e01a      	b.n	80042e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042ac:	4b5b      	ldr	r3, [pc, #364]	@ (800441c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d116      	bne.n	80042e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042bc:	e013      	b.n	80042e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042be:	4b57      	ldr	r3, [pc, #348]	@ (800441c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10f      	bne.n	80042ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042ca:	4b54      	ldr	r3, [pc, #336]	@ (800441c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d109      	bne.n	80042ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042da:	e006      	b.n	80042ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	73fb      	strb	r3, [r7, #15]
      break;
 80042e0:	e004      	b.n	80042ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042e2:	bf00      	nop
 80042e4:	e002      	b.n	80042ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042e6:	bf00      	nop
 80042e8:	e000      	b.n	80042ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10d      	bne.n	800430e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042f2:	4b4a      	ldr	r3, [pc, #296]	@ (800441c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6819      	ldr	r1, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	3b01      	subs	r3, #1
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	430b      	orrs	r3, r1
 8004308:	4944      	ldr	r1, [pc, #272]	@ (800441c <RCCEx_PLLSAI1_Config+0x1e4>)
 800430a:	4313      	orrs	r3, r2
 800430c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d17d      	bne.n	8004410 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004314:	4b41      	ldr	r3, [pc, #260]	@ (800441c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a40      	ldr	r2, [pc, #256]	@ (800441c <RCCEx_PLLSAI1_Config+0x1e4>)
 800431a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800431e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004320:	f7fc fdf8 	bl	8000f14 <HAL_GetTick>
 8004324:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004326:	e009      	b.n	800433c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004328:	f7fc fdf4 	bl	8000f14 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d902      	bls.n	800433c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	73fb      	strb	r3, [r7, #15]
        break;
 800433a:	e005      	b.n	8004348 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800433c:	4b37      	ldr	r3, [pc, #220]	@ (800441c <RCCEx_PLLSAI1_Config+0x1e4>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1ef      	bne.n	8004328 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004348:	7bfb      	ldrb	r3, [r7, #15]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d160      	bne.n	8004410 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d111      	bne.n	8004378 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004354:	4b31      	ldr	r3, [pc, #196]	@ (800441c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800435c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6892      	ldr	r2, [r2, #8]
 8004364:	0211      	lsls	r1, r2, #8
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	68d2      	ldr	r2, [r2, #12]
 800436a:	0912      	lsrs	r2, r2, #4
 800436c:	0452      	lsls	r2, r2, #17
 800436e:	430a      	orrs	r2, r1
 8004370:	492a      	ldr	r1, [pc, #168]	@ (800441c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004372:	4313      	orrs	r3, r2
 8004374:	610b      	str	r3, [r1, #16]
 8004376:	e027      	b.n	80043c8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d112      	bne.n	80043a4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800437e:	4b27      	ldr	r3, [pc, #156]	@ (800441c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004386:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6892      	ldr	r2, [r2, #8]
 800438e:	0211      	lsls	r1, r2, #8
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	6912      	ldr	r2, [r2, #16]
 8004394:	0852      	lsrs	r2, r2, #1
 8004396:	3a01      	subs	r2, #1
 8004398:	0552      	lsls	r2, r2, #21
 800439a:	430a      	orrs	r2, r1
 800439c:	491f      	ldr	r1, [pc, #124]	@ (800441c <RCCEx_PLLSAI1_Config+0x1e4>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	610b      	str	r3, [r1, #16]
 80043a2:	e011      	b.n	80043c8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043a4:	4b1d      	ldr	r3, [pc, #116]	@ (800441c <RCCEx_PLLSAI1_Config+0x1e4>)
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80043ac:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6892      	ldr	r2, [r2, #8]
 80043b4:	0211      	lsls	r1, r2, #8
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6952      	ldr	r2, [r2, #20]
 80043ba:	0852      	lsrs	r2, r2, #1
 80043bc:	3a01      	subs	r2, #1
 80043be:	0652      	lsls	r2, r2, #25
 80043c0:	430a      	orrs	r2, r1
 80043c2:	4916      	ldr	r1, [pc, #88]	@ (800441c <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043c8:	4b14      	ldr	r3, [pc, #80]	@ (800441c <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a13      	ldr	r2, [pc, #76]	@ (800441c <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80043d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d4:	f7fc fd9e 	bl	8000f14 <HAL_GetTick>
 80043d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043da:	e009      	b.n	80043f0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043dc:	f7fc fd9a 	bl	8000f14 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d902      	bls.n	80043f0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	73fb      	strb	r3, [r7, #15]
          break;
 80043ee:	e005      	b.n	80043fc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043f0:	4b0a      	ldr	r3, [pc, #40]	@ (800441c <RCCEx_PLLSAI1_Config+0x1e4>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d0ef      	beq.n	80043dc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004402:	4b06      	ldr	r3, [pc, #24]	@ (800441c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004404:	691a      	ldr	r2, [r3, #16]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	4904      	ldr	r1, [pc, #16]	@ (800441c <RCCEx_PLLSAI1_Config+0x1e4>)
 800440c:	4313      	orrs	r3, r2
 800440e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004410:	7bfb      	ldrb	r3, [r7, #15]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	40021000 	.word	0x40021000

08004420 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800442e:	4b6a      	ldr	r3, [pc, #424]	@ (80045d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d018      	beq.n	800446c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800443a:	4b67      	ldr	r3, [pc, #412]	@ (80045d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f003 0203 	and.w	r2, r3, #3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d10d      	bne.n	8004466 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
       ||
 800444e:	2b00      	cmp	r3, #0
 8004450:	d009      	beq.n	8004466 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004452:	4b61      	ldr	r3, [pc, #388]	@ (80045d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	091b      	lsrs	r3, r3, #4
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	1c5a      	adds	r2, r3, #1
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
       ||
 8004462:	429a      	cmp	r2, r3
 8004464:	d047      	beq.n	80044f6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	73fb      	strb	r3, [r7, #15]
 800446a:	e044      	b.n	80044f6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b03      	cmp	r3, #3
 8004472:	d018      	beq.n	80044a6 <RCCEx_PLLSAI2_Config+0x86>
 8004474:	2b03      	cmp	r3, #3
 8004476:	d825      	bhi.n	80044c4 <RCCEx_PLLSAI2_Config+0xa4>
 8004478:	2b01      	cmp	r3, #1
 800447a:	d002      	beq.n	8004482 <RCCEx_PLLSAI2_Config+0x62>
 800447c:	2b02      	cmp	r3, #2
 800447e:	d009      	beq.n	8004494 <RCCEx_PLLSAI2_Config+0x74>
 8004480:	e020      	b.n	80044c4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004482:	4b55      	ldr	r3, [pc, #340]	@ (80045d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d11d      	bne.n	80044ca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004492:	e01a      	b.n	80044ca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004494:	4b50      	ldr	r3, [pc, #320]	@ (80045d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800449c:	2b00      	cmp	r3, #0
 800449e:	d116      	bne.n	80044ce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044a4:	e013      	b.n	80044ce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044a6:	4b4c      	ldr	r3, [pc, #304]	@ (80045d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10f      	bne.n	80044d2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044b2:	4b49      	ldr	r3, [pc, #292]	@ (80045d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d109      	bne.n	80044d2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044c2:	e006      	b.n	80044d2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	73fb      	strb	r3, [r7, #15]
      break;
 80044c8:	e004      	b.n	80044d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044ca:	bf00      	nop
 80044cc:	e002      	b.n	80044d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044ce:	bf00      	nop
 80044d0:	e000      	b.n	80044d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10d      	bne.n	80044f6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044da:	4b3f      	ldr	r3, [pc, #252]	@ (80045d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6819      	ldr	r1, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	011b      	lsls	r3, r3, #4
 80044ee:	430b      	orrs	r3, r1
 80044f0:	4939      	ldr	r1, [pc, #228]	@ (80045d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d167      	bne.n	80045cc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80044fc:	4b36      	ldr	r3, [pc, #216]	@ (80045d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a35      	ldr	r2, [pc, #212]	@ (80045d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004502:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004506:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004508:	f7fc fd04 	bl	8000f14 <HAL_GetTick>
 800450c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800450e:	e009      	b.n	8004524 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004510:	f7fc fd00 	bl	8000f14 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d902      	bls.n	8004524 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	73fb      	strb	r3, [r7, #15]
        break;
 8004522:	e005      	b.n	8004530 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004524:	4b2c      	ldr	r3, [pc, #176]	@ (80045d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1ef      	bne.n	8004510 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d14a      	bne.n	80045cc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d111      	bne.n	8004560 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800453c:	4b26      	ldr	r3, [pc, #152]	@ (80045d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004544:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6892      	ldr	r2, [r2, #8]
 800454c:	0211      	lsls	r1, r2, #8
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	68d2      	ldr	r2, [r2, #12]
 8004552:	0912      	lsrs	r2, r2, #4
 8004554:	0452      	lsls	r2, r2, #17
 8004556:	430a      	orrs	r2, r1
 8004558:	491f      	ldr	r1, [pc, #124]	@ (80045d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800455a:	4313      	orrs	r3, r2
 800455c:	614b      	str	r3, [r1, #20]
 800455e:	e011      	b.n	8004584 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004560:	4b1d      	ldr	r3, [pc, #116]	@ (80045d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004568:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6892      	ldr	r2, [r2, #8]
 8004570:	0211      	lsls	r1, r2, #8
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6912      	ldr	r2, [r2, #16]
 8004576:	0852      	lsrs	r2, r2, #1
 8004578:	3a01      	subs	r2, #1
 800457a:	0652      	lsls	r2, r2, #25
 800457c:	430a      	orrs	r2, r1
 800457e:	4916      	ldr	r1, [pc, #88]	@ (80045d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004580:	4313      	orrs	r3, r2
 8004582:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004584:	4b14      	ldr	r3, [pc, #80]	@ (80045d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a13      	ldr	r2, [pc, #76]	@ (80045d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800458a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800458e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004590:	f7fc fcc0 	bl	8000f14 <HAL_GetTick>
 8004594:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004596:	e009      	b.n	80045ac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004598:	f7fc fcbc 	bl	8000f14 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d902      	bls.n	80045ac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	73fb      	strb	r3, [r7, #15]
          break;
 80045aa:	e005      	b.n	80045b8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045ac:	4b0a      	ldr	r3, [pc, #40]	@ (80045d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0ef      	beq.n	8004598 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d106      	bne.n	80045cc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80045be:	4b06      	ldr	r3, [pc, #24]	@ (80045d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c0:	695a      	ldr	r2, [r3, #20]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	4904      	ldr	r1, [pc, #16]	@ (80045d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	40021000 	.word	0x40021000

080045dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e040      	b.n	8004670 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d106      	bne.n	8004604 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7fc faf2 	bl	8000be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2224      	movs	r2, #36	@ 0x24
 8004608:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0201 	bic.w	r2, r2, #1
 8004618:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fe90 	bl	8005348 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 fbd5 	bl	8004dd8 <UART_SetConfig>
 800462e:	4603      	mov	r3, r0
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e01b      	b.n	8004670 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004646:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004656:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0201 	orr.w	r2, r2, #1
 8004666:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 ff0f 	bl	800548c <UART_CheckIdleState>
 800466e:	4603      	mov	r3, r0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08a      	sub	sp, #40	@ 0x28
 800467c:	af02      	add	r7, sp, #8
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	603b      	str	r3, [r7, #0]
 8004684:	4613      	mov	r3, r2
 8004686:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800468c:	2b20      	cmp	r3, #32
 800468e:	d177      	bne.n	8004780 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <HAL_UART_Transmit+0x24>
 8004696:	88fb      	ldrh	r3, [r7, #6]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e070      	b.n	8004782 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2221      	movs	r2, #33	@ 0x21
 80046ac:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046ae:	f7fc fc31 	bl	8000f14 <HAL_GetTick>
 80046b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	88fa      	ldrh	r2, [r7, #6]
 80046b8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	88fa      	ldrh	r2, [r7, #6]
 80046c0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046cc:	d108      	bne.n	80046e0 <HAL_UART_Transmit+0x68>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d104      	bne.n	80046e0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80046d6:	2300      	movs	r3, #0
 80046d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	61bb      	str	r3, [r7, #24]
 80046de:	e003      	b.n	80046e8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046e4:	2300      	movs	r3, #0
 80046e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046e8:	e02f      	b.n	800474a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2200      	movs	r2, #0
 80046f2:	2180      	movs	r1, #128	@ 0x80
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 ff71 	bl	80055dc <UART_WaitOnFlagUntilTimeout>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d004      	beq.n	800470a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2220      	movs	r2, #32
 8004704:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e03b      	b.n	8004782 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10b      	bne.n	8004728 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	881a      	ldrh	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800471c:	b292      	uxth	r2, r2
 800471e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	3302      	adds	r3, #2
 8004724:	61bb      	str	r3, [r7, #24]
 8004726:	e007      	b.n	8004738 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	781a      	ldrb	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	3301      	adds	r3, #1
 8004736:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800473e:	b29b      	uxth	r3, r3
 8004740:	3b01      	subs	r3, #1
 8004742:	b29a      	uxth	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004750:	b29b      	uxth	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1c9      	bne.n	80046ea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2200      	movs	r2, #0
 800475e:	2140      	movs	r1, #64	@ 0x40
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 ff3b 	bl	80055dc <UART_WaitOnFlagUntilTimeout>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d004      	beq.n	8004776 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2220      	movs	r2, #32
 8004770:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e005      	b.n	8004782 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2220      	movs	r2, #32
 800477a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800477c:	2300      	movs	r3, #0
 800477e:	e000      	b.n	8004782 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004780:	2302      	movs	r3, #2
  }
}
 8004782:	4618      	mov	r0, r3
 8004784:	3720      	adds	r7, #32
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b0ba      	sub	sp, #232	@ 0xe8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80047b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80047b6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80047ba:	4013      	ands	r3, r2
 80047bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80047c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d115      	bne.n	80047f4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80047c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047cc:	f003 0320 	and.w	r3, r3, #32
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00f      	beq.n	80047f4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047d8:	f003 0320 	and.w	r3, r3, #32
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d009      	beq.n	80047f4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 82ca 	beq.w	8004d7e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	4798      	blx	r3
      }
      return;
 80047f2:	e2c4      	b.n	8004d7e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80047f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 8117 	beq.w	8004a2c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80047fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d106      	bne.n	8004818 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800480a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800480e:	4b85      	ldr	r3, [pc, #532]	@ (8004a24 <HAL_UART_IRQHandler+0x298>)
 8004810:	4013      	ands	r3, r2
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 810a 	beq.w	8004a2c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b00      	cmp	r3, #0
 8004822:	d011      	beq.n	8004848 <HAL_UART_IRQHandler+0xbc>
 8004824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00b      	beq.n	8004848 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2201      	movs	r2, #1
 8004836:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800483e:	f043 0201 	orr.w	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d011      	beq.n	8004878 <HAL_UART_IRQHandler+0xec>
 8004854:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00b      	beq.n	8004878 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2202      	movs	r2, #2
 8004866:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800486e:	f043 0204 	orr.w	r2, r3, #4
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b00      	cmp	r3, #0
 8004882:	d011      	beq.n	80048a8 <HAL_UART_IRQHandler+0x11c>
 8004884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00b      	beq.n	80048a8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2204      	movs	r2, #4
 8004896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800489e:	f043 0202 	orr.w	r2, r3, #2
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d017      	beq.n	80048e4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048b8:	f003 0320 	and.w	r3, r3, #32
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d105      	bne.n	80048cc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80048c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048c4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00b      	beq.n	80048e4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2208      	movs	r2, #8
 80048d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048da:	f043 0208 	orr.w	r2, r3, #8
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80048e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d012      	beq.n	8004916 <HAL_UART_IRQHandler+0x18a>
 80048f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00c      	beq.n	8004916 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004904:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800490c:	f043 0220 	orr.w	r2, r3, #32
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 8230 	beq.w	8004d82 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00d      	beq.n	800494a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800492e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004932:	f003 0320 	and.w	r3, r3, #32
 8004936:	2b00      	cmp	r3, #0
 8004938:	d007      	beq.n	800494a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004950:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800495e:	2b40      	cmp	r3, #64	@ 0x40
 8004960:	d005      	beq.n	800496e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004962:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004966:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800496a:	2b00      	cmp	r3, #0
 800496c:	d04f      	beq.n	8004a0e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 fea1 	bl	80056b6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800497e:	2b40      	cmp	r3, #64	@ 0x40
 8004980:	d141      	bne.n	8004a06 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3308      	adds	r3, #8
 8004988:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004990:	e853 3f00 	ldrex	r3, [r3]
 8004994:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004998:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800499c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3308      	adds	r3, #8
 80049aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80049ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80049b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80049ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80049be:	e841 2300 	strex	r3, r2, [r1]
 80049c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80049c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1d9      	bne.n	8004982 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d013      	beq.n	80049fe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049da:	4a13      	ldr	r2, [pc, #76]	@ (8004a28 <HAL_UART_IRQHandler+0x29c>)
 80049dc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fe f8b3 	bl	8002b4e <HAL_DMA_Abort_IT>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d017      	beq.n	8004a1e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80049f8:	4610      	mov	r0, r2
 80049fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049fc:	e00f      	b.n	8004a1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f9d4 	bl	8004dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a04:	e00b      	b.n	8004a1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f9d0 	bl	8004dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a0c:	e007      	b.n	8004a1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f9cc 	bl	8004dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004a1c:	e1b1      	b.n	8004d82 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a1e:	bf00      	nop
    return;
 8004a20:	e1af      	b.n	8004d82 <HAL_UART_IRQHandler+0x5f6>
 8004a22:	bf00      	nop
 8004a24:	04000120 	.word	0x04000120
 8004a28:	0800577f 	.word	0x0800577f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	f040 816a 	bne.w	8004d0a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a3a:	f003 0310 	and.w	r3, r3, #16
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 8163 	beq.w	8004d0a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a48:	f003 0310 	and.w	r3, r3, #16
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 815c 	beq.w	8004d0a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2210      	movs	r2, #16
 8004a58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a64:	2b40      	cmp	r3, #64	@ 0x40
 8004a66:	f040 80d4 	bne.w	8004c12 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a76:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 80ad 	beq.w	8004bda <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004a86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	f080 80a5 	bcs.w	8004bda <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a96:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0320 	and.w	r3, r3, #32
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f040 8086 	bne.w	8004bb8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ab8:	e853 3f00 	ldrex	r3, [r3]
 8004abc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004ac0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ac4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ac8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004ad6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004ada:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ade:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004ae2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ae6:	e841 2300 	strex	r3, r2, [r1]
 8004aea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004aee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1da      	bne.n	8004aac <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3308      	adds	r3, #8
 8004afc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b00:	e853 3f00 	ldrex	r3, [r3]
 8004b04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b08:	f023 0301 	bic.w	r3, r3, #1
 8004b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3308      	adds	r3, #8
 8004b16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b1a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b26:	e841 2300 	strex	r3, r2, [r1]
 8004b2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1e1      	bne.n	8004af6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3308      	adds	r3, #8
 8004b38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b3c:	e853 3f00 	ldrex	r3, [r3]
 8004b40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3308      	adds	r3, #8
 8004b52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b5e:	e841 2300 	strex	r3, r2, [r1]
 8004b62:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1e3      	bne.n	8004b32 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b80:	e853 3f00 	ldrex	r3, [r3]
 8004b84:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b88:	f023 0310 	bic.w	r3, r3, #16
 8004b8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	461a      	mov	r2, r3
 8004b96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b9c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ba0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ba2:	e841 2300 	strex	r3, r2, [r1]
 8004ba6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004ba8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1e4      	bne.n	8004b78 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fd ff8d 	bl	8002ad2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f8f4 	bl	8004dc0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004bd8:	e0d5      	b.n	8004d86 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004be0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004be4:	429a      	cmp	r2, r3
 8004be6:	f040 80ce 	bne.w	8004d86 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0320 	and.w	r3, r3, #32
 8004bf6:	2b20      	cmp	r3, #32
 8004bf8:	f040 80c5 	bne.w	8004d86 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004c08:	4619      	mov	r1, r3
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f8d8 	bl	8004dc0 <HAL_UARTEx_RxEventCallback>
      return;
 8004c10:	e0b9      	b.n	8004d86 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 80ab 	beq.w	8004d8a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004c34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 80a6 	beq.w	8004d8a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c46:	e853 3f00 	ldrex	r3, [r3]
 8004c4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004c60:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c62:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c68:	e841 2300 	strex	r3, r2, [r1]
 8004c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1e4      	bne.n	8004c3e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3308      	adds	r3, #8
 8004c7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7e:	e853 3f00 	ldrex	r3, [r3]
 8004c82:	623b      	str	r3, [r7, #32]
   return(result);
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	f023 0301 	bic.w	r3, r3, #1
 8004c8a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	3308      	adds	r3, #8
 8004c94:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c98:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ca0:	e841 2300 	strex	r3, r2, [r1]
 8004ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e3      	bne.n	8004c74 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	e853 3f00 	ldrex	r3, [r3]
 8004ccc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f023 0310 	bic.w	r3, r3, #16
 8004cd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	461a      	mov	r2, r3
 8004cde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce6:	69b9      	ldr	r1, [r7, #24]
 8004ce8:	69fa      	ldr	r2, [r7, #28]
 8004cea:	e841 2300 	strex	r3, r2, [r1]
 8004cee:	617b      	str	r3, [r7, #20]
   return(result);
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1e4      	bne.n	8004cc0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d00:	4619      	mov	r1, r3
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f85c 	bl	8004dc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d08:	e03f      	b.n	8004d8a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00e      	beq.n	8004d34 <HAL_UART_IRQHandler+0x5a8>
 8004d16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d008      	beq.n	8004d34 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004d2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 fd66 	bl	80057fe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d32:	e02d      	b.n	8004d90 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00e      	beq.n	8004d5e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d008      	beq.n	8004d5e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01c      	beq.n	8004d8e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	4798      	blx	r3
    }
    return;
 8004d5c:	e017      	b.n	8004d8e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d012      	beq.n	8004d90 <HAL_UART_IRQHandler+0x604>
 8004d6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00c      	beq.n	8004d90 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 fd17 	bl	80057aa <UART_EndTransmit_IT>
    return;
 8004d7c:	e008      	b.n	8004d90 <HAL_UART_IRQHandler+0x604>
      return;
 8004d7e:	bf00      	nop
 8004d80:	e006      	b.n	8004d90 <HAL_UART_IRQHandler+0x604>
    return;
 8004d82:	bf00      	nop
 8004d84:	e004      	b.n	8004d90 <HAL_UART_IRQHandler+0x604>
      return;
 8004d86:	bf00      	nop
 8004d88:	e002      	b.n	8004d90 <HAL_UART_IRQHandler+0x604>
      return;
 8004d8a:	bf00      	nop
 8004d8c:	e000      	b.n	8004d90 <HAL_UART_IRQHandler+0x604>
    return;
 8004d8e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004d90:	37e8      	adds	r7, #232	@ 0xe8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop

08004d98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ddc:	b08a      	sub	sp, #40	@ 0x28
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	431a      	orrs	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	431a      	orrs	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	4ba4      	ldr	r3, [pc, #656]	@ (8005098 <UART_SetConfig+0x2c0>)
 8004e08:	4013      	ands	r3, r2
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	6812      	ldr	r2, [r2, #0]
 8004e0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e10:	430b      	orrs	r3, r1
 8004e12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a99      	ldr	r2, [pc, #612]	@ (800509c <UART_SetConfig+0x2c4>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d004      	beq.n	8004e44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e40:	4313      	orrs	r3, r2
 8004e42:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e54:	430a      	orrs	r2, r1
 8004e56:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a90      	ldr	r2, [pc, #576]	@ (80050a0 <UART_SetConfig+0x2c8>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d126      	bne.n	8004eb0 <UART_SetConfig+0xd8>
 8004e62:	4b90      	ldr	r3, [pc, #576]	@ (80050a4 <UART_SetConfig+0x2cc>)
 8004e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e68:	f003 0303 	and.w	r3, r3, #3
 8004e6c:	2b03      	cmp	r3, #3
 8004e6e:	d81b      	bhi.n	8004ea8 <UART_SetConfig+0xd0>
 8004e70:	a201      	add	r2, pc, #4	@ (adr r2, 8004e78 <UART_SetConfig+0xa0>)
 8004e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e76:	bf00      	nop
 8004e78:	08004e89 	.word	0x08004e89
 8004e7c:	08004e99 	.word	0x08004e99
 8004e80:	08004e91 	.word	0x08004e91
 8004e84:	08004ea1 	.word	0x08004ea1
 8004e88:	2301      	movs	r3, #1
 8004e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e8e:	e116      	b.n	80050be <UART_SetConfig+0x2e6>
 8004e90:	2302      	movs	r3, #2
 8004e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e96:	e112      	b.n	80050be <UART_SetConfig+0x2e6>
 8004e98:	2304      	movs	r3, #4
 8004e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e9e:	e10e      	b.n	80050be <UART_SetConfig+0x2e6>
 8004ea0:	2308      	movs	r3, #8
 8004ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ea6:	e10a      	b.n	80050be <UART_SetConfig+0x2e6>
 8004ea8:	2310      	movs	r3, #16
 8004eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eae:	e106      	b.n	80050be <UART_SetConfig+0x2e6>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a7c      	ldr	r2, [pc, #496]	@ (80050a8 <UART_SetConfig+0x2d0>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d138      	bne.n	8004f2c <UART_SetConfig+0x154>
 8004eba:	4b7a      	ldr	r3, [pc, #488]	@ (80050a4 <UART_SetConfig+0x2cc>)
 8004ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec0:	f003 030c 	and.w	r3, r3, #12
 8004ec4:	2b0c      	cmp	r3, #12
 8004ec6:	d82d      	bhi.n	8004f24 <UART_SetConfig+0x14c>
 8004ec8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ed0 <UART_SetConfig+0xf8>)
 8004eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ece:	bf00      	nop
 8004ed0:	08004f05 	.word	0x08004f05
 8004ed4:	08004f25 	.word	0x08004f25
 8004ed8:	08004f25 	.word	0x08004f25
 8004edc:	08004f25 	.word	0x08004f25
 8004ee0:	08004f15 	.word	0x08004f15
 8004ee4:	08004f25 	.word	0x08004f25
 8004ee8:	08004f25 	.word	0x08004f25
 8004eec:	08004f25 	.word	0x08004f25
 8004ef0:	08004f0d 	.word	0x08004f0d
 8004ef4:	08004f25 	.word	0x08004f25
 8004ef8:	08004f25 	.word	0x08004f25
 8004efc:	08004f25 	.word	0x08004f25
 8004f00:	08004f1d 	.word	0x08004f1d
 8004f04:	2300      	movs	r3, #0
 8004f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f0a:	e0d8      	b.n	80050be <UART_SetConfig+0x2e6>
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f12:	e0d4      	b.n	80050be <UART_SetConfig+0x2e6>
 8004f14:	2304      	movs	r3, #4
 8004f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f1a:	e0d0      	b.n	80050be <UART_SetConfig+0x2e6>
 8004f1c:	2308      	movs	r3, #8
 8004f1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f22:	e0cc      	b.n	80050be <UART_SetConfig+0x2e6>
 8004f24:	2310      	movs	r3, #16
 8004f26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f2a:	e0c8      	b.n	80050be <UART_SetConfig+0x2e6>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a5e      	ldr	r2, [pc, #376]	@ (80050ac <UART_SetConfig+0x2d4>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d125      	bne.n	8004f82 <UART_SetConfig+0x1aa>
 8004f36:	4b5b      	ldr	r3, [pc, #364]	@ (80050a4 <UART_SetConfig+0x2cc>)
 8004f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f3c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f40:	2b30      	cmp	r3, #48	@ 0x30
 8004f42:	d016      	beq.n	8004f72 <UART_SetConfig+0x19a>
 8004f44:	2b30      	cmp	r3, #48	@ 0x30
 8004f46:	d818      	bhi.n	8004f7a <UART_SetConfig+0x1a2>
 8004f48:	2b20      	cmp	r3, #32
 8004f4a:	d00a      	beq.n	8004f62 <UART_SetConfig+0x18a>
 8004f4c:	2b20      	cmp	r3, #32
 8004f4e:	d814      	bhi.n	8004f7a <UART_SetConfig+0x1a2>
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <UART_SetConfig+0x182>
 8004f54:	2b10      	cmp	r3, #16
 8004f56:	d008      	beq.n	8004f6a <UART_SetConfig+0x192>
 8004f58:	e00f      	b.n	8004f7a <UART_SetConfig+0x1a2>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f60:	e0ad      	b.n	80050be <UART_SetConfig+0x2e6>
 8004f62:	2302      	movs	r3, #2
 8004f64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f68:	e0a9      	b.n	80050be <UART_SetConfig+0x2e6>
 8004f6a:	2304      	movs	r3, #4
 8004f6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f70:	e0a5      	b.n	80050be <UART_SetConfig+0x2e6>
 8004f72:	2308      	movs	r3, #8
 8004f74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f78:	e0a1      	b.n	80050be <UART_SetConfig+0x2e6>
 8004f7a:	2310      	movs	r3, #16
 8004f7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f80:	e09d      	b.n	80050be <UART_SetConfig+0x2e6>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a4a      	ldr	r2, [pc, #296]	@ (80050b0 <UART_SetConfig+0x2d8>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d125      	bne.n	8004fd8 <UART_SetConfig+0x200>
 8004f8c:	4b45      	ldr	r3, [pc, #276]	@ (80050a4 <UART_SetConfig+0x2cc>)
 8004f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f92:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004f96:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f98:	d016      	beq.n	8004fc8 <UART_SetConfig+0x1f0>
 8004f9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f9c:	d818      	bhi.n	8004fd0 <UART_SetConfig+0x1f8>
 8004f9e:	2b80      	cmp	r3, #128	@ 0x80
 8004fa0:	d00a      	beq.n	8004fb8 <UART_SetConfig+0x1e0>
 8004fa2:	2b80      	cmp	r3, #128	@ 0x80
 8004fa4:	d814      	bhi.n	8004fd0 <UART_SetConfig+0x1f8>
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <UART_SetConfig+0x1d8>
 8004faa:	2b40      	cmp	r3, #64	@ 0x40
 8004fac:	d008      	beq.n	8004fc0 <UART_SetConfig+0x1e8>
 8004fae:	e00f      	b.n	8004fd0 <UART_SetConfig+0x1f8>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fb6:	e082      	b.n	80050be <UART_SetConfig+0x2e6>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fbe:	e07e      	b.n	80050be <UART_SetConfig+0x2e6>
 8004fc0:	2304      	movs	r3, #4
 8004fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fc6:	e07a      	b.n	80050be <UART_SetConfig+0x2e6>
 8004fc8:	2308      	movs	r3, #8
 8004fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fce:	e076      	b.n	80050be <UART_SetConfig+0x2e6>
 8004fd0:	2310      	movs	r3, #16
 8004fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fd6:	e072      	b.n	80050be <UART_SetConfig+0x2e6>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a35      	ldr	r2, [pc, #212]	@ (80050b4 <UART_SetConfig+0x2dc>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d12a      	bne.n	8005038 <UART_SetConfig+0x260>
 8004fe2:	4b30      	ldr	r3, [pc, #192]	@ (80050a4 <UART_SetConfig+0x2cc>)
 8004fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ff0:	d01a      	beq.n	8005028 <UART_SetConfig+0x250>
 8004ff2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ff6:	d81b      	bhi.n	8005030 <UART_SetConfig+0x258>
 8004ff8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ffc:	d00c      	beq.n	8005018 <UART_SetConfig+0x240>
 8004ffe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005002:	d815      	bhi.n	8005030 <UART_SetConfig+0x258>
 8005004:	2b00      	cmp	r3, #0
 8005006:	d003      	beq.n	8005010 <UART_SetConfig+0x238>
 8005008:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800500c:	d008      	beq.n	8005020 <UART_SetConfig+0x248>
 800500e:	e00f      	b.n	8005030 <UART_SetConfig+0x258>
 8005010:	2300      	movs	r3, #0
 8005012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005016:	e052      	b.n	80050be <UART_SetConfig+0x2e6>
 8005018:	2302      	movs	r3, #2
 800501a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800501e:	e04e      	b.n	80050be <UART_SetConfig+0x2e6>
 8005020:	2304      	movs	r3, #4
 8005022:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005026:	e04a      	b.n	80050be <UART_SetConfig+0x2e6>
 8005028:	2308      	movs	r3, #8
 800502a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800502e:	e046      	b.n	80050be <UART_SetConfig+0x2e6>
 8005030:	2310      	movs	r3, #16
 8005032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005036:	e042      	b.n	80050be <UART_SetConfig+0x2e6>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a17      	ldr	r2, [pc, #92]	@ (800509c <UART_SetConfig+0x2c4>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d13a      	bne.n	80050b8 <UART_SetConfig+0x2e0>
 8005042:	4b18      	ldr	r3, [pc, #96]	@ (80050a4 <UART_SetConfig+0x2cc>)
 8005044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005048:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800504c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005050:	d01a      	beq.n	8005088 <UART_SetConfig+0x2b0>
 8005052:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005056:	d81b      	bhi.n	8005090 <UART_SetConfig+0x2b8>
 8005058:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800505c:	d00c      	beq.n	8005078 <UART_SetConfig+0x2a0>
 800505e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005062:	d815      	bhi.n	8005090 <UART_SetConfig+0x2b8>
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <UART_SetConfig+0x298>
 8005068:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800506c:	d008      	beq.n	8005080 <UART_SetConfig+0x2a8>
 800506e:	e00f      	b.n	8005090 <UART_SetConfig+0x2b8>
 8005070:	2300      	movs	r3, #0
 8005072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005076:	e022      	b.n	80050be <UART_SetConfig+0x2e6>
 8005078:	2302      	movs	r3, #2
 800507a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800507e:	e01e      	b.n	80050be <UART_SetConfig+0x2e6>
 8005080:	2304      	movs	r3, #4
 8005082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005086:	e01a      	b.n	80050be <UART_SetConfig+0x2e6>
 8005088:	2308      	movs	r3, #8
 800508a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800508e:	e016      	b.n	80050be <UART_SetConfig+0x2e6>
 8005090:	2310      	movs	r3, #16
 8005092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005096:	e012      	b.n	80050be <UART_SetConfig+0x2e6>
 8005098:	efff69f3 	.word	0xefff69f3
 800509c:	40008000 	.word	0x40008000
 80050a0:	40013800 	.word	0x40013800
 80050a4:	40021000 	.word	0x40021000
 80050a8:	40004400 	.word	0x40004400
 80050ac:	40004800 	.word	0x40004800
 80050b0:	40004c00 	.word	0x40004c00
 80050b4:	40005000 	.word	0x40005000
 80050b8:	2310      	movs	r3, #16
 80050ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a9f      	ldr	r2, [pc, #636]	@ (8005340 <UART_SetConfig+0x568>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d17a      	bne.n	80051be <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d824      	bhi.n	800511a <UART_SetConfig+0x342>
 80050d0:	a201      	add	r2, pc, #4	@ (adr r2, 80050d8 <UART_SetConfig+0x300>)
 80050d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d6:	bf00      	nop
 80050d8:	080050fd 	.word	0x080050fd
 80050dc:	0800511b 	.word	0x0800511b
 80050e0:	08005105 	.word	0x08005105
 80050e4:	0800511b 	.word	0x0800511b
 80050e8:	0800510b 	.word	0x0800510b
 80050ec:	0800511b 	.word	0x0800511b
 80050f0:	0800511b 	.word	0x0800511b
 80050f4:	0800511b 	.word	0x0800511b
 80050f8:	08005113 	.word	0x08005113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050fc:	f7fe fd26 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
 8005100:	61f8      	str	r0, [r7, #28]
        break;
 8005102:	e010      	b.n	8005126 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005104:	4b8f      	ldr	r3, [pc, #572]	@ (8005344 <UART_SetConfig+0x56c>)
 8005106:	61fb      	str	r3, [r7, #28]
        break;
 8005108:	e00d      	b.n	8005126 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800510a:	f7fe fc87 	bl	8003a1c <HAL_RCC_GetSysClockFreq>
 800510e:	61f8      	str	r0, [r7, #28]
        break;
 8005110:	e009      	b.n	8005126 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005112:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005116:	61fb      	str	r3, [r7, #28]
        break;
 8005118:	e005      	b.n	8005126 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005124:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 80fb 	beq.w	8005324 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	4613      	mov	r3, r2
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	4413      	add	r3, r2
 8005138:	69fa      	ldr	r2, [r7, #28]
 800513a:	429a      	cmp	r2, r3
 800513c:	d305      	bcc.n	800514a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005144:	69fa      	ldr	r2, [r7, #28]
 8005146:	429a      	cmp	r2, r3
 8005148:	d903      	bls.n	8005152 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005150:	e0e8      	b.n	8005324 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	2200      	movs	r2, #0
 8005156:	461c      	mov	r4, r3
 8005158:	4615      	mov	r5, r2
 800515a:	f04f 0200 	mov.w	r2, #0
 800515e:	f04f 0300 	mov.w	r3, #0
 8005162:	022b      	lsls	r3, r5, #8
 8005164:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005168:	0222      	lsls	r2, r4, #8
 800516a:	68f9      	ldr	r1, [r7, #12]
 800516c:	6849      	ldr	r1, [r1, #4]
 800516e:	0849      	lsrs	r1, r1, #1
 8005170:	2000      	movs	r0, #0
 8005172:	4688      	mov	r8, r1
 8005174:	4681      	mov	r9, r0
 8005176:	eb12 0a08 	adds.w	sl, r2, r8
 800517a:	eb43 0b09 	adc.w	fp, r3, r9
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	603b      	str	r3, [r7, #0]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800518c:	4650      	mov	r0, sl
 800518e:	4659      	mov	r1, fp
 8005190:	f7fb f876 	bl	8000280 <__aeabi_uldivmod>
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	4613      	mov	r3, r2
 800519a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051a2:	d308      	bcc.n	80051b6 <UART_SetConfig+0x3de>
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051aa:	d204      	bcs.n	80051b6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	60da      	str	r2, [r3, #12]
 80051b4:	e0b6      	b.n	8005324 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80051bc:	e0b2      	b.n	8005324 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051c6:	d15e      	bne.n	8005286 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80051c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80051cc:	2b08      	cmp	r3, #8
 80051ce:	d828      	bhi.n	8005222 <UART_SetConfig+0x44a>
 80051d0:	a201      	add	r2, pc, #4	@ (adr r2, 80051d8 <UART_SetConfig+0x400>)
 80051d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d6:	bf00      	nop
 80051d8:	080051fd 	.word	0x080051fd
 80051dc:	08005205 	.word	0x08005205
 80051e0:	0800520d 	.word	0x0800520d
 80051e4:	08005223 	.word	0x08005223
 80051e8:	08005213 	.word	0x08005213
 80051ec:	08005223 	.word	0x08005223
 80051f0:	08005223 	.word	0x08005223
 80051f4:	08005223 	.word	0x08005223
 80051f8:	0800521b 	.word	0x0800521b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051fc:	f7fe fca6 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
 8005200:	61f8      	str	r0, [r7, #28]
        break;
 8005202:	e014      	b.n	800522e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005204:	f7fe fcb8 	bl	8003b78 <HAL_RCC_GetPCLK2Freq>
 8005208:	61f8      	str	r0, [r7, #28]
        break;
 800520a:	e010      	b.n	800522e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800520c:	4b4d      	ldr	r3, [pc, #308]	@ (8005344 <UART_SetConfig+0x56c>)
 800520e:	61fb      	str	r3, [r7, #28]
        break;
 8005210:	e00d      	b.n	800522e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005212:	f7fe fc03 	bl	8003a1c <HAL_RCC_GetSysClockFreq>
 8005216:	61f8      	str	r0, [r7, #28]
        break;
 8005218:	e009      	b.n	800522e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800521a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800521e:	61fb      	str	r3, [r7, #28]
        break;
 8005220:	e005      	b.n	800522e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800522c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d077      	beq.n	8005324 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	005a      	lsls	r2, r3, #1
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	085b      	lsrs	r3, r3, #1
 800523e:	441a      	add	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	fbb2 f3f3 	udiv	r3, r2, r3
 8005248:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	2b0f      	cmp	r3, #15
 800524e:	d916      	bls.n	800527e <UART_SetConfig+0x4a6>
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005256:	d212      	bcs.n	800527e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	b29b      	uxth	r3, r3
 800525c:	f023 030f 	bic.w	r3, r3, #15
 8005260:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	085b      	lsrs	r3, r3, #1
 8005266:	b29b      	uxth	r3, r3
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	b29a      	uxth	r2, r3
 800526e:	8afb      	ldrh	r3, [r7, #22]
 8005270:	4313      	orrs	r3, r2
 8005272:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	8afa      	ldrh	r2, [r7, #22]
 800527a:	60da      	str	r2, [r3, #12]
 800527c:	e052      	b.n	8005324 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005284:	e04e      	b.n	8005324 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005286:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800528a:	2b08      	cmp	r3, #8
 800528c:	d827      	bhi.n	80052de <UART_SetConfig+0x506>
 800528e:	a201      	add	r2, pc, #4	@ (adr r2, 8005294 <UART_SetConfig+0x4bc>)
 8005290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005294:	080052b9 	.word	0x080052b9
 8005298:	080052c1 	.word	0x080052c1
 800529c:	080052c9 	.word	0x080052c9
 80052a0:	080052df 	.word	0x080052df
 80052a4:	080052cf 	.word	0x080052cf
 80052a8:	080052df 	.word	0x080052df
 80052ac:	080052df 	.word	0x080052df
 80052b0:	080052df 	.word	0x080052df
 80052b4:	080052d7 	.word	0x080052d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052b8:	f7fe fc48 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
 80052bc:	61f8      	str	r0, [r7, #28]
        break;
 80052be:	e014      	b.n	80052ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052c0:	f7fe fc5a 	bl	8003b78 <HAL_RCC_GetPCLK2Freq>
 80052c4:	61f8      	str	r0, [r7, #28]
        break;
 80052c6:	e010      	b.n	80052ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052c8:	4b1e      	ldr	r3, [pc, #120]	@ (8005344 <UART_SetConfig+0x56c>)
 80052ca:	61fb      	str	r3, [r7, #28]
        break;
 80052cc:	e00d      	b.n	80052ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ce:	f7fe fba5 	bl	8003a1c <HAL_RCC_GetSysClockFreq>
 80052d2:	61f8      	str	r0, [r7, #28]
        break;
 80052d4:	e009      	b.n	80052ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052da:	61fb      	str	r3, [r7, #28]
        break;
 80052dc:	e005      	b.n	80052ea <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80052de:	2300      	movs	r3, #0
 80052e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80052e8:	bf00      	nop
    }

    if (pclk != 0U)
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d019      	beq.n	8005324 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	085a      	lsrs	r2, r3, #1
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	441a      	add	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005302:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	2b0f      	cmp	r3, #15
 8005308:	d909      	bls.n	800531e <UART_SetConfig+0x546>
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005310:	d205      	bcs.n	800531e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	b29a      	uxth	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	60da      	str	r2, [r3, #12]
 800531c:	e002      	b.n	8005324 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005330:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005334:	4618      	mov	r0, r3
 8005336:	3728      	adds	r7, #40	@ 0x28
 8005338:	46bd      	mov	sp, r7
 800533a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800533e:	bf00      	nop
 8005340:	40008000 	.word	0x40008000
 8005344:	00f42400 	.word	0x00f42400

08005348 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005354:	f003 0308 	and.w	r3, r3, #8
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00a      	beq.n	8005372 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00a      	beq.n	80053b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ba:	f003 0304 	and.w	r3, r3, #4
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	430a      	orrs	r2, r1
 80053d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053dc:	f003 0310 	and.w	r3, r3, #16
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00a      	beq.n	80053fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fe:	f003 0320 	and.w	r3, r3, #32
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005424:	2b00      	cmp	r3, #0
 8005426:	d01a      	beq.n	800545e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005442:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005446:	d10a      	bne.n	800545e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	605a      	str	r2, [r3, #4]
  }
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b098      	sub	sp, #96	@ 0x60
 8005490:	af02      	add	r7, sp, #8
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800549c:	f7fb fd3a 	bl	8000f14 <HAL_GetTick>
 80054a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0308 	and.w	r3, r3, #8
 80054ac:	2b08      	cmp	r3, #8
 80054ae:	d12e      	bne.n	800550e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054b8:	2200      	movs	r2, #0
 80054ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f88c 	bl	80055dc <UART_WaitOnFlagUntilTimeout>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d021      	beq.n	800550e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d2:	e853 3f00 	ldrex	r3, [r3]
 80054d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054de:	653b      	str	r3, [r7, #80]	@ 0x50
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	461a      	mov	r2, r3
 80054e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80054ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054f0:	e841 2300 	strex	r3, r2, [r1]
 80054f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1e6      	bne.n	80054ca <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2220      	movs	r2, #32
 8005500:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e062      	b.n	80055d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b04      	cmp	r3, #4
 800551a:	d149      	bne.n	80055b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800551c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005524:	2200      	movs	r2, #0
 8005526:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f856 	bl	80055dc <UART_WaitOnFlagUntilTimeout>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d03c      	beq.n	80055b0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553e:	e853 3f00 	ldrex	r3, [r3]
 8005542:	623b      	str	r3, [r7, #32]
   return(result);
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800554a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	461a      	mov	r2, r3
 8005552:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005554:	633b      	str	r3, [r7, #48]	@ 0x30
 8005556:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005558:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800555a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800555c:	e841 2300 	strex	r3, r2, [r1]
 8005560:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1e6      	bne.n	8005536 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3308      	adds	r3, #8
 800556e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	e853 3f00 	ldrex	r3, [r3]
 8005576:	60fb      	str	r3, [r7, #12]
   return(result);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 0301 	bic.w	r3, r3, #1
 800557e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3308      	adds	r3, #8
 8005586:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005588:	61fa      	str	r2, [r7, #28]
 800558a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558c:	69b9      	ldr	r1, [r7, #24]
 800558e:	69fa      	ldr	r2, [r7, #28]
 8005590:	e841 2300 	strex	r3, r2, [r1]
 8005594:	617b      	str	r3, [r7, #20]
   return(result);
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1e5      	bne.n	8005568 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2220      	movs	r2, #32
 80055a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e011      	b.n	80055d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2220      	movs	r2, #32
 80055b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3758      	adds	r7, #88	@ 0x58
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	603b      	str	r3, [r7, #0]
 80055e8:	4613      	mov	r3, r2
 80055ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ec:	e04f      	b.n	800568e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f4:	d04b      	beq.n	800568e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f6:	f7fb fc8d 	bl	8000f14 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	429a      	cmp	r2, r3
 8005604:	d302      	bcc.n	800560c <UART_WaitOnFlagUntilTimeout+0x30>
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e04e      	b.n	80056ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0304 	and.w	r3, r3, #4
 800561a:	2b00      	cmp	r3, #0
 800561c:	d037      	beq.n	800568e <UART_WaitOnFlagUntilTimeout+0xb2>
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	2b80      	cmp	r3, #128	@ 0x80
 8005622:	d034      	beq.n	800568e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2b40      	cmp	r3, #64	@ 0x40
 8005628:	d031      	beq.n	800568e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69db      	ldr	r3, [r3, #28]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b08      	cmp	r3, #8
 8005636:	d110      	bne.n	800565a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2208      	movs	r2, #8
 800563e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 f838 	bl	80056b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2208      	movs	r2, #8
 800564a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e029      	b.n	80056ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005664:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005668:	d111      	bne.n	800568e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005672:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f000 f81e 	bl	80056b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2220      	movs	r2, #32
 800567e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e00f      	b.n	80056ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	69da      	ldr	r2, [r3, #28]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	4013      	ands	r3, r2
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	429a      	cmp	r2, r3
 800569c:	bf0c      	ite	eq
 800569e:	2301      	moveq	r3, #1
 80056a0:	2300      	movne	r3, #0
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	461a      	mov	r2, r3
 80056a6:	79fb      	ldrb	r3, [r7, #7]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d0a0      	beq.n	80055ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b095      	sub	sp, #84	@ 0x54
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c6:	e853 3f00 	ldrex	r3, [r3]
 80056ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	461a      	mov	r2, r3
 80056da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80056de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056e4:	e841 2300 	strex	r3, r2, [r1]
 80056e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1e6      	bne.n	80056be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3308      	adds	r3, #8
 80056f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	e853 3f00 	ldrex	r3, [r3]
 80056fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	f023 0301 	bic.w	r3, r3, #1
 8005706:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	3308      	adds	r3, #8
 800570e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005710:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005712:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005714:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005716:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005718:	e841 2300 	strex	r3, r2, [r1]
 800571c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800571e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1e5      	bne.n	80056f0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005728:	2b01      	cmp	r3, #1
 800572a:	d118      	bne.n	800575e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	e853 3f00 	ldrex	r3, [r3]
 8005738:	60bb      	str	r3, [r7, #8]
   return(result);
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f023 0310 	bic.w	r3, r3, #16
 8005740:	647b      	str	r3, [r7, #68]	@ 0x44
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	461a      	mov	r2, r3
 8005748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800574a:	61bb      	str	r3, [r7, #24]
 800574c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574e:	6979      	ldr	r1, [r7, #20]
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	e841 2300 	strex	r3, r2, [r1]
 8005756:	613b      	str	r3, [r7, #16]
   return(result);
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1e6      	bne.n	800572c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2220      	movs	r2, #32
 8005762:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005772:	bf00      	nop
 8005774:	3754      	adds	r7, #84	@ 0x54
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b084      	sub	sp, #16
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800578a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f7ff fb05 	bl	8004dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057a2:	bf00      	nop
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b088      	sub	sp, #32
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	e853 3f00 	ldrex	r3, [r3]
 80057be:	60bb      	str	r3, [r7, #8]
   return(result);
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057c6:	61fb      	str	r3, [r7, #28]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	461a      	mov	r2, r3
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	61bb      	str	r3, [r7, #24]
 80057d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d4:	6979      	ldr	r1, [r7, #20]
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	e841 2300 	strex	r3, r2, [r1]
 80057dc:	613b      	str	r3, [r7, #16]
   return(result);
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1e6      	bne.n	80057b2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2220      	movs	r2, #32
 80057e8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f7ff fad1 	bl	8004d98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057f6:	bf00      	nop
 80057f8:	3720      	adds	r7, #32
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80057fe:	b480      	push	{r7}
 8005800:	b083      	sub	sp, #12
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005806:	bf00      	nop
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
	...

08005814 <siprintf>:
 8005814:	b40e      	push	{r1, r2, r3}
 8005816:	b500      	push	{lr}
 8005818:	b09c      	sub	sp, #112	@ 0x70
 800581a:	ab1d      	add	r3, sp, #116	@ 0x74
 800581c:	9002      	str	r0, [sp, #8]
 800581e:	9006      	str	r0, [sp, #24]
 8005820:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005824:	4809      	ldr	r0, [pc, #36]	@ (800584c <siprintf+0x38>)
 8005826:	9107      	str	r1, [sp, #28]
 8005828:	9104      	str	r1, [sp, #16]
 800582a:	4909      	ldr	r1, [pc, #36]	@ (8005850 <siprintf+0x3c>)
 800582c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005830:	9105      	str	r1, [sp, #20]
 8005832:	6800      	ldr	r0, [r0, #0]
 8005834:	9301      	str	r3, [sp, #4]
 8005836:	a902      	add	r1, sp, #8
 8005838:	f000 f994 	bl	8005b64 <_svfiprintf_r>
 800583c:	9b02      	ldr	r3, [sp, #8]
 800583e:	2200      	movs	r2, #0
 8005840:	701a      	strb	r2, [r3, #0]
 8005842:	b01c      	add	sp, #112	@ 0x70
 8005844:	f85d eb04 	ldr.w	lr, [sp], #4
 8005848:	b003      	add	sp, #12
 800584a:	4770      	bx	lr
 800584c:	2000000c 	.word	0x2000000c
 8005850:	ffff0208 	.word	0xffff0208

08005854 <memset>:
 8005854:	4402      	add	r2, r0
 8005856:	4603      	mov	r3, r0
 8005858:	4293      	cmp	r3, r2
 800585a:	d100      	bne.n	800585e <memset+0xa>
 800585c:	4770      	bx	lr
 800585e:	f803 1b01 	strb.w	r1, [r3], #1
 8005862:	e7f9      	b.n	8005858 <memset+0x4>

08005864 <__errno>:
 8005864:	4b01      	ldr	r3, [pc, #4]	@ (800586c <__errno+0x8>)
 8005866:	6818      	ldr	r0, [r3, #0]
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	2000000c 	.word	0x2000000c

08005870 <__libc_init_array>:
 8005870:	b570      	push	{r4, r5, r6, lr}
 8005872:	4d0d      	ldr	r5, [pc, #52]	@ (80058a8 <__libc_init_array+0x38>)
 8005874:	4c0d      	ldr	r4, [pc, #52]	@ (80058ac <__libc_init_array+0x3c>)
 8005876:	1b64      	subs	r4, r4, r5
 8005878:	10a4      	asrs	r4, r4, #2
 800587a:	2600      	movs	r6, #0
 800587c:	42a6      	cmp	r6, r4
 800587e:	d109      	bne.n	8005894 <__libc_init_array+0x24>
 8005880:	4d0b      	ldr	r5, [pc, #44]	@ (80058b0 <__libc_init_array+0x40>)
 8005882:	4c0c      	ldr	r4, [pc, #48]	@ (80058b4 <__libc_init_array+0x44>)
 8005884:	f000 fc66 	bl	8006154 <_init>
 8005888:	1b64      	subs	r4, r4, r5
 800588a:	10a4      	asrs	r4, r4, #2
 800588c:	2600      	movs	r6, #0
 800588e:	42a6      	cmp	r6, r4
 8005890:	d105      	bne.n	800589e <__libc_init_array+0x2e>
 8005892:	bd70      	pop	{r4, r5, r6, pc}
 8005894:	f855 3b04 	ldr.w	r3, [r5], #4
 8005898:	4798      	blx	r3
 800589a:	3601      	adds	r6, #1
 800589c:	e7ee      	b.n	800587c <__libc_init_array+0xc>
 800589e:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a2:	4798      	blx	r3
 80058a4:	3601      	adds	r6, #1
 80058a6:	e7f2      	b.n	800588e <__libc_init_array+0x1e>
 80058a8:	08006210 	.word	0x08006210
 80058ac:	08006210 	.word	0x08006210
 80058b0:	08006210 	.word	0x08006210
 80058b4:	08006214 	.word	0x08006214

080058b8 <__retarget_lock_acquire_recursive>:
 80058b8:	4770      	bx	lr

080058ba <__retarget_lock_release_recursive>:
 80058ba:	4770      	bx	lr

080058bc <_free_r>:
 80058bc:	b538      	push	{r3, r4, r5, lr}
 80058be:	4605      	mov	r5, r0
 80058c0:	2900      	cmp	r1, #0
 80058c2:	d041      	beq.n	8005948 <_free_r+0x8c>
 80058c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058c8:	1f0c      	subs	r4, r1, #4
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	bfb8      	it	lt
 80058ce:	18e4      	addlt	r4, r4, r3
 80058d0:	f000 f8e0 	bl	8005a94 <__malloc_lock>
 80058d4:	4a1d      	ldr	r2, [pc, #116]	@ (800594c <_free_r+0x90>)
 80058d6:	6813      	ldr	r3, [r2, #0]
 80058d8:	b933      	cbnz	r3, 80058e8 <_free_r+0x2c>
 80058da:	6063      	str	r3, [r4, #4]
 80058dc:	6014      	str	r4, [r2, #0]
 80058de:	4628      	mov	r0, r5
 80058e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058e4:	f000 b8dc 	b.w	8005aa0 <__malloc_unlock>
 80058e8:	42a3      	cmp	r3, r4
 80058ea:	d908      	bls.n	80058fe <_free_r+0x42>
 80058ec:	6820      	ldr	r0, [r4, #0]
 80058ee:	1821      	adds	r1, r4, r0
 80058f0:	428b      	cmp	r3, r1
 80058f2:	bf01      	itttt	eq
 80058f4:	6819      	ldreq	r1, [r3, #0]
 80058f6:	685b      	ldreq	r3, [r3, #4]
 80058f8:	1809      	addeq	r1, r1, r0
 80058fa:	6021      	streq	r1, [r4, #0]
 80058fc:	e7ed      	b.n	80058da <_free_r+0x1e>
 80058fe:	461a      	mov	r2, r3
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	b10b      	cbz	r3, 8005908 <_free_r+0x4c>
 8005904:	42a3      	cmp	r3, r4
 8005906:	d9fa      	bls.n	80058fe <_free_r+0x42>
 8005908:	6811      	ldr	r1, [r2, #0]
 800590a:	1850      	adds	r0, r2, r1
 800590c:	42a0      	cmp	r0, r4
 800590e:	d10b      	bne.n	8005928 <_free_r+0x6c>
 8005910:	6820      	ldr	r0, [r4, #0]
 8005912:	4401      	add	r1, r0
 8005914:	1850      	adds	r0, r2, r1
 8005916:	4283      	cmp	r3, r0
 8005918:	6011      	str	r1, [r2, #0]
 800591a:	d1e0      	bne.n	80058de <_free_r+0x22>
 800591c:	6818      	ldr	r0, [r3, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	6053      	str	r3, [r2, #4]
 8005922:	4408      	add	r0, r1
 8005924:	6010      	str	r0, [r2, #0]
 8005926:	e7da      	b.n	80058de <_free_r+0x22>
 8005928:	d902      	bls.n	8005930 <_free_r+0x74>
 800592a:	230c      	movs	r3, #12
 800592c:	602b      	str	r3, [r5, #0]
 800592e:	e7d6      	b.n	80058de <_free_r+0x22>
 8005930:	6820      	ldr	r0, [r4, #0]
 8005932:	1821      	adds	r1, r4, r0
 8005934:	428b      	cmp	r3, r1
 8005936:	bf04      	itt	eq
 8005938:	6819      	ldreq	r1, [r3, #0]
 800593a:	685b      	ldreq	r3, [r3, #4]
 800593c:	6063      	str	r3, [r4, #4]
 800593e:	bf04      	itt	eq
 8005940:	1809      	addeq	r1, r1, r0
 8005942:	6021      	streq	r1, [r4, #0]
 8005944:	6054      	str	r4, [r2, #4]
 8005946:	e7ca      	b.n	80058de <_free_r+0x22>
 8005948:	bd38      	pop	{r3, r4, r5, pc}
 800594a:	bf00      	nop
 800594c:	20000334 	.word	0x20000334

08005950 <sbrk_aligned>:
 8005950:	b570      	push	{r4, r5, r6, lr}
 8005952:	4e0f      	ldr	r6, [pc, #60]	@ (8005990 <sbrk_aligned+0x40>)
 8005954:	460c      	mov	r4, r1
 8005956:	6831      	ldr	r1, [r6, #0]
 8005958:	4605      	mov	r5, r0
 800595a:	b911      	cbnz	r1, 8005962 <sbrk_aligned+0x12>
 800595c:	f000 fba6 	bl	80060ac <_sbrk_r>
 8005960:	6030      	str	r0, [r6, #0]
 8005962:	4621      	mov	r1, r4
 8005964:	4628      	mov	r0, r5
 8005966:	f000 fba1 	bl	80060ac <_sbrk_r>
 800596a:	1c43      	adds	r3, r0, #1
 800596c:	d103      	bne.n	8005976 <sbrk_aligned+0x26>
 800596e:	f04f 34ff 	mov.w	r4, #4294967295
 8005972:	4620      	mov	r0, r4
 8005974:	bd70      	pop	{r4, r5, r6, pc}
 8005976:	1cc4      	adds	r4, r0, #3
 8005978:	f024 0403 	bic.w	r4, r4, #3
 800597c:	42a0      	cmp	r0, r4
 800597e:	d0f8      	beq.n	8005972 <sbrk_aligned+0x22>
 8005980:	1a21      	subs	r1, r4, r0
 8005982:	4628      	mov	r0, r5
 8005984:	f000 fb92 	bl	80060ac <_sbrk_r>
 8005988:	3001      	adds	r0, #1
 800598a:	d1f2      	bne.n	8005972 <sbrk_aligned+0x22>
 800598c:	e7ef      	b.n	800596e <sbrk_aligned+0x1e>
 800598e:	bf00      	nop
 8005990:	20000330 	.word	0x20000330

08005994 <_malloc_r>:
 8005994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005998:	1ccd      	adds	r5, r1, #3
 800599a:	f025 0503 	bic.w	r5, r5, #3
 800599e:	3508      	adds	r5, #8
 80059a0:	2d0c      	cmp	r5, #12
 80059a2:	bf38      	it	cc
 80059a4:	250c      	movcc	r5, #12
 80059a6:	2d00      	cmp	r5, #0
 80059a8:	4606      	mov	r6, r0
 80059aa:	db01      	blt.n	80059b0 <_malloc_r+0x1c>
 80059ac:	42a9      	cmp	r1, r5
 80059ae:	d904      	bls.n	80059ba <_malloc_r+0x26>
 80059b0:	230c      	movs	r3, #12
 80059b2:	6033      	str	r3, [r6, #0]
 80059b4:	2000      	movs	r0, #0
 80059b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a90 <_malloc_r+0xfc>
 80059be:	f000 f869 	bl	8005a94 <__malloc_lock>
 80059c2:	f8d8 3000 	ldr.w	r3, [r8]
 80059c6:	461c      	mov	r4, r3
 80059c8:	bb44      	cbnz	r4, 8005a1c <_malloc_r+0x88>
 80059ca:	4629      	mov	r1, r5
 80059cc:	4630      	mov	r0, r6
 80059ce:	f7ff ffbf 	bl	8005950 <sbrk_aligned>
 80059d2:	1c43      	adds	r3, r0, #1
 80059d4:	4604      	mov	r4, r0
 80059d6:	d158      	bne.n	8005a8a <_malloc_r+0xf6>
 80059d8:	f8d8 4000 	ldr.w	r4, [r8]
 80059dc:	4627      	mov	r7, r4
 80059de:	2f00      	cmp	r7, #0
 80059e0:	d143      	bne.n	8005a6a <_malloc_r+0xd6>
 80059e2:	2c00      	cmp	r4, #0
 80059e4:	d04b      	beq.n	8005a7e <_malloc_r+0xea>
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	4639      	mov	r1, r7
 80059ea:	4630      	mov	r0, r6
 80059ec:	eb04 0903 	add.w	r9, r4, r3
 80059f0:	f000 fb5c 	bl	80060ac <_sbrk_r>
 80059f4:	4581      	cmp	r9, r0
 80059f6:	d142      	bne.n	8005a7e <_malloc_r+0xea>
 80059f8:	6821      	ldr	r1, [r4, #0]
 80059fa:	1a6d      	subs	r5, r5, r1
 80059fc:	4629      	mov	r1, r5
 80059fe:	4630      	mov	r0, r6
 8005a00:	f7ff ffa6 	bl	8005950 <sbrk_aligned>
 8005a04:	3001      	adds	r0, #1
 8005a06:	d03a      	beq.n	8005a7e <_malloc_r+0xea>
 8005a08:	6823      	ldr	r3, [r4, #0]
 8005a0a:	442b      	add	r3, r5
 8005a0c:	6023      	str	r3, [r4, #0]
 8005a0e:	f8d8 3000 	ldr.w	r3, [r8]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	bb62      	cbnz	r2, 8005a70 <_malloc_r+0xdc>
 8005a16:	f8c8 7000 	str.w	r7, [r8]
 8005a1a:	e00f      	b.n	8005a3c <_malloc_r+0xa8>
 8005a1c:	6822      	ldr	r2, [r4, #0]
 8005a1e:	1b52      	subs	r2, r2, r5
 8005a20:	d420      	bmi.n	8005a64 <_malloc_r+0xd0>
 8005a22:	2a0b      	cmp	r2, #11
 8005a24:	d917      	bls.n	8005a56 <_malloc_r+0xc2>
 8005a26:	1961      	adds	r1, r4, r5
 8005a28:	42a3      	cmp	r3, r4
 8005a2a:	6025      	str	r5, [r4, #0]
 8005a2c:	bf18      	it	ne
 8005a2e:	6059      	strne	r1, [r3, #4]
 8005a30:	6863      	ldr	r3, [r4, #4]
 8005a32:	bf08      	it	eq
 8005a34:	f8c8 1000 	streq.w	r1, [r8]
 8005a38:	5162      	str	r2, [r4, r5]
 8005a3a:	604b      	str	r3, [r1, #4]
 8005a3c:	4630      	mov	r0, r6
 8005a3e:	f000 f82f 	bl	8005aa0 <__malloc_unlock>
 8005a42:	f104 000b 	add.w	r0, r4, #11
 8005a46:	1d23      	adds	r3, r4, #4
 8005a48:	f020 0007 	bic.w	r0, r0, #7
 8005a4c:	1ac2      	subs	r2, r0, r3
 8005a4e:	bf1c      	itt	ne
 8005a50:	1a1b      	subne	r3, r3, r0
 8005a52:	50a3      	strne	r3, [r4, r2]
 8005a54:	e7af      	b.n	80059b6 <_malloc_r+0x22>
 8005a56:	6862      	ldr	r2, [r4, #4]
 8005a58:	42a3      	cmp	r3, r4
 8005a5a:	bf0c      	ite	eq
 8005a5c:	f8c8 2000 	streq.w	r2, [r8]
 8005a60:	605a      	strne	r2, [r3, #4]
 8005a62:	e7eb      	b.n	8005a3c <_malloc_r+0xa8>
 8005a64:	4623      	mov	r3, r4
 8005a66:	6864      	ldr	r4, [r4, #4]
 8005a68:	e7ae      	b.n	80059c8 <_malloc_r+0x34>
 8005a6a:	463c      	mov	r4, r7
 8005a6c:	687f      	ldr	r7, [r7, #4]
 8005a6e:	e7b6      	b.n	80059de <_malloc_r+0x4a>
 8005a70:	461a      	mov	r2, r3
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	42a3      	cmp	r3, r4
 8005a76:	d1fb      	bne.n	8005a70 <_malloc_r+0xdc>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	6053      	str	r3, [r2, #4]
 8005a7c:	e7de      	b.n	8005a3c <_malloc_r+0xa8>
 8005a7e:	230c      	movs	r3, #12
 8005a80:	6033      	str	r3, [r6, #0]
 8005a82:	4630      	mov	r0, r6
 8005a84:	f000 f80c 	bl	8005aa0 <__malloc_unlock>
 8005a88:	e794      	b.n	80059b4 <_malloc_r+0x20>
 8005a8a:	6005      	str	r5, [r0, #0]
 8005a8c:	e7d6      	b.n	8005a3c <_malloc_r+0xa8>
 8005a8e:	bf00      	nop
 8005a90:	20000334 	.word	0x20000334

08005a94 <__malloc_lock>:
 8005a94:	4801      	ldr	r0, [pc, #4]	@ (8005a9c <__malloc_lock+0x8>)
 8005a96:	f7ff bf0f 	b.w	80058b8 <__retarget_lock_acquire_recursive>
 8005a9a:	bf00      	nop
 8005a9c:	2000032c 	.word	0x2000032c

08005aa0 <__malloc_unlock>:
 8005aa0:	4801      	ldr	r0, [pc, #4]	@ (8005aa8 <__malloc_unlock+0x8>)
 8005aa2:	f7ff bf0a 	b.w	80058ba <__retarget_lock_release_recursive>
 8005aa6:	bf00      	nop
 8005aa8:	2000032c 	.word	0x2000032c

08005aac <__ssputs_r>:
 8005aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab0:	688e      	ldr	r6, [r1, #8]
 8005ab2:	461f      	mov	r7, r3
 8005ab4:	42be      	cmp	r6, r7
 8005ab6:	680b      	ldr	r3, [r1, #0]
 8005ab8:	4682      	mov	sl, r0
 8005aba:	460c      	mov	r4, r1
 8005abc:	4690      	mov	r8, r2
 8005abe:	d82d      	bhi.n	8005b1c <__ssputs_r+0x70>
 8005ac0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ac4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005ac8:	d026      	beq.n	8005b18 <__ssputs_r+0x6c>
 8005aca:	6965      	ldr	r5, [r4, #20]
 8005acc:	6909      	ldr	r1, [r1, #16]
 8005ace:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ad2:	eba3 0901 	sub.w	r9, r3, r1
 8005ad6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ada:	1c7b      	adds	r3, r7, #1
 8005adc:	444b      	add	r3, r9
 8005ade:	106d      	asrs	r5, r5, #1
 8005ae0:	429d      	cmp	r5, r3
 8005ae2:	bf38      	it	cc
 8005ae4:	461d      	movcc	r5, r3
 8005ae6:	0553      	lsls	r3, r2, #21
 8005ae8:	d527      	bpl.n	8005b3a <__ssputs_r+0x8e>
 8005aea:	4629      	mov	r1, r5
 8005aec:	f7ff ff52 	bl	8005994 <_malloc_r>
 8005af0:	4606      	mov	r6, r0
 8005af2:	b360      	cbz	r0, 8005b4e <__ssputs_r+0xa2>
 8005af4:	6921      	ldr	r1, [r4, #16]
 8005af6:	464a      	mov	r2, r9
 8005af8:	f000 fae8 	bl	80060cc <memcpy>
 8005afc:	89a3      	ldrh	r3, [r4, #12]
 8005afe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005b02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b06:	81a3      	strh	r3, [r4, #12]
 8005b08:	6126      	str	r6, [r4, #16]
 8005b0a:	6165      	str	r5, [r4, #20]
 8005b0c:	444e      	add	r6, r9
 8005b0e:	eba5 0509 	sub.w	r5, r5, r9
 8005b12:	6026      	str	r6, [r4, #0]
 8005b14:	60a5      	str	r5, [r4, #8]
 8005b16:	463e      	mov	r6, r7
 8005b18:	42be      	cmp	r6, r7
 8005b1a:	d900      	bls.n	8005b1e <__ssputs_r+0x72>
 8005b1c:	463e      	mov	r6, r7
 8005b1e:	6820      	ldr	r0, [r4, #0]
 8005b20:	4632      	mov	r2, r6
 8005b22:	4641      	mov	r1, r8
 8005b24:	f000 faa8 	bl	8006078 <memmove>
 8005b28:	68a3      	ldr	r3, [r4, #8]
 8005b2a:	1b9b      	subs	r3, r3, r6
 8005b2c:	60a3      	str	r3, [r4, #8]
 8005b2e:	6823      	ldr	r3, [r4, #0]
 8005b30:	4433      	add	r3, r6
 8005b32:	6023      	str	r3, [r4, #0]
 8005b34:	2000      	movs	r0, #0
 8005b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b3a:	462a      	mov	r2, r5
 8005b3c:	f000 fad4 	bl	80060e8 <_realloc_r>
 8005b40:	4606      	mov	r6, r0
 8005b42:	2800      	cmp	r0, #0
 8005b44:	d1e0      	bne.n	8005b08 <__ssputs_r+0x5c>
 8005b46:	6921      	ldr	r1, [r4, #16]
 8005b48:	4650      	mov	r0, sl
 8005b4a:	f7ff feb7 	bl	80058bc <_free_r>
 8005b4e:	230c      	movs	r3, #12
 8005b50:	f8ca 3000 	str.w	r3, [sl]
 8005b54:	89a3      	ldrh	r3, [r4, #12]
 8005b56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b5a:	81a3      	strh	r3, [r4, #12]
 8005b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b60:	e7e9      	b.n	8005b36 <__ssputs_r+0x8a>
	...

08005b64 <_svfiprintf_r>:
 8005b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b68:	4698      	mov	r8, r3
 8005b6a:	898b      	ldrh	r3, [r1, #12]
 8005b6c:	061b      	lsls	r3, r3, #24
 8005b6e:	b09d      	sub	sp, #116	@ 0x74
 8005b70:	4607      	mov	r7, r0
 8005b72:	460d      	mov	r5, r1
 8005b74:	4614      	mov	r4, r2
 8005b76:	d510      	bpl.n	8005b9a <_svfiprintf_r+0x36>
 8005b78:	690b      	ldr	r3, [r1, #16]
 8005b7a:	b973      	cbnz	r3, 8005b9a <_svfiprintf_r+0x36>
 8005b7c:	2140      	movs	r1, #64	@ 0x40
 8005b7e:	f7ff ff09 	bl	8005994 <_malloc_r>
 8005b82:	6028      	str	r0, [r5, #0]
 8005b84:	6128      	str	r0, [r5, #16]
 8005b86:	b930      	cbnz	r0, 8005b96 <_svfiprintf_r+0x32>
 8005b88:	230c      	movs	r3, #12
 8005b8a:	603b      	str	r3, [r7, #0]
 8005b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b90:	b01d      	add	sp, #116	@ 0x74
 8005b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b96:	2340      	movs	r3, #64	@ 0x40
 8005b98:	616b      	str	r3, [r5, #20]
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b9e:	2320      	movs	r3, #32
 8005ba0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ba4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ba8:	2330      	movs	r3, #48	@ 0x30
 8005baa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005d48 <_svfiprintf_r+0x1e4>
 8005bae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005bb2:	f04f 0901 	mov.w	r9, #1
 8005bb6:	4623      	mov	r3, r4
 8005bb8:	469a      	mov	sl, r3
 8005bba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bbe:	b10a      	cbz	r2, 8005bc4 <_svfiprintf_r+0x60>
 8005bc0:	2a25      	cmp	r2, #37	@ 0x25
 8005bc2:	d1f9      	bne.n	8005bb8 <_svfiprintf_r+0x54>
 8005bc4:	ebba 0b04 	subs.w	fp, sl, r4
 8005bc8:	d00b      	beq.n	8005be2 <_svfiprintf_r+0x7e>
 8005bca:	465b      	mov	r3, fp
 8005bcc:	4622      	mov	r2, r4
 8005bce:	4629      	mov	r1, r5
 8005bd0:	4638      	mov	r0, r7
 8005bd2:	f7ff ff6b 	bl	8005aac <__ssputs_r>
 8005bd6:	3001      	adds	r0, #1
 8005bd8:	f000 80a7 	beq.w	8005d2a <_svfiprintf_r+0x1c6>
 8005bdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bde:	445a      	add	r2, fp
 8005be0:	9209      	str	r2, [sp, #36]	@ 0x24
 8005be2:	f89a 3000 	ldrb.w	r3, [sl]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f000 809f 	beq.w	8005d2a <_svfiprintf_r+0x1c6>
 8005bec:	2300      	movs	r3, #0
 8005bee:	f04f 32ff 	mov.w	r2, #4294967295
 8005bf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bf6:	f10a 0a01 	add.w	sl, sl, #1
 8005bfa:	9304      	str	r3, [sp, #16]
 8005bfc:	9307      	str	r3, [sp, #28]
 8005bfe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c02:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c04:	4654      	mov	r4, sl
 8005c06:	2205      	movs	r2, #5
 8005c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c0c:	484e      	ldr	r0, [pc, #312]	@ (8005d48 <_svfiprintf_r+0x1e4>)
 8005c0e:	f7fa fae7 	bl	80001e0 <memchr>
 8005c12:	9a04      	ldr	r2, [sp, #16]
 8005c14:	b9d8      	cbnz	r0, 8005c4e <_svfiprintf_r+0xea>
 8005c16:	06d0      	lsls	r0, r2, #27
 8005c18:	bf44      	itt	mi
 8005c1a:	2320      	movmi	r3, #32
 8005c1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c20:	0711      	lsls	r1, r2, #28
 8005c22:	bf44      	itt	mi
 8005c24:	232b      	movmi	r3, #43	@ 0x2b
 8005c26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c2a:	f89a 3000 	ldrb.w	r3, [sl]
 8005c2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c30:	d015      	beq.n	8005c5e <_svfiprintf_r+0xfa>
 8005c32:	9a07      	ldr	r2, [sp, #28]
 8005c34:	4654      	mov	r4, sl
 8005c36:	2000      	movs	r0, #0
 8005c38:	f04f 0c0a 	mov.w	ip, #10
 8005c3c:	4621      	mov	r1, r4
 8005c3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c42:	3b30      	subs	r3, #48	@ 0x30
 8005c44:	2b09      	cmp	r3, #9
 8005c46:	d94b      	bls.n	8005ce0 <_svfiprintf_r+0x17c>
 8005c48:	b1b0      	cbz	r0, 8005c78 <_svfiprintf_r+0x114>
 8005c4a:	9207      	str	r2, [sp, #28]
 8005c4c:	e014      	b.n	8005c78 <_svfiprintf_r+0x114>
 8005c4e:	eba0 0308 	sub.w	r3, r0, r8
 8005c52:	fa09 f303 	lsl.w	r3, r9, r3
 8005c56:	4313      	orrs	r3, r2
 8005c58:	9304      	str	r3, [sp, #16]
 8005c5a:	46a2      	mov	sl, r4
 8005c5c:	e7d2      	b.n	8005c04 <_svfiprintf_r+0xa0>
 8005c5e:	9b03      	ldr	r3, [sp, #12]
 8005c60:	1d19      	adds	r1, r3, #4
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	9103      	str	r1, [sp, #12]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	bfbb      	ittet	lt
 8005c6a:	425b      	neglt	r3, r3
 8005c6c:	f042 0202 	orrlt.w	r2, r2, #2
 8005c70:	9307      	strge	r3, [sp, #28]
 8005c72:	9307      	strlt	r3, [sp, #28]
 8005c74:	bfb8      	it	lt
 8005c76:	9204      	strlt	r2, [sp, #16]
 8005c78:	7823      	ldrb	r3, [r4, #0]
 8005c7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c7c:	d10a      	bne.n	8005c94 <_svfiprintf_r+0x130>
 8005c7e:	7863      	ldrb	r3, [r4, #1]
 8005c80:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c82:	d132      	bne.n	8005cea <_svfiprintf_r+0x186>
 8005c84:	9b03      	ldr	r3, [sp, #12]
 8005c86:	1d1a      	adds	r2, r3, #4
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	9203      	str	r2, [sp, #12]
 8005c8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c90:	3402      	adds	r4, #2
 8005c92:	9305      	str	r3, [sp, #20]
 8005c94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005d58 <_svfiprintf_r+0x1f4>
 8005c98:	7821      	ldrb	r1, [r4, #0]
 8005c9a:	2203      	movs	r2, #3
 8005c9c:	4650      	mov	r0, sl
 8005c9e:	f7fa fa9f 	bl	80001e0 <memchr>
 8005ca2:	b138      	cbz	r0, 8005cb4 <_svfiprintf_r+0x150>
 8005ca4:	9b04      	ldr	r3, [sp, #16]
 8005ca6:	eba0 000a 	sub.w	r0, r0, sl
 8005caa:	2240      	movs	r2, #64	@ 0x40
 8005cac:	4082      	lsls	r2, r0
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	3401      	adds	r4, #1
 8005cb2:	9304      	str	r3, [sp, #16]
 8005cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cb8:	4824      	ldr	r0, [pc, #144]	@ (8005d4c <_svfiprintf_r+0x1e8>)
 8005cba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005cbe:	2206      	movs	r2, #6
 8005cc0:	f7fa fa8e 	bl	80001e0 <memchr>
 8005cc4:	2800      	cmp	r0, #0
 8005cc6:	d036      	beq.n	8005d36 <_svfiprintf_r+0x1d2>
 8005cc8:	4b21      	ldr	r3, [pc, #132]	@ (8005d50 <_svfiprintf_r+0x1ec>)
 8005cca:	bb1b      	cbnz	r3, 8005d14 <_svfiprintf_r+0x1b0>
 8005ccc:	9b03      	ldr	r3, [sp, #12]
 8005cce:	3307      	adds	r3, #7
 8005cd0:	f023 0307 	bic.w	r3, r3, #7
 8005cd4:	3308      	adds	r3, #8
 8005cd6:	9303      	str	r3, [sp, #12]
 8005cd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cda:	4433      	add	r3, r6
 8005cdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cde:	e76a      	b.n	8005bb6 <_svfiprintf_r+0x52>
 8005ce0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ce4:	460c      	mov	r4, r1
 8005ce6:	2001      	movs	r0, #1
 8005ce8:	e7a8      	b.n	8005c3c <_svfiprintf_r+0xd8>
 8005cea:	2300      	movs	r3, #0
 8005cec:	3401      	adds	r4, #1
 8005cee:	9305      	str	r3, [sp, #20]
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	f04f 0c0a 	mov.w	ip, #10
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cfc:	3a30      	subs	r2, #48	@ 0x30
 8005cfe:	2a09      	cmp	r2, #9
 8005d00:	d903      	bls.n	8005d0a <_svfiprintf_r+0x1a6>
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d0c6      	beq.n	8005c94 <_svfiprintf_r+0x130>
 8005d06:	9105      	str	r1, [sp, #20]
 8005d08:	e7c4      	b.n	8005c94 <_svfiprintf_r+0x130>
 8005d0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d0e:	4604      	mov	r4, r0
 8005d10:	2301      	movs	r3, #1
 8005d12:	e7f0      	b.n	8005cf6 <_svfiprintf_r+0x192>
 8005d14:	ab03      	add	r3, sp, #12
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	462a      	mov	r2, r5
 8005d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8005d54 <_svfiprintf_r+0x1f0>)
 8005d1c:	a904      	add	r1, sp, #16
 8005d1e:	4638      	mov	r0, r7
 8005d20:	f3af 8000 	nop.w
 8005d24:	1c42      	adds	r2, r0, #1
 8005d26:	4606      	mov	r6, r0
 8005d28:	d1d6      	bne.n	8005cd8 <_svfiprintf_r+0x174>
 8005d2a:	89ab      	ldrh	r3, [r5, #12]
 8005d2c:	065b      	lsls	r3, r3, #25
 8005d2e:	f53f af2d 	bmi.w	8005b8c <_svfiprintf_r+0x28>
 8005d32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d34:	e72c      	b.n	8005b90 <_svfiprintf_r+0x2c>
 8005d36:	ab03      	add	r3, sp, #12
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	462a      	mov	r2, r5
 8005d3c:	4b05      	ldr	r3, [pc, #20]	@ (8005d54 <_svfiprintf_r+0x1f0>)
 8005d3e:	a904      	add	r1, sp, #16
 8005d40:	4638      	mov	r0, r7
 8005d42:	f000 f879 	bl	8005e38 <_printf_i>
 8005d46:	e7ed      	b.n	8005d24 <_svfiprintf_r+0x1c0>
 8005d48:	080061d4 	.word	0x080061d4
 8005d4c:	080061de 	.word	0x080061de
 8005d50:	00000000 	.word	0x00000000
 8005d54:	08005aad 	.word	0x08005aad
 8005d58:	080061da 	.word	0x080061da

08005d5c <_printf_common>:
 8005d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d60:	4616      	mov	r6, r2
 8005d62:	4698      	mov	r8, r3
 8005d64:	688a      	ldr	r2, [r1, #8]
 8005d66:	690b      	ldr	r3, [r1, #16]
 8005d68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	bfb8      	it	lt
 8005d70:	4613      	movlt	r3, r2
 8005d72:	6033      	str	r3, [r6, #0]
 8005d74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d78:	4607      	mov	r7, r0
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	b10a      	cbz	r2, 8005d82 <_printf_common+0x26>
 8005d7e:	3301      	adds	r3, #1
 8005d80:	6033      	str	r3, [r6, #0]
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	0699      	lsls	r1, r3, #26
 8005d86:	bf42      	ittt	mi
 8005d88:	6833      	ldrmi	r3, [r6, #0]
 8005d8a:	3302      	addmi	r3, #2
 8005d8c:	6033      	strmi	r3, [r6, #0]
 8005d8e:	6825      	ldr	r5, [r4, #0]
 8005d90:	f015 0506 	ands.w	r5, r5, #6
 8005d94:	d106      	bne.n	8005da4 <_printf_common+0x48>
 8005d96:	f104 0a19 	add.w	sl, r4, #25
 8005d9a:	68e3      	ldr	r3, [r4, #12]
 8005d9c:	6832      	ldr	r2, [r6, #0]
 8005d9e:	1a9b      	subs	r3, r3, r2
 8005da0:	42ab      	cmp	r3, r5
 8005da2:	dc26      	bgt.n	8005df2 <_printf_common+0x96>
 8005da4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005da8:	6822      	ldr	r2, [r4, #0]
 8005daa:	3b00      	subs	r3, #0
 8005dac:	bf18      	it	ne
 8005dae:	2301      	movne	r3, #1
 8005db0:	0692      	lsls	r2, r2, #26
 8005db2:	d42b      	bmi.n	8005e0c <_printf_common+0xb0>
 8005db4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005db8:	4641      	mov	r1, r8
 8005dba:	4638      	mov	r0, r7
 8005dbc:	47c8      	blx	r9
 8005dbe:	3001      	adds	r0, #1
 8005dc0:	d01e      	beq.n	8005e00 <_printf_common+0xa4>
 8005dc2:	6823      	ldr	r3, [r4, #0]
 8005dc4:	6922      	ldr	r2, [r4, #16]
 8005dc6:	f003 0306 	and.w	r3, r3, #6
 8005dca:	2b04      	cmp	r3, #4
 8005dcc:	bf02      	ittt	eq
 8005dce:	68e5      	ldreq	r5, [r4, #12]
 8005dd0:	6833      	ldreq	r3, [r6, #0]
 8005dd2:	1aed      	subeq	r5, r5, r3
 8005dd4:	68a3      	ldr	r3, [r4, #8]
 8005dd6:	bf0c      	ite	eq
 8005dd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ddc:	2500      	movne	r5, #0
 8005dde:	4293      	cmp	r3, r2
 8005de0:	bfc4      	itt	gt
 8005de2:	1a9b      	subgt	r3, r3, r2
 8005de4:	18ed      	addgt	r5, r5, r3
 8005de6:	2600      	movs	r6, #0
 8005de8:	341a      	adds	r4, #26
 8005dea:	42b5      	cmp	r5, r6
 8005dec:	d11a      	bne.n	8005e24 <_printf_common+0xc8>
 8005dee:	2000      	movs	r0, #0
 8005df0:	e008      	b.n	8005e04 <_printf_common+0xa8>
 8005df2:	2301      	movs	r3, #1
 8005df4:	4652      	mov	r2, sl
 8005df6:	4641      	mov	r1, r8
 8005df8:	4638      	mov	r0, r7
 8005dfa:	47c8      	blx	r9
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	d103      	bne.n	8005e08 <_printf_common+0xac>
 8005e00:	f04f 30ff 	mov.w	r0, #4294967295
 8005e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e08:	3501      	adds	r5, #1
 8005e0a:	e7c6      	b.n	8005d9a <_printf_common+0x3e>
 8005e0c:	18e1      	adds	r1, r4, r3
 8005e0e:	1c5a      	adds	r2, r3, #1
 8005e10:	2030      	movs	r0, #48	@ 0x30
 8005e12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e16:	4422      	add	r2, r4
 8005e18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e20:	3302      	adds	r3, #2
 8005e22:	e7c7      	b.n	8005db4 <_printf_common+0x58>
 8005e24:	2301      	movs	r3, #1
 8005e26:	4622      	mov	r2, r4
 8005e28:	4641      	mov	r1, r8
 8005e2a:	4638      	mov	r0, r7
 8005e2c:	47c8      	blx	r9
 8005e2e:	3001      	adds	r0, #1
 8005e30:	d0e6      	beq.n	8005e00 <_printf_common+0xa4>
 8005e32:	3601      	adds	r6, #1
 8005e34:	e7d9      	b.n	8005dea <_printf_common+0x8e>
	...

08005e38 <_printf_i>:
 8005e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e3c:	7e0f      	ldrb	r7, [r1, #24]
 8005e3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e40:	2f78      	cmp	r7, #120	@ 0x78
 8005e42:	4691      	mov	r9, r2
 8005e44:	4680      	mov	r8, r0
 8005e46:	460c      	mov	r4, r1
 8005e48:	469a      	mov	sl, r3
 8005e4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e4e:	d807      	bhi.n	8005e60 <_printf_i+0x28>
 8005e50:	2f62      	cmp	r7, #98	@ 0x62
 8005e52:	d80a      	bhi.n	8005e6a <_printf_i+0x32>
 8005e54:	2f00      	cmp	r7, #0
 8005e56:	f000 80d2 	beq.w	8005ffe <_printf_i+0x1c6>
 8005e5a:	2f58      	cmp	r7, #88	@ 0x58
 8005e5c:	f000 80b9 	beq.w	8005fd2 <_printf_i+0x19a>
 8005e60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e68:	e03a      	b.n	8005ee0 <_printf_i+0xa8>
 8005e6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e6e:	2b15      	cmp	r3, #21
 8005e70:	d8f6      	bhi.n	8005e60 <_printf_i+0x28>
 8005e72:	a101      	add	r1, pc, #4	@ (adr r1, 8005e78 <_printf_i+0x40>)
 8005e74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e78:	08005ed1 	.word	0x08005ed1
 8005e7c:	08005ee5 	.word	0x08005ee5
 8005e80:	08005e61 	.word	0x08005e61
 8005e84:	08005e61 	.word	0x08005e61
 8005e88:	08005e61 	.word	0x08005e61
 8005e8c:	08005e61 	.word	0x08005e61
 8005e90:	08005ee5 	.word	0x08005ee5
 8005e94:	08005e61 	.word	0x08005e61
 8005e98:	08005e61 	.word	0x08005e61
 8005e9c:	08005e61 	.word	0x08005e61
 8005ea0:	08005e61 	.word	0x08005e61
 8005ea4:	08005fe5 	.word	0x08005fe5
 8005ea8:	08005f0f 	.word	0x08005f0f
 8005eac:	08005f9f 	.word	0x08005f9f
 8005eb0:	08005e61 	.word	0x08005e61
 8005eb4:	08005e61 	.word	0x08005e61
 8005eb8:	08006007 	.word	0x08006007
 8005ebc:	08005e61 	.word	0x08005e61
 8005ec0:	08005f0f 	.word	0x08005f0f
 8005ec4:	08005e61 	.word	0x08005e61
 8005ec8:	08005e61 	.word	0x08005e61
 8005ecc:	08005fa7 	.word	0x08005fa7
 8005ed0:	6833      	ldr	r3, [r6, #0]
 8005ed2:	1d1a      	adds	r2, r3, #4
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	6032      	str	r2, [r6, #0]
 8005ed8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005edc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e09d      	b.n	8006020 <_printf_i+0x1e8>
 8005ee4:	6833      	ldr	r3, [r6, #0]
 8005ee6:	6820      	ldr	r0, [r4, #0]
 8005ee8:	1d19      	adds	r1, r3, #4
 8005eea:	6031      	str	r1, [r6, #0]
 8005eec:	0606      	lsls	r6, r0, #24
 8005eee:	d501      	bpl.n	8005ef4 <_printf_i+0xbc>
 8005ef0:	681d      	ldr	r5, [r3, #0]
 8005ef2:	e003      	b.n	8005efc <_printf_i+0xc4>
 8005ef4:	0645      	lsls	r5, r0, #25
 8005ef6:	d5fb      	bpl.n	8005ef0 <_printf_i+0xb8>
 8005ef8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005efc:	2d00      	cmp	r5, #0
 8005efe:	da03      	bge.n	8005f08 <_printf_i+0xd0>
 8005f00:	232d      	movs	r3, #45	@ 0x2d
 8005f02:	426d      	negs	r5, r5
 8005f04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f08:	4859      	ldr	r0, [pc, #356]	@ (8006070 <_printf_i+0x238>)
 8005f0a:	230a      	movs	r3, #10
 8005f0c:	e011      	b.n	8005f32 <_printf_i+0xfa>
 8005f0e:	6821      	ldr	r1, [r4, #0]
 8005f10:	6833      	ldr	r3, [r6, #0]
 8005f12:	0608      	lsls	r0, r1, #24
 8005f14:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f18:	d402      	bmi.n	8005f20 <_printf_i+0xe8>
 8005f1a:	0649      	lsls	r1, r1, #25
 8005f1c:	bf48      	it	mi
 8005f1e:	b2ad      	uxthmi	r5, r5
 8005f20:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f22:	4853      	ldr	r0, [pc, #332]	@ (8006070 <_printf_i+0x238>)
 8005f24:	6033      	str	r3, [r6, #0]
 8005f26:	bf14      	ite	ne
 8005f28:	230a      	movne	r3, #10
 8005f2a:	2308      	moveq	r3, #8
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f32:	6866      	ldr	r6, [r4, #4]
 8005f34:	60a6      	str	r6, [r4, #8]
 8005f36:	2e00      	cmp	r6, #0
 8005f38:	bfa2      	ittt	ge
 8005f3a:	6821      	ldrge	r1, [r4, #0]
 8005f3c:	f021 0104 	bicge.w	r1, r1, #4
 8005f40:	6021      	strge	r1, [r4, #0]
 8005f42:	b90d      	cbnz	r5, 8005f48 <_printf_i+0x110>
 8005f44:	2e00      	cmp	r6, #0
 8005f46:	d04b      	beq.n	8005fe0 <_printf_i+0x1a8>
 8005f48:	4616      	mov	r6, r2
 8005f4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f4e:	fb03 5711 	mls	r7, r3, r1, r5
 8005f52:	5dc7      	ldrb	r7, [r0, r7]
 8005f54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f58:	462f      	mov	r7, r5
 8005f5a:	42bb      	cmp	r3, r7
 8005f5c:	460d      	mov	r5, r1
 8005f5e:	d9f4      	bls.n	8005f4a <_printf_i+0x112>
 8005f60:	2b08      	cmp	r3, #8
 8005f62:	d10b      	bne.n	8005f7c <_printf_i+0x144>
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	07df      	lsls	r7, r3, #31
 8005f68:	d508      	bpl.n	8005f7c <_printf_i+0x144>
 8005f6a:	6923      	ldr	r3, [r4, #16]
 8005f6c:	6861      	ldr	r1, [r4, #4]
 8005f6e:	4299      	cmp	r1, r3
 8005f70:	bfde      	ittt	le
 8005f72:	2330      	movle	r3, #48	@ 0x30
 8005f74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f78:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f7c:	1b92      	subs	r2, r2, r6
 8005f7e:	6122      	str	r2, [r4, #16]
 8005f80:	f8cd a000 	str.w	sl, [sp]
 8005f84:	464b      	mov	r3, r9
 8005f86:	aa03      	add	r2, sp, #12
 8005f88:	4621      	mov	r1, r4
 8005f8a:	4640      	mov	r0, r8
 8005f8c:	f7ff fee6 	bl	8005d5c <_printf_common>
 8005f90:	3001      	adds	r0, #1
 8005f92:	d14a      	bne.n	800602a <_printf_i+0x1f2>
 8005f94:	f04f 30ff 	mov.w	r0, #4294967295
 8005f98:	b004      	add	sp, #16
 8005f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f9e:	6823      	ldr	r3, [r4, #0]
 8005fa0:	f043 0320 	orr.w	r3, r3, #32
 8005fa4:	6023      	str	r3, [r4, #0]
 8005fa6:	4833      	ldr	r0, [pc, #204]	@ (8006074 <_printf_i+0x23c>)
 8005fa8:	2778      	movs	r7, #120	@ 0x78
 8005faa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005fae:	6823      	ldr	r3, [r4, #0]
 8005fb0:	6831      	ldr	r1, [r6, #0]
 8005fb2:	061f      	lsls	r7, r3, #24
 8005fb4:	f851 5b04 	ldr.w	r5, [r1], #4
 8005fb8:	d402      	bmi.n	8005fc0 <_printf_i+0x188>
 8005fba:	065f      	lsls	r7, r3, #25
 8005fbc:	bf48      	it	mi
 8005fbe:	b2ad      	uxthmi	r5, r5
 8005fc0:	6031      	str	r1, [r6, #0]
 8005fc2:	07d9      	lsls	r1, r3, #31
 8005fc4:	bf44      	itt	mi
 8005fc6:	f043 0320 	orrmi.w	r3, r3, #32
 8005fca:	6023      	strmi	r3, [r4, #0]
 8005fcc:	b11d      	cbz	r5, 8005fd6 <_printf_i+0x19e>
 8005fce:	2310      	movs	r3, #16
 8005fd0:	e7ac      	b.n	8005f2c <_printf_i+0xf4>
 8005fd2:	4827      	ldr	r0, [pc, #156]	@ (8006070 <_printf_i+0x238>)
 8005fd4:	e7e9      	b.n	8005faa <_printf_i+0x172>
 8005fd6:	6823      	ldr	r3, [r4, #0]
 8005fd8:	f023 0320 	bic.w	r3, r3, #32
 8005fdc:	6023      	str	r3, [r4, #0]
 8005fde:	e7f6      	b.n	8005fce <_printf_i+0x196>
 8005fe0:	4616      	mov	r6, r2
 8005fe2:	e7bd      	b.n	8005f60 <_printf_i+0x128>
 8005fe4:	6833      	ldr	r3, [r6, #0]
 8005fe6:	6825      	ldr	r5, [r4, #0]
 8005fe8:	6961      	ldr	r1, [r4, #20]
 8005fea:	1d18      	adds	r0, r3, #4
 8005fec:	6030      	str	r0, [r6, #0]
 8005fee:	062e      	lsls	r6, r5, #24
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	d501      	bpl.n	8005ff8 <_printf_i+0x1c0>
 8005ff4:	6019      	str	r1, [r3, #0]
 8005ff6:	e002      	b.n	8005ffe <_printf_i+0x1c6>
 8005ff8:	0668      	lsls	r0, r5, #25
 8005ffa:	d5fb      	bpl.n	8005ff4 <_printf_i+0x1bc>
 8005ffc:	8019      	strh	r1, [r3, #0]
 8005ffe:	2300      	movs	r3, #0
 8006000:	6123      	str	r3, [r4, #16]
 8006002:	4616      	mov	r6, r2
 8006004:	e7bc      	b.n	8005f80 <_printf_i+0x148>
 8006006:	6833      	ldr	r3, [r6, #0]
 8006008:	1d1a      	adds	r2, r3, #4
 800600a:	6032      	str	r2, [r6, #0]
 800600c:	681e      	ldr	r6, [r3, #0]
 800600e:	6862      	ldr	r2, [r4, #4]
 8006010:	2100      	movs	r1, #0
 8006012:	4630      	mov	r0, r6
 8006014:	f7fa f8e4 	bl	80001e0 <memchr>
 8006018:	b108      	cbz	r0, 800601e <_printf_i+0x1e6>
 800601a:	1b80      	subs	r0, r0, r6
 800601c:	6060      	str	r0, [r4, #4]
 800601e:	6863      	ldr	r3, [r4, #4]
 8006020:	6123      	str	r3, [r4, #16]
 8006022:	2300      	movs	r3, #0
 8006024:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006028:	e7aa      	b.n	8005f80 <_printf_i+0x148>
 800602a:	6923      	ldr	r3, [r4, #16]
 800602c:	4632      	mov	r2, r6
 800602e:	4649      	mov	r1, r9
 8006030:	4640      	mov	r0, r8
 8006032:	47d0      	blx	sl
 8006034:	3001      	adds	r0, #1
 8006036:	d0ad      	beq.n	8005f94 <_printf_i+0x15c>
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	079b      	lsls	r3, r3, #30
 800603c:	d413      	bmi.n	8006066 <_printf_i+0x22e>
 800603e:	68e0      	ldr	r0, [r4, #12]
 8006040:	9b03      	ldr	r3, [sp, #12]
 8006042:	4298      	cmp	r0, r3
 8006044:	bfb8      	it	lt
 8006046:	4618      	movlt	r0, r3
 8006048:	e7a6      	b.n	8005f98 <_printf_i+0x160>
 800604a:	2301      	movs	r3, #1
 800604c:	4632      	mov	r2, r6
 800604e:	4649      	mov	r1, r9
 8006050:	4640      	mov	r0, r8
 8006052:	47d0      	blx	sl
 8006054:	3001      	adds	r0, #1
 8006056:	d09d      	beq.n	8005f94 <_printf_i+0x15c>
 8006058:	3501      	adds	r5, #1
 800605a:	68e3      	ldr	r3, [r4, #12]
 800605c:	9903      	ldr	r1, [sp, #12]
 800605e:	1a5b      	subs	r3, r3, r1
 8006060:	42ab      	cmp	r3, r5
 8006062:	dcf2      	bgt.n	800604a <_printf_i+0x212>
 8006064:	e7eb      	b.n	800603e <_printf_i+0x206>
 8006066:	2500      	movs	r5, #0
 8006068:	f104 0619 	add.w	r6, r4, #25
 800606c:	e7f5      	b.n	800605a <_printf_i+0x222>
 800606e:	bf00      	nop
 8006070:	080061e5 	.word	0x080061e5
 8006074:	080061f6 	.word	0x080061f6

08006078 <memmove>:
 8006078:	4288      	cmp	r0, r1
 800607a:	b510      	push	{r4, lr}
 800607c:	eb01 0402 	add.w	r4, r1, r2
 8006080:	d902      	bls.n	8006088 <memmove+0x10>
 8006082:	4284      	cmp	r4, r0
 8006084:	4623      	mov	r3, r4
 8006086:	d807      	bhi.n	8006098 <memmove+0x20>
 8006088:	1e43      	subs	r3, r0, #1
 800608a:	42a1      	cmp	r1, r4
 800608c:	d008      	beq.n	80060a0 <memmove+0x28>
 800608e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006092:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006096:	e7f8      	b.n	800608a <memmove+0x12>
 8006098:	4402      	add	r2, r0
 800609a:	4601      	mov	r1, r0
 800609c:	428a      	cmp	r2, r1
 800609e:	d100      	bne.n	80060a2 <memmove+0x2a>
 80060a0:	bd10      	pop	{r4, pc}
 80060a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060aa:	e7f7      	b.n	800609c <memmove+0x24>

080060ac <_sbrk_r>:
 80060ac:	b538      	push	{r3, r4, r5, lr}
 80060ae:	4d06      	ldr	r5, [pc, #24]	@ (80060c8 <_sbrk_r+0x1c>)
 80060b0:	2300      	movs	r3, #0
 80060b2:	4604      	mov	r4, r0
 80060b4:	4608      	mov	r0, r1
 80060b6:	602b      	str	r3, [r5, #0]
 80060b8:	f7fa fe4a 	bl	8000d50 <_sbrk>
 80060bc:	1c43      	adds	r3, r0, #1
 80060be:	d102      	bne.n	80060c6 <_sbrk_r+0x1a>
 80060c0:	682b      	ldr	r3, [r5, #0]
 80060c2:	b103      	cbz	r3, 80060c6 <_sbrk_r+0x1a>
 80060c4:	6023      	str	r3, [r4, #0]
 80060c6:	bd38      	pop	{r3, r4, r5, pc}
 80060c8:	20000328 	.word	0x20000328

080060cc <memcpy>:
 80060cc:	440a      	add	r2, r1
 80060ce:	4291      	cmp	r1, r2
 80060d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80060d4:	d100      	bne.n	80060d8 <memcpy+0xc>
 80060d6:	4770      	bx	lr
 80060d8:	b510      	push	{r4, lr}
 80060da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060e2:	4291      	cmp	r1, r2
 80060e4:	d1f9      	bne.n	80060da <memcpy+0xe>
 80060e6:	bd10      	pop	{r4, pc}

080060e8 <_realloc_r>:
 80060e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060ec:	4680      	mov	r8, r0
 80060ee:	4615      	mov	r5, r2
 80060f0:	460c      	mov	r4, r1
 80060f2:	b921      	cbnz	r1, 80060fe <_realloc_r+0x16>
 80060f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060f8:	4611      	mov	r1, r2
 80060fa:	f7ff bc4b 	b.w	8005994 <_malloc_r>
 80060fe:	b92a      	cbnz	r2, 800610c <_realloc_r+0x24>
 8006100:	f7ff fbdc 	bl	80058bc <_free_r>
 8006104:	2400      	movs	r4, #0
 8006106:	4620      	mov	r0, r4
 8006108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800610c:	f000 f81a 	bl	8006144 <_malloc_usable_size_r>
 8006110:	4285      	cmp	r5, r0
 8006112:	4606      	mov	r6, r0
 8006114:	d802      	bhi.n	800611c <_realloc_r+0x34>
 8006116:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800611a:	d8f4      	bhi.n	8006106 <_realloc_r+0x1e>
 800611c:	4629      	mov	r1, r5
 800611e:	4640      	mov	r0, r8
 8006120:	f7ff fc38 	bl	8005994 <_malloc_r>
 8006124:	4607      	mov	r7, r0
 8006126:	2800      	cmp	r0, #0
 8006128:	d0ec      	beq.n	8006104 <_realloc_r+0x1c>
 800612a:	42b5      	cmp	r5, r6
 800612c:	462a      	mov	r2, r5
 800612e:	4621      	mov	r1, r4
 8006130:	bf28      	it	cs
 8006132:	4632      	movcs	r2, r6
 8006134:	f7ff ffca 	bl	80060cc <memcpy>
 8006138:	4621      	mov	r1, r4
 800613a:	4640      	mov	r0, r8
 800613c:	f7ff fbbe 	bl	80058bc <_free_r>
 8006140:	463c      	mov	r4, r7
 8006142:	e7e0      	b.n	8006106 <_realloc_r+0x1e>

08006144 <_malloc_usable_size_r>:
 8006144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006148:	1f18      	subs	r0, r3, #4
 800614a:	2b00      	cmp	r3, #0
 800614c:	bfbc      	itt	lt
 800614e:	580b      	ldrlt	r3, [r1, r0]
 8006150:	18c0      	addlt	r0, r0, r3
 8006152:	4770      	bx	lr

08006154 <_init>:
 8006154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006156:	bf00      	nop
 8006158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800615a:	bc08      	pop	{r3}
 800615c:	469e      	mov	lr, r3
 800615e:	4770      	bx	lr

08006160 <_fini>:
 8006160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006162:	bf00      	nop
 8006164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006166:	bc08      	pop	{r3}
 8006168:	469e      	mov	lr, r3
 800616a:	4770      	bx	lr
