
ProjectProof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006090  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08006220  08006220  00007220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062bc  080062bc  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  080062bc  080062bc  000072bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062c4  080062c4  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062c4  080062c4  000072c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080062c8  080062c8  000072c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080062cc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  2000005c  08006328  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08006328  00008334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010df9  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023fc  00000000  00000000  00018e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  0001b288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa6  00000000  00000000  0001c058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c29  00000000  00000000  0001cafe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010624  00000000  00000000  00044727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb1d1  00000000  00000000  00054d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014ff1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003eb4  00000000  00000000  0014ff60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00153e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006208 	.word	0x08006208

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08006208 	.word	0x08006208

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fcb8 	bl	8000ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f8c8 	bl	800070c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800057c:	f000 f917 	bl	80007ae <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 fa4c 	bl	8000a1c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000584:	f000 f93e 	bl	8000804 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000588:	f000 fa18 	bl	80009bc <MX_USART2_UART_Init>
  MX_ADC2_Init();
 800058c:	f000 f9b2 	bl	80008f4 <MX_ADC2_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	   HAL_ADC_Start(&hadc1);
 8000590:	4856      	ldr	r0, [pc, #344]	@ (80006ec <main+0x17c>)
 8000592:	f001 f88f 	bl	80016b4 <HAL_ADC_Start>
	   HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000596:	f04f 31ff 	mov.w	r1, #4294967295
 800059a:	4854      	ldr	r0, [pc, #336]	@ (80006ec <main+0x17c>)
 800059c:	f001 f944 	bl	8001828 <HAL_ADC_PollForConversion>
	   raw_value_LDR  = HAL_ADC_GetValue(&hadc1);
 80005a0:	4852      	ldr	r0, [pc, #328]	@ (80006ec <main+0x17c>)
 80005a2:	f001 fa19 	bl	80019d8 <HAL_ADC_GetValue>
 80005a6:	4603      	mov	r3, r0
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	4b51      	ldr	r3, [pc, #324]	@ (80006f0 <main+0x180>)
 80005ac:	801a      	strh	r2, [r3, #0]
	   sprintf (uart_buff, "Light : %hu \r\n", raw_value_LDR);
 80005ae:	4b50      	ldr	r3, [pc, #320]	@ (80006f0 <main+0x180>)
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	461a      	mov	r2, r3
 80005b4:	494f      	ldr	r1, [pc, #316]	@ (80006f4 <main+0x184>)
 80005b6:	4850      	ldr	r0, [pc, #320]	@ (80006f8 <main+0x188>)
 80005b8:	f005 f986 	bl	80058c8 <siprintf>
	   HAL_UART_Transmit(&huart2, (uint8_t*)uart_buff, strlen(uart_buff), HAL_MAX_DELAY);
 80005bc:	484e      	ldr	r0, [pc, #312]	@ (80006f8 <main+0x188>)
 80005be:	f7ff fe07 	bl	80001d0 <strlen>
 80005c2:	4603      	mov	r3, r0
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ca:	494b      	ldr	r1, [pc, #300]	@ (80006f8 <main+0x188>)
 80005cc:	484b      	ldr	r0, [pc, #300]	@ (80006fc <main+0x18c>)
 80005ce:	f004 f8ad 	bl	800472c <HAL_UART_Transmit>

	   HAL_ADC_Start(&hadc2);
 80005d2:	484b      	ldr	r0, [pc, #300]	@ (8000700 <main+0x190>)
 80005d4:	f001 f86e 	bl	80016b4 <HAL_ADC_Start>
	   HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80005d8:	f04f 31ff 	mov.w	r1, #4294967295
 80005dc:	4848      	ldr	r0, [pc, #288]	@ (8000700 <main+0x190>)
 80005de:	f001 f923 	bl	8001828 <HAL_ADC_PollForConversion>
	   raw_value_NTC  = HAL_ADC_GetValue(&hadc2);
 80005e2:	4847      	ldr	r0, [pc, #284]	@ (8000700 <main+0x190>)
 80005e4:	f001 f9f8 	bl	80019d8 <HAL_ADC_GetValue>
 80005e8:	4603      	mov	r3, r0
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	4b45      	ldr	r3, [pc, #276]	@ (8000704 <main+0x194>)
 80005ee:	801a      	strh	r2, [r3, #0]
	   sprintf (uart_buff, "NTC : %hu \r\n", raw_value_NTC);
 80005f0:	4b44      	ldr	r3, [pc, #272]	@ (8000704 <main+0x194>)
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	461a      	mov	r2, r3
 80005f6:	4944      	ldr	r1, [pc, #272]	@ (8000708 <main+0x198>)
 80005f8:	483f      	ldr	r0, [pc, #252]	@ (80006f8 <main+0x188>)
 80005fa:	f005 f965 	bl	80058c8 <siprintf>
	   HAL_UART_Transmit(&huart2, (uint8_t*)uart_buff, strlen(uart_buff), HAL_MAX_DELAY);
 80005fe:	483e      	ldr	r0, [pc, #248]	@ (80006f8 <main+0x188>)
 8000600:	f7ff fde6 	bl	80001d0 <strlen>
 8000604:	4603      	mov	r3, r0
 8000606:	b29a      	uxth	r2, r3
 8000608:	f04f 33ff 	mov.w	r3, #4294967295
 800060c:	493a      	ldr	r1, [pc, #232]	@ (80006f8 <main+0x188>)
 800060e:	483b      	ldr	r0, [pc, #236]	@ (80006fc <main+0x18c>)
 8000610:	f004 f88c 	bl	800472c <HAL_UART_Transmit>

	   HAL_Delay(1000);
 8000614:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000618:	f000 fce2 	bl	8000fe0 <HAL_Delay>

	   //conditional for LDR incidence
	   if ( raw_value_LDR > 3000){
 800061c:	4b34      	ldr	r3, [pc, #208]	@ (80006f0 <main+0x180>)
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000624:	4293      	cmp	r3, r2
 8000626:	d907      	bls.n	8000638 <main+0xc8>
	   		   HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin , 1 );
 8000628:	2201      	movs	r2, #1
 800062a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800062e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000632:	f002 fcd1 	bl	8002fd8 <HAL_GPIO_WritePin>
 8000636:	e006      	b.n	8000646 <main+0xd6>

	   	   }else{
	   		   HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin , 0 );
 8000638:	2200      	movs	r2, #0
 800063a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800063e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000642:	f002 fcc9 	bl	8002fd8 <HAL_GPIO_WritePin>

	   	   }

	   // conditional for NTC incidence

	   if (raw_value_NTC <= 1250) {
 8000646:	4b2f      	ldr	r3, [pc, #188]	@ (8000704 <main+0x194>)
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 800064e:	4293      	cmp	r3, r2
 8000650:	d812      	bhi.n	8000678 <main+0x108>
	       // Activa el LED1
	       HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000652:	2201      	movs	r2, #1
 8000654:	2110      	movs	r1, #16
 8000656:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065a:	f002 fcbd 	bl	8002fd8 <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0); // Asegura que el LED2 esté apagado
 800065e:	2200      	movs	r2, #0
 8000660:	2120      	movs	r1, #32
 8000662:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000666:	f002 fcb7 	bl	8002fd8 <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0); // Asegura que el LED3 esté apagado
 800066a:	2200      	movs	r2, #0
 800066c:	2140      	movs	r1, #64	@ 0x40
 800066e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000672:	f002 fcb1 	bl	8002fd8 <HAL_GPIO_WritePin>
 8000676:	e78b      	b.n	8000590 <main+0x20>
	   }
	   else if (raw_value_NTC > 1250 && raw_value_NTC <= 2500) {
 8000678:	4b22      	ldr	r3, [pc, #136]	@ (8000704 <main+0x194>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8000680:	4293      	cmp	r3, r2
 8000682:	d918      	bls.n	80006b6 <main+0x146>
 8000684:	4b1f      	ldr	r3, [pc, #124]	@ (8000704 <main+0x194>)
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800068c:	4293      	cmp	r3, r2
 800068e:	d812      	bhi.n	80006b6 <main+0x146>
	       // Activa el LED2
	       HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1); // Asegura que el LED1 esté apagado
 8000690:	2201      	movs	r2, #1
 8000692:	2110      	movs	r1, #16
 8000694:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000698:	f002 fc9e 	bl	8002fd8 <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 800069c:	2201      	movs	r2, #1
 800069e:	2120      	movs	r1, #32
 80006a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a4:	f002 fc98 	bl	8002fd8 <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0); // Asegura que el LED3 esté apagado
 80006a8:	2200      	movs	r2, #0
 80006aa:	2140      	movs	r1, #64	@ 0x40
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b0:	f002 fc92 	bl	8002fd8 <HAL_GPIO_WritePin>
 80006b4:	e018      	b.n	80006e8 <main+0x178>
	   }
	   else if (raw_value_NTC > 2500) {
 80006b6:	4b13      	ldr	r3, [pc, #76]	@ (8000704 <main+0x194>)
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80006be:	4293      	cmp	r3, r2
 80006c0:	f67f af66 	bls.w	8000590 <main+0x20>
	       // Activa el LED3
	       HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1); // Asegura que el LED1 esté apagado
 80006c4:	2201      	movs	r2, #1
 80006c6:	2110      	movs	r1, #16
 80006c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006cc:	f002 fc84 	bl	8002fd8 <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1); // Asegura que el LED2 esté apagado
 80006d0:	2201      	movs	r2, #1
 80006d2:	2120      	movs	r1, #32
 80006d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d8:	f002 fc7e 	bl	8002fd8 <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80006dc:	2201      	movs	r2, #1
 80006de:	2140      	movs	r1, #64	@ 0x40
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e4:	f002 fc78 	bl	8002fd8 <HAL_GPIO_WritePin>
	   HAL_ADC_Start(&hadc1);
 80006e8:	e752      	b.n	8000590 <main+0x20>
 80006ea:	bf00      	nop
 80006ec:	20000078 	.word	0x20000078
 80006f0:	200001de 	.word	0x200001de
 80006f4:	08006220 	.word	0x08006220
 80006f8:	200001c8 	.word	0x200001c8
 80006fc:	20000140 	.word	0x20000140
 8000700:	200000dc 	.word	0x200000dc
 8000704:	200001dc 	.word	0x200001dc
 8000708:	08006230 	.word	0x08006230

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b096      	sub	sp, #88	@ 0x58
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	2244      	movs	r2, #68	@ 0x44
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f005 f8f4 	bl	8005908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	463b      	mov	r3, r7
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800072e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000732:	f002 fc9b 	bl	800306c <HAL_PWREx_ControlVoltageScaling>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800073c:	f000 f9f4 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000740:	2302      	movs	r3, #2
 8000742:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000744:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000748:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074a:	2310      	movs	r3, #16
 800074c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074e:	2302      	movs	r3, #2
 8000750:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000752:	2302      	movs	r3, #2
 8000754:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000756:	2301      	movs	r3, #1
 8000758:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800075a:	230a      	movs	r3, #10
 800075c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800075e:	2307      	movs	r3, #7
 8000760:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000762:	2302      	movs	r3, #2
 8000764:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000766:	2302      	movs	r3, #2
 8000768:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4618      	mov	r0, r3
 8000770:	f002 fcd2 	bl	8003118 <HAL_RCC_OscConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800077a:	f000 f9d5 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077e:	230f      	movs	r3, #15
 8000780:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000782:	2303      	movs	r3, #3
 8000784:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000792:	463b      	mov	r3, r7
 8000794:	2104      	movs	r1, #4
 8000796:	4618      	mov	r0, r3
 8000798:	f003 f89a 	bl	80038d0 <HAL_RCC_ClockConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007a2:	f000 f9c1 	bl	8000b28 <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	3758      	adds	r7, #88	@ 0x58
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b0a2      	sub	sp, #136	@ 0x88
 80007b2:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b4:	463b      	mov	r3, r7
 80007b6:	2288      	movs	r2, #136	@ 0x88
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f005 f8a4 	bl	8005908 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80007c4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80007c6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80007ca:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80007cc:	2302      	movs	r3, #2
 80007ce:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80007d0:	2301      	movs	r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80007d4:	2308      	movs	r3, #8
 80007d6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80007d8:	2307      	movs	r3, #7
 80007da:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80007dc:	2302      	movs	r3, #2
 80007de:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80007e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80007e8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ea:	463b      	mov	r3, r7
 80007ec:	4618      	mov	r0, r3
 80007ee:	f003 fa93 	bl	8003d18 <HAL_RCCEx_PeriphCLKConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 80007f8:	f000 f996 	bl	8000b28 <Error_Handler>
  }
}
 80007fc:	bf00      	nop
 80007fe:	3788      	adds	r7, #136	@ 0x88
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	@ 0x28
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
 8000824:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000826:	4b30      	ldr	r3, [pc, #192]	@ (80008e8 <MX_ADC1_Init+0xe4>)
 8000828:	4a30      	ldr	r2, [pc, #192]	@ (80008ec <MX_ADC1_Init+0xe8>)
 800082a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800082c:	4b2e      	ldr	r3, [pc, #184]	@ (80008e8 <MX_ADC1_Init+0xe4>)
 800082e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000832:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000834:	4b2c      	ldr	r3, [pc, #176]	@ (80008e8 <MX_ADC1_Init+0xe4>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800083a:	4b2b      	ldr	r3, [pc, #172]	@ (80008e8 <MX_ADC1_Init+0xe4>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000840:	4b29      	ldr	r3, [pc, #164]	@ (80008e8 <MX_ADC1_Init+0xe4>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000846:	4b28      	ldr	r3, [pc, #160]	@ (80008e8 <MX_ADC1_Init+0xe4>)
 8000848:	2204      	movs	r2, #4
 800084a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800084c:	4b26      	ldr	r3, [pc, #152]	@ (80008e8 <MX_ADC1_Init+0xe4>)
 800084e:	2200      	movs	r2, #0
 8000850:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000852:	4b25      	ldr	r3, [pc, #148]	@ (80008e8 <MX_ADC1_Init+0xe4>)
 8000854:	2200      	movs	r2, #0
 8000856:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000858:	4b23      	ldr	r3, [pc, #140]	@ (80008e8 <MX_ADC1_Init+0xe4>)
 800085a:	2201      	movs	r2, #1
 800085c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800085e:	4b22      	ldr	r3, [pc, #136]	@ (80008e8 <MX_ADC1_Init+0xe4>)
 8000860:	2200      	movs	r2, #0
 8000862:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000866:	4b20      	ldr	r3, [pc, #128]	@ (80008e8 <MX_ADC1_Init+0xe4>)
 8000868:	2200      	movs	r2, #0
 800086a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800086c:	4b1e      	ldr	r3, [pc, #120]	@ (80008e8 <MX_ADC1_Init+0xe4>)
 800086e:	2200      	movs	r2, #0
 8000870:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000872:	4b1d      	ldr	r3, [pc, #116]	@ (80008e8 <MX_ADC1_Init+0xe4>)
 8000874:	2200      	movs	r2, #0
 8000876:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800087a:	4b1b      	ldr	r3, [pc, #108]	@ (80008e8 <MX_ADC1_Init+0xe4>)
 800087c:	2200      	movs	r2, #0
 800087e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000880:	4b19      	ldr	r3, [pc, #100]	@ (80008e8 <MX_ADC1_Init+0xe4>)
 8000882:	2200      	movs	r2, #0
 8000884:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000888:	4817      	ldr	r0, [pc, #92]	@ (80008e8 <MX_ADC1_Init+0xe4>)
 800088a:	f000 fdc3 	bl	8001414 <HAL_ADC_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000894:	f000 f948 	bl	8000b28 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	4811      	ldr	r0, [pc, #68]	@ (80008e8 <MX_ADC1_Init+0xe4>)
 80008a4:	f001 ffae 	bl	8002804 <HAL_ADCEx_MultiModeConfigChannel>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80008ae:	f000 f93b 	bl	8000b28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008b2:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <MX_ADC1_Init+0xec>)
 80008b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008b6:	2306      	movs	r3, #6
 80008b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80008ba:	2302      	movs	r3, #2
 80008bc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008be:	237f      	movs	r3, #127	@ 0x7f
 80008c0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008c2:	2304      	movs	r3, #4
 80008c4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	4619      	mov	r1, r3
 80008ce:	4806      	ldr	r0, [pc, #24]	@ (80008e8 <MX_ADC1_Init+0xe4>)
 80008d0:	f001 fac8 	bl	8001e64 <HAL_ADC_ConfigChannel>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80008da:	f000 f925 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	3728      	adds	r7, #40	@ 0x28
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000078 	.word	0x20000078
 80008ec:	50040000 	.word	0x50040000
 80008f0:	14f00020 	.word	0x14f00020

080008f4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008fa:	463b      	mov	r3, r7
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
 8000908:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800090a:	4b29      	ldr	r3, [pc, #164]	@ (80009b0 <MX_ADC2_Init+0xbc>)
 800090c:	4a29      	ldr	r2, [pc, #164]	@ (80009b4 <MX_ADC2_Init+0xc0>)
 800090e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000910:	4b27      	ldr	r3, [pc, #156]	@ (80009b0 <MX_ADC2_Init+0xbc>)
 8000912:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000916:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000918:	4b25      	ldr	r3, [pc, #148]	@ (80009b0 <MX_ADC2_Init+0xbc>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800091e:	4b24      	ldr	r3, [pc, #144]	@ (80009b0 <MX_ADC2_Init+0xbc>)
 8000920:	2200      	movs	r2, #0
 8000922:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000924:	4b22      	ldr	r3, [pc, #136]	@ (80009b0 <MX_ADC2_Init+0xbc>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800092a:	4b21      	ldr	r3, [pc, #132]	@ (80009b0 <MX_ADC2_Init+0xbc>)
 800092c:	2204      	movs	r2, #4
 800092e:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000930:	4b1f      	ldr	r3, [pc, #124]	@ (80009b0 <MX_ADC2_Init+0xbc>)
 8000932:	2200      	movs	r2, #0
 8000934:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000936:	4b1e      	ldr	r3, [pc, #120]	@ (80009b0 <MX_ADC2_Init+0xbc>)
 8000938:	2200      	movs	r2, #0
 800093a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800093c:	4b1c      	ldr	r3, [pc, #112]	@ (80009b0 <MX_ADC2_Init+0xbc>)
 800093e:	2201      	movs	r2, #1
 8000940:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000942:	4b1b      	ldr	r3, [pc, #108]	@ (80009b0 <MX_ADC2_Init+0xbc>)
 8000944:	2200      	movs	r2, #0
 8000946:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800094a:	4b19      	ldr	r3, [pc, #100]	@ (80009b0 <MX_ADC2_Init+0xbc>)
 800094c:	2200      	movs	r2, #0
 800094e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000950:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <MX_ADC2_Init+0xbc>)
 8000952:	2200      	movs	r2, #0
 8000954:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000956:	4b16      	ldr	r3, [pc, #88]	@ (80009b0 <MX_ADC2_Init+0xbc>)
 8000958:	2200      	movs	r2, #0
 800095a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800095e:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <MX_ADC2_Init+0xbc>)
 8000960:	2200      	movs	r2, #0
 8000962:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000964:	4b12      	ldr	r3, [pc, #72]	@ (80009b0 <MX_ADC2_Init+0xbc>)
 8000966:	2200      	movs	r2, #0
 8000968:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800096c:	4810      	ldr	r0, [pc, #64]	@ (80009b0 <MX_ADC2_Init+0xbc>)
 800096e:	f000 fd51 	bl	8001414 <HAL_ADC_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000978:	f000 f8d6 	bl	8000b28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800097c:	4b0e      	ldr	r3, [pc, #56]	@ (80009b8 <MX_ADC2_Init+0xc4>)
 800097e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000980:	2306      	movs	r3, #6
 8000982:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000988:	237f      	movs	r3, #127	@ 0x7f
 800098a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800098c:	2304      	movs	r3, #4
 800098e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000994:	463b      	mov	r3, r7
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <MX_ADC2_Init+0xbc>)
 800099a:	f001 fa63 	bl	8001e64 <HAL_ADC_ConfigChannel>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 80009a4:	f000 f8c0 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	3718      	adds	r7, #24
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200000dc 	.word	0x200000dc
 80009b4:	50040100 	.word	0x50040100
 80009b8:	19200040 	.word	0x19200040

080009bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009c0:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <MX_USART2_UART_Init+0x58>)
 80009c2:	4a15      	ldr	r2, [pc, #84]	@ (8000a18 <MX_USART2_UART_Init+0x5c>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009c6:	4b13      	ldr	r3, [pc, #76]	@ (8000a14 <MX_USART2_UART_Init+0x58>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <MX_USART2_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <MX_USART2_UART_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009da:	4b0e      	ldr	r3, [pc, #56]	@ (8000a14 <MX_USART2_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <MX_USART2_UART_Init+0x58>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a14 <MX_USART2_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <MX_USART2_UART_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f2:	4b08      	ldr	r3, [pc, #32]	@ (8000a14 <MX_USART2_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f8:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <MX_USART2_UART_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <MX_USART2_UART_Init+0x58>)
 8000a00:	f003 fe46 	bl	8004690 <HAL_UART_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a0a:	f000 f88d 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000140 	.word	0x20000140
 8000a18:	40004400 	.word	0x40004400

08000a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	@ 0x28
 8000a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a32:	4b3a      	ldr	r3, [pc, #232]	@ (8000b1c <MX_GPIO_Init+0x100>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a36:	4a39      	ldr	r2, [pc, #228]	@ (8000b1c <MX_GPIO_Init+0x100>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a3e:	4b37      	ldr	r3, [pc, #220]	@ (8000b1c <MX_GPIO_Init+0x100>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4a:	4b34      	ldr	r3, [pc, #208]	@ (8000b1c <MX_GPIO_Init+0x100>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4e:	4a33      	ldr	r2, [pc, #204]	@ (8000b1c <MX_GPIO_Init+0x100>)
 8000a50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a56:	4b31      	ldr	r3, [pc, #196]	@ (8000b1c <MX_GPIO_Init+0x100>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	4b2e      	ldr	r3, [pc, #184]	@ (8000b1c <MX_GPIO_Init+0x100>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a66:	4a2d      	ldr	r2, [pc, #180]	@ (8000b1c <MX_GPIO_Init+0x100>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b1c <MX_GPIO_Init+0x100>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	4b28      	ldr	r3, [pc, #160]	@ (8000b1c <MX_GPIO_Init+0x100>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7e:	4a27      	ldr	r2, [pc, #156]	@ (8000b1c <MX_GPIO_Init+0x100>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a86:	4b25      	ldr	r3, [pc, #148]	@ (8000b1c <MX_GPIO_Init+0x100>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD1_Pin|LD2_Pin|LD3_Pin|LD4_Pin
 8000a92:	2200      	movs	r2, #0
 8000a94:	f641 7170 	movw	r1, #8048	@ 0x1f70
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a9c:	f002 fa9c 	bl	8002fd8 <HAL_GPIO_WritePin>
                          |LD5_Pin|FAN_Pin|MOTORX_Pin|MOTORY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2140      	movs	r1, #64	@ 0x40
 8000aa4:	481e      	ldr	r0, [pc, #120]	@ (8000b20 <MX_GPIO_Init+0x104>)
 8000aa6:	f002 fa97 	bl	8002fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aaa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ab0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4818      	ldr	r0, [pc, #96]	@ (8000b24 <MX_GPIO_Init+0x108>)
 8000ac2:	f002 f8df 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin LD3_Pin LD4_Pin
                           LD5_Pin FAN_Pin MOTORX_Pin MOTORY_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin|LD3_Pin|LD4_Pin
 8000ac6:	f641 7370 	movw	r3, #8048	@ 0x1f70
 8000aca:	617b      	str	r3, [r7, #20]
                          |LD5_Pin|FAN_Pin|MOTORX_Pin|MOTORY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae2:	f002 f8cf 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ae6:	2340      	movs	r3, #64	@ 0x40
 8000ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	4808      	ldr	r0, [pc, #32]	@ (8000b20 <MX_GPIO_Init+0x104>)
 8000afe:	f002 f8c1 	bl	8002c84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2100      	movs	r1, #0
 8000b06:	2028      	movs	r0, #40	@ 0x28
 8000b08:	f002 f807 	bl	8002b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b0c:	2028      	movs	r0, #40	@ 0x28
 8000b0e:	f002 f820 	bl	8002b52 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b12:	bf00      	nop
 8000b14:	3728      	adds	r7, #40	@ 0x28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	48000400 	.word	0x48000400
 8000b24:	48000800 	.word	0x48000800

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <Error_Handler+0x8>

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b78 <HAL_MspInit+0x44>)
 8000b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b78 <HAL_MspInit+0x44>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b46:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <HAL_MspInit+0x44>)
 8000b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <HAL_MspInit+0x44>)
 8000b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b56:	4a08      	ldr	r2, [pc, #32]	@ (8000b78 <HAL_MspInit+0x44>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b5e:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <HAL_MspInit+0x44>)
 8000b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000

08000b7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08c      	sub	sp, #48	@ 0x30
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a3c      	ldr	r2, [pc, #240]	@ (8000c8c <HAL_ADC_MspInit+0x110>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d136      	bne.n	8000c0c <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000b9e:	4b3c      	ldr	r3, [pc, #240]	@ (8000c90 <HAL_ADC_MspInit+0x114>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	4a3a      	ldr	r2, [pc, #232]	@ (8000c90 <HAL_ADC_MspInit+0x114>)
 8000ba6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000ba8:	4b39      	ldr	r3, [pc, #228]	@ (8000c90 <HAL_ADC_MspInit+0x114>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d10b      	bne.n	8000bc8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000bb0:	4b38      	ldr	r3, [pc, #224]	@ (8000c94 <HAL_ADC_MspInit+0x118>)
 8000bb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb4:	4a37      	ldr	r2, [pc, #220]	@ (8000c94 <HAL_ADC_MspInit+0x118>)
 8000bb6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000bba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bbc:	4b35      	ldr	r3, [pc, #212]	@ (8000c94 <HAL_ADC_MspInit+0x118>)
 8000bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bc4:	61bb      	str	r3, [r7, #24]
 8000bc6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	4b32      	ldr	r3, [pc, #200]	@ (8000c94 <HAL_ADC_MspInit+0x118>)
 8000bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bcc:	4a31      	ldr	r2, [pc, #196]	@ (8000c94 <HAL_ADC_MspInit+0x118>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bd4:	4b2f      	ldr	r3, [pc, #188]	@ (8000c94 <HAL_ADC_MspInit+0x118>)
 8000bd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	617b      	str	r3, [r7, #20]
 8000bde:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000be0:	2301      	movs	r3, #1
 8000be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000be4:	230b      	movs	r3, #11
 8000be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf6:	f002 f845 	bl	8002c84 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2012      	movs	r0, #18
 8000c00:	f001 ff8b 	bl	8002b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c04:	2012      	movs	r0, #18
 8000c06:	f001 ffa4 	bl	8002b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000c0a:	e03a      	b.n	8000c82 <HAL_ADC_MspInit+0x106>
  else if(hadc->Instance==ADC2)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a21      	ldr	r2, [pc, #132]	@ (8000c98 <HAL_ADC_MspInit+0x11c>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d135      	bne.n	8000c82 <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000c16:	4b1e      	ldr	r3, [pc, #120]	@ (8000c90 <HAL_ADC_MspInit+0x114>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	4a1c      	ldr	r2, [pc, #112]	@ (8000c90 <HAL_ADC_MspInit+0x114>)
 8000c1e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000c20:	4b1b      	ldr	r3, [pc, #108]	@ (8000c90 <HAL_ADC_MspInit+0x114>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d10b      	bne.n	8000c40 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000c28:	4b1a      	ldr	r3, [pc, #104]	@ (8000c94 <HAL_ADC_MspInit+0x118>)
 8000c2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c2c:	4a19      	ldr	r2, [pc, #100]	@ (8000c94 <HAL_ADC_MspInit+0x118>)
 8000c2e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c34:	4b17      	ldr	r3, [pc, #92]	@ (8000c94 <HAL_ADC_MspInit+0x118>)
 8000c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c40:	4b14      	ldr	r3, [pc, #80]	@ (8000c94 <HAL_ADC_MspInit+0x118>)
 8000c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c44:	4a13      	ldr	r2, [pc, #76]	@ (8000c94 <HAL_ADC_MspInit+0x118>)
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c4c:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <HAL_ADC_MspInit+0x118>)
 8000c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c5c:	230b      	movs	r3, #11
 8000c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c64:	f107 031c 	add.w	r3, r7, #28
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c6e:	f002 f809 	bl	8002c84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	2012      	movs	r0, #18
 8000c78:	f001 ff4f 	bl	8002b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c7c:	2012      	movs	r0, #18
 8000c7e:	f001 ff68 	bl	8002b52 <HAL_NVIC_EnableIRQ>
}
 8000c82:	bf00      	nop
 8000c84:	3730      	adds	r7, #48	@ 0x30
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	50040000 	.word	0x50040000
 8000c90:	200001e0 	.word	0x200001e0
 8000c94:	40021000 	.word	0x40021000
 8000c98:	50040100 	.word	0x50040100

08000c9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b0ac      	sub	sp, #176	@ 0xb0
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2288      	movs	r2, #136	@ 0x88
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f004 fe23 	bl	8005908 <memset>
  if(huart->Instance==USART2)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a25      	ldr	r2, [pc, #148]	@ (8000d5c <HAL_UART_MspInit+0xc0>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d143      	bne.n	8000d54 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f003 f81d 	bl	8003d18 <HAL_RCCEx_PeriphCLKConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ce4:	f7ff ff20 	bl	8000b28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d60 <HAL_UART_MspInit+0xc4>)
 8000cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cec:	4a1c      	ldr	r2, [pc, #112]	@ (8000d60 <HAL_UART_MspInit+0xc4>)
 8000cee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cf2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d60 <HAL_UART_MspInit+0xc4>)
 8000cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b17      	ldr	r3, [pc, #92]	@ (8000d60 <HAL_UART_MspInit+0xc4>)
 8000d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d04:	4a16      	ldr	r2, [pc, #88]	@ (8000d60 <HAL_UART_MspInit+0xc4>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d0c:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <HAL_UART_MspInit+0xc4>)
 8000d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d18:	230c      	movs	r3, #12
 8000d1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d30:	2307      	movs	r3, #7
 8000d32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d40:	f001 ffa0 	bl	8002c84 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2100      	movs	r1, #0
 8000d48:	2026      	movs	r0, #38	@ 0x26
 8000d4a:	f001 fee6 	bl	8002b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d4e:	2026      	movs	r0, #38	@ 0x26
 8000d50:	f001 feff 	bl	8002b52 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d54:	bf00      	nop
 8000d56:	37b0      	adds	r7, #176	@ 0xb0
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40004400 	.word	0x40004400
 8000d60:	40021000 	.word	0x40021000

08000d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <NMI_Handler+0x4>

08000d6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dba:	f000 f8f1 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000dc8:	4803      	ldr	r0, [pc, #12]	@ (8000dd8 <ADC1_2_IRQHandler+0x14>)
 8000dca:	f000 fe13 	bl	80019f4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000dce:	4803      	ldr	r0, [pc, #12]	@ (8000ddc <ADC1_2_IRQHandler+0x18>)
 8000dd0:	f000 fe10 	bl	80019f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000078 	.word	0x20000078
 8000ddc:	200000dc 	.word	0x200000dc

08000de0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000de4:	4802      	ldr	r0, [pc, #8]	@ (8000df0 <USART2_IRQHandler+0x10>)
 8000de6:	f003 fd2b 	bl	8004840 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000140 	.word	0x20000140

08000df4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000df8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000dfc:	f002 f904 	bl	8003008 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e0c:	4a14      	ldr	r2, [pc, #80]	@ (8000e60 <_sbrk+0x5c>)
 8000e0e:	4b15      	ldr	r3, [pc, #84]	@ (8000e64 <_sbrk+0x60>)
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e18:	4b13      	ldr	r3, [pc, #76]	@ (8000e68 <_sbrk+0x64>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d102      	bne.n	8000e26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e20:	4b11      	ldr	r3, [pc, #68]	@ (8000e68 <_sbrk+0x64>)
 8000e22:	4a12      	ldr	r2, [pc, #72]	@ (8000e6c <_sbrk+0x68>)
 8000e24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e26:	4b10      	ldr	r3, [pc, #64]	@ (8000e68 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d207      	bcs.n	8000e44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e34:	f004 fd70 	bl	8005918 <__errno>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	220c      	movs	r2, #12
 8000e3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e42:	e009      	b.n	8000e58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e44:	4b08      	ldr	r3, [pc, #32]	@ (8000e68 <_sbrk+0x64>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e4a:	4b07      	ldr	r3, [pc, #28]	@ (8000e68 <_sbrk+0x64>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	4a05      	ldr	r2, [pc, #20]	@ (8000e68 <_sbrk+0x64>)
 8000e54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e56:	68fb      	ldr	r3, [r7, #12]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3718      	adds	r7, #24
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20018000 	.word	0x20018000
 8000e64:	00000400 	.word	0x00000400
 8000e68:	200001e4 	.word	0x200001e4
 8000e6c:	20000338 	.word	0x20000338

08000e70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e74:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <SystemInit+0x20>)
 8000e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e7a:	4a05      	ldr	r2, [pc, #20]	@ (8000e90 <SystemInit+0x20>)
 8000e7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ecc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e98:	f7ff ffea 	bl	8000e70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e9c:	480c      	ldr	r0, [pc, #48]	@ (8000ed0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e9e:	490d      	ldr	r1, [pc, #52]	@ (8000ed4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed8 <LoopForever+0xe>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea4:	e002      	b.n	8000eac <LoopCopyDataInit>

08000ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eaa:	3304      	adds	r3, #4

08000eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb0:	d3f9      	bcc.n	8000ea6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000edc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eb4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ee0 <LoopForever+0x16>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb8:	e001      	b.n	8000ebe <LoopFillZerobss>

08000eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ebc:	3204      	adds	r2, #4

08000ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec0:	d3fb      	bcc.n	8000eba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ec2:	f004 fd2f 	bl	8005924 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ec6:	f7ff fb53 	bl	8000570 <main>

08000eca <LoopForever>:

LoopForever:
    b LoopForever
 8000eca:	e7fe      	b.n	8000eca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ecc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ed8:	080062cc 	.word	0x080062cc
  ldr r2, =_sbss
 8000edc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ee0:	20000334 	.word	0x20000334

08000ee4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ee4:	e7fe      	b.n	8000ee4 <ADC3_IRQHandler>
	...

08000ee8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <HAL_Init+0x3c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a0b      	ldr	r2, [pc, #44]	@ (8000f24 <HAL_Init+0x3c>)
 8000ef8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000efc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000efe:	2003      	movs	r0, #3
 8000f00:	f001 fe00 	bl	8002b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f04:	2000      	movs	r0, #0
 8000f06:	f000 f80f 	bl	8000f28 <HAL_InitTick>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d002      	beq.n	8000f16 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	71fb      	strb	r3, [r7, #7]
 8000f14:	e001      	b.n	8000f1a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f16:	f7ff fe0d 	bl	8000b34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40022000 	.word	0x40022000

08000f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f30:	2300      	movs	r3, #0
 8000f32:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f34:	4b17      	ldr	r3, [pc, #92]	@ (8000f94 <HAL_InitTick+0x6c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d023      	beq.n	8000f84 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f3c:	4b16      	ldr	r3, [pc, #88]	@ (8000f98 <HAL_InitTick+0x70>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b14      	ldr	r3, [pc, #80]	@ (8000f94 <HAL_InitTick+0x6c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4619      	mov	r1, r3
 8000f46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f001 fe0b 	bl	8002b6e <HAL_SYSTICK_Config>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d10f      	bne.n	8000f7e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2b0f      	cmp	r3, #15
 8000f62:	d809      	bhi.n	8000f78 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f64:	2200      	movs	r2, #0
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6c:	f001 fdd5 	bl	8002b1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f70:	4a0a      	ldr	r2, [pc, #40]	@ (8000f9c <HAL_InitTick+0x74>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	e007      	b.n	8000f88 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	73fb      	strb	r3, [r7, #15]
 8000f7c:	e004      	b.n	8000f88 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	73fb      	strb	r3, [r7, #15]
 8000f82:	e001      	b.n	8000f88 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000008 	.word	0x20000008
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	20000004 	.word	0x20000004

08000fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <HAL_IncTick+0x20>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <HAL_IncTick+0x24>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a04      	ldr	r2, [pc, #16]	@ (8000fc4 <HAL_IncTick+0x24>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	200001e8 	.word	0x200001e8

08000fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return uwTick;
 8000fcc:	4b03      	ldr	r3, [pc, #12]	@ (8000fdc <HAL_GetTick+0x14>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	200001e8 	.word	0x200001e8

08000fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe8:	f7ff ffee 	bl	8000fc8 <HAL_GetTick>
 8000fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff8:	d005      	beq.n	8001006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <HAL_Delay+0x44>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4413      	add	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001006:	bf00      	nop
 8001008:	f7ff ffde 	bl	8000fc8 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	429a      	cmp	r2, r3
 8001016:	d8f7      	bhi.n	8001008 <HAL_Delay+0x28>
  {
  }
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000008 	.word	0x20000008

08001028 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	431a      	orrs	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	609a      	str	r2, [r3, #8]
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
 8001056:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	431a      	orrs	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	609a      	str	r2, [r3, #8]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001090:	b480      	push	{r7}
 8001092:	b087      	sub	sp, #28
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3360      	adds	r3, #96	@ 0x60
 80010a2:	461a      	mov	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <LL_ADC_SetOffset+0x44>)
 80010b2:	4013      	ands	r3, r2
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	430a      	orrs	r2, r1
 80010be:	4313      	orrs	r3, r2
 80010c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80010c8:	bf00      	nop
 80010ca:	371c      	adds	r7, #28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	03fff000 	.word	0x03fff000

080010d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3360      	adds	r3, #96	@ 0x60
 80010e6:	461a      	mov	r2, r3
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	4413      	add	r3, r2
 80010ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001104:	b480      	push	{r7}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	3360      	adds	r3, #96	@ 0x60
 8001114:	461a      	mov	r2, r3
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	431a      	orrs	r2, r3
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800112e:	bf00      	nop
 8001130:	371c      	adds	r7, #28
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001160:	b480      	push	{r7}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	3330      	adds	r3, #48	@ 0x30
 8001170:	461a      	mov	r2, r3
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	f003 030c 	and.w	r3, r3, #12
 800117c:	4413      	add	r3, r2
 800117e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	f003 031f 	and.w	r3, r3, #31
 800118a:	211f      	movs	r1, #31
 800118c:	fa01 f303 	lsl.w	r3, r1, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	401a      	ands	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	0e9b      	lsrs	r3, r3, #26
 8001198:	f003 011f 	and.w	r1, r3, #31
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	f003 031f 	and.w	r3, r3, #31
 80011a2:	fa01 f303 	lsl.w	r3, r1, r3
 80011a6:	431a      	orrs	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011ac:	bf00      	nop
 80011ae:	371c      	adds	r7, #28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d101      	bne.n	80011d0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80011cc:	2301      	movs	r3, #1
 80011ce:	e000      	b.n	80011d2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80011de:	b480      	push	{r7}
 80011e0:	b087      	sub	sp, #28
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	60f8      	str	r0, [r7, #12]
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	3314      	adds	r3, #20
 80011ee:	461a      	mov	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	0e5b      	lsrs	r3, r3, #25
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	4413      	add	r3, r2
 80011fc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	0d1b      	lsrs	r3, r3, #20
 8001206:	f003 031f 	and.w	r3, r3, #31
 800120a:	2107      	movs	r1, #7
 800120c:	fa01 f303 	lsl.w	r3, r1, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	401a      	ands	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	0d1b      	lsrs	r3, r3, #20
 8001218:	f003 031f 	and.w	r3, r3, #31
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	fa01 f303 	lsl.w	r3, r1, r3
 8001222:	431a      	orrs	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001228:	bf00      	nop
 800122a:	371c      	adds	r7, #28
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800124c:	43db      	mvns	r3, r3
 800124e:	401a      	ands	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f003 0318 	and.w	r3, r3, #24
 8001256:	4908      	ldr	r1, [pc, #32]	@ (8001278 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001258:	40d9      	lsrs	r1, r3
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	400b      	ands	r3, r1
 800125e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001262:	431a      	orrs	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800126a:	bf00      	nop
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	0007ffff 	.word	0x0007ffff

0800127c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f003 031f 	and.w	r3, r3, #31
}
 800128c:	4618      	mov	r0, r3
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80012c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	6093      	str	r3, [r2, #8]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80012e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80012ec:	d101      	bne.n	80012f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80012ee:	2301      	movs	r3, #1
 80012f0:	e000      	b.n	80012f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001310:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001314:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001338:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800133c:	d101      	bne.n	8001342 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001360:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001364:	f043 0201 	orr.w	r2, r3, #1
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	2b01      	cmp	r3, #1
 800138a:	d101      	bne.n	8001390 <LL_ADC_IsEnabled+0x18>
 800138c:	2301      	movs	r3, #1
 800138e:	e000      	b.n	8001392 <LL_ADC_IsEnabled+0x1a>
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80013ae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013b2:	f043 0204 	orr.w	r2, r3, #4
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 0304 	and.w	r3, r3, #4
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	d101      	bne.n	80013de <LL_ADC_REG_IsConversionOngoing+0x18>
 80013da:	2301      	movs	r3, #1
 80013dc:	e000      	b.n	80013e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 0308 	and.w	r3, r3, #8
 80013fc:	2b08      	cmp	r3, #8
 80013fe:	d101      	bne.n	8001404 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001400:	2301      	movs	r3, #1
 8001402:	e000      	b.n	8001406 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	b089      	sub	sp, #36	@ 0x24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800141c:	2300      	movs	r3, #0
 800141e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e130      	b.n	8001690 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001438:	2b00      	cmp	r3, #0
 800143a:	d109      	bne.n	8001450 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff fb9d 	bl	8000b7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff3f 	bl	80012d8 <LL_ADC_IsDeepPowerDownEnabled>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d004      	beq.n	800146a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff25 	bl	80012b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff ff5a 	bl	8001328 <LL_ADC_IsInternalRegulatorEnabled>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d115      	bne.n	80014a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ff3e 	bl	8001300 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001484:	4b84      	ldr	r3, [pc, #528]	@ (8001698 <HAL_ADC_Init+0x284>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	099b      	lsrs	r3, r3, #6
 800148a:	4a84      	ldr	r2, [pc, #528]	@ (800169c <HAL_ADC_Init+0x288>)
 800148c:	fba2 2303 	umull	r2, r3, r2, r3
 8001490:	099b      	lsrs	r3, r3, #6
 8001492:	3301      	adds	r3, #1
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001498:	e002      	b.n	80014a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	3b01      	subs	r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f9      	bne.n	800149a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ff3c 	bl	8001328 <LL_ADC_IsInternalRegulatorEnabled>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10d      	bne.n	80014d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014ba:	f043 0210 	orr.w	r2, r3, #16
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c6:	f043 0201 	orr.w	r2, r3, #1
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff ff75 	bl	80013c6 <LL_ADC_REG_IsConversionOngoing>
 80014dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014e2:	f003 0310 	and.w	r3, r3, #16
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f040 80c9 	bne.w	800167e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f040 80c5 	bne.w	800167e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014f8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80014fc:	f043 0202 	orr.w	r2, r3, #2
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff35 	bl	8001378 <LL_ADC_IsEnabled>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d115      	bne.n	8001540 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001514:	4862      	ldr	r0, [pc, #392]	@ (80016a0 <HAL_ADC_Init+0x28c>)
 8001516:	f7ff ff2f 	bl	8001378 <LL_ADC_IsEnabled>
 800151a:	4604      	mov	r4, r0
 800151c:	4861      	ldr	r0, [pc, #388]	@ (80016a4 <HAL_ADC_Init+0x290>)
 800151e:	f7ff ff2b 	bl	8001378 <LL_ADC_IsEnabled>
 8001522:	4603      	mov	r3, r0
 8001524:	431c      	orrs	r4, r3
 8001526:	4860      	ldr	r0, [pc, #384]	@ (80016a8 <HAL_ADC_Init+0x294>)
 8001528:	f7ff ff26 	bl	8001378 <LL_ADC_IsEnabled>
 800152c:	4603      	mov	r3, r0
 800152e:	4323      	orrs	r3, r4
 8001530:	2b00      	cmp	r3, #0
 8001532:	d105      	bne.n	8001540 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	4619      	mov	r1, r3
 800153a:	485c      	ldr	r0, [pc, #368]	@ (80016ac <HAL_ADC_Init+0x298>)
 800153c:	f7ff fd74 	bl	8001028 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	7e5b      	ldrb	r3, [r3, #25]
 8001544:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800154a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001550:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001556:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800155e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f893 3020 	ldrb.w	r3, [r3, #32]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d106      	bne.n	800157c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001572:	3b01      	subs	r3, #1
 8001574:	045b      	lsls	r3, r3, #17
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001580:	2b00      	cmp	r3, #0
 8001582:	d009      	beq.n	8001598 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001588:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001590:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4313      	orrs	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68da      	ldr	r2, [r3, #12]
 800159e:	4b44      	ldr	r3, [pc, #272]	@ (80016b0 <HAL_ADC_Init+0x29c>)
 80015a0:	4013      	ands	r3, r2
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	6812      	ldr	r2, [r2, #0]
 80015a6:	69b9      	ldr	r1, [r7, #24]
 80015a8:	430b      	orrs	r3, r1
 80015aa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff1b 	bl	80013ec <LL_ADC_INJ_IsConversionOngoing>
 80015b6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d13d      	bne.n	800163a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d13a      	bne.n	800163a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015c8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80015d0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80015e0:	f023 0302 	bic.w	r3, r3, #2
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	69b9      	ldr	r1, [r7, #24]
 80015ea:	430b      	orrs	r3, r1
 80015ec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d118      	bne.n	800162a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001602:	f023 0304 	bic.w	r3, r3, #4
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800160e:	4311      	orrs	r1, r2
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001614:	4311      	orrs	r1, r2
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800161a:	430a      	orrs	r2, r1
 800161c:	431a      	orrs	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f042 0201 	orr.w	r2, r2, #1
 8001626:	611a      	str	r2, [r3, #16]
 8001628:	e007      	b.n	800163a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	691a      	ldr	r2, [r3, #16]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0201 	bic.w	r2, r2, #1
 8001638:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d10c      	bne.n	800165c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001648:	f023 010f 	bic.w	r1, r3, #15
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	1e5a      	subs	r2, r3, #1
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	430a      	orrs	r2, r1
 8001658:	631a      	str	r2, [r3, #48]	@ 0x30
 800165a:	e007      	b.n	800166c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 020f 	bic.w	r2, r2, #15
 800166a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001670:	f023 0303 	bic.w	r3, r3, #3
 8001674:	f043 0201 	orr.w	r2, r3, #1
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	655a      	str	r2, [r3, #84]	@ 0x54
 800167c:	e007      	b.n	800168e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001682:	f043 0210 	orr.w	r2, r3, #16
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800168e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3724      	adds	r7, #36	@ 0x24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd90      	pop	{r4, r7, pc}
 8001698:	20000000 	.word	0x20000000
 800169c:	053e2d63 	.word	0x053e2d63
 80016a0:	50040000 	.word	0x50040000
 80016a4:	50040100 	.word	0x50040100
 80016a8:	50040200 	.word	0x50040200
 80016ac:	50040300 	.word	0x50040300
 80016b0:	fff0c007 	.word	0xfff0c007

080016b4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016bc:	4857      	ldr	r0, [pc, #348]	@ (800181c <HAL_ADC_Start+0x168>)
 80016be:	f7ff fddd 	bl	800127c <LL_ADC_GetMultimode>
 80016c2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fe7c 	bl	80013c6 <LL_ADC_REG_IsConversionOngoing>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f040 809c 	bne.w	800180e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d101      	bne.n	80016e4 <HAL_ADC_Start+0x30>
 80016e0:	2302      	movs	r3, #2
 80016e2:	e097      	b.n	8001814 <HAL_ADC_Start+0x160>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f000 ffab 	bl	8002648 <ADC_Enable>
 80016f2:	4603      	mov	r3, r0
 80016f4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80016f6:	7dfb      	ldrb	r3, [r7, #23]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f040 8083 	bne.w	8001804 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001702:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001706:	f023 0301 	bic.w	r3, r3, #1
 800170a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a42      	ldr	r2, [pc, #264]	@ (8001820 <HAL_ADC_Start+0x16c>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d002      	beq.n	8001722 <HAL_ADC_Start+0x6e>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	e000      	b.n	8001724 <HAL_ADC_Start+0x70>
 8001722:	4b40      	ldr	r3, [pc, #256]	@ (8001824 <HAL_ADC_Start+0x170>)
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	4293      	cmp	r3, r2
 800172a:	d002      	beq.n	8001732 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d105      	bne.n	800173e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001736:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001742:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800174a:	d106      	bne.n	800175a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001750:	f023 0206 	bic.w	r2, r3, #6
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	659a      	str	r2, [r3, #88]	@ 0x58
 8001758:	e002      	b.n	8001760 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	221c      	movs	r2, #28
 8001766:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a2a      	ldr	r2, [pc, #168]	@ (8001820 <HAL_ADC_Start+0x16c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d002      	beq.n	8001780 <HAL_ADC_Start+0xcc>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	e000      	b.n	8001782 <HAL_ADC_Start+0xce>
 8001780:	4b28      	ldr	r3, [pc, #160]	@ (8001824 <HAL_ADC_Start+0x170>)
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	4293      	cmp	r3, r2
 8001788:	d008      	beq.n	800179c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	2b05      	cmp	r3, #5
 8001794:	d002      	beq.n	800179c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	2b09      	cmp	r3, #9
 800179a:	d114      	bne.n	80017c6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d007      	beq.n	80017ba <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017b2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fded 	bl	800139e <LL_ADC_REG_StartConversion>
 80017c4:	e025      	b.n	8001812 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a12      	ldr	r2, [pc, #72]	@ (8001820 <HAL_ADC_Start+0x16c>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d002      	beq.n	80017e2 <HAL_ADC_Start+0x12e>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	e000      	b.n	80017e4 <HAL_ADC_Start+0x130>
 80017e2:	4b10      	ldr	r3, [pc, #64]	@ (8001824 <HAL_ADC_Start+0x170>)
 80017e4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00f      	beq.n	8001812 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017fa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	655a      	str	r2, [r3, #84]	@ 0x54
 8001802:	e006      	b.n	8001812 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800180c:	e001      	b.n	8001812 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800180e:	2302      	movs	r3, #2
 8001810:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001812:	7dfb      	ldrb	r3, [r7, #23]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	50040300 	.word	0x50040300
 8001820:	50040100 	.word	0x50040100
 8001824:	50040000 	.word	0x50040000

08001828 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001832:	4866      	ldr	r0, [pc, #408]	@ (80019cc <HAL_ADC_PollForConversion+0x1a4>)
 8001834:	f7ff fd22 	bl	800127c <LL_ADC_GetMultimode>
 8001838:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	2b08      	cmp	r3, #8
 8001840:	d102      	bne.n	8001848 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001842:	2308      	movs	r3, #8
 8001844:	61fb      	str	r3, [r7, #28]
 8001846:	e02a      	b.n	800189e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d005      	beq.n	800185a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	2b05      	cmp	r3, #5
 8001852:	d002      	beq.n	800185a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	2b09      	cmp	r3, #9
 8001858:	d111      	bne.n	800187e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b00      	cmp	r3, #0
 8001866:	d007      	beq.n	8001878 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800186c:	f043 0220 	orr.w	r2, r3, #32
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e0a4      	b.n	80019c2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001878:	2304      	movs	r3, #4
 800187a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800187c:	e00f      	b.n	800189e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800187e:	4853      	ldr	r0, [pc, #332]	@ (80019cc <HAL_ADC_PollForConversion+0x1a4>)
 8001880:	f7ff fd0a 	bl	8001298 <LL_ADC_GetMultiDMATransfer>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d007      	beq.n	800189a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800188e:	f043 0220 	orr.w	r2, r3, #32
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e093      	b.n	80019c2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800189a:	2304      	movs	r3, #4
 800189c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800189e:	f7ff fb93 	bl	8000fc8 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80018a4:	e021      	b.n	80018ea <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ac:	d01d      	beq.n	80018ea <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80018ae:	f7ff fb8b 	bl	8000fc8 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d302      	bcc.n	80018c4 <HAL_ADC_PollForConversion+0x9c>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d112      	bne.n	80018ea <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	4013      	ands	r3, r2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10b      	bne.n	80018ea <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018d6:	f043 0204 	orr.w	r2, r3, #4
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e06b      	b.n	80019c2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	4013      	ands	r3, r2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0d6      	beq.n	80018a6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fc16 	bl	800113a <LL_ADC_REG_IsTriggerSourceSWStart>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d01c      	beq.n	800194e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	7e5b      	ldrb	r3, [r3, #25]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d118      	bne.n	800194e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b08      	cmp	r3, #8
 8001928:	d111      	bne.n	800194e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800192e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800193a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d105      	bne.n	800194e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001946:	f043 0201 	orr.w	r2, r3, #1
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a1f      	ldr	r2, [pc, #124]	@ (80019d0 <HAL_ADC_PollForConversion+0x1a8>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d002      	beq.n	800195e <HAL_ADC_PollForConversion+0x136>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	e000      	b.n	8001960 <HAL_ADC_PollForConversion+0x138>
 800195e:	4b1d      	ldr	r3, [pc, #116]	@ (80019d4 <HAL_ADC_PollForConversion+0x1ac>)
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	4293      	cmp	r3, r2
 8001966:	d008      	beq.n	800197a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d005      	beq.n	800197a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	2b05      	cmp	r3, #5
 8001972:	d002      	beq.n	800197a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	2b09      	cmp	r3, #9
 8001978:	d104      	bne.n	8001984 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	61bb      	str	r3, [r7, #24]
 8001982:	e00c      	b.n	800199e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a11      	ldr	r2, [pc, #68]	@ (80019d0 <HAL_ADC_PollForConversion+0x1a8>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d002      	beq.n	8001994 <HAL_ADC_PollForConversion+0x16c>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	e000      	b.n	8001996 <HAL_ADC_PollForConversion+0x16e>
 8001994:	4b0f      	ldr	r3, [pc, #60]	@ (80019d4 <HAL_ADC_PollForConversion+0x1ac>)
 8001996:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d104      	bne.n	80019ae <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2208      	movs	r2, #8
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	e008      	b.n	80019c0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d103      	bne.n	80019c0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	220c      	movs	r2, #12
 80019be:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3720      	adds	r7, #32
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	50040300 	.word	0x50040300
 80019d0:	50040100 	.word	0x50040100
 80019d4:	50040000 	.word	0x50040000

080019d8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	@ 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80019fc:	2300      	movs	r3, #0
 80019fe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a10:	4882      	ldr	r0, [pc, #520]	@ (8001c1c <HAL_ADC_IRQHandler+0x228>)
 8001a12:	f7ff fc33 	bl	800127c <LL_ADC_GetMultimode>
 8001a16:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d017      	beq.n	8001a52 <HAL_ADC_IRQHandler+0x5e>
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d012      	beq.n	8001a52 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a30:	f003 0310 	and.w	r3, r3, #16
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d105      	bne.n	8001a44 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a3c:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 fed3 	bl	80027f0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d004      	beq.n	8001a66 <HAL_ADC_IRQHandler+0x72>
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10a      	bne.n	8001a7c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 8083 	beq.w	8001b78 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d07d      	beq.n	8001b78 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a80:	f003 0310 	and.w	r3, r3, #16
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d105      	bne.n	8001a94 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a8c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fb4e 	bl	800113a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d062      	beq.n	8001b6a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a5d      	ldr	r2, [pc, #372]	@ (8001c20 <HAL_ADC_IRQHandler+0x22c>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d002      	beq.n	8001ab4 <HAL_ADC_IRQHandler+0xc0>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	e000      	b.n	8001ab6 <HAL_ADC_IRQHandler+0xc2>
 8001ab4:	4b5b      	ldr	r3, [pc, #364]	@ (8001c24 <HAL_ADC_IRQHandler+0x230>)
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d008      	beq.n	8001ad0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	2b05      	cmp	r3, #5
 8001ac8:	d002      	beq.n	8001ad0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2b09      	cmp	r3, #9
 8001ace:	d104      	bne.n	8001ada <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	623b      	str	r3, [r7, #32]
 8001ad8:	e00c      	b.n	8001af4 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a50      	ldr	r2, [pc, #320]	@ (8001c20 <HAL_ADC_IRQHandler+0x22c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d002      	beq.n	8001aea <HAL_ADC_IRQHandler+0xf6>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	e000      	b.n	8001aec <HAL_ADC_IRQHandler+0xf8>
 8001aea:	4b4e      	ldr	r3, [pc, #312]	@ (8001c24 <HAL_ADC_IRQHandler+0x230>)
 8001aec:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d135      	bne.n	8001b6a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	d12e      	bne.n	8001b6a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fc58 	bl	80013c6 <LL_ADC_REG_IsConversionOngoing>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d11a      	bne.n	8001b52 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 020c 	bic.w	r2, r2, #12
 8001b2a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d112      	bne.n	8001b6a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b48:	f043 0201 	orr.w	r2, r3, #1
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b50:	e00b      	b.n	8001b6a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b56:	f043 0210 	orr.w	r2, r3, #16
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b62:	f043 0201 	orr.w	r2, r3, #1
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f95c 	bl	8001e28 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	220c      	movs	r2, #12
 8001b76:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f003 0320 	and.w	r3, r3, #32
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d004      	beq.n	8001b8c <HAL_ADC_IRQHandler+0x198>
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	f003 0320 	and.w	r3, r3, #32
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10b      	bne.n	8001ba4 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 809f 	beq.w	8001cd6 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 8099 	beq.w	8001cd6 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ba8:	f003 0310 	and.w	r3, r3, #16
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d105      	bne.n	8001bbc <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff faf9 	bl	80011b8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001bc6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fab4 	bl	800113a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001bd2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a11      	ldr	r2, [pc, #68]	@ (8001c20 <HAL_ADC_IRQHandler+0x22c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d002      	beq.n	8001be4 <HAL_ADC_IRQHandler+0x1f0>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	e000      	b.n	8001be6 <HAL_ADC_IRQHandler+0x1f2>
 8001be4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c24 <HAL_ADC_IRQHandler+0x230>)
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d008      	beq.n	8001c00 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d005      	beq.n	8001c00 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	2b06      	cmp	r3, #6
 8001bf8:	d002      	beq.n	8001c00 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	2b07      	cmp	r3, #7
 8001bfe:	d104      	bne.n	8001c0a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	623b      	str	r3, [r7, #32]
 8001c08:	e013      	b.n	8001c32 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a04      	ldr	r2, [pc, #16]	@ (8001c20 <HAL_ADC_IRQHandler+0x22c>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d009      	beq.n	8001c28 <HAL_ADC_IRQHandler+0x234>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	e007      	b.n	8001c2a <HAL_ADC_IRQHandler+0x236>
 8001c1a:	bf00      	nop
 8001c1c:	50040300 	.word	0x50040300
 8001c20:	50040100 	.word	0x50040100
 8001c24:	50040000 	.word	0x50040000
 8001c28:	4b7d      	ldr	r3, [pc, #500]	@ (8001e20 <HAL_ADC_IRQHandler+0x42c>)
 8001c2a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d047      	beq.n	8001cc8 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d007      	beq.n	8001c52 <HAL_ADC_IRQHandler+0x25e>
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d03f      	beq.n	8001cc8 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d13a      	bne.n	8001cc8 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c5c:	2b40      	cmp	r3, #64	@ 0x40
 8001c5e:	d133      	bne.n	8001cc8 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d12e      	bne.n	8001cc8 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fbbc 	bl	80013ec <LL_ADC_INJ_IsConversionOngoing>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d11a      	bne.n	8001cb0 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001c88:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c8e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d112      	bne.n	8001cc8 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca6:	f043 0201 	orr.w	r2, r3, #1
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	655a      	str	r2, [r3, #84]	@ 0x54
 8001cae:	e00b      	b.n	8001cc8 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cb4:	f043 0210 	orr.w	r2, r3, #16
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc0:	f043 0201 	orr.w	r2, r3, #1
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 fd69 	bl	80027a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2260      	movs	r2, #96	@ 0x60
 8001cd4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d011      	beq.n	8001d04 <HAL_ADC_IRQHandler+0x310>
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00c      	beq.n	8001d04 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f8a0 	bl	8001e3c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2280      	movs	r2, #128	@ 0x80
 8001d02:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d012      	beq.n	8001d34 <HAL_ADC_IRQHandler+0x340>
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00d      	beq.n	8001d34 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d1c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 fd4f 	bl	80027c8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d32:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d012      	beq.n	8001d64 <HAL_ADC_IRQHandler+0x370>
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00d      	beq.n	8001d64 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d4c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 fd41 	bl	80027dc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d62:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f003 0310 	and.w	r3, r3, #16
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d036      	beq.n	8001ddc <HAL_ADC_IRQHandler+0x3e8>
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	f003 0310 	and.w	r3, r3, #16
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d031      	beq.n	8001ddc <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d102      	bne.n	8001d86 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001d80:	2301      	movs	r3, #1
 8001d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d84:	e014      	b.n	8001db0 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d008      	beq.n	8001d9e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001d8c:	4825      	ldr	r0, [pc, #148]	@ (8001e24 <HAL_ADC_IRQHandler+0x430>)
 8001d8e:	f7ff fa83 	bl	8001298 <LL_ADC_GetMultiDMATransfer>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00b      	beq.n	8001db0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d9c:	e008      	b.n	8001db0 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001dac:	2301      	movs	r3, #1
 8001dae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d10e      	bne.n	8001dd4 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dba:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc6:	f043 0202 	orr.w	r2, r3, #2
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f83e 	bl	8001e50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2210      	movs	r2, #16
 8001dda:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d018      	beq.n	8001e18 <HAL_ADC_IRQHandler+0x424>
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d013      	beq.n	8001e18 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df4:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e00:	f043 0208 	orr.w	r2, r3, #8
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e10:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 fcce 	bl	80027b4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001e18:	bf00      	nop
 8001e1a:	3728      	adds	r7, #40	@ 0x28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	50040000 	.word	0x50040000
 8001e24:	50040300 	.word	0x50040300

08001e28 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b0b6      	sub	sp, #216	@ 0xd8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d101      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x22>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e3c9      	b.n	800261a <HAL_ADC_ConfigChannel+0x7b6>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fa97 	bl	80013c6 <LL_ADC_REG_IsConversionOngoing>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f040 83aa 	bne.w	80025f4 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b05      	cmp	r3, #5
 8001eae:	d824      	bhi.n	8001efa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	3b02      	subs	r3, #2
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	d81b      	bhi.n	8001ef2 <HAL_ADC_ConfigChannel+0x8e>
 8001eba:	a201      	add	r2, pc, #4	@ (adr r2, 8001ec0 <HAL_ADC_ConfigChannel+0x5c>)
 8001ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec0:	08001ed1 	.word	0x08001ed1
 8001ec4:	08001ed9 	.word	0x08001ed9
 8001ec8:	08001ee1 	.word	0x08001ee1
 8001ecc:	08001ee9 	.word	0x08001ee9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001ed0:	230c      	movs	r3, #12
 8001ed2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001ed6:	e010      	b.n	8001efa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001ed8:	2312      	movs	r3, #18
 8001eda:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001ede:	e00c      	b.n	8001efa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001ee0:	2318      	movs	r3, #24
 8001ee2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001ee6:	e008      	b.n	8001efa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001ee8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001eec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001ef0:	e003      	b.n	8001efa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001ef2:	2306      	movs	r3, #6
 8001ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001ef8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001f08:	f7ff f92a 	bl	8001160 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fa58 	bl	80013c6 <LL_ADC_REG_IsConversionOngoing>
 8001f16:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff fa64 	bl	80013ec <LL_ADC_INJ_IsConversionOngoing>
 8001f24:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f040 81a4 	bne.w	800227a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f040 819f 	bne.w	800227a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6818      	ldr	r0, [r3, #0]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	6819      	ldr	r1, [r3, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	f7ff f948 	bl	80011de <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	695a      	ldr	r2, [r3, #20]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	08db      	lsrs	r3, r3, #3
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	2b04      	cmp	r3, #4
 8001f6e:	d00a      	beq.n	8001f86 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	6919      	ldr	r1, [r3, #16]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f80:	f7ff f886 	bl	8001090 <LL_ADC_SetOffset>
 8001f84:	e179      	b.n	800227a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff f8a3 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001f92:	4603      	mov	r3, r0
 8001f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10a      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x14e>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff f898 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	0e9b      	lsrs	r3, r3, #26
 8001fac:	f003 021f 	and.w	r2, r3, #31
 8001fb0:	e01e      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x18c>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff f88d 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001fc8:	fa93 f3a3 	rbit	r3, r3
 8001fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001fd4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001fe0:	2320      	movs	r3, #32
 8001fe2:	e004      	b.n	8001fee <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001fe4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001fe8:	fab3 f383 	clz	r3, r3
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d105      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x1a4>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	0e9b      	lsrs	r3, r3, #26
 8002002:	f003 031f 	and.w	r3, r3, #31
 8002006:	e018      	b.n	800203a <HAL_ADC_ConfigChannel+0x1d6>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002010:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002014:	fa93 f3a3 	rbit	r3, r3
 8002018:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800201c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002020:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002024:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800202c:	2320      	movs	r3, #32
 800202e:	e004      	b.n	800203a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002030:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002034:	fab3 f383 	clz	r3, r3
 8002038:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800203a:	429a      	cmp	r2, r3
 800203c:	d106      	bne.n	800204c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2200      	movs	r2, #0
 8002044:	2100      	movs	r1, #0
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff f85c 	bl	8001104 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2101      	movs	r1, #1
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff f840 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8002058:	4603      	mov	r3, r0
 800205a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10a      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x214>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2101      	movs	r1, #1
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff f835 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 800206e:	4603      	mov	r3, r0
 8002070:	0e9b      	lsrs	r3, r3, #26
 8002072:	f003 021f 	and.w	r2, r3, #31
 8002076:	e01e      	b.n	80020b6 <HAL_ADC_ConfigChannel+0x252>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2101      	movs	r1, #1
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff f82a 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8002084:	4603      	mov	r3, r0
 8002086:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800208e:	fa93 f3a3 	rbit	r3, r3
 8002092:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002096:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800209a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800209e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80020a6:	2320      	movs	r3, #32
 80020a8:	e004      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80020aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80020ae:	fab3 f383 	clz	r3, r3
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d105      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x26a>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	0e9b      	lsrs	r3, r3, #26
 80020c8:	f003 031f 	and.w	r3, r3, #31
 80020cc:	e018      	b.n	8002100 <HAL_ADC_ConfigChannel+0x29c>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80020da:	fa93 f3a3 	rbit	r3, r3
 80020de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80020e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80020e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80020ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80020f2:	2320      	movs	r3, #32
 80020f4:	e004      	b.n	8002100 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80020f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80020fa:	fab3 f383 	clz	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002100:	429a      	cmp	r2, r3
 8002102:	d106      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2200      	movs	r2, #0
 800210a:	2101      	movs	r1, #1
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe fff9 	bl	8001104 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2102      	movs	r1, #2
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe ffdd 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 800211e:	4603      	mov	r3, r0
 8002120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002124:	2b00      	cmp	r3, #0
 8002126:	d10a      	bne.n	800213e <HAL_ADC_ConfigChannel+0x2da>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2102      	movs	r1, #2
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe ffd2 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8002134:	4603      	mov	r3, r0
 8002136:	0e9b      	lsrs	r3, r3, #26
 8002138:	f003 021f 	and.w	r2, r3, #31
 800213c:	e01e      	b.n	800217c <HAL_ADC_ConfigChannel+0x318>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2102      	movs	r1, #2
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe ffc7 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 800214a:	4603      	mov	r3, r0
 800214c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002150:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002154:	fa93 f3a3 	rbit	r3, r3
 8002158:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800215c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002160:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002164:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800216c:	2320      	movs	r3, #32
 800216e:	e004      	b.n	800217a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002170:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002174:	fab3 f383 	clz	r3, r3
 8002178:	b2db      	uxtb	r3, r3
 800217a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002184:	2b00      	cmp	r3, #0
 8002186:	d105      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x330>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	0e9b      	lsrs	r3, r3, #26
 800218e:	f003 031f 	and.w	r3, r3, #31
 8002192:	e014      	b.n	80021be <HAL_ADC_ConfigChannel+0x35a>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800219c:	fa93 f3a3 	rbit	r3, r3
 80021a0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80021a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80021a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80021b0:	2320      	movs	r3, #32
 80021b2:	e004      	b.n	80021be <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80021b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021b8:	fab3 f383 	clz	r3, r3
 80021bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021be:	429a      	cmp	r2, r3
 80021c0:	d106      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2200      	movs	r2, #0
 80021c8:	2102      	movs	r1, #2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe ff9a 	bl	8001104 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2103      	movs	r1, #3
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe ff7e 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 80021dc:	4603      	mov	r3, r0
 80021de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10a      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x398>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2103      	movs	r1, #3
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe ff73 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 80021f2:	4603      	mov	r3, r0
 80021f4:	0e9b      	lsrs	r3, r3, #26
 80021f6:	f003 021f 	and.w	r2, r3, #31
 80021fa:	e017      	b.n	800222c <HAL_ADC_ConfigChannel+0x3c8>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2103      	movs	r1, #3
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe ff68 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8002208:	4603      	mov	r3, r0
 800220a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800220e:	fa93 f3a3 	rbit	r3, r3
 8002212:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002214:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002216:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002218:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800221e:	2320      	movs	r3, #32
 8002220:	e003      	b.n	800222a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002222:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002224:	fab3 f383 	clz	r3, r3
 8002228:	b2db      	uxtb	r3, r3
 800222a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002234:	2b00      	cmp	r3, #0
 8002236:	d105      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x3e0>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	0e9b      	lsrs	r3, r3, #26
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	e011      	b.n	8002268 <HAL_ADC_ConfigChannel+0x404>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800224c:	fa93 f3a3 	rbit	r3, r3
 8002250:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002252:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002254:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002256:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800225c:	2320      	movs	r3, #32
 800225e:	e003      	b.n	8002268 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002260:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002262:	fab3 f383 	clz	r3, r3
 8002266:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002268:	429a      	cmp	r2, r3
 800226a:	d106      	bne.n	800227a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2200      	movs	r2, #0
 8002272:	2103      	movs	r1, #3
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe ff45 	bl	8001104 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff f87a 	bl	8001378 <LL_ADC_IsEnabled>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	f040 8140 	bne.w	800250c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	6819      	ldr	r1, [r3, #0]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	461a      	mov	r2, r3
 800229a:	f7fe ffcb 	bl	8001234 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	4a8f      	ldr	r2, [pc, #572]	@ (80024e0 <HAL_ADC_ConfigChannel+0x67c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	f040 8131 	bne.w	800250c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10b      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x46e>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	0e9b      	lsrs	r3, r3, #26
 80022c0:	3301      	adds	r3, #1
 80022c2:	f003 031f 	and.w	r3, r3, #31
 80022c6:	2b09      	cmp	r3, #9
 80022c8:	bf94      	ite	ls
 80022ca:	2301      	movls	r3, #1
 80022cc:	2300      	movhi	r3, #0
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	e019      	b.n	8002306 <HAL_ADC_ConfigChannel+0x4a2>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022da:	fa93 f3a3 	rbit	r3, r3
 80022de:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80022e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80022e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80022ea:	2320      	movs	r3, #32
 80022ec:	e003      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80022ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022f0:	fab3 f383 	clz	r3, r3
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	3301      	adds	r3, #1
 80022f8:	f003 031f 	and.w	r3, r3, #31
 80022fc:	2b09      	cmp	r3, #9
 80022fe:	bf94      	ite	ls
 8002300:	2301      	movls	r3, #1
 8002302:	2300      	movhi	r3, #0
 8002304:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002306:	2b00      	cmp	r3, #0
 8002308:	d079      	beq.n	80023fe <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002312:	2b00      	cmp	r3, #0
 8002314:	d107      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x4c2>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	0e9b      	lsrs	r3, r3, #26
 800231c:	3301      	adds	r3, #1
 800231e:	069b      	lsls	r3, r3, #26
 8002320:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002324:	e015      	b.n	8002352 <HAL_ADC_ConfigChannel+0x4ee>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002334:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002336:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002338:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800233e:	2320      	movs	r3, #32
 8002340:	e003      	b.n	800234a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002342:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002344:	fab3 f383 	clz	r3, r3
 8002348:	b2db      	uxtb	r3, r3
 800234a:	3301      	adds	r3, #1
 800234c:	069b      	lsls	r3, r3, #26
 800234e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235a:	2b00      	cmp	r3, #0
 800235c:	d109      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x50e>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	0e9b      	lsrs	r3, r3, #26
 8002364:	3301      	adds	r3, #1
 8002366:	f003 031f 	and.w	r3, r3, #31
 800236a:	2101      	movs	r1, #1
 800236c:	fa01 f303 	lsl.w	r3, r1, r3
 8002370:	e017      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x53e>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002378:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002382:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800238a:	2320      	movs	r3, #32
 800238c:	e003      	b.n	8002396 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800238e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002390:	fab3 f383 	clz	r3, r3
 8002394:	b2db      	uxtb	r3, r3
 8002396:	3301      	adds	r3, #1
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	2101      	movs	r1, #1
 800239e:	fa01 f303 	lsl.w	r3, r1, r3
 80023a2:	ea42 0103 	orr.w	r1, r2, r3
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10a      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x564>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	0e9b      	lsrs	r3, r3, #26
 80023b8:	3301      	adds	r3, #1
 80023ba:	f003 021f 	and.w	r2, r3, #31
 80023be:	4613      	mov	r3, r2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	4413      	add	r3, r2
 80023c4:	051b      	lsls	r3, r3, #20
 80023c6:	e018      	b.n	80023fa <HAL_ADC_ConfigChannel+0x596>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023d0:	fa93 f3a3 	rbit	r3, r3
 80023d4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80023d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80023da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80023e0:	2320      	movs	r3, #32
 80023e2:	e003      	b.n	80023ec <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80023e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e6:	fab3 f383 	clz	r3, r3
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	3301      	adds	r3, #1
 80023ee:	f003 021f 	and.w	r2, r3, #31
 80023f2:	4613      	mov	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	4413      	add	r3, r2
 80023f8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023fa:	430b      	orrs	r3, r1
 80023fc:	e081      	b.n	8002502 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002406:	2b00      	cmp	r3, #0
 8002408:	d107      	bne.n	800241a <HAL_ADC_ConfigChannel+0x5b6>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	0e9b      	lsrs	r3, r3, #26
 8002410:	3301      	adds	r3, #1
 8002412:	069b      	lsls	r3, r3, #26
 8002414:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002418:	e015      	b.n	8002446 <HAL_ADC_ConfigChannel+0x5e2>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800242c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002432:	2320      	movs	r3, #32
 8002434:	e003      	b.n	800243e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	3301      	adds	r3, #1
 8002440:	069b      	lsls	r3, r3, #26
 8002442:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x602>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	0e9b      	lsrs	r3, r3, #26
 8002458:	3301      	adds	r3, #1
 800245a:	f003 031f 	and.w	r3, r3, #31
 800245e:	2101      	movs	r1, #1
 8002460:	fa01 f303 	lsl.w	r3, r1, r3
 8002464:	e017      	b.n	8002496 <HAL_ADC_ConfigChannel+0x632>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	fa93 f3a3 	rbit	r3, r3
 8002472:	61bb      	str	r3, [r7, #24]
  return result;
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800247e:	2320      	movs	r3, #32
 8002480:	e003      	b.n	800248a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	fab3 f383 	clz	r3, r3
 8002488:	b2db      	uxtb	r3, r3
 800248a:	3301      	adds	r3, #1
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	2101      	movs	r1, #1
 8002492:	fa01 f303 	lsl.w	r3, r1, r3
 8002496:	ea42 0103 	orr.w	r1, r2, r3
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10d      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x65e>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	0e9b      	lsrs	r3, r3, #26
 80024ac:	3301      	adds	r3, #1
 80024ae:	f003 021f 	and.w	r2, r3, #31
 80024b2:	4613      	mov	r3, r2
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	4413      	add	r3, r2
 80024b8:	3b1e      	subs	r3, #30
 80024ba:	051b      	lsls	r3, r3, #20
 80024bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024c0:	e01e      	b.n	8002500 <HAL_ADC_ConfigChannel+0x69c>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	fa93 f3a3 	rbit	r3, r3
 80024ce:	60fb      	str	r3, [r7, #12]
  return result;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d104      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80024da:	2320      	movs	r3, #32
 80024dc:	e006      	b.n	80024ec <HAL_ADC_ConfigChannel+0x688>
 80024de:	bf00      	nop
 80024e0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	fab3 f383 	clz	r3, r3
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	3301      	adds	r3, #1
 80024ee:	f003 021f 	and.w	r2, r3, #31
 80024f2:	4613      	mov	r3, r2
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	4413      	add	r3, r2
 80024f8:	3b1e      	subs	r3, #30
 80024fa:	051b      	lsls	r3, r3, #20
 80024fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002500:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002506:	4619      	mov	r1, r3
 8002508:	f7fe fe69 	bl	80011de <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4b44      	ldr	r3, [pc, #272]	@ (8002624 <HAL_ADC_ConfigChannel+0x7c0>)
 8002512:	4013      	ands	r3, r2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d07a      	beq.n	800260e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002518:	4843      	ldr	r0, [pc, #268]	@ (8002628 <HAL_ADC_ConfigChannel+0x7c4>)
 800251a:	f7fe fdab 	bl	8001074 <LL_ADC_GetCommonPathInternalCh>
 800251e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a41      	ldr	r2, [pc, #260]	@ (800262c <HAL_ADC_ConfigChannel+0x7c8>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d12c      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800252c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002530:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d126      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a3c      	ldr	r2, [pc, #240]	@ (8002630 <HAL_ADC_ConfigChannel+0x7cc>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d004      	beq.n	800254c <HAL_ADC_ConfigChannel+0x6e8>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a3b      	ldr	r2, [pc, #236]	@ (8002634 <HAL_ADC_ConfigChannel+0x7d0>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d15d      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800254c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002550:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002554:	4619      	mov	r1, r3
 8002556:	4834      	ldr	r0, [pc, #208]	@ (8002628 <HAL_ADC_ConfigChannel+0x7c4>)
 8002558:	f7fe fd79 	bl	800104e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800255c:	4b36      	ldr	r3, [pc, #216]	@ (8002638 <HAL_ADC_ConfigChannel+0x7d4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	099b      	lsrs	r3, r3, #6
 8002562:	4a36      	ldr	r2, [pc, #216]	@ (800263c <HAL_ADC_ConfigChannel+0x7d8>)
 8002564:	fba2 2303 	umull	r2, r3, r2, r3
 8002568:	099b      	lsrs	r3, r3, #6
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	4613      	mov	r3, r2
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	4413      	add	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002576:	e002      	b.n	800257e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	3b01      	subs	r3, #1
 800257c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f9      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002584:	e040      	b.n	8002608 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a2d      	ldr	r2, [pc, #180]	@ (8002640 <HAL_ADC_ConfigChannel+0x7dc>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d118      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002590:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002594:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d112      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a23      	ldr	r2, [pc, #140]	@ (8002630 <HAL_ADC_ConfigChannel+0x7cc>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d004      	beq.n	80025b0 <HAL_ADC_ConfigChannel+0x74c>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a22      	ldr	r2, [pc, #136]	@ (8002634 <HAL_ADC_ConfigChannel+0x7d0>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d12d      	bne.n	800260c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025b8:	4619      	mov	r1, r3
 80025ba:	481b      	ldr	r0, [pc, #108]	@ (8002628 <HAL_ADC_ConfigChannel+0x7c4>)
 80025bc:	f7fe fd47 	bl	800104e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025c0:	e024      	b.n	800260c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002644 <HAL_ADC_ConfigChannel+0x7e0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d120      	bne.n	800260e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d11a      	bne.n	800260e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a14      	ldr	r2, [pc, #80]	@ (8002630 <HAL_ADC_ConfigChannel+0x7cc>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d115      	bne.n	800260e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025ea:	4619      	mov	r1, r3
 80025ec:	480e      	ldr	r0, [pc, #56]	@ (8002628 <HAL_ADC_ConfigChannel+0x7c4>)
 80025ee:	f7fe fd2e 	bl	800104e <LL_ADC_SetCommonPathInternalCh>
 80025f2:	e00c      	b.n	800260e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f8:	f043 0220 	orr.w	r2, r3, #32
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002606:	e002      	b.n	800260e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002608:	bf00      	nop
 800260a:	e000      	b.n	800260e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800260c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002616:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800261a:	4618      	mov	r0, r3
 800261c:	37d8      	adds	r7, #216	@ 0xd8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	80080000 	.word	0x80080000
 8002628:	50040300 	.word	0x50040300
 800262c:	c7520000 	.word	0xc7520000
 8002630:	50040000 	.word	0x50040000
 8002634:	50040200 	.word	0x50040200
 8002638:	20000000 	.word	0x20000000
 800263c:	053e2d63 	.word	0x053e2d63
 8002640:	cb840000 	.word	0xcb840000
 8002644:	80000001 	.word	0x80000001

08002648 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002650:	2300      	movs	r3, #0
 8002652:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f7fe fe8d 	bl	8001378 <LL_ADC_IsEnabled>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d169      	bne.n	8002738 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	4b36      	ldr	r3, [pc, #216]	@ (8002744 <ADC_Enable+0xfc>)
 800266c:	4013      	ands	r3, r2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00d      	beq.n	800268e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002676:	f043 0210 	orr.w	r2, r3, #16
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002682:	f043 0201 	orr.w	r2, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e055      	b.n	800273a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe fe5c 	bl	8001350 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002698:	482b      	ldr	r0, [pc, #172]	@ (8002748 <ADC_Enable+0x100>)
 800269a:	f7fe fceb 	bl	8001074 <LL_ADC_GetCommonPathInternalCh>
 800269e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80026a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d013      	beq.n	80026d0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026a8:	4b28      	ldr	r3, [pc, #160]	@ (800274c <ADC_Enable+0x104>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	099b      	lsrs	r3, r3, #6
 80026ae:	4a28      	ldr	r2, [pc, #160]	@ (8002750 <ADC_Enable+0x108>)
 80026b0:	fba2 2303 	umull	r2, r3, r2, r3
 80026b4:	099b      	lsrs	r3, r3, #6
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	4613      	mov	r3, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80026c2:	e002      	b.n	80026ca <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f9      	bne.n	80026c4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80026d0:	f7fe fc7a 	bl	8000fc8 <HAL_GetTick>
 80026d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026d6:	e028      	b.n	800272a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fe fe4b 	bl	8001378 <LL_ADC_IsEnabled>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d104      	bne.n	80026f2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fe fe2f 	bl	8001350 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026f2:	f7fe fc69 	bl	8000fc8 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d914      	bls.n	800272a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b01      	cmp	r3, #1
 800270c:	d00d      	beq.n	800272a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002712:	f043 0210 	orr.w	r2, r3, #16
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271e:	f043 0201 	orr.w	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e007      	b.n	800273a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b01      	cmp	r3, #1
 8002736:	d1cf      	bne.n	80026d8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	8000003f 	.word	0x8000003f
 8002748:	50040300 	.word	0x50040300
 800274c:	20000000 	.word	0x20000000
 8002750:	053e2d63 	.word	0x053e2d63

08002754 <LL_ADC_IsEnabled>:
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <LL_ADC_IsEnabled+0x18>
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <LL_ADC_IsEnabled+0x1a>
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <LL_ADC_REG_IsConversionOngoing>:
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	2b04      	cmp	r3, #4
 800278c:	d101      	bne.n	8002792 <LL_ADC_REG_IsConversionOngoing+0x18>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002804:	b590      	push	{r4, r7, lr}
 8002806:	b09f      	sub	sp, #124	@ 0x7c
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800280e:	2300      	movs	r3, #0
 8002810:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800281a:	2b01      	cmp	r3, #1
 800281c:	d101      	bne.n	8002822 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800281e:	2302      	movs	r3, #2
 8002820:	e093      	b.n	800294a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800282a:	2300      	movs	r3, #0
 800282c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800282e:	2300      	movs	r3, #0
 8002830:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a47      	ldr	r2, [pc, #284]	@ (8002954 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d102      	bne.n	8002842 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800283c:	4b46      	ldr	r3, [pc, #280]	@ (8002958 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800283e:	60bb      	str	r3, [r7, #8]
 8002840:	e001      	b.n	8002846 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002842:	2300      	movs	r3, #0
 8002844:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10b      	bne.n	8002864 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002850:	f043 0220 	orr.w	r2, r3, #32
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e072      	b.n	800294a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff ff87 	bl	800277a <LL_ADC_REG_IsConversionOngoing>
 800286c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff ff81 	bl	800277a <LL_ADC_REG_IsConversionOngoing>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d154      	bne.n	8002928 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800287e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002880:	2b00      	cmp	r3, #0
 8002882:	d151      	bne.n	8002928 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002884:	4b35      	ldr	r3, [pc, #212]	@ (800295c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002886:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d02c      	beq.n	80028ea <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002890:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	6859      	ldr	r1, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028a2:	035b      	lsls	r3, r3, #13
 80028a4:	430b      	orrs	r3, r1
 80028a6:	431a      	orrs	r2, r3
 80028a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028ac:	4829      	ldr	r0, [pc, #164]	@ (8002954 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80028ae:	f7ff ff51 	bl	8002754 <LL_ADC_IsEnabled>
 80028b2:	4604      	mov	r4, r0
 80028b4:	4828      	ldr	r0, [pc, #160]	@ (8002958 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80028b6:	f7ff ff4d 	bl	8002754 <LL_ADC_IsEnabled>
 80028ba:	4603      	mov	r3, r0
 80028bc:	431c      	orrs	r4, r3
 80028be:	4828      	ldr	r0, [pc, #160]	@ (8002960 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80028c0:	f7ff ff48 	bl	8002754 <LL_ADC_IsEnabled>
 80028c4:	4603      	mov	r3, r0
 80028c6:	4323      	orrs	r3, r4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d137      	bne.n	800293c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80028cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80028d4:	f023 030f 	bic.w	r3, r3, #15
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	6811      	ldr	r1, [r2, #0]
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	6892      	ldr	r2, [r2, #8]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	431a      	orrs	r2, r3
 80028e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028e6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028e8:	e028      	b.n	800293c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80028ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028f4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028f6:	4817      	ldr	r0, [pc, #92]	@ (8002954 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80028f8:	f7ff ff2c 	bl	8002754 <LL_ADC_IsEnabled>
 80028fc:	4604      	mov	r4, r0
 80028fe:	4816      	ldr	r0, [pc, #88]	@ (8002958 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002900:	f7ff ff28 	bl	8002754 <LL_ADC_IsEnabled>
 8002904:	4603      	mov	r3, r0
 8002906:	431c      	orrs	r4, r3
 8002908:	4815      	ldr	r0, [pc, #84]	@ (8002960 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800290a:	f7ff ff23 	bl	8002754 <LL_ADC_IsEnabled>
 800290e:	4603      	mov	r3, r0
 8002910:	4323      	orrs	r3, r4
 8002912:	2b00      	cmp	r3, #0
 8002914:	d112      	bne.n	800293c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002916:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800291e:	f023 030f 	bic.w	r3, r3, #15
 8002922:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002924:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002926:	e009      	b.n	800293c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800292c:	f043 0220 	orr.w	r2, r3, #32
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800293a:	e000      	b.n	800293e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800293c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002946:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800294a:	4618      	mov	r0, r3
 800294c:	377c      	adds	r7, #124	@ 0x7c
 800294e:	46bd      	mov	sp, r7
 8002950:	bd90      	pop	{r4, r7, pc}
 8002952:	bf00      	nop
 8002954:	50040000 	.word	0x50040000
 8002958:	50040100 	.word	0x50040100
 800295c:	50040300 	.word	0x50040300
 8002960:	50040200 	.word	0x50040200

08002964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002974:	4b0c      	ldr	r3, [pc, #48]	@ (80029a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002980:	4013      	ands	r3, r2
 8002982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800298c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002996:	4a04      	ldr	r2, [pc, #16]	@ (80029a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	60d3      	str	r3, [r2, #12]
}
 800299c:	bf00      	nop
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029b0:	4b04      	ldr	r3, [pc, #16]	@ (80029c4 <__NVIC_GetPriorityGrouping+0x18>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	0a1b      	lsrs	r3, r3, #8
 80029b6:	f003 0307 	and.w	r3, r3, #7
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	db0b      	blt.n	80029f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	f003 021f 	and.w	r2, r3, #31
 80029e0:	4907      	ldr	r1, [pc, #28]	@ (8002a00 <__NVIC_EnableIRQ+0x38>)
 80029e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e6:	095b      	lsrs	r3, r3, #5
 80029e8:	2001      	movs	r0, #1
 80029ea:	fa00 f202 	lsl.w	r2, r0, r2
 80029ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	e000e100 	.word	0xe000e100

08002a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	6039      	str	r1, [r7, #0]
 8002a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	db0a      	blt.n	8002a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	490c      	ldr	r1, [pc, #48]	@ (8002a50 <__NVIC_SetPriority+0x4c>)
 8002a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a22:	0112      	lsls	r2, r2, #4
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	440b      	add	r3, r1
 8002a28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a2c:	e00a      	b.n	8002a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	4908      	ldr	r1, [pc, #32]	@ (8002a54 <__NVIC_SetPriority+0x50>)
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	3b04      	subs	r3, #4
 8002a3c:	0112      	lsls	r2, r2, #4
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	440b      	add	r3, r1
 8002a42:	761a      	strb	r2, [r3, #24]
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	e000e100 	.word	0xe000e100
 8002a54:	e000ed00 	.word	0xe000ed00

08002a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b089      	sub	sp, #36	@ 0x24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f1c3 0307 	rsb	r3, r3, #7
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	bf28      	it	cs
 8002a76:	2304      	movcs	r3, #4
 8002a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	2b06      	cmp	r3, #6
 8002a80:	d902      	bls.n	8002a88 <NVIC_EncodePriority+0x30>
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3b03      	subs	r3, #3
 8002a86:	e000      	b.n	8002a8a <NVIC_EncodePriority+0x32>
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43da      	mvns	r2, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	401a      	ands	r2, r3
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aaa:	43d9      	mvns	r1, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab0:	4313      	orrs	r3, r2
         );
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3724      	adds	r7, #36	@ 0x24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
	...

08002ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ad0:	d301      	bcc.n	8002ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e00f      	b.n	8002af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8002b00 <SysTick_Config+0x40>)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ade:	210f      	movs	r1, #15
 8002ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae4:	f7ff ff8e 	bl	8002a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ae8:	4b05      	ldr	r3, [pc, #20]	@ (8002b00 <SysTick_Config+0x40>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aee:	4b04      	ldr	r3, [pc, #16]	@ (8002b00 <SysTick_Config+0x40>)
 8002af0:	2207      	movs	r2, #7
 8002af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	e000e010 	.word	0xe000e010

08002b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7ff ff29 	bl	8002964 <__NVIC_SetPriorityGrouping>
}
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b086      	sub	sp, #24
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	4603      	mov	r3, r0
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	607a      	str	r2, [r7, #4]
 8002b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b2c:	f7ff ff3e 	bl	80029ac <__NVIC_GetPriorityGrouping>
 8002b30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	68b9      	ldr	r1, [r7, #8]
 8002b36:	6978      	ldr	r0, [r7, #20]
 8002b38:	f7ff ff8e 	bl	8002a58 <NVIC_EncodePriority>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b42:	4611      	mov	r1, r2
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff ff5d 	bl	8002a04 <__NVIC_SetPriority>
}
 8002b4a:	bf00      	nop
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	4603      	mov	r3, r0
 8002b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff ff31 	bl	80029c8 <__NVIC_EnableIRQ>
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7ff ffa2 	bl	8002ac0 <SysTick_Config>
 8002b7c:	4603      	mov	r3, r0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b085      	sub	sp, #20
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d008      	beq.n	8002bb0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2204      	movs	r2, #4
 8002ba2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e022      	b.n	8002bf6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 020e 	bic.w	r2, r2, #14
 8002bbe:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0201 	bic.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd4:	f003 021c 	and.w	r2, r3, #28
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bdc:	2101      	movs	r1, #1
 8002bde:	fa01 f202 	lsl.w	r2, r1, r2
 8002be2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b084      	sub	sp, #16
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d005      	beq.n	8002c26 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	73fb      	strb	r3, [r7, #15]
 8002c24:	e029      	b.n	8002c7a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 020e 	bic.w	r2, r2, #14
 8002c34:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0201 	bic.w	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4a:	f003 021c 	and.w	r2, r3, #28
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c52:	2101      	movs	r1, #1
 8002c54:	fa01 f202 	lsl.w	r2, r1, r2
 8002c58:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	4798      	blx	r3
    }
  }
  return status;
 8002c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c92:	e17f      	b.n	8002f94 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	2101      	movs	r1, #1
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 8171 	beq.w	8002f8e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 0303 	and.w	r3, r3, #3
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d005      	beq.n	8002cc4 <HAL_GPIO_Init+0x40>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d130      	bne.n	8002d26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	2203      	movs	r2, #3
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43db      	mvns	r3, r3
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	4013      	ands	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	091b      	lsrs	r3, r3, #4
 8002d10:	f003 0201 	and.w	r2, r3, #1
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d118      	bne.n	8002d64 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002d38:	2201      	movs	r2, #1
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4013      	ands	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	08db      	lsrs	r3, r3, #3
 8002d4e:	f003 0201 	and.w	r2, r3, #1
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	2b03      	cmp	r3, #3
 8002d6e:	d017      	beq.n	8002da0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4013      	ands	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d123      	bne.n	8002df4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	08da      	lsrs	r2, r3, #3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3208      	adds	r2, #8
 8002db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002db8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	220f      	movs	r2, #15
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	08da      	lsrs	r2, r3, #3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	3208      	adds	r2, #8
 8002dee:	6939      	ldr	r1, [r7, #16]
 8002df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	2203      	movs	r2, #3
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f003 0203 	and.w	r2, r3, #3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 80ac 	beq.w	8002f8e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e36:	4b5f      	ldr	r3, [pc, #380]	@ (8002fb4 <HAL_GPIO_Init+0x330>)
 8002e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e3a:	4a5e      	ldr	r2, [pc, #376]	@ (8002fb4 <HAL_GPIO_Init+0x330>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e42:	4b5c      	ldr	r3, [pc, #368]	@ (8002fb4 <HAL_GPIO_Init+0x330>)
 8002e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	60bb      	str	r3, [r7, #8]
 8002e4c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e4e:	4a5a      	ldr	r2, [pc, #360]	@ (8002fb8 <HAL_GPIO_Init+0x334>)
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	089b      	lsrs	r3, r3, #2
 8002e54:	3302      	adds	r3, #2
 8002e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	220f      	movs	r2, #15
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e78:	d025      	beq.n	8002ec6 <HAL_GPIO_Init+0x242>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a4f      	ldr	r2, [pc, #316]	@ (8002fbc <HAL_GPIO_Init+0x338>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d01f      	beq.n	8002ec2 <HAL_GPIO_Init+0x23e>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a4e      	ldr	r2, [pc, #312]	@ (8002fc0 <HAL_GPIO_Init+0x33c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d019      	beq.n	8002ebe <HAL_GPIO_Init+0x23a>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a4d      	ldr	r2, [pc, #308]	@ (8002fc4 <HAL_GPIO_Init+0x340>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d013      	beq.n	8002eba <HAL_GPIO_Init+0x236>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a4c      	ldr	r2, [pc, #304]	@ (8002fc8 <HAL_GPIO_Init+0x344>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d00d      	beq.n	8002eb6 <HAL_GPIO_Init+0x232>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a4b      	ldr	r2, [pc, #300]	@ (8002fcc <HAL_GPIO_Init+0x348>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d007      	beq.n	8002eb2 <HAL_GPIO_Init+0x22e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a4a      	ldr	r2, [pc, #296]	@ (8002fd0 <HAL_GPIO_Init+0x34c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d101      	bne.n	8002eae <HAL_GPIO_Init+0x22a>
 8002eaa:	2306      	movs	r3, #6
 8002eac:	e00c      	b.n	8002ec8 <HAL_GPIO_Init+0x244>
 8002eae:	2307      	movs	r3, #7
 8002eb0:	e00a      	b.n	8002ec8 <HAL_GPIO_Init+0x244>
 8002eb2:	2305      	movs	r3, #5
 8002eb4:	e008      	b.n	8002ec8 <HAL_GPIO_Init+0x244>
 8002eb6:	2304      	movs	r3, #4
 8002eb8:	e006      	b.n	8002ec8 <HAL_GPIO_Init+0x244>
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e004      	b.n	8002ec8 <HAL_GPIO_Init+0x244>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e002      	b.n	8002ec8 <HAL_GPIO_Init+0x244>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e000      	b.n	8002ec8 <HAL_GPIO_Init+0x244>
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	f002 0203 	and.w	r2, r2, #3
 8002ece:	0092      	lsls	r2, r2, #2
 8002ed0:	4093      	lsls	r3, r2
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ed8:	4937      	ldr	r1, [pc, #220]	@ (8002fb8 <HAL_GPIO_Init+0x334>)
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	089b      	lsrs	r3, r3, #2
 8002ede:	3302      	adds	r3, #2
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ee6:	4b3b      	ldr	r3, [pc, #236]	@ (8002fd4 <HAL_GPIO_Init+0x350>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f0a:	4a32      	ldr	r2, [pc, #200]	@ (8002fd4 <HAL_GPIO_Init+0x350>)
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f10:	4b30      	ldr	r3, [pc, #192]	@ (8002fd4 <HAL_GPIO_Init+0x350>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f34:	4a27      	ldr	r2, [pc, #156]	@ (8002fd4 <HAL_GPIO_Init+0x350>)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f3a:	4b26      	ldr	r3, [pc, #152]	@ (8002fd4 <HAL_GPIO_Init+0x350>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	43db      	mvns	r3, r3
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	4013      	ands	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f5e:	4a1d      	ldr	r2, [pc, #116]	@ (8002fd4 <HAL_GPIO_Init+0x350>)
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002f64:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd4 <HAL_GPIO_Init+0x350>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4013      	ands	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f88:	4a12      	ldr	r2, [pc, #72]	@ (8002fd4 <HAL_GPIO_Init+0x350>)
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	3301      	adds	r3, #1
 8002f92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f47f ae78 	bne.w	8002c94 <HAL_GPIO_Init+0x10>
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	bf00      	nop
 8002fa8:	371c      	adds	r7, #28
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	40010000 	.word	0x40010000
 8002fbc:	48000400 	.word	0x48000400
 8002fc0:	48000800 	.word	0x48000800
 8002fc4:	48000c00 	.word	0x48000c00
 8002fc8:	48001000 	.word	0x48001000
 8002fcc:	48001400 	.word	0x48001400
 8002fd0:	48001800 	.word	0x48001800
 8002fd4:	40010400 	.word	0x40010400

08002fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	807b      	strh	r3, [r7, #2]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fe8:	787b      	ldrb	r3, [r7, #1]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fee:	887a      	ldrh	r2, [r7, #2]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ff4:	e002      	b.n	8002ffc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ff6:	887a      	ldrh	r2, [r7, #2]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	4603      	mov	r3, r0
 8003010:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003012:	4b08      	ldr	r3, [pc, #32]	@ (8003034 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003014:	695a      	ldr	r2, [r3, #20]
 8003016:	88fb      	ldrh	r3, [r7, #6]
 8003018:	4013      	ands	r3, r2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d006      	beq.n	800302c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800301e:	4a05      	ldr	r2, [pc, #20]	@ (8003034 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003020:	88fb      	ldrh	r3, [r7, #6]
 8003022:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003024:	88fb      	ldrh	r3, [r7, #6]
 8003026:	4618      	mov	r0, r3
 8003028:	f000 f806 	bl	8003038 <HAL_GPIO_EXTI_Callback>
  }
}
 800302c:	bf00      	nop
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40010400 	.word	0x40010400

08003038 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
	...

08003050 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003054:	4b04      	ldr	r3, [pc, #16]	@ (8003068 <HAL_PWREx_GetVoltageRange+0x18>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800305c:	4618      	mov	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	40007000 	.word	0x40007000

0800306c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800307a:	d130      	bne.n	80030de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800307c:	4b23      	ldr	r3, [pc, #140]	@ (800310c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003084:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003088:	d038      	beq.n	80030fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800308a:	4b20      	ldr	r3, [pc, #128]	@ (800310c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003092:	4a1e      	ldr	r2, [pc, #120]	@ (800310c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003094:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003098:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800309a:	4b1d      	ldr	r3, [pc, #116]	@ (8003110 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2232      	movs	r2, #50	@ 0x32
 80030a0:	fb02 f303 	mul.w	r3, r2, r3
 80030a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003114 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80030a6:	fba2 2303 	umull	r2, r3, r2, r3
 80030aa:	0c9b      	lsrs	r3, r3, #18
 80030ac:	3301      	adds	r3, #1
 80030ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030b0:	e002      	b.n	80030b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	3b01      	subs	r3, #1
 80030b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030b8:	4b14      	ldr	r3, [pc, #80]	@ (800310c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030c4:	d102      	bne.n	80030cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f2      	bne.n	80030b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030cc:	4b0f      	ldr	r3, [pc, #60]	@ (800310c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030d8:	d110      	bne.n	80030fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e00f      	b.n	80030fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80030de:	4b0b      	ldr	r3, [pc, #44]	@ (800310c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80030e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ea:	d007      	beq.n	80030fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030ec:	4b07      	ldr	r3, [pc, #28]	@ (800310c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030f4:	4a05      	ldr	r2, [pc, #20]	@ (800310c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40007000 	.word	0x40007000
 8003110:	20000000 	.word	0x20000000
 8003114:	431bde83 	.word	0x431bde83

08003118 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e3ca      	b.n	80038c0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800312a:	4b97      	ldr	r3, [pc, #604]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 030c 	and.w	r3, r3, #12
 8003132:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003134:	4b94      	ldr	r3, [pc, #592]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f003 0303 	and.w	r3, r3, #3
 800313c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0310 	and.w	r3, r3, #16
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 80e4 	beq.w	8003314 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d007      	beq.n	8003162 <HAL_RCC_OscConfig+0x4a>
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	2b0c      	cmp	r3, #12
 8003156:	f040 808b 	bne.w	8003270 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2b01      	cmp	r3, #1
 800315e:	f040 8087 	bne.w	8003270 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003162:	4b89      	ldr	r3, [pc, #548]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d005      	beq.n	800317a <HAL_RCC_OscConfig+0x62>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e3a2      	b.n	80038c0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1a      	ldr	r2, [r3, #32]
 800317e:	4b82      	ldr	r3, [pc, #520]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b00      	cmp	r3, #0
 8003188:	d004      	beq.n	8003194 <HAL_RCC_OscConfig+0x7c>
 800318a:	4b7f      	ldr	r3, [pc, #508]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003192:	e005      	b.n	80031a0 <HAL_RCC_OscConfig+0x88>
 8003194:	4b7c      	ldr	r3, [pc, #496]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 8003196:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800319a:	091b      	lsrs	r3, r3, #4
 800319c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d223      	bcs.n	80031ec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 fd55 	bl	8003c58 <RCC_SetFlashLatencyFromMSIRange>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e383      	b.n	80038c0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031b8:	4b73      	ldr	r3, [pc, #460]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a72      	ldr	r2, [pc, #456]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 80031be:	f043 0308 	orr.w	r3, r3, #8
 80031c2:	6013      	str	r3, [r2, #0]
 80031c4:	4b70      	ldr	r3, [pc, #448]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	496d      	ldr	r1, [pc, #436]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031d6:	4b6c      	ldr	r3, [pc, #432]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	021b      	lsls	r3, r3, #8
 80031e4:	4968      	ldr	r1, [pc, #416]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	604b      	str	r3, [r1, #4]
 80031ea:	e025      	b.n	8003238 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031ec:	4b66      	ldr	r3, [pc, #408]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a65      	ldr	r2, [pc, #404]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 80031f2:	f043 0308 	orr.w	r3, r3, #8
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	4b63      	ldr	r3, [pc, #396]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	4960      	ldr	r1, [pc, #384]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 8003206:	4313      	orrs	r3, r2
 8003208:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800320a:	4b5f      	ldr	r3, [pc, #380]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	021b      	lsls	r3, r3, #8
 8003218:	495b      	ldr	r1, [pc, #364]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 800321a:	4313      	orrs	r3, r2
 800321c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d109      	bne.n	8003238 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	4618      	mov	r0, r3
 800322a:	f000 fd15 	bl	8003c58 <RCC_SetFlashLatencyFromMSIRange>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e343      	b.n	80038c0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003238:	f000 fc4a 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 800323c:	4602      	mov	r2, r0
 800323e:	4b52      	ldr	r3, [pc, #328]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	091b      	lsrs	r3, r3, #4
 8003244:	f003 030f 	and.w	r3, r3, #15
 8003248:	4950      	ldr	r1, [pc, #320]	@ (800338c <HAL_RCC_OscConfig+0x274>)
 800324a:	5ccb      	ldrb	r3, [r1, r3]
 800324c:	f003 031f 	and.w	r3, r3, #31
 8003250:	fa22 f303 	lsr.w	r3, r2, r3
 8003254:	4a4e      	ldr	r2, [pc, #312]	@ (8003390 <HAL_RCC_OscConfig+0x278>)
 8003256:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003258:	4b4e      	ldr	r3, [pc, #312]	@ (8003394 <HAL_RCC_OscConfig+0x27c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f7fd fe63 	bl	8000f28 <HAL_InitTick>
 8003262:	4603      	mov	r3, r0
 8003264:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003266:	7bfb      	ldrb	r3, [r7, #15]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d052      	beq.n	8003312 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800326c:	7bfb      	ldrb	r3, [r7, #15]
 800326e:	e327      	b.n	80038c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d032      	beq.n	80032de <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003278:	4b43      	ldr	r3, [pc, #268]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a42      	ldr	r2, [pc, #264]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 800327e:	f043 0301 	orr.w	r3, r3, #1
 8003282:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003284:	f7fd fea0 	bl	8000fc8 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800328c:	f7fd fe9c 	bl	8000fc8 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e310      	b.n	80038c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800329e:	4b3a      	ldr	r3, [pc, #232]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032aa:	4b37      	ldr	r3, [pc, #220]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a36      	ldr	r2, [pc, #216]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 80032b0:	f043 0308 	orr.w	r3, r3, #8
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	4b34      	ldr	r3, [pc, #208]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	4931      	ldr	r1, [pc, #196]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032c8:	4b2f      	ldr	r3, [pc, #188]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	021b      	lsls	r3, r3, #8
 80032d6:	492c      	ldr	r1, [pc, #176]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	604b      	str	r3, [r1, #4]
 80032dc:	e01a      	b.n	8003314 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032de:	4b2a      	ldr	r3, [pc, #168]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a29      	ldr	r2, [pc, #164]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 80032e4:	f023 0301 	bic.w	r3, r3, #1
 80032e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032ea:	f7fd fe6d 	bl	8000fc8 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032f2:	f7fd fe69 	bl	8000fc8 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e2dd      	b.n	80038c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003304:	4b20      	ldr	r3, [pc, #128]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f0      	bne.n	80032f2 <HAL_RCC_OscConfig+0x1da>
 8003310:	e000      	b.n	8003314 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003312:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d074      	beq.n	800340a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	2b08      	cmp	r3, #8
 8003324:	d005      	beq.n	8003332 <HAL_RCC_OscConfig+0x21a>
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	2b0c      	cmp	r3, #12
 800332a:	d10e      	bne.n	800334a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	2b03      	cmp	r3, #3
 8003330:	d10b      	bne.n	800334a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003332:	4b15      	ldr	r3, [pc, #84]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d064      	beq.n	8003408 <HAL_RCC_OscConfig+0x2f0>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d160      	bne.n	8003408 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e2ba      	b.n	80038c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003352:	d106      	bne.n	8003362 <HAL_RCC_OscConfig+0x24a>
 8003354:	4b0c      	ldr	r3, [pc, #48]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a0b      	ldr	r2, [pc, #44]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 800335a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	e026      	b.n	80033b0 <HAL_RCC_OscConfig+0x298>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800336a:	d115      	bne.n	8003398 <HAL_RCC_OscConfig+0x280>
 800336c:	4b06      	ldr	r3, [pc, #24]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a05      	ldr	r2, [pc, #20]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 8003372:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	4b03      	ldr	r3, [pc, #12]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a02      	ldr	r2, [pc, #8]	@ (8003388 <HAL_RCC_OscConfig+0x270>)
 800337e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003382:	6013      	str	r3, [r2, #0]
 8003384:	e014      	b.n	80033b0 <HAL_RCC_OscConfig+0x298>
 8003386:	bf00      	nop
 8003388:	40021000 	.word	0x40021000
 800338c:	08006240 	.word	0x08006240
 8003390:	20000000 	.word	0x20000000
 8003394:	20000004 	.word	0x20000004
 8003398:	4ba0      	ldr	r3, [pc, #640]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a9f      	ldr	r2, [pc, #636]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 800339e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	4b9d      	ldr	r3, [pc, #628]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a9c      	ldr	r2, [pc, #624]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 80033aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d013      	beq.n	80033e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7fd fe06 	bl	8000fc8 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c0:	f7fd fe02 	bl	8000fc8 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b64      	cmp	r3, #100	@ 0x64
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e276      	b.n	80038c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033d2:	4b92      	ldr	r3, [pc, #584]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0x2a8>
 80033de:	e014      	b.n	800340a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e0:	f7fd fdf2 	bl	8000fc8 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e8:	f7fd fdee 	bl	8000fc8 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b64      	cmp	r3, #100	@ 0x64
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e262      	b.n	80038c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033fa:	4b88      	ldr	r3, [pc, #544]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f0      	bne.n	80033e8 <HAL_RCC_OscConfig+0x2d0>
 8003406:	e000      	b.n	800340a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d060      	beq.n	80034d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	2b04      	cmp	r3, #4
 800341a:	d005      	beq.n	8003428 <HAL_RCC_OscConfig+0x310>
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	2b0c      	cmp	r3, #12
 8003420:	d119      	bne.n	8003456 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2b02      	cmp	r3, #2
 8003426:	d116      	bne.n	8003456 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003428:	4b7c      	ldr	r3, [pc, #496]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <HAL_RCC_OscConfig+0x328>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e23f      	b.n	80038c0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003440:	4b76      	ldr	r3, [pc, #472]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	061b      	lsls	r3, r3, #24
 800344e:	4973      	ldr	r1, [pc, #460]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 8003450:	4313      	orrs	r3, r2
 8003452:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003454:	e040      	b.n	80034d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d023      	beq.n	80034a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800345e:	4b6f      	ldr	r3, [pc, #444]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a6e      	ldr	r2, [pc, #440]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 8003464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346a:	f7fd fdad 	bl	8000fc8 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003472:	f7fd fda9 	bl	8000fc8 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e21d      	b.n	80038c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003484:	4b65      	ldr	r3, [pc, #404]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0f0      	beq.n	8003472 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003490:	4b62      	ldr	r3, [pc, #392]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	061b      	lsls	r3, r3, #24
 800349e:	495f      	ldr	r1, [pc, #380]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	604b      	str	r3, [r1, #4]
 80034a4:	e018      	b.n	80034d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034a6:	4b5d      	ldr	r3, [pc, #372]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a5c      	ldr	r2, [pc, #368]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 80034ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b2:	f7fd fd89 	bl	8000fc8 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ba:	f7fd fd85 	bl	8000fc8 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e1f9      	b.n	80038c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034cc:	4b53      	ldr	r3, [pc, #332]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1f0      	bne.n	80034ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0308 	and.w	r3, r3, #8
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d03c      	beq.n	800355e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d01c      	beq.n	8003526 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ec:	4b4b      	ldr	r3, [pc, #300]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 80034ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034f2:	4a4a      	ldr	r2, [pc, #296]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 80034f4:	f043 0301 	orr.w	r3, r3, #1
 80034f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fc:	f7fd fd64 	bl	8000fc8 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003504:	f7fd fd60 	bl	8000fc8 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e1d4      	b.n	80038c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003516:	4b41      	ldr	r3, [pc, #260]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 8003518:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0ef      	beq.n	8003504 <HAL_RCC_OscConfig+0x3ec>
 8003524:	e01b      	b.n	800355e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003526:	4b3d      	ldr	r3, [pc, #244]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 8003528:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800352c:	4a3b      	ldr	r2, [pc, #236]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 800352e:	f023 0301 	bic.w	r3, r3, #1
 8003532:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003536:	f7fd fd47 	bl	8000fc8 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800353e:	f7fd fd43 	bl	8000fc8 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e1b7      	b.n	80038c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003550:	4b32      	ldr	r3, [pc, #200]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 8003552:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1ef      	bne.n	800353e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 80a6 	beq.w	80036b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800356c:	2300      	movs	r3, #0
 800356e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003570:	4b2a      	ldr	r3, [pc, #168]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 8003572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10d      	bne.n	8003598 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800357c:	4b27      	ldr	r3, [pc, #156]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 800357e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003580:	4a26      	ldr	r2, [pc, #152]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 8003582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003586:	6593      	str	r3, [r2, #88]	@ 0x58
 8003588:	4b24      	ldr	r3, [pc, #144]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 800358a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800358c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003590:	60bb      	str	r3, [r7, #8]
 8003592:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003594:	2301      	movs	r3, #1
 8003596:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003598:	4b21      	ldr	r3, [pc, #132]	@ (8003620 <HAL_RCC_OscConfig+0x508>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d118      	bne.n	80035d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003620 <HAL_RCC_OscConfig+0x508>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003620 <HAL_RCC_OscConfig+0x508>)
 80035aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035b0:	f7fd fd0a 	bl	8000fc8 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b8:	f7fd fd06 	bl	8000fc8 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e17a      	b.n	80038c0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ca:	4b15      	ldr	r3, [pc, #84]	@ (8003620 <HAL_RCC_OscConfig+0x508>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f0      	beq.n	80035b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d108      	bne.n	80035f0 <HAL_RCC_OscConfig+0x4d8>
 80035de:	4b0f      	ldr	r3, [pc, #60]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 80035e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035e4:	4a0d      	ldr	r2, [pc, #52]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 80035e6:	f043 0301 	orr.w	r3, r3, #1
 80035ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035ee:	e029      	b.n	8003644 <HAL_RCC_OscConfig+0x52c>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	2b05      	cmp	r3, #5
 80035f6:	d115      	bne.n	8003624 <HAL_RCC_OscConfig+0x50c>
 80035f8:	4b08      	ldr	r3, [pc, #32]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035fe:	4a07      	ldr	r2, [pc, #28]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 8003600:	f043 0304 	orr.w	r3, r3, #4
 8003604:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003608:	4b04      	ldr	r3, [pc, #16]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800360e:	4a03      	ldr	r2, [pc, #12]	@ (800361c <HAL_RCC_OscConfig+0x504>)
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003618:	e014      	b.n	8003644 <HAL_RCC_OscConfig+0x52c>
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000
 8003620:	40007000 	.word	0x40007000
 8003624:	4b9c      	ldr	r3, [pc, #624]	@ (8003898 <HAL_RCC_OscConfig+0x780>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800362a:	4a9b      	ldr	r2, [pc, #620]	@ (8003898 <HAL_RCC_OscConfig+0x780>)
 800362c:	f023 0301 	bic.w	r3, r3, #1
 8003630:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003634:	4b98      	ldr	r3, [pc, #608]	@ (8003898 <HAL_RCC_OscConfig+0x780>)
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800363a:	4a97      	ldr	r2, [pc, #604]	@ (8003898 <HAL_RCC_OscConfig+0x780>)
 800363c:	f023 0304 	bic.w	r3, r3, #4
 8003640:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d016      	beq.n	800367a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364c:	f7fd fcbc 	bl	8000fc8 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003652:	e00a      	b.n	800366a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003654:	f7fd fcb8 	bl	8000fc8 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003662:	4293      	cmp	r3, r2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e12a      	b.n	80038c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800366a:	4b8b      	ldr	r3, [pc, #556]	@ (8003898 <HAL_RCC_OscConfig+0x780>)
 800366c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0ed      	beq.n	8003654 <HAL_RCC_OscConfig+0x53c>
 8003678:	e015      	b.n	80036a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367a:	f7fd fca5 	bl	8000fc8 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003680:	e00a      	b.n	8003698 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003682:	f7fd fca1 	bl	8000fc8 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003690:	4293      	cmp	r3, r2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e113      	b.n	80038c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003698:	4b7f      	ldr	r3, [pc, #508]	@ (8003898 <HAL_RCC_OscConfig+0x780>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1ed      	bne.n	8003682 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036a6:	7ffb      	ldrb	r3, [r7, #31]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d105      	bne.n	80036b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ac:	4b7a      	ldr	r3, [pc, #488]	@ (8003898 <HAL_RCC_OscConfig+0x780>)
 80036ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b0:	4a79      	ldr	r2, [pc, #484]	@ (8003898 <HAL_RCC_OscConfig+0x780>)
 80036b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036b6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 80fe 	beq.w	80038be <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	f040 80d0 	bne.w	800386c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80036cc:	4b72      	ldr	r3, [pc, #456]	@ (8003898 <HAL_RCC_OscConfig+0x780>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f003 0203 	and.w	r2, r3, #3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036dc:	429a      	cmp	r2, r3
 80036de:	d130      	bne.n	8003742 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ea:	3b01      	subs	r3, #1
 80036ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d127      	bne.n	8003742 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036fe:	429a      	cmp	r2, r3
 8003700:	d11f      	bne.n	8003742 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800370c:	2a07      	cmp	r2, #7
 800370e:	bf14      	ite	ne
 8003710:	2201      	movne	r2, #1
 8003712:	2200      	moveq	r2, #0
 8003714:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003716:	4293      	cmp	r3, r2
 8003718:	d113      	bne.n	8003742 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003724:	085b      	lsrs	r3, r3, #1
 8003726:	3b01      	subs	r3, #1
 8003728:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800372a:	429a      	cmp	r2, r3
 800372c:	d109      	bne.n	8003742 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003738:	085b      	lsrs	r3, r3, #1
 800373a:	3b01      	subs	r3, #1
 800373c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800373e:	429a      	cmp	r2, r3
 8003740:	d06e      	beq.n	8003820 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	2b0c      	cmp	r3, #12
 8003746:	d069      	beq.n	800381c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003748:	4b53      	ldr	r3, [pc, #332]	@ (8003898 <HAL_RCC_OscConfig+0x780>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d105      	bne.n	8003760 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003754:	4b50      	ldr	r3, [pc, #320]	@ (8003898 <HAL_RCC_OscConfig+0x780>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e0ad      	b.n	80038c0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003764:	4b4c      	ldr	r3, [pc, #304]	@ (8003898 <HAL_RCC_OscConfig+0x780>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a4b      	ldr	r2, [pc, #300]	@ (8003898 <HAL_RCC_OscConfig+0x780>)
 800376a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800376e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003770:	f7fd fc2a 	bl	8000fc8 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003778:	f7fd fc26 	bl	8000fc8 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e09a      	b.n	80038c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800378a:	4b43      	ldr	r3, [pc, #268]	@ (8003898 <HAL_RCC_OscConfig+0x780>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f0      	bne.n	8003778 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003796:	4b40      	ldr	r3, [pc, #256]	@ (8003898 <HAL_RCC_OscConfig+0x780>)
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	4b40      	ldr	r3, [pc, #256]	@ (800389c <HAL_RCC_OscConfig+0x784>)
 800379c:	4013      	ands	r3, r2
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80037a6:	3a01      	subs	r2, #1
 80037a8:	0112      	lsls	r2, r2, #4
 80037aa:	4311      	orrs	r1, r2
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80037b0:	0212      	lsls	r2, r2, #8
 80037b2:	4311      	orrs	r1, r2
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037b8:	0852      	lsrs	r2, r2, #1
 80037ba:	3a01      	subs	r2, #1
 80037bc:	0552      	lsls	r2, r2, #21
 80037be:	4311      	orrs	r1, r2
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80037c4:	0852      	lsrs	r2, r2, #1
 80037c6:	3a01      	subs	r2, #1
 80037c8:	0652      	lsls	r2, r2, #25
 80037ca:	4311      	orrs	r1, r2
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80037d0:	0912      	lsrs	r2, r2, #4
 80037d2:	0452      	lsls	r2, r2, #17
 80037d4:	430a      	orrs	r2, r1
 80037d6:	4930      	ldr	r1, [pc, #192]	@ (8003898 <HAL_RCC_OscConfig+0x780>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80037dc:	4b2e      	ldr	r3, [pc, #184]	@ (8003898 <HAL_RCC_OscConfig+0x780>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a2d      	ldr	r2, [pc, #180]	@ (8003898 <HAL_RCC_OscConfig+0x780>)
 80037e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003898 <HAL_RCC_OscConfig+0x780>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	4a2a      	ldr	r2, [pc, #168]	@ (8003898 <HAL_RCC_OscConfig+0x780>)
 80037ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037f4:	f7fd fbe8 	bl	8000fc8 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037fc:	f7fd fbe4 	bl	8000fc8 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e058      	b.n	80038c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800380e:	4b22      	ldr	r3, [pc, #136]	@ (8003898 <HAL_RCC_OscConfig+0x780>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0f0      	beq.n	80037fc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800381a:	e050      	b.n	80038be <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e04f      	b.n	80038c0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003820:	4b1d      	ldr	r3, [pc, #116]	@ (8003898 <HAL_RCC_OscConfig+0x780>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d148      	bne.n	80038be <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800382c:	4b1a      	ldr	r3, [pc, #104]	@ (8003898 <HAL_RCC_OscConfig+0x780>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a19      	ldr	r2, [pc, #100]	@ (8003898 <HAL_RCC_OscConfig+0x780>)
 8003832:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003836:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003838:	4b17      	ldr	r3, [pc, #92]	@ (8003898 <HAL_RCC_OscConfig+0x780>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	4a16      	ldr	r2, [pc, #88]	@ (8003898 <HAL_RCC_OscConfig+0x780>)
 800383e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003842:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003844:	f7fd fbc0 	bl	8000fc8 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800384c:	f7fd fbbc 	bl	8000fc8 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e030      	b.n	80038c0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800385e:	4b0e      	ldr	r3, [pc, #56]	@ (8003898 <HAL_RCC_OscConfig+0x780>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0x734>
 800386a:	e028      	b.n	80038be <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	2b0c      	cmp	r3, #12
 8003870:	d023      	beq.n	80038ba <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003872:	4b09      	ldr	r3, [pc, #36]	@ (8003898 <HAL_RCC_OscConfig+0x780>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a08      	ldr	r2, [pc, #32]	@ (8003898 <HAL_RCC_OscConfig+0x780>)
 8003878:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800387c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387e:	f7fd fba3 	bl	8000fc8 <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003884:	e00c      	b.n	80038a0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003886:	f7fd fb9f 	bl	8000fc8 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d905      	bls.n	80038a0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e013      	b.n	80038c0 <HAL_RCC_OscConfig+0x7a8>
 8003898:	40021000 	.word	0x40021000
 800389c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038a0:	4b09      	ldr	r3, [pc, #36]	@ (80038c8 <HAL_RCC_OscConfig+0x7b0>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1ec      	bne.n	8003886 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80038ac:	4b06      	ldr	r3, [pc, #24]	@ (80038c8 <HAL_RCC_OscConfig+0x7b0>)
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	4905      	ldr	r1, [pc, #20]	@ (80038c8 <HAL_RCC_OscConfig+0x7b0>)
 80038b2:	4b06      	ldr	r3, [pc, #24]	@ (80038cc <HAL_RCC_OscConfig+0x7b4>)
 80038b4:	4013      	ands	r3, r2
 80038b6:	60cb      	str	r3, [r1, #12]
 80038b8:	e001      	b.n	80038be <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e000      	b.n	80038c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3720      	adds	r7, #32
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40021000 	.word	0x40021000
 80038cc:	feeefffc 	.word	0xfeeefffc

080038d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e0e7      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038e4:	4b75      	ldr	r3, [pc, #468]	@ (8003abc <HAL_RCC_ClockConfig+0x1ec>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d910      	bls.n	8003914 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f2:	4b72      	ldr	r3, [pc, #456]	@ (8003abc <HAL_RCC_ClockConfig+0x1ec>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f023 0207 	bic.w	r2, r3, #7
 80038fa:	4970      	ldr	r1, [pc, #448]	@ (8003abc <HAL_RCC_ClockConfig+0x1ec>)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	4313      	orrs	r3, r2
 8003900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003902:	4b6e      	ldr	r3, [pc, #440]	@ (8003abc <HAL_RCC_ClockConfig+0x1ec>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d001      	beq.n	8003914 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e0cf      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d010      	beq.n	8003942 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	4b66      	ldr	r3, [pc, #408]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800392c:	429a      	cmp	r2, r3
 800392e:	d908      	bls.n	8003942 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003930:	4b63      	ldr	r3, [pc, #396]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	4960      	ldr	r1, [pc, #384]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f0>)
 800393e:	4313      	orrs	r3, r2
 8003940:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d04c      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2b03      	cmp	r3, #3
 8003954:	d107      	bne.n	8003966 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003956:	4b5a      	ldr	r3, [pc, #360]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d121      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e0a6      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b02      	cmp	r3, #2
 800396c:	d107      	bne.n	800397e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800396e:	4b54      	ldr	r3, [pc, #336]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d115      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e09a      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d107      	bne.n	8003996 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003986:	4b4e      	ldr	r3, [pc, #312]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d109      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e08e      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003996:	4b4a      	ldr	r3, [pc, #296]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e086      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039a6:	4b46      	ldr	r3, [pc, #280]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f0>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f023 0203 	bic.w	r2, r3, #3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	4943      	ldr	r1, [pc, #268]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f0>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039b8:	f7fd fb06 	bl	8000fc8 <HAL_GetTick>
 80039bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039be:	e00a      	b.n	80039d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c0:	f7fd fb02 	bl	8000fc8 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e06e      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d6:	4b3a      	ldr	r3, [pc, #232]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f0>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 020c 	and.w	r2, r3, #12
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d1eb      	bne.n	80039c0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d010      	beq.n	8003a16 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	4b31      	ldr	r3, [pc, #196]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f0>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d208      	bcs.n	8003a16 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a04:	4b2e      	ldr	r3, [pc, #184]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	492b      	ldr	r1, [pc, #172]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a16:	4b29      	ldr	r3, [pc, #164]	@ (8003abc <HAL_RCC_ClockConfig+0x1ec>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d210      	bcs.n	8003a46 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a24:	4b25      	ldr	r3, [pc, #148]	@ (8003abc <HAL_RCC_ClockConfig+0x1ec>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f023 0207 	bic.w	r2, r3, #7
 8003a2c:	4923      	ldr	r1, [pc, #140]	@ (8003abc <HAL_RCC_ClockConfig+0x1ec>)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a34:	4b21      	ldr	r3, [pc, #132]	@ (8003abc <HAL_RCC_ClockConfig+0x1ec>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d001      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e036      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0304 	and.w	r3, r3, #4
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d008      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a52:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	4918      	ldr	r1, [pc, #96]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0308 	and.w	r3, r3, #8
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d009      	beq.n	8003a84 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a70:	4b13      	ldr	r3, [pc, #76]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	4910      	ldr	r1, [pc, #64]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a84:	f000 f824 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	091b      	lsrs	r3, r3, #4
 8003a90:	f003 030f 	and.w	r3, r3, #15
 8003a94:	490b      	ldr	r1, [pc, #44]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1f4>)
 8003a96:	5ccb      	ldrb	r3, [r1, r3]
 8003a98:	f003 031f 	and.w	r3, r3, #31
 8003a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa0:	4a09      	ldr	r2, [pc, #36]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1f8>)
 8003aa2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003aa4:	4b09      	ldr	r3, [pc, #36]	@ (8003acc <HAL_RCC_ClockConfig+0x1fc>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fd fa3d 	bl	8000f28 <HAL_InitTick>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ab2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40022000 	.word	0x40022000
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	08006240 	.word	0x08006240
 8003ac8:	20000000 	.word	0x20000000
 8003acc:	20000004 	.word	0x20000004

08003ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b089      	sub	sp, #36	@ 0x24
 8003ad4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61fb      	str	r3, [r7, #28]
 8003ada:	2300      	movs	r3, #0
 8003adc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ade:	4b3e      	ldr	r3, [pc, #248]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 030c 	and.w	r3, r3, #12
 8003ae6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ae8:	4b3b      	ldr	r3, [pc, #236]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <HAL_RCC_GetSysClockFreq+0x34>
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	2b0c      	cmp	r3, #12
 8003afc:	d121      	bne.n	8003b42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d11e      	bne.n	8003b42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b04:	4b34      	ldr	r3, [pc, #208]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d107      	bne.n	8003b20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b10:	4b31      	ldr	r3, [pc, #196]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b16:	0a1b      	lsrs	r3, r3, #8
 8003b18:	f003 030f 	and.w	r3, r3, #15
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	e005      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b20:	4b2d      	ldr	r3, [pc, #180]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b2c:	4a2b      	ldr	r2, [pc, #172]	@ (8003bdc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10d      	bne.n	8003b58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b40:	e00a      	b.n	8003b58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	d102      	bne.n	8003b4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b48:	4b25      	ldr	r3, [pc, #148]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b4a:	61bb      	str	r3, [r7, #24]
 8003b4c:	e004      	b.n	8003b58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d101      	bne.n	8003b58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b54:	4b23      	ldr	r3, [pc, #140]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	2b0c      	cmp	r3, #12
 8003b5c:	d134      	bne.n	8003bc8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d003      	beq.n	8003b76 <HAL_RCC_GetSysClockFreq+0xa6>
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2b03      	cmp	r3, #3
 8003b72:	d003      	beq.n	8003b7c <HAL_RCC_GetSysClockFreq+0xac>
 8003b74:	e005      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b76:	4b1a      	ldr	r3, [pc, #104]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b78:	617b      	str	r3, [r7, #20]
      break;
 8003b7a:	e005      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b7c:	4b19      	ldr	r3, [pc, #100]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b7e:	617b      	str	r3, [r7, #20]
      break;
 8003b80:	e002      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	617b      	str	r3, [r7, #20]
      break;
 8003b86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b88:	4b13      	ldr	r3, [pc, #76]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	091b      	lsrs	r3, r3, #4
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	3301      	adds	r3, #1
 8003b94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b96:	4b10      	ldr	r3, [pc, #64]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	0a1b      	lsrs	r3, r3, #8
 8003b9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	fb03 f202 	mul.w	r2, r3, r2
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bae:	4b0a      	ldr	r3, [pc, #40]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	0e5b      	lsrs	r3, r3, #25
 8003bb4:	f003 0303 	and.w	r3, r3, #3
 8003bb8:	3301      	adds	r3, #1
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003bc8:	69bb      	ldr	r3, [r7, #24]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3724      	adds	r7, #36	@ 0x24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	08006258 	.word	0x08006258
 8003be0:	00f42400 	.word	0x00f42400
 8003be4:	007a1200 	.word	0x007a1200

08003be8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bec:	4b03      	ldr	r3, [pc, #12]	@ (8003bfc <HAL_RCC_GetHCLKFreq+0x14>)
 8003bee:	681b      	ldr	r3, [r3, #0]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	20000000 	.word	0x20000000

08003c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c04:	f7ff fff0 	bl	8003be8 <HAL_RCC_GetHCLKFreq>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	4b06      	ldr	r3, [pc, #24]	@ (8003c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	0a1b      	lsrs	r3, r3, #8
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	4904      	ldr	r1, [pc, #16]	@ (8003c28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c16:	5ccb      	ldrb	r3, [r1, r3]
 8003c18:	f003 031f 	and.w	r3, r3, #31
 8003c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40021000 	.word	0x40021000
 8003c28:	08006250 	.word	0x08006250

08003c2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c30:	f7ff ffda 	bl	8003be8 <HAL_RCC_GetHCLKFreq>
 8003c34:	4602      	mov	r2, r0
 8003c36:	4b06      	ldr	r3, [pc, #24]	@ (8003c50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	0adb      	lsrs	r3, r3, #11
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	4904      	ldr	r1, [pc, #16]	@ (8003c54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c42:	5ccb      	ldrb	r3, [r1, r3]
 8003c44:	f003 031f 	and.w	r3, r3, #31
 8003c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40021000 	.word	0x40021000
 8003c54:	08006250 	.word	0x08006250

08003c58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c60:	2300      	movs	r3, #0
 8003c62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c64:	4b2a      	ldr	r3, [pc, #168]	@ (8003d10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d003      	beq.n	8003c78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c70:	f7ff f9ee 	bl	8003050 <HAL_PWREx_GetVoltageRange>
 8003c74:	6178      	str	r0, [r7, #20]
 8003c76:	e014      	b.n	8003ca2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c78:	4b25      	ldr	r3, [pc, #148]	@ (8003d10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7c:	4a24      	ldr	r2, [pc, #144]	@ (8003d10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c82:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c84:	4b22      	ldr	r3, [pc, #136]	@ (8003d10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c90:	f7ff f9de 	bl	8003050 <HAL_PWREx_GetVoltageRange>
 8003c94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c96:	4b1e      	ldr	r3, [pc, #120]	@ (8003d10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9a:	4a1d      	ldr	r2, [pc, #116]	@ (8003d10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ca0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ca8:	d10b      	bne.n	8003cc2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b80      	cmp	r3, #128	@ 0x80
 8003cae:	d919      	bls.n	8003ce4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2ba0      	cmp	r3, #160	@ 0xa0
 8003cb4:	d902      	bls.n	8003cbc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	e013      	b.n	8003ce4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	613b      	str	r3, [r7, #16]
 8003cc0:	e010      	b.n	8003ce4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b80      	cmp	r3, #128	@ 0x80
 8003cc6:	d902      	bls.n	8003cce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003cc8:	2303      	movs	r3, #3
 8003cca:	613b      	str	r3, [r7, #16]
 8003ccc:	e00a      	b.n	8003ce4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b80      	cmp	r3, #128	@ 0x80
 8003cd2:	d102      	bne.n	8003cda <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	e004      	b.n	8003ce4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b70      	cmp	r3, #112	@ 0x70
 8003cde:	d101      	bne.n	8003ce4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8003d14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f023 0207 	bic.w	r2, r3, #7
 8003cec:	4909      	ldr	r1, [pc, #36]	@ (8003d14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003cf4:	4b07      	ldr	r3, [pc, #28]	@ (8003d14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d001      	beq.n	8003d06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40021000 	.word	0x40021000
 8003d14:	40022000 	.word	0x40022000

08003d18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d20:	2300      	movs	r3, #0
 8003d22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d24:	2300      	movs	r3, #0
 8003d26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d041      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d38:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d3c:	d02a      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003d3e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d42:	d824      	bhi.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d44:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d48:	d008      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d4e:	d81e      	bhi.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00a      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003d54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d58:	d010      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d5a:	e018      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d5c:	4b86      	ldr	r3, [pc, #536]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	4a85      	ldr	r2, [pc, #532]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d66:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d68:	e015      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	2100      	movs	r1, #0
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 fabb 	bl	80042ec <RCCEx_PLLSAI1_Config>
 8003d76:	4603      	mov	r3, r0
 8003d78:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d7a:	e00c      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3320      	adds	r3, #32
 8003d80:	2100      	movs	r1, #0
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 fba6 	bl	80044d4 <RCCEx_PLLSAI2_Config>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d8c:	e003      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	74fb      	strb	r3, [r7, #19]
      break;
 8003d92:	e000      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003d94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d96:	7cfb      	ldrb	r3, [r7, #19]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10b      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d9c:	4b76      	ldr	r3, [pc, #472]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003daa:	4973      	ldr	r1, [pc, #460]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003db2:	e001      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db4:	7cfb      	ldrb	r3, [r7, #19]
 8003db6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d041      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003dc8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003dcc:	d02a      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003dce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003dd2:	d824      	bhi.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003dd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dd8:	d008      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003dda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dde:	d81e      	bhi.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00a      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003de4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003de8:	d010      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003dea:	e018      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003dec:	4b62      	ldr	r3, [pc, #392]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	4a61      	ldr	r2, [pc, #388]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003df6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003df8:	e015      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	2100      	movs	r1, #0
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 fa73 	bl	80042ec <RCCEx_PLLSAI1_Config>
 8003e06:	4603      	mov	r3, r0
 8003e08:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e0a:	e00c      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3320      	adds	r3, #32
 8003e10:	2100      	movs	r1, #0
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 fb5e 	bl	80044d4 <RCCEx_PLLSAI2_Config>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e1c:	e003      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	74fb      	strb	r3, [r7, #19]
      break;
 8003e22:	e000      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003e24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e26:	7cfb      	ldrb	r3, [r7, #19]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10b      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e2c:	4b52      	ldr	r3, [pc, #328]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e32:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e3a:	494f      	ldr	r1, [pc, #316]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003e42:	e001      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e44:	7cfb      	ldrb	r3, [r7, #19]
 8003e46:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 80a0 	beq.w	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e56:	2300      	movs	r3, #0
 8003e58:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e5a:	4b47      	ldr	r3, [pc, #284]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003e66:	2301      	movs	r3, #1
 8003e68:	e000      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00d      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e70:	4b41      	ldr	r3, [pc, #260]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e74:	4a40      	ldr	r2, [pc, #256]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e7c:	4b3e      	ldr	r3, [pc, #248]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e84:	60bb      	str	r3, [r7, #8]
 8003e86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a3a      	ldr	r2, [pc, #232]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e98:	f7fd f896 	bl	8000fc8 <HAL_GetTick>
 8003e9c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e9e:	e009      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ea0:	f7fd f892 	bl	8000fc8 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d902      	bls.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	74fb      	strb	r3, [r7, #19]
        break;
 8003eb2:	e005      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003eb4:	4b31      	ldr	r3, [pc, #196]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0ef      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003ec0:	7cfb      	ldrb	r3, [r7, #19]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d15c      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ec6:	4b2c      	ldr	r3, [pc, #176]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ecc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ed0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d01f      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d019      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ee4:	4b24      	ldr	r3, [pc, #144]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ef0:	4b21      	ldr	r3, [pc, #132]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef6:	4a20      	ldr	r2, [pc, #128]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ef8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003efc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f00:	4b1d      	ldr	r3, [pc, #116]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f06:	4a1c      	ldr	r2, [pc, #112]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f10:	4a19      	ldr	r2, [pc, #100]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d016      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f22:	f7fd f851 	bl	8000fc8 <HAL_GetTick>
 8003f26:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f28:	e00b      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f2a:	f7fd f84d 	bl	8000fc8 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d902      	bls.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	74fb      	strb	r3, [r7, #19]
            break;
 8003f40:	e006      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f42:	4b0d      	ldr	r3, [pc, #52]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0ec      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003f50:	7cfb      	ldrb	r3, [r7, #19]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10c      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f56:	4b08      	ldr	r3, [pc, #32]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f66:	4904      	ldr	r1, [pc, #16]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f6e:	e009      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f70:	7cfb      	ldrb	r3, [r7, #19]
 8003f72:	74bb      	strb	r3, [r7, #18]
 8003f74:	e006      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003f76:	bf00      	nop
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f80:	7cfb      	ldrb	r3, [r7, #19]
 8003f82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f84:	7c7b      	ldrb	r3, [r7, #17]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d105      	bne.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f8a:	4b9e      	ldr	r3, [pc, #632]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f8e:	4a9d      	ldr	r2, [pc, #628]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f94:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fa2:	4b98      	ldr	r3, [pc, #608]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa8:	f023 0203 	bic.w	r2, r3, #3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb0:	4994      	ldr	r1, [pc, #592]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00a      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fc4:	4b8f      	ldr	r3, [pc, #572]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fca:	f023 020c 	bic.w	r2, r3, #12
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd2:	498c      	ldr	r1, [pc, #560]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fe6:	4b87      	ldr	r3, [pc, #540]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff4:	4983      	ldr	r1, [pc, #524]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0308 	and.w	r3, r3, #8
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00a      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004008:	4b7e      	ldr	r3, [pc, #504]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800400e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004016:	497b      	ldr	r1, [pc, #492]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004018:	4313      	orrs	r3, r2
 800401a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0310 	and.w	r3, r3, #16
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800402a:	4b76      	ldr	r3, [pc, #472]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800402c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004030:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004038:	4972      	ldr	r1, [pc, #456]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0320 	and.w	r3, r3, #32
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00a      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800404c:	4b6d      	ldr	r3, [pc, #436]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004052:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800405a:	496a      	ldr	r1, [pc, #424]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800406e:	4b65      	ldr	r3, [pc, #404]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004074:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800407c:	4961      	ldr	r1, [pc, #388]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00a      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004090:	4b5c      	ldr	r3, [pc, #368]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004096:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800409e:	4959      	ldr	r1, [pc, #356]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00a      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040b2:	4b54      	ldr	r3, [pc, #336]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040c0:	4950      	ldr	r1, [pc, #320]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00a      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040d4:	4b4b      	ldr	r3, [pc, #300]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040da:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e2:	4948      	ldr	r1, [pc, #288]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00a      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040f6:	4b43      	ldr	r3, [pc, #268]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004104:	493f      	ldr	r1, [pc, #252]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004106:	4313      	orrs	r3, r2
 8004108:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d028      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004118:	4b3a      	ldr	r3, [pc, #232]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800411a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800411e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004126:	4937      	ldr	r1, [pc, #220]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004132:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004136:	d106      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004138:	4b32      	ldr	r3, [pc, #200]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	4a31      	ldr	r2, [pc, #196]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004142:	60d3      	str	r3, [r2, #12]
 8004144:	e011      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800414a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800414e:	d10c      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3304      	adds	r3, #4
 8004154:	2101      	movs	r1, #1
 8004156:	4618      	mov	r0, r3
 8004158:	f000 f8c8 	bl	80042ec <RCCEx_PLLSAI1_Config>
 800415c:	4603      	mov	r3, r0
 800415e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004160:	7cfb      	ldrb	r3, [r7, #19]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004166:	7cfb      	ldrb	r3, [r7, #19]
 8004168:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d028      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004176:	4b23      	ldr	r3, [pc, #140]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800417c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004184:	491f      	ldr	r1, [pc, #124]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004190:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004194:	d106      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004196:	4b1b      	ldr	r3, [pc, #108]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	4a1a      	ldr	r2, [pc, #104]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800419c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041a0:	60d3      	str	r3, [r2, #12]
 80041a2:	e011      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041ac:	d10c      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3304      	adds	r3, #4
 80041b2:	2101      	movs	r1, #1
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 f899 	bl	80042ec <RCCEx_PLLSAI1_Config>
 80041ba:	4603      	mov	r3, r0
 80041bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041be:	7cfb      	ldrb	r3, [r7, #19]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80041c4:	7cfb      	ldrb	r3, [r7, #19]
 80041c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d02b      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041e2:	4908      	ldr	r1, [pc, #32]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041f2:	d109      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041f4:	4b03      	ldr	r3, [pc, #12]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	4a02      	ldr	r2, [pc, #8]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041fe:	60d3      	str	r3, [r2, #12]
 8004200:	e014      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004202:	bf00      	nop
 8004204:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800420c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004210:	d10c      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3304      	adds	r3, #4
 8004216:	2101      	movs	r1, #1
 8004218:	4618      	mov	r0, r3
 800421a:	f000 f867 	bl	80042ec <RCCEx_PLLSAI1_Config>
 800421e:	4603      	mov	r3, r0
 8004220:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004222:	7cfb      	ldrb	r3, [r7, #19]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004228:	7cfb      	ldrb	r3, [r7, #19]
 800422a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d02f      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004238:	4b2b      	ldr	r3, [pc, #172]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800423e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004246:	4928      	ldr	r1, [pc, #160]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004252:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004256:	d10d      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3304      	adds	r3, #4
 800425c:	2102      	movs	r1, #2
 800425e:	4618      	mov	r0, r3
 8004260:	f000 f844 	bl	80042ec <RCCEx_PLLSAI1_Config>
 8004264:	4603      	mov	r3, r0
 8004266:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004268:	7cfb      	ldrb	r3, [r7, #19]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d014      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800426e:	7cfb      	ldrb	r3, [r7, #19]
 8004270:	74bb      	strb	r3, [r7, #18]
 8004272:	e011      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004278:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800427c:	d10c      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3320      	adds	r3, #32
 8004282:	2102      	movs	r1, #2
 8004284:	4618      	mov	r0, r3
 8004286:	f000 f925 	bl	80044d4 <RCCEx_PLLSAI2_Config>
 800428a:	4603      	mov	r3, r0
 800428c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800428e:	7cfb      	ldrb	r3, [r7, #19]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004294:	7cfb      	ldrb	r3, [r7, #19]
 8004296:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00a      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042a4:	4b10      	ldr	r3, [pc, #64]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042aa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042b2:	490d      	ldr	r1, [pc, #52]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00b      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042c6:	4b08      	ldr	r3, [pc, #32]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042cc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042d6:	4904      	ldr	r1, [pc, #16]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80042de:	7cbb      	ldrb	r3, [r7, #18]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3718      	adds	r7, #24
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40021000 	.word	0x40021000

080042ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042f6:	2300      	movs	r3, #0
 80042f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042fa:	4b75      	ldr	r3, [pc, #468]	@ (80044d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d018      	beq.n	8004338 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004306:	4b72      	ldr	r3, [pc, #456]	@ (80044d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f003 0203 	and.w	r2, r3, #3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d10d      	bne.n	8004332 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
       ||
 800431a:	2b00      	cmp	r3, #0
 800431c:	d009      	beq.n	8004332 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800431e:	4b6c      	ldr	r3, [pc, #432]	@ (80044d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	091b      	lsrs	r3, r3, #4
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
       ||
 800432e:	429a      	cmp	r2, r3
 8004330:	d047      	beq.n	80043c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	73fb      	strb	r3, [r7, #15]
 8004336:	e044      	b.n	80043c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b03      	cmp	r3, #3
 800433e:	d018      	beq.n	8004372 <RCCEx_PLLSAI1_Config+0x86>
 8004340:	2b03      	cmp	r3, #3
 8004342:	d825      	bhi.n	8004390 <RCCEx_PLLSAI1_Config+0xa4>
 8004344:	2b01      	cmp	r3, #1
 8004346:	d002      	beq.n	800434e <RCCEx_PLLSAI1_Config+0x62>
 8004348:	2b02      	cmp	r3, #2
 800434a:	d009      	beq.n	8004360 <RCCEx_PLLSAI1_Config+0x74>
 800434c:	e020      	b.n	8004390 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800434e:	4b60      	ldr	r3, [pc, #384]	@ (80044d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d11d      	bne.n	8004396 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800435e:	e01a      	b.n	8004396 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004360:	4b5b      	ldr	r3, [pc, #364]	@ (80044d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004368:	2b00      	cmp	r3, #0
 800436a:	d116      	bne.n	800439a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004370:	e013      	b.n	800439a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004372:	4b57      	ldr	r3, [pc, #348]	@ (80044d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10f      	bne.n	800439e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800437e:	4b54      	ldr	r3, [pc, #336]	@ (80044d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d109      	bne.n	800439e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800438e:	e006      	b.n	800439e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	73fb      	strb	r3, [r7, #15]
      break;
 8004394:	e004      	b.n	80043a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004396:	bf00      	nop
 8004398:	e002      	b.n	80043a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800439a:	bf00      	nop
 800439c:	e000      	b.n	80043a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800439e:	bf00      	nop
    }

    if(status == HAL_OK)
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10d      	bne.n	80043c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043a6:	4b4a      	ldr	r3, [pc, #296]	@ (80044d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6819      	ldr	r1, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	430b      	orrs	r3, r1
 80043bc:	4944      	ldr	r1, [pc, #272]	@ (80044d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d17d      	bne.n	80044c4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80043c8:	4b41      	ldr	r3, [pc, #260]	@ (80044d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a40      	ldr	r2, [pc, #256]	@ (80044d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80043d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043d4:	f7fc fdf8 	bl	8000fc8 <HAL_GetTick>
 80043d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043da:	e009      	b.n	80043f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043dc:	f7fc fdf4 	bl	8000fc8 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d902      	bls.n	80043f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	73fb      	strb	r3, [r7, #15]
        break;
 80043ee:	e005      	b.n	80043fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043f0:	4b37      	ldr	r3, [pc, #220]	@ (80044d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1ef      	bne.n	80043dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d160      	bne.n	80044c4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d111      	bne.n	800442c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004408:	4b31      	ldr	r3, [pc, #196]	@ (80044d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004410:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6892      	ldr	r2, [r2, #8]
 8004418:	0211      	lsls	r1, r2, #8
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	68d2      	ldr	r2, [r2, #12]
 800441e:	0912      	lsrs	r2, r2, #4
 8004420:	0452      	lsls	r2, r2, #17
 8004422:	430a      	orrs	r2, r1
 8004424:	492a      	ldr	r1, [pc, #168]	@ (80044d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004426:	4313      	orrs	r3, r2
 8004428:	610b      	str	r3, [r1, #16]
 800442a:	e027      	b.n	800447c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d112      	bne.n	8004458 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004432:	4b27      	ldr	r3, [pc, #156]	@ (80044d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800443a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6892      	ldr	r2, [r2, #8]
 8004442:	0211      	lsls	r1, r2, #8
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6912      	ldr	r2, [r2, #16]
 8004448:	0852      	lsrs	r2, r2, #1
 800444a:	3a01      	subs	r2, #1
 800444c:	0552      	lsls	r2, r2, #21
 800444e:	430a      	orrs	r2, r1
 8004450:	491f      	ldr	r1, [pc, #124]	@ (80044d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004452:	4313      	orrs	r3, r2
 8004454:	610b      	str	r3, [r1, #16]
 8004456:	e011      	b.n	800447c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004458:	4b1d      	ldr	r3, [pc, #116]	@ (80044d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004460:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6892      	ldr	r2, [r2, #8]
 8004468:	0211      	lsls	r1, r2, #8
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6952      	ldr	r2, [r2, #20]
 800446e:	0852      	lsrs	r2, r2, #1
 8004470:	3a01      	subs	r2, #1
 8004472:	0652      	lsls	r2, r2, #25
 8004474:	430a      	orrs	r2, r1
 8004476:	4916      	ldr	r1, [pc, #88]	@ (80044d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004478:	4313      	orrs	r3, r2
 800447a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800447c:	4b14      	ldr	r3, [pc, #80]	@ (80044d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a13      	ldr	r2, [pc, #76]	@ (80044d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004482:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004486:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004488:	f7fc fd9e 	bl	8000fc8 <HAL_GetTick>
 800448c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800448e:	e009      	b.n	80044a4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004490:	f7fc fd9a 	bl	8000fc8 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d902      	bls.n	80044a4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	73fb      	strb	r3, [r7, #15]
          break;
 80044a2:	e005      	b.n	80044b0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044a4:	4b0a      	ldr	r3, [pc, #40]	@ (80044d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0ef      	beq.n	8004490 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80044b0:	7bfb      	ldrb	r3, [r7, #15]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d106      	bne.n	80044c4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80044b6:	4b06      	ldr	r3, [pc, #24]	@ (80044d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	4904      	ldr	r1, [pc, #16]	@ (80044d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80044c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	40021000 	.word	0x40021000

080044d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044de:	2300      	movs	r3, #0
 80044e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044e2:	4b6a      	ldr	r3, [pc, #424]	@ (800468c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d018      	beq.n	8004520 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80044ee:	4b67      	ldr	r3, [pc, #412]	@ (800468c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f003 0203 	and.w	r2, r3, #3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d10d      	bne.n	800451a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
       ||
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004506:	4b61      	ldr	r3, [pc, #388]	@ (800468c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	091b      	lsrs	r3, r3, #4
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	1c5a      	adds	r2, r3, #1
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
       ||
 8004516:	429a      	cmp	r2, r3
 8004518:	d047      	beq.n	80045aa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	73fb      	strb	r3, [r7, #15]
 800451e:	e044      	b.n	80045aa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b03      	cmp	r3, #3
 8004526:	d018      	beq.n	800455a <RCCEx_PLLSAI2_Config+0x86>
 8004528:	2b03      	cmp	r3, #3
 800452a:	d825      	bhi.n	8004578 <RCCEx_PLLSAI2_Config+0xa4>
 800452c:	2b01      	cmp	r3, #1
 800452e:	d002      	beq.n	8004536 <RCCEx_PLLSAI2_Config+0x62>
 8004530:	2b02      	cmp	r3, #2
 8004532:	d009      	beq.n	8004548 <RCCEx_PLLSAI2_Config+0x74>
 8004534:	e020      	b.n	8004578 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004536:	4b55      	ldr	r3, [pc, #340]	@ (800468c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d11d      	bne.n	800457e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004546:	e01a      	b.n	800457e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004548:	4b50      	ldr	r3, [pc, #320]	@ (800468c <RCCEx_PLLSAI2_Config+0x1b8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004550:	2b00      	cmp	r3, #0
 8004552:	d116      	bne.n	8004582 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004558:	e013      	b.n	8004582 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800455a:	4b4c      	ldr	r3, [pc, #304]	@ (800468c <RCCEx_PLLSAI2_Config+0x1b8>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10f      	bne.n	8004586 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004566:	4b49      	ldr	r3, [pc, #292]	@ (800468c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d109      	bne.n	8004586 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004576:	e006      	b.n	8004586 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	73fb      	strb	r3, [r7, #15]
      break;
 800457c:	e004      	b.n	8004588 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800457e:	bf00      	nop
 8004580:	e002      	b.n	8004588 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004582:	bf00      	nop
 8004584:	e000      	b.n	8004588 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004586:	bf00      	nop
    }

    if(status == HAL_OK)
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10d      	bne.n	80045aa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800458e:	4b3f      	ldr	r3, [pc, #252]	@ (800468c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6819      	ldr	r1, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	3b01      	subs	r3, #1
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	430b      	orrs	r3, r1
 80045a4:	4939      	ldr	r1, [pc, #228]	@ (800468c <RCCEx_PLLSAI2_Config+0x1b8>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d167      	bne.n	8004680 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80045b0:	4b36      	ldr	r3, [pc, #216]	@ (800468c <RCCEx_PLLSAI2_Config+0x1b8>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a35      	ldr	r2, [pc, #212]	@ (800468c <RCCEx_PLLSAI2_Config+0x1b8>)
 80045b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045bc:	f7fc fd04 	bl	8000fc8 <HAL_GetTick>
 80045c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045c2:	e009      	b.n	80045d8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045c4:	f7fc fd00 	bl	8000fc8 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d902      	bls.n	80045d8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	73fb      	strb	r3, [r7, #15]
        break;
 80045d6:	e005      	b.n	80045e4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045d8:	4b2c      	ldr	r3, [pc, #176]	@ (800468c <RCCEx_PLLSAI2_Config+0x1b8>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1ef      	bne.n	80045c4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d14a      	bne.n	8004680 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d111      	bne.n	8004614 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045f0:	4b26      	ldr	r3, [pc, #152]	@ (800468c <RCCEx_PLLSAI2_Config+0x1b8>)
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80045f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6892      	ldr	r2, [r2, #8]
 8004600:	0211      	lsls	r1, r2, #8
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	68d2      	ldr	r2, [r2, #12]
 8004606:	0912      	lsrs	r2, r2, #4
 8004608:	0452      	lsls	r2, r2, #17
 800460a:	430a      	orrs	r2, r1
 800460c:	491f      	ldr	r1, [pc, #124]	@ (800468c <RCCEx_PLLSAI2_Config+0x1b8>)
 800460e:	4313      	orrs	r3, r2
 8004610:	614b      	str	r3, [r1, #20]
 8004612:	e011      	b.n	8004638 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004614:	4b1d      	ldr	r3, [pc, #116]	@ (800468c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800461c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6892      	ldr	r2, [r2, #8]
 8004624:	0211      	lsls	r1, r2, #8
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6912      	ldr	r2, [r2, #16]
 800462a:	0852      	lsrs	r2, r2, #1
 800462c:	3a01      	subs	r2, #1
 800462e:	0652      	lsls	r2, r2, #25
 8004630:	430a      	orrs	r2, r1
 8004632:	4916      	ldr	r1, [pc, #88]	@ (800468c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004634:	4313      	orrs	r3, r2
 8004636:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004638:	4b14      	ldr	r3, [pc, #80]	@ (800468c <RCCEx_PLLSAI2_Config+0x1b8>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a13      	ldr	r2, [pc, #76]	@ (800468c <RCCEx_PLLSAI2_Config+0x1b8>)
 800463e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004642:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004644:	f7fc fcc0 	bl	8000fc8 <HAL_GetTick>
 8004648:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800464a:	e009      	b.n	8004660 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800464c:	f7fc fcbc 	bl	8000fc8 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d902      	bls.n	8004660 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	73fb      	strb	r3, [r7, #15]
          break;
 800465e:	e005      	b.n	800466c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004660:	4b0a      	ldr	r3, [pc, #40]	@ (800468c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0ef      	beq.n	800464c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800466c:	7bfb      	ldrb	r3, [r7, #15]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d106      	bne.n	8004680 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004672:	4b06      	ldr	r3, [pc, #24]	@ (800468c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004674:	695a      	ldr	r2, [r3, #20]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	4904      	ldr	r1, [pc, #16]	@ (800468c <RCCEx_PLLSAI2_Config+0x1b8>)
 800467c:	4313      	orrs	r3, r2
 800467e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004680:	7bfb      	ldrb	r3, [r7, #15]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	40021000 	.word	0x40021000

08004690 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e040      	b.n	8004724 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d106      	bne.n	80046b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7fc faf2 	bl	8000c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2224      	movs	r2, #36	@ 0x24
 80046bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0201 	bic.w	r2, r2, #1
 80046cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 fe90 	bl	80053fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 fbd5 	bl	8004e8c <UART_SetConfig>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e01b      	b.n	8004724 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689a      	ldr	r2, [r3, #8]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800470a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 ff0f 	bl	8005540 <UART_CheckIdleState>
 8004722:	4603      	mov	r3, r0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b08a      	sub	sp, #40	@ 0x28
 8004730:	af02      	add	r7, sp, #8
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	603b      	str	r3, [r7, #0]
 8004738:	4613      	mov	r3, r2
 800473a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004740:	2b20      	cmp	r3, #32
 8004742:	d177      	bne.n	8004834 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <HAL_UART_Transmit+0x24>
 800474a:	88fb      	ldrh	r3, [r7, #6]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e070      	b.n	8004836 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2221      	movs	r2, #33	@ 0x21
 8004760:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004762:	f7fc fc31 	bl	8000fc8 <HAL_GetTick>
 8004766:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	88fa      	ldrh	r2, [r7, #6]
 800476c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	88fa      	ldrh	r2, [r7, #6]
 8004774:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004780:	d108      	bne.n	8004794 <HAL_UART_Transmit+0x68>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d104      	bne.n	8004794 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800478a:	2300      	movs	r3, #0
 800478c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	61bb      	str	r3, [r7, #24]
 8004792:	e003      	b.n	800479c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004798:	2300      	movs	r3, #0
 800479a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800479c:	e02f      	b.n	80047fe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2200      	movs	r2, #0
 80047a6:	2180      	movs	r1, #128	@ 0x80
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 ff71 	bl	8005690 <UART_WaitOnFlagUntilTimeout>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d004      	beq.n	80047be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2220      	movs	r2, #32
 80047b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e03b      	b.n	8004836 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10b      	bne.n	80047dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	881a      	ldrh	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047d0:	b292      	uxth	r2, r2
 80047d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	3302      	adds	r3, #2
 80047d8:	61bb      	str	r3, [r7, #24]
 80047da:	e007      	b.n	80047ec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	781a      	ldrb	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	3301      	adds	r3, #1
 80047ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	3b01      	subs	r3, #1
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004804:	b29b      	uxth	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1c9      	bne.n	800479e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2200      	movs	r2, #0
 8004812:	2140      	movs	r1, #64	@ 0x40
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 ff3b 	bl	8005690 <UART_WaitOnFlagUntilTimeout>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d004      	beq.n	800482a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2220      	movs	r2, #32
 8004824:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e005      	b.n	8004836 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2220      	movs	r2, #32
 800482e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004830:	2300      	movs	r3, #0
 8004832:	e000      	b.n	8004836 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004834:	2302      	movs	r3, #2
  }
}
 8004836:	4618      	mov	r0, r3
 8004838:	3720      	adds	r7, #32
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
	...

08004840 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b0ba      	sub	sp, #232	@ 0xe8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004866:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800486a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800486e:	4013      	ands	r3, r2
 8004870:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004874:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004878:	2b00      	cmp	r3, #0
 800487a:	d115      	bne.n	80048a8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800487c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004880:	f003 0320 	and.w	r3, r3, #32
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00f      	beq.n	80048a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b00      	cmp	r3, #0
 8004892:	d009      	beq.n	80048a8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 82ca 	beq.w	8004e32 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	4798      	blx	r3
      }
      return;
 80048a6:	e2c4      	b.n	8004e32 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80048a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 8117 	beq.w	8004ae0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80048b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80048be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80048c2:	4b85      	ldr	r3, [pc, #532]	@ (8004ad8 <HAL_UART_IRQHandler+0x298>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 810a 	beq.w	8004ae0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80048cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d011      	beq.n	80048fc <HAL_UART_IRQHandler+0xbc>
 80048d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00b      	beq.n	80048fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2201      	movs	r2, #1
 80048ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048f2:	f043 0201 	orr.w	r2, r3, #1
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d011      	beq.n	800492c <HAL_UART_IRQHandler+0xec>
 8004908:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00b      	beq.n	800492c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2202      	movs	r2, #2
 800491a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004922:	f043 0204 	orr.w	r2, r3, #4
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800492c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b00      	cmp	r3, #0
 8004936:	d011      	beq.n	800495c <HAL_UART_IRQHandler+0x11c>
 8004938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00b      	beq.n	800495c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2204      	movs	r2, #4
 800494a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004952:	f043 0202 	orr.w	r2, r3, #2
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800495c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004960:	f003 0308 	and.w	r3, r3, #8
 8004964:	2b00      	cmp	r3, #0
 8004966:	d017      	beq.n	8004998 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800496c:	f003 0320 	and.w	r3, r3, #32
 8004970:	2b00      	cmp	r3, #0
 8004972:	d105      	bne.n	8004980 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004978:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00b      	beq.n	8004998 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2208      	movs	r2, #8
 8004986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800498e:	f043 0208 	orr.w	r2, r3, #8
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800499c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d012      	beq.n	80049ca <HAL_UART_IRQHandler+0x18a>
 80049a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00c      	beq.n	80049ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049c0:	f043 0220 	orr.w	r2, r3, #32
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 8230 	beq.w	8004e36 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80049d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049da:	f003 0320 	and.w	r3, r3, #32
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00d      	beq.n	80049fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049e6:	f003 0320 	and.w	r3, r3, #32
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d007      	beq.n	80049fe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a04:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a12:	2b40      	cmp	r3, #64	@ 0x40
 8004a14:	d005      	beq.n	8004a22 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a1a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d04f      	beq.n	8004ac2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 fea1 	bl	800576a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a32:	2b40      	cmp	r3, #64	@ 0x40
 8004a34:	d141      	bne.n	8004aba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	3308      	adds	r3, #8
 8004a3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a44:	e853 3f00 	ldrex	r3, [r3]
 8004a48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004a4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3308      	adds	r3, #8
 8004a5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a62:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004a66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004a72:	e841 2300 	strex	r3, r2, [r1]
 8004a76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004a7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1d9      	bne.n	8004a36 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d013      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a8e:	4a13      	ldr	r2, [pc, #76]	@ (8004adc <HAL_UART_IRQHandler+0x29c>)
 8004a90:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fe f8b3 	bl	8002c02 <HAL_DMA_Abort_IT>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d017      	beq.n	8004ad2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004aac:	4610      	mov	r0, r2
 8004aae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab0:	e00f      	b.n	8004ad2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f9d4 	bl	8004e60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab8:	e00b      	b.n	8004ad2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f9d0 	bl	8004e60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac0:	e007      	b.n	8004ad2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f9cc 	bl	8004e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004ad0:	e1b1      	b.n	8004e36 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad2:	bf00      	nop
    return;
 8004ad4:	e1af      	b.n	8004e36 <HAL_UART_IRQHandler+0x5f6>
 8004ad6:	bf00      	nop
 8004ad8:	04000120 	.word	0x04000120
 8004adc:	08005833 	.word	0x08005833

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	f040 816a 	bne.w	8004dbe <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aee:	f003 0310 	and.w	r3, r3, #16
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 8163 	beq.w	8004dbe <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004afc:	f003 0310 	and.w	r3, r3, #16
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 815c 	beq.w	8004dbe <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2210      	movs	r2, #16
 8004b0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b18:	2b40      	cmp	r3, #64	@ 0x40
 8004b1a:	f040 80d4 	bne.w	8004cc6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b2a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 80ad 	beq.w	8004c8e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004b3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	f080 80a5 	bcs.w	8004c8e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b4a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0320 	and.w	r3, r3, #32
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f040 8086 	bne.w	8004c6c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b6c:	e853 3f00 	ldrex	r3, [r3]
 8004b70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004b74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	461a      	mov	r2, r3
 8004b86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004b8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b8e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b92:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004b96:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b9a:	e841 2300 	strex	r3, r2, [r1]
 8004b9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004ba2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1da      	bne.n	8004b60 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	3308      	adds	r3, #8
 8004bb0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bb4:	e853 3f00 	ldrex	r3, [r3]
 8004bb8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004bba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bbc:	f023 0301 	bic.w	r3, r3, #1
 8004bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3308      	adds	r3, #8
 8004bca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004bce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004bd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004bd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004bda:	e841 2300 	strex	r3, r2, [r1]
 8004bde:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004be0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1e1      	bne.n	8004baa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3308      	adds	r3, #8
 8004bec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bf0:	e853 3f00 	ldrex	r3, [r3]
 8004bf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004bf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3308      	adds	r3, #8
 8004c06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004c0a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004c0c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004c10:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004c12:	e841 2300 	strex	r3, r2, [r1]
 8004c16:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004c18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1e3      	bne.n	8004be6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c34:	e853 3f00 	ldrex	r3, [r3]
 8004c38:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c3c:	f023 0310 	bic.w	r3, r3, #16
 8004c40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c50:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c56:	e841 2300 	strex	r3, r2, [r1]
 8004c5a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1e4      	bne.n	8004c2c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fd ff8d 	bl	8002b86 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	4619      	mov	r1, r3
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f8f4 	bl	8004e74 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004c8c:	e0d5      	b.n	8004e3a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004c94:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	f040 80ce 	bne.w	8004e3a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0320 	and.w	r3, r3, #32
 8004caa:	2b20      	cmp	r3, #32
 8004cac:	f040 80c5 	bne.w	8004e3a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f8d8 	bl	8004e74 <HAL_UARTEx_RxEventCallback>
      return;
 8004cc4:	e0b9      	b.n	8004e3a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 80ab 	beq.w	8004e3e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004ce8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 80a6 	beq.w	8004e3e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cfa:	e853 3f00 	ldrex	r3, [r3]
 8004cfe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004d14:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d16:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d1c:	e841 2300 	strex	r3, r2, [r1]
 8004d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1e4      	bne.n	8004cf2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3308      	adds	r3, #8
 8004d2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d32:	e853 3f00 	ldrex	r3, [r3]
 8004d36:	623b      	str	r3, [r7, #32]
   return(result);
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	f023 0301 	bic.w	r3, r3, #1
 8004d3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	3308      	adds	r3, #8
 8004d48:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004d4c:	633a      	str	r2, [r7, #48]	@ 0x30
 8004d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d54:	e841 2300 	strex	r3, r2, [r1]
 8004d58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1e3      	bne.n	8004d28 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	e853 3f00 	ldrex	r3, [r3]
 8004d80:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f023 0310 	bic.w	r3, r3, #16
 8004d88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	461a      	mov	r2, r3
 8004d92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d96:	61fb      	str	r3, [r7, #28]
 8004d98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9a:	69b9      	ldr	r1, [r7, #24]
 8004d9c:	69fa      	ldr	r2, [r7, #28]
 8004d9e:	e841 2300 	strex	r3, r2, [r1]
 8004da2:	617b      	str	r3, [r7, #20]
   return(result);
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1e4      	bne.n	8004d74 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2202      	movs	r2, #2
 8004dae:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004db0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004db4:	4619      	mov	r1, r3
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f85c 	bl	8004e74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dbc:	e03f      	b.n	8004e3e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00e      	beq.n	8004de8 <HAL_UART_IRQHandler+0x5a8>
 8004dca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d008      	beq.n	8004de8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004dde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 fd66 	bl	80058b2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004de6:	e02d      	b.n	8004e44 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00e      	beq.n	8004e12 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004df8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d008      	beq.n	8004e12 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01c      	beq.n	8004e42 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	4798      	blx	r3
    }
    return;
 8004e10:	e017      	b.n	8004e42 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d012      	beq.n	8004e44 <HAL_UART_IRQHandler+0x604>
 8004e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00c      	beq.n	8004e44 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 fd17 	bl	800585e <UART_EndTransmit_IT>
    return;
 8004e30:	e008      	b.n	8004e44 <HAL_UART_IRQHandler+0x604>
      return;
 8004e32:	bf00      	nop
 8004e34:	e006      	b.n	8004e44 <HAL_UART_IRQHandler+0x604>
    return;
 8004e36:	bf00      	nop
 8004e38:	e004      	b.n	8004e44 <HAL_UART_IRQHandler+0x604>
      return;
 8004e3a:	bf00      	nop
 8004e3c:	e002      	b.n	8004e44 <HAL_UART_IRQHandler+0x604>
      return;
 8004e3e:	bf00      	nop
 8004e40:	e000      	b.n	8004e44 <HAL_UART_IRQHandler+0x604>
    return;
 8004e42:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004e44:	37e8      	adds	r7, #232	@ 0xe8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop

08004e4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e90:	b08a      	sub	sp, #40	@ 0x28
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	4ba4      	ldr	r3, [pc, #656]	@ (800514c <UART_SetConfig+0x2c0>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	6812      	ldr	r2, [r2, #0]
 8004ec2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ec4:	430b      	orrs	r3, r1
 8004ec6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	68da      	ldr	r2, [r3, #12]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a99      	ldr	r2, [pc, #612]	@ (8005150 <UART_SetConfig+0x2c4>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d004      	beq.n	8004ef8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a90      	ldr	r2, [pc, #576]	@ (8005154 <UART_SetConfig+0x2c8>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d126      	bne.n	8004f64 <UART_SetConfig+0xd8>
 8004f16:	4b90      	ldr	r3, [pc, #576]	@ (8005158 <UART_SetConfig+0x2cc>)
 8004f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f1c:	f003 0303 	and.w	r3, r3, #3
 8004f20:	2b03      	cmp	r3, #3
 8004f22:	d81b      	bhi.n	8004f5c <UART_SetConfig+0xd0>
 8004f24:	a201      	add	r2, pc, #4	@ (adr r2, 8004f2c <UART_SetConfig+0xa0>)
 8004f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2a:	bf00      	nop
 8004f2c:	08004f3d 	.word	0x08004f3d
 8004f30:	08004f4d 	.word	0x08004f4d
 8004f34:	08004f45 	.word	0x08004f45
 8004f38:	08004f55 	.word	0x08004f55
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f42:	e116      	b.n	8005172 <UART_SetConfig+0x2e6>
 8004f44:	2302      	movs	r3, #2
 8004f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f4a:	e112      	b.n	8005172 <UART_SetConfig+0x2e6>
 8004f4c:	2304      	movs	r3, #4
 8004f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f52:	e10e      	b.n	8005172 <UART_SetConfig+0x2e6>
 8004f54:	2308      	movs	r3, #8
 8004f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f5a:	e10a      	b.n	8005172 <UART_SetConfig+0x2e6>
 8004f5c:	2310      	movs	r3, #16
 8004f5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f62:	e106      	b.n	8005172 <UART_SetConfig+0x2e6>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a7c      	ldr	r2, [pc, #496]	@ (800515c <UART_SetConfig+0x2d0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d138      	bne.n	8004fe0 <UART_SetConfig+0x154>
 8004f6e:	4b7a      	ldr	r3, [pc, #488]	@ (8005158 <UART_SetConfig+0x2cc>)
 8004f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f74:	f003 030c 	and.w	r3, r3, #12
 8004f78:	2b0c      	cmp	r3, #12
 8004f7a:	d82d      	bhi.n	8004fd8 <UART_SetConfig+0x14c>
 8004f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f84 <UART_SetConfig+0xf8>)
 8004f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f82:	bf00      	nop
 8004f84:	08004fb9 	.word	0x08004fb9
 8004f88:	08004fd9 	.word	0x08004fd9
 8004f8c:	08004fd9 	.word	0x08004fd9
 8004f90:	08004fd9 	.word	0x08004fd9
 8004f94:	08004fc9 	.word	0x08004fc9
 8004f98:	08004fd9 	.word	0x08004fd9
 8004f9c:	08004fd9 	.word	0x08004fd9
 8004fa0:	08004fd9 	.word	0x08004fd9
 8004fa4:	08004fc1 	.word	0x08004fc1
 8004fa8:	08004fd9 	.word	0x08004fd9
 8004fac:	08004fd9 	.word	0x08004fd9
 8004fb0:	08004fd9 	.word	0x08004fd9
 8004fb4:	08004fd1 	.word	0x08004fd1
 8004fb8:	2300      	movs	r3, #0
 8004fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fbe:	e0d8      	b.n	8005172 <UART_SetConfig+0x2e6>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fc6:	e0d4      	b.n	8005172 <UART_SetConfig+0x2e6>
 8004fc8:	2304      	movs	r3, #4
 8004fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fce:	e0d0      	b.n	8005172 <UART_SetConfig+0x2e6>
 8004fd0:	2308      	movs	r3, #8
 8004fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fd6:	e0cc      	b.n	8005172 <UART_SetConfig+0x2e6>
 8004fd8:	2310      	movs	r3, #16
 8004fda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fde:	e0c8      	b.n	8005172 <UART_SetConfig+0x2e6>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a5e      	ldr	r2, [pc, #376]	@ (8005160 <UART_SetConfig+0x2d4>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d125      	bne.n	8005036 <UART_SetConfig+0x1aa>
 8004fea:	4b5b      	ldr	r3, [pc, #364]	@ (8005158 <UART_SetConfig+0x2cc>)
 8004fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004ff4:	2b30      	cmp	r3, #48	@ 0x30
 8004ff6:	d016      	beq.n	8005026 <UART_SetConfig+0x19a>
 8004ff8:	2b30      	cmp	r3, #48	@ 0x30
 8004ffa:	d818      	bhi.n	800502e <UART_SetConfig+0x1a2>
 8004ffc:	2b20      	cmp	r3, #32
 8004ffe:	d00a      	beq.n	8005016 <UART_SetConfig+0x18a>
 8005000:	2b20      	cmp	r3, #32
 8005002:	d814      	bhi.n	800502e <UART_SetConfig+0x1a2>
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <UART_SetConfig+0x182>
 8005008:	2b10      	cmp	r3, #16
 800500a:	d008      	beq.n	800501e <UART_SetConfig+0x192>
 800500c:	e00f      	b.n	800502e <UART_SetConfig+0x1a2>
 800500e:	2300      	movs	r3, #0
 8005010:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005014:	e0ad      	b.n	8005172 <UART_SetConfig+0x2e6>
 8005016:	2302      	movs	r3, #2
 8005018:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800501c:	e0a9      	b.n	8005172 <UART_SetConfig+0x2e6>
 800501e:	2304      	movs	r3, #4
 8005020:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005024:	e0a5      	b.n	8005172 <UART_SetConfig+0x2e6>
 8005026:	2308      	movs	r3, #8
 8005028:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800502c:	e0a1      	b.n	8005172 <UART_SetConfig+0x2e6>
 800502e:	2310      	movs	r3, #16
 8005030:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005034:	e09d      	b.n	8005172 <UART_SetConfig+0x2e6>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a4a      	ldr	r2, [pc, #296]	@ (8005164 <UART_SetConfig+0x2d8>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d125      	bne.n	800508c <UART_SetConfig+0x200>
 8005040:	4b45      	ldr	r3, [pc, #276]	@ (8005158 <UART_SetConfig+0x2cc>)
 8005042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005046:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800504a:	2bc0      	cmp	r3, #192	@ 0xc0
 800504c:	d016      	beq.n	800507c <UART_SetConfig+0x1f0>
 800504e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005050:	d818      	bhi.n	8005084 <UART_SetConfig+0x1f8>
 8005052:	2b80      	cmp	r3, #128	@ 0x80
 8005054:	d00a      	beq.n	800506c <UART_SetConfig+0x1e0>
 8005056:	2b80      	cmp	r3, #128	@ 0x80
 8005058:	d814      	bhi.n	8005084 <UART_SetConfig+0x1f8>
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <UART_SetConfig+0x1d8>
 800505e:	2b40      	cmp	r3, #64	@ 0x40
 8005060:	d008      	beq.n	8005074 <UART_SetConfig+0x1e8>
 8005062:	e00f      	b.n	8005084 <UART_SetConfig+0x1f8>
 8005064:	2300      	movs	r3, #0
 8005066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800506a:	e082      	b.n	8005172 <UART_SetConfig+0x2e6>
 800506c:	2302      	movs	r3, #2
 800506e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005072:	e07e      	b.n	8005172 <UART_SetConfig+0x2e6>
 8005074:	2304      	movs	r3, #4
 8005076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800507a:	e07a      	b.n	8005172 <UART_SetConfig+0x2e6>
 800507c:	2308      	movs	r3, #8
 800507e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005082:	e076      	b.n	8005172 <UART_SetConfig+0x2e6>
 8005084:	2310      	movs	r3, #16
 8005086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800508a:	e072      	b.n	8005172 <UART_SetConfig+0x2e6>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a35      	ldr	r2, [pc, #212]	@ (8005168 <UART_SetConfig+0x2dc>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d12a      	bne.n	80050ec <UART_SetConfig+0x260>
 8005096:	4b30      	ldr	r3, [pc, #192]	@ (8005158 <UART_SetConfig+0x2cc>)
 8005098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800509c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050a4:	d01a      	beq.n	80050dc <UART_SetConfig+0x250>
 80050a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050aa:	d81b      	bhi.n	80050e4 <UART_SetConfig+0x258>
 80050ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050b0:	d00c      	beq.n	80050cc <UART_SetConfig+0x240>
 80050b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050b6:	d815      	bhi.n	80050e4 <UART_SetConfig+0x258>
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d003      	beq.n	80050c4 <UART_SetConfig+0x238>
 80050bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050c0:	d008      	beq.n	80050d4 <UART_SetConfig+0x248>
 80050c2:	e00f      	b.n	80050e4 <UART_SetConfig+0x258>
 80050c4:	2300      	movs	r3, #0
 80050c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ca:	e052      	b.n	8005172 <UART_SetConfig+0x2e6>
 80050cc:	2302      	movs	r3, #2
 80050ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050d2:	e04e      	b.n	8005172 <UART_SetConfig+0x2e6>
 80050d4:	2304      	movs	r3, #4
 80050d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050da:	e04a      	b.n	8005172 <UART_SetConfig+0x2e6>
 80050dc:	2308      	movs	r3, #8
 80050de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050e2:	e046      	b.n	8005172 <UART_SetConfig+0x2e6>
 80050e4:	2310      	movs	r3, #16
 80050e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ea:	e042      	b.n	8005172 <UART_SetConfig+0x2e6>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a17      	ldr	r2, [pc, #92]	@ (8005150 <UART_SetConfig+0x2c4>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d13a      	bne.n	800516c <UART_SetConfig+0x2e0>
 80050f6:	4b18      	ldr	r3, [pc, #96]	@ (8005158 <UART_SetConfig+0x2cc>)
 80050f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005100:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005104:	d01a      	beq.n	800513c <UART_SetConfig+0x2b0>
 8005106:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800510a:	d81b      	bhi.n	8005144 <UART_SetConfig+0x2b8>
 800510c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005110:	d00c      	beq.n	800512c <UART_SetConfig+0x2a0>
 8005112:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005116:	d815      	bhi.n	8005144 <UART_SetConfig+0x2b8>
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <UART_SetConfig+0x298>
 800511c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005120:	d008      	beq.n	8005134 <UART_SetConfig+0x2a8>
 8005122:	e00f      	b.n	8005144 <UART_SetConfig+0x2b8>
 8005124:	2300      	movs	r3, #0
 8005126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800512a:	e022      	b.n	8005172 <UART_SetConfig+0x2e6>
 800512c:	2302      	movs	r3, #2
 800512e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005132:	e01e      	b.n	8005172 <UART_SetConfig+0x2e6>
 8005134:	2304      	movs	r3, #4
 8005136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800513a:	e01a      	b.n	8005172 <UART_SetConfig+0x2e6>
 800513c:	2308      	movs	r3, #8
 800513e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005142:	e016      	b.n	8005172 <UART_SetConfig+0x2e6>
 8005144:	2310      	movs	r3, #16
 8005146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800514a:	e012      	b.n	8005172 <UART_SetConfig+0x2e6>
 800514c:	efff69f3 	.word	0xefff69f3
 8005150:	40008000 	.word	0x40008000
 8005154:	40013800 	.word	0x40013800
 8005158:	40021000 	.word	0x40021000
 800515c:	40004400 	.word	0x40004400
 8005160:	40004800 	.word	0x40004800
 8005164:	40004c00 	.word	0x40004c00
 8005168:	40005000 	.word	0x40005000
 800516c:	2310      	movs	r3, #16
 800516e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a9f      	ldr	r2, [pc, #636]	@ (80053f4 <UART_SetConfig+0x568>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d17a      	bne.n	8005272 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800517c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005180:	2b08      	cmp	r3, #8
 8005182:	d824      	bhi.n	80051ce <UART_SetConfig+0x342>
 8005184:	a201      	add	r2, pc, #4	@ (adr r2, 800518c <UART_SetConfig+0x300>)
 8005186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518a:	bf00      	nop
 800518c:	080051b1 	.word	0x080051b1
 8005190:	080051cf 	.word	0x080051cf
 8005194:	080051b9 	.word	0x080051b9
 8005198:	080051cf 	.word	0x080051cf
 800519c:	080051bf 	.word	0x080051bf
 80051a0:	080051cf 	.word	0x080051cf
 80051a4:	080051cf 	.word	0x080051cf
 80051a8:	080051cf 	.word	0x080051cf
 80051ac:	080051c7 	.word	0x080051c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051b0:	f7fe fd26 	bl	8003c00 <HAL_RCC_GetPCLK1Freq>
 80051b4:	61f8      	str	r0, [r7, #28]
        break;
 80051b6:	e010      	b.n	80051da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051b8:	4b8f      	ldr	r3, [pc, #572]	@ (80053f8 <UART_SetConfig+0x56c>)
 80051ba:	61fb      	str	r3, [r7, #28]
        break;
 80051bc:	e00d      	b.n	80051da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051be:	f7fe fc87 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 80051c2:	61f8      	str	r0, [r7, #28]
        break;
 80051c4:	e009      	b.n	80051da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051ca:	61fb      	str	r3, [r7, #28]
        break;
 80051cc:	e005      	b.n	80051da <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80051d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 80fb 	beq.w	80053d8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	4613      	mov	r3, r2
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	4413      	add	r3, r2
 80051ec:	69fa      	ldr	r2, [r7, #28]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d305      	bcc.n	80051fe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051f8:	69fa      	ldr	r2, [r7, #28]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d903      	bls.n	8005206 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005204:	e0e8      	b.n	80053d8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	2200      	movs	r2, #0
 800520a:	461c      	mov	r4, r3
 800520c:	4615      	mov	r5, r2
 800520e:	f04f 0200 	mov.w	r2, #0
 8005212:	f04f 0300 	mov.w	r3, #0
 8005216:	022b      	lsls	r3, r5, #8
 8005218:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800521c:	0222      	lsls	r2, r4, #8
 800521e:	68f9      	ldr	r1, [r7, #12]
 8005220:	6849      	ldr	r1, [r1, #4]
 8005222:	0849      	lsrs	r1, r1, #1
 8005224:	2000      	movs	r0, #0
 8005226:	4688      	mov	r8, r1
 8005228:	4681      	mov	r9, r0
 800522a:	eb12 0a08 	adds.w	sl, r2, r8
 800522e:	eb43 0b09 	adc.w	fp, r3, r9
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	603b      	str	r3, [r7, #0]
 800523a:	607a      	str	r2, [r7, #4]
 800523c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005240:	4650      	mov	r0, sl
 8005242:	4659      	mov	r1, fp
 8005244:	f7fb f81c 	bl	8000280 <__aeabi_uldivmod>
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	4613      	mov	r3, r2
 800524e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005256:	d308      	bcc.n	800526a <UART_SetConfig+0x3de>
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800525e:	d204      	bcs.n	800526a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	60da      	str	r2, [r3, #12]
 8005268:	e0b6      	b.n	80053d8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005270:	e0b2      	b.n	80053d8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800527a:	d15e      	bne.n	800533a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800527c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005280:	2b08      	cmp	r3, #8
 8005282:	d828      	bhi.n	80052d6 <UART_SetConfig+0x44a>
 8005284:	a201      	add	r2, pc, #4	@ (adr r2, 800528c <UART_SetConfig+0x400>)
 8005286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528a:	bf00      	nop
 800528c:	080052b1 	.word	0x080052b1
 8005290:	080052b9 	.word	0x080052b9
 8005294:	080052c1 	.word	0x080052c1
 8005298:	080052d7 	.word	0x080052d7
 800529c:	080052c7 	.word	0x080052c7
 80052a0:	080052d7 	.word	0x080052d7
 80052a4:	080052d7 	.word	0x080052d7
 80052a8:	080052d7 	.word	0x080052d7
 80052ac:	080052cf 	.word	0x080052cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052b0:	f7fe fca6 	bl	8003c00 <HAL_RCC_GetPCLK1Freq>
 80052b4:	61f8      	str	r0, [r7, #28]
        break;
 80052b6:	e014      	b.n	80052e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052b8:	f7fe fcb8 	bl	8003c2c <HAL_RCC_GetPCLK2Freq>
 80052bc:	61f8      	str	r0, [r7, #28]
        break;
 80052be:	e010      	b.n	80052e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052c0:	4b4d      	ldr	r3, [pc, #308]	@ (80053f8 <UART_SetConfig+0x56c>)
 80052c2:	61fb      	str	r3, [r7, #28]
        break;
 80052c4:	e00d      	b.n	80052e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052c6:	f7fe fc03 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 80052ca:	61f8      	str	r0, [r7, #28]
        break;
 80052cc:	e009      	b.n	80052e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052d2:	61fb      	str	r3, [r7, #28]
        break;
 80052d4:	e005      	b.n	80052e2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80052e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d077      	beq.n	80053d8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	005a      	lsls	r2, r3, #1
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	085b      	lsrs	r3, r3, #1
 80052f2:	441a      	add	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	2b0f      	cmp	r3, #15
 8005302:	d916      	bls.n	8005332 <UART_SetConfig+0x4a6>
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800530a:	d212      	bcs.n	8005332 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	b29b      	uxth	r3, r3
 8005310:	f023 030f 	bic.w	r3, r3, #15
 8005314:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	085b      	lsrs	r3, r3, #1
 800531a:	b29b      	uxth	r3, r3
 800531c:	f003 0307 	and.w	r3, r3, #7
 8005320:	b29a      	uxth	r2, r3
 8005322:	8afb      	ldrh	r3, [r7, #22]
 8005324:	4313      	orrs	r3, r2
 8005326:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	8afa      	ldrh	r2, [r7, #22]
 800532e:	60da      	str	r2, [r3, #12]
 8005330:	e052      	b.n	80053d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005338:	e04e      	b.n	80053d8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800533a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800533e:	2b08      	cmp	r3, #8
 8005340:	d827      	bhi.n	8005392 <UART_SetConfig+0x506>
 8005342:	a201      	add	r2, pc, #4	@ (adr r2, 8005348 <UART_SetConfig+0x4bc>)
 8005344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005348:	0800536d 	.word	0x0800536d
 800534c:	08005375 	.word	0x08005375
 8005350:	0800537d 	.word	0x0800537d
 8005354:	08005393 	.word	0x08005393
 8005358:	08005383 	.word	0x08005383
 800535c:	08005393 	.word	0x08005393
 8005360:	08005393 	.word	0x08005393
 8005364:	08005393 	.word	0x08005393
 8005368:	0800538b 	.word	0x0800538b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800536c:	f7fe fc48 	bl	8003c00 <HAL_RCC_GetPCLK1Freq>
 8005370:	61f8      	str	r0, [r7, #28]
        break;
 8005372:	e014      	b.n	800539e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005374:	f7fe fc5a 	bl	8003c2c <HAL_RCC_GetPCLK2Freq>
 8005378:	61f8      	str	r0, [r7, #28]
        break;
 800537a:	e010      	b.n	800539e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800537c:	4b1e      	ldr	r3, [pc, #120]	@ (80053f8 <UART_SetConfig+0x56c>)
 800537e:	61fb      	str	r3, [r7, #28]
        break;
 8005380:	e00d      	b.n	800539e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005382:	f7fe fba5 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 8005386:	61f8      	str	r0, [r7, #28]
        break;
 8005388:	e009      	b.n	800539e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800538a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800538e:	61fb      	str	r3, [r7, #28]
        break;
 8005390:	e005      	b.n	800539e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005392:	2300      	movs	r3, #0
 8005394:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800539c:	bf00      	nop
    }

    if (pclk != 0U)
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d019      	beq.n	80053d8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	085a      	lsrs	r2, r3, #1
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	441a      	add	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	2b0f      	cmp	r3, #15
 80053bc:	d909      	bls.n	80053d2 <UART_SetConfig+0x546>
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053c4:	d205      	bcs.n	80053d2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	60da      	str	r2, [r3, #12]
 80053d0:	e002      	b.n	80053d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80053e4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3728      	adds	r7, #40	@ 0x28
 80053ec:	46bd      	mov	sp, r7
 80053ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053f2:	bf00      	nop
 80053f4:	40008000 	.word	0x40008000
 80053f8:	00f42400 	.word	0x00f42400

080053fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005408:	f003 0308 	and.w	r3, r3, #8
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00a      	beq.n	8005426 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00a      	beq.n	8005448 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00a      	beq.n	800546a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546e:	f003 0304 	and.w	r3, r3, #4
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00a      	beq.n	800548c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005490:	f003 0310 	and.w	r3, r3, #16
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00a      	beq.n	80054ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b2:	f003 0320 	and.w	r3, r3, #32
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00a      	beq.n	80054d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d01a      	beq.n	8005512 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054fa:	d10a      	bne.n	8005512 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	430a      	orrs	r2, r1
 8005532:	605a      	str	r2, [r3, #4]
  }
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b098      	sub	sp, #96	@ 0x60
 8005544:	af02      	add	r7, sp, #8
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005550:	f7fb fd3a 	bl	8000fc8 <HAL_GetTick>
 8005554:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0308 	and.w	r3, r3, #8
 8005560:	2b08      	cmp	r3, #8
 8005562:	d12e      	bne.n	80055c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005564:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800556c:	2200      	movs	r2, #0
 800556e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f88c 	bl	8005690 <UART_WaitOnFlagUntilTimeout>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d021      	beq.n	80055c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005586:	e853 3f00 	ldrex	r3, [r3]
 800558a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800558c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800558e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005592:	653b      	str	r3, [r7, #80]	@ 0x50
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	461a      	mov	r2, r3
 800559a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800559c:	647b      	str	r3, [r7, #68]	@ 0x44
 800559e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055a4:	e841 2300 	strex	r3, r2, [r1]
 80055a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1e6      	bne.n	800557e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2220      	movs	r2, #32
 80055b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e062      	b.n	8005688 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b04      	cmp	r3, #4
 80055ce:	d149      	bne.n	8005664 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055d8:	2200      	movs	r2, #0
 80055da:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f856 	bl	8005690 <UART_WaitOnFlagUntilTimeout>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d03c      	beq.n	8005664 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f2:	e853 3f00 	ldrex	r3, [r3]
 80055f6:	623b      	str	r3, [r7, #32]
   return(result);
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	461a      	mov	r2, r3
 8005606:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005608:	633b      	str	r3, [r7, #48]	@ 0x30
 800560a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800560e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005610:	e841 2300 	strex	r3, r2, [r1]
 8005614:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1e6      	bne.n	80055ea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3308      	adds	r3, #8
 8005622:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	e853 3f00 	ldrex	r3, [r3]
 800562a:	60fb      	str	r3, [r7, #12]
   return(result);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f023 0301 	bic.w	r3, r3, #1
 8005632:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	3308      	adds	r3, #8
 800563a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800563c:	61fa      	str	r2, [r7, #28]
 800563e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005640:	69b9      	ldr	r1, [r7, #24]
 8005642:	69fa      	ldr	r2, [r7, #28]
 8005644:	e841 2300 	strex	r3, r2, [r1]
 8005648:	617b      	str	r3, [r7, #20]
   return(result);
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e5      	bne.n	800561c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2220      	movs	r2, #32
 8005654:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e011      	b.n	8005688 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2220      	movs	r2, #32
 8005668:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2220      	movs	r2, #32
 800566e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3758      	adds	r7, #88	@ 0x58
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	603b      	str	r3, [r7, #0]
 800569c:	4613      	mov	r3, r2
 800569e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056a0:	e04f      	b.n	8005742 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a8:	d04b      	beq.n	8005742 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056aa:	f7fb fc8d 	bl	8000fc8 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d302      	bcc.n	80056c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e04e      	b.n	8005762 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0304 	and.w	r3, r3, #4
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d037      	beq.n	8005742 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	2b80      	cmp	r3, #128	@ 0x80
 80056d6:	d034      	beq.n	8005742 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b40      	cmp	r3, #64	@ 0x40
 80056dc:	d031      	beq.n	8005742 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	f003 0308 	and.w	r3, r3, #8
 80056e8:	2b08      	cmp	r3, #8
 80056ea:	d110      	bne.n	800570e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2208      	movs	r2, #8
 80056f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 f838 	bl	800576a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2208      	movs	r2, #8
 80056fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e029      	b.n	8005762 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	69db      	ldr	r3, [r3, #28]
 8005714:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005718:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800571c:	d111      	bne.n	8005742 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005726:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f000 f81e 	bl	800576a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2220      	movs	r2, #32
 8005732:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e00f      	b.n	8005762 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	69da      	ldr	r2, [r3, #28]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	4013      	ands	r3, r2
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	429a      	cmp	r2, r3
 8005750:	bf0c      	ite	eq
 8005752:	2301      	moveq	r3, #1
 8005754:	2300      	movne	r3, #0
 8005756:	b2db      	uxtb	r3, r3
 8005758:	461a      	mov	r2, r3
 800575a:	79fb      	ldrb	r3, [r7, #7]
 800575c:	429a      	cmp	r2, r3
 800575e:	d0a0      	beq.n	80056a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800576a:	b480      	push	{r7}
 800576c:	b095      	sub	sp, #84	@ 0x54
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800577a:	e853 3f00 	ldrex	r3, [r3]
 800577e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005782:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005786:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	461a      	mov	r2, r3
 800578e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005790:	643b      	str	r3, [r7, #64]	@ 0x40
 8005792:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005794:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005796:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005798:	e841 2300 	strex	r3, r2, [r1]
 800579c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800579e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1e6      	bne.n	8005772 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	3308      	adds	r3, #8
 80057aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	e853 3f00 	ldrex	r3, [r3]
 80057b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	f023 0301 	bic.w	r3, r3, #1
 80057ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3308      	adds	r3, #8
 80057c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057cc:	e841 2300 	strex	r3, r2, [r1]
 80057d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1e5      	bne.n	80057a4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d118      	bne.n	8005812 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	e853 3f00 	ldrex	r3, [r3]
 80057ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	f023 0310 	bic.w	r3, r3, #16
 80057f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	461a      	mov	r2, r3
 80057fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057fe:	61bb      	str	r3, [r7, #24]
 8005800:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005802:	6979      	ldr	r1, [r7, #20]
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	e841 2300 	strex	r3, r2, [r1]
 800580a:	613b      	str	r3, [r7, #16]
   return(result);
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1e6      	bne.n	80057e0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2220      	movs	r2, #32
 8005816:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005826:	bf00      	nop
 8005828:	3754      	adds	r7, #84	@ 0x54
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b084      	sub	sp, #16
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800583e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f7ff fb05 	bl	8004e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005856:	bf00      	nop
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b088      	sub	sp, #32
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	e853 3f00 	ldrex	r3, [r3]
 8005872:	60bb      	str	r3, [r7, #8]
   return(result);
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800587a:	61fb      	str	r3, [r7, #28]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	461a      	mov	r2, r3
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	61bb      	str	r3, [r7, #24]
 8005886:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005888:	6979      	ldr	r1, [r7, #20]
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	e841 2300 	strex	r3, r2, [r1]
 8005890:	613b      	str	r3, [r7, #16]
   return(result);
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1e6      	bne.n	8005866 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2220      	movs	r2, #32
 800589c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7ff fad1 	bl	8004e4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058aa:	bf00      	nop
 80058ac:	3720      	adds	r7, #32
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80058ba:	bf00      	nop
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
	...

080058c8 <siprintf>:
 80058c8:	b40e      	push	{r1, r2, r3}
 80058ca:	b500      	push	{lr}
 80058cc:	b09c      	sub	sp, #112	@ 0x70
 80058ce:	ab1d      	add	r3, sp, #116	@ 0x74
 80058d0:	9002      	str	r0, [sp, #8]
 80058d2:	9006      	str	r0, [sp, #24]
 80058d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80058d8:	4809      	ldr	r0, [pc, #36]	@ (8005900 <siprintf+0x38>)
 80058da:	9107      	str	r1, [sp, #28]
 80058dc:	9104      	str	r1, [sp, #16]
 80058de:	4909      	ldr	r1, [pc, #36]	@ (8005904 <siprintf+0x3c>)
 80058e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80058e4:	9105      	str	r1, [sp, #20]
 80058e6:	6800      	ldr	r0, [r0, #0]
 80058e8:	9301      	str	r3, [sp, #4]
 80058ea:	a902      	add	r1, sp, #8
 80058ec:	f000 f994 	bl	8005c18 <_svfiprintf_r>
 80058f0:	9b02      	ldr	r3, [sp, #8]
 80058f2:	2200      	movs	r2, #0
 80058f4:	701a      	strb	r2, [r3, #0]
 80058f6:	b01c      	add	sp, #112	@ 0x70
 80058f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80058fc:	b003      	add	sp, #12
 80058fe:	4770      	bx	lr
 8005900:	2000000c 	.word	0x2000000c
 8005904:	ffff0208 	.word	0xffff0208

08005908 <memset>:
 8005908:	4402      	add	r2, r0
 800590a:	4603      	mov	r3, r0
 800590c:	4293      	cmp	r3, r2
 800590e:	d100      	bne.n	8005912 <memset+0xa>
 8005910:	4770      	bx	lr
 8005912:	f803 1b01 	strb.w	r1, [r3], #1
 8005916:	e7f9      	b.n	800590c <memset+0x4>

08005918 <__errno>:
 8005918:	4b01      	ldr	r3, [pc, #4]	@ (8005920 <__errno+0x8>)
 800591a:	6818      	ldr	r0, [r3, #0]
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	2000000c 	.word	0x2000000c

08005924 <__libc_init_array>:
 8005924:	b570      	push	{r4, r5, r6, lr}
 8005926:	4d0d      	ldr	r5, [pc, #52]	@ (800595c <__libc_init_array+0x38>)
 8005928:	4c0d      	ldr	r4, [pc, #52]	@ (8005960 <__libc_init_array+0x3c>)
 800592a:	1b64      	subs	r4, r4, r5
 800592c:	10a4      	asrs	r4, r4, #2
 800592e:	2600      	movs	r6, #0
 8005930:	42a6      	cmp	r6, r4
 8005932:	d109      	bne.n	8005948 <__libc_init_array+0x24>
 8005934:	4d0b      	ldr	r5, [pc, #44]	@ (8005964 <__libc_init_array+0x40>)
 8005936:	4c0c      	ldr	r4, [pc, #48]	@ (8005968 <__libc_init_array+0x44>)
 8005938:	f000 fc66 	bl	8006208 <_init>
 800593c:	1b64      	subs	r4, r4, r5
 800593e:	10a4      	asrs	r4, r4, #2
 8005940:	2600      	movs	r6, #0
 8005942:	42a6      	cmp	r6, r4
 8005944:	d105      	bne.n	8005952 <__libc_init_array+0x2e>
 8005946:	bd70      	pop	{r4, r5, r6, pc}
 8005948:	f855 3b04 	ldr.w	r3, [r5], #4
 800594c:	4798      	blx	r3
 800594e:	3601      	adds	r6, #1
 8005950:	e7ee      	b.n	8005930 <__libc_init_array+0xc>
 8005952:	f855 3b04 	ldr.w	r3, [r5], #4
 8005956:	4798      	blx	r3
 8005958:	3601      	adds	r6, #1
 800595a:	e7f2      	b.n	8005942 <__libc_init_array+0x1e>
 800595c:	080062c4 	.word	0x080062c4
 8005960:	080062c4 	.word	0x080062c4
 8005964:	080062c4 	.word	0x080062c4
 8005968:	080062c8 	.word	0x080062c8

0800596c <__retarget_lock_acquire_recursive>:
 800596c:	4770      	bx	lr

0800596e <__retarget_lock_release_recursive>:
 800596e:	4770      	bx	lr

08005970 <_free_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	4605      	mov	r5, r0
 8005974:	2900      	cmp	r1, #0
 8005976:	d041      	beq.n	80059fc <_free_r+0x8c>
 8005978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800597c:	1f0c      	subs	r4, r1, #4
 800597e:	2b00      	cmp	r3, #0
 8005980:	bfb8      	it	lt
 8005982:	18e4      	addlt	r4, r4, r3
 8005984:	f000 f8e0 	bl	8005b48 <__malloc_lock>
 8005988:	4a1d      	ldr	r2, [pc, #116]	@ (8005a00 <_free_r+0x90>)
 800598a:	6813      	ldr	r3, [r2, #0]
 800598c:	b933      	cbnz	r3, 800599c <_free_r+0x2c>
 800598e:	6063      	str	r3, [r4, #4]
 8005990:	6014      	str	r4, [r2, #0]
 8005992:	4628      	mov	r0, r5
 8005994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005998:	f000 b8dc 	b.w	8005b54 <__malloc_unlock>
 800599c:	42a3      	cmp	r3, r4
 800599e:	d908      	bls.n	80059b2 <_free_r+0x42>
 80059a0:	6820      	ldr	r0, [r4, #0]
 80059a2:	1821      	adds	r1, r4, r0
 80059a4:	428b      	cmp	r3, r1
 80059a6:	bf01      	itttt	eq
 80059a8:	6819      	ldreq	r1, [r3, #0]
 80059aa:	685b      	ldreq	r3, [r3, #4]
 80059ac:	1809      	addeq	r1, r1, r0
 80059ae:	6021      	streq	r1, [r4, #0]
 80059b0:	e7ed      	b.n	800598e <_free_r+0x1e>
 80059b2:	461a      	mov	r2, r3
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	b10b      	cbz	r3, 80059bc <_free_r+0x4c>
 80059b8:	42a3      	cmp	r3, r4
 80059ba:	d9fa      	bls.n	80059b2 <_free_r+0x42>
 80059bc:	6811      	ldr	r1, [r2, #0]
 80059be:	1850      	adds	r0, r2, r1
 80059c0:	42a0      	cmp	r0, r4
 80059c2:	d10b      	bne.n	80059dc <_free_r+0x6c>
 80059c4:	6820      	ldr	r0, [r4, #0]
 80059c6:	4401      	add	r1, r0
 80059c8:	1850      	adds	r0, r2, r1
 80059ca:	4283      	cmp	r3, r0
 80059cc:	6011      	str	r1, [r2, #0]
 80059ce:	d1e0      	bne.n	8005992 <_free_r+0x22>
 80059d0:	6818      	ldr	r0, [r3, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	6053      	str	r3, [r2, #4]
 80059d6:	4408      	add	r0, r1
 80059d8:	6010      	str	r0, [r2, #0]
 80059da:	e7da      	b.n	8005992 <_free_r+0x22>
 80059dc:	d902      	bls.n	80059e4 <_free_r+0x74>
 80059de:	230c      	movs	r3, #12
 80059e0:	602b      	str	r3, [r5, #0]
 80059e2:	e7d6      	b.n	8005992 <_free_r+0x22>
 80059e4:	6820      	ldr	r0, [r4, #0]
 80059e6:	1821      	adds	r1, r4, r0
 80059e8:	428b      	cmp	r3, r1
 80059ea:	bf04      	itt	eq
 80059ec:	6819      	ldreq	r1, [r3, #0]
 80059ee:	685b      	ldreq	r3, [r3, #4]
 80059f0:	6063      	str	r3, [r4, #4]
 80059f2:	bf04      	itt	eq
 80059f4:	1809      	addeq	r1, r1, r0
 80059f6:	6021      	streq	r1, [r4, #0]
 80059f8:	6054      	str	r4, [r2, #4]
 80059fa:	e7ca      	b.n	8005992 <_free_r+0x22>
 80059fc:	bd38      	pop	{r3, r4, r5, pc}
 80059fe:	bf00      	nop
 8005a00:	20000330 	.word	0x20000330

08005a04 <sbrk_aligned>:
 8005a04:	b570      	push	{r4, r5, r6, lr}
 8005a06:	4e0f      	ldr	r6, [pc, #60]	@ (8005a44 <sbrk_aligned+0x40>)
 8005a08:	460c      	mov	r4, r1
 8005a0a:	6831      	ldr	r1, [r6, #0]
 8005a0c:	4605      	mov	r5, r0
 8005a0e:	b911      	cbnz	r1, 8005a16 <sbrk_aligned+0x12>
 8005a10:	f000 fba6 	bl	8006160 <_sbrk_r>
 8005a14:	6030      	str	r0, [r6, #0]
 8005a16:	4621      	mov	r1, r4
 8005a18:	4628      	mov	r0, r5
 8005a1a:	f000 fba1 	bl	8006160 <_sbrk_r>
 8005a1e:	1c43      	adds	r3, r0, #1
 8005a20:	d103      	bne.n	8005a2a <sbrk_aligned+0x26>
 8005a22:	f04f 34ff 	mov.w	r4, #4294967295
 8005a26:	4620      	mov	r0, r4
 8005a28:	bd70      	pop	{r4, r5, r6, pc}
 8005a2a:	1cc4      	adds	r4, r0, #3
 8005a2c:	f024 0403 	bic.w	r4, r4, #3
 8005a30:	42a0      	cmp	r0, r4
 8005a32:	d0f8      	beq.n	8005a26 <sbrk_aligned+0x22>
 8005a34:	1a21      	subs	r1, r4, r0
 8005a36:	4628      	mov	r0, r5
 8005a38:	f000 fb92 	bl	8006160 <_sbrk_r>
 8005a3c:	3001      	adds	r0, #1
 8005a3e:	d1f2      	bne.n	8005a26 <sbrk_aligned+0x22>
 8005a40:	e7ef      	b.n	8005a22 <sbrk_aligned+0x1e>
 8005a42:	bf00      	nop
 8005a44:	2000032c 	.word	0x2000032c

08005a48 <_malloc_r>:
 8005a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a4c:	1ccd      	adds	r5, r1, #3
 8005a4e:	f025 0503 	bic.w	r5, r5, #3
 8005a52:	3508      	adds	r5, #8
 8005a54:	2d0c      	cmp	r5, #12
 8005a56:	bf38      	it	cc
 8005a58:	250c      	movcc	r5, #12
 8005a5a:	2d00      	cmp	r5, #0
 8005a5c:	4606      	mov	r6, r0
 8005a5e:	db01      	blt.n	8005a64 <_malloc_r+0x1c>
 8005a60:	42a9      	cmp	r1, r5
 8005a62:	d904      	bls.n	8005a6e <_malloc_r+0x26>
 8005a64:	230c      	movs	r3, #12
 8005a66:	6033      	str	r3, [r6, #0]
 8005a68:	2000      	movs	r0, #0
 8005a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b44 <_malloc_r+0xfc>
 8005a72:	f000 f869 	bl	8005b48 <__malloc_lock>
 8005a76:	f8d8 3000 	ldr.w	r3, [r8]
 8005a7a:	461c      	mov	r4, r3
 8005a7c:	bb44      	cbnz	r4, 8005ad0 <_malloc_r+0x88>
 8005a7e:	4629      	mov	r1, r5
 8005a80:	4630      	mov	r0, r6
 8005a82:	f7ff ffbf 	bl	8005a04 <sbrk_aligned>
 8005a86:	1c43      	adds	r3, r0, #1
 8005a88:	4604      	mov	r4, r0
 8005a8a:	d158      	bne.n	8005b3e <_malloc_r+0xf6>
 8005a8c:	f8d8 4000 	ldr.w	r4, [r8]
 8005a90:	4627      	mov	r7, r4
 8005a92:	2f00      	cmp	r7, #0
 8005a94:	d143      	bne.n	8005b1e <_malloc_r+0xd6>
 8005a96:	2c00      	cmp	r4, #0
 8005a98:	d04b      	beq.n	8005b32 <_malloc_r+0xea>
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	4639      	mov	r1, r7
 8005a9e:	4630      	mov	r0, r6
 8005aa0:	eb04 0903 	add.w	r9, r4, r3
 8005aa4:	f000 fb5c 	bl	8006160 <_sbrk_r>
 8005aa8:	4581      	cmp	r9, r0
 8005aaa:	d142      	bne.n	8005b32 <_malloc_r+0xea>
 8005aac:	6821      	ldr	r1, [r4, #0]
 8005aae:	1a6d      	subs	r5, r5, r1
 8005ab0:	4629      	mov	r1, r5
 8005ab2:	4630      	mov	r0, r6
 8005ab4:	f7ff ffa6 	bl	8005a04 <sbrk_aligned>
 8005ab8:	3001      	adds	r0, #1
 8005aba:	d03a      	beq.n	8005b32 <_malloc_r+0xea>
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	442b      	add	r3, r5
 8005ac0:	6023      	str	r3, [r4, #0]
 8005ac2:	f8d8 3000 	ldr.w	r3, [r8]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	bb62      	cbnz	r2, 8005b24 <_malloc_r+0xdc>
 8005aca:	f8c8 7000 	str.w	r7, [r8]
 8005ace:	e00f      	b.n	8005af0 <_malloc_r+0xa8>
 8005ad0:	6822      	ldr	r2, [r4, #0]
 8005ad2:	1b52      	subs	r2, r2, r5
 8005ad4:	d420      	bmi.n	8005b18 <_malloc_r+0xd0>
 8005ad6:	2a0b      	cmp	r2, #11
 8005ad8:	d917      	bls.n	8005b0a <_malloc_r+0xc2>
 8005ada:	1961      	adds	r1, r4, r5
 8005adc:	42a3      	cmp	r3, r4
 8005ade:	6025      	str	r5, [r4, #0]
 8005ae0:	bf18      	it	ne
 8005ae2:	6059      	strne	r1, [r3, #4]
 8005ae4:	6863      	ldr	r3, [r4, #4]
 8005ae6:	bf08      	it	eq
 8005ae8:	f8c8 1000 	streq.w	r1, [r8]
 8005aec:	5162      	str	r2, [r4, r5]
 8005aee:	604b      	str	r3, [r1, #4]
 8005af0:	4630      	mov	r0, r6
 8005af2:	f000 f82f 	bl	8005b54 <__malloc_unlock>
 8005af6:	f104 000b 	add.w	r0, r4, #11
 8005afa:	1d23      	adds	r3, r4, #4
 8005afc:	f020 0007 	bic.w	r0, r0, #7
 8005b00:	1ac2      	subs	r2, r0, r3
 8005b02:	bf1c      	itt	ne
 8005b04:	1a1b      	subne	r3, r3, r0
 8005b06:	50a3      	strne	r3, [r4, r2]
 8005b08:	e7af      	b.n	8005a6a <_malloc_r+0x22>
 8005b0a:	6862      	ldr	r2, [r4, #4]
 8005b0c:	42a3      	cmp	r3, r4
 8005b0e:	bf0c      	ite	eq
 8005b10:	f8c8 2000 	streq.w	r2, [r8]
 8005b14:	605a      	strne	r2, [r3, #4]
 8005b16:	e7eb      	b.n	8005af0 <_malloc_r+0xa8>
 8005b18:	4623      	mov	r3, r4
 8005b1a:	6864      	ldr	r4, [r4, #4]
 8005b1c:	e7ae      	b.n	8005a7c <_malloc_r+0x34>
 8005b1e:	463c      	mov	r4, r7
 8005b20:	687f      	ldr	r7, [r7, #4]
 8005b22:	e7b6      	b.n	8005a92 <_malloc_r+0x4a>
 8005b24:	461a      	mov	r2, r3
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	42a3      	cmp	r3, r4
 8005b2a:	d1fb      	bne.n	8005b24 <_malloc_r+0xdc>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	6053      	str	r3, [r2, #4]
 8005b30:	e7de      	b.n	8005af0 <_malloc_r+0xa8>
 8005b32:	230c      	movs	r3, #12
 8005b34:	6033      	str	r3, [r6, #0]
 8005b36:	4630      	mov	r0, r6
 8005b38:	f000 f80c 	bl	8005b54 <__malloc_unlock>
 8005b3c:	e794      	b.n	8005a68 <_malloc_r+0x20>
 8005b3e:	6005      	str	r5, [r0, #0]
 8005b40:	e7d6      	b.n	8005af0 <_malloc_r+0xa8>
 8005b42:	bf00      	nop
 8005b44:	20000330 	.word	0x20000330

08005b48 <__malloc_lock>:
 8005b48:	4801      	ldr	r0, [pc, #4]	@ (8005b50 <__malloc_lock+0x8>)
 8005b4a:	f7ff bf0f 	b.w	800596c <__retarget_lock_acquire_recursive>
 8005b4e:	bf00      	nop
 8005b50:	20000328 	.word	0x20000328

08005b54 <__malloc_unlock>:
 8005b54:	4801      	ldr	r0, [pc, #4]	@ (8005b5c <__malloc_unlock+0x8>)
 8005b56:	f7ff bf0a 	b.w	800596e <__retarget_lock_release_recursive>
 8005b5a:	bf00      	nop
 8005b5c:	20000328 	.word	0x20000328

08005b60 <__ssputs_r>:
 8005b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b64:	688e      	ldr	r6, [r1, #8]
 8005b66:	461f      	mov	r7, r3
 8005b68:	42be      	cmp	r6, r7
 8005b6a:	680b      	ldr	r3, [r1, #0]
 8005b6c:	4682      	mov	sl, r0
 8005b6e:	460c      	mov	r4, r1
 8005b70:	4690      	mov	r8, r2
 8005b72:	d82d      	bhi.n	8005bd0 <__ssputs_r+0x70>
 8005b74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b78:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005b7c:	d026      	beq.n	8005bcc <__ssputs_r+0x6c>
 8005b7e:	6965      	ldr	r5, [r4, #20]
 8005b80:	6909      	ldr	r1, [r1, #16]
 8005b82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b86:	eba3 0901 	sub.w	r9, r3, r1
 8005b8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b8e:	1c7b      	adds	r3, r7, #1
 8005b90:	444b      	add	r3, r9
 8005b92:	106d      	asrs	r5, r5, #1
 8005b94:	429d      	cmp	r5, r3
 8005b96:	bf38      	it	cc
 8005b98:	461d      	movcc	r5, r3
 8005b9a:	0553      	lsls	r3, r2, #21
 8005b9c:	d527      	bpl.n	8005bee <__ssputs_r+0x8e>
 8005b9e:	4629      	mov	r1, r5
 8005ba0:	f7ff ff52 	bl	8005a48 <_malloc_r>
 8005ba4:	4606      	mov	r6, r0
 8005ba6:	b360      	cbz	r0, 8005c02 <__ssputs_r+0xa2>
 8005ba8:	6921      	ldr	r1, [r4, #16]
 8005baa:	464a      	mov	r2, r9
 8005bac:	f000 fae8 	bl	8006180 <memcpy>
 8005bb0:	89a3      	ldrh	r3, [r4, #12]
 8005bb2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005bb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bba:	81a3      	strh	r3, [r4, #12]
 8005bbc:	6126      	str	r6, [r4, #16]
 8005bbe:	6165      	str	r5, [r4, #20]
 8005bc0:	444e      	add	r6, r9
 8005bc2:	eba5 0509 	sub.w	r5, r5, r9
 8005bc6:	6026      	str	r6, [r4, #0]
 8005bc8:	60a5      	str	r5, [r4, #8]
 8005bca:	463e      	mov	r6, r7
 8005bcc:	42be      	cmp	r6, r7
 8005bce:	d900      	bls.n	8005bd2 <__ssputs_r+0x72>
 8005bd0:	463e      	mov	r6, r7
 8005bd2:	6820      	ldr	r0, [r4, #0]
 8005bd4:	4632      	mov	r2, r6
 8005bd6:	4641      	mov	r1, r8
 8005bd8:	f000 faa8 	bl	800612c <memmove>
 8005bdc:	68a3      	ldr	r3, [r4, #8]
 8005bde:	1b9b      	subs	r3, r3, r6
 8005be0:	60a3      	str	r3, [r4, #8]
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	4433      	add	r3, r6
 8005be6:	6023      	str	r3, [r4, #0]
 8005be8:	2000      	movs	r0, #0
 8005bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bee:	462a      	mov	r2, r5
 8005bf0:	f000 fad4 	bl	800619c <_realloc_r>
 8005bf4:	4606      	mov	r6, r0
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	d1e0      	bne.n	8005bbc <__ssputs_r+0x5c>
 8005bfa:	6921      	ldr	r1, [r4, #16]
 8005bfc:	4650      	mov	r0, sl
 8005bfe:	f7ff feb7 	bl	8005970 <_free_r>
 8005c02:	230c      	movs	r3, #12
 8005c04:	f8ca 3000 	str.w	r3, [sl]
 8005c08:	89a3      	ldrh	r3, [r4, #12]
 8005c0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c0e:	81a3      	strh	r3, [r4, #12]
 8005c10:	f04f 30ff 	mov.w	r0, #4294967295
 8005c14:	e7e9      	b.n	8005bea <__ssputs_r+0x8a>
	...

08005c18 <_svfiprintf_r>:
 8005c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c1c:	4698      	mov	r8, r3
 8005c1e:	898b      	ldrh	r3, [r1, #12]
 8005c20:	061b      	lsls	r3, r3, #24
 8005c22:	b09d      	sub	sp, #116	@ 0x74
 8005c24:	4607      	mov	r7, r0
 8005c26:	460d      	mov	r5, r1
 8005c28:	4614      	mov	r4, r2
 8005c2a:	d510      	bpl.n	8005c4e <_svfiprintf_r+0x36>
 8005c2c:	690b      	ldr	r3, [r1, #16]
 8005c2e:	b973      	cbnz	r3, 8005c4e <_svfiprintf_r+0x36>
 8005c30:	2140      	movs	r1, #64	@ 0x40
 8005c32:	f7ff ff09 	bl	8005a48 <_malloc_r>
 8005c36:	6028      	str	r0, [r5, #0]
 8005c38:	6128      	str	r0, [r5, #16]
 8005c3a:	b930      	cbnz	r0, 8005c4a <_svfiprintf_r+0x32>
 8005c3c:	230c      	movs	r3, #12
 8005c3e:	603b      	str	r3, [r7, #0]
 8005c40:	f04f 30ff 	mov.w	r0, #4294967295
 8005c44:	b01d      	add	sp, #116	@ 0x74
 8005c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c4a:	2340      	movs	r3, #64	@ 0x40
 8005c4c:	616b      	str	r3, [r5, #20]
 8005c4e:	2300      	movs	r3, #0
 8005c50:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c52:	2320      	movs	r3, #32
 8005c54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c58:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c5c:	2330      	movs	r3, #48	@ 0x30
 8005c5e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005dfc <_svfiprintf_r+0x1e4>
 8005c62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c66:	f04f 0901 	mov.w	r9, #1
 8005c6a:	4623      	mov	r3, r4
 8005c6c:	469a      	mov	sl, r3
 8005c6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c72:	b10a      	cbz	r2, 8005c78 <_svfiprintf_r+0x60>
 8005c74:	2a25      	cmp	r2, #37	@ 0x25
 8005c76:	d1f9      	bne.n	8005c6c <_svfiprintf_r+0x54>
 8005c78:	ebba 0b04 	subs.w	fp, sl, r4
 8005c7c:	d00b      	beq.n	8005c96 <_svfiprintf_r+0x7e>
 8005c7e:	465b      	mov	r3, fp
 8005c80:	4622      	mov	r2, r4
 8005c82:	4629      	mov	r1, r5
 8005c84:	4638      	mov	r0, r7
 8005c86:	f7ff ff6b 	bl	8005b60 <__ssputs_r>
 8005c8a:	3001      	adds	r0, #1
 8005c8c:	f000 80a7 	beq.w	8005dde <_svfiprintf_r+0x1c6>
 8005c90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c92:	445a      	add	r2, fp
 8005c94:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c96:	f89a 3000 	ldrb.w	r3, [sl]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f000 809f 	beq.w	8005dde <_svfiprintf_r+0x1c6>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005caa:	f10a 0a01 	add.w	sl, sl, #1
 8005cae:	9304      	str	r3, [sp, #16]
 8005cb0:	9307      	str	r3, [sp, #28]
 8005cb2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005cb6:	931a      	str	r3, [sp, #104]	@ 0x68
 8005cb8:	4654      	mov	r4, sl
 8005cba:	2205      	movs	r2, #5
 8005cbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cc0:	484e      	ldr	r0, [pc, #312]	@ (8005dfc <_svfiprintf_r+0x1e4>)
 8005cc2:	f7fa fa8d 	bl	80001e0 <memchr>
 8005cc6:	9a04      	ldr	r2, [sp, #16]
 8005cc8:	b9d8      	cbnz	r0, 8005d02 <_svfiprintf_r+0xea>
 8005cca:	06d0      	lsls	r0, r2, #27
 8005ccc:	bf44      	itt	mi
 8005cce:	2320      	movmi	r3, #32
 8005cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cd4:	0711      	lsls	r1, r2, #28
 8005cd6:	bf44      	itt	mi
 8005cd8:	232b      	movmi	r3, #43	@ 0x2b
 8005cda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cde:	f89a 3000 	ldrb.w	r3, [sl]
 8005ce2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ce4:	d015      	beq.n	8005d12 <_svfiprintf_r+0xfa>
 8005ce6:	9a07      	ldr	r2, [sp, #28]
 8005ce8:	4654      	mov	r4, sl
 8005cea:	2000      	movs	r0, #0
 8005cec:	f04f 0c0a 	mov.w	ip, #10
 8005cf0:	4621      	mov	r1, r4
 8005cf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cf6:	3b30      	subs	r3, #48	@ 0x30
 8005cf8:	2b09      	cmp	r3, #9
 8005cfa:	d94b      	bls.n	8005d94 <_svfiprintf_r+0x17c>
 8005cfc:	b1b0      	cbz	r0, 8005d2c <_svfiprintf_r+0x114>
 8005cfe:	9207      	str	r2, [sp, #28]
 8005d00:	e014      	b.n	8005d2c <_svfiprintf_r+0x114>
 8005d02:	eba0 0308 	sub.w	r3, r0, r8
 8005d06:	fa09 f303 	lsl.w	r3, r9, r3
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	9304      	str	r3, [sp, #16]
 8005d0e:	46a2      	mov	sl, r4
 8005d10:	e7d2      	b.n	8005cb8 <_svfiprintf_r+0xa0>
 8005d12:	9b03      	ldr	r3, [sp, #12]
 8005d14:	1d19      	adds	r1, r3, #4
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	9103      	str	r1, [sp, #12]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	bfbb      	ittet	lt
 8005d1e:	425b      	neglt	r3, r3
 8005d20:	f042 0202 	orrlt.w	r2, r2, #2
 8005d24:	9307      	strge	r3, [sp, #28]
 8005d26:	9307      	strlt	r3, [sp, #28]
 8005d28:	bfb8      	it	lt
 8005d2a:	9204      	strlt	r2, [sp, #16]
 8005d2c:	7823      	ldrb	r3, [r4, #0]
 8005d2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d30:	d10a      	bne.n	8005d48 <_svfiprintf_r+0x130>
 8005d32:	7863      	ldrb	r3, [r4, #1]
 8005d34:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d36:	d132      	bne.n	8005d9e <_svfiprintf_r+0x186>
 8005d38:	9b03      	ldr	r3, [sp, #12]
 8005d3a:	1d1a      	adds	r2, r3, #4
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	9203      	str	r2, [sp, #12]
 8005d40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d44:	3402      	adds	r4, #2
 8005d46:	9305      	str	r3, [sp, #20]
 8005d48:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005e0c <_svfiprintf_r+0x1f4>
 8005d4c:	7821      	ldrb	r1, [r4, #0]
 8005d4e:	2203      	movs	r2, #3
 8005d50:	4650      	mov	r0, sl
 8005d52:	f7fa fa45 	bl	80001e0 <memchr>
 8005d56:	b138      	cbz	r0, 8005d68 <_svfiprintf_r+0x150>
 8005d58:	9b04      	ldr	r3, [sp, #16]
 8005d5a:	eba0 000a 	sub.w	r0, r0, sl
 8005d5e:	2240      	movs	r2, #64	@ 0x40
 8005d60:	4082      	lsls	r2, r0
 8005d62:	4313      	orrs	r3, r2
 8005d64:	3401      	adds	r4, #1
 8005d66:	9304      	str	r3, [sp, #16]
 8005d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d6c:	4824      	ldr	r0, [pc, #144]	@ (8005e00 <_svfiprintf_r+0x1e8>)
 8005d6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d72:	2206      	movs	r2, #6
 8005d74:	f7fa fa34 	bl	80001e0 <memchr>
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	d036      	beq.n	8005dea <_svfiprintf_r+0x1d2>
 8005d7c:	4b21      	ldr	r3, [pc, #132]	@ (8005e04 <_svfiprintf_r+0x1ec>)
 8005d7e:	bb1b      	cbnz	r3, 8005dc8 <_svfiprintf_r+0x1b0>
 8005d80:	9b03      	ldr	r3, [sp, #12]
 8005d82:	3307      	adds	r3, #7
 8005d84:	f023 0307 	bic.w	r3, r3, #7
 8005d88:	3308      	adds	r3, #8
 8005d8a:	9303      	str	r3, [sp, #12]
 8005d8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d8e:	4433      	add	r3, r6
 8005d90:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d92:	e76a      	b.n	8005c6a <_svfiprintf_r+0x52>
 8005d94:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d98:	460c      	mov	r4, r1
 8005d9a:	2001      	movs	r0, #1
 8005d9c:	e7a8      	b.n	8005cf0 <_svfiprintf_r+0xd8>
 8005d9e:	2300      	movs	r3, #0
 8005da0:	3401      	adds	r4, #1
 8005da2:	9305      	str	r3, [sp, #20]
 8005da4:	4619      	mov	r1, r3
 8005da6:	f04f 0c0a 	mov.w	ip, #10
 8005daa:	4620      	mov	r0, r4
 8005dac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005db0:	3a30      	subs	r2, #48	@ 0x30
 8005db2:	2a09      	cmp	r2, #9
 8005db4:	d903      	bls.n	8005dbe <_svfiprintf_r+0x1a6>
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0c6      	beq.n	8005d48 <_svfiprintf_r+0x130>
 8005dba:	9105      	str	r1, [sp, #20]
 8005dbc:	e7c4      	b.n	8005d48 <_svfiprintf_r+0x130>
 8005dbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dc2:	4604      	mov	r4, r0
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e7f0      	b.n	8005daa <_svfiprintf_r+0x192>
 8005dc8:	ab03      	add	r3, sp, #12
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	462a      	mov	r2, r5
 8005dce:	4b0e      	ldr	r3, [pc, #56]	@ (8005e08 <_svfiprintf_r+0x1f0>)
 8005dd0:	a904      	add	r1, sp, #16
 8005dd2:	4638      	mov	r0, r7
 8005dd4:	f3af 8000 	nop.w
 8005dd8:	1c42      	adds	r2, r0, #1
 8005dda:	4606      	mov	r6, r0
 8005ddc:	d1d6      	bne.n	8005d8c <_svfiprintf_r+0x174>
 8005dde:	89ab      	ldrh	r3, [r5, #12]
 8005de0:	065b      	lsls	r3, r3, #25
 8005de2:	f53f af2d 	bmi.w	8005c40 <_svfiprintf_r+0x28>
 8005de6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005de8:	e72c      	b.n	8005c44 <_svfiprintf_r+0x2c>
 8005dea:	ab03      	add	r3, sp, #12
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	462a      	mov	r2, r5
 8005df0:	4b05      	ldr	r3, [pc, #20]	@ (8005e08 <_svfiprintf_r+0x1f0>)
 8005df2:	a904      	add	r1, sp, #16
 8005df4:	4638      	mov	r0, r7
 8005df6:	f000 f879 	bl	8005eec <_printf_i>
 8005dfa:	e7ed      	b.n	8005dd8 <_svfiprintf_r+0x1c0>
 8005dfc:	08006288 	.word	0x08006288
 8005e00:	08006292 	.word	0x08006292
 8005e04:	00000000 	.word	0x00000000
 8005e08:	08005b61 	.word	0x08005b61
 8005e0c:	0800628e 	.word	0x0800628e

08005e10 <_printf_common>:
 8005e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e14:	4616      	mov	r6, r2
 8005e16:	4698      	mov	r8, r3
 8005e18:	688a      	ldr	r2, [r1, #8]
 8005e1a:	690b      	ldr	r3, [r1, #16]
 8005e1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e20:	4293      	cmp	r3, r2
 8005e22:	bfb8      	it	lt
 8005e24:	4613      	movlt	r3, r2
 8005e26:	6033      	str	r3, [r6, #0]
 8005e28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e2c:	4607      	mov	r7, r0
 8005e2e:	460c      	mov	r4, r1
 8005e30:	b10a      	cbz	r2, 8005e36 <_printf_common+0x26>
 8005e32:	3301      	adds	r3, #1
 8005e34:	6033      	str	r3, [r6, #0]
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	0699      	lsls	r1, r3, #26
 8005e3a:	bf42      	ittt	mi
 8005e3c:	6833      	ldrmi	r3, [r6, #0]
 8005e3e:	3302      	addmi	r3, #2
 8005e40:	6033      	strmi	r3, [r6, #0]
 8005e42:	6825      	ldr	r5, [r4, #0]
 8005e44:	f015 0506 	ands.w	r5, r5, #6
 8005e48:	d106      	bne.n	8005e58 <_printf_common+0x48>
 8005e4a:	f104 0a19 	add.w	sl, r4, #25
 8005e4e:	68e3      	ldr	r3, [r4, #12]
 8005e50:	6832      	ldr	r2, [r6, #0]
 8005e52:	1a9b      	subs	r3, r3, r2
 8005e54:	42ab      	cmp	r3, r5
 8005e56:	dc26      	bgt.n	8005ea6 <_printf_common+0x96>
 8005e58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e5c:	6822      	ldr	r2, [r4, #0]
 8005e5e:	3b00      	subs	r3, #0
 8005e60:	bf18      	it	ne
 8005e62:	2301      	movne	r3, #1
 8005e64:	0692      	lsls	r2, r2, #26
 8005e66:	d42b      	bmi.n	8005ec0 <_printf_common+0xb0>
 8005e68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e6c:	4641      	mov	r1, r8
 8005e6e:	4638      	mov	r0, r7
 8005e70:	47c8      	blx	r9
 8005e72:	3001      	adds	r0, #1
 8005e74:	d01e      	beq.n	8005eb4 <_printf_common+0xa4>
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	6922      	ldr	r2, [r4, #16]
 8005e7a:	f003 0306 	and.w	r3, r3, #6
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	bf02      	ittt	eq
 8005e82:	68e5      	ldreq	r5, [r4, #12]
 8005e84:	6833      	ldreq	r3, [r6, #0]
 8005e86:	1aed      	subeq	r5, r5, r3
 8005e88:	68a3      	ldr	r3, [r4, #8]
 8005e8a:	bf0c      	ite	eq
 8005e8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e90:	2500      	movne	r5, #0
 8005e92:	4293      	cmp	r3, r2
 8005e94:	bfc4      	itt	gt
 8005e96:	1a9b      	subgt	r3, r3, r2
 8005e98:	18ed      	addgt	r5, r5, r3
 8005e9a:	2600      	movs	r6, #0
 8005e9c:	341a      	adds	r4, #26
 8005e9e:	42b5      	cmp	r5, r6
 8005ea0:	d11a      	bne.n	8005ed8 <_printf_common+0xc8>
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	e008      	b.n	8005eb8 <_printf_common+0xa8>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	4652      	mov	r2, sl
 8005eaa:	4641      	mov	r1, r8
 8005eac:	4638      	mov	r0, r7
 8005eae:	47c8      	blx	r9
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	d103      	bne.n	8005ebc <_printf_common+0xac>
 8005eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ebc:	3501      	adds	r5, #1
 8005ebe:	e7c6      	b.n	8005e4e <_printf_common+0x3e>
 8005ec0:	18e1      	adds	r1, r4, r3
 8005ec2:	1c5a      	adds	r2, r3, #1
 8005ec4:	2030      	movs	r0, #48	@ 0x30
 8005ec6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005eca:	4422      	add	r2, r4
 8005ecc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ed0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ed4:	3302      	adds	r3, #2
 8005ed6:	e7c7      	b.n	8005e68 <_printf_common+0x58>
 8005ed8:	2301      	movs	r3, #1
 8005eda:	4622      	mov	r2, r4
 8005edc:	4641      	mov	r1, r8
 8005ede:	4638      	mov	r0, r7
 8005ee0:	47c8      	blx	r9
 8005ee2:	3001      	adds	r0, #1
 8005ee4:	d0e6      	beq.n	8005eb4 <_printf_common+0xa4>
 8005ee6:	3601      	adds	r6, #1
 8005ee8:	e7d9      	b.n	8005e9e <_printf_common+0x8e>
	...

08005eec <_printf_i>:
 8005eec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef0:	7e0f      	ldrb	r7, [r1, #24]
 8005ef2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ef4:	2f78      	cmp	r7, #120	@ 0x78
 8005ef6:	4691      	mov	r9, r2
 8005ef8:	4680      	mov	r8, r0
 8005efa:	460c      	mov	r4, r1
 8005efc:	469a      	mov	sl, r3
 8005efe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f02:	d807      	bhi.n	8005f14 <_printf_i+0x28>
 8005f04:	2f62      	cmp	r7, #98	@ 0x62
 8005f06:	d80a      	bhi.n	8005f1e <_printf_i+0x32>
 8005f08:	2f00      	cmp	r7, #0
 8005f0a:	f000 80d2 	beq.w	80060b2 <_printf_i+0x1c6>
 8005f0e:	2f58      	cmp	r7, #88	@ 0x58
 8005f10:	f000 80b9 	beq.w	8006086 <_printf_i+0x19a>
 8005f14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f1c:	e03a      	b.n	8005f94 <_printf_i+0xa8>
 8005f1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f22:	2b15      	cmp	r3, #21
 8005f24:	d8f6      	bhi.n	8005f14 <_printf_i+0x28>
 8005f26:	a101      	add	r1, pc, #4	@ (adr r1, 8005f2c <_printf_i+0x40>)
 8005f28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f2c:	08005f85 	.word	0x08005f85
 8005f30:	08005f99 	.word	0x08005f99
 8005f34:	08005f15 	.word	0x08005f15
 8005f38:	08005f15 	.word	0x08005f15
 8005f3c:	08005f15 	.word	0x08005f15
 8005f40:	08005f15 	.word	0x08005f15
 8005f44:	08005f99 	.word	0x08005f99
 8005f48:	08005f15 	.word	0x08005f15
 8005f4c:	08005f15 	.word	0x08005f15
 8005f50:	08005f15 	.word	0x08005f15
 8005f54:	08005f15 	.word	0x08005f15
 8005f58:	08006099 	.word	0x08006099
 8005f5c:	08005fc3 	.word	0x08005fc3
 8005f60:	08006053 	.word	0x08006053
 8005f64:	08005f15 	.word	0x08005f15
 8005f68:	08005f15 	.word	0x08005f15
 8005f6c:	080060bb 	.word	0x080060bb
 8005f70:	08005f15 	.word	0x08005f15
 8005f74:	08005fc3 	.word	0x08005fc3
 8005f78:	08005f15 	.word	0x08005f15
 8005f7c:	08005f15 	.word	0x08005f15
 8005f80:	0800605b 	.word	0x0800605b
 8005f84:	6833      	ldr	r3, [r6, #0]
 8005f86:	1d1a      	adds	r2, r3, #4
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	6032      	str	r2, [r6, #0]
 8005f8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f94:	2301      	movs	r3, #1
 8005f96:	e09d      	b.n	80060d4 <_printf_i+0x1e8>
 8005f98:	6833      	ldr	r3, [r6, #0]
 8005f9a:	6820      	ldr	r0, [r4, #0]
 8005f9c:	1d19      	adds	r1, r3, #4
 8005f9e:	6031      	str	r1, [r6, #0]
 8005fa0:	0606      	lsls	r6, r0, #24
 8005fa2:	d501      	bpl.n	8005fa8 <_printf_i+0xbc>
 8005fa4:	681d      	ldr	r5, [r3, #0]
 8005fa6:	e003      	b.n	8005fb0 <_printf_i+0xc4>
 8005fa8:	0645      	lsls	r5, r0, #25
 8005faa:	d5fb      	bpl.n	8005fa4 <_printf_i+0xb8>
 8005fac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005fb0:	2d00      	cmp	r5, #0
 8005fb2:	da03      	bge.n	8005fbc <_printf_i+0xd0>
 8005fb4:	232d      	movs	r3, #45	@ 0x2d
 8005fb6:	426d      	negs	r5, r5
 8005fb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fbc:	4859      	ldr	r0, [pc, #356]	@ (8006124 <_printf_i+0x238>)
 8005fbe:	230a      	movs	r3, #10
 8005fc0:	e011      	b.n	8005fe6 <_printf_i+0xfa>
 8005fc2:	6821      	ldr	r1, [r4, #0]
 8005fc4:	6833      	ldr	r3, [r6, #0]
 8005fc6:	0608      	lsls	r0, r1, #24
 8005fc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8005fcc:	d402      	bmi.n	8005fd4 <_printf_i+0xe8>
 8005fce:	0649      	lsls	r1, r1, #25
 8005fd0:	bf48      	it	mi
 8005fd2:	b2ad      	uxthmi	r5, r5
 8005fd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8005fd6:	4853      	ldr	r0, [pc, #332]	@ (8006124 <_printf_i+0x238>)
 8005fd8:	6033      	str	r3, [r6, #0]
 8005fda:	bf14      	ite	ne
 8005fdc:	230a      	movne	r3, #10
 8005fde:	2308      	moveq	r3, #8
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005fe6:	6866      	ldr	r6, [r4, #4]
 8005fe8:	60a6      	str	r6, [r4, #8]
 8005fea:	2e00      	cmp	r6, #0
 8005fec:	bfa2      	ittt	ge
 8005fee:	6821      	ldrge	r1, [r4, #0]
 8005ff0:	f021 0104 	bicge.w	r1, r1, #4
 8005ff4:	6021      	strge	r1, [r4, #0]
 8005ff6:	b90d      	cbnz	r5, 8005ffc <_printf_i+0x110>
 8005ff8:	2e00      	cmp	r6, #0
 8005ffa:	d04b      	beq.n	8006094 <_printf_i+0x1a8>
 8005ffc:	4616      	mov	r6, r2
 8005ffe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006002:	fb03 5711 	mls	r7, r3, r1, r5
 8006006:	5dc7      	ldrb	r7, [r0, r7]
 8006008:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800600c:	462f      	mov	r7, r5
 800600e:	42bb      	cmp	r3, r7
 8006010:	460d      	mov	r5, r1
 8006012:	d9f4      	bls.n	8005ffe <_printf_i+0x112>
 8006014:	2b08      	cmp	r3, #8
 8006016:	d10b      	bne.n	8006030 <_printf_i+0x144>
 8006018:	6823      	ldr	r3, [r4, #0]
 800601a:	07df      	lsls	r7, r3, #31
 800601c:	d508      	bpl.n	8006030 <_printf_i+0x144>
 800601e:	6923      	ldr	r3, [r4, #16]
 8006020:	6861      	ldr	r1, [r4, #4]
 8006022:	4299      	cmp	r1, r3
 8006024:	bfde      	ittt	le
 8006026:	2330      	movle	r3, #48	@ 0x30
 8006028:	f806 3c01 	strble.w	r3, [r6, #-1]
 800602c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006030:	1b92      	subs	r2, r2, r6
 8006032:	6122      	str	r2, [r4, #16]
 8006034:	f8cd a000 	str.w	sl, [sp]
 8006038:	464b      	mov	r3, r9
 800603a:	aa03      	add	r2, sp, #12
 800603c:	4621      	mov	r1, r4
 800603e:	4640      	mov	r0, r8
 8006040:	f7ff fee6 	bl	8005e10 <_printf_common>
 8006044:	3001      	adds	r0, #1
 8006046:	d14a      	bne.n	80060de <_printf_i+0x1f2>
 8006048:	f04f 30ff 	mov.w	r0, #4294967295
 800604c:	b004      	add	sp, #16
 800604e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	f043 0320 	orr.w	r3, r3, #32
 8006058:	6023      	str	r3, [r4, #0]
 800605a:	4833      	ldr	r0, [pc, #204]	@ (8006128 <_printf_i+0x23c>)
 800605c:	2778      	movs	r7, #120	@ 0x78
 800605e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	6831      	ldr	r1, [r6, #0]
 8006066:	061f      	lsls	r7, r3, #24
 8006068:	f851 5b04 	ldr.w	r5, [r1], #4
 800606c:	d402      	bmi.n	8006074 <_printf_i+0x188>
 800606e:	065f      	lsls	r7, r3, #25
 8006070:	bf48      	it	mi
 8006072:	b2ad      	uxthmi	r5, r5
 8006074:	6031      	str	r1, [r6, #0]
 8006076:	07d9      	lsls	r1, r3, #31
 8006078:	bf44      	itt	mi
 800607a:	f043 0320 	orrmi.w	r3, r3, #32
 800607e:	6023      	strmi	r3, [r4, #0]
 8006080:	b11d      	cbz	r5, 800608a <_printf_i+0x19e>
 8006082:	2310      	movs	r3, #16
 8006084:	e7ac      	b.n	8005fe0 <_printf_i+0xf4>
 8006086:	4827      	ldr	r0, [pc, #156]	@ (8006124 <_printf_i+0x238>)
 8006088:	e7e9      	b.n	800605e <_printf_i+0x172>
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	f023 0320 	bic.w	r3, r3, #32
 8006090:	6023      	str	r3, [r4, #0]
 8006092:	e7f6      	b.n	8006082 <_printf_i+0x196>
 8006094:	4616      	mov	r6, r2
 8006096:	e7bd      	b.n	8006014 <_printf_i+0x128>
 8006098:	6833      	ldr	r3, [r6, #0]
 800609a:	6825      	ldr	r5, [r4, #0]
 800609c:	6961      	ldr	r1, [r4, #20]
 800609e:	1d18      	adds	r0, r3, #4
 80060a0:	6030      	str	r0, [r6, #0]
 80060a2:	062e      	lsls	r6, r5, #24
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	d501      	bpl.n	80060ac <_printf_i+0x1c0>
 80060a8:	6019      	str	r1, [r3, #0]
 80060aa:	e002      	b.n	80060b2 <_printf_i+0x1c6>
 80060ac:	0668      	lsls	r0, r5, #25
 80060ae:	d5fb      	bpl.n	80060a8 <_printf_i+0x1bc>
 80060b0:	8019      	strh	r1, [r3, #0]
 80060b2:	2300      	movs	r3, #0
 80060b4:	6123      	str	r3, [r4, #16]
 80060b6:	4616      	mov	r6, r2
 80060b8:	e7bc      	b.n	8006034 <_printf_i+0x148>
 80060ba:	6833      	ldr	r3, [r6, #0]
 80060bc:	1d1a      	adds	r2, r3, #4
 80060be:	6032      	str	r2, [r6, #0]
 80060c0:	681e      	ldr	r6, [r3, #0]
 80060c2:	6862      	ldr	r2, [r4, #4]
 80060c4:	2100      	movs	r1, #0
 80060c6:	4630      	mov	r0, r6
 80060c8:	f7fa f88a 	bl	80001e0 <memchr>
 80060cc:	b108      	cbz	r0, 80060d2 <_printf_i+0x1e6>
 80060ce:	1b80      	subs	r0, r0, r6
 80060d0:	6060      	str	r0, [r4, #4]
 80060d2:	6863      	ldr	r3, [r4, #4]
 80060d4:	6123      	str	r3, [r4, #16]
 80060d6:	2300      	movs	r3, #0
 80060d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060dc:	e7aa      	b.n	8006034 <_printf_i+0x148>
 80060de:	6923      	ldr	r3, [r4, #16]
 80060e0:	4632      	mov	r2, r6
 80060e2:	4649      	mov	r1, r9
 80060e4:	4640      	mov	r0, r8
 80060e6:	47d0      	blx	sl
 80060e8:	3001      	adds	r0, #1
 80060ea:	d0ad      	beq.n	8006048 <_printf_i+0x15c>
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	079b      	lsls	r3, r3, #30
 80060f0:	d413      	bmi.n	800611a <_printf_i+0x22e>
 80060f2:	68e0      	ldr	r0, [r4, #12]
 80060f4:	9b03      	ldr	r3, [sp, #12]
 80060f6:	4298      	cmp	r0, r3
 80060f8:	bfb8      	it	lt
 80060fa:	4618      	movlt	r0, r3
 80060fc:	e7a6      	b.n	800604c <_printf_i+0x160>
 80060fe:	2301      	movs	r3, #1
 8006100:	4632      	mov	r2, r6
 8006102:	4649      	mov	r1, r9
 8006104:	4640      	mov	r0, r8
 8006106:	47d0      	blx	sl
 8006108:	3001      	adds	r0, #1
 800610a:	d09d      	beq.n	8006048 <_printf_i+0x15c>
 800610c:	3501      	adds	r5, #1
 800610e:	68e3      	ldr	r3, [r4, #12]
 8006110:	9903      	ldr	r1, [sp, #12]
 8006112:	1a5b      	subs	r3, r3, r1
 8006114:	42ab      	cmp	r3, r5
 8006116:	dcf2      	bgt.n	80060fe <_printf_i+0x212>
 8006118:	e7eb      	b.n	80060f2 <_printf_i+0x206>
 800611a:	2500      	movs	r5, #0
 800611c:	f104 0619 	add.w	r6, r4, #25
 8006120:	e7f5      	b.n	800610e <_printf_i+0x222>
 8006122:	bf00      	nop
 8006124:	08006299 	.word	0x08006299
 8006128:	080062aa 	.word	0x080062aa

0800612c <memmove>:
 800612c:	4288      	cmp	r0, r1
 800612e:	b510      	push	{r4, lr}
 8006130:	eb01 0402 	add.w	r4, r1, r2
 8006134:	d902      	bls.n	800613c <memmove+0x10>
 8006136:	4284      	cmp	r4, r0
 8006138:	4623      	mov	r3, r4
 800613a:	d807      	bhi.n	800614c <memmove+0x20>
 800613c:	1e43      	subs	r3, r0, #1
 800613e:	42a1      	cmp	r1, r4
 8006140:	d008      	beq.n	8006154 <memmove+0x28>
 8006142:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006146:	f803 2f01 	strb.w	r2, [r3, #1]!
 800614a:	e7f8      	b.n	800613e <memmove+0x12>
 800614c:	4402      	add	r2, r0
 800614e:	4601      	mov	r1, r0
 8006150:	428a      	cmp	r2, r1
 8006152:	d100      	bne.n	8006156 <memmove+0x2a>
 8006154:	bd10      	pop	{r4, pc}
 8006156:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800615a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800615e:	e7f7      	b.n	8006150 <memmove+0x24>

08006160 <_sbrk_r>:
 8006160:	b538      	push	{r3, r4, r5, lr}
 8006162:	4d06      	ldr	r5, [pc, #24]	@ (800617c <_sbrk_r+0x1c>)
 8006164:	2300      	movs	r3, #0
 8006166:	4604      	mov	r4, r0
 8006168:	4608      	mov	r0, r1
 800616a:	602b      	str	r3, [r5, #0]
 800616c:	f7fa fe4a 	bl	8000e04 <_sbrk>
 8006170:	1c43      	adds	r3, r0, #1
 8006172:	d102      	bne.n	800617a <_sbrk_r+0x1a>
 8006174:	682b      	ldr	r3, [r5, #0]
 8006176:	b103      	cbz	r3, 800617a <_sbrk_r+0x1a>
 8006178:	6023      	str	r3, [r4, #0]
 800617a:	bd38      	pop	{r3, r4, r5, pc}
 800617c:	20000324 	.word	0x20000324

08006180 <memcpy>:
 8006180:	440a      	add	r2, r1
 8006182:	4291      	cmp	r1, r2
 8006184:	f100 33ff 	add.w	r3, r0, #4294967295
 8006188:	d100      	bne.n	800618c <memcpy+0xc>
 800618a:	4770      	bx	lr
 800618c:	b510      	push	{r4, lr}
 800618e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006192:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006196:	4291      	cmp	r1, r2
 8006198:	d1f9      	bne.n	800618e <memcpy+0xe>
 800619a:	bd10      	pop	{r4, pc}

0800619c <_realloc_r>:
 800619c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061a0:	4680      	mov	r8, r0
 80061a2:	4615      	mov	r5, r2
 80061a4:	460c      	mov	r4, r1
 80061a6:	b921      	cbnz	r1, 80061b2 <_realloc_r+0x16>
 80061a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061ac:	4611      	mov	r1, r2
 80061ae:	f7ff bc4b 	b.w	8005a48 <_malloc_r>
 80061b2:	b92a      	cbnz	r2, 80061c0 <_realloc_r+0x24>
 80061b4:	f7ff fbdc 	bl	8005970 <_free_r>
 80061b8:	2400      	movs	r4, #0
 80061ba:	4620      	mov	r0, r4
 80061bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061c0:	f000 f81a 	bl	80061f8 <_malloc_usable_size_r>
 80061c4:	4285      	cmp	r5, r0
 80061c6:	4606      	mov	r6, r0
 80061c8:	d802      	bhi.n	80061d0 <_realloc_r+0x34>
 80061ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80061ce:	d8f4      	bhi.n	80061ba <_realloc_r+0x1e>
 80061d0:	4629      	mov	r1, r5
 80061d2:	4640      	mov	r0, r8
 80061d4:	f7ff fc38 	bl	8005a48 <_malloc_r>
 80061d8:	4607      	mov	r7, r0
 80061da:	2800      	cmp	r0, #0
 80061dc:	d0ec      	beq.n	80061b8 <_realloc_r+0x1c>
 80061de:	42b5      	cmp	r5, r6
 80061e0:	462a      	mov	r2, r5
 80061e2:	4621      	mov	r1, r4
 80061e4:	bf28      	it	cs
 80061e6:	4632      	movcs	r2, r6
 80061e8:	f7ff ffca 	bl	8006180 <memcpy>
 80061ec:	4621      	mov	r1, r4
 80061ee:	4640      	mov	r0, r8
 80061f0:	f7ff fbbe 	bl	8005970 <_free_r>
 80061f4:	463c      	mov	r4, r7
 80061f6:	e7e0      	b.n	80061ba <_realloc_r+0x1e>

080061f8 <_malloc_usable_size_r>:
 80061f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061fc:	1f18      	subs	r0, r3, #4
 80061fe:	2b00      	cmp	r3, #0
 8006200:	bfbc      	itt	lt
 8006202:	580b      	ldrlt	r3, [r1, r0]
 8006204:	18c0      	addlt	r0, r0, r3
 8006206:	4770      	bx	lr

08006208 <_init>:
 8006208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620a:	bf00      	nop
 800620c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800620e:	bc08      	pop	{r3}
 8006210:	469e      	mov	lr, r3
 8006212:	4770      	bx	lr

08006214 <_fini>:
 8006214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006216:	bf00      	nop
 8006218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800621a:	bc08      	pop	{r3}
 800621c:	469e      	mov	lr, r3
 800621e:	4770      	bx	lr
