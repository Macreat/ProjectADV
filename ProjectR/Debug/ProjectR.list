
ProjectR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c4c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  08005dd4  08005dd4  00006dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064cc  080064cc  0000807c  2**0
                  CONTENTS
  4 .ARM          00000008  080064cc  080064cc  000074cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064d4  080064d4  0000807c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064d4  080064d4  000074d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080064d8  080064d8  000074d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080064dc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000684  2000007c  08006558  0000807c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000700  08006558  00008700  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010df4  00000000  00000000  000080ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002899  00000000  00000000  00018ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  0001b740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b41  00000000  00000000  0001c5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000296b3  00000000  00000000  0001d131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001396e  00000000  00000000  000467e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffb8d  00000000  00000000  0005a152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00159cdf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041f0  00000000  00000000  00159d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0015df14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005dbc 	.word	0x08005dbc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08005dbc 	.word	0x08005dbc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <keypad_debounce>:

#include "main.h"


static uint8_t keypad_debounce(uint16_t GPIO_Pin)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	80fb      	strh	r3, [r7, #6]
	static uint16_t last_pressed = 0xFFFF;
	static uint32_t last_tick = 0;

	if (last_pressed == GPIO_Pin) {
 80004c2:	4b0e      	ldr	r3, [pc, #56]	@ (80004fc <keypad_debounce+0x44>)
 80004c4:	881b      	ldrh	r3, [r3, #0]
 80004c6:	88fa      	ldrh	r2, [r7, #6]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	d109      	bne.n	80004e0 <keypad_debounce+0x28>
		if (HAL_GetTick() < (last_tick + 200)) {
 80004cc:	f000 feb8 	bl	8001240 <HAL_GetTick>
 80004d0:	4602      	mov	r2, r0
 80004d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000500 <keypad_debounce+0x48>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	33c8      	adds	r3, #200	@ 0xc8
 80004d8:	429a      	cmp	r2, r3
 80004da:	d201      	bcs.n	80004e0 <keypad_debounce+0x28>
			return 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	e008      	b.n	80004f2 <keypad_debounce+0x3a>
		}
	}
	last_pressed = GPIO_Pin;
 80004e0:	4a06      	ldr	r2, [pc, #24]	@ (80004fc <keypad_debounce+0x44>)
 80004e2:	88fb      	ldrh	r3, [r7, #6]
 80004e4:	8013      	strh	r3, [r2, #0]
	last_tick = HAL_GetTick();
 80004e6:	f000 feab 	bl	8001240 <HAL_GetTick>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4a04      	ldr	r2, [pc, #16]	@ (8000500 <keypad_debounce+0x48>)
 80004ee:	6013      	str	r3, [r2, #0]

	return 1;
 80004f0:	2301      	movs	r3, #1
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000010 	.word	0x20000010
 8000500:	20000098 	.word	0x20000098

08000504 <keypad_scan_row>:

uint8_t keypad_scan_row(GPIO_TypeDef *COLUMNx_GPIO_Port, uint16_t COLUMNx_Pin)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	460b      	mov	r3, r1
 800050e:	807b      	strh	r3, [r7, #2]
	uint8_t row_pressed = 0xFF;
 8000510:	23ff      	movs	r3, #255	@ 0xff
 8000512:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800051a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800051e:	f001 f9e1 	bl	80018e4 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLUMNx_GPIO_Port, COLUMNx_Pin) == 0) {
 8000522:	887b      	ldrh	r3, [r7, #2]
 8000524:	4619      	mov	r1, r3
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f001 f9c4 	bl	80018b4 <HAL_GPIO_ReadPin>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d102      	bne.n	8000538 <keypad_scan_row+0x34>
		row_pressed =  1;
 8000532:	2301      	movs	r3, #1
 8000534:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 8000536:	e030      	b.n	800059a <keypad_scan_row+0x96>
	}
	HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	2108      	movs	r1, #8
 800053c:	4824      	ldr	r0, [pc, #144]	@ (80005d0 <keypad_scan_row+0xcc>)
 800053e:	f001 f9d1 	bl	80018e4 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLUMNx_GPIO_Port, COLUMNx_Pin) == 0) {
 8000542:	887b      	ldrh	r3, [r7, #2]
 8000544:	4619      	mov	r1, r3
 8000546:	6878      	ldr	r0, [r7, #4]
 8000548:	f001 f9b4 	bl	80018b4 <HAL_GPIO_ReadPin>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d102      	bne.n	8000558 <keypad_scan_row+0x54>
		row_pressed =  2;
 8000552:	2302      	movs	r3, #2
 8000554:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 8000556:	e020      	b.n	800059a <keypad_scan_row+0x96>
	}
	HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	2120      	movs	r1, #32
 800055c:	481c      	ldr	r0, [pc, #112]	@ (80005d0 <keypad_scan_row+0xcc>)
 800055e:	f001 f9c1 	bl	80018e4 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLUMNx_GPIO_Port, COLUMNx_Pin) == 0) {
 8000562:	887b      	ldrh	r3, [r7, #2]
 8000564:	4619      	mov	r1, r3
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f001 f9a4 	bl	80018b4 <HAL_GPIO_ReadPin>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d102      	bne.n	8000578 <keypad_scan_row+0x74>
		row_pressed =  3;
 8000572:	2303      	movs	r3, #3
 8000574:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 8000576:	e010      	b.n	800059a <keypad_scan_row+0x96>
	}
	HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2110      	movs	r1, #16
 800057c:	4814      	ldr	r0, [pc, #80]	@ (80005d0 <keypad_scan_row+0xcc>)
 800057e:	f001 f9b1 	bl	80018e4 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLUMNx_GPIO_Port, COLUMNx_Pin) == 0) {
 8000582:	887b      	ldrh	r3, [r7, #2]
 8000584:	4619      	mov	r1, r3
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f001 f994 	bl	80018b4 <HAL_GPIO_ReadPin>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d102      	bne.n	8000598 <keypad_scan_row+0x94>
		row_pressed =  4;
 8000592:	2304      	movs	r3, #4
 8000594:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 8000596:	e000      	b.n	800059a <keypad_scan_row+0x96>
	}
row_scan_end:
 8000598:	bf00      	nop
	HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, GPIO_PIN_SET);
 800059a:	2201      	movs	r2, #1
 800059c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005a4:	f001 f99e 	bl	80018e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, GPIO_PIN_SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2108      	movs	r1, #8
 80005ac:	4808      	ldr	r0, [pc, #32]	@ (80005d0 <keypad_scan_row+0xcc>)
 80005ae:	f001 f999 	bl	80018e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, GPIO_PIN_SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	2120      	movs	r1, #32
 80005b6:	4806      	ldr	r0, [pc, #24]	@ (80005d0 <keypad_scan_row+0xcc>)
 80005b8:	f001 f994 	bl	80018e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2110      	movs	r1, #16
 80005c0:	4803      	ldr	r0, [pc, #12]	@ (80005d0 <keypad_scan_row+0xcc>)
 80005c2:	f001 f98f 	bl	80018e4 <HAL_GPIO_WritePin>
	return row_pressed; // not detected
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	48000400 	.word	0x48000400

080005d4 <keypad_scan>:
		{'7', '8', '9', 'C'},
		{'*', '0', '#', 'D'},
};

uint8_t keypad_scan(uint16_t GPIO_Pin)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	80fb      	strh	r3, [r7, #6]
	uint8_t key_pressed = 0xFF;
 80005de:	23ff      	movs	r3, #255	@ 0xff
 80005e0:	73fb      	strb	r3, [r7, #15]

	if (keypad_debounce(GPIO_Pin) == 0) {
 80005e2:	88fb      	ldrh	r3, [r7, #6]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ff67 	bl	80004b8 <keypad_debounce>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d101      	bne.n	80005f4 <keypad_scan+0x20>
		return key_pressed;
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	e052      	b.n	800069a <keypad_scan+0xc6>
	}
	uint8_t row = 0xFF;
 80005f4:	23ff      	movs	r3, #255	@ 0xff
 80005f6:	73bb      	strb	r3, [r7, #14]
	switch (GPIO_Pin) {
 80005f8:	88fb      	ldrh	r3, [r7, #6]
 80005fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80005fe:	d00e      	beq.n	800061e <keypad_scan+0x4a>
 8000600:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000604:	dc47      	bgt.n	8000696 <keypad_scan+0xc2>
 8000606:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800060a:	d026      	beq.n	800065a <keypad_scan+0x86>
 800060c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000610:	dc41      	bgt.n	8000696 <keypad_scan+0xc2>
 8000612:	2b80      	cmp	r3, #128	@ 0x80
 8000614:	d031      	beq.n	800067a <keypad_scan+0xa6>
 8000616:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800061a:	d00e      	beq.n	800063a <keypad_scan+0x66>
	case COL_4_Pin:
			row = keypad_scan_row(COL_4_GPIO_Port, COL_4_Pin);
			key_pressed = keypad_chars[row - 1][4 - 1];
			break;
	default:
		break;
 800061c:	e03b      	b.n	8000696 <keypad_scan+0xc2>
		row = keypad_scan_row(COL_1_GPIO_Port, COL_1_Pin);
 800061e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000622:	4820      	ldr	r0, [pc, #128]	@ (80006a4 <keypad_scan+0xd0>)
 8000624:	f7ff ff6e 	bl	8000504 <keypad_scan_row>
 8000628:	4603      	mov	r3, r0
 800062a:	73bb      	strb	r3, [r7, #14]
		key_pressed = keypad_chars[row - 1][1 - 1];
 800062c:	7bbb      	ldrb	r3, [r7, #14]
 800062e:	3b01      	subs	r3, #1
 8000630:	4a1d      	ldr	r2, [pc, #116]	@ (80006a8 <keypad_scan+0xd4>)
 8000632:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000636:	73fb      	strb	r3, [r7, #15]
		break;
 8000638:	e02e      	b.n	8000698 <keypad_scan+0xc4>
		row = keypad_scan_row(COL_2_GPIO_Port, COL_2_Pin);
 800063a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800063e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000642:	f7ff ff5f 	bl	8000504 <keypad_scan_row>
 8000646:	4603      	mov	r3, r0
 8000648:	73bb      	strb	r3, [r7, #14]
		key_pressed = keypad_chars[row - 1][2 - 1];
 800064a:	7bbb      	ldrb	r3, [r7, #14]
 800064c:	3b01      	subs	r3, #1
 800064e:	4a16      	ldr	r2, [pc, #88]	@ (80006a8 <keypad_scan+0xd4>)
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	4413      	add	r3, r2
 8000654:	785b      	ldrb	r3, [r3, #1]
 8000656:	73fb      	strb	r3, [r7, #15]
		break;
 8000658:	e01e      	b.n	8000698 <keypad_scan+0xc4>
			row = keypad_scan_row(COL_3_GPIO_Port, COL_3_Pin);
 800065a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800065e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000662:	f7ff ff4f 	bl	8000504 <keypad_scan_row>
 8000666:	4603      	mov	r3, r0
 8000668:	73bb      	strb	r3, [r7, #14]
			key_pressed = keypad_chars[row - 1][3 - 1];
 800066a:	7bbb      	ldrb	r3, [r7, #14]
 800066c:	3b01      	subs	r3, #1
 800066e:	4a0e      	ldr	r2, [pc, #56]	@ (80006a8 <keypad_scan+0xd4>)
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	4413      	add	r3, r2
 8000674:	789b      	ldrb	r3, [r3, #2]
 8000676:	73fb      	strb	r3, [r7, #15]
			break;
 8000678:	e00e      	b.n	8000698 <keypad_scan+0xc4>
			row = keypad_scan_row(COL_4_GPIO_Port, COL_4_Pin);
 800067a:	2180      	movs	r1, #128	@ 0x80
 800067c:	480b      	ldr	r0, [pc, #44]	@ (80006ac <keypad_scan+0xd8>)
 800067e:	f7ff ff41 	bl	8000504 <keypad_scan_row>
 8000682:	4603      	mov	r3, r0
 8000684:	73bb      	strb	r3, [r7, #14]
			key_pressed = keypad_chars[row - 1][4 - 1];
 8000686:	7bbb      	ldrb	r3, [r7, #14]
 8000688:	3b01      	subs	r3, #1
 800068a:	4a07      	ldr	r2, [pc, #28]	@ (80006a8 <keypad_scan+0xd4>)
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	4413      	add	r3, r2
 8000690:	78db      	ldrb	r3, [r3, #3]
 8000692:	73fb      	strb	r3, [r7, #15]
			break;
 8000694:	e000      	b.n	8000698 <keypad_scan+0xc4>
		break;
 8000696:	bf00      	nop
	}
	return key_pressed;
 8000698:	7bfb      	ldrb	r3, [r7, #15]
}
 800069a:	4618      	mov	r0, r3
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	48000400 	.word	0x48000400
 80006a8:	20000000 	.word	0x20000000
 80006ac:	48000800 	.word	0x48000800

080006b0 <_write>:
 * By using this function, any call to `printf` will output the message
 * to the UART interface, which can be monitored with a serial console.
 */

int _write(int file, char *ptr, int len)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
  // to using printf
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	b29a      	uxth	r2, r3
 80006c0:	230a      	movs	r3, #10
 80006c2:	68b9      	ldr	r1, [r7, #8]
 80006c4:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <_write+0x24>)
 80006c6:	f003 ff39 	bl	800453c <HAL_UART_Transmit>
  return len;
 80006ca:	687b      	ldr	r3, [r7, #4]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	200000f0 	.word	0x200000f0

080006d8 <HAL_GPIO_EXTI_Callback>:
 * - The result of the validation (correct or incorrect) is displayed on the OLED and transmitted via UART.
 * - The buffer is reset after validation.
 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af02      	add	r7, sp, #8
 80006de:	4603      	mov	r3, r0
 80006e0:	80fb      	strh	r3, [r7, #6]
	uint8_t key_pressed = keypad_scan(GPIO_Pin);
 80006e2:	88fb      	ldrh	r3, [r7, #6]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ff75 	bl	80005d4 <keypad_scan>
 80006ea:	4603      	mov	r3, r0
 80006ec:	757b      	strb	r3, [r7, #21]

	    if (key_pressed != 0xFF) {
 80006ee:	7d7b      	ldrb	r3, [r7, #21]
 80006f0:	2bff      	cmp	r3, #255	@ 0xff
 80006f2:	f000 80d6 	beq.w	80008a2 <HAL_GPIO_EXTI_Callback+0x1ca>
	        // when '*' is pressed, the sequence is RESET
	        if (key_pressed == '*') {
 80006f6:	7d7b      	ldrb	r3, [r7, #21]
 80006f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80006fa:	d121      	bne.n	8000740 <HAL_GPIO_EXTI_Callback+0x68>
	            ring_buffer_reset(&keyboard_ring_buffer);
 80006fc:	486a      	ldr	r0, [pc, #424]	@ (80008a8 <HAL_GPIO_EXTI_Callback+0x1d0>)
 80006fe:	f000 faa7 	bl	8000c50 <ring_buffer_reset>
	            memset(display_buffer, 0, sizeof(display_buffer)); //clean actual buffer on the screen
 8000702:	2215      	movs	r2, #21
 8000704:	2100      	movs	r1, #0
 8000706:	4869      	ldr	r0, [pc, #420]	@ (80008ac <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000708:	f005 f8a4 	bl	8005854 <memset>
	            buffer_index = 0; // reset index on buffer
 800070c:	4b68      	ldr	r3, [pc, #416]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]

	            ssd1306_Fill(Black);
 8000712:	2000      	movs	r0, #0
 8000714:	f004 fd12 	bl	800513c <ssd1306_Fill>
	            ssd1306_SetCursor(10, 20);
 8000718:	2114      	movs	r1, #20
 800071a:	200a      	movs	r0, #10
 800071c:	f004 fe58 	bl	80053d0 <ssd1306_SetCursor>
	            ssd1306_WriteString("sequence restarted", Font_6x8, White);
 8000720:	4b64      	ldr	r3, [pc, #400]	@ (80008b4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000722:	2201      	movs	r2, #1
 8000724:	9200      	str	r2, [sp, #0]
 8000726:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000728:	4863      	ldr	r0, [pc, #396]	@ (80008b8 <HAL_GPIO_EXTI_Callback+0x1e0>)
 800072a:	f004 fe2b 	bl	8005384 <ssd1306_WriteString>
	            ssd1306_UpdateScreen();
 800072e:	f004 fd1d 	bl	800516c <ssd1306_UpdateScreen>
	            HAL_UART_Transmit(&huart2, (uint8_t*)"Sequence restarted\n\r", 22, 10);
 8000732:	230a      	movs	r3, #10
 8000734:	2216      	movs	r2, #22
 8000736:	4961      	ldr	r1, [pc, #388]	@ (80008bc <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000738:	4861      	ldr	r0, [pc, #388]	@ (80008c0 <HAL_GPIO_EXTI_Callback+0x1e8>)
 800073a:	f003 feff 	bl	800453c <HAL_UART_Transmit>
	            return;
 800073e:	e0b0      	b.n	80008a2 <HAL_GPIO_EXTI_Callback+0x1ca>
	        }

	        // Write the key to the ring buffer
	        if (key_pressed != '#') {
 8000740:	7d7b      	ldrb	r3, [r7, #21]
 8000742:	2b23      	cmp	r3, #35	@ 0x23
 8000744:	d031      	beq.n	80007aa <HAL_GPIO_EXTI_Callback+0xd2>
	            ring_buffer_write(&keyboard_ring_buffer, key_pressed);
 8000746:	7d7b      	ldrb	r3, [r7, #21]
 8000748:	4619      	mov	r1, r3
 800074a:	4857      	ldr	r0, [pc, #348]	@ (80008a8 <HAL_GPIO_EXTI_Callback+0x1d0>)
 800074c:	f000 fa93 	bl	8000c76 <ring_buffer_write>

	            // add chart to the buffer
	            if (buffer_index < MAX_DISPLAY_CHARS) {
 8000750:	4b57      	ldr	r3, [pc, #348]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b13      	cmp	r3, #19
 8000756:	f200 80a3 	bhi.w	80008a0 <HAL_GPIO_EXTI_Callback+0x1c8>
	                display_buffer[buffer_index++] = key_pressed;
 800075a:	4b55      	ldr	r3, [pc, #340]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	1c5a      	adds	r2, r3, #1
 8000760:	b2d1      	uxtb	r1, r2
 8000762:	4a53      	ldr	r2, [pc, #332]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000764:	7011      	strb	r1, [r2, #0]
 8000766:	461a      	mov	r2, r3
 8000768:	7d79      	ldrb	r1, [r7, #21]
 800076a:	4b50      	ldr	r3, [pc, #320]	@ (80008ac <HAL_GPIO_EXTI_Callback+0x1d4>)
 800076c:	5499      	strb	r1, [r3, r2]
	                display_buffer[buffer_index] = '\0'; // Null-terminar el buffer
 800076e:	4b50      	ldr	r3, [pc, #320]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	461a      	mov	r2, r3
 8000774:	4b4d      	ldr	r3, [pc, #308]	@ (80008ac <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000776:	2100      	movs	r1, #0
 8000778:	5499      	strb	r1, [r3, r2]

	                // clean screen and show buffer content on screen
	                ssd1306_Fill(Black);
 800077a:	2000      	movs	r0, #0
 800077c:	f004 fcde 	bl	800513c <ssd1306_Fill>
	                ssd1306_SetCursor(10, 30);
 8000780:	211e      	movs	r1, #30
 8000782:	200a      	movs	r0, #10
 8000784:	f004 fe24 	bl	80053d0 <ssd1306_SetCursor>
	                ssd1306_WriteString(display_buffer, Font_6x8, White);
 8000788:	4b4a      	ldr	r3, [pc, #296]	@ (80008b4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 800078a:	2201      	movs	r2, #1
 800078c:	9200      	str	r2, [sp, #0]
 800078e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000790:	4846      	ldr	r0, [pc, #280]	@ (80008ac <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000792:	f004 fdf7 	bl	8005384 <ssd1306_WriteString>
	                ssd1306_UpdateScreen();
 8000796:	f004 fce9 	bl	800516c <ssd1306_UpdateScreen>

	                // send chart via UART
	                HAL_UART_Transmit(&huart2, &key_pressed, 1, 10);
 800079a:	f107 0115 	add.w	r1, r7, #21
 800079e:	230a      	movs	r3, #10
 80007a0:	2201      	movs	r2, #1
 80007a2:	4847      	ldr	r0, [pc, #284]	@ (80008c0 <HAL_GPIO_EXTI_Callback+0x1e8>)
 80007a4:	f003 feca 	bl	800453c <HAL_UART_Transmit>
	            }
	            return;
 80007a8:	e07a      	b.n	80008a0 <HAL_GPIO_EXTI_Callback+0x1c8>

	        // proccoed when  '#' is pressed , we verify the password entered



	        uint8_t byte2 = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	753b      	strb	r3, [r7, #20]
	        uint8_t id_incorrect2 = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	75fb      	strb	r3, [r7, #23]
	        uint8_t my_id2[] = "1004191436";  // correct sequence
 80007b2:	4a44      	ldr	r2, [pc, #272]	@ (80008c4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80007ba:	c303      	stmia	r3!, {r0, r1}
 80007bc:	801a      	strh	r2, [r3, #0]
 80007be:	3302      	adds	r3, #2
 80007c0:	0c12      	lsrs	r2, r2, #16
 80007c2:	701a      	strb	r2, [r3, #0]

	        // Read from buffer and compare with correct key
	        for (uint8_t idx2 = 0; idx2 < sizeof(my_id2) - 1; idx2++) {
 80007c4:	2300      	movs	r3, #0
 80007c6:	75bb      	strb	r3, [r7, #22]
 80007c8:	e019      	b.n	80007fe <HAL_GPIO_EXTI_Callback+0x126>
	            if (ring_buffer_read(&keyboard_ring_buffer, &byte2) != 0) {
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4619      	mov	r1, r3
 80007d0:	4835      	ldr	r0, [pc, #212]	@ (80008a8 <HAL_GPIO_EXTI_Callback+0x1d0>)
 80007d2:	f000 fa8e 	bl	8000cf2 <ring_buffer_read>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d00a      	beq.n	80007f2 <HAL_GPIO_EXTI_Callback+0x11a>
	                if (byte2 != my_id2[idx2]) {
 80007dc:	7dbb      	ldrb	r3, [r7, #22]
 80007de:	3318      	adds	r3, #24
 80007e0:	443b      	add	r3, r7
 80007e2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80007e6:	7d3b      	ldrb	r3, [r7, #20]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d005      	beq.n	80007f8 <HAL_GPIO_EXTI_Callback+0x120>
	                    id_incorrect2 = 1;  // Mark as incorrect if no match
 80007ec:	2301      	movs	r3, #1
 80007ee:	75fb      	strb	r3, [r7, #23]


	                    break;
 80007f0:	e008      	b.n	8000804 <HAL_GPIO_EXTI_Callback+0x12c>
	                }
	            } else {
	                id_incorrect2 = 1;  // if there is no space in buffer
 80007f2:	2301      	movs	r3, #1
 80007f4:	75fb      	strb	r3, [r7, #23]
	                break;
 80007f6:	e005      	b.n	8000804 <HAL_GPIO_EXTI_Callback+0x12c>
	        for (uint8_t idx2 = 0; idx2 < sizeof(my_id2) - 1; idx2++) {
 80007f8:	7dbb      	ldrb	r3, [r7, #22]
 80007fa:	3301      	adds	r3, #1
 80007fc:	75bb      	strb	r3, [r7, #22]
 80007fe:	7dbb      	ldrb	r3, [r7, #22]
 8000800:	2b09      	cmp	r3, #9
 8000802:	d9e2      	bls.n	80007ca <HAL_GPIO_EXTI_Callback+0xf2>
	            }
	        }

	        HAL_UART_Transmit(&huart2, (uint8_t*)"\n", 1, 10);
 8000804:	230a      	movs	r3, #10
 8000806:	2201      	movs	r2, #1
 8000808:	492f      	ldr	r1, [pc, #188]	@ (80008c8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 800080a:	482d      	ldr	r0, [pc, #180]	@ (80008c0 <HAL_GPIO_EXTI_Callback+0x1e8>)
 800080c:	f003 fe96 	bl	800453c <HAL_UART_Transmit>

	        if (!id_incorrect2) {
 8000810:	7dfb      	ldrb	r3, [r7, #23]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d11c      	bne.n	8000850 <HAL_GPIO_EXTI_Callback+0x178>
	            // success
	            ssd1306_Fill(Black);
 8000816:	2000      	movs	r0, #0
 8000818:	f004 fc90 	bl	800513c <ssd1306_Fill>
	            ssd1306_SetCursor(10, 20);
 800081c:	2114      	movs	r1, #20
 800081e:	200a      	movs	r0, #10
 8000820:	f004 fdd6 	bl	80053d0 <ssd1306_SetCursor>
	            ssd1306_WriteString("correct sequence", Font_6x8, White);
 8000824:	4b23      	ldr	r3, [pc, #140]	@ (80008b4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000826:	2201      	movs	r2, #1
 8000828:	9200      	str	r2, [sp, #0]
 800082a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800082c:	4827      	ldr	r0, [pc, #156]	@ (80008cc <HAL_GPIO_EXTI_Callback+0x1f4>)
 800082e:	f004 fda9 	bl	8005384 <ssd1306_WriteString>
	            ssd1306_UpdateScreen();
 8000832:	f004 fc9b 	bl	800516c <ssd1306_UpdateScreen>
	            HAL_UART_Transmit(&huart2, (uint8_t*)"correct sequence\n\r", 21, 10);
 8000836:	230a      	movs	r3, #10
 8000838:	2215      	movs	r2, #21
 800083a:	4925      	ldr	r1, [pc, #148]	@ (80008d0 <HAL_GPIO_EXTI_Callback+0x1f8>)
 800083c:	4820      	ldr	r0, [pc, #128]	@ (80008c0 <HAL_GPIO_EXTI_Callback+0x1e8>)
 800083e:	f003 fe7d 	bl	800453c <HAL_UART_Transmit>
	            HAL_UART_Transmit(&huart2, (uint8_t*)"starting...\n\r", 14, 10);
 8000842:	230a      	movs	r3, #10
 8000844:	220e      	movs	r2, #14
 8000846:	4923      	ldr	r1, [pc, #140]	@ (80008d4 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000848:	481d      	ldr	r0, [pc, #116]	@ (80008c0 <HAL_GPIO_EXTI_Callback+0x1e8>)
 800084a:	f003 fe77 	bl	800453c <HAL_UART_Transmit>
 800084e:	e015      	b.n	800087c <HAL_GPIO_EXTI_Callback+0x1a4>


	        } else {
	            //  error
	            ssd1306_Fill(Black);
 8000850:	2000      	movs	r0, #0
 8000852:	f004 fc73 	bl	800513c <ssd1306_Fill>
	            ssd1306_SetCursor(10, 20);
 8000856:	2114      	movs	r1, #20
 8000858:	200a      	movs	r0, #10
 800085a:	f004 fdb9 	bl	80053d0 <ssd1306_SetCursor>
	            ssd1306_WriteString("error ", Font_6x8, White);
 800085e:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000860:	2201      	movs	r2, #1
 8000862:	9200      	str	r2, [sp, #0]
 8000864:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000866:	481c      	ldr	r0, [pc, #112]	@ (80008d8 <HAL_GPIO_EXTI_Callback+0x200>)
 8000868:	f004 fd8c 	bl	8005384 <ssd1306_WriteString>
	            ssd1306_UpdateScreen();
 800086c:	f004 fc7e 	bl	800516c <ssd1306_UpdateScreen>
	            HAL_UART_Transmit(&huart2, (uint8_t*)" incorrect sequence \n\r", 12, 10);
 8000870:	230a      	movs	r3, #10
 8000872:	220c      	movs	r2, #12
 8000874:	4919      	ldr	r1, [pc, #100]	@ (80008dc <HAL_GPIO_EXTI_Callback+0x204>)
 8000876:	4812      	ldr	r0, [pc, #72]	@ (80008c0 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000878:	f003 fe60 	bl	800453c <HAL_UART_Transmit>

	        }

	        // reset buffer after validation
	        ring_buffer_reset(&keyboard_ring_buffer);
 800087c:	480a      	ldr	r0, [pc, #40]	@ (80008a8 <HAL_GPIO_EXTI_Callback+0x1d0>)
 800087e:	f000 f9e7 	bl	8000c50 <ring_buffer_reset>
	        memset(display_buffer, 0, sizeof(display_buffer)); // clean buffer on screen
 8000882:	2215      	movs	r2, #21
 8000884:	2100      	movs	r1, #0
 8000886:	4809      	ldr	r0, [pc, #36]	@ (80008ac <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000888:	f004 ffe4 	bl	8005854 <memset>
	        buffer_index = 0; // reset index buffer
 800088c:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
	        cursor_x = 10;  //Resets the horizontal cursor position
 8000892:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <HAL_GPIO_EXTI_Callback+0x208>)
 8000894:	220a      	movs	r2, #10
 8000896:	701a      	strb	r2, [r3, #0]
	        cursor_y = 30;  // Restarts the vertical position of the course
 8000898:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <HAL_GPIO_EXTI_Callback+0x20c>)
 800089a:	221e      	movs	r2, #30
 800089c:	701a      	strb	r2, [r3, #0]
 800089e:	e000      	b.n	80008a2 <HAL_GPIO_EXTI_Callback+0x1ca>
	            return;
 80008a0:	bf00      	nop

	    }
}
 80008a2:	3718      	adds	r7, #24
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000184 	.word	0x20000184
 80008ac:	2000018c 	.word	0x2000018c
 80008b0:	200001a1 	.word	0x200001a1
 80008b4:	080064c0 	.word	0x080064c0
 80008b8:	08005dd4 	.word	0x08005dd4
 80008bc:	08005de8 	.word	0x08005de8
 80008c0:	200000f0 	.word	0x200000f0
 80008c4:	08005e5c 	.word	0x08005e5c
 80008c8:	08005e00 	.word	0x08005e00
 80008cc:	08005e04 	.word	0x08005e04
 80008d0:	08005e18 	.word	0x08005e18
 80008d4:	08005e2c 	.word	0x08005e2c
 80008d8:	08005e3c 	.word	0x08005e3c
 80008dc:	08005e44 	.word	0x08005e44
 80008e0:	20000012 	.word	0x20000012
 80008e4:	20000013 	.word	0x20000013

080008e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ee:	f000 fc3e 	bl	800116e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f2:	f000 f82d 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f6:	f000 f8ed 	bl	8000ad4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008fa:	f000 f8bb 	bl	8000a74 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008fe:	f000 f879 	bl	80009f4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ring_buffer_init(&keyboard_ring_buffer, keyboard_buffer_memory, BUFFER_CAPACITY);
 8000902:	220a      	movs	r2, #10
 8000904:	490d      	ldr	r1, [pc, #52]	@ (800093c <main+0x54>)
 8000906:	480e      	ldr	r0, [pc, #56]	@ (8000940 <main+0x58>)
 8000908:	f000 f98e 	bl	8000c28 <ring_buffer_init>
  ssd1306_Init();
 800090c:	f004 fbac 	bl	8005068 <ssd1306_Init>
  ssd1306_Fill(Black);
 8000910:	2000      	movs	r0, #0
 8000912:	f004 fc13 	bl	800513c <ssd1306_Fill>
  ssd1306_SetCursor(10,20);
 8000916:	2114      	movs	r1, #20
 8000918:	200a      	movs	r0, #10
 800091a:	f004 fd59 	bl	80053d0 <ssd1306_SetCursor>
  ssd1306_WriteString("Starting...\r\n",Font_6x8,White);
 800091e:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <main+0x5c>)
 8000920:	2201      	movs	r2, #1
 8000922:	9200      	str	r2, [sp, #0]
 8000924:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000926:	4808      	ldr	r0, [pc, #32]	@ (8000948 <main+0x60>)
 8000928:	f004 fd2c 	bl	8005384 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800092c:	f004 fc1e 	bl	800516c <ssd1306_UpdateScreen>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Starting...\r\n");
 8000930:	4806      	ldr	r0, [pc, #24]	@ (800094c <main+0x64>)
 8000932:	f004 feaf 	bl	8005694 <puts>
  while (1)
 8000936:	bf00      	nop
 8000938:	e7fd      	b.n	8000936 <main+0x4e>
 800093a:	bf00      	nop
 800093c:	20000178 	.word	0x20000178
 8000940:	20000184 	.word	0x20000184
 8000944:	080064c0 	.word	0x080064c0
 8000948:	08005e68 	.word	0x08005e68
 800094c:	08005e78 	.word	0x08005e78

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b096      	sub	sp, #88	@ 0x58
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	2244      	movs	r2, #68	@ 0x44
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f004 ff78 	bl	8005854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	463b      	mov	r3, r7
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000972:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000976:	f002 fa81 	bl	8002e7c <HAL_PWREx_ControlVoltageScaling>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000980:	f000 f94c 	bl	8000c1c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000984:	2310      	movs	r3, #16
 8000986:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000988:	2301      	movs	r3, #1
 800098a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000990:	2360      	movs	r3, #96	@ 0x60
 8000992:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000994:	2302      	movs	r3, #2
 8000996:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000998:	2301      	movs	r3, #1
 800099a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800099c:	2301      	movs	r3, #1
 800099e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80009a0:	2328      	movs	r3, #40	@ 0x28
 80009a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009a4:	2307      	movs	r3, #7
 80009a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009a8:	2302      	movs	r3, #2
 80009aa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009ac:	2302      	movs	r3, #2
 80009ae:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4618      	mov	r0, r3
 80009b6:	f002 fab7 	bl	8002f28 <HAL_RCC_OscConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80009c0:	f000 f92c 	bl	8000c1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c4:	230f      	movs	r3, #15
 80009c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c8:	2303      	movs	r3, #3
 80009ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	2104      	movs	r1, #4
 80009dc:	4618      	mov	r0, r3
 80009de:	f002 fe7f 	bl	80036e0 <HAL_RCC_ClockConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80009e8:	f000 f918 	bl	8000c1c <Error_Handler>
  }
}
 80009ec:	bf00      	nop
 80009ee:	3758      	adds	r7, #88	@ 0x58
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a68 <MX_I2C1_Init+0x74>)
 80009fa:	4a1c      	ldr	r2, [pc, #112]	@ (8000a6c <MX_I2C1_Init+0x78>)
 80009fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000a68 <MX_I2C1_Init+0x74>)
 8000a00:	4a1b      	ldr	r2, [pc, #108]	@ (8000a70 <MX_I2C1_Init+0x7c>)
 8000a02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a04:	4b18      	ldr	r3, [pc, #96]	@ (8000a68 <MX_I2C1_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a0a:	4b17      	ldr	r3, [pc, #92]	@ (8000a68 <MX_I2C1_Init+0x74>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a10:	4b15      	ldr	r3, [pc, #84]	@ (8000a68 <MX_I2C1_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a16:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <MX_I2C1_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <MX_I2C1_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a22:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <MX_I2C1_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <MX_I2C1_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a2e:	480e      	ldr	r0, [pc, #56]	@ (8000a68 <MX_I2C1_Init+0x74>)
 8000a30:	f000 ff88 	bl	8001944 <HAL_I2C_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a3a:	f000 f8ef 	bl	8000c1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4809      	ldr	r0, [pc, #36]	@ (8000a68 <MX_I2C1_Init+0x74>)
 8000a42:	f002 f975 	bl	8002d30 <HAL_I2CEx_ConfigAnalogFilter>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a4c:	f000 f8e6 	bl	8000c1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a50:	2100      	movs	r1, #0
 8000a52:	4805      	ldr	r0, [pc, #20]	@ (8000a68 <MX_I2C1_Init+0x74>)
 8000a54:	f002 f9b7 	bl	8002dc6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a5e:	f000 f8dd 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	2000009c 	.word	0x2000009c
 8000a6c:	40005400 	.word	0x40005400
 8000a70:	10909cec 	.word	0x10909cec

08000a74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a78:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <MX_USART2_UART_Init+0x58>)
 8000a7a:	4a15      	ldr	r2, [pc, #84]	@ (8000ad0 <MX_USART2_UART_Init+0x5c>)
 8000a7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a7e:	4b13      	ldr	r3, [pc, #76]	@ (8000acc <MX_USART2_UART_Init+0x58>)
 8000a80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a86:	4b11      	ldr	r3, [pc, #68]	@ (8000acc <MX_USART2_UART_Init+0x58>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000acc <MX_USART2_UART_Init+0x58>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <MX_USART2_UART_Init+0x58>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <MX_USART2_UART_Init+0x58>)
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000acc <MX_USART2_UART_Init+0x58>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <MX_USART2_UART_Init+0x58>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <MX_USART2_UART_Init+0x58>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <MX_USART2_UART_Init+0x58>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ab6:	4805      	ldr	r0, [pc, #20]	@ (8000acc <MX_USART2_UART_Init+0x58>)
 8000ab8:	f003 fcf2 	bl	80044a0 <HAL_UART_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ac2:	f000 f8ab 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200000f0 	.word	0x200000f0
 8000ad0:	40004400 	.word	0x40004400

08000ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b49      	ldr	r3, [pc, #292]	@ (8000c10 <MX_GPIO_Init+0x13c>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aee:	4a48      	ldr	r2, [pc, #288]	@ (8000c10 <MX_GPIO_Init+0x13c>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000af6:	4b46      	ldr	r3, [pc, #280]	@ (8000c10 <MX_GPIO_Init+0x13c>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	4b43      	ldr	r3, [pc, #268]	@ (8000c10 <MX_GPIO_Init+0x13c>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b06:	4a42      	ldr	r2, [pc, #264]	@ (8000c10 <MX_GPIO_Init+0x13c>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b0e:	4b40      	ldr	r3, [pc, #256]	@ (8000c10 <MX_GPIO_Init+0x13c>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c10 <MX_GPIO_Init+0x13c>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1e:	4a3c      	ldr	r2, [pc, #240]	@ (8000c10 <MX_GPIO_Init+0x13c>)
 8000b20:	f043 0304 	orr.w	r3, r3, #4
 8000b24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b26:	4b3a      	ldr	r3, [pc, #232]	@ (8000c10 <MX_GPIO_Init+0x13c>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SYSTEM_LED_GPIO_Port, SYSTEM_LED_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2120      	movs	r1, #32
 8000b36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b3a:	f000 fed3 	bl	80018e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, GPIO_PIN_SET);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b48:	f000 fecc 	bl	80018e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ROW_2_Pin|ROW_4_Pin|ROW_3_Pin, GPIO_PIN_SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2138      	movs	r1, #56	@ 0x38
 8000b50:	4830      	ldr	r0, [pc, #192]	@ (8000c14 <MX_GPIO_Init+0x140>)
 8000b52:	f000 fec7 	bl	80018e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SYSTEM_LED_Pin ROW_1_Pin */
  GPIO_InitStruct.Pin = SYSTEM_LED_Pin|ROW_1_Pin;
 8000b56:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8000b5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b72:	f000 fcf5 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pin : COL_1_Pin */
  GPIO_InitStruct.Pin = COL_1_Pin;
 8000b76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b7c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b82:	2302      	movs	r3, #2
 8000b84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(COL_1_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 030c 	add.w	r3, r7, #12
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4821      	ldr	r0, [pc, #132]	@ (8000c14 <MX_GPIO_Init+0x140>)
 8000b8e:	f000 fce7 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pin : COL_4_Pin */
  GPIO_InitStruct.Pin = COL_4_Pin;
 8000b92:	2380      	movs	r3, #128	@ 0x80
 8000b94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b96:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(COL_4_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	481c      	ldr	r0, [pc, #112]	@ (8000c18 <MX_GPIO_Init+0x144>)
 8000ba8:	f000 fcda 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL_2_Pin COL_3_Pin */
  GPIO_InitStruct.Pin = COL_2_Pin|COL_3_Pin;
 8000bac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bb2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbc:	f107 030c 	add.w	r3, r7, #12
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc6:	f000 fccb 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW_2_Pin ROW_4_Pin ROW_3_Pin */
  GPIO_InitStruct.Pin = ROW_2_Pin|ROW_4_Pin|ROW_3_Pin;
 8000bca:	2338      	movs	r3, #56	@ 0x38
 8000bcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	4619      	mov	r1, r3
 8000be0:	480c      	ldr	r0, [pc, #48]	@ (8000c14 <MX_GPIO_Init+0x140>)
 8000be2:	f000 fcbd 	bl	8001560 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	2017      	movs	r0, #23
 8000bec:	f000 fc33 	bl	8001456 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bf0:	2017      	movs	r0, #23
 8000bf2:	f000 fc4c 	bl	800148e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2028      	movs	r0, #40	@ 0x28
 8000bfc:	f000 fc2b 	bl	8001456 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c00:	2028      	movs	r0, #40	@ 0x28
 8000c02:	f000 fc44 	bl	800148e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c06:	bf00      	nop
 8000c08:	3720      	adds	r7, #32
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40021000 	.word	0x40021000
 8000c14:	48000400 	.word	0x48000400
 8000c18:	48000800 	.word	0x48000800

08000c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c20:	b672      	cpsid	i
}
 8000c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <Error_Handler+0x8>

08000c28 <ring_buffer_init>:

#include "ring_buffer.h"


void ring_buffer_init(ring_buffer_t *rb, uint8_t *mem_add, uint8_t cap)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	4613      	mov	r3, r2
 8000c34:	71fb      	strb	r3, [r7, #7]
	rb->buffer = mem_add;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	68ba      	ldr	r2, [r7, #8]
 8000c3a:	601a      	str	r2, [r3, #0]
	rb->capacity = cap;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	79fa      	ldrb	r2, [r7, #7]
 8000c40:	71da      	strb	r2, [r3, #7]

	ring_buffer_reset(rb);
 8000c42:	68f8      	ldr	r0, [r7, #12]
 8000c44:	f000 f804 	bl	8000c50 <ring_buffer_reset>
}
 8000c48:	bf00      	nop
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <ring_buffer_reset>:
 * @brief Esta funcion reinicia los datos disponibles en el buffer
 *
 * @retval size: cantidad de datos disponibles
 */
void ring_buffer_reset(ring_buffer_t *rb)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	rb->head = 0;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	711a      	strb	r2, [r3, #4]
	rb->tail = 0;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2200      	movs	r2, #0
 8000c62:	715a      	strb	r2, [r3, #5]
	rb->is_full = 0;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2200      	movs	r2, #0
 8000c68:	719a      	strb	r2, [r3, #6]
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <ring_buffer_write>:
 * @param data: el dato que se va a escribir
 *
 * @retval Ninguno
 */
void ring_buffer_write(ring_buffer_t *rb, uint8_t data)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
 8000c7e:	460b      	mov	r3, r1
 8000c80:	70fb      	strb	r3, [r7, #3]
	rb->buffer[rb->head] = data;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	7912      	ldrb	r2, [r2, #4]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	78fa      	ldrb	r2, [r7, #3]
 8000c8e:	701a      	strb	r2, [r3, #0]
	rb->head = rb->head + 1;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	791b      	ldrb	r3, [r3, #4]
 8000c94:	3301      	adds	r3, #1
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	711a      	strb	r2, [r3, #4]

	if (rb->head >= rb->capacity) { // si la cabeza llega al final de la memoria
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	791a      	ldrb	r2, [r3, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	79db      	ldrb	r3, [r3, #7]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d302      	bcc.n	8000cae <ring_buffer_write+0x38>
		rb->head = 0;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	711a      	strb	r2, [r3, #4]
	}

	if (rb->is_full != 0) { // si se pierden datos viejos
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	799b      	ldrb	r3, [r3, #6]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d005      	beq.n	8000cc2 <ring_buffer_write+0x4c>
		rb->tail = rb->tail + 1;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	795b      	ldrb	r3, [r3, #5]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	715a      	strb	r2, [r3, #5]
	}

	if (rb->tail >= rb->capacity) { // si la cola llega al final de la memoria
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	795a      	ldrb	r2, [r3, #5]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	79db      	ldrb	r3, [r3, #7]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d302      	bcc.n	8000cd4 <ring_buffer_write+0x5e>
		rb->tail = 0;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	715a      	strb	r2, [r3, #5]
	}

	if (rb->head == rb->tail) { // si la cabeza alcanza la cola
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	791a      	ldrb	r2, [r3, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	795b      	ldrb	r3, [r3, #5]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d102      	bne.n	8000ce6 <ring_buffer_write+0x70>
		rb->is_full = 1;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	719a      	strb	r2, [r3, #6]
	}
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <ring_buffer_read>:
 * @param data: la direccion de donde se va a escribir el dato
 *
 * @retval 1: hay datos disponibles, 0: no hay datos
 */
uint8_t ring_buffer_read(ring_buffer_t *rb, uint8_t *data) // 0x20
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
 8000cfa:	6039      	str	r1, [r7, #0]
	if ((rb->is_full != 0) || (rb->head != rb->tail)) { // data available
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	799b      	ldrb	r3, [r3, #6]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d105      	bne.n	8000d10 <ring_buffer_read+0x1e>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	791a      	ldrb	r2, [r3, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	795b      	ldrb	r3, [r3, #5]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d01b      	beq.n	8000d48 <ring_buffer_read+0x56>
		*data = rb->buffer[rb->tail]; // add: 0x20, val: buffer
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	7952      	ldrb	r2, [r2, #5]
 8000d18:	4413      	add	r3, r2
 8000d1a:	781a      	ldrb	r2, [r3, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	701a      	strb	r2, [r3, #0]
		rb->tail = rb->tail + 1;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	795b      	ldrb	r3, [r3, #5]
 8000d24:	3301      	adds	r3, #1
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	715a      	strb	r2, [r3, #5]
		if (rb->tail >= rb->capacity) {
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	795a      	ldrb	r2, [r3, #5]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	79db      	ldrb	r3, [r3, #7]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d302      	bcc.n	8000d3e <ring_buffer_read+0x4c>
			rb->tail = 0;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	715a      	strb	r2, [r3, #5]
		}
		rb->is_full = 0;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	719a      	strb	r2, [r3, #6]

		return 1; // buffer con datos
 8000d44:	2301      	movs	r3, #1
 8000d46:	e000      	b.n	8000d4a <ring_buffer_read+0x58>
	}
	return 0; // buffer vacio
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <HAL_MspInit+0x44>)
 8000d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d62:	4a0e      	ldr	r2, [pc, #56]	@ (8000d9c <HAL_MspInit+0x44>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <HAL_MspInit+0x44>)
 8000d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <HAL_MspInit+0x44>)
 8000d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d7a:	4a08      	ldr	r2, [pc, #32]	@ (8000d9c <HAL_MspInit+0x44>)
 8000d7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d80:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d82:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <HAL_MspInit+0x44>)
 8000d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	40021000 	.word	0x40021000

08000da0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b0ac      	sub	sp, #176	@ 0xb0
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2288      	movs	r2, #136	@ 0x88
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f004 fd47 	bl	8005854 <memset>
  if(hi2c->Instance==I2C1)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a29      	ldr	r2, [pc, #164]	@ (8000e70 <HAL_I2C_MspInit+0xd0>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d14b      	bne.n	8000e68 <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000dd0:	2340      	movs	r3, #64	@ 0x40
 8000dd2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f002 fea3 	bl	8003b28 <HAL_RCCEx_PeriphCLKConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000de8:	f7ff ff18 	bl	8000c1c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dec:	4b21      	ldr	r3, [pc, #132]	@ (8000e74 <HAL_I2C_MspInit+0xd4>)
 8000dee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df0:	4a20      	ldr	r2, [pc, #128]	@ (8000e74 <HAL_I2C_MspInit+0xd4>)
 8000df2:	f043 0302 	orr.w	r3, r3, #2
 8000df6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e74 <HAL_I2C_MspInit+0xd4>)
 8000dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfc:	f003 0302 	and.w	r3, r3, #2
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e04:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e0c:	2312      	movs	r3, #18
 8000e0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e1e:	2304      	movs	r3, #4
 8000e20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e24:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4813      	ldr	r0, [pc, #76]	@ (8000e78 <HAL_I2C_MspInit+0xd8>)
 8000e2c:	f000 fb98 	bl	8001560 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e30:	4b10      	ldr	r3, [pc, #64]	@ (8000e74 <HAL_I2C_MspInit+0xd4>)
 8000e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e34:	4a0f      	ldr	r2, [pc, #60]	@ (8000e74 <HAL_I2C_MspInit+0xd4>)
 8000e36:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e74 <HAL_I2C_MspInit+0xd4>)
 8000e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	201f      	movs	r0, #31
 8000e4e:	f000 fb02 	bl	8001456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000e52:	201f      	movs	r0, #31
 8000e54:	f000 fb1b 	bl	800148e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2020      	movs	r0, #32
 8000e5e:	f000 fafa 	bl	8001456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000e62:	2020      	movs	r0, #32
 8000e64:	f000 fb13 	bl	800148e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e68:	bf00      	nop
 8000e6a:	37b0      	adds	r7, #176	@ 0xb0
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40005400 	.word	0x40005400
 8000e74:	40021000 	.word	0x40021000
 8000e78:	48000400 	.word	0x48000400

08000e7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b0ac      	sub	sp, #176	@ 0xb0
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	2288      	movs	r2, #136	@ 0x88
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f004 fcd9 	bl	8005854 <memset>
  if(huart->Instance==USART2)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a21      	ldr	r2, [pc, #132]	@ (8000f2c <HAL_UART_MspInit+0xb0>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d13b      	bne.n	8000f24 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000eac:	2302      	movs	r3, #2
 8000eae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f002 fe35 	bl	8003b28 <HAL_RCCEx_PeriphCLKConfig>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ec4:	f7ff feaa 	bl	8000c1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ec8:	4b19      	ldr	r3, [pc, #100]	@ (8000f30 <HAL_UART_MspInit+0xb4>)
 8000eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ecc:	4a18      	ldr	r2, [pc, #96]	@ (8000f30 <HAL_UART_MspInit+0xb4>)
 8000ece:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ed4:	4b16      	ldr	r3, [pc, #88]	@ (8000f30 <HAL_UART_MspInit+0xb4>)
 8000ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee0:	4b13      	ldr	r3, [pc, #76]	@ (8000f30 <HAL_UART_MspInit+0xb4>)
 8000ee2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee4:	4a12      	ldr	r2, [pc, #72]	@ (8000f30 <HAL_UART_MspInit+0xb4>)
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eec:	4b10      	ldr	r3, [pc, #64]	@ (8000f30 <HAL_UART_MspInit+0xb4>)
 8000eee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ef8:	230c      	movs	r3, #12
 8000efa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f10:	2307      	movs	r3, #7
 8000f12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f20:	f000 fb1e 	bl	8001560 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f24:	bf00      	nop
 8000f26:	37b0      	adds	r7, #176	@ 0xb0
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40004400 	.word	0x40004400
 8000f30:	40021000 	.word	0x40021000

08000f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <NMI_Handler+0x4>

08000f3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <HardFault_Handler+0x4>

08000f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <MemManage_Handler+0x4>

08000f4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <BusFault_Handler+0x4>

08000f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <UsageFault_Handler+0x4>

08000f5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8a:	f000 f945 	bl	8001218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_4_Pin);
 8000f96:	2080      	movs	r0, #128	@ 0x80
 8000f98:	f000 fcbc 	bl	8001914 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL_2_Pin);
 8000f9c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000fa0:	f000 fcb8 	bl	8001914 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL_3_Pin);
 8000fa4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fa8:	f000 fcb4 	bl	8001914 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000fb4:	4802      	ldr	r0, [pc, #8]	@ (8000fc0 <I2C1_EV_IRQHandler+0x10>)
 8000fb6:	f000 fe75 	bl	8001ca4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000009c 	.word	0x2000009c

08000fc4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000fc8:	4802      	ldr	r0, [pc, #8]	@ (8000fd4 <I2C1_ER_IRQHandler+0x10>)
 8000fca:	f000 fe85 	bl	8001cd8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	2000009c 	.word	0x2000009c

08000fd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_1_Pin);
 8000fdc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000fe0:	f000 fc98 	bl	8001914 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	e00a      	b.n	8001010 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ffa:	f3af 8000 	nop.w
 8000ffe:	4601      	mov	r1, r0
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	1c5a      	adds	r2, r3, #1
 8001004:	60ba      	str	r2, [r7, #8]
 8001006:	b2ca      	uxtb	r2, r1
 8001008:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	3301      	adds	r3, #1
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697a      	ldr	r2, [r7, #20]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	429a      	cmp	r2, r3
 8001016:	dbf0      	blt.n	8000ffa <_read+0x12>
  }

  return len;
 8001018:	687b      	ldr	r3, [r7, #4]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800104a:	605a      	str	r2, [r3, #4]
  return 0;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <_isatty>:

int _isatty(int file)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001062:	2301      	movs	r3, #1
}
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001094:	4a14      	ldr	r2, [pc, #80]	@ (80010e8 <_sbrk+0x5c>)
 8001096:	4b15      	ldr	r3, [pc, #84]	@ (80010ec <_sbrk+0x60>)
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a0:	4b13      	ldr	r3, [pc, #76]	@ (80010f0 <_sbrk+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d102      	bne.n	80010ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a8:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <_sbrk+0x64>)
 80010aa:	4a12      	ldr	r2, [pc, #72]	@ (80010f4 <_sbrk+0x68>)
 80010ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ae:	4b10      	ldr	r3, [pc, #64]	@ (80010f0 <_sbrk+0x64>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d207      	bcs.n	80010cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010bc:	f004 fc18 	bl	80058f0 <__errno>
 80010c0:	4603      	mov	r3, r0
 80010c2:	220c      	movs	r2, #12
 80010c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	e009      	b.n	80010e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010cc:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <_sbrk+0x64>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d2:	4b07      	ldr	r3, [pc, #28]	@ (80010f0 <_sbrk+0x64>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	4a05      	ldr	r2, [pc, #20]	@ (80010f0 <_sbrk+0x64>)
 80010dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010de:	68fb      	ldr	r3, [r7, #12]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20018000 	.word	0x20018000
 80010ec:	00000400 	.word	0x00000400
 80010f0:	200001a4 	.word	0x200001a4
 80010f4:	20000700 	.word	0x20000700

080010f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010fc:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <SystemInit+0x20>)
 80010fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001102:	4a05      	ldr	r2, [pc, #20]	@ (8001118 <SystemInit+0x20>)
 8001104:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001108:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800111c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001154 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001120:	f7ff ffea 	bl	80010f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001124:	480c      	ldr	r0, [pc, #48]	@ (8001158 <LoopForever+0x6>)
  ldr r1, =_edata
 8001126:	490d      	ldr	r1, [pc, #52]	@ (800115c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001128:	4a0d      	ldr	r2, [pc, #52]	@ (8001160 <LoopForever+0xe>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113a:	4a0a      	ldr	r2, [pc, #40]	@ (8001164 <LoopForever+0x12>)
  ldr r4, =_ebss
 800113c:	4c0a      	ldr	r4, [pc, #40]	@ (8001168 <LoopForever+0x16>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800114a:	f004 fbd7 	bl	80058fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800114e:	f7ff fbcb 	bl	80008e8 <main>

08001152 <LoopForever>:

LoopForever:
    b LoopForever
 8001152:	e7fe      	b.n	8001152 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001154:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800115c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001160:	080064dc 	.word	0x080064dc
  ldr r2, =_sbss
 8001164:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001168:	20000700 	.word	0x20000700

0800116c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800116c:	e7fe      	b.n	800116c <ADC1_2_IRQHandler>

0800116e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001178:	2003      	movs	r0, #3
 800117a:	f000 f961 	bl	8001440 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800117e:	200f      	movs	r0, #15
 8001180:	f000 f80e 	bl	80011a0 <HAL_InitTick>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d002      	beq.n	8001190 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	71fb      	strb	r3, [r7, #7]
 800118e:	e001      	b.n	8001194 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001190:	f7ff fde2 	bl	8000d58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001194:	79fb      	ldrb	r3, [r7, #7]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011a8:	2300      	movs	r3, #0
 80011aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011ac:	4b17      	ldr	r3, [pc, #92]	@ (800120c <HAL_InitTick+0x6c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d023      	beq.n	80011fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011b4:	4b16      	ldr	r3, [pc, #88]	@ (8001210 <HAL_InitTick+0x70>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b14      	ldr	r3, [pc, #80]	@ (800120c <HAL_InitTick+0x6c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	4619      	mov	r1, r3
 80011be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f96d 	bl	80014aa <HAL_SYSTICK_Config>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10f      	bne.n	80011f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b0f      	cmp	r3, #15
 80011da:	d809      	bhi.n	80011f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011dc:	2200      	movs	r2, #0
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295
 80011e4:	f000 f937 	bl	8001456 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001214 <HAL_InitTick+0x74>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	e007      	b.n	8001200 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	e004      	b.n	8001200 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	73fb      	strb	r3, [r7, #15]
 80011fa:	e001      	b.n	8001200 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001200:	7bfb      	ldrb	r3, [r7, #15]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	2000001c 	.word	0x2000001c
 8001210:	20000014 	.word	0x20000014
 8001214:	20000018 	.word	0x20000018

08001218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800121c:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <HAL_IncTick+0x20>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b06      	ldr	r3, [pc, #24]	@ (800123c <HAL_IncTick+0x24>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4413      	add	r3, r2
 8001228:	4a04      	ldr	r2, [pc, #16]	@ (800123c <HAL_IncTick+0x24>)
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	2000001c 	.word	0x2000001c
 800123c:	200001a8 	.word	0x200001a8

08001240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return uwTick;
 8001244:	4b03      	ldr	r3, [pc, #12]	@ (8001254 <HAL_GetTick+0x14>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	200001a8 	.word	0x200001a8

08001258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001260:	f7ff ffee 	bl	8001240 <HAL_GetTick>
 8001264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001270:	d005      	beq.n	800127e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001272:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <HAL_Delay+0x44>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4413      	add	r3, r2
 800127c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800127e:	bf00      	nop
 8001280:	f7ff ffde 	bl	8001240 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	429a      	cmp	r2, r3
 800128e:	d8f7      	bhi.n	8001280 <HAL_Delay+0x28>
  {
  }
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2000001c 	.word	0x2000001c

080012a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b0:	4b0c      	ldr	r3, [pc, #48]	@ (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012bc:	4013      	ands	r3, r2
 80012be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d2:	4a04      	ldr	r2, [pc, #16]	@ (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	60d3      	str	r3, [r2, #12]
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ec:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <__NVIC_GetPriorityGrouping+0x18>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	0a1b      	lsrs	r3, r3, #8
 80012f2:	f003 0307 	and.w	r3, r3, #7
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	2b00      	cmp	r3, #0
 8001314:	db0b      	blt.n	800132e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	f003 021f 	and.w	r2, r3, #31
 800131c:	4907      	ldr	r1, [pc, #28]	@ (800133c <__NVIC_EnableIRQ+0x38>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	095b      	lsrs	r3, r3, #5
 8001324:	2001      	movs	r0, #1
 8001326:	fa00 f202 	lsl.w	r2, r0, r2
 800132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000e100 	.word	0xe000e100

08001340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001350:	2b00      	cmp	r3, #0
 8001352:	db0a      	blt.n	800136a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	490c      	ldr	r1, [pc, #48]	@ (800138c <__NVIC_SetPriority+0x4c>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	0112      	lsls	r2, r2, #4
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	440b      	add	r3, r1
 8001364:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001368:	e00a      	b.n	8001380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4908      	ldr	r1, [pc, #32]	@ (8001390 <__NVIC_SetPriority+0x50>)
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	3b04      	subs	r3, #4
 8001378:	0112      	lsls	r2, r2, #4
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	440b      	add	r3, r1
 800137e:	761a      	strb	r2, [r3, #24]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000e100 	.word	0xe000e100
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	@ 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f1c3 0307 	rsb	r3, r3, #7
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	bf28      	it	cs
 80013b2:	2304      	movcs	r3, #4
 80013b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3304      	adds	r3, #4
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d902      	bls.n	80013c4 <NVIC_EncodePriority+0x30>
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3b03      	subs	r3, #3
 80013c2:	e000      	b.n	80013c6 <NVIC_EncodePriority+0x32>
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	f04f 32ff 	mov.w	r2, #4294967295
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43da      	mvns	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	401a      	ands	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013dc:	f04f 31ff 	mov.w	r1, #4294967295
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	43d9      	mvns	r1, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	4313      	orrs	r3, r2
         );
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3724      	adds	r7, #36	@ 0x24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800140c:	d301      	bcc.n	8001412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140e:	2301      	movs	r3, #1
 8001410:	e00f      	b.n	8001432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001412:	4a0a      	ldr	r2, [pc, #40]	@ (800143c <SysTick_Config+0x40>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141a:	210f      	movs	r1, #15
 800141c:	f04f 30ff 	mov.w	r0, #4294967295
 8001420:	f7ff ff8e 	bl	8001340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001424:	4b05      	ldr	r3, [pc, #20]	@ (800143c <SysTick_Config+0x40>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142a:	4b04      	ldr	r3, [pc, #16]	@ (800143c <SysTick_Config+0x40>)
 800142c:	2207      	movs	r2, #7
 800142e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	e000e010 	.word	0xe000e010

08001440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ff29 	bl	80012a0 <__NVIC_SetPriorityGrouping>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b086      	sub	sp, #24
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001468:	f7ff ff3e 	bl	80012e8 <__NVIC_GetPriorityGrouping>
 800146c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	6978      	ldr	r0, [r7, #20]
 8001474:	f7ff ff8e 	bl	8001394 <NVIC_EncodePriority>
 8001478:	4602      	mov	r2, r0
 800147a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff5d 	bl	8001340 <__NVIC_SetPriority>
}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff31 	bl	8001304 <__NVIC_EnableIRQ>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ffa2 	bl	80013fc <SysTick_Config>
 80014b8:	4603      	mov	r3, r0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b084      	sub	sp, #16
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d005      	beq.n	80014e6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2204      	movs	r2, #4
 80014de:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
 80014e4:	e029      	b.n	800153a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 020e 	bic.w	r2, r2, #14
 80014f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0201 	bic.w	r2, r2, #1
 8001504:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150a:	f003 021c 	and.w	r2, r3, #28
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	2101      	movs	r1, #1
 8001514:	fa01 f202 	lsl.w	r2, r1, r2
 8001518:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	4798      	blx	r3
    }
  }
  return status;
 800153a:	7bfb      	ldrb	r3, [r7, #15]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001552:	b2db      	uxtb	r3, r3
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001560:	b480      	push	{r7}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800156e:	e17f      	b.n	8001870 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	2101      	movs	r1, #1
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	4013      	ands	r3, r2
 800157e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 8171 	beq.w	800186a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	2b01      	cmp	r3, #1
 8001592:	d005      	beq.n	80015a0 <HAL_GPIO_Init+0x40>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d130      	bne.n	8001602 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	2203      	movs	r2, #3
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	68da      	ldr	r2, [r3, #12]
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015d6:	2201      	movs	r2, #1
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	091b      	lsrs	r3, r3, #4
 80015ec:	f003 0201 	and.w	r2, r3, #1
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	2b03      	cmp	r3, #3
 800160c:	d118      	bne.n	8001640 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001612:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001614:	2201      	movs	r2, #1
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4013      	ands	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	08db      	lsrs	r3, r3, #3
 800162a:	f003 0201 	and.w	r2, r3, #1
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	2b03      	cmp	r3, #3
 800164a:	d017      	beq.n	800167c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	2203      	movs	r2, #3
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4313      	orrs	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d123      	bne.n	80016d0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	08da      	lsrs	r2, r3, #3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3208      	adds	r2, #8
 8001690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	220f      	movs	r2, #15
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	691a      	ldr	r2, [r3, #16]
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	08da      	lsrs	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3208      	adds	r2, #8
 80016ca:	6939      	ldr	r1, [r7, #16]
 80016cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0203 	and.w	r2, r3, #3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 80ac 	beq.w	800186a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001712:	4b5f      	ldr	r3, [pc, #380]	@ (8001890 <HAL_GPIO_Init+0x330>)
 8001714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001716:	4a5e      	ldr	r2, [pc, #376]	@ (8001890 <HAL_GPIO_Init+0x330>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6613      	str	r3, [r2, #96]	@ 0x60
 800171e:	4b5c      	ldr	r3, [pc, #368]	@ (8001890 <HAL_GPIO_Init+0x330>)
 8001720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800172a:	4a5a      	ldr	r2, [pc, #360]	@ (8001894 <HAL_GPIO_Init+0x334>)
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	089b      	lsrs	r3, r3, #2
 8001730:	3302      	adds	r3, #2
 8001732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001736:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	220f      	movs	r2, #15
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001754:	d025      	beq.n	80017a2 <HAL_GPIO_Init+0x242>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4f      	ldr	r2, [pc, #316]	@ (8001898 <HAL_GPIO_Init+0x338>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d01f      	beq.n	800179e <HAL_GPIO_Init+0x23e>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a4e      	ldr	r2, [pc, #312]	@ (800189c <HAL_GPIO_Init+0x33c>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d019      	beq.n	800179a <HAL_GPIO_Init+0x23a>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a4d      	ldr	r2, [pc, #308]	@ (80018a0 <HAL_GPIO_Init+0x340>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d013      	beq.n	8001796 <HAL_GPIO_Init+0x236>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4c      	ldr	r2, [pc, #304]	@ (80018a4 <HAL_GPIO_Init+0x344>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d00d      	beq.n	8001792 <HAL_GPIO_Init+0x232>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4b      	ldr	r2, [pc, #300]	@ (80018a8 <HAL_GPIO_Init+0x348>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d007      	beq.n	800178e <HAL_GPIO_Init+0x22e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a4a      	ldr	r2, [pc, #296]	@ (80018ac <HAL_GPIO_Init+0x34c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d101      	bne.n	800178a <HAL_GPIO_Init+0x22a>
 8001786:	2306      	movs	r3, #6
 8001788:	e00c      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 800178a:	2307      	movs	r3, #7
 800178c:	e00a      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 800178e:	2305      	movs	r3, #5
 8001790:	e008      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 8001792:	2304      	movs	r3, #4
 8001794:	e006      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 8001796:	2303      	movs	r3, #3
 8001798:	e004      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 800179a:	2302      	movs	r3, #2
 800179c:	e002      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 80017a2:	2300      	movs	r3, #0
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	f002 0203 	and.w	r2, r2, #3
 80017aa:	0092      	lsls	r2, r2, #2
 80017ac:	4093      	lsls	r3, r2
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017b4:	4937      	ldr	r1, [pc, #220]	@ (8001894 <HAL_GPIO_Init+0x334>)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	089b      	lsrs	r3, r3, #2
 80017ba:	3302      	adds	r3, #2
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017c2:	4b3b      	ldr	r3, [pc, #236]	@ (80018b0 <HAL_GPIO_Init+0x350>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017e6:	4a32      	ldr	r2, [pc, #200]	@ (80018b0 <HAL_GPIO_Init+0x350>)
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017ec:	4b30      	ldr	r3, [pc, #192]	@ (80018b0 <HAL_GPIO_Init+0x350>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4313      	orrs	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001810:	4a27      	ldr	r2, [pc, #156]	@ (80018b0 <HAL_GPIO_Init+0x350>)
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001816:	4b26      	ldr	r3, [pc, #152]	@ (80018b0 <HAL_GPIO_Init+0x350>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800183a:	4a1d      	ldr	r2, [pc, #116]	@ (80018b0 <HAL_GPIO_Init+0x350>)
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001840:	4b1b      	ldr	r3, [pc, #108]	@ (80018b0 <HAL_GPIO_Init+0x350>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	43db      	mvns	r3, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001864:	4a12      	ldr	r2, [pc, #72]	@ (80018b0 <HAL_GPIO_Init+0x350>)
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3301      	adds	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	fa22 f303 	lsr.w	r3, r2, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	f47f ae78 	bne.w	8001570 <HAL_GPIO_Init+0x10>
  }
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	371c      	adds	r7, #28
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000
 8001894:	40010000 	.word	0x40010000
 8001898:	48000400 	.word	0x48000400
 800189c:	48000800 	.word	0x48000800
 80018a0:	48000c00 	.word	0x48000c00
 80018a4:	48001000 	.word	0x48001000
 80018a8:	48001400 	.word	0x48001400
 80018ac:	48001800 	.word	0x48001800
 80018b0:	40010400 	.word	0x40010400

080018b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691a      	ldr	r2, [r3, #16]
 80018c4:	887b      	ldrh	r3, [r7, #2]
 80018c6:	4013      	ands	r3, r2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d002      	beq.n	80018d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018cc:	2301      	movs	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
 80018d0:	e001      	b.n	80018d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	807b      	strh	r3, [r7, #2]
 80018f0:	4613      	mov	r3, r2
 80018f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018f4:	787b      	ldrb	r3, [r7, #1]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018fa:	887a      	ldrh	r2, [r7, #2]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001900:	e002      	b.n	8001908 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001902:	887a      	ldrh	r2, [r7, #2]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800191e:	4b08      	ldr	r3, [pc, #32]	@ (8001940 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001920:	695a      	ldr	r2, [r3, #20]
 8001922:	88fb      	ldrh	r3, [r7, #6]
 8001924:	4013      	ands	r3, r2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d006      	beq.n	8001938 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800192a:	4a05      	ldr	r2, [pc, #20]	@ (8001940 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800192c:	88fb      	ldrh	r3, [r7, #6]
 800192e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe fed0 	bl	80006d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40010400 	.word	0x40010400

08001944 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e08d      	b.n	8001a72 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d106      	bne.n	8001970 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff fa18 	bl	8000da0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2224      	movs	r2, #36	@ 0x24
 8001974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0201 	bic.w	r2, r2, #1
 8001986:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001994:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d107      	bne.n	80019be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	e006      	b.n	80019cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80019ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d108      	bne.n	80019e6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	e007      	b.n	80019f6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6812      	ldr	r2, [r2, #0]
 8001a00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691a      	ldr	r2, [r3, #16]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69d9      	ldr	r1, [r3, #28]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a1a      	ldr	r2, [r3, #32]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	430a      	orrs	r2, r1
 8001a42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f042 0201 	orr.w	r2, r2, #1
 8001a52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2220      	movs	r2, #32
 8001a5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af02      	add	r7, sp, #8
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	4608      	mov	r0, r1
 8001a86:	4611      	mov	r1, r2
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	817b      	strh	r3, [r7, #10]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	813b      	strh	r3, [r7, #8]
 8001a92:	4613      	mov	r3, r2
 8001a94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b20      	cmp	r3, #32
 8001aa0:	f040 80f9 	bne.w	8001c96 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001aa4:	6a3b      	ldr	r3, [r7, #32]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d002      	beq.n	8001ab0 <HAL_I2C_Mem_Write+0x34>
 8001aaa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d105      	bne.n	8001abc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ab6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0ed      	b.n	8001c98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d101      	bne.n	8001aca <HAL_I2C_Mem_Write+0x4e>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e0e6      	b.n	8001c98 <HAL_I2C_Mem_Write+0x21c>
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ad2:	f7ff fbb5 	bl	8001240 <HAL_GetTick>
 8001ad6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	2319      	movs	r3, #25
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f000 fed0 	bl	800288a <I2C_WaitOnFlagUntilTimeout>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0d1      	b.n	8001c98 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2221      	movs	r2, #33	@ 0x21
 8001af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2240      	movs	r2, #64	@ 0x40
 8001b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6a3a      	ldr	r2, [r7, #32]
 8001b0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001b14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b1c:	88f8      	ldrh	r0, [r7, #6]
 8001b1e:	893a      	ldrh	r2, [r7, #8]
 8001b20:	8979      	ldrh	r1, [r7, #10]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	9301      	str	r3, [sp, #4]
 8001b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f000 fa67 	bl	8002000 <I2C_RequestMemoryWrite>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e0a9      	b.n	8001c98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	2bff      	cmp	r3, #255	@ 0xff
 8001b4c:	d90e      	bls.n	8001b6c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	22ff      	movs	r2, #255	@ 0xff
 8001b52:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	8979      	ldrh	r1, [r7, #10]
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f001 f853 	bl	8002c10 <I2C_TransferConfig>
 8001b6a:	e00f      	b.n	8001b8c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	8979      	ldrh	r1, [r7, #10]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f001 f842 	bl	8002c10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f000 fed3 	bl	800293c <I2C_WaitOnTXISFlagUntilTimeout>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e07b      	b.n	8001c98 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba4:	781a      	ldrb	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb0:	1c5a      	adds	r2, r3, #1
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d034      	beq.n	8001c44 <HAL_I2C_Mem_Write+0x1c8>
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d130      	bne.n	8001c44 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be8:	2200      	movs	r2, #0
 8001bea:	2180      	movs	r1, #128	@ 0x80
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f000 fe4c 	bl	800288a <I2C_WaitOnFlagUntilTimeout>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e04d      	b.n	8001c98 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	2bff      	cmp	r3, #255	@ 0xff
 8001c04:	d90e      	bls.n	8001c24 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	22ff      	movs	r2, #255	@ 0xff
 8001c0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	8979      	ldrh	r1, [r7, #10]
 8001c14:	2300      	movs	r3, #0
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	f000 fff7 	bl	8002c10 <I2C_TransferConfig>
 8001c22:	e00f      	b.n	8001c44 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	8979      	ldrh	r1, [r7, #10]
 8001c36:	2300      	movs	r3, #0
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 ffe6 	bl	8002c10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d19e      	bne.n	8001b8c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f000 feb9 	bl	80029ca <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e01a      	b.n	8001c98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2220      	movs	r2, #32
 8001c68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6859      	ldr	r1, [r3, #4]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca0 <HAL_I2C_Mem_Write+0x224>)
 8001c76:	400b      	ands	r3, r1
 8001c78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	e000      	b.n	8001c98 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001c96:	2302      	movs	r3, #2
  }
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	fe00e800 	.word	0xfe00e800

08001ca4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cc8:	68ba      	ldr	r2, [r7, #8]
 8001cca:	68f9      	ldr	r1, [r7, #12]
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	4798      	blx	r3
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00f      	beq.n	8001d1a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00a      	beq.n	8001d1a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d08:	f043 0201 	orr.w	r2, r3, #1
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d18:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00f      	beq.n	8001d44 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00a      	beq.n	8001d44 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d32:	f043 0208 	orr.w	r2, r3, #8
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d42:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00f      	beq.n	8001d6e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00a      	beq.n	8001d6e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5c:	f043 0202 	orr.w	r2, r3, #2
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d6c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d72:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 030b 	and.w	r3, r3, #11
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001d7e:	68f9      	ldr	r1, [r7, #12]
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 fc29 	bl	80025d8 <I2C_ITError>
  }
}
 8001d86:	bf00      	nop
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	70fb      	strb	r3, [r7, #3]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <I2C_Slave_ISR_IT+0x24>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e0e2      	b.n	8001ff8 <I2C_Slave_ISR_IT+0x1ea>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	f003 0320 	and.w	r3, r3, #32
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d009      	beq.n	8001e58 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d004      	beq.n	8001e58 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001e4e:	6939      	ldr	r1, [r7, #16]
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f000 fa09 	bl	8002268 <I2C_ITSlaveCplt>
 8001e56:	e0ca      	b.n	8001fee <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	f003 0310 	and.w	r3, r3, #16
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d04b      	beq.n	8001efa <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d046      	beq.n	8001efa <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d128      	bne.n	8001ec8 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b28      	cmp	r3, #40	@ 0x28
 8001e80:	d108      	bne.n	8001e94 <I2C_Slave_ISR_IT+0x86>
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e88:	d104      	bne.n	8001e94 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001e8a:	6939      	ldr	r1, [r7, #16]
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 fb4f 	bl	8002530 <I2C_ITListenCplt>
 8001e92:	e031      	b.n	8001ef8 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b29      	cmp	r3, #41	@ 0x29
 8001e9e:	d10e      	bne.n	8001ebe <I2C_Slave_ISR_IT+0xb0>
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ea6:	d00a      	beq.n	8001ebe <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2210      	movs	r2, #16
 8001eae:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f000 fca8 	bl	8002806 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 f97a 	bl	80021b0 <I2C_ITSlaveSeqCplt>
 8001ebc:	e01c      	b.n	8001ef8 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2210      	movs	r2, #16
 8001ec4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001ec6:	e08f      	b.n	8001fe8 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2210      	movs	r2, #16
 8001ece:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed4:	f043 0204 	orr.w	r2, r3, #4
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <I2C_Slave_ISR_IT+0xdc>
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ee8:	d17e      	bne.n	8001fe8 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eee:	4619      	mov	r1, r3
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f000 fb71 	bl	80025d8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001ef6:	e077      	b.n	8001fe8 <I2C_Slave_ISR_IT+0x1da>
 8001ef8:	e076      	b.n	8001fe8 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d02f      	beq.n	8001f64 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d02a      	beq.n	8001f64 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d018      	beq.n	8001f4a <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f34:	3b01      	subs	r3, #1
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	3b01      	subs	r3, #1
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d14b      	bne.n	8001fec <I2C_Slave_ISR_IT+0x1de>
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f5a:	d047      	beq.n	8001fec <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f000 f927 	bl	80021b0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001f62:	e043      	b.n	8001fec <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d009      	beq.n	8001f82 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d004      	beq.n	8001f82 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001f78:	6939      	ldr	r1, [r7, #16]
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 f894 	bl	80020a8 <I2C_ITAddrCplt>
 8001f80:	e035      	b.n	8001fee <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d030      	beq.n	8001fee <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d02b      	beq.n	8001fee <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d018      	beq.n	8001fd2 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa4:	781a      	ldrb	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001fd0:	e00d      	b.n	8001fee <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fd8:	d002      	beq.n	8001fe0 <I2C_Slave_ISR_IT+0x1d2>
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d106      	bne.n	8001fee <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 f8e5 	bl	80021b0 <I2C_ITSlaveSeqCplt>
 8001fe6:	e002      	b.n	8001fee <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8001fe8:	bf00      	nop
 8001fea:	e000      	b.n	8001fee <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8001fec:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af02      	add	r7, sp, #8
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	4608      	mov	r0, r1
 800200a:	4611      	mov	r1, r2
 800200c:	461a      	mov	r2, r3
 800200e:	4603      	mov	r3, r0
 8002010:	817b      	strh	r3, [r7, #10]
 8002012:	460b      	mov	r3, r1
 8002014:	813b      	strh	r3, [r7, #8]
 8002016:	4613      	mov	r3, r2
 8002018:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800201a:	88fb      	ldrh	r3, [r7, #6]
 800201c:	b2da      	uxtb	r2, r3
 800201e:	8979      	ldrh	r1, [r7, #10]
 8002020:	4b20      	ldr	r3, [pc, #128]	@ (80020a4 <I2C_RequestMemoryWrite+0xa4>)
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 fdf1 	bl	8002c10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800202e:	69fa      	ldr	r2, [r7, #28]
 8002030:	69b9      	ldr	r1, [r7, #24]
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 fc82 	bl	800293c <I2C_WaitOnTXISFlagUntilTimeout>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e02c      	b.n	800209c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002042:	88fb      	ldrh	r3, [r7, #6]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d105      	bne.n	8002054 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002048:	893b      	ldrh	r3, [r7, #8]
 800204a:	b2da      	uxtb	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	629a      	str	r2, [r3, #40]	@ 0x28
 8002052:	e015      	b.n	8002080 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002054:	893b      	ldrh	r3, [r7, #8]
 8002056:	0a1b      	lsrs	r3, r3, #8
 8002058:	b29b      	uxth	r3, r3
 800205a:	b2da      	uxtb	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	69b9      	ldr	r1, [r7, #24]
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 fc68 	bl	800293c <I2C_WaitOnTXISFlagUntilTimeout>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e012      	b.n	800209c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002076:	893b      	ldrh	r3, [r7, #8]
 8002078:	b2da      	uxtb	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	2200      	movs	r2, #0
 8002088:	2180      	movs	r1, #128	@ 0x80
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 fbfd 	bl	800288a <I2C_WaitOnFlagUntilTimeout>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	80002000 	.word	0x80002000

080020a8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80020be:	2b28      	cmp	r3, #40	@ 0x28
 80020c0:	d16a      	bne.n	8002198 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	0c1b      	lsrs	r3, r3, #16
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	0c1b      	lsrs	r3, r3, #16
 80020da:	b29b      	uxth	r3, r3
 80020dc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80020e0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ee:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80020fc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d138      	bne.n	8002178 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002106:	897b      	ldrh	r3, [r7, #10]
 8002108:	09db      	lsrs	r3, r3, #7
 800210a:	b29a      	uxth	r2, r3
 800210c:	89bb      	ldrh	r3, [r7, #12]
 800210e:	4053      	eors	r3, r2
 8002110:	b29b      	uxth	r3, r3
 8002112:	f003 0306 	and.w	r3, r3, #6
 8002116:	2b00      	cmp	r3, #0
 8002118:	d11c      	bne.n	8002154 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800211a:	897b      	ldrh	r3, [r7, #10]
 800211c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800212c:	2b02      	cmp	r3, #2
 800212e:	d13b      	bne.n	80021a8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2208      	movs	r2, #8
 800213c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002146:	89ba      	ldrh	r2, [r7, #12]
 8002148:	7bfb      	ldrb	r3, [r7, #15]
 800214a:	4619      	mov	r1, r3
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff fe32 	bl	8001db6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002152:	e029      	b.n	80021a8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002154:	893b      	ldrh	r3, [r7, #8]
 8002156:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002158:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 fd89 	bl	8002c74 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800216a:	89ba      	ldrh	r2, [r7, #12]
 800216c:	7bfb      	ldrb	r3, [r7, #15]
 800216e:	4619      	mov	r1, r3
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff fe20 	bl	8001db6 <HAL_I2C_AddrCallback>
}
 8002176:	e017      	b.n	80021a8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002178:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 fd79 	bl	8002c74 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800218a:	89ba      	ldrh	r2, [r7, #12]
 800218c:	7bfb      	ldrb	r3, [r7, #15]
 800218e:	4619      	mov	r1, r3
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff fe10 	bl	8001db6 <HAL_I2C_AddrCallback>
}
 8002196:	e007      	b.n	80021a8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2208      	movs	r2, #8
 800219e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80021a8:	bf00      	nop
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d008      	beq.n	80021e4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	e00c      	b.n	80021fe <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d007      	beq.n	80021fe <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021fc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b29      	cmp	r3, #41	@ 0x29
 8002208:	d112      	bne.n	8002230 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2228      	movs	r2, #40	@ 0x28
 800220e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2221      	movs	r2, #33	@ 0x21
 8002216:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002218:	2101      	movs	r1, #1
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 fd2a 	bl	8002c74 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff fdb0 	bl	8001d8e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800222e:	e017      	b.n	8002260 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b2a      	cmp	r3, #42	@ 0x2a
 800223a:	d111      	bne.n	8002260 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2228      	movs	r2, #40	@ 0x28
 8002240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2222      	movs	r2, #34	@ 0x22
 8002248:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800224a:	2102      	movs	r1, #2
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 fd11 	bl	8002c74 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff fda1 	bl	8001da2 <HAL_I2C_SlaveRxCpltCallback>
}
 8002260:	bf00      	nop
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002282:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800228a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2220      	movs	r2, #32
 8002292:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002294:	7afb      	ldrb	r3, [r7, #11]
 8002296:	2b21      	cmp	r3, #33	@ 0x21
 8002298:	d002      	beq.n	80022a0 <I2C_ITSlaveCplt+0x38>
 800229a:	7afb      	ldrb	r3, [r7, #11]
 800229c:	2b29      	cmp	r3, #41	@ 0x29
 800229e:	d108      	bne.n	80022b2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80022a0:	f248 0101 	movw	r1, #32769	@ 0x8001
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 fce5 	bl	8002c74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2221      	movs	r2, #33	@ 0x21
 80022ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80022b0:	e019      	b.n	80022e6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80022b2:	7afb      	ldrb	r3, [r7, #11]
 80022b4:	2b22      	cmp	r3, #34	@ 0x22
 80022b6:	d002      	beq.n	80022be <I2C_ITSlaveCplt+0x56>
 80022b8:	7afb      	ldrb	r3, [r7, #11]
 80022ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80022bc:	d108      	bne.n	80022d0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80022be:	f248 0102 	movw	r1, #32770	@ 0x8002
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 fcd6 	bl	8002c74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2222      	movs	r2, #34	@ 0x22
 80022cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80022ce:	e00a      	b.n	80022e6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80022d0:	7afb      	ldrb	r3, [r7, #11]
 80022d2:	2b28      	cmp	r3, #40	@ 0x28
 80022d4:	d107      	bne.n	80022e6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80022d6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 fcca 	bl	8002c74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022f4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6859      	ldr	r1, [r3, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b89      	ldr	r3, [pc, #548]	@ (8002528 <I2C_ITSlaveCplt+0x2c0>)
 8002302:	400b      	ands	r3, r1
 8002304:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 fa7d 	bl	8002806 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d013      	beq.n	800233e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002324:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800232a:	2b00      	cmp	r3, #0
 800232c:	d01f      	beq.n	800236e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	b29a      	uxth	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800233c:	e017      	b.n	800236e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d012      	beq.n	800236e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002356:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800235c:	2b00      	cmp	r3, #0
 800235e:	d006      	beq.n	800236e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	b29a      	uxth	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d020      	beq.n	80023ba <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f023 0304 	bic.w	r3, r3, #4
 800237e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00c      	beq.n	80023ba <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	3b01      	subs	r3, #1
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023be:	b29b      	uxth	r3, r3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c8:	f043 0204 	orr.w	r2, r3, #4
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f003 0310 	and.w	r3, r3, #16
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d049      	beq.n	800246e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d044      	beq.n	800246e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d128      	bne.n	8002440 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b28      	cmp	r3, #40	@ 0x28
 80023f8:	d108      	bne.n	800240c <I2C_ITSlaveCplt+0x1a4>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002400:	d104      	bne.n	800240c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002402:	6979      	ldr	r1, [r7, #20]
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 f893 	bl	8002530 <I2C_ITListenCplt>
 800240a:	e030      	b.n	800246e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b29      	cmp	r3, #41	@ 0x29
 8002416:	d10e      	bne.n	8002436 <I2C_ITSlaveCplt+0x1ce>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800241e:	d00a      	beq.n	8002436 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2210      	movs	r2, #16
 8002426:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f9ec 	bl	8002806 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff febe 	bl	80021b0 <I2C_ITSlaveSeqCplt>
 8002434:	e01b      	b.n	800246e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2210      	movs	r2, #16
 800243c:	61da      	str	r2, [r3, #28]
 800243e:	e016      	b.n	800246e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2210      	movs	r2, #16
 8002446:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244c:	f043 0204 	orr.w	r2, r3, #4
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <I2C_ITSlaveCplt+0x1fa>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002460:	d105      	bne.n	800246e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002466:	4619      	mov	r1, r3
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f8b5 	bl	80025d8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002480:	2b00      	cmp	r3, #0
 8002482:	d010      	beq.n	80024a6 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002488:	4619      	mov	r1, r3
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f8a4 	bl	80025d8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b28      	cmp	r3, #40	@ 0x28
 800249a:	d141      	bne.n	8002520 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800249c:	6979      	ldr	r1, [r7, #20]
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f846 	bl	8002530 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80024a4:	e03c      	b.n	8002520 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024aa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80024ae:	d014      	beq.n	80024da <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff fe7d 	bl	80021b0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a1c      	ldr	r2, [pc, #112]	@ (800252c <I2C_ITSlaveCplt+0x2c4>)
 80024ba:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff fc7d 	bl	8001dd2 <HAL_I2C_ListenCpltCallback>
}
 80024d8:	e022      	b.n	8002520 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b22      	cmp	r3, #34	@ 0x22
 80024e4:	d10e      	bne.n	8002504 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2220      	movs	r2, #32
 80024ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff fc50 	bl	8001da2 <HAL_I2C_SlaveRxCpltCallback>
}
 8002502:	e00d      	b.n	8002520 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff fc37 	bl	8001d8e <HAL_I2C_SlaveTxCpltCallback>
}
 8002520:	bf00      	nop
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	fe00e800 	.word	0xfe00e800
 800252c:	ffff0000 	.word	0xffff0000

08002530 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a25      	ldr	r2, [pc, #148]	@ (80025d4 <I2C_ITListenCplt+0xa4>)
 800253e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2220      	movs	r2, #32
 800254a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	2b00      	cmp	r3, #0
 8002564:	d022      	beq.n	80025ac <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002578:	1c5a      	adds	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002582:	2b00      	cmp	r3, #0
 8002584:	d012      	beq.n	80025ac <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800258a:	3b01      	subs	r3, #1
 800258c:	b29a      	uxth	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002596:	b29b      	uxth	r3, r3
 8002598:	3b01      	subs	r3, #1
 800259a:	b29a      	uxth	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a4:	f043 0204 	orr.w	r2, r3, #4
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80025ac:	f248 0103 	movw	r1, #32771	@ 0x8003
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 fb5f 	bl	8002c74 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2210      	movs	r2, #16
 80025bc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff fc03 	bl	8001dd2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80025cc:	bf00      	nop
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	ffff0000 	.word	0xffff0000

080025d8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025e8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a6d      	ldr	r2, [pc, #436]	@ (80027ac <I2C_ITError+0x1d4>)
 80025f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800260a:	7bfb      	ldrb	r3, [r7, #15]
 800260c:	2b28      	cmp	r3, #40	@ 0x28
 800260e:	d005      	beq.n	800261c <I2C_ITError+0x44>
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	2b29      	cmp	r3, #41	@ 0x29
 8002614:	d002      	beq.n	800261c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	2b2a      	cmp	r3, #42	@ 0x2a
 800261a:	d10b      	bne.n	8002634 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800261c:	2103      	movs	r1, #3
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 fb28 	bl	8002c74 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2228      	movs	r2, #40	@ 0x28
 8002628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a60      	ldr	r2, [pc, #384]	@ (80027b0 <I2C_ITError+0x1d8>)
 8002630:	635a      	str	r2, [r3, #52]	@ 0x34
 8002632:	e030      	b.n	8002696 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002634:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 fb1b 	bl	8002c74 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f8e1 	bl	8002806 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b60      	cmp	r3, #96	@ 0x60
 800264e:	d01f      	beq.n	8002690 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2220      	movs	r2, #32
 8002654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f003 0320 	and.w	r3, r3, #32
 8002662:	2b20      	cmp	r3, #32
 8002664:	d114      	bne.n	8002690 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	2b10      	cmp	r3, #16
 8002672:	d109      	bne.n	8002688 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2210      	movs	r2, #16
 800267a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002680:	f043 0204 	orr.w	r2, r3, #4
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2220      	movs	r2, #32
 800268e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d039      	beq.n	8002718 <I2C_ITError+0x140>
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2b11      	cmp	r3, #17
 80026a8:	d002      	beq.n	80026b0 <I2C_ITError+0xd8>
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2b21      	cmp	r3, #33	@ 0x21
 80026ae:	d133      	bne.n	8002718 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026be:	d107      	bne.n	80026d0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80026ce:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fe ff35 	bl	8001544 <HAL_DMA_GetState>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d017      	beq.n	8002710 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e4:	4a33      	ldr	r2, [pc, #204]	@ (80027b4 <I2C_ITError+0x1dc>)
 80026e6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe fee4 	bl	80014c2 <HAL_DMA_Abort_IT>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d04d      	beq.n	800279c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800270a:	4610      	mov	r0, r2
 800270c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800270e:	e045      	b.n	800279c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f851 	bl	80027b8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002716:	e041      	b.n	800279c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800271c:	2b00      	cmp	r3, #0
 800271e:	d039      	beq.n	8002794 <I2C_ITError+0x1bc>
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b12      	cmp	r3, #18
 8002724:	d002      	beq.n	800272c <I2C_ITError+0x154>
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2b22      	cmp	r3, #34	@ 0x22
 800272a:	d133      	bne.n	8002794 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002736:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800273a:	d107      	bne.n	800274c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800274a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002750:	4618      	mov	r0, r3
 8002752:	f7fe fef7 	bl	8001544 <HAL_DMA_GetState>
 8002756:	4603      	mov	r3, r0
 8002758:	2b01      	cmp	r3, #1
 800275a:	d017      	beq.n	800278c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002760:	4a14      	ldr	r2, [pc, #80]	@ (80027b4 <I2C_ITError+0x1dc>)
 8002762:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002770:	4618      	mov	r0, r3
 8002772:	f7fe fea6 	bl	80014c2 <HAL_DMA_Abort_IT>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d011      	beq.n	80027a0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002786:	4610      	mov	r0, r2
 8002788:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800278a:	e009      	b.n	80027a0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f813 	bl	80027b8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002792:	e005      	b.n	80027a0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f80f 	bl	80027b8 <I2C_TreatErrorCallback>
  }
}
 800279a:	e002      	b.n	80027a2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800279c:	bf00      	nop
 800279e:	e000      	b.n	80027a2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80027a0:	bf00      	nop
}
 80027a2:	bf00      	nop
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	ffff0000 	.word	0xffff0000
 80027b0:	08001e0f 	.word	0x08001e0f
 80027b4:	0800284f 	.word	0x0800284f

080027b8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b60      	cmp	r3, #96	@ 0x60
 80027ca:	d10e      	bne.n	80027ea <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff fb09 	bl	8001dfa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80027e8:	e009      	b.n	80027fe <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff faf4 	bl	8001de6 <HAL_I2C_ErrorCallback>
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b02      	cmp	r3, #2
 800281a:	d103      	bne.n	8002824 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2200      	movs	r2, #0
 8002822:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b01      	cmp	r3, #1
 8002830:	d007      	beq.n	8002842 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699a      	ldr	r2, [r3, #24]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f042 0201 	orr.w	r2, r2, #1
 8002840:	619a      	str	r2, [r3, #24]
  }
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b084      	sub	sp, #16
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002868:	2200      	movs	r2, #0
 800286a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002878:	2200      	movs	r2, #0
 800287a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f7ff ff9b 	bl	80027b8 <I2C_TreatErrorCallback>
}
 8002882:	bf00      	nop
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b084      	sub	sp, #16
 800288e:	af00      	add	r7, sp, #0
 8002890:	60f8      	str	r0, [r7, #12]
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	603b      	str	r3, [r7, #0]
 8002896:	4613      	mov	r3, r2
 8002898:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800289a:	e03b      	b.n	8002914 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	6839      	ldr	r1, [r7, #0]
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 f8d5 	bl	8002a50 <I2C_IsErrorOccurred>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e041      	b.n	8002934 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b6:	d02d      	beq.n	8002914 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028b8:	f7fe fcc2 	bl	8001240 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d302      	bcc.n	80028ce <I2C_WaitOnFlagUntilTimeout+0x44>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d122      	bne.n	8002914 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	699a      	ldr	r2, [r3, #24]
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	4013      	ands	r3, r2
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	429a      	cmp	r2, r3
 80028dc:	bf0c      	ite	eq
 80028de:	2301      	moveq	r3, #1
 80028e0:	2300      	movne	r3, #0
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	461a      	mov	r2, r3
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d113      	bne.n	8002914 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f0:	f043 0220 	orr.w	r2, r3, #32
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2220      	movs	r2, #32
 80028fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e00f      	b.n	8002934 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699a      	ldr	r2, [r3, #24]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	4013      	ands	r3, r2
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	429a      	cmp	r2, r3
 8002922:	bf0c      	ite	eq
 8002924:	2301      	moveq	r3, #1
 8002926:	2300      	movne	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	461a      	mov	r2, r3
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	429a      	cmp	r2, r3
 8002930:	d0b4      	beq.n	800289c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002948:	e033      	b.n	80029b2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 f87e 	bl	8002a50 <I2C_IsErrorOccurred>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e031      	b.n	80029c2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002964:	d025      	beq.n	80029b2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002966:	f7fe fc6b 	bl	8001240 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	429a      	cmp	r2, r3
 8002974:	d302      	bcc.n	800297c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d11a      	bne.n	80029b2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b02      	cmp	r3, #2
 8002988:	d013      	beq.n	80029b2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298e:	f043 0220 	orr.w	r2, r3, #32
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2220      	movs	r2, #32
 800299a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e007      	b.n	80029c2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d1c4      	bne.n	800294a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b084      	sub	sp, #16
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	60f8      	str	r0, [r7, #12]
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029d6:	e02f      	b.n	8002a38 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	68b9      	ldr	r1, [r7, #8]
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 f837 	bl	8002a50 <I2C_IsErrorOccurred>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e02d      	b.n	8002a48 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ec:	f7fe fc28 	bl	8001240 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d302      	bcc.n	8002a02 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d11a      	bne.n	8002a38 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	f003 0320 	and.w	r3, r3, #32
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	d013      	beq.n	8002a38 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a14:	f043 0220 	orr.w	r2, r3, #32
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e007      	b.n	8002a48 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	f003 0320 	and.w	r3, r3, #32
 8002a42:	2b20      	cmp	r3, #32
 8002a44:	d1c8      	bne.n	80029d8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08a      	sub	sp, #40	@ 0x28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	f003 0310 	and.w	r3, r3, #16
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d068      	beq.n	8002b4e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2210      	movs	r2, #16
 8002a82:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a84:	e049      	b.n	8002b1a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8c:	d045      	beq.n	8002b1a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a8e:	f7fe fbd7 	bl	8001240 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d302      	bcc.n	8002aa4 <I2C_IsErrorOccurred+0x54>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d13a      	bne.n	8002b1a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ab6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ac2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ac6:	d121      	bne.n	8002b0c <I2C_IsErrorOccurred+0xbc>
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ace:	d01d      	beq.n	8002b0c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002ad0:	7cfb      	ldrb	r3, [r7, #19]
 8002ad2:	2b20      	cmp	r3, #32
 8002ad4:	d01a      	beq.n	8002b0c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ae4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ae6:	f7fe fbab 	bl	8001240 <HAL_GetTick>
 8002aea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aec:	e00e      	b.n	8002b0c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002aee:	f7fe fba7 	bl	8001240 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b19      	cmp	r3, #25
 8002afa:	d907      	bls.n	8002b0c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	f043 0320 	orr.w	r3, r3, #32
 8002b02:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002b0a:	e006      	b.n	8002b1a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	f003 0320 	and.w	r3, r3, #32
 8002b16:	2b20      	cmp	r3, #32
 8002b18:	d1e9      	bne.n	8002aee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	f003 0320 	and.w	r3, r3, #32
 8002b24:	2b20      	cmp	r3, #32
 8002b26:	d003      	beq.n	8002b30 <I2C_IsErrorOccurred+0xe0>
 8002b28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0aa      	beq.n	8002a86 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d103      	bne.n	8002b40 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	f043 0304 	orr.w	r3, r3, #4
 8002b46:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00b      	beq.n	8002b78 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00b      	beq.n	8002b9a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	f043 0308 	orr.w	r3, r3, #8
 8002b88:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00b      	beq.n	8002bbc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	f043 0302 	orr.w	r3, r3, #2
 8002baa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d01c      	beq.n	8002bfe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f7ff fe1e 	bl	8002806 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6859      	ldr	r1, [r3, #4]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	4b0d      	ldr	r3, [pc, #52]	@ (8002c0c <I2C_IsErrorOccurred+0x1bc>)
 8002bd6:	400b      	ands	r3, r1
 8002bd8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	431a      	orrs	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002bfe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3728      	adds	r7, #40	@ 0x28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	fe00e800 	.word	0xfe00e800

08002c10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	607b      	str	r3, [r7, #4]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	817b      	strh	r3, [r7, #10]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c22:	897b      	ldrh	r3, [r7, #10]
 8002c24:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c28:	7a7b      	ldrb	r3, [r7, #9]
 8002c2a:	041b      	lsls	r3, r3, #16
 8002c2c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c30:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c3e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	0d5b      	lsrs	r3, r3, #21
 8002c4a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002c4e:	4b08      	ldr	r3, [pc, #32]	@ (8002c70 <I2C_TransferConfig+0x60>)
 8002c50:	430b      	orrs	r3, r1
 8002c52:	43db      	mvns	r3, r3
 8002c54:	ea02 0103 	and.w	r1, r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c62:	bf00      	nop
 8002c64:	371c      	adds	r7, #28
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	03ff63ff 	.word	0x03ff63ff

08002c74 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002c84:	887b      	ldrh	r3, [r7, #2]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00f      	beq.n	8002cae <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8002c94:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002ca2:	2b28      	cmp	r3, #40	@ 0x28
 8002ca4:	d003      	beq.n	8002cae <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002cac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002cae:	887b      	ldrh	r3, [r7, #2]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00f      	beq.n	8002cd8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8002cbe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002ccc:	2b28      	cmp	r3, #40	@ 0x28
 8002cce:	d003      	beq.n	8002cd8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002cd6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002cd8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	da03      	bge.n	8002ce8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002ce6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002ce8:	887b      	ldrh	r3, [r7, #2]
 8002cea:	2b10      	cmp	r3, #16
 8002cec:	d103      	bne.n	8002cf6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002cf4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002cf6:	887b      	ldrh	r3, [r7, #2]
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	d103      	bne.n	8002d04 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f043 0320 	orr.w	r3, r3, #32
 8002d02:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002d04:	887b      	ldrh	r3, [r7, #2]
 8002d06:	2b40      	cmp	r3, #64	@ 0x40
 8002d08:	d103      	bne.n	8002d12 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d10:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6819      	ldr	r1, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	43da      	mvns	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	400a      	ands	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]
}
 8002d24:	bf00      	nop
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b20      	cmp	r3, #32
 8002d44:	d138      	bne.n	8002db8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d50:	2302      	movs	r3, #2
 8002d52:	e032      	b.n	8002dba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2224      	movs	r2, #36	@ 0x24
 8002d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0201 	bic.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6819      	ldr	r1, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0201 	orr.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	e000      	b.n	8002dba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002db8:	2302      	movs	r3, #2
  }
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b085      	sub	sp, #20
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b20      	cmp	r3, #32
 8002dda:	d139      	bne.n	8002e50 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e033      	b.n	8002e52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2224      	movs	r2, #36	@ 0x24
 8002df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0201 	bic.w	r2, r2, #1
 8002e08:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e18:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	021b      	lsls	r3, r3, #8
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e000      	b.n	8002e52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e50:	2302      	movs	r3, #2
  }
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
	...

08002e60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e64:	4b04      	ldr	r3, [pc, #16]	@ (8002e78 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40007000 	.word	0x40007000

08002e7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e8a:	d130      	bne.n	8002eee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e8c:	4b23      	ldr	r3, [pc, #140]	@ (8002f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e98:	d038      	beq.n	8002f0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e9a:	4b20      	ldr	r3, [pc, #128]	@ (8002f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ea2:	4a1e      	ldr	r2, [pc, #120]	@ (8002f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ea4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ea8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8002f20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2232      	movs	r2, #50	@ 0x32
 8002eb0:	fb02 f303 	mul.w	r3, r2, r3
 8002eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8002f24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eba:	0c9b      	lsrs	r3, r3, #18
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ec0:	e002      	b.n	8002ec8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ec8:	4b14      	ldr	r3, [pc, #80]	@ (8002f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ed4:	d102      	bne.n	8002edc <HAL_PWREx_ControlVoltageScaling+0x60>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1f2      	bne.n	8002ec2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002edc:	4b0f      	ldr	r3, [pc, #60]	@ (8002f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ee4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ee8:	d110      	bne.n	8002f0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e00f      	b.n	8002f0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eee:	4b0b      	ldr	r3, [pc, #44]	@ (8002f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002efa:	d007      	beq.n	8002f0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002efc:	4b07      	ldr	r3, [pc, #28]	@ (8002f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f04:	4a05      	ldr	r2, [pc, #20]	@ (8002f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40007000 	.word	0x40007000
 8002f20:	20000014 	.word	0x20000014
 8002f24:	431bde83 	.word	0x431bde83

08002f28 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e3ca      	b.n	80036d0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f3a:	4b97      	ldr	r3, [pc, #604]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f44:	4b94      	ldr	r3, [pc, #592]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f003 0303 	and.w	r3, r3, #3
 8002f4c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0310 	and.w	r3, r3, #16
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 80e4 	beq.w	8003124 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d007      	beq.n	8002f72 <HAL_RCC_OscConfig+0x4a>
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	2b0c      	cmp	r3, #12
 8002f66:	f040 808b 	bne.w	8003080 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	f040 8087 	bne.w	8003080 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f72:	4b89      	ldr	r3, [pc, #548]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d005      	beq.n	8002f8a <HAL_RCC_OscConfig+0x62>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e3a2      	b.n	80036d0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1a      	ldr	r2, [r3, #32]
 8002f8e:	4b82      	ldr	r3, [pc, #520]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d004      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x7c>
 8002f9a:	4b7f      	ldr	r3, [pc, #508]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fa2:	e005      	b.n	8002fb0 <HAL_RCC_OscConfig+0x88>
 8002fa4:	4b7c      	ldr	r3, [pc, #496]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 8002fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002faa:	091b      	lsrs	r3, r3, #4
 8002fac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d223      	bcs.n	8002ffc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 fd55 	bl	8003a68 <RCC_SetFlashLatencyFromMSIRange>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e383      	b.n	80036d0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fc8:	4b73      	ldr	r3, [pc, #460]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a72      	ldr	r2, [pc, #456]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 8002fce:	f043 0308 	orr.w	r3, r3, #8
 8002fd2:	6013      	str	r3, [r2, #0]
 8002fd4:	4b70      	ldr	r3, [pc, #448]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	496d      	ldr	r1, [pc, #436]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fe6:	4b6c      	ldr	r3, [pc, #432]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	021b      	lsls	r3, r3, #8
 8002ff4:	4968      	ldr	r1, [pc, #416]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	604b      	str	r3, [r1, #4]
 8002ffa:	e025      	b.n	8003048 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ffc:	4b66      	ldr	r3, [pc, #408]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a65      	ldr	r2, [pc, #404]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 8003002:	f043 0308 	orr.w	r3, r3, #8
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	4b63      	ldr	r3, [pc, #396]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	4960      	ldr	r1, [pc, #384]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800301a:	4b5f      	ldr	r3, [pc, #380]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	021b      	lsls	r3, r3, #8
 8003028:	495b      	ldr	r1, [pc, #364]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 800302a:	4313      	orrs	r3, r2
 800302c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d109      	bne.n	8003048 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	4618      	mov	r0, r3
 800303a:	f000 fd15 	bl	8003a68 <RCC_SetFlashLatencyFromMSIRange>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e343      	b.n	80036d0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003048:	f000 fc4a 	bl	80038e0 <HAL_RCC_GetSysClockFreq>
 800304c:	4602      	mov	r2, r0
 800304e:	4b52      	ldr	r3, [pc, #328]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	091b      	lsrs	r3, r3, #4
 8003054:	f003 030f 	and.w	r3, r3, #15
 8003058:	4950      	ldr	r1, [pc, #320]	@ (800319c <HAL_RCC_OscConfig+0x274>)
 800305a:	5ccb      	ldrb	r3, [r1, r3]
 800305c:	f003 031f 	and.w	r3, r3, #31
 8003060:	fa22 f303 	lsr.w	r3, r2, r3
 8003064:	4a4e      	ldr	r2, [pc, #312]	@ (80031a0 <HAL_RCC_OscConfig+0x278>)
 8003066:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003068:	4b4e      	ldr	r3, [pc, #312]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f7fe f897 	bl	80011a0 <HAL_InitTick>
 8003072:	4603      	mov	r3, r0
 8003074:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d052      	beq.n	8003122 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	e327      	b.n	80036d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d032      	beq.n	80030ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003088:	4b43      	ldr	r3, [pc, #268]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a42      	ldr	r2, [pc, #264]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 800308e:	f043 0301 	orr.w	r3, r3, #1
 8003092:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003094:	f7fe f8d4 	bl	8001240 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800309c:	f7fe f8d0 	bl	8001240 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e310      	b.n	80036d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030ae:	4b3a      	ldr	r3, [pc, #232]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f0      	beq.n	800309c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030ba:	4b37      	ldr	r3, [pc, #220]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a36      	ldr	r2, [pc, #216]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 80030c0:	f043 0308 	orr.w	r3, r3, #8
 80030c4:	6013      	str	r3, [r2, #0]
 80030c6:	4b34      	ldr	r3, [pc, #208]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	4931      	ldr	r1, [pc, #196]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030d8:	4b2f      	ldr	r3, [pc, #188]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	021b      	lsls	r3, r3, #8
 80030e6:	492c      	ldr	r1, [pc, #176]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	604b      	str	r3, [r1, #4]
 80030ec:	e01a      	b.n	8003124 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030ee:	4b2a      	ldr	r3, [pc, #168]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a29      	ldr	r2, [pc, #164]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 80030f4:	f023 0301 	bic.w	r3, r3, #1
 80030f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030fa:	f7fe f8a1 	bl	8001240 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003102:	f7fe f89d 	bl	8001240 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e2dd      	b.n	80036d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003114:	4b20      	ldr	r3, [pc, #128]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1f0      	bne.n	8003102 <HAL_RCC_OscConfig+0x1da>
 8003120:	e000      	b.n	8003124 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003122:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	d074      	beq.n	800321a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	2b08      	cmp	r3, #8
 8003134:	d005      	beq.n	8003142 <HAL_RCC_OscConfig+0x21a>
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	2b0c      	cmp	r3, #12
 800313a:	d10e      	bne.n	800315a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2b03      	cmp	r3, #3
 8003140:	d10b      	bne.n	800315a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003142:	4b15      	ldr	r3, [pc, #84]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d064      	beq.n	8003218 <HAL_RCC_OscConfig+0x2f0>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d160      	bne.n	8003218 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e2ba      	b.n	80036d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003162:	d106      	bne.n	8003172 <HAL_RCC_OscConfig+0x24a>
 8003164:	4b0c      	ldr	r3, [pc, #48]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a0b      	ldr	r2, [pc, #44]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 800316a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	e026      	b.n	80031c0 <HAL_RCC_OscConfig+0x298>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800317a:	d115      	bne.n	80031a8 <HAL_RCC_OscConfig+0x280>
 800317c:	4b06      	ldr	r3, [pc, #24]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a05      	ldr	r2, [pc, #20]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 8003182:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003186:	6013      	str	r3, [r2, #0]
 8003188:	4b03      	ldr	r3, [pc, #12]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a02      	ldr	r2, [pc, #8]	@ (8003198 <HAL_RCC_OscConfig+0x270>)
 800318e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	e014      	b.n	80031c0 <HAL_RCC_OscConfig+0x298>
 8003196:	bf00      	nop
 8003198:	40021000 	.word	0x40021000
 800319c:	08005e88 	.word	0x08005e88
 80031a0:	20000014 	.word	0x20000014
 80031a4:	20000018 	.word	0x20000018
 80031a8:	4ba0      	ldr	r3, [pc, #640]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a9f      	ldr	r2, [pc, #636]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 80031ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031b2:	6013      	str	r3, [r2, #0]
 80031b4:	4b9d      	ldr	r3, [pc, #628]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a9c      	ldr	r2, [pc, #624]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 80031ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d013      	beq.n	80031f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c8:	f7fe f83a 	bl	8001240 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d0:	f7fe f836 	bl	8001240 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b64      	cmp	r3, #100	@ 0x64
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e276      	b.n	80036d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031e2:	4b92      	ldr	r3, [pc, #584]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0f0      	beq.n	80031d0 <HAL_RCC_OscConfig+0x2a8>
 80031ee:	e014      	b.n	800321a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7fe f826 	bl	8001240 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f8:	f7fe f822 	bl	8001240 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b64      	cmp	r3, #100	@ 0x64
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e262      	b.n	80036d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800320a:	4b88      	ldr	r3, [pc, #544]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0x2d0>
 8003216:	e000      	b.n	800321a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d060      	beq.n	80032e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	2b04      	cmp	r3, #4
 800322a:	d005      	beq.n	8003238 <HAL_RCC_OscConfig+0x310>
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	2b0c      	cmp	r3, #12
 8003230:	d119      	bne.n	8003266 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2b02      	cmp	r3, #2
 8003236:	d116      	bne.n	8003266 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003238:	4b7c      	ldr	r3, [pc, #496]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <HAL_RCC_OscConfig+0x328>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e23f      	b.n	80036d0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003250:	4b76      	ldr	r3, [pc, #472]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	061b      	lsls	r3, r3, #24
 800325e:	4973      	ldr	r1, [pc, #460]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 8003260:	4313      	orrs	r3, r2
 8003262:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003264:	e040      	b.n	80032e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d023      	beq.n	80032b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800326e:	4b6f      	ldr	r3, [pc, #444]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a6e      	ldr	r2, [pc, #440]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 8003274:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003278:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327a:	f7fd ffe1 	bl	8001240 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003282:	f7fd ffdd 	bl	8001240 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e21d      	b.n	80036d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003294:	4b65      	ldr	r3, [pc, #404]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0f0      	beq.n	8003282 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a0:	4b62      	ldr	r3, [pc, #392]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	061b      	lsls	r3, r3, #24
 80032ae:	495f      	ldr	r1, [pc, #380]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	604b      	str	r3, [r1, #4]
 80032b4:	e018      	b.n	80032e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b6:	4b5d      	ldr	r3, [pc, #372]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a5c      	ldr	r2, [pc, #368]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 80032bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c2:	f7fd ffbd 	bl	8001240 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ca:	f7fd ffb9 	bl	8001240 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e1f9      	b.n	80036d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032dc:	4b53      	ldr	r3, [pc, #332]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1f0      	bne.n	80032ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d03c      	beq.n	800336e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d01c      	beq.n	8003336 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032fc:	4b4b      	ldr	r3, [pc, #300]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 80032fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003302:	4a4a      	ldr	r2, [pc, #296]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330c:	f7fd ff98 	bl	8001240 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003314:	f7fd ff94 	bl	8001240 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e1d4      	b.n	80036d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003326:	4b41      	ldr	r3, [pc, #260]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 8003328:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0ef      	beq.n	8003314 <HAL_RCC_OscConfig+0x3ec>
 8003334:	e01b      	b.n	800336e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003336:	4b3d      	ldr	r3, [pc, #244]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 8003338:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800333c:	4a3b      	ldr	r2, [pc, #236]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 800333e:	f023 0301 	bic.w	r3, r3, #1
 8003342:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003346:	f7fd ff7b 	bl	8001240 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800334e:	f7fd ff77 	bl	8001240 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e1b7      	b.n	80036d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003360:	4b32      	ldr	r3, [pc, #200]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 8003362:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1ef      	bne.n	800334e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0304 	and.w	r3, r3, #4
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 80a6 	beq.w	80034c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800337c:	2300      	movs	r3, #0
 800337e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003380:	4b2a      	ldr	r3, [pc, #168]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 8003382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003384:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10d      	bne.n	80033a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800338c:	4b27      	ldr	r3, [pc, #156]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 800338e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003390:	4a26      	ldr	r2, [pc, #152]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 8003392:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003396:	6593      	str	r3, [r2, #88]	@ 0x58
 8003398:	4b24      	ldr	r3, [pc, #144]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 800339a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a0:	60bb      	str	r3, [r7, #8]
 80033a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033a4:	2301      	movs	r3, #1
 80033a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033a8:	4b21      	ldr	r3, [pc, #132]	@ (8003430 <HAL_RCC_OscConfig+0x508>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d118      	bne.n	80033e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003430 <HAL_RCC_OscConfig+0x508>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003430 <HAL_RCC_OscConfig+0x508>)
 80033ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033c0:	f7fd ff3e 	bl	8001240 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c8:	f7fd ff3a 	bl	8001240 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e17a      	b.n	80036d0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033da:	4b15      	ldr	r3, [pc, #84]	@ (8003430 <HAL_RCC_OscConfig+0x508>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d108      	bne.n	8003400 <HAL_RCC_OscConfig+0x4d8>
 80033ee:	4b0f      	ldr	r3, [pc, #60]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 80033f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f4:	4a0d      	ldr	r2, [pc, #52]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033fe:	e029      	b.n	8003454 <HAL_RCC_OscConfig+0x52c>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2b05      	cmp	r3, #5
 8003406:	d115      	bne.n	8003434 <HAL_RCC_OscConfig+0x50c>
 8003408:	4b08      	ldr	r3, [pc, #32]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 800340a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800340e:	4a07      	ldr	r2, [pc, #28]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 8003410:	f043 0304 	orr.w	r3, r3, #4
 8003414:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003418:	4b04      	ldr	r3, [pc, #16]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 800341a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800341e:	4a03      	ldr	r2, [pc, #12]	@ (800342c <HAL_RCC_OscConfig+0x504>)
 8003420:	f043 0301 	orr.w	r3, r3, #1
 8003424:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003428:	e014      	b.n	8003454 <HAL_RCC_OscConfig+0x52c>
 800342a:	bf00      	nop
 800342c:	40021000 	.word	0x40021000
 8003430:	40007000 	.word	0x40007000
 8003434:	4b9c      	ldr	r3, [pc, #624]	@ (80036a8 <HAL_RCC_OscConfig+0x780>)
 8003436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800343a:	4a9b      	ldr	r2, [pc, #620]	@ (80036a8 <HAL_RCC_OscConfig+0x780>)
 800343c:	f023 0301 	bic.w	r3, r3, #1
 8003440:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003444:	4b98      	ldr	r3, [pc, #608]	@ (80036a8 <HAL_RCC_OscConfig+0x780>)
 8003446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800344a:	4a97      	ldr	r2, [pc, #604]	@ (80036a8 <HAL_RCC_OscConfig+0x780>)
 800344c:	f023 0304 	bic.w	r3, r3, #4
 8003450:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d016      	beq.n	800348a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800345c:	f7fd fef0 	bl	8001240 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003462:	e00a      	b.n	800347a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003464:	f7fd feec 	bl	8001240 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003472:	4293      	cmp	r3, r2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e12a      	b.n	80036d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800347a:	4b8b      	ldr	r3, [pc, #556]	@ (80036a8 <HAL_RCC_OscConfig+0x780>)
 800347c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0ed      	beq.n	8003464 <HAL_RCC_OscConfig+0x53c>
 8003488:	e015      	b.n	80034b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348a:	f7fd fed9 	bl	8001240 <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003490:	e00a      	b.n	80034a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003492:	f7fd fed5 	bl	8001240 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e113      	b.n	80036d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034a8:	4b7f      	ldr	r3, [pc, #508]	@ (80036a8 <HAL_RCC_OscConfig+0x780>)
 80034aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1ed      	bne.n	8003492 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034b6:	7ffb      	ldrb	r3, [r7, #31]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d105      	bne.n	80034c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034bc:	4b7a      	ldr	r3, [pc, #488]	@ (80036a8 <HAL_RCC_OscConfig+0x780>)
 80034be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c0:	4a79      	ldr	r2, [pc, #484]	@ (80036a8 <HAL_RCC_OscConfig+0x780>)
 80034c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034c6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 80fe 	beq.w	80036ce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	f040 80d0 	bne.w	800367c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034dc:	4b72      	ldr	r3, [pc, #456]	@ (80036a8 <HAL_RCC_OscConfig+0x780>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f003 0203 	and.w	r2, r3, #3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d130      	bne.n	8003552 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fa:	3b01      	subs	r3, #1
 80034fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fe:	429a      	cmp	r2, r3
 8003500:	d127      	bne.n	8003552 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800350c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800350e:	429a      	cmp	r2, r3
 8003510:	d11f      	bne.n	8003552 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800351c:	2a07      	cmp	r2, #7
 800351e:	bf14      	ite	ne
 8003520:	2201      	movne	r2, #1
 8003522:	2200      	moveq	r2, #0
 8003524:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003526:	4293      	cmp	r3, r2
 8003528:	d113      	bne.n	8003552 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003534:	085b      	lsrs	r3, r3, #1
 8003536:	3b01      	subs	r3, #1
 8003538:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800353a:	429a      	cmp	r2, r3
 800353c:	d109      	bne.n	8003552 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003548:	085b      	lsrs	r3, r3, #1
 800354a:	3b01      	subs	r3, #1
 800354c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800354e:	429a      	cmp	r2, r3
 8003550:	d06e      	beq.n	8003630 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	2b0c      	cmp	r3, #12
 8003556:	d069      	beq.n	800362c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003558:	4b53      	ldr	r3, [pc, #332]	@ (80036a8 <HAL_RCC_OscConfig+0x780>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d105      	bne.n	8003570 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003564:	4b50      	ldr	r3, [pc, #320]	@ (80036a8 <HAL_RCC_OscConfig+0x780>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e0ad      	b.n	80036d0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003574:	4b4c      	ldr	r3, [pc, #304]	@ (80036a8 <HAL_RCC_OscConfig+0x780>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a4b      	ldr	r2, [pc, #300]	@ (80036a8 <HAL_RCC_OscConfig+0x780>)
 800357a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800357e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003580:	f7fd fe5e 	bl	8001240 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003588:	f7fd fe5a 	bl	8001240 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e09a      	b.n	80036d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800359a:	4b43      	ldr	r3, [pc, #268]	@ (80036a8 <HAL_RCC_OscConfig+0x780>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f0      	bne.n	8003588 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035a6:	4b40      	ldr	r3, [pc, #256]	@ (80036a8 <HAL_RCC_OscConfig+0x780>)
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	4b40      	ldr	r3, [pc, #256]	@ (80036ac <HAL_RCC_OscConfig+0x784>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80035b6:	3a01      	subs	r2, #1
 80035b8:	0112      	lsls	r2, r2, #4
 80035ba:	4311      	orrs	r1, r2
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80035c0:	0212      	lsls	r2, r2, #8
 80035c2:	4311      	orrs	r1, r2
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80035c8:	0852      	lsrs	r2, r2, #1
 80035ca:	3a01      	subs	r2, #1
 80035cc:	0552      	lsls	r2, r2, #21
 80035ce:	4311      	orrs	r1, r2
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80035d4:	0852      	lsrs	r2, r2, #1
 80035d6:	3a01      	subs	r2, #1
 80035d8:	0652      	lsls	r2, r2, #25
 80035da:	4311      	orrs	r1, r2
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80035e0:	0912      	lsrs	r2, r2, #4
 80035e2:	0452      	lsls	r2, r2, #17
 80035e4:	430a      	orrs	r2, r1
 80035e6:	4930      	ldr	r1, [pc, #192]	@ (80036a8 <HAL_RCC_OscConfig+0x780>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035ec:	4b2e      	ldr	r3, [pc, #184]	@ (80036a8 <HAL_RCC_OscConfig+0x780>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a2d      	ldr	r2, [pc, #180]	@ (80036a8 <HAL_RCC_OscConfig+0x780>)
 80035f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035f8:	4b2b      	ldr	r3, [pc, #172]	@ (80036a8 <HAL_RCC_OscConfig+0x780>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	4a2a      	ldr	r2, [pc, #168]	@ (80036a8 <HAL_RCC_OscConfig+0x780>)
 80035fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003602:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003604:	f7fd fe1c 	bl	8001240 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360c:	f7fd fe18 	bl	8001240 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e058      	b.n	80036d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800361e:	4b22      	ldr	r3, [pc, #136]	@ (80036a8 <HAL_RCC_OscConfig+0x780>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0f0      	beq.n	800360c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800362a:	e050      	b.n	80036ce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e04f      	b.n	80036d0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003630:	4b1d      	ldr	r3, [pc, #116]	@ (80036a8 <HAL_RCC_OscConfig+0x780>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d148      	bne.n	80036ce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800363c:	4b1a      	ldr	r3, [pc, #104]	@ (80036a8 <HAL_RCC_OscConfig+0x780>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a19      	ldr	r2, [pc, #100]	@ (80036a8 <HAL_RCC_OscConfig+0x780>)
 8003642:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003646:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003648:	4b17      	ldr	r3, [pc, #92]	@ (80036a8 <HAL_RCC_OscConfig+0x780>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	4a16      	ldr	r2, [pc, #88]	@ (80036a8 <HAL_RCC_OscConfig+0x780>)
 800364e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003652:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003654:	f7fd fdf4 	bl	8001240 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365c:	f7fd fdf0 	bl	8001240 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e030      	b.n	80036d0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800366e:	4b0e      	ldr	r3, [pc, #56]	@ (80036a8 <HAL_RCC_OscConfig+0x780>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f0      	beq.n	800365c <HAL_RCC_OscConfig+0x734>
 800367a:	e028      	b.n	80036ce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	2b0c      	cmp	r3, #12
 8003680:	d023      	beq.n	80036ca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003682:	4b09      	ldr	r3, [pc, #36]	@ (80036a8 <HAL_RCC_OscConfig+0x780>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a08      	ldr	r2, [pc, #32]	@ (80036a8 <HAL_RCC_OscConfig+0x780>)
 8003688:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800368c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368e:	f7fd fdd7 	bl	8001240 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003694:	e00c      	b.n	80036b0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003696:	f7fd fdd3 	bl	8001240 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d905      	bls.n	80036b0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e013      	b.n	80036d0 <HAL_RCC_OscConfig+0x7a8>
 80036a8:	40021000 	.word	0x40021000
 80036ac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036b0:	4b09      	ldr	r3, [pc, #36]	@ (80036d8 <HAL_RCC_OscConfig+0x7b0>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1ec      	bne.n	8003696 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036bc:	4b06      	ldr	r3, [pc, #24]	@ (80036d8 <HAL_RCC_OscConfig+0x7b0>)
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	4905      	ldr	r1, [pc, #20]	@ (80036d8 <HAL_RCC_OscConfig+0x7b0>)
 80036c2:	4b06      	ldr	r3, [pc, #24]	@ (80036dc <HAL_RCC_OscConfig+0x7b4>)
 80036c4:	4013      	ands	r3, r2
 80036c6:	60cb      	str	r3, [r1, #12]
 80036c8:	e001      	b.n	80036ce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3720      	adds	r7, #32
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40021000 	.word	0x40021000
 80036dc:	feeefffc 	.word	0xfeeefffc

080036e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e0e7      	b.n	80038c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036f4:	4b75      	ldr	r3, [pc, #468]	@ (80038cc <HAL_RCC_ClockConfig+0x1ec>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d910      	bls.n	8003724 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003702:	4b72      	ldr	r3, [pc, #456]	@ (80038cc <HAL_RCC_ClockConfig+0x1ec>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f023 0207 	bic.w	r2, r3, #7
 800370a:	4970      	ldr	r1, [pc, #448]	@ (80038cc <HAL_RCC_ClockConfig+0x1ec>)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	4313      	orrs	r3, r2
 8003710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003712:	4b6e      	ldr	r3, [pc, #440]	@ (80038cc <HAL_RCC_ClockConfig+0x1ec>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d001      	beq.n	8003724 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0cf      	b.n	80038c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d010      	beq.n	8003752 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	4b66      	ldr	r3, [pc, #408]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800373c:	429a      	cmp	r2, r3
 800373e:	d908      	bls.n	8003752 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003740:	4b63      	ldr	r3, [pc, #396]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	4960      	ldr	r1, [pc, #384]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 800374e:	4313      	orrs	r3, r2
 8003750:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d04c      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b03      	cmp	r3, #3
 8003764:	d107      	bne.n	8003776 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003766:	4b5a      	ldr	r3, [pc, #360]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d121      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e0a6      	b.n	80038c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b02      	cmp	r3, #2
 800377c:	d107      	bne.n	800378e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800377e:	4b54      	ldr	r3, [pc, #336]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d115      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e09a      	b.n	80038c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d107      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003796:	4b4e      	ldr	r3, [pc, #312]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d109      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e08e      	b.n	80038c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037a6:	4b4a      	ldr	r3, [pc, #296]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e086      	b.n	80038c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037b6:	4b46      	ldr	r3, [pc, #280]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 0203 	bic.w	r2, r3, #3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	4943      	ldr	r1, [pc, #268]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c8:	f7fd fd3a 	bl	8001240 <HAL_GetTick>
 80037cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ce:	e00a      	b.n	80037e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d0:	f7fd fd36 	bl	8001240 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037de:	4293      	cmp	r3, r2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e06e      	b.n	80038c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e6:	4b3a      	ldr	r3, [pc, #232]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 020c 	and.w	r2, r3, #12
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d1eb      	bne.n	80037d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d010      	beq.n	8003826 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	4b31      	ldr	r3, [pc, #196]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003810:	429a      	cmp	r2, r3
 8003812:	d208      	bcs.n	8003826 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003814:	4b2e      	ldr	r3, [pc, #184]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	492b      	ldr	r1, [pc, #172]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003822:	4313      	orrs	r3, r2
 8003824:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003826:	4b29      	ldr	r3, [pc, #164]	@ (80038cc <HAL_RCC_ClockConfig+0x1ec>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d210      	bcs.n	8003856 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003834:	4b25      	ldr	r3, [pc, #148]	@ (80038cc <HAL_RCC_ClockConfig+0x1ec>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f023 0207 	bic.w	r2, r3, #7
 800383c:	4923      	ldr	r1, [pc, #140]	@ (80038cc <HAL_RCC_ClockConfig+0x1ec>)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	4313      	orrs	r3, r2
 8003842:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003844:	4b21      	ldr	r3, [pc, #132]	@ (80038cc <HAL_RCC_ClockConfig+0x1ec>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d001      	beq.n	8003856 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e036      	b.n	80038c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0304 	and.w	r3, r3, #4
 800385e:	2b00      	cmp	r3, #0
 8003860:	d008      	beq.n	8003874 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003862:	4b1b      	ldr	r3, [pc, #108]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	4918      	ldr	r1, [pc, #96]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003870:	4313      	orrs	r3, r2
 8003872:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0308 	and.w	r3, r3, #8
 800387c:	2b00      	cmp	r3, #0
 800387e:	d009      	beq.n	8003894 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003880:	4b13      	ldr	r3, [pc, #76]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	4910      	ldr	r1, [pc, #64]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003890:	4313      	orrs	r3, r2
 8003892:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003894:	f000 f824 	bl	80038e0 <HAL_RCC_GetSysClockFreq>
 8003898:	4602      	mov	r2, r0
 800389a:	4b0d      	ldr	r3, [pc, #52]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	091b      	lsrs	r3, r3, #4
 80038a0:	f003 030f 	and.w	r3, r3, #15
 80038a4:	490b      	ldr	r1, [pc, #44]	@ (80038d4 <HAL_RCC_ClockConfig+0x1f4>)
 80038a6:	5ccb      	ldrb	r3, [r1, r3]
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	fa22 f303 	lsr.w	r3, r2, r3
 80038b0:	4a09      	ldr	r2, [pc, #36]	@ (80038d8 <HAL_RCC_ClockConfig+0x1f8>)
 80038b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038b4:	4b09      	ldr	r3, [pc, #36]	@ (80038dc <HAL_RCC_ClockConfig+0x1fc>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fd fc71 	bl	80011a0 <HAL_InitTick>
 80038be:	4603      	mov	r3, r0
 80038c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80038c2:	7afb      	ldrb	r3, [r7, #11]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40022000 	.word	0x40022000
 80038d0:	40021000 	.word	0x40021000
 80038d4:	08005e88 	.word	0x08005e88
 80038d8:	20000014 	.word	0x20000014
 80038dc:	20000018 	.word	0x20000018

080038e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b089      	sub	sp, #36	@ 0x24
 80038e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	61fb      	str	r3, [r7, #28]
 80038ea:	2300      	movs	r3, #0
 80038ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ee:	4b3e      	ldr	r3, [pc, #248]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 030c 	and.w	r3, r3, #12
 80038f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038f8:	4b3b      	ldr	r3, [pc, #236]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <HAL_RCC_GetSysClockFreq+0x34>
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	2b0c      	cmp	r3, #12
 800390c:	d121      	bne.n	8003952 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d11e      	bne.n	8003952 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003914:	4b34      	ldr	r3, [pc, #208]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b00      	cmp	r3, #0
 800391e:	d107      	bne.n	8003930 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003920:	4b31      	ldr	r3, [pc, #196]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003922:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003926:	0a1b      	lsrs	r3, r3, #8
 8003928:	f003 030f 	and.w	r3, r3, #15
 800392c:	61fb      	str	r3, [r7, #28]
 800392e:	e005      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003930:	4b2d      	ldr	r3, [pc, #180]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	091b      	lsrs	r3, r3, #4
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800393c:	4a2b      	ldr	r2, [pc, #172]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003944:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10d      	bne.n	8003968 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003950:	e00a      	b.n	8003968 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	2b04      	cmp	r3, #4
 8003956:	d102      	bne.n	800395e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003958:	4b25      	ldr	r3, [pc, #148]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800395a:	61bb      	str	r3, [r7, #24]
 800395c:	e004      	b.n	8003968 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	2b08      	cmp	r3, #8
 8003962:	d101      	bne.n	8003968 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003964:	4b23      	ldr	r3, [pc, #140]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003966:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	2b0c      	cmp	r3, #12
 800396c:	d134      	bne.n	80039d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800396e:	4b1e      	ldr	r3, [pc, #120]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2b02      	cmp	r3, #2
 800397c:	d003      	beq.n	8003986 <HAL_RCC_GetSysClockFreq+0xa6>
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b03      	cmp	r3, #3
 8003982:	d003      	beq.n	800398c <HAL_RCC_GetSysClockFreq+0xac>
 8003984:	e005      	b.n	8003992 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003986:	4b1a      	ldr	r3, [pc, #104]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003988:	617b      	str	r3, [r7, #20]
      break;
 800398a:	e005      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800398c:	4b19      	ldr	r3, [pc, #100]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800398e:	617b      	str	r3, [r7, #20]
      break;
 8003990:	e002      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	617b      	str	r3, [r7, #20]
      break;
 8003996:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003998:	4b13      	ldr	r3, [pc, #76]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	091b      	lsrs	r3, r3, #4
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	3301      	adds	r3, #1
 80039a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039a6:	4b10      	ldr	r3, [pc, #64]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	0a1b      	lsrs	r3, r3, #8
 80039ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	fb03 f202 	mul.w	r2, r3, r2
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039be:	4b0a      	ldr	r3, [pc, #40]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	0e5b      	lsrs	r3, r3, #25
 80039c4:	f003 0303 	and.w	r3, r3, #3
 80039c8:	3301      	adds	r3, #1
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039d8:	69bb      	ldr	r3, [r7, #24]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3724      	adds	r7, #36	@ 0x24
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40021000 	.word	0x40021000
 80039ec:	08005ea0 	.word	0x08005ea0
 80039f0:	00f42400 	.word	0x00f42400
 80039f4:	007a1200 	.word	0x007a1200

080039f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039fc:	4b03      	ldr	r3, [pc, #12]	@ (8003a0c <HAL_RCC_GetHCLKFreq+0x14>)
 80039fe:	681b      	ldr	r3, [r3, #0]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	20000014 	.word	0x20000014

08003a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a14:	f7ff fff0 	bl	80039f8 <HAL_RCC_GetHCLKFreq>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	4b06      	ldr	r3, [pc, #24]	@ (8003a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	0a1b      	lsrs	r3, r3, #8
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	4904      	ldr	r1, [pc, #16]	@ (8003a38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a26:	5ccb      	ldrb	r3, [r1, r3]
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40021000 	.word	0x40021000
 8003a38:	08005e98 	.word	0x08005e98

08003a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a40:	f7ff ffda 	bl	80039f8 <HAL_RCC_GetHCLKFreq>
 8003a44:	4602      	mov	r2, r0
 8003a46:	4b06      	ldr	r3, [pc, #24]	@ (8003a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	0adb      	lsrs	r3, r3, #11
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	4904      	ldr	r1, [pc, #16]	@ (8003a64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a52:	5ccb      	ldrb	r3, [r1, r3]
 8003a54:	f003 031f 	and.w	r3, r3, #31
 8003a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40021000 	.word	0x40021000
 8003a64:	08005e98 	.word	0x08005e98

08003a68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a70:	2300      	movs	r3, #0
 8003a72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a74:	4b2a      	ldr	r3, [pc, #168]	@ (8003b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a80:	f7ff f9ee 	bl	8002e60 <HAL_PWREx_GetVoltageRange>
 8003a84:	6178      	str	r0, [r7, #20]
 8003a86:	e014      	b.n	8003ab2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a88:	4b25      	ldr	r3, [pc, #148]	@ (8003b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a8c:	4a24      	ldr	r2, [pc, #144]	@ (8003b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a92:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a94:	4b22      	ldr	r3, [pc, #136]	@ (8003b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003aa0:	f7ff f9de 	bl	8002e60 <HAL_PWREx_GetVoltageRange>
 8003aa4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8003b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aaa:	4a1d      	ldr	r2, [pc, #116]	@ (8003b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ab0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ab8:	d10b      	bne.n	8003ad2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b80      	cmp	r3, #128	@ 0x80
 8003abe:	d919      	bls.n	8003af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2ba0      	cmp	r3, #160	@ 0xa0
 8003ac4:	d902      	bls.n	8003acc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	613b      	str	r3, [r7, #16]
 8003aca:	e013      	b.n	8003af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003acc:	2301      	movs	r3, #1
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	e010      	b.n	8003af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b80      	cmp	r3, #128	@ 0x80
 8003ad6:	d902      	bls.n	8003ade <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ad8:	2303      	movs	r3, #3
 8003ada:	613b      	str	r3, [r7, #16]
 8003adc:	e00a      	b.n	8003af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b80      	cmp	r3, #128	@ 0x80
 8003ae2:	d102      	bne.n	8003aea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	613b      	str	r3, [r7, #16]
 8003ae8:	e004      	b.n	8003af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b70      	cmp	r3, #112	@ 0x70
 8003aee:	d101      	bne.n	8003af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003af0:	2301      	movs	r3, #1
 8003af2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003af4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f023 0207 	bic.w	r2, r3, #7
 8003afc:	4909      	ldr	r1, [pc, #36]	@ (8003b24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b04:	4b07      	ldr	r3, [pc, #28]	@ (8003b24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d001      	beq.n	8003b16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e000      	b.n	8003b18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40022000 	.word	0x40022000

08003b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b30:	2300      	movs	r3, #0
 8003b32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b34:	2300      	movs	r3, #0
 8003b36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d041      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b48:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b4c:	d02a      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b4e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b52:	d824      	bhi.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b54:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b58:	d008      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b5a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b5e:	d81e      	bhi.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00a      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b68:	d010      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b6a:	e018      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b6c:	4b86      	ldr	r3, [pc, #536]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	4a85      	ldr	r2, [pc, #532]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b76:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b78:	e015      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	2100      	movs	r1, #0
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 fabb 	bl	80040fc <RCCEx_PLLSAI1_Config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b8a:	e00c      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3320      	adds	r3, #32
 8003b90:	2100      	movs	r1, #0
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 fba6 	bl	80042e4 <RCCEx_PLLSAI2_Config>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b9c:	e003      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	74fb      	strb	r3, [r7, #19]
      break;
 8003ba2:	e000      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ba4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ba6:	7cfb      	ldrb	r3, [r7, #19]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10b      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bac:	4b76      	ldr	r3, [pc, #472]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bba:	4973      	ldr	r1, [pc, #460]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003bc2:	e001      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc4:	7cfb      	ldrb	r3, [r7, #19]
 8003bc6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d041      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bd8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003bdc:	d02a      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003bde:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003be2:	d824      	bhi.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003be4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003be8:	d008      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003bea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003bee:	d81e      	bhi.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00a      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003bf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bf8:	d010      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bfa:	e018      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bfc:	4b62      	ldr	r3, [pc, #392]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	4a61      	ldr	r2, [pc, #388]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c06:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c08:	e015      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	2100      	movs	r1, #0
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 fa73 	bl	80040fc <RCCEx_PLLSAI1_Config>
 8003c16:	4603      	mov	r3, r0
 8003c18:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c1a:	e00c      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3320      	adds	r3, #32
 8003c20:	2100      	movs	r1, #0
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fb5e 	bl	80042e4 <RCCEx_PLLSAI2_Config>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c2c:	e003      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	74fb      	strb	r3, [r7, #19]
      break;
 8003c32:	e000      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c36:	7cfb      	ldrb	r3, [r7, #19]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10b      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c3c:	4b52      	ldr	r3, [pc, #328]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c42:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c4a:	494f      	ldr	r1, [pc, #316]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c52:	e001      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c54:	7cfb      	ldrb	r3, [r7, #19]
 8003c56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 80a0 	beq.w	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c66:	2300      	movs	r3, #0
 8003c68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c6a:	4b47      	ldr	r3, [pc, #284]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00d      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c80:	4b41      	ldr	r3, [pc, #260]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c84:	4a40      	ldr	r2, [pc, #256]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c8c:	4b3e      	ldr	r3, [pc, #248]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c94:	60bb      	str	r3, [r7, #8]
 8003c96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c9c:	4b3b      	ldr	r3, [pc, #236]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a3a      	ldr	r2, [pc, #232]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ca2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ca6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ca8:	f7fd faca 	bl	8001240 <HAL_GetTick>
 8003cac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cae:	e009      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb0:	f7fd fac6 	bl	8001240 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d902      	bls.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	74fb      	strb	r3, [r7, #19]
        break;
 8003cc2:	e005      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cc4:	4b31      	ldr	r3, [pc, #196]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0ef      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003cd0:	7cfb      	ldrb	r3, [r7, #19]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d15c      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cd6:	4b2c      	ldr	r3, [pc, #176]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cdc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ce0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01f      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d019      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cf4:	4b24      	ldr	r3, [pc, #144]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cfe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d00:	4b21      	ldr	r3, [pc, #132]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d06:	4a20      	ldr	r2, [pc, #128]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d10:	4b1d      	ldr	r3, [pc, #116]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d16:	4a1c      	ldr	r2, [pc, #112]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d20:	4a19      	ldr	r2, [pc, #100]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d016      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d32:	f7fd fa85 	bl	8001240 <HAL_GetTick>
 8003d36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d38:	e00b      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3a:	f7fd fa81 	bl	8001240 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d902      	bls.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	74fb      	strb	r3, [r7, #19]
            break;
 8003d50:	e006      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d52:	4b0d      	ldr	r3, [pc, #52]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0ec      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003d60:	7cfb      	ldrb	r3, [r7, #19]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d66:	4b08      	ldr	r3, [pc, #32]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d76:	4904      	ldr	r1, [pc, #16]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003d7e:	e009      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d80:	7cfb      	ldrb	r3, [r7, #19]
 8003d82:	74bb      	strb	r3, [r7, #18]
 8003d84:	e006      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003d86:	bf00      	nop
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d90:	7cfb      	ldrb	r3, [r7, #19]
 8003d92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d94:	7c7b      	ldrb	r3, [r7, #17]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d105      	bne.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d9a:	4b9e      	ldr	r3, [pc, #632]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d9e:	4a9d      	ldr	r2, [pc, #628]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003da4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003db2:	4b98      	ldr	r3, [pc, #608]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db8:	f023 0203 	bic.w	r2, r3, #3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc0:	4994      	ldr	r1, [pc, #592]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00a      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dd4:	4b8f      	ldr	r3, [pc, #572]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dda:	f023 020c 	bic.w	r2, r3, #12
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de2:	498c      	ldr	r1, [pc, #560]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00a      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003df6:	4b87      	ldr	r3, [pc, #540]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dfc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e04:	4983      	ldr	r1, [pc, #524]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00a      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e18:	4b7e      	ldr	r3, [pc, #504]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e1e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e26:	497b      	ldr	r1, [pc, #492]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0310 	and.w	r3, r3, #16
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e3a:	4b76      	ldr	r3, [pc, #472]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e48:	4972      	ldr	r1, [pc, #456]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0320 	and.w	r3, r3, #32
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e5c:	4b6d      	ldr	r3, [pc, #436]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e62:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e6a:	496a      	ldr	r1, [pc, #424]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e7e:	4b65      	ldr	r3, [pc, #404]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e84:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e8c:	4961      	ldr	r1, [pc, #388]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ea0:	4b5c      	ldr	r3, [pc, #368]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eae:	4959      	ldr	r1, [pc, #356]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ec2:	4b54      	ldr	r3, [pc, #336]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ed0:	4950      	ldr	r1, [pc, #320]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ee4:	4b4b      	ldr	r3, [pc, #300]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef2:	4948      	ldr	r1, [pc, #288]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f06:	4b43      	ldr	r3, [pc, #268]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f0c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f14:	493f      	ldr	r1, [pc, #252]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d028      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f28:	4b3a      	ldr	r3, [pc, #232]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f2e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f36:	4937      	ldr	r1, [pc, #220]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f46:	d106      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f48:	4b32      	ldr	r3, [pc, #200]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	4a31      	ldr	r2, [pc, #196]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f52:	60d3      	str	r3, [r2, #12]
 8003f54:	e011      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f5e:	d10c      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3304      	adds	r3, #4
 8003f64:	2101      	movs	r1, #1
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 f8c8 	bl	80040fc <RCCEx_PLLSAI1_Config>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f70:	7cfb      	ldrb	r3, [r7, #19]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003f76:	7cfb      	ldrb	r3, [r7, #19]
 8003f78:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d028      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f86:	4b23      	ldr	r3, [pc, #140]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f94:	491f      	ldr	r1, [pc, #124]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fa4:	d106      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	4a1a      	ldr	r2, [pc, #104]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fb0:	60d3      	str	r3, [r2, #12]
 8003fb2:	e011      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fbc:	d10c      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 f899 	bl	80040fc <RCCEx_PLLSAI1_Config>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fce:	7cfb      	ldrb	r3, [r7, #19]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003fd4:	7cfb      	ldrb	r3, [r7, #19]
 8003fd6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d02b      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ff2:	4908      	ldr	r1, [pc, #32]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ffe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004002:	d109      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004004:	4b03      	ldr	r3, [pc, #12]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	4a02      	ldr	r2, [pc, #8]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800400e:	60d3      	str	r3, [r2, #12]
 8004010:	e014      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004012:	bf00      	nop
 8004014:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800401c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004020:	d10c      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	3304      	adds	r3, #4
 8004026:	2101      	movs	r1, #1
 8004028:	4618      	mov	r0, r3
 800402a:	f000 f867 	bl	80040fc <RCCEx_PLLSAI1_Config>
 800402e:	4603      	mov	r3, r0
 8004030:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004032:	7cfb      	ldrb	r3, [r7, #19]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004038:	7cfb      	ldrb	r3, [r7, #19]
 800403a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d02f      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004048:	4b2b      	ldr	r3, [pc, #172]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800404a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800404e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004056:	4928      	ldr	r1, [pc, #160]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004062:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004066:	d10d      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3304      	adds	r3, #4
 800406c:	2102      	movs	r1, #2
 800406e:	4618      	mov	r0, r3
 8004070:	f000 f844 	bl	80040fc <RCCEx_PLLSAI1_Config>
 8004074:	4603      	mov	r3, r0
 8004076:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004078:	7cfb      	ldrb	r3, [r7, #19]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d014      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800407e:	7cfb      	ldrb	r3, [r7, #19]
 8004080:	74bb      	strb	r3, [r7, #18]
 8004082:	e011      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004088:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800408c:	d10c      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	3320      	adds	r3, #32
 8004092:	2102      	movs	r1, #2
 8004094:	4618      	mov	r0, r3
 8004096:	f000 f925 	bl	80042e4 <RCCEx_PLLSAI2_Config>
 800409a:	4603      	mov	r3, r0
 800409c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800409e:	7cfb      	ldrb	r3, [r7, #19]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040a4:	7cfb      	ldrb	r3, [r7, #19]
 80040a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00a      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040b4:	4b10      	ldr	r3, [pc, #64]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ba:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040c2:	490d      	ldr	r1, [pc, #52]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00b      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040d6:	4b08      	ldr	r3, [pc, #32]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040e6:	4904      	ldr	r1, [pc, #16]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40021000 	.word	0x40021000

080040fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800410a:	4b75      	ldr	r3, [pc, #468]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d018      	beq.n	8004148 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004116:	4b72      	ldr	r3, [pc, #456]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f003 0203 	and.w	r2, r3, #3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	429a      	cmp	r2, r3
 8004124:	d10d      	bne.n	8004142 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
       ||
 800412a:	2b00      	cmp	r3, #0
 800412c:	d009      	beq.n	8004142 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800412e:	4b6c      	ldr	r3, [pc, #432]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	091b      	lsrs	r3, r3, #4
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
       ||
 800413e:	429a      	cmp	r2, r3
 8004140:	d047      	beq.n	80041d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	73fb      	strb	r3, [r7, #15]
 8004146:	e044      	b.n	80041d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b03      	cmp	r3, #3
 800414e:	d018      	beq.n	8004182 <RCCEx_PLLSAI1_Config+0x86>
 8004150:	2b03      	cmp	r3, #3
 8004152:	d825      	bhi.n	80041a0 <RCCEx_PLLSAI1_Config+0xa4>
 8004154:	2b01      	cmp	r3, #1
 8004156:	d002      	beq.n	800415e <RCCEx_PLLSAI1_Config+0x62>
 8004158:	2b02      	cmp	r3, #2
 800415a:	d009      	beq.n	8004170 <RCCEx_PLLSAI1_Config+0x74>
 800415c:	e020      	b.n	80041a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800415e:	4b60      	ldr	r3, [pc, #384]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d11d      	bne.n	80041a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800416e:	e01a      	b.n	80041a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004170:	4b5b      	ldr	r3, [pc, #364]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004178:	2b00      	cmp	r3, #0
 800417a:	d116      	bne.n	80041aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004180:	e013      	b.n	80041aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004182:	4b57      	ldr	r3, [pc, #348]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10f      	bne.n	80041ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800418e:	4b54      	ldr	r3, [pc, #336]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d109      	bne.n	80041ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800419e:	e006      	b.n	80041ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	73fb      	strb	r3, [r7, #15]
      break;
 80041a4:	e004      	b.n	80041b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041a6:	bf00      	nop
 80041a8:	e002      	b.n	80041b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041aa:	bf00      	nop
 80041ac:	e000      	b.n	80041b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80041b0:	7bfb      	ldrb	r3, [r7, #15]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10d      	bne.n	80041d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041b6:	4b4a      	ldr	r3, [pc, #296]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6819      	ldr	r1, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	3b01      	subs	r3, #1
 80041c8:	011b      	lsls	r3, r3, #4
 80041ca:	430b      	orrs	r3, r1
 80041cc:	4944      	ldr	r1, [pc, #272]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d17d      	bne.n	80042d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041d8:	4b41      	ldr	r3, [pc, #260]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a40      	ldr	r2, [pc, #256]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80041e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041e4:	f7fd f82c 	bl	8001240 <HAL_GetTick>
 80041e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041ea:	e009      	b.n	8004200 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041ec:	f7fd f828 	bl	8001240 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d902      	bls.n	8004200 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	73fb      	strb	r3, [r7, #15]
        break;
 80041fe:	e005      	b.n	800420c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004200:	4b37      	ldr	r3, [pc, #220]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1ef      	bne.n	80041ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800420c:	7bfb      	ldrb	r3, [r7, #15]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d160      	bne.n	80042d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d111      	bne.n	800423c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004218:	4b31      	ldr	r3, [pc, #196]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004220:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6892      	ldr	r2, [r2, #8]
 8004228:	0211      	lsls	r1, r2, #8
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	68d2      	ldr	r2, [r2, #12]
 800422e:	0912      	lsrs	r2, r2, #4
 8004230:	0452      	lsls	r2, r2, #17
 8004232:	430a      	orrs	r2, r1
 8004234:	492a      	ldr	r1, [pc, #168]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004236:	4313      	orrs	r3, r2
 8004238:	610b      	str	r3, [r1, #16]
 800423a:	e027      	b.n	800428c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d112      	bne.n	8004268 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004242:	4b27      	ldr	r3, [pc, #156]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800424a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6892      	ldr	r2, [r2, #8]
 8004252:	0211      	lsls	r1, r2, #8
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6912      	ldr	r2, [r2, #16]
 8004258:	0852      	lsrs	r2, r2, #1
 800425a:	3a01      	subs	r2, #1
 800425c:	0552      	lsls	r2, r2, #21
 800425e:	430a      	orrs	r2, r1
 8004260:	491f      	ldr	r1, [pc, #124]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004262:	4313      	orrs	r3, r2
 8004264:	610b      	str	r3, [r1, #16]
 8004266:	e011      	b.n	800428c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004268:	4b1d      	ldr	r3, [pc, #116]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004270:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6892      	ldr	r2, [r2, #8]
 8004278:	0211      	lsls	r1, r2, #8
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6952      	ldr	r2, [r2, #20]
 800427e:	0852      	lsrs	r2, r2, #1
 8004280:	3a01      	subs	r2, #1
 8004282:	0652      	lsls	r2, r2, #25
 8004284:	430a      	orrs	r2, r1
 8004286:	4916      	ldr	r1, [pc, #88]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004288:	4313      	orrs	r3, r2
 800428a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800428c:	4b14      	ldr	r3, [pc, #80]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a13      	ldr	r2, [pc, #76]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004292:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004296:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004298:	f7fc ffd2 	bl	8001240 <HAL_GetTick>
 800429c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800429e:	e009      	b.n	80042b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042a0:	f7fc ffce 	bl	8001240 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d902      	bls.n	80042b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	73fb      	strb	r3, [r7, #15]
          break;
 80042b2:	e005      	b.n	80042c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042b4:	4b0a      	ldr	r3, [pc, #40]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0ef      	beq.n	80042a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d106      	bne.n	80042d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042c6:	4b06      	ldr	r3, [pc, #24]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042c8:	691a      	ldr	r2, [r3, #16]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	4904      	ldr	r1, [pc, #16]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40021000 	.word	0x40021000

080042e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042f2:	4b6a      	ldr	r3, [pc, #424]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d018      	beq.n	8004330 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80042fe:	4b67      	ldr	r3, [pc, #412]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f003 0203 	and.w	r2, r3, #3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d10d      	bne.n	800432a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
       ||
 8004312:	2b00      	cmp	r3, #0
 8004314:	d009      	beq.n	800432a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004316:	4b61      	ldr	r3, [pc, #388]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	091b      	lsrs	r3, r3, #4
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
       ||
 8004326:	429a      	cmp	r2, r3
 8004328:	d047      	beq.n	80043ba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	73fb      	strb	r3, [r7, #15]
 800432e:	e044      	b.n	80043ba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b03      	cmp	r3, #3
 8004336:	d018      	beq.n	800436a <RCCEx_PLLSAI2_Config+0x86>
 8004338:	2b03      	cmp	r3, #3
 800433a:	d825      	bhi.n	8004388 <RCCEx_PLLSAI2_Config+0xa4>
 800433c:	2b01      	cmp	r3, #1
 800433e:	d002      	beq.n	8004346 <RCCEx_PLLSAI2_Config+0x62>
 8004340:	2b02      	cmp	r3, #2
 8004342:	d009      	beq.n	8004358 <RCCEx_PLLSAI2_Config+0x74>
 8004344:	e020      	b.n	8004388 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004346:	4b55      	ldr	r3, [pc, #340]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d11d      	bne.n	800438e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004356:	e01a      	b.n	800438e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004358:	4b50      	ldr	r3, [pc, #320]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004360:	2b00      	cmp	r3, #0
 8004362:	d116      	bne.n	8004392 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004368:	e013      	b.n	8004392 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800436a:	4b4c      	ldr	r3, [pc, #304]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10f      	bne.n	8004396 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004376:	4b49      	ldr	r3, [pc, #292]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d109      	bne.n	8004396 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004386:	e006      	b.n	8004396 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	73fb      	strb	r3, [r7, #15]
      break;
 800438c:	e004      	b.n	8004398 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800438e:	bf00      	nop
 8004390:	e002      	b.n	8004398 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004392:	bf00      	nop
 8004394:	e000      	b.n	8004398 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004396:	bf00      	nop
    }

    if(status == HAL_OK)
 8004398:	7bfb      	ldrb	r3, [r7, #15]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10d      	bne.n	80043ba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800439e:	4b3f      	ldr	r3, [pc, #252]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6819      	ldr	r1, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	430b      	orrs	r3, r1
 80043b4:	4939      	ldr	r1, [pc, #228]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d167      	bne.n	8004490 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043c0:	4b36      	ldr	r3, [pc, #216]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a35      	ldr	r2, [pc, #212]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043cc:	f7fc ff38 	bl	8001240 <HAL_GetTick>
 80043d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043d2:	e009      	b.n	80043e8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043d4:	f7fc ff34 	bl	8001240 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d902      	bls.n	80043e8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	73fb      	strb	r3, [r7, #15]
        break;
 80043e6:	e005      	b.n	80043f4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043e8:	4b2c      	ldr	r3, [pc, #176]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1ef      	bne.n	80043d4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d14a      	bne.n	8004490 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d111      	bne.n	8004424 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004400:	4b26      	ldr	r3, [pc, #152]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004408:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6892      	ldr	r2, [r2, #8]
 8004410:	0211      	lsls	r1, r2, #8
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	68d2      	ldr	r2, [r2, #12]
 8004416:	0912      	lsrs	r2, r2, #4
 8004418:	0452      	lsls	r2, r2, #17
 800441a:	430a      	orrs	r2, r1
 800441c:	491f      	ldr	r1, [pc, #124]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 800441e:	4313      	orrs	r3, r2
 8004420:	614b      	str	r3, [r1, #20]
 8004422:	e011      	b.n	8004448 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004424:	4b1d      	ldr	r3, [pc, #116]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800442c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6892      	ldr	r2, [r2, #8]
 8004434:	0211      	lsls	r1, r2, #8
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6912      	ldr	r2, [r2, #16]
 800443a:	0852      	lsrs	r2, r2, #1
 800443c:	3a01      	subs	r2, #1
 800443e:	0652      	lsls	r2, r2, #25
 8004440:	430a      	orrs	r2, r1
 8004442:	4916      	ldr	r1, [pc, #88]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004444:	4313      	orrs	r3, r2
 8004446:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004448:	4b14      	ldr	r3, [pc, #80]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a13      	ldr	r2, [pc, #76]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 800444e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004452:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004454:	f7fc fef4 	bl	8001240 <HAL_GetTick>
 8004458:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800445a:	e009      	b.n	8004470 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800445c:	f7fc fef0 	bl	8001240 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d902      	bls.n	8004470 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	73fb      	strb	r3, [r7, #15]
          break;
 800446e:	e005      	b.n	800447c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004470:	4b0a      	ldr	r3, [pc, #40]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0ef      	beq.n	800445c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800447c:	7bfb      	ldrb	r3, [r7, #15]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d106      	bne.n	8004490 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004482:	4b06      	ldr	r3, [pc, #24]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004484:	695a      	ldr	r2, [r3, #20]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	4904      	ldr	r1, [pc, #16]	@ (800449c <RCCEx_PLLSAI2_Config+0x1b8>)
 800448c:	4313      	orrs	r3, r2
 800448e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004490:	7bfb      	ldrb	r3, [r7, #15]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	40021000 	.word	0x40021000

080044a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e040      	b.n	8004534 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7fc fcda 	bl	8000e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2224      	movs	r2, #36	@ 0x24
 80044cc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0201 	bic.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fb6a 	bl	8004bc0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f8af 	bl	8004650 <UART_SetConfig>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e01b      	b.n	8004534 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800450a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800451a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0201 	orr.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 fbe9 	bl	8004d04 <UART_CheckIdleState>
 8004532:	4603      	mov	r3, r0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b08a      	sub	sp, #40	@ 0x28
 8004540:	af02      	add	r7, sp, #8
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	4613      	mov	r3, r2
 800454a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004550:	2b20      	cmp	r3, #32
 8004552:	d177      	bne.n	8004644 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <HAL_UART_Transmit+0x24>
 800455a:	88fb      	ldrh	r3, [r7, #6]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e070      	b.n	8004646 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2221      	movs	r2, #33	@ 0x21
 8004570:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004572:	f7fc fe65 	bl	8001240 <HAL_GetTick>
 8004576:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	88fa      	ldrh	r2, [r7, #6]
 800457c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	88fa      	ldrh	r2, [r7, #6]
 8004584:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004590:	d108      	bne.n	80045a4 <HAL_UART_Transmit+0x68>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d104      	bne.n	80045a4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800459a:	2300      	movs	r3, #0
 800459c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	e003      	b.n	80045ac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045a8:	2300      	movs	r3, #0
 80045aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045ac:	e02f      	b.n	800460e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2200      	movs	r2, #0
 80045b6:	2180      	movs	r1, #128	@ 0x80
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 fc4b 	bl	8004e54 <UART_WaitOnFlagUntilTimeout>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d004      	beq.n	80045ce <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2220      	movs	r2, #32
 80045c8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e03b      	b.n	8004646 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10b      	bne.n	80045ec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	881a      	ldrh	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045e0:	b292      	uxth	r2, r2
 80045e2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	3302      	adds	r3, #2
 80045e8:	61bb      	str	r3, [r7, #24]
 80045ea:	e007      	b.n	80045fc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	781a      	ldrb	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	3301      	adds	r3, #1
 80045fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004602:	b29b      	uxth	r3, r3
 8004604:	3b01      	subs	r3, #1
 8004606:	b29a      	uxth	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004614:	b29b      	uxth	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1c9      	bne.n	80045ae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2200      	movs	r2, #0
 8004622:	2140      	movs	r1, #64	@ 0x40
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 fc15 	bl	8004e54 <UART_WaitOnFlagUntilTimeout>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d004      	beq.n	800463a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2220      	movs	r2, #32
 8004634:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e005      	b.n	8004646 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2220      	movs	r2, #32
 800463e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004640:	2300      	movs	r3, #0
 8004642:	e000      	b.n	8004646 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004644:	2302      	movs	r3, #2
  }
}
 8004646:	4618      	mov	r0, r3
 8004648:	3720      	adds	r7, #32
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004654:	b08a      	sub	sp, #40	@ 0x28
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	431a      	orrs	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	431a      	orrs	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	4313      	orrs	r3, r2
 8004676:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	4ba4      	ldr	r3, [pc, #656]	@ (8004910 <UART_SetConfig+0x2c0>)
 8004680:	4013      	ands	r3, r2
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	6812      	ldr	r2, [r2, #0]
 8004686:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004688:	430b      	orrs	r3, r1
 800468a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a99      	ldr	r2, [pc, #612]	@ (8004914 <UART_SetConfig+0x2c4>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d004      	beq.n	80046bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046b8:	4313      	orrs	r3, r2
 80046ba:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046cc:	430a      	orrs	r2, r1
 80046ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a90      	ldr	r2, [pc, #576]	@ (8004918 <UART_SetConfig+0x2c8>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d126      	bne.n	8004728 <UART_SetConfig+0xd8>
 80046da:	4b90      	ldr	r3, [pc, #576]	@ (800491c <UART_SetConfig+0x2cc>)
 80046dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e0:	f003 0303 	and.w	r3, r3, #3
 80046e4:	2b03      	cmp	r3, #3
 80046e6:	d81b      	bhi.n	8004720 <UART_SetConfig+0xd0>
 80046e8:	a201      	add	r2, pc, #4	@ (adr r2, 80046f0 <UART_SetConfig+0xa0>)
 80046ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ee:	bf00      	nop
 80046f0:	08004701 	.word	0x08004701
 80046f4:	08004711 	.word	0x08004711
 80046f8:	08004709 	.word	0x08004709
 80046fc:	08004719 	.word	0x08004719
 8004700:	2301      	movs	r3, #1
 8004702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004706:	e116      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004708:	2302      	movs	r3, #2
 800470a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800470e:	e112      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004710:	2304      	movs	r3, #4
 8004712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004716:	e10e      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004718:	2308      	movs	r3, #8
 800471a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800471e:	e10a      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004720:	2310      	movs	r3, #16
 8004722:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004726:	e106      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a7c      	ldr	r2, [pc, #496]	@ (8004920 <UART_SetConfig+0x2d0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d138      	bne.n	80047a4 <UART_SetConfig+0x154>
 8004732:	4b7a      	ldr	r3, [pc, #488]	@ (800491c <UART_SetConfig+0x2cc>)
 8004734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004738:	f003 030c 	and.w	r3, r3, #12
 800473c:	2b0c      	cmp	r3, #12
 800473e:	d82d      	bhi.n	800479c <UART_SetConfig+0x14c>
 8004740:	a201      	add	r2, pc, #4	@ (adr r2, 8004748 <UART_SetConfig+0xf8>)
 8004742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004746:	bf00      	nop
 8004748:	0800477d 	.word	0x0800477d
 800474c:	0800479d 	.word	0x0800479d
 8004750:	0800479d 	.word	0x0800479d
 8004754:	0800479d 	.word	0x0800479d
 8004758:	0800478d 	.word	0x0800478d
 800475c:	0800479d 	.word	0x0800479d
 8004760:	0800479d 	.word	0x0800479d
 8004764:	0800479d 	.word	0x0800479d
 8004768:	08004785 	.word	0x08004785
 800476c:	0800479d 	.word	0x0800479d
 8004770:	0800479d 	.word	0x0800479d
 8004774:	0800479d 	.word	0x0800479d
 8004778:	08004795 	.word	0x08004795
 800477c:	2300      	movs	r3, #0
 800477e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004782:	e0d8      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004784:	2302      	movs	r3, #2
 8004786:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800478a:	e0d4      	b.n	8004936 <UART_SetConfig+0x2e6>
 800478c:	2304      	movs	r3, #4
 800478e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004792:	e0d0      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004794:	2308      	movs	r3, #8
 8004796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800479a:	e0cc      	b.n	8004936 <UART_SetConfig+0x2e6>
 800479c:	2310      	movs	r3, #16
 800479e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047a2:	e0c8      	b.n	8004936 <UART_SetConfig+0x2e6>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a5e      	ldr	r2, [pc, #376]	@ (8004924 <UART_SetConfig+0x2d4>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d125      	bne.n	80047fa <UART_SetConfig+0x1aa>
 80047ae:	4b5b      	ldr	r3, [pc, #364]	@ (800491c <UART_SetConfig+0x2cc>)
 80047b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047b4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80047b8:	2b30      	cmp	r3, #48	@ 0x30
 80047ba:	d016      	beq.n	80047ea <UART_SetConfig+0x19a>
 80047bc:	2b30      	cmp	r3, #48	@ 0x30
 80047be:	d818      	bhi.n	80047f2 <UART_SetConfig+0x1a2>
 80047c0:	2b20      	cmp	r3, #32
 80047c2:	d00a      	beq.n	80047da <UART_SetConfig+0x18a>
 80047c4:	2b20      	cmp	r3, #32
 80047c6:	d814      	bhi.n	80047f2 <UART_SetConfig+0x1a2>
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <UART_SetConfig+0x182>
 80047cc:	2b10      	cmp	r3, #16
 80047ce:	d008      	beq.n	80047e2 <UART_SetConfig+0x192>
 80047d0:	e00f      	b.n	80047f2 <UART_SetConfig+0x1a2>
 80047d2:	2300      	movs	r3, #0
 80047d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047d8:	e0ad      	b.n	8004936 <UART_SetConfig+0x2e6>
 80047da:	2302      	movs	r3, #2
 80047dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047e0:	e0a9      	b.n	8004936 <UART_SetConfig+0x2e6>
 80047e2:	2304      	movs	r3, #4
 80047e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047e8:	e0a5      	b.n	8004936 <UART_SetConfig+0x2e6>
 80047ea:	2308      	movs	r3, #8
 80047ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047f0:	e0a1      	b.n	8004936 <UART_SetConfig+0x2e6>
 80047f2:	2310      	movs	r3, #16
 80047f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047f8:	e09d      	b.n	8004936 <UART_SetConfig+0x2e6>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a4a      	ldr	r2, [pc, #296]	@ (8004928 <UART_SetConfig+0x2d8>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d125      	bne.n	8004850 <UART_SetConfig+0x200>
 8004804:	4b45      	ldr	r3, [pc, #276]	@ (800491c <UART_SetConfig+0x2cc>)
 8004806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800480a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800480e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004810:	d016      	beq.n	8004840 <UART_SetConfig+0x1f0>
 8004812:	2bc0      	cmp	r3, #192	@ 0xc0
 8004814:	d818      	bhi.n	8004848 <UART_SetConfig+0x1f8>
 8004816:	2b80      	cmp	r3, #128	@ 0x80
 8004818:	d00a      	beq.n	8004830 <UART_SetConfig+0x1e0>
 800481a:	2b80      	cmp	r3, #128	@ 0x80
 800481c:	d814      	bhi.n	8004848 <UART_SetConfig+0x1f8>
 800481e:	2b00      	cmp	r3, #0
 8004820:	d002      	beq.n	8004828 <UART_SetConfig+0x1d8>
 8004822:	2b40      	cmp	r3, #64	@ 0x40
 8004824:	d008      	beq.n	8004838 <UART_SetConfig+0x1e8>
 8004826:	e00f      	b.n	8004848 <UART_SetConfig+0x1f8>
 8004828:	2300      	movs	r3, #0
 800482a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800482e:	e082      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004830:	2302      	movs	r3, #2
 8004832:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004836:	e07e      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004838:	2304      	movs	r3, #4
 800483a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800483e:	e07a      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004840:	2308      	movs	r3, #8
 8004842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004846:	e076      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004848:	2310      	movs	r3, #16
 800484a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800484e:	e072      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a35      	ldr	r2, [pc, #212]	@ (800492c <UART_SetConfig+0x2dc>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d12a      	bne.n	80048b0 <UART_SetConfig+0x260>
 800485a:	4b30      	ldr	r3, [pc, #192]	@ (800491c <UART_SetConfig+0x2cc>)
 800485c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004860:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004864:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004868:	d01a      	beq.n	80048a0 <UART_SetConfig+0x250>
 800486a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800486e:	d81b      	bhi.n	80048a8 <UART_SetConfig+0x258>
 8004870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004874:	d00c      	beq.n	8004890 <UART_SetConfig+0x240>
 8004876:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800487a:	d815      	bhi.n	80048a8 <UART_SetConfig+0x258>
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <UART_SetConfig+0x238>
 8004880:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004884:	d008      	beq.n	8004898 <UART_SetConfig+0x248>
 8004886:	e00f      	b.n	80048a8 <UART_SetConfig+0x258>
 8004888:	2300      	movs	r3, #0
 800488a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800488e:	e052      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004890:	2302      	movs	r3, #2
 8004892:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004896:	e04e      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004898:	2304      	movs	r3, #4
 800489a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800489e:	e04a      	b.n	8004936 <UART_SetConfig+0x2e6>
 80048a0:	2308      	movs	r3, #8
 80048a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048a6:	e046      	b.n	8004936 <UART_SetConfig+0x2e6>
 80048a8:	2310      	movs	r3, #16
 80048aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ae:	e042      	b.n	8004936 <UART_SetConfig+0x2e6>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a17      	ldr	r2, [pc, #92]	@ (8004914 <UART_SetConfig+0x2c4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d13a      	bne.n	8004930 <UART_SetConfig+0x2e0>
 80048ba:	4b18      	ldr	r3, [pc, #96]	@ (800491c <UART_SetConfig+0x2cc>)
 80048bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80048c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048c8:	d01a      	beq.n	8004900 <UART_SetConfig+0x2b0>
 80048ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048ce:	d81b      	bhi.n	8004908 <UART_SetConfig+0x2b8>
 80048d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048d4:	d00c      	beq.n	80048f0 <UART_SetConfig+0x2a0>
 80048d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048da:	d815      	bhi.n	8004908 <UART_SetConfig+0x2b8>
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <UART_SetConfig+0x298>
 80048e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048e4:	d008      	beq.n	80048f8 <UART_SetConfig+0x2a8>
 80048e6:	e00f      	b.n	8004908 <UART_SetConfig+0x2b8>
 80048e8:	2300      	movs	r3, #0
 80048ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ee:	e022      	b.n	8004936 <UART_SetConfig+0x2e6>
 80048f0:	2302      	movs	r3, #2
 80048f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048f6:	e01e      	b.n	8004936 <UART_SetConfig+0x2e6>
 80048f8:	2304      	movs	r3, #4
 80048fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048fe:	e01a      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004900:	2308      	movs	r3, #8
 8004902:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004906:	e016      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004908:	2310      	movs	r3, #16
 800490a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800490e:	e012      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004910:	efff69f3 	.word	0xefff69f3
 8004914:	40008000 	.word	0x40008000
 8004918:	40013800 	.word	0x40013800
 800491c:	40021000 	.word	0x40021000
 8004920:	40004400 	.word	0x40004400
 8004924:	40004800 	.word	0x40004800
 8004928:	40004c00 	.word	0x40004c00
 800492c:	40005000 	.word	0x40005000
 8004930:	2310      	movs	r3, #16
 8004932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a9f      	ldr	r2, [pc, #636]	@ (8004bb8 <UART_SetConfig+0x568>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d17a      	bne.n	8004a36 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004940:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004944:	2b08      	cmp	r3, #8
 8004946:	d824      	bhi.n	8004992 <UART_SetConfig+0x342>
 8004948:	a201      	add	r2, pc, #4	@ (adr r2, 8004950 <UART_SetConfig+0x300>)
 800494a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494e:	bf00      	nop
 8004950:	08004975 	.word	0x08004975
 8004954:	08004993 	.word	0x08004993
 8004958:	0800497d 	.word	0x0800497d
 800495c:	08004993 	.word	0x08004993
 8004960:	08004983 	.word	0x08004983
 8004964:	08004993 	.word	0x08004993
 8004968:	08004993 	.word	0x08004993
 800496c:	08004993 	.word	0x08004993
 8004970:	0800498b 	.word	0x0800498b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004974:	f7ff f84c 	bl	8003a10 <HAL_RCC_GetPCLK1Freq>
 8004978:	61f8      	str	r0, [r7, #28]
        break;
 800497a:	e010      	b.n	800499e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800497c:	4b8f      	ldr	r3, [pc, #572]	@ (8004bbc <UART_SetConfig+0x56c>)
 800497e:	61fb      	str	r3, [r7, #28]
        break;
 8004980:	e00d      	b.n	800499e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004982:	f7fe ffad 	bl	80038e0 <HAL_RCC_GetSysClockFreq>
 8004986:	61f8      	str	r0, [r7, #28]
        break;
 8004988:	e009      	b.n	800499e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800498a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800498e:	61fb      	str	r3, [r7, #28]
        break;
 8004990:	e005      	b.n	800499e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800499c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 80fb 	beq.w	8004b9c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	4613      	mov	r3, r2
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	4413      	add	r3, r2
 80049b0:	69fa      	ldr	r2, [r7, #28]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d305      	bcc.n	80049c2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049bc:	69fa      	ldr	r2, [r7, #28]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d903      	bls.n	80049ca <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80049c8:	e0e8      	b.n	8004b9c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	2200      	movs	r2, #0
 80049ce:	461c      	mov	r4, r3
 80049d0:	4615      	mov	r5, r2
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	f04f 0300 	mov.w	r3, #0
 80049da:	022b      	lsls	r3, r5, #8
 80049dc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80049e0:	0222      	lsls	r2, r4, #8
 80049e2:	68f9      	ldr	r1, [r7, #12]
 80049e4:	6849      	ldr	r1, [r1, #4]
 80049e6:	0849      	lsrs	r1, r1, #1
 80049e8:	2000      	movs	r0, #0
 80049ea:	4688      	mov	r8, r1
 80049ec:	4681      	mov	r9, r0
 80049ee:	eb12 0a08 	adds.w	sl, r2, r8
 80049f2:	eb43 0b09 	adc.w	fp, r3, r9
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	603b      	str	r3, [r7, #0]
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a04:	4650      	mov	r0, sl
 8004a06:	4659      	mov	r1, fp
 8004a08:	f7fb fbde 	bl	80001c8 <__aeabi_uldivmod>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4613      	mov	r3, r2
 8004a12:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a1a:	d308      	bcc.n	8004a2e <UART_SetConfig+0x3de>
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a22:	d204      	bcs.n	8004a2e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	60da      	str	r2, [r3, #12]
 8004a2c:	e0b6      	b.n	8004b9c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004a34:	e0b2      	b.n	8004b9c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a3e:	d15e      	bne.n	8004afe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004a40:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d828      	bhi.n	8004a9a <UART_SetConfig+0x44a>
 8004a48:	a201      	add	r2, pc, #4	@ (adr r2, 8004a50 <UART_SetConfig+0x400>)
 8004a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4e:	bf00      	nop
 8004a50:	08004a75 	.word	0x08004a75
 8004a54:	08004a7d 	.word	0x08004a7d
 8004a58:	08004a85 	.word	0x08004a85
 8004a5c:	08004a9b 	.word	0x08004a9b
 8004a60:	08004a8b 	.word	0x08004a8b
 8004a64:	08004a9b 	.word	0x08004a9b
 8004a68:	08004a9b 	.word	0x08004a9b
 8004a6c:	08004a9b 	.word	0x08004a9b
 8004a70:	08004a93 	.word	0x08004a93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a74:	f7fe ffcc 	bl	8003a10 <HAL_RCC_GetPCLK1Freq>
 8004a78:	61f8      	str	r0, [r7, #28]
        break;
 8004a7a:	e014      	b.n	8004aa6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a7c:	f7fe ffde 	bl	8003a3c <HAL_RCC_GetPCLK2Freq>
 8004a80:	61f8      	str	r0, [r7, #28]
        break;
 8004a82:	e010      	b.n	8004aa6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a84:	4b4d      	ldr	r3, [pc, #308]	@ (8004bbc <UART_SetConfig+0x56c>)
 8004a86:	61fb      	str	r3, [r7, #28]
        break;
 8004a88:	e00d      	b.n	8004aa6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a8a:	f7fe ff29 	bl	80038e0 <HAL_RCC_GetSysClockFreq>
 8004a8e:	61f8      	str	r0, [r7, #28]
        break;
 8004a90:	e009      	b.n	8004aa6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a96:	61fb      	str	r3, [r7, #28]
        break;
 8004a98:	e005      	b.n	8004aa6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004aa4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d077      	beq.n	8004b9c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	005a      	lsls	r2, r3, #1
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	085b      	lsrs	r3, r3, #1
 8004ab6:	441a      	add	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	2b0f      	cmp	r3, #15
 8004ac6:	d916      	bls.n	8004af6 <UART_SetConfig+0x4a6>
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ace:	d212      	bcs.n	8004af6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	f023 030f 	bic.w	r3, r3, #15
 8004ad8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	085b      	lsrs	r3, r3, #1
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	8afb      	ldrh	r3, [r7, #22]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	8afa      	ldrh	r2, [r7, #22]
 8004af2:	60da      	str	r2, [r3, #12]
 8004af4:	e052      	b.n	8004b9c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004afc:	e04e      	b.n	8004b9c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004afe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b02:	2b08      	cmp	r3, #8
 8004b04:	d827      	bhi.n	8004b56 <UART_SetConfig+0x506>
 8004b06:	a201      	add	r2, pc, #4	@ (adr r2, 8004b0c <UART_SetConfig+0x4bc>)
 8004b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0c:	08004b31 	.word	0x08004b31
 8004b10:	08004b39 	.word	0x08004b39
 8004b14:	08004b41 	.word	0x08004b41
 8004b18:	08004b57 	.word	0x08004b57
 8004b1c:	08004b47 	.word	0x08004b47
 8004b20:	08004b57 	.word	0x08004b57
 8004b24:	08004b57 	.word	0x08004b57
 8004b28:	08004b57 	.word	0x08004b57
 8004b2c:	08004b4f 	.word	0x08004b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b30:	f7fe ff6e 	bl	8003a10 <HAL_RCC_GetPCLK1Freq>
 8004b34:	61f8      	str	r0, [r7, #28]
        break;
 8004b36:	e014      	b.n	8004b62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b38:	f7fe ff80 	bl	8003a3c <HAL_RCC_GetPCLK2Freq>
 8004b3c:	61f8      	str	r0, [r7, #28]
        break;
 8004b3e:	e010      	b.n	8004b62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b40:	4b1e      	ldr	r3, [pc, #120]	@ (8004bbc <UART_SetConfig+0x56c>)
 8004b42:	61fb      	str	r3, [r7, #28]
        break;
 8004b44:	e00d      	b.n	8004b62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b46:	f7fe fecb 	bl	80038e0 <HAL_RCC_GetSysClockFreq>
 8004b4a:	61f8      	str	r0, [r7, #28]
        break;
 8004b4c:	e009      	b.n	8004b62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b52:	61fb      	str	r3, [r7, #28]
        break;
 8004b54:	e005      	b.n	8004b62 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b60:	bf00      	nop
    }

    if (pclk != 0U)
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d019      	beq.n	8004b9c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	085a      	lsrs	r2, r3, #1
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	441a      	add	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	2b0f      	cmp	r3, #15
 8004b80:	d909      	bls.n	8004b96 <UART_SetConfig+0x546>
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b88:	d205      	bcs.n	8004b96 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	60da      	str	r2, [r3, #12]
 8004b94:	e002      	b.n	8004b9c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004ba8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3728      	adds	r7, #40	@ 0x28
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bb6:	bf00      	nop
 8004bb8:	40008000 	.word	0x40008000
 8004bbc:	00f42400 	.word	0x00f42400

08004bc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bcc:	f003 0308 	and.w	r3, r3, #8
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00a      	beq.n	8004bea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00a      	beq.n	8004c0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00a      	beq.n	8004c2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c54:	f003 0310 	and.w	r3, r3, #16
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00a      	beq.n	8004c72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c76:	f003 0320 	and.w	r3, r3, #32
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d01a      	beq.n	8004cd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cbe:	d10a      	bne.n	8004cd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	605a      	str	r2, [r3, #4]
  }
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b098      	sub	sp, #96	@ 0x60
 8004d08:	af02      	add	r7, sp, #8
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d14:	f7fc fa94 	bl	8001240 <HAL_GetTick>
 8004d18:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0308 	and.w	r3, r3, #8
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d12e      	bne.n	8004d86 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d30:	2200      	movs	r2, #0
 8004d32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f88c 	bl	8004e54 <UART_WaitOnFlagUntilTimeout>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d021      	beq.n	8004d86 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d4a:	e853 3f00 	ldrex	r3, [r3]
 8004d4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d56:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d60:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d62:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d68:	e841 2300 	strex	r3, r2, [r1]
 8004d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1e6      	bne.n	8004d42 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2220      	movs	r2, #32
 8004d78:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e062      	b.n	8004e4c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b04      	cmp	r3, #4
 8004d92:	d149      	bne.n	8004e28 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f856 	bl	8004e54 <UART_WaitOnFlagUntilTimeout>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d03c      	beq.n	8004e28 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db6:	e853 3f00 	ldrex	r3, [r3]
 8004dba:	623b      	str	r3, [r7, #32]
   return(result);
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004dd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dd4:	e841 2300 	strex	r3, r2, [r1]
 8004dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1e6      	bne.n	8004dae <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	3308      	adds	r3, #8
 8004de6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	e853 3f00 	ldrex	r3, [r3]
 8004dee:	60fb      	str	r3, [r7, #12]
   return(result);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0301 	bic.w	r3, r3, #1
 8004df6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3308      	adds	r3, #8
 8004dfe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e00:	61fa      	str	r2, [r7, #28]
 8004e02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e04:	69b9      	ldr	r1, [r7, #24]
 8004e06:	69fa      	ldr	r2, [r7, #28]
 8004e08:	e841 2300 	strex	r3, r2, [r1]
 8004e0c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1e5      	bne.n	8004de0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e011      	b.n	8004e4c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3758      	adds	r7, #88	@ 0x58
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	603b      	str	r3, [r7, #0]
 8004e60:	4613      	mov	r3, r2
 8004e62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e64:	e04f      	b.n	8004f06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6c:	d04b      	beq.n	8004f06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e6e:	f7fc f9e7 	bl	8001240 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d302      	bcc.n	8004e84 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e04e      	b.n	8004f26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0304 	and.w	r3, r3, #4
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d037      	beq.n	8004f06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2b80      	cmp	r3, #128	@ 0x80
 8004e9a:	d034      	beq.n	8004f06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	2b40      	cmp	r3, #64	@ 0x40
 8004ea0:	d031      	beq.n	8004f06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	f003 0308 	and.w	r3, r3, #8
 8004eac:	2b08      	cmp	r3, #8
 8004eae:	d110      	bne.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2208      	movs	r2, #8
 8004eb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f000 f838 	bl	8004f2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2208      	movs	r2, #8
 8004ec2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e029      	b.n	8004f26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004edc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ee0:	d111      	bne.n	8004f06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004eea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 f81e 	bl	8004f2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e00f      	b.n	8004f26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69da      	ldr	r2, [r3, #28]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	bf0c      	ite	eq
 8004f16:	2301      	moveq	r3, #1
 8004f18:	2300      	movne	r3, #0
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	79fb      	ldrb	r3, [r7, #7]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d0a0      	beq.n	8004e66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b095      	sub	sp, #84	@ 0x54
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f3e:	e853 3f00 	ldrex	r3, [r3]
 8004f42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	461a      	mov	r2, r3
 8004f52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f54:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f56:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f5c:	e841 2300 	strex	r3, r2, [r1]
 8004f60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1e6      	bne.n	8004f36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	3308      	adds	r3, #8
 8004f6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f70:	6a3b      	ldr	r3, [r7, #32]
 8004f72:	e853 3f00 	ldrex	r3, [r3]
 8004f76:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	f023 0301 	bic.w	r3, r3, #1
 8004f7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	3308      	adds	r3, #8
 8004f86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f90:	e841 2300 	strex	r3, r2, [r1]
 8004f94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e5      	bne.n	8004f68 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d118      	bne.n	8004fd6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	e853 3f00 	ldrex	r3, [r3]
 8004fb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	f023 0310 	bic.w	r3, r3, #16
 8004fb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fc2:	61bb      	str	r3, [r7, #24]
 8004fc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc6:	6979      	ldr	r1, [r7, #20]
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	e841 2300 	strex	r3, r2, [r1]
 8004fce:	613b      	str	r3, [r7, #16]
   return(result);
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1e6      	bne.n	8004fa4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004fea:	bf00      	nop
 8004fec:	3754      	adds	r7, #84	@ 0x54
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8004ff6:	b480      	push	{r7}
 8004ff8:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8004ffa:	bf00      	nop
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af04      	add	r7, sp, #16
 800500a:	4603      	mov	r3, r0
 800500c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800500e:	f04f 33ff 	mov.w	r3, #4294967295
 8005012:	9302      	str	r3, [sp, #8]
 8005014:	2301      	movs	r3, #1
 8005016:	9301      	str	r3, [sp, #4]
 8005018:	1dfb      	adds	r3, r7, #7
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	2301      	movs	r3, #1
 800501e:	2200      	movs	r2, #0
 8005020:	2178      	movs	r1, #120	@ 0x78
 8005022:	4803      	ldr	r0, [pc, #12]	@ (8005030 <ssd1306_WriteCommand+0x2c>)
 8005024:	f7fc fd2a 	bl	8001a7c <HAL_I2C_Mem_Write>
}
 8005028:	bf00      	nop
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	2000009c 	.word	0x2000009c

08005034 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af04      	add	r7, sp, #16
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	b29b      	uxth	r3, r3
 8005042:	f04f 32ff 	mov.w	r2, #4294967295
 8005046:	9202      	str	r2, [sp, #8]
 8005048:	9301      	str	r3, [sp, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	2301      	movs	r3, #1
 8005050:	2240      	movs	r2, #64	@ 0x40
 8005052:	2178      	movs	r1, #120	@ 0x78
 8005054:	4803      	ldr	r0, [pc, #12]	@ (8005064 <ssd1306_WriteData+0x30>)
 8005056:	f7fc fd11 	bl	8001a7c <HAL_I2C_Mem_Write>
}
 800505a:	bf00      	nop
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	2000009c 	.word	0x2000009c

08005068 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8005068:	b580      	push	{r7, lr}
 800506a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800506c:	f7ff ffc3 	bl	8004ff6 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8005070:	2064      	movs	r0, #100	@ 0x64
 8005072:	f7fc f8f1 	bl	8001258 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8005076:	2000      	movs	r0, #0
 8005078:	f000 f9d6 	bl	8005428 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800507c:	2020      	movs	r0, #32
 800507e:	f7ff ffc1 	bl	8005004 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8005082:	2000      	movs	r0, #0
 8005084:	f7ff ffbe 	bl	8005004 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005088:	20b0      	movs	r0, #176	@ 0xb0
 800508a:	f7ff ffbb 	bl	8005004 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800508e:	20c8      	movs	r0, #200	@ 0xc8
 8005090:	f7ff ffb8 	bl	8005004 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8005094:	2000      	movs	r0, #0
 8005096:	f7ff ffb5 	bl	8005004 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800509a:	2010      	movs	r0, #16
 800509c:	f7ff ffb2 	bl	8005004 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80050a0:	2040      	movs	r0, #64	@ 0x40
 80050a2:	f7ff ffaf 	bl	8005004 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80050a6:	20ff      	movs	r0, #255	@ 0xff
 80050a8:	f000 f9aa 	bl	8005400 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80050ac:	20a1      	movs	r0, #161	@ 0xa1
 80050ae:	f7ff ffa9 	bl	8005004 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80050b2:	20a6      	movs	r0, #166	@ 0xa6
 80050b4:	f7ff ffa6 	bl	8005004 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80050b8:	20a8      	movs	r0, #168	@ 0xa8
 80050ba:	f7ff ffa3 	bl	8005004 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80050be:	203f      	movs	r0, #63	@ 0x3f
 80050c0:	f7ff ffa0 	bl	8005004 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80050c4:	20a4      	movs	r0, #164	@ 0xa4
 80050c6:	f7ff ff9d 	bl	8005004 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80050ca:	20d3      	movs	r0, #211	@ 0xd3
 80050cc:	f7ff ff9a 	bl	8005004 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80050d0:	2000      	movs	r0, #0
 80050d2:	f7ff ff97 	bl	8005004 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80050d6:	20d5      	movs	r0, #213	@ 0xd5
 80050d8:	f7ff ff94 	bl	8005004 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80050dc:	20f0      	movs	r0, #240	@ 0xf0
 80050de:	f7ff ff91 	bl	8005004 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80050e2:	20d9      	movs	r0, #217	@ 0xd9
 80050e4:	f7ff ff8e 	bl	8005004 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80050e8:	2022      	movs	r0, #34	@ 0x22
 80050ea:	f7ff ff8b 	bl	8005004 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80050ee:	20da      	movs	r0, #218	@ 0xda
 80050f0:	f7ff ff88 	bl	8005004 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80050f4:	2012      	movs	r0, #18
 80050f6:	f7ff ff85 	bl	8005004 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80050fa:	20db      	movs	r0, #219	@ 0xdb
 80050fc:	f7ff ff82 	bl	8005004 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8005100:	2020      	movs	r0, #32
 8005102:	f7ff ff7f 	bl	8005004 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8005106:	208d      	movs	r0, #141	@ 0x8d
 8005108:	f7ff ff7c 	bl	8005004 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800510c:	2014      	movs	r0, #20
 800510e:	f7ff ff79 	bl	8005004 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8005112:	2001      	movs	r0, #1
 8005114:	f000 f988 	bl	8005428 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8005118:	2000      	movs	r0, #0
 800511a:	f000 f80f 	bl	800513c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800511e:	f000 f825 	bl	800516c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8005122:	4b05      	ldr	r3, [pc, #20]	@ (8005138 <ssd1306_Init+0xd0>)
 8005124:	2200      	movs	r2, #0
 8005126:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8005128:	4b03      	ldr	r3, [pc, #12]	@ (8005138 <ssd1306_Init+0xd0>)
 800512a:	2200      	movs	r2, #0
 800512c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800512e:	4b02      	ldr	r3, [pc, #8]	@ (8005138 <ssd1306_Init+0xd0>)
 8005130:	2201      	movs	r2, #1
 8005132:	711a      	strb	r2, [r3, #4]
}
 8005134:	bf00      	nop
 8005136:	bd80      	pop	{r7, pc}
 8005138:	200005ac 	.word	0x200005ac

0800513c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	4603      	mov	r3, r0
 8005144:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8005146:	79fb      	ldrb	r3, [r7, #7]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d101      	bne.n	8005150 <ssd1306_Fill+0x14>
 800514c:	2300      	movs	r3, #0
 800514e:	e000      	b.n	8005152 <ssd1306_Fill+0x16>
 8005150:	23ff      	movs	r3, #255	@ 0xff
 8005152:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005156:	4619      	mov	r1, r3
 8005158:	4803      	ldr	r0, [pc, #12]	@ (8005168 <ssd1306_Fill+0x2c>)
 800515a:	f000 fb7b 	bl	8005854 <memset>
}
 800515e:	bf00      	nop
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	200001ac 	.word	0x200001ac

0800516c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005172:	2300      	movs	r3, #0
 8005174:	71fb      	strb	r3, [r7, #7]
 8005176:	e016      	b.n	80051a6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8005178:	79fb      	ldrb	r3, [r7, #7]
 800517a:	3b50      	subs	r3, #80	@ 0x50
 800517c:	b2db      	uxtb	r3, r3
 800517e:	4618      	mov	r0, r3
 8005180:	f7ff ff40 	bl	8005004 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8005184:	2000      	movs	r0, #0
 8005186:	f7ff ff3d 	bl	8005004 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800518a:	2010      	movs	r0, #16
 800518c:	f7ff ff3a 	bl	8005004 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8005190:	79fb      	ldrb	r3, [r7, #7]
 8005192:	01db      	lsls	r3, r3, #7
 8005194:	4a08      	ldr	r2, [pc, #32]	@ (80051b8 <ssd1306_UpdateScreen+0x4c>)
 8005196:	4413      	add	r3, r2
 8005198:	2180      	movs	r1, #128	@ 0x80
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff ff4a 	bl	8005034 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80051a0:	79fb      	ldrb	r3, [r7, #7]
 80051a2:	3301      	adds	r3, #1
 80051a4:	71fb      	strb	r3, [r7, #7]
 80051a6:	79fb      	ldrb	r3, [r7, #7]
 80051a8:	2b07      	cmp	r3, #7
 80051aa:	d9e5      	bls.n	8005178 <ssd1306_UpdateScreen+0xc>
    }
}
 80051ac:	bf00      	nop
 80051ae:	bf00      	nop
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	200001ac 	.word	0x200001ac

080051bc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	4603      	mov	r3, r0
 80051c4:	71fb      	strb	r3, [r7, #7]
 80051c6:	460b      	mov	r3, r1
 80051c8:	71bb      	strb	r3, [r7, #6]
 80051ca:	4613      	mov	r3, r2
 80051cc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80051ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	db3d      	blt.n	8005252 <ssd1306_DrawPixel+0x96>
 80051d6:	79bb      	ldrb	r3, [r7, #6]
 80051d8:	2b3f      	cmp	r3, #63	@ 0x3f
 80051da:	d83a      	bhi.n	8005252 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80051dc:	797b      	ldrb	r3, [r7, #5]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d11a      	bne.n	8005218 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80051e2:	79fa      	ldrb	r2, [r7, #7]
 80051e4:	79bb      	ldrb	r3, [r7, #6]
 80051e6:	08db      	lsrs	r3, r3, #3
 80051e8:	b2d8      	uxtb	r0, r3
 80051ea:	4603      	mov	r3, r0
 80051ec:	01db      	lsls	r3, r3, #7
 80051ee:	4413      	add	r3, r2
 80051f0:	4a1b      	ldr	r2, [pc, #108]	@ (8005260 <ssd1306_DrawPixel+0xa4>)
 80051f2:	5cd3      	ldrb	r3, [r2, r3]
 80051f4:	b25a      	sxtb	r2, r3
 80051f6:	79bb      	ldrb	r3, [r7, #6]
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	2101      	movs	r1, #1
 80051fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005202:	b25b      	sxtb	r3, r3
 8005204:	4313      	orrs	r3, r2
 8005206:	b259      	sxtb	r1, r3
 8005208:	79fa      	ldrb	r2, [r7, #7]
 800520a:	4603      	mov	r3, r0
 800520c:	01db      	lsls	r3, r3, #7
 800520e:	4413      	add	r3, r2
 8005210:	b2c9      	uxtb	r1, r1
 8005212:	4a13      	ldr	r2, [pc, #76]	@ (8005260 <ssd1306_DrawPixel+0xa4>)
 8005214:	54d1      	strb	r1, [r2, r3]
 8005216:	e01d      	b.n	8005254 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005218:	79fa      	ldrb	r2, [r7, #7]
 800521a:	79bb      	ldrb	r3, [r7, #6]
 800521c:	08db      	lsrs	r3, r3, #3
 800521e:	b2d8      	uxtb	r0, r3
 8005220:	4603      	mov	r3, r0
 8005222:	01db      	lsls	r3, r3, #7
 8005224:	4413      	add	r3, r2
 8005226:	4a0e      	ldr	r2, [pc, #56]	@ (8005260 <ssd1306_DrawPixel+0xa4>)
 8005228:	5cd3      	ldrb	r3, [r2, r3]
 800522a:	b25a      	sxtb	r2, r3
 800522c:	79bb      	ldrb	r3, [r7, #6]
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	2101      	movs	r1, #1
 8005234:	fa01 f303 	lsl.w	r3, r1, r3
 8005238:	b25b      	sxtb	r3, r3
 800523a:	43db      	mvns	r3, r3
 800523c:	b25b      	sxtb	r3, r3
 800523e:	4013      	ands	r3, r2
 8005240:	b259      	sxtb	r1, r3
 8005242:	79fa      	ldrb	r2, [r7, #7]
 8005244:	4603      	mov	r3, r0
 8005246:	01db      	lsls	r3, r3, #7
 8005248:	4413      	add	r3, r2
 800524a:	b2c9      	uxtb	r1, r1
 800524c:	4a04      	ldr	r2, [pc, #16]	@ (8005260 <ssd1306_DrawPixel+0xa4>)
 800524e:	54d1      	strb	r1, [r2, r3]
 8005250:	e000      	b.n	8005254 <ssd1306_DrawPixel+0x98>
        return;
 8005252:	bf00      	nop
    }
}
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	200001ac 	.word	0x200001ac

08005264 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8005264:	b590      	push	{r4, r7, lr}
 8005266:	b089      	sub	sp, #36	@ 0x24
 8005268:	af00      	add	r7, sp, #0
 800526a:	4604      	mov	r4, r0
 800526c:	4638      	mov	r0, r7
 800526e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8005272:	4623      	mov	r3, r4
 8005274:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8005276:	7bfb      	ldrb	r3, [r7, #15]
 8005278:	2b1f      	cmp	r3, #31
 800527a:	d902      	bls.n	8005282 <ssd1306_WriteChar+0x1e>
 800527c:	7bfb      	ldrb	r3, [r7, #15]
 800527e:	2b7e      	cmp	r3, #126	@ 0x7e
 8005280:	d901      	bls.n	8005286 <ssd1306_WriteChar+0x22>
        return 0;
 8005282:	2300      	movs	r3, #0
 8005284:	e077      	b.n	8005376 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8005286:	4b3e      	ldr	r3, [pc, #248]	@ (8005380 <ssd1306_WriteChar+0x11c>)
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	461a      	mov	r2, r3
 800528c:	783b      	ldrb	r3, [r7, #0]
 800528e:	4413      	add	r3, r2
 8005290:	2b80      	cmp	r3, #128	@ 0x80
 8005292:	dc06      	bgt.n	80052a2 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8005294:	4b3a      	ldr	r3, [pc, #232]	@ (8005380 <ssd1306_WriteChar+0x11c>)
 8005296:	885b      	ldrh	r3, [r3, #2]
 8005298:	461a      	mov	r2, r3
 800529a:	787b      	ldrb	r3, [r7, #1]
 800529c:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800529e:	2b40      	cmp	r3, #64	@ 0x40
 80052a0:	dd01      	ble.n	80052a6 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80052a2:	2300      	movs	r3, #0
 80052a4:	e067      	b.n	8005376 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80052a6:	2300      	movs	r3, #0
 80052a8:	61fb      	str	r3, [r7, #28]
 80052aa:	e04e      	b.n	800534a <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	7bfb      	ldrb	r3, [r7, #15]
 80052b0:	3b20      	subs	r3, #32
 80052b2:	7879      	ldrb	r1, [r7, #1]
 80052b4:	fb01 f303 	mul.w	r3, r1, r3
 80052b8:	4619      	mov	r1, r3
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	440b      	add	r3, r1
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	4413      	add	r3, r2
 80052c2:	881b      	ldrh	r3, [r3, #0]
 80052c4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80052c6:	2300      	movs	r3, #0
 80052c8:	61bb      	str	r3, [r7, #24]
 80052ca:	e036      	b.n	800533a <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	fa02 f303 	lsl.w	r3, r2, r3
 80052d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d013      	beq.n	8005304 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80052dc:	4b28      	ldr	r3, [pc, #160]	@ (8005380 <ssd1306_WriteChar+0x11c>)
 80052de:	881b      	ldrh	r3, [r3, #0]
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	4413      	add	r3, r2
 80052e8:	b2d8      	uxtb	r0, r3
 80052ea:	4b25      	ldr	r3, [pc, #148]	@ (8005380 <ssd1306_WriteChar+0x11c>)
 80052ec:	885b      	ldrh	r3, [r3, #2]
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	4413      	add	r3, r2
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80052fc:	4619      	mov	r1, r3
 80052fe:	f7ff ff5d 	bl	80051bc <ssd1306_DrawPixel>
 8005302:	e017      	b.n	8005334 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005304:	4b1e      	ldr	r3, [pc, #120]	@ (8005380 <ssd1306_WriteChar+0x11c>)
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	b2da      	uxtb	r2, r3
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	b2db      	uxtb	r3, r3
 800530e:	4413      	add	r3, r2
 8005310:	b2d8      	uxtb	r0, r3
 8005312:	4b1b      	ldr	r3, [pc, #108]	@ (8005380 <ssd1306_WriteChar+0x11c>)
 8005314:	885b      	ldrh	r3, [r3, #2]
 8005316:	b2da      	uxtb	r2, r3
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	b2db      	uxtb	r3, r3
 800531c:	4413      	add	r3, r2
 800531e:	b2d9      	uxtb	r1, r3
 8005320:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005324:	2b00      	cmp	r3, #0
 8005326:	bf0c      	ite	eq
 8005328:	2301      	moveq	r3, #1
 800532a:	2300      	movne	r3, #0
 800532c:	b2db      	uxtb	r3, r3
 800532e:	461a      	mov	r2, r3
 8005330:	f7ff ff44 	bl	80051bc <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	3301      	adds	r3, #1
 8005338:	61bb      	str	r3, [r7, #24]
 800533a:	783b      	ldrb	r3, [r7, #0]
 800533c:	461a      	mov	r2, r3
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	4293      	cmp	r3, r2
 8005342:	d3c3      	bcc.n	80052cc <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	3301      	adds	r3, #1
 8005348:	61fb      	str	r3, [r7, #28]
 800534a:	787b      	ldrb	r3, [r7, #1]
 800534c:	461a      	mov	r2, r3
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	4293      	cmp	r3, r2
 8005352:	d3ab      	bcc.n	80052ac <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8005354:	4b0a      	ldr	r3, [pc, #40]	@ (8005380 <ssd1306_WriteChar+0x11c>)
 8005356:	881b      	ldrh	r3, [r3, #0]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	2a00      	cmp	r2, #0
 800535c:	d005      	beq.n	800536a <ssd1306_WriteChar+0x106>
 800535e:	68b9      	ldr	r1, [r7, #8]
 8005360:	7bfa      	ldrb	r2, [r7, #15]
 8005362:	3a20      	subs	r2, #32
 8005364:	440a      	add	r2, r1
 8005366:	7812      	ldrb	r2, [r2, #0]
 8005368:	e000      	b.n	800536c <ssd1306_WriteChar+0x108>
 800536a:	783a      	ldrb	r2, [r7, #0]
 800536c:	4413      	add	r3, r2
 800536e:	b29a      	uxth	r2, r3
 8005370:	4b03      	ldr	r3, [pc, #12]	@ (8005380 <ssd1306_WriteChar+0x11c>)
 8005372:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8005374:	7bfb      	ldrb	r3, [r7, #15]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3724      	adds	r7, #36	@ 0x24
 800537a:	46bd      	mov	sp, r7
 800537c:	bd90      	pop	{r4, r7, pc}
 800537e:	bf00      	nop
 8005380:	200005ac 	.word	0x200005ac

08005384 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af02      	add	r7, sp, #8
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	4638      	mov	r0, r7
 800538e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8005392:	e013      	b.n	80053bc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	7818      	ldrb	r0, [r3, #0]
 8005398:	7e3b      	ldrb	r3, [r7, #24]
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	463b      	mov	r3, r7
 800539e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053a0:	f7ff ff60 	bl	8005264 <ssd1306_WriteChar>
 80053a4:	4603      	mov	r3, r0
 80053a6:	461a      	mov	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d002      	beq.n	80053b6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	e008      	b.n	80053c8 <ssd1306_WriteString+0x44>
        }
        str++;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	3301      	adds	r3, #1
 80053ba:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e7      	bne.n	8005394 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	781b      	ldrb	r3, [r3, #0]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	4603      	mov	r3, r0
 80053d8:	460a      	mov	r2, r1
 80053da:	71fb      	strb	r3, [r7, #7]
 80053dc:	4613      	mov	r3, r2
 80053de:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80053e0:	79fb      	ldrb	r3, [r7, #7]
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	4b05      	ldr	r3, [pc, #20]	@ (80053fc <ssd1306_SetCursor+0x2c>)
 80053e6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80053e8:	79bb      	ldrb	r3, [r7, #6]
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	4b03      	ldr	r3, [pc, #12]	@ (80053fc <ssd1306_SetCursor+0x2c>)
 80053ee:	805a      	strh	r2, [r3, #2]
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	200005ac 	.word	0x200005ac

08005400 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800540a:	2381      	movs	r3, #129	@ 0x81
 800540c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800540e:	7bfb      	ldrb	r3, [r7, #15]
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff fdf7 	bl	8005004 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8005416:	79fb      	ldrb	r3, [r7, #7]
 8005418:	4618      	mov	r0, r3
 800541a:	f7ff fdf3 	bl	8005004 <ssd1306_WriteCommand>
}
 800541e:	bf00      	nop
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	4603      	mov	r3, r0
 8005430:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8005432:	79fb      	ldrb	r3, [r7, #7]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d005      	beq.n	8005444 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8005438:	23af      	movs	r3, #175	@ 0xaf
 800543a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800543c:	4b08      	ldr	r3, [pc, #32]	@ (8005460 <ssd1306_SetDisplayOn+0x38>)
 800543e:	2201      	movs	r2, #1
 8005440:	715a      	strb	r2, [r3, #5]
 8005442:	e004      	b.n	800544e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8005444:	23ae      	movs	r3, #174	@ 0xae
 8005446:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8005448:	4b05      	ldr	r3, [pc, #20]	@ (8005460 <ssd1306_SetDisplayOn+0x38>)
 800544a:	2200      	movs	r2, #0
 800544c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800544e:	7bfb      	ldrb	r3, [r7, #15]
 8005450:	4618      	mov	r0, r3
 8005452:	f7ff fdd7 	bl	8005004 <ssd1306_WriteCommand>
}
 8005456:	bf00      	nop
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	200005ac 	.word	0x200005ac

08005464 <std>:
 8005464:	2300      	movs	r3, #0
 8005466:	b510      	push	{r4, lr}
 8005468:	4604      	mov	r4, r0
 800546a:	e9c0 3300 	strd	r3, r3, [r0]
 800546e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005472:	6083      	str	r3, [r0, #8]
 8005474:	8181      	strh	r1, [r0, #12]
 8005476:	6643      	str	r3, [r0, #100]	@ 0x64
 8005478:	81c2      	strh	r2, [r0, #14]
 800547a:	6183      	str	r3, [r0, #24]
 800547c:	4619      	mov	r1, r3
 800547e:	2208      	movs	r2, #8
 8005480:	305c      	adds	r0, #92	@ 0x5c
 8005482:	f000 f9e7 	bl	8005854 <memset>
 8005486:	4b0d      	ldr	r3, [pc, #52]	@ (80054bc <std+0x58>)
 8005488:	6263      	str	r3, [r4, #36]	@ 0x24
 800548a:	4b0d      	ldr	r3, [pc, #52]	@ (80054c0 <std+0x5c>)
 800548c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800548e:	4b0d      	ldr	r3, [pc, #52]	@ (80054c4 <std+0x60>)
 8005490:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005492:	4b0d      	ldr	r3, [pc, #52]	@ (80054c8 <std+0x64>)
 8005494:	6323      	str	r3, [r4, #48]	@ 0x30
 8005496:	4b0d      	ldr	r3, [pc, #52]	@ (80054cc <std+0x68>)
 8005498:	6224      	str	r4, [r4, #32]
 800549a:	429c      	cmp	r4, r3
 800549c:	d006      	beq.n	80054ac <std+0x48>
 800549e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80054a2:	4294      	cmp	r4, r2
 80054a4:	d002      	beq.n	80054ac <std+0x48>
 80054a6:	33d0      	adds	r3, #208	@ 0xd0
 80054a8:	429c      	cmp	r4, r3
 80054aa:	d105      	bne.n	80054b8 <std+0x54>
 80054ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80054b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054b4:	f000 ba46 	b.w	8005944 <__retarget_lock_init_recursive>
 80054b8:	bd10      	pop	{r4, pc}
 80054ba:	bf00      	nop
 80054bc:	080056a5 	.word	0x080056a5
 80054c0:	080056c7 	.word	0x080056c7
 80054c4:	080056ff 	.word	0x080056ff
 80054c8:	08005723 	.word	0x08005723
 80054cc:	200005b4 	.word	0x200005b4

080054d0 <stdio_exit_handler>:
 80054d0:	4a02      	ldr	r2, [pc, #8]	@ (80054dc <stdio_exit_handler+0xc>)
 80054d2:	4903      	ldr	r1, [pc, #12]	@ (80054e0 <stdio_exit_handler+0x10>)
 80054d4:	4803      	ldr	r0, [pc, #12]	@ (80054e4 <stdio_exit_handler+0x14>)
 80054d6:	f000 b869 	b.w	80055ac <_fwalk_sglue>
 80054da:	bf00      	nop
 80054dc:	20000020 	.word	0x20000020
 80054e0:	08005c45 	.word	0x08005c45
 80054e4:	20000030 	.word	0x20000030

080054e8 <cleanup_stdio>:
 80054e8:	6841      	ldr	r1, [r0, #4]
 80054ea:	4b0c      	ldr	r3, [pc, #48]	@ (800551c <cleanup_stdio+0x34>)
 80054ec:	4299      	cmp	r1, r3
 80054ee:	b510      	push	{r4, lr}
 80054f0:	4604      	mov	r4, r0
 80054f2:	d001      	beq.n	80054f8 <cleanup_stdio+0x10>
 80054f4:	f000 fba6 	bl	8005c44 <_fflush_r>
 80054f8:	68a1      	ldr	r1, [r4, #8]
 80054fa:	4b09      	ldr	r3, [pc, #36]	@ (8005520 <cleanup_stdio+0x38>)
 80054fc:	4299      	cmp	r1, r3
 80054fe:	d002      	beq.n	8005506 <cleanup_stdio+0x1e>
 8005500:	4620      	mov	r0, r4
 8005502:	f000 fb9f 	bl	8005c44 <_fflush_r>
 8005506:	68e1      	ldr	r1, [r4, #12]
 8005508:	4b06      	ldr	r3, [pc, #24]	@ (8005524 <cleanup_stdio+0x3c>)
 800550a:	4299      	cmp	r1, r3
 800550c:	d004      	beq.n	8005518 <cleanup_stdio+0x30>
 800550e:	4620      	mov	r0, r4
 8005510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005514:	f000 bb96 	b.w	8005c44 <_fflush_r>
 8005518:	bd10      	pop	{r4, pc}
 800551a:	bf00      	nop
 800551c:	200005b4 	.word	0x200005b4
 8005520:	2000061c 	.word	0x2000061c
 8005524:	20000684 	.word	0x20000684

08005528 <global_stdio_init.part.0>:
 8005528:	b510      	push	{r4, lr}
 800552a:	4b0b      	ldr	r3, [pc, #44]	@ (8005558 <global_stdio_init.part.0+0x30>)
 800552c:	4c0b      	ldr	r4, [pc, #44]	@ (800555c <global_stdio_init.part.0+0x34>)
 800552e:	4a0c      	ldr	r2, [pc, #48]	@ (8005560 <global_stdio_init.part.0+0x38>)
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	4620      	mov	r0, r4
 8005534:	2200      	movs	r2, #0
 8005536:	2104      	movs	r1, #4
 8005538:	f7ff ff94 	bl	8005464 <std>
 800553c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005540:	2201      	movs	r2, #1
 8005542:	2109      	movs	r1, #9
 8005544:	f7ff ff8e 	bl	8005464 <std>
 8005548:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800554c:	2202      	movs	r2, #2
 800554e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005552:	2112      	movs	r1, #18
 8005554:	f7ff bf86 	b.w	8005464 <std>
 8005558:	200006ec 	.word	0x200006ec
 800555c:	200005b4 	.word	0x200005b4
 8005560:	080054d1 	.word	0x080054d1

08005564 <__sfp_lock_acquire>:
 8005564:	4801      	ldr	r0, [pc, #4]	@ (800556c <__sfp_lock_acquire+0x8>)
 8005566:	f000 b9ee 	b.w	8005946 <__retarget_lock_acquire_recursive>
 800556a:	bf00      	nop
 800556c:	200006f5 	.word	0x200006f5

08005570 <__sfp_lock_release>:
 8005570:	4801      	ldr	r0, [pc, #4]	@ (8005578 <__sfp_lock_release+0x8>)
 8005572:	f000 b9e9 	b.w	8005948 <__retarget_lock_release_recursive>
 8005576:	bf00      	nop
 8005578:	200006f5 	.word	0x200006f5

0800557c <__sinit>:
 800557c:	b510      	push	{r4, lr}
 800557e:	4604      	mov	r4, r0
 8005580:	f7ff fff0 	bl	8005564 <__sfp_lock_acquire>
 8005584:	6a23      	ldr	r3, [r4, #32]
 8005586:	b11b      	cbz	r3, 8005590 <__sinit+0x14>
 8005588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800558c:	f7ff bff0 	b.w	8005570 <__sfp_lock_release>
 8005590:	4b04      	ldr	r3, [pc, #16]	@ (80055a4 <__sinit+0x28>)
 8005592:	6223      	str	r3, [r4, #32]
 8005594:	4b04      	ldr	r3, [pc, #16]	@ (80055a8 <__sinit+0x2c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1f5      	bne.n	8005588 <__sinit+0xc>
 800559c:	f7ff ffc4 	bl	8005528 <global_stdio_init.part.0>
 80055a0:	e7f2      	b.n	8005588 <__sinit+0xc>
 80055a2:	bf00      	nop
 80055a4:	080054e9 	.word	0x080054e9
 80055a8:	200006ec 	.word	0x200006ec

080055ac <_fwalk_sglue>:
 80055ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055b0:	4607      	mov	r7, r0
 80055b2:	4688      	mov	r8, r1
 80055b4:	4614      	mov	r4, r2
 80055b6:	2600      	movs	r6, #0
 80055b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055bc:	f1b9 0901 	subs.w	r9, r9, #1
 80055c0:	d505      	bpl.n	80055ce <_fwalk_sglue+0x22>
 80055c2:	6824      	ldr	r4, [r4, #0]
 80055c4:	2c00      	cmp	r4, #0
 80055c6:	d1f7      	bne.n	80055b8 <_fwalk_sglue+0xc>
 80055c8:	4630      	mov	r0, r6
 80055ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055ce:	89ab      	ldrh	r3, [r5, #12]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d907      	bls.n	80055e4 <_fwalk_sglue+0x38>
 80055d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055d8:	3301      	adds	r3, #1
 80055da:	d003      	beq.n	80055e4 <_fwalk_sglue+0x38>
 80055dc:	4629      	mov	r1, r5
 80055de:	4638      	mov	r0, r7
 80055e0:	47c0      	blx	r8
 80055e2:	4306      	orrs	r6, r0
 80055e4:	3568      	adds	r5, #104	@ 0x68
 80055e6:	e7e9      	b.n	80055bc <_fwalk_sglue+0x10>

080055e8 <_puts_r>:
 80055e8:	6a03      	ldr	r3, [r0, #32]
 80055ea:	b570      	push	{r4, r5, r6, lr}
 80055ec:	6884      	ldr	r4, [r0, #8]
 80055ee:	4605      	mov	r5, r0
 80055f0:	460e      	mov	r6, r1
 80055f2:	b90b      	cbnz	r3, 80055f8 <_puts_r+0x10>
 80055f4:	f7ff ffc2 	bl	800557c <__sinit>
 80055f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80055fa:	07db      	lsls	r3, r3, #31
 80055fc:	d405      	bmi.n	800560a <_puts_r+0x22>
 80055fe:	89a3      	ldrh	r3, [r4, #12]
 8005600:	0598      	lsls	r0, r3, #22
 8005602:	d402      	bmi.n	800560a <_puts_r+0x22>
 8005604:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005606:	f000 f99e 	bl	8005946 <__retarget_lock_acquire_recursive>
 800560a:	89a3      	ldrh	r3, [r4, #12]
 800560c:	0719      	lsls	r1, r3, #28
 800560e:	d502      	bpl.n	8005616 <_puts_r+0x2e>
 8005610:	6923      	ldr	r3, [r4, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d135      	bne.n	8005682 <_puts_r+0x9a>
 8005616:	4621      	mov	r1, r4
 8005618:	4628      	mov	r0, r5
 800561a:	f000 f8c5 	bl	80057a8 <__swsetup_r>
 800561e:	b380      	cbz	r0, 8005682 <_puts_r+0x9a>
 8005620:	f04f 35ff 	mov.w	r5, #4294967295
 8005624:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005626:	07da      	lsls	r2, r3, #31
 8005628:	d405      	bmi.n	8005636 <_puts_r+0x4e>
 800562a:	89a3      	ldrh	r3, [r4, #12]
 800562c:	059b      	lsls	r3, r3, #22
 800562e:	d402      	bmi.n	8005636 <_puts_r+0x4e>
 8005630:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005632:	f000 f989 	bl	8005948 <__retarget_lock_release_recursive>
 8005636:	4628      	mov	r0, r5
 8005638:	bd70      	pop	{r4, r5, r6, pc}
 800563a:	2b00      	cmp	r3, #0
 800563c:	da04      	bge.n	8005648 <_puts_r+0x60>
 800563e:	69a2      	ldr	r2, [r4, #24]
 8005640:	429a      	cmp	r2, r3
 8005642:	dc17      	bgt.n	8005674 <_puts_r+0x8c>
 8005644:	290a      	cmp	r1, #10
 8005646:	d015      	beq.n	8005674 <_puts_r+0x8c>
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	1c5a      	adds	r2, r3, #1
 800564c:	6022      	str	r2, [r4, #0]
 800564e:	7019      	strb	r1, [r3, #0]
 8005650:	68a3      	ldr	r3, [r4, #8]
 8005652:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005656:	3b01      	subs	r3, #1
 8005658:	60a3      	str	r3, [r4, #8]
 800565a:	2900      	cmp	r1, #0
 800565c:	d1ed      	bne.n	800563a <_puts_r+0x52>
 800565e:	2b00      	cmp	r3, #0
 8005660:	da11      	bge.n	8005686 <_puts_r+0x9e>
 8005662:	4622      	mov	r2, r4
 8005664:	210a      	movs	r1, #10
 8005666:	4628      	mov	r0, r5
 8005668:	f000 f85f 	bl	800572a <__swbuf_r>
 800566c:	3001      	adds	r0, #1
 800566e:	d0d7      	beq.n	8005620 <_puts_r+0x38>
 8005670:	250a      	movs	r5, #10
 8005672:	e7d7      	b.n	8005624 <_puts_r+0x3c>
 8005674:	4622      	mov	r2, r4
 8005676:	4628      	mov	r0, r5
 8005678:	f000 f857 	bl	800572a <__swbuf_r>
 800567c:	3001      	adds	r0, #1
 800567e:	d1e7      	bne.n	8005650 <_puts_r+0x68>
 8005680:	e7ce      	b.n	8005620 <_puts_r+0x38>
 8005682:	3e01      	subs	r6, #1
 8005684:	e7e4      	b.n	8005650 <_puts_r+0x68>
 8005686:	6823      	ldr	r3, [r4, #0]
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	6022      	str	r2, [r4, #0]
 800568c:	220a      	movs	r2, #10
 800568e:	701a      	strb	r2, [r3, #0]
 8005690:	e7ee      	b.n	8005670 <_puts_r+0x88>
	...

08005694 <puts>:
 8005694:	4b02      	ldr	r3, [pc, #8]	@ (80056a0 <puts+0xc>)
 8005696:	4601      	mov	r1, r0
 8005698:	6818      	ldr	r0, [r3, #0]
 800569a:	f7ff bfa5 	b.w	80055e8 <_puts_r>
 800569e:	bf00      	nop
 80056a0:	2000002c 	.word	0x2000002c

080056a4 <__sread>:
 80056a4:	b510      	push	{r4, lr}
 80056a6:	460c      	mov	r4, r1
 80056a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ac:	f000 f8fc 	bl	80058a8 <_read_r>
 80056b0:	2800      	cmp	r0, #0
 80056b2:	bfab      	itete	ge
 80056b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80056b6:	89a3      	ldrhlt	r3, [r4, #12]
 80056b8:	181b      	addge	r3, r3, r0
 80056ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80056be:	bfac      	ite	ge
 80056c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80056c2:	81a3      	strhlt	r3, [r4, #12]
 80056c4:	bd10      	pop	{r4, pc}

080056c6 <__swrite>:
 80056c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056ca:	461f      	mov	r7, r3
 80056cc:	898b      	ldrh	r3, [r1, #12]
 80056ce:	05db      	lsls	r3, r3, #23
 80056d0:	4605      	mov	r5, r0
 80056d2:	460c      	mov	r4, r1
 80056d4:	4616      	mov	r6, r2
 80056d6:	d505      	bpl.n	80056e4 <__swrite+0x1e>
 80056d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056dc:	2302      	movs	r3, #2
 80056de:	2200      	movs	r2, #0
 80056e0:	f000 f8d0 	bl	8005884 <_lseek_r>
 80056e4:	89a3      	ldrh	r3, [r4, #12]
 80056e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056ee:	81a3      	strh	r3, [r4, #12]
 80056f0:	4632      	mov	r2, r6
 80056f2:	463b      	mov	r3, r7
 80056f4:	4628      	mov	r0, r5
 80056f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056fa:	f000 b8e7 	b.w	80058cc <_write_r>

080056fe <__sseek>:
 80056fe:	b510      	push	{r4, lr}
 8005700:	460c      	mov	r4, r1
 8005702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005706:	f000 f8bd 	bl	8005884 <_lseek_r>
 800570a:	1c43      	adds	r3, r0, #1
 800570c:	89a3      	ldrh	r3, [r4, #12]
 800570e:	bf15      	itete	ne
 8005710:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005712:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005716:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800571a:	81a3      	strheq	r3, [r4, #12]
 800571c:	bf18      	it	ne
 800571e:	81a3      	strhne	r3, [r4, #12]
 8005720:	bd10      	pop	{r4, pc}

08005722 <__sclose>:
 8005722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005726:	f000 b89d 	b.w	8005864 <_close_r>

0800572a <__swbuf_r>:
 800572a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800572c:	460e      	mov	r6, r1
 800572e:	4614      	mov	r4, r2
 8005730:	4605      	mov	r5, r0
 8005732:	b118      	cbz	r0, 800573c <__swbuf_r+0x12>
 8005734:	6a03      	ldr	r3, [r0, #32]
 8005736:	b90b      	cbnz	r3, 800573c <__swbuf_r+0x12>
 8005738:	f7ff ff20 	bl	800557c <__sinit>
 800573c:	69a3      	ldr	r3, [r4, #24]
 800573e:	60a3      	str	r3, [r4, #8]
 8005740:	89a3      	ldrh	r3, [r4, #12]
 8005742:	071a      	lsls	r2, r3, #28
 8005744:	d501      	bpl.n	800574a <__swbuf_r+0x20>
 8005746:	6923      	ldr	r3, [r4, #16]
 8005748:	b943      	cbnz	r3, 800575c <__swbuf_r+0x32>
 800574a:	4621      	mov	r1, r4
 800574c:	4628      	mov	r0, r5
 800574e:	f000 f82b 	bl	80057a8 <__swsetup_r>
 8005752:	b118      	cbz	r0, 800575c <__swbuf_r+0x32>
 8005754:	f04f 37ff 	mov.w	r7, #4294967295
 8005758:	4638      	mov	r0, r7
 800575a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800575c:	6823      	ldr	r3, [r4, #0]
 800575e:	6922      	ldr	r2, [r4, #16]
 8005760:	1a98      	subs	r0, r3, r2
 8005762:	6963      	ldr	r3, [r4, #20]
 8005764:	b2f6      	uxtb	r6, r6
 8005766:	4283      	cmp	r3, r0
 8005768:	4637      	mov	r7, r6
 800576a:	dc05      	bgt.n	8005778 <__swbuf_r+0x4e>
 800576c:	4621      	mov	r1, r4
 800576e:	4628      	mov	r0, r5
 8005770:	f000 fa68 	bl	8005c44 <_fflush_r>
 8005774:	2800      	cmp	r0, #0
 8005776:	d1ed      	bne.n	8005754 <__swbuf_r+0x2a>
 8005778:	68a3      	ldr	r3, [r4, #8]
 800577a:	3b01      	subs	r3, #1
 800577c:	60a3      	str	r3, [r4, #8]
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	6022      	str	r2, [r4, #0]
 8005784:	701e      	strb	r6, [r3, #0]
 8005786:	6962      	ldr	r2, [r4, #20]
 8005788:	1c43      	adds	r3, r0, #1
 800578a:	429a      	cmp	r2, r3
 800578c:	d004      	beq.n	8005798 <__swbuf_r+0x6e>
 800578e:	89a3      	ldrh	r3, [r4, #12]
 8005790:	07db      	lsls	r3, r3, #31
 8005792:	d5e1      	bpl.n	8005758 <__swbuf_r+0x2e>
 8005794:	2e0a      	cmp	r6, #10
 8005796:	d1df      	bne.n	8005758 <__swbuf_r+0x2e>
 8005798:	4621      	mov	r1, r4
 800579a:	4628      	mov	r0, r5
 800579c:	f000 fa52 	bl	8005c44 <_fflush_r>
 80057a0:	2800      	cmp	r0, #0
 80057a2:	d0d9      	beq.n	8005758 <__swbuf_r+0x2e>
 80057a4:	e7d6      	b.n	8005754 <__swbuf_r+0x2a>
	...

080057a8 <__swsetup_r>:
 80057a8:	b538      	push	{r3, r4, r5, lr}
 80057aa:	4b29      	ldr	r3, [pc, #164]	@ (8005850 <__swsetup_r+0xa8>)
 80057ac:	4605      	mov	r5, r0
 80057ae:	6818      	ldr	r0, [r3, #0]
 80057b0:	460c      	mov	r4, r1
 80057b2:	b118      	cbz	r0, 80057bc <__swsetup_r+0x14>
 80057b4:	6a03      	ldr	r3, [r0, #32]
 80057b6:	b90b      	cbnz	r3, 80057bc <__swsetup_r+0x14>
 80057b8:	f7ff fee0 	bl	800557c <__sinit>
 80057bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057c0:	0719      	lsls	r1, r3, #28
 80057c2:	d422      	bmi.n	800580a <__swsetup_r+0x62>
 80057c4:	06da      	lsls	r2, r3, #27
 80057c6:	d407      	bmi.n	80057d8 <__swsetup_r+0x30>
 80057c8:	2209      	movs	r2, #9
 80057ca:	602a      	str	r2, [r5, #0]
 80057cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057d0:	81a3      	strh	r3, [r4, #12]
 80057d2:	f04f 30ff 	mov.w	r0, #4294967295
 80057d6:	e033      	b.n	8005840 <__swsetup_r+0x98>
 80057d8:	0758      	lsls	r0, r3, #29
 80057da:	d512      	bpl.n	8005802 <__swsetup_r+0x5a>
 80057dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057de:	b141      	cbz	r1, 80057f2 <__swsetup_r+0x4a>
 80057e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057e4:	4299      	cmp	r1, r3
 80057e6:	d002      	beq.n	80057ee <__swsetup_r+0x46>
 80057e8:	4628      	mov	r0, r5
 80057ea:	f000 f8af 	bl	800594c <_free_r>
 80057ee:	2300      	movs	r3, #0
 80057f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80057f2:	89a3      	ldrh	r3, [r4, #12]
 80057f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80057f8:	81a3      	strh	r3, [r4, #12]
 80057fa:	2300      	movs	r3, #0
 80057fc:	6063      	str	r3, [r4, #4]
 80057fe:	6923      	ldr	r3, [r4, #16]
 8005800:	6023      	str	r3, [r4, #0]
 8005802:	89a3      	ldrh	r3, [r4, #12]
 8005804:	f043 0308 	orr.w	r3, r3, #8
 8005808:	81a3      	strh	r3, [r4, #12]
 800580a:	6923      	ldr	r3, [r4, #16]
 800580c:	b94b      	cbnz	r3, 8005822 <__swsetup_r+0x7a>
 800580e:	89a3      	ldrh	r3, [r4, #12]
 8005810:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005818:	d003      	beq.n	8005822 <__swsetup_r+0x7a>
 800581a:	4621      	mov	r1, r4
 800581c:	4628      	mov	r0, r5
 800581e:	f000 fa5f 	bl	8005ce0 <__smakebuf_r>
 8005822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005826:	f013 0201 	ands.w	r2, r3, #1
 800582a:	d00a      	beq.n	8005842 <__swsetup_r+0x9a>
 800582c:	2200      	movs	r2, #0
 800582e:	60a2      	str	r2, [r4, #8]
 8005830:	6962      	ldr	r2, [r4, #20]
 8005832:	4252      	negs	r2, r2
 8005834:	61a2      	str	r2, [r4, #24]
 8005836:	6922      	ldr	r2, [r4, #16]
 8005838:	b942      	cbnz	r2, 800584c <__swsetup_r+0xa4>
 800583a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800583e:	d1c5      	bne.n	80057cc <__swsetup_r+0x24>
 8005840:	bd38      	pop	{r3, r4, r5, pc}
 8005842:	0799      	lsls	r1, r3, #30
 8005844:	bf58      	it	pl
 8005846:	6962      	ldrpl	r2, [r4, #20]
 8005848:	60a2      	str	r2, [r4, #8]
 800584a:	e7f4      	b.n	8005836 <__swsetup_r+0x8e>
 800584c:	2000      	movs	r0, #0
 800584e:	e7f7      	b.n	8005840 <__swsetup_r+0x98>
 8005850:	2000002c 	.word	0x2000002c

08005854 <memset>:
 8005854:	4402      	add	r2, r0
 8005856:	4603      	mov	r3, r0
 8005858:	4293      	cmp	r3, r2
 800585a:	d100      	bne.n	800585e <memset+0xa>
 800585c:	4770      	bx	lr
 800585e:	f803 1b01 	strb.w	r1, [r3], #1
 8005862:	e7f9      	b.n	8005858 <memset+0x4>

08005864 <_close_r>:
 8005864:	b538      	push	{r3, r4, r5, lr}
 8005866:	4d06      	ldr	r5, [pc, #24]	@ (8005880 <_close_r+0x1c>)
 8005868:	2300      	movs	r3, #0
 800586a:	4604      	mov	r4, r0
 800586c:	4608      	mov	r0, r1
 800586e:	602b      	str	r3, [r5, #0]
 8005870:	f7fb fbd7 	bl	8001022 <_close>
 8005874:	1c43      	adds	r3, r0, #1
 8005876:	d102      	bne.n	800587e <_close_r+0x1a>
 8005878:	682b      	ldr	r3, [r5, #0]
 800587a:	b103      	cbz	r3, 800587e <_close_r+0x1a>
 800587c:	6023      	str	r3, [r4, #0]
 800587e:	bd38      	pop	{r3, r4, r5, pc}
 8005880:	200006f0 	.word	0x200006f0

08005884 <_lseek_r>:
 8005884:	b538      	push	{r3, r4, r5, lr}
 8005886:	4d07      	ldr	r5, [pc, #28]	@ (80058a4 <_lseek_r+0x20>)
 8005888:	4604      	mov	r4, r0
 800588a:	4608      	mov	r0, r1
 800588c:	4611      	mov	r1, r2
 800588e:	2200      	movs	r2, #0
 8005890:	602a      	str	r2, [r5, #0]
 8005892:	461a      	mov	r2, r3
 8005894:	f7fb fbec 	bl	8001070 <_lseek>
 8005898:	1c43      	adds	r3, r0, #1
 800589a:	d102      	bne.n	80058a2 <_lseek_r+0x1e>
 800589c:	682b      	ldr	r3, [r5, #0]
 800589e:	b103      	cbz	r3, 80058a2 <_lseek_r+0x1e>
 80058a0:	6023      	str	r3, [r4, #0]
 80058a2:	bd38      	pop	{r3, r4, r5, pc}
 80058a4:	200006f0 	.word	0x200006f0

080058a8 <_read_r>:
 80058a8:	b538      	push	{r3, r4, r5, lr}
 80058aa:	4d07      	ldr	r5, [pc, #28]	@ (80058c8 <_read_r+0x20>)
 80058ac:	4604      	mov	r4, r0
 80058ae:	4608      	mov	r0, r1
 80058b0:	4611      	mov	r1, r2
 80058b2:	2200      	movs	r2, #0
 80058b4:	602a      	str	r2, [r5, #0]
 80058b6:	461a      	mov	r2, r3
 80058b8:	f7fb fb96 	bl	8000fe8 <_read>
 80058bc:	1c43      	adds	r3, r0, #1
 80058be:	d102      	bne.n	80058c6 <_read_r+0x1e>
 80058c0:	682b      	ldr	r3, [r5, #0]
 80058c2:	b103      	cbz	r3, 80058c6 <_read_r+0x1e>
 80058c4:	6023      	str	r3, [r4, #0]
 80058c6:	bd38      	pop	{r3, r4, r5, pc}
 80058c8:	200006f0 	.word	0x200006f0

080058cc <_write_r>:
 80058cc:	b538      	push	{r3, r4, r5, lr}
 80058ce:	4d07      	ldr	r5, [pc, #28]	@ (80058ec <_write_r+0x20>)
 80058d0:	4604      	mov	r4, r0
 80058d2:	4608      	mov	r0, r1
 80058d4:	4611      	mov	r1, r2
 80058d6:	2200      	movs	r2, #0
 80058d8:	602a      	str	r2, [r5, #0]
 80058da:	461a      	mov	r2, r3
 80058dc:	f7fa fee8 	bl	80006b0 <_write>
 80058e0:	1c43      	adds	r3, r0, #1
 80058e2:	d102      	bne.n	80058ea <_write_r+0x1e>
 80058e4:	682b      	ldr	r3, [r5, #0]
 80058e6:	b103      	cbz	r3, 80058ea <_write_r+0x1e>
 80058e8:	6023      	str	r3, [r4, #0]
 80058ea:	bd38      	pop	{r3, r4, r5, pc}
 80058ec:	200006f0 	.word	0x200006f0

080058f0 <__errno>:
 80058f0:	4b01      	ldr	r3, [pc, #4]	@ (80058f8 <__errno+0x8>)
 80058f2:	6818      	ldr	r0, [r3, #0]
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	2000002c 	.word	0x2000002c

080058fc <__libc_init_array>:
 80058fc:	b570      	push	{r4, r5, r6, lr}
 80058fe:	4d0d      	ldr	r5, [pc, #52]	@ (8005934 <__libc_init_array+0x38>)
 8005900:	4c0d      	ldr	r4, [pc, #52]	@ (8005938 <__libc_init_array+0x3c>)
 8005902:	1b64      	subs	r4, r4, r5
 8005904:	10a4      	asrs	r4, r4, #2
 8005906:	2600      	movs	r6, #0
 8005908:	42a6      	cmp	r6, r4
 800590a:	d109      	bne.n	8005920 <__libc_init_array+0x24>
 800590c:	4d0b      	ldr	r5, [pc, #44]	@ (800593c <__libc_init_array+0x40>)
 800590e:	4c0c      	ldr	r4, [pc, #48]	@ (8005940 <__libc_init_array+0x44>)
 8005910:	f000 fa54 	bl	8005dbc <_init>
 8005914:	1b64      	subs	r4, r4, r5
 8005916:	10a4      	asrs	r4, r4, #2
 8005918:	2600      	movs	r6, #0
 800591a:	42a6      	cmp	r6, r4
 800591c:	d105      	bne.n	800592a <__libc_init_array+0x2e>
 800591e:	bd70      	pop	{r4, r5, r6, pc}
 8005920:	f855 3b04 	ldr.w	r3, [r5], #4
 8005924:	4798      	blx	r3
 8005926:	3601      	adds	r6, #1
 8005928:	e7ee      	b.n	8005908 <__libc_init_array+0xc>
 800592a:	f855 3b04 	ldr.w	r3, [r5], #4
 800592e:	4798      	blx	r3
 8005930:	3601      	adds	r6, #1
 8005932:	e7f2      	b.n	800591a <__libc_init_array+0x1e>
 8005934:	080064d4 	.word	0x080064d4
 8005938:	080064d4 	.word	0x080064d4
 800593c:	080064d4 	.word	0x080064d4
 8005940:	080064d8 	.word	0x080064d8

08005944 <__retarget_lock_init_recursive>:
 8005944:	4770      	bx	lr

08005946 <__retarget_lock_acquire_recursive>:
 8005946:	4770      	bx	lr

08005948 <__retarget_lock_release_recursive>:
 8005948:	4770      	bx	lr
	...

0800594c <_free_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	4605      	mov	r5, r0
 8005950:	2900      	cmp	r1, #0
 8005952:	d041      	beq.n	80059d8 <_free_r+0x8c>
 8005954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005958:	1f0c      	subs	r4, r1, #4
 800595a:	2b00      	cmp	r3, #0
 800595c:	bfb8      	it	lt
 800595e:	18e4      	addlt	r4, r4, r3
 8005960:	f000 f8e0 	bl	8005b24 <__malloc_lock>
 8005964:	4a1d      	ldr	r2, [pc, #116]	@ (80059dc <_free_r+0x90>)
 8005966:	6813      	ldr	r3, [r2, #0]
 8005968:	b933      	cbnz	r3, 8005978 <_free_r+0x2c>
 800596a:	6063      	str	r3, [r4, #4]
 800596c:	6014      	str	r4, [r2, #0]
 800596e:	4628      	mov	r0, r5
 8005970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005974:	f000 b8dc 	b.w	8005b30 <__malloc_unlock>
 8005978:	42a3      	cmp	r3, r4
 800597a:	d908      	bls.n	800598e <_free_r+0x42>
 800597c:	6820      	ldr	r0, [r4, #0]
 800597e:	1821      	adds	r1, r4, r0
 8005980:	428b      	cmp	r3, r1
 8005982:	bf01      	itttt	eq
 8005984:	6819      	ldreq	r1, [r3, #0]
 8005986:	685b      	ldreq	r3, [r3, #4]
 8005988:	1809      	addeq	r1, r1, r0
 800598a:	6021      	streq	r1, [r4, #0]
 800598c:	e7ed      	b.n	800596a <_free_r+0x1e>
 800598e:	461a      	mov	r2, r3
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	b10b      	cbz	r3, 8005998 <_free_r+0x4c>
 8005994:	42a3      	cmp	r3, r4
 8005996:	d9fa      	bls.n	800598e <_free_r+0x42>
 8005998:	6811      	ldr	r1, [r2, #0]
 800599a:	1850      	adds	r0, r2, r1
 800599c:	42a0      	cmp	r0, r4
 800599e:	d10b      	bne.n	80059b8 <_free_r+0x6c>
 80059a0:	6820      	ldr	r0, [r4, #0]
 80059a2:	4401      	add	r1, r0
 80059a4:	1850      	adds	r0, r2, r1
 80059a6:	4283      	cmp	r3, r0
 80059a8:	6011      	str	r1, [r2, #0]
 80059aa:	d1e0      	bne.n	800596e <_free_r+0x22>
 80059ac:	6818      	ldr	r0, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	6053      	str	r3, [r2, #4]
 80059b2:	4408      	add	r0, r1
 80059b4:	6010      	str	r0, [r2, #0]
 80059b6:	e7da      	b.n	800596e <_free_r+0x22>
 80059b8:	d902      	bls.n	80059c0 <_free_r+0x74>
 80059ba:	230c      	movs	r3, #12
 80059bc:	602b      	str	r3, [r5, #0]
 80059be:	e7d6      	b.n	800596e <_free_r+0x22>
 80059c0:	6820      	ldr	r0, [r4, #0]
 80059c2:	1821      	adds	r1, r4, r0
 80059c4:	428b      	cmp	r3, r1
 80059c6:	bf04      	itt	eq
 80059c8:	6819      	ldreq	r1, [r3, #0]
 80059ca:	685b      	ldreq	r3, [r3, #4]
 80059cc:	6063      	str	r3, [r4, #4]
 80059ce:	bf04      	itt	eq
 80059d0:	1809      	addeq	r1, r1, r0
 80059d2:	6021      	streq	r1, [r4, #0]
 80059d4:	6054      	str	r4, [r2, #4]
 80059d6:	e7ca      	b.n	800596e <_free_r+0x22>
 80059d8:	bd38      	pop	{r3, r4, r5, pc}
 80059da:	bf00      	nop
 80059dc:	200006fc 	.word	0x200006fc

080059e0 <sbrk_aligned>:
 80059e0:	b570      	push	{r4, r5, r6, lr}
 80059e2:	4e0f      	ldr	r6, [pc, #60]	@ (8005a20 <sbrk_aligned+0x40>)
 80059e4:	460c      	mov	r4, r1
 80059e6:	6831      	ldr	r1, [r6, #0]
 80059e8:	4605      	mov	r5, r0
 80059ea:	b911      	cbnz	r1, 80059f2 <sbrk_aligned+0x12>
 80059ec:	f000 f9d6 	bl	8005d9c <_sbrk_r>
 80059f0:	6030      	str	r0, [r6, #0]
 80059f2:	4621      	mov	r1, r4
 80059f4:	4628      	mov	r0, r5
 80059f6:	f000 f9d1 	bl	8005d9c <_sbrk_r>
 80059fa:	1c43      	adds	r3, r0, #1
 80059fc:	d103      	bne.n	8005a06 <sbrk_aligned+0x26>
 80059fe:	f04f 34ff 	mov.w	r4, #4294967295
 8005a02:	4620      	mov	r0, r4
 8005a04:	bd70      	pop	{r4, r5, r6, pc}
 8005a06:	1cc4      	adds	r4, r0, #3
 8005a08:	f024 0403 	bic.w	r4, r4, #3
 8005a0c:	42a0      	cmp	r0, r4
 8005a0e:	d0f8      	beq.n	8005a02 <sbrk_aligned+0x22>
 8005a10:	1a21      	subs	r1, r4, r0
 8005a12:	4628      	mov	r0, r5
 8005a14:	f000 f9c2 	bl	8005d9c <_sbrk_r>
 8005a18:	3001      	adds	r0, #1
 8005a1a:	d1f2      	bne.n	8005a02 <sbrk_aligned+0x22>
 8005a1c:	e7ef      	b.n	80059fe <sbrk_aligned+0x1e>
 8005a1e:	bf00      	nop
 8005a20:	200006f8 	.word	0x200006f8

08005a24 <_malloc_r>:
 8005a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a28:	1ccd      	adds	r5, r1, #3
 8005a2a:	f025 0503 	bic.w	r5, r5, #3
 8005a2e:	3508      	adds	r5, #8
 8005a30:	2d0c      	cmp	r5, #12
 8005a32:	bf38      	it	cc
 8005a34:	250c      	movcc	r5, #12
 8005a36:	2d00      	cmp	r5, #0
 8005a38:	4606      	mov	r6, r0
 8005a3a:	db01      	blt.n	8005a40 <_malloc_r+0x1c>
 8005a3c:	42a9      	cmp	r1, r5
 8005a3e:	d904      	bls.n	8005a4a <_malloc_r+0x26>
 8005a40:	230c      	movs	r3, #12
 8005a42:	6033      	str	r3, [r6, #0]
 8005a44:	2000      	movs	r0, #0
 8005a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b20 <_malloc_r+0xfc>
 8005a4e:	f000 f869 	bl	8005b24 <__malloc_lock>
 8005a52:	f8d8 3000 	ldr.w	r3, [r8]
 8005a56:	461c      	mov	r4, r3
 8005a58:	bb44      	cbnz	r4, 8005aac <_malloc_r+0x88>
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	4630      	mov	r0, r6
 8005a5e:	f7ff ffbf 	bl	80059e0 <sbrk_aligned>
 8005a62:	1c43      	adds	r3, r0, #1
 8005a64:	4604      	mov	r4, r0
 8005a66:	d158      	bne.n	8005b1a <_malloc_r+0xf6>
 8005a68:	f8d8 4000 	ldr.w	r4, [r8]
 8005a6c:	4627      	mov	r7, r4
 8005a6e:	2f00      	cmp	r7, #0
 8005a70:	d143      	bne.n	8005afa <_malloc_r+0xd6>
 8005a72:	2c00      	cmp	r4, #0
 8005a74:	d04b      	beq.n	8005b0e <_malloc_r+0xea>
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	4639      	mov	r1, r7
 8005a7a:	4630      	mov	r0, r6
 8005a7c:	eb04 0903 	add.w	r9, r4, r3
 8005a80:	f000 f98c 	bl	8005d9c <_sbrk_r>
 8005a84:	4581      	cmp	r9, r0
 8005a86:	d142      	bne.n	8005b0e <_malloc_r+0xea>
 8005a88:	6821      	ldr	r1, [r4, #0]
 8005a8a:	1a6d      	subs	r5, r5, r1
 8005a8c:	4629      	mov	r1, r5
 8005a8e:	4630      	mov	r0, r6
 8005a90:	f7ff ffa6 	bl	80059e0 <sbrk_aligned>
 8005a94:	3001      	adds	r0, #1
 8005a96:	d03a      	beq.n	8005b0e <_malloc_r+0xea>
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	442b      	add	r3, r5
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	f8d8 3000 	ldr.w	r3, [r8]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	bb62      	cbnz	r2, 8005b00 <_malloc_r+0xdc>
 8005aa6:	f8c8 7000 	str.w	r7, [r8]
 8005aaa:	e00f      	b.n	8005acc <_malloc_r+0xa8>
 8005aac:	6822      	ldr	r2, [r4, #0]
 8005aae:	1b52      	subs	r2, r2, r5
 8005ab0:	d420      	bmi.n	8005af4 <_malloc_r+0xd0>
 8005ab2:	2a0b      	cmp	r2, #11
 8005ab4:	d917      	bls.n	8005ae6 <_malloc_r+0xc2>
 8005ab6:	1961      	adds	r1, r4, r5
 8005ab8:	42a3      	cmp	r3, r4
 8005aba:	6025      	str	r5, [r4, #0]
 8005abc:	bf18      	it	ne
 8005abe:	6059      	strne	r1, [r3, #4]
 8005ac0:	6863      	ldr	r3, [r4, #4]
 8005ac2:	bf08      	it	eq
 8005ac4:	f8c8 1000 	streq.w	r1, [r8]
 8005ac8:	5162      	str	r2, [r4, r5]
 8005aca:	604b      	str	r3, [r1, #4]
 8005acc:	4630      	mov	r0, r6
 8005ace:	f000 f82f 	bl	8005b30 <__malloc_unlock>
 8005ad2:	f104 000b 	add.w	r0, r4, #11
 8005ad6:	1d23      	adds	r3, r4, #4
 8005ad8:	f020 0007 	bic.w	r0, r0, #7
 8005adc:	1ac2      	subs	r2, r0, r3
 8005ade:	bf1c      	itt	ne
 8005ae0:	1a1b      	subne	r3, r3, r0
 8005ae2:	50a3      	strne	r3, [r4, r2]
 8005ae4:	e7af      	b.n	8005a46 <_malloc_r+0x22>
 8005ae6:	6862      	ldr	r2, [r4, #4]
 8005ae8:	42a3      	cmp	r3, r4
 8005aea:	bf0c      	ite	eq
 8005aec:	f8c8 2000 	streq.w	r2, [r8]
 8005af0:	605a      	strne	r2, [r3, #4]
 8005af2:	e7eb      	b.n	8005acc <_malloc_r+0xa8>
 8005af4:	4623      	mov	r3, r4
 8005af6:	6864      	ldr	r4, [r4, #4]
 8005af8:	e7ae      	b.n	8005a58 <_malloc_r+0x34>
 8005afa:	463c      	mov	r4, r7
 8005afc:	687f      	ldr	r7, [r7, #4]
 8005afe:	e7b6      	b.n	8005a6e <_malloc_r+0x4a>
 8005b00:	461a      	mov	r2, r3
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	42a3      	cmp	r3, r4
 8005b06:	d1fb      	bne.n	8005b00 <_malloc_r+0xdc>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	6053      	str	r3, [r2, #4]
 8005b0c:	e7de      	b.n	8005acc <_malloc_r+0xa8>
 8005b0e:	230c      	movs	r3, #12
 8005b10:	6033      	str	r3, [r6, #0]
 8005b12:	4630      	mov	r0, r6
 8005b14:	f000 f80c 	bl	8005b30 <__malloc_unlock>
 8005b18:	e794      	b.n	8005a44 <_malloc_r+0x20>
 8005b1a:	6005      	str	r5, [r0, #0]
 8005b1c:	e7d6      	b.n	8005acc <_malloc_r+0xa8>
 8005b1e:	bf00      	nop
 8005b20:	200006fc 	.word	0x200006fc

08005b24 <__malloc_lock>:
 8005b24:	4801      	ldr	r0, [pc, #4]	@ (8005b2c <__malloc_lock+0x8>)
 8005b26:	f7ff bf0e 	b.w	8005946 <__retarget_lock_acquire_recursive>
 8005b2a:	bf00      	nop
 8005b2c:	200006f4 	.word	0x200006f4

08005b30 <__malloc_unlock>:
 8005b30:	4801      	ldr	r0, [pc, #4]	@ (8005b38 <__malloc_unlock+0x8>)
 8005b32:	f7ff bf09 	b.w	8005948 <__retarget_lock_release_recursive>
 8005b36:	bf00      	nop
 8005b38:	200006f4 	.word	0x200006f4

08005b3c <__sflush_r>:
 8005b3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b44:	0716      	lsls	r6, r2, #28
 8005b46:	4605      	mov	r5, r0
 8005b48:	460c      	mov	r4, r1
 8005b4a:	d454      	bmi.n	8005bf6 <__sflush_r+0xba>
 8005b4c:	684b      	ldr	r3, [r1, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	dc02      	bgt.n	8005b58 <__sflush_r+0x1c>
 8005b52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	dd48      	ble.n	8005bea <__sflush_r+0xae>
 8005b58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b5a:	2e00      	cmp	r6, #0
 8005b5c:	d045      	beq.n	8005bea <__sflush_r+0xae>
 8005b5e:	2300      	movs	r3, #0
 8005b60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005b64:	682f      	ldr	r7, [r5, #0]
 8005b66:	6a21      	ldr	r1, [r4, #32]
 8005b68:	602b      	str	r3, [r5, #0]
 8005b6a:	d030      	beq.n	8005bce <__sflush_r+0x92>
 8005b6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005b6e:	89a3      	ldrh	r3, [r4, #12]
 8005b70:	0759      	lsls	r1, r3, #29
 8005b72:	d505      	bpl.n	8005b80 <__sflush_r+0x44>
 8005b74:	6863      	ldr	r3, [r4, #4]
 8005b76:	1ad2      	subs	r2, r2, r3
 8005b78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005b7a:	b10b      	cbz	r3, 8005b80 <__sflush_r+0x44>
 8005b7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005b7e:	1ad2      	subs	r2, r2, r3
 8005b80:	2300      	movs	r3, #0
 8005b82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b84:	6a21      	ldr	r1, [r4, #32]
 8005b86:	4628      	mov	r0, r5
 8005b88:	47b0      	blx	r6
 8005b8a:	1c43      	adds	r3, r0, #1
 8005b8c:	89a3      	ldrh	r3, [r4, #12]
 8005b8e:	d106      	bne.n	8005b9e <__sflush_r+0x62>
 8005b90:	6829      	ldr	r1, [r5, #0]
 8005b92:	291d      	cmp	r1, #29
 8005b94:	d82b      	bhi.n	8005bee <__sflush_r+0xb2>
 8005b96:	4a2a      	ldr	r2, [pc, #168]	@ (8005c40 <__sflush_r+0x104>)
 8005b98:	410a      	asrs	r2, r1
 8005b9a:	07d6      	lsls	r6, r2, #31
 8005b9c:	d427      	bmi.n	8005bee <__sflush_r+0xb2>
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	6062      	str	r2, [r4, #4]
 8005ba2:	04d9      	lsls	r1, r3, #19
 8005ba4:	6922      	ldr	r2, [r4, #16]
 8005ba6:	6022      	str	r2, [r4, #0]
 8005ba8:	d504      	bpl.n	8005bb4 <__sflush_r+0x78>
 8005baa:	1c42      	adds	r2, r0, #1
 8005bac:	d101      	bne.n	8005bb2 <__sflush_r+0x76>
 8005bae:	682b      	ldr	r3, [r5, #0]
 8005bb0:	b903      	cbnz	r3, 8005bb4 <__sflush_r+0x78>
 8005bb2:	6560      	str	r0, [r4, #84]	@ 0x54
 8005bb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005bb6:	602f      	str	r7, [r5, #0]
 8005bb8:	b1b9      	cbz	r1, 8005bea <__sflush_r+0xae>
 8005bba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005bbe:	4299      	cmp	r1, r3
 8005bc0:	d002      	beq.n	8005bc8 <__sflush_r+0x8c>
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	f7ff fec2 	bl	800594c <_free_r>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	6363      	str	r3, [r4, #52]	@ 0x34
 8005bcc:	e00d      	b.n	8005bea <__sflush_r+0xae>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	47b0      	blx	r6
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	1c50      	adds	r0, r2, #1
 8005bd8:	d1c9      	bne.n	8005b6e <__sflush_r+0x32>
 8005bda:	682b      	ldr	r3, [r5, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d0c6      	beq.n	8005b6e <__sflush_r+0x32>
 8005be0:	2b1d      	cmp	r3, #29
 8005be2:	d001      	beq.n	8005be8 <__sflush_r+0xac>
 8005be4:	2b16      	cmp	r3, #22
 8005be6:	d11e      	bne.n	8005c26 <__sflush_r+0xea>
 8005be8:	602f      	str	r7, [r5, #0]
 8005bea:	2000      	movs	r0, #0
 8005bec:	e022      	b.n	8005c34 <__sflush_r+0xf8>
 8005bee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bf2:	b21b      	sxth	r3, r3
 8005bf4:	e01b      	b.n	8005c2e <__sflush_r+0xf2>
 8005bf6:	690f      	ldr	r7, [r1, #16]
 8005bf8:	2f00      	cmp	r7, #0
 8005bfa:	d0f6      	beq.n	8005bea <__sflush_r+0xae>
 8005bfc:	0793      	lsls	r3, r2, #30
 8005bfe:	680e      	ldr	r6, [r1, #0]
 8005c00:	bf08      	it	eq
 8005c02:	694b      	ldreq	r3, [r1, #20]
 8005c04:	600f      	str	r7, [r1, #0]
 8005c06:	bf18      	it	ne
 8005c08:	2300      	movne	r3, #0
 8005c0a:	eba6 0807 	sub.w	r8, r6, r7
 8005c0e:	608b      	str	r3, [r1, #8]
 8005c10:	f1b8 0f00 	cmp.w	r8, #0
 8005c14:	dde9      	ble.n	8005bea <__sflush_r+0xae>
 8005c16:	6a21      	ldr	r1, [r4, #32]
 8005c18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005c1a:	4643      	mov	r3, r8
 8005c1c:	463a      	mov	r2, r7
 8005c1e:	4628      	mov	r0, r5
 8005c20:	47b0      	blx	r6
 8005c22:	2800      	cmp	r0, #0
 8005c24:	dc08      	bgt.n	8005c38 <__sflush_r+0xfc>
 8005c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c2e:	81a3      	strh	r3, [r4, #12]
 8005c30:	f04f 30ff 	mov.w	r0, #4294967295
 8005c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c38:	4407      	add	r7, r0
 8005c3a:	eba8 0800 	sub.w	r8, r8, r0
 8005c3e:	e7e7      	b.n	8005c10 <__sflush_r+0xd4>
 8005c40:	dfbffffe 	.word	0xdfbffffe

08005c44 <_fflush_r>:
 8005c44:	b538      	push	{r3, r4, r5, lr}
 8005c46:	690b      	ldr	r3, [r1, #16]
 8005c48:	4605      	mov	r5, r0
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	b913      	cbnz	r3, 8005c54 <_fflush_r+0x10>
 8005c4e:	2500      	movs	r5, #0
 8005c50:	4628      	mov	r0, r5
 8005c52:	bd38      	pop	{r3, r4, r5, pc}
 8005c54:	b118      	cbz	r0, 8005c5e <_fflush_r+0x1a>
 8005c56:	6a03      	ldr	r3, [r0, #32]
 8005c58:	b90b      	cbnz	r3, 8005c5e <_fflush_r+0x1a>
 8005c5a:	f7ff fc8f 	bl	800557c <__sinit>
 8005c5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d0f3      	beq.n	8005c4e <_fflush_r+0xa>
 8005c66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005c68:	07d0      	lsls	r0, r2, #31
 8005c6a:	d404      	bmi.n	8005c76 <_fflush_r+0x32>
 8005c6c:	0599      	lsls	r1, r3, #22
 8005c6e:	d402      	bmi.n	8005c76 <_fflush_r+0x32>
 8005c70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c72:	f7ff fe68 	bl	8005946 <__retarget_lock_acquire_recursive>
 8005c76:	4628      	mov	r0, r5
 8005c78:	4621      	mov	r1, r4
 8005c7a:	f7ff ff5f 	bl	8005b3c <__sflush_r>
 8005c7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c80:	07da      	lsls	r2, r3, #31
 8005c82:	4605      	mov	r5, r0
 8005c84:	d4e4      	bmi.n	8005c50 <_fflush_r+0xc>
 8005c86:	89a3      	ldrh	r3, [r4, #12]
 8005c88:	059b      	lsls	r3, r3, #22
 8005c8a:	d4e1      	bmi.n	8005c50 <_fflush_r+0xc>
 8005c8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c8e:	f7ff fe5b 	bl	8005948 <__retarget_lock_release_recursive>
 8005c92:	e7dd      	b.n	8005c50 <_fflush_r+0xc>

08005c94 <__swhatbuf_r>:
 8005c94:	b570      	push	{r4, r5, r6, lr}
 8005c96:	460c      	mov	r4, r1
 8005c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c9c:	2900      	cmp	r1, #0
 8005c9e:	b096      	sub	sp, #88	@ 0x58
 8005ca0:	4615      	mov	r5, r2
 8005ca2:	461e      	mov	r6, r3
 8005ca4:	da0d      	bge.n	8005cc2 <__swhatbuf_r+0x2e>
 8005ca6:	89a3      	ldrh	r3, [r4, #12]
 8005ca8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005cac:	f04f 0100 	mov.w	r1, #0
 8005cb0:	bf14      	ite	ne
 8005cb2:	2340      	movne	r3, #64	@ 0x40
 8005cb4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005cb8:	2000      	movs	r0, #0
 8005cba:	6031      	str	r1, [r6, #0]
 8005cbc:	602b      	str	r3, [r5, #0]
 8005cbe:	b016      	add	sp, #88	@ 0x58
 8005cc0:	bd70      	pop	{r4, r5, r6, pc}
 8005cc2:	466a      	mov	r2, sp
 8005cc4:	f000 f848 	bl	8005d58 <_fstat_r>
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	dbec      	blt.n	8005ca6 <__swhatbuf_r+0x12>
 8005ccc:	9901      	ldr	r1, [sp, #4]
 8005cce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005cd2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005cd6:	4259      	negs	r1, r3
 8005cd8:	4159      	adcs	r1, r3
 8005cda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cde:	e7eb      	b.n	8005cb8 <__swhatbuf_r+0x24>

08005ce0 <__smakebuf_r>:
 8005ce0:	898b      	ldrh	r3, [r1, #12]
 8005ce2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ce4:	079d      	lsls	r5, r3, #30
 8005ce6:	4606      	mov	r6, r0
 8005ce8:	460c      	mov	r4, r1
 8005cea:	d507      	bpl.n	8005cfc <__smakebuf_r+0x1c>
 8005cec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005cf0:	6023      	str	r3, [r4, #0]
 8005cf2:	6123      	str	r3, [r4, #16]
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	6163      	str	r3, [r4, #20]
 8005cf8:	b003      	add	sp, #12
 8005cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cfc:	ab01      	add	r3, sp, #4
 8005cfe:	466a      	mov	r2, sp
 8005d00:	f7ff ffc8 	bl	8005c94 <__swhatbuf_r>
 8005d04:	9f00      	ldr	r7, [sp, #0]
 8005d06:	4605      	mov	r5, r0
 8005d08:	4639      	mov	r1, r7
 8005d0a:	4630      	mov	r0, r6
 8005d0c:	f7ff fe8a 	bl	8005a24 <_malloc_r>
 8005d10:	b948      	cbnz	r0, 8005d26 <__smakebuf_r+0x46>
 8005d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d16:	059a      	lsls	r2, r3, #22
 8005d18:	d4ee      	bmi.n	8005cf8 <__smakebuf_r+0x18>
 8005d1a:	f023 0303 	bic.w	r3, r3, #3
 8005d1e:	f043 0302 	orr.w	r3, r3, #2
 8005d22:	81a3      	strh	r3, [r4, #12]
 8005d24:	e7e2      	b.n	8005cec <__smakebuf_r+0xc>
 8005d26:	89a3      	ldrh	r3, [r4, #12]
 8005d28:	6020      	str	r0, [r4, #0]
 8005d2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d2e:	81a3      	strh	r3, [r4, #12]
 8005d30:	9b01      	ldr	r3, [sp, #4]
 8005d32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005d36:	b15b      	cbz	r3, 8005d50 <__smakebuf_r+0x70>
 8005d38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d3c:	4630      	mov	r0, r6
 8005d3e:	f000 f81d 	bl	8005d7c <_isatty_r>
 8005d42:	b128      	cbz	r0, 8005d50 <__smakebuf_r+0x70>
 8005d44:	89a3      	ldrh	r3, [r4, #12]
 8005d46:	f023 0303 	bic.w	r3, r3, #3
 8005d4a:	f043 0301 	orr.w	r3, r3, #1
 8005d4e:	81a3      	strh	r3, [r4, #12]
 8005d50:	89a3      	ldrh	r3, [r4, #12]
 8005d52:	431d      	orrs	r5, r3
 8005d54:	81a5      	strh	r5, [r4, #12]
 8005d56:	e7cf      	b.n	8005cf8 <__smakebuf_r+0x18>

08005d58 <_fstat_r>:
 8005d58:	b538      	push	{r3, r4, r5, lr}
 8005d5a:	4d07      	ldr	r5, [pc, #28]	@ (8005d78 <_fstat_r+0x20>)
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	4604      	mov	r4, r0
 8005d60:	4608      	mov	r0, r1
 8005d62:	4611      	mov	r1, r2
 8005d64:	602b      	str	r3, [r5, #0]
 8005d66:	f7fb f968 	bl	800103a <_fstat>
 8005d6a:	1c43      	adds	r3, r0, #1
 8005d6c:	d102      	bne.n	8005d74 <_fstat_r+0x1c>
 8005d6e:	682b      	ldr	r3, [r5, #0]
 8005d70:	b103      	cbz	r3, 8005d74 <_fstat_r+0x1c>
 8005d72:	6023      	str	r3, [r4, #0]
 8005d74:	bd38      	pop	{r3, r4, r5, pc}
 8005d76:	bf00      	nop
 8005d78:	200006f0 	.word	0x200006f0

08005d7c <_isatty_r>:
 8005d7c:	b538      	push	{r3, r4, r5, lr}
 8005d7e:	4d06      	ldr	r5, [pc, #24]	@ (8005d98 <_isatty_r+0x1c>)
 8005d80:	2300      	movs	r3, #0
 8005d82:	4604      	mov	r4, r0
 8005d84:	4608      	mov	r0, r1
 8005d86:	602b      	str	r3, [r5, #0]
 8005d88:	f7fb f967 	bl	800105a <_isatty>
 8005d8c:	1c43      	adds	r3, r0, #1
 8005d8e:	d102      	bne.n	8005d96 <_isatty_r+0x1a>
 8005d90:	682b      	ldr	r3, [r5, #0]
 8005d92:	b103      	cbz	r3, 8005d96 <_isatty_r+0x1a>
 8005d94:	6023      	str	r3, [r4, #0]
 8005d96:	bd38      	pop	{r3, r4, r5, pc}
 8005d98:	200006f0 	.word	0x200006f0

08005d9c <_sbrk_r>:
 8005d9c:	b538      	push	{r3, r4, r5, lr}
 8005d9e:	4d06      	ldr	r5, [pc, #24]	@ (8005db8 <_sbrk_r+0x1c>)
 8005da0:	2300      	movs	r3, #0
 8005da2:	4604      	mov	r4, r0
 8005da4:	4608      	mov	r0, r1
 8005da6:	602b      	str	r3, [r5, #0]
 8005da8:	f7fb f970 	bl	800108c <_sbrk>
 8005dac:	1c43      	adds	r3, r0, #1
 8005dae:	d102      	bne.n	8005db6 <_sbrk_r+0x1a>
 8005db0:	682b      	ldr	r3, [r5, #0]
 8005db2:	b103      	cbz	r3, 8005db6 <_sbrk_r+0x1a>
 8005db4:	6023      	str	r3, [r4, #0]
 8005db6:	bd38      	pop	{r3, r4, r5, pc}
 8005db8:	200006f0 	.word	0x200006f0

08005dbc <_init>:
 8005dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dbe:	bf00      	nop
 8005dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dc2:	bc08      	pop	{r3}
 8005dc4:	469e      	mov	lr, r3
 8005dc6:	4770      	bx	lr

08005dc8 <_fini>:
 8005dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dca:	bf00      	nop
 8005dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dce:	bc08      	pop	{r3}
 8005dd0:	469e      	mov	lr, r3
 8005dd2:	4770      	bx	lr
