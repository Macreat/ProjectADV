
ProjectR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c7c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  08005e04  08005e04  00006e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800652c  0800652c  0000807c  2**0
                  CONTENTS
  4 .ARM          00000008  0800652c  0800652c  0000752c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006534  08006534  0000807c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006534  08006534  00007534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006538  08006538  00007538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800653c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000684  2000007c  080065b8  0000807c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000700  080065b8  00008700  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e18  00000000  00000000  000080ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002899  00000000  00000000  00018ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  0001b760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b42  00000000  00000000  0001c610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000296b3  00000000  00000000  0001d152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013985  00000000  00000000  00046805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffb9e  00000000  00000000  0005a18a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00159d28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041f0  00000000  00000000  00159d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0015df5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005dec 	.word	0x08005dec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08005dec 	.word	0x08005dec

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <keypad_debounce>:

#include "main.h"


static uint8_t keypad_debounce(uint16_t GPIO_Pin)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	80fb      	strh	r3, [r7, #6]
	static uint16_t last_pressed = 0xFFFF;
	static uint32_t last_tick = 0;

	if (last_pressed == GPIO_Pin) {
 80004c2:	4b0e      	ldr	r3, [pc, #56]	@ (80004fc <keypad_debounce+0x44>)
 80004c4:	881b      	ldrh	r3, [r3, #0]
 80004c6:	88fa      	ldrh	r2, [r7, #6]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	d109      	bne.n	80004e0 <keypad_debounce+0x28>
		if (HAL_GetTick() < (last_tick + 200)) {
 80004cc:	f000 fed0 	bl	8001270 <HAL_GetTick>
 80004d0:	4602      	mov	r2, r0
 80004d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000500 <keypad_debounce+0x48>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	33c8      	adds	r3, #200	@ 0xc8
 80004d8:	429a      	cmp	r2, r3
 80004da:	d201      	bcs.n	80004e0 <keypad_debounce+0x28>
			return 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	e008      	b.n	80004f2 <keypad_debounce+0x3a>
		}
	}
	last_pressed = GPIO_Pin;
 80004e0:	4a06      	ldr	r2, [pc, #24]	@ (80004fc <keypad_debounce+0x44>)
 80004e2:	88fb      	ldrh	r3, [r7, #6]
 80004e4:	8013      	strh	r3, [r2, #0]
	last_tick = HAL_GetTick();
 80004e6:	f000 fec3 	bl	8001270 <HAL_GetTick>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4a04      	ldr	r2, [pc, #16]	@ (8000500 <keypad_debounce+0x48>)
 80004ee:	6013      	str	r3, [r2, #0]

	return 1;
 80004f0:	2301      	movs	r3, #1
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000010 	.word	0x20000010
 8000500:	20000098 	.word	0x20000098

08000504 <keypad_scan_row>:

uint8_t keypad_scan_row(GPIO_TypeDef *COLUMNx_GPIO_Port, uint16_t COLUMNx_Pin)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	460b      	mov	r3, r1
 800050e:	807b      	strh	r3, [r7, #2]
	uint8_t row_pressed = 0xFF;
 8000510:	23ff      	movs	r3, #255	@ 0xff
 8000512:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800051a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800051e:	f001 f9f9 	bl	8001914 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLUMNx_GPIO_Port, COLUMNx_Pin) == 0) {
 8000522:	887b      	ldrh	r3, [r7, #2]
 8000524:	4619      	mov	r1, r3
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f001 f9dc 	bl	80018e4 <HAL_GPIO_ReadPin>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d102      	bne.n	8000538 <keypad_scan_row+0x34>
		row_pressed =  1;
 8000532:	2301      	movs	r3, #1
 8000534:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 8000536:	e030      	b.n	800059a <keypad_scan_row+0x96>
	}
	HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	2108      	movs	r1, #8
 800053c:	4824      	ldr	r0, [pc, #144]	@ (80005d0 <keypad_scan_row+0xcc>)
 800053e:	f001 f9e9 	bl	8001914 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLUMNx_GPIO_Port, COLUMNx_Pin) == 0) {
 8000542:	887b      	ldrh	r3, [r7, #2]
 8000544:	4619      	mov	r1, r3
 8000546:	6878      	ldr	r0, [r7, #4]
 8000548:	f001 f9cc 	bl	80018e4 <HAL_GPIO_ReadPin>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d102      	bne.n	8000558 <keypad_scan_row+0x54>
		row_pressed =  2;
 8000552:	2302      	movs	r3, #2
 8000554:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 8000556:	e020      	b.n	800059a <keypad_scan_row+0x96>
	}
	HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	2120      	movs	r1, #32
 800055c:	481c      	ldr	r0, [pc, #112]	@ (80005d0 <keypad_scan_row+0xcc>)
 800055e:	f001 f9d9 	bl	8001914 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLUMNx_GPIO_Port, COLUMNx_Pin) == 0) {
 8000562:	887b      	ldrh	r3, [r7, #2]
 8000564:	4619      	mov	r1, r3
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f001 f9bc 	bl	80018e4 <HAL_GPIO_ReadPin>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d102      	bne.n	8000578 <keypad_scan_row+0x74>
		row_pressed =  3;
 8000572:	2303      	movs	r3, #3
 8000574:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 8000576:	e010      	b.n	800059a <keypad_scan_row+0x96>
	}
	HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2110      	movs	r1, #16
 800057c:	4814      	ldr	r0, [pc, #80]	@ (80005d0 <keypad_scan_row+0xcc>)
 800057e:	f001 f9c9 	bl	8001914 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLUMNx_GPIO_Port, COLUMNx_Pin) == 0) {
 8000582:	887b      	ldrh	r3, [r7, #2]
 8000584:	4619      	mov	r1, r3
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f001 f9ac 	bl	80018e4 <HAL_GPIO_ReadPin>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d102      	bne.n	8000598 <keypad_scan_row+0x94>
		row_pressed =  4;
 8000592:	2304      	movs	r3, #4
 8000594:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 8000596:	e000      	b.n	800059a <keypad_scan_row+0x96>
	}
row_scan_end:
 8000598:	bf00      	nop
	HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, GPIO_PIN_SET);
 800059a:	2201      	movs	r2, #1
 800059c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005a4:	f001 f9b6 	bl	8001914 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, GPIO_PIN_SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2108      	movs	r1, #8
 80005ac:	4808      	ldr	r0, [pc, #32]	@ (80005d0 <keypad_scan_row+0xcc>)
 80005ae:	f001 f9b1 	bl	8001914 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, GPIO_PIN_SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	2120      	movs	r1, #32
 80005b6:	4806      	ldr	r0, [pc, #24]	@ (80005d0 <keypad_scan_row+0xcc>)
 80005b8:	f001 f9ac 	bl	8001914 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2110      	movs	r1, #16
 80005c0:	4803      	ldr	r0, [pc, #12]	@ (80005d0 <keypad_scan_row+0xcc>)
 80005c2:	f001 f9a7 	bl	8001914 <HAL_GPIO_WritePin>
	return row_pressed; // not detected
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	48000400 	.word	0x48000400

080005d4 <keypad_scan>:
		{'7', '8', '9', 'C'},
		{'*', '0', '#', 'D'},
};

uint8_t keypad_scan(uint16_t GPIO_Pin)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	80fb      	strh	r3, [r7, #6]
	uint8_t key_pressed = 0xFF;
 80005de:	23ff      	movs	r3, #255	@ 0xff
 80005e0:	73fb      	strb	r3, [r7, #15]

	if (keypad_debounce(GPIO_Pin) == 0) {
 80005e2:	88fb      	ldrh	r3, [r7, #6]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ff67 	bl	80004b8 <keypad_debounce>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d101      	bne.n	80005f4 <keypad_scan+0x20>
		return key_pressed;
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	e052      	b.n	800069a <keypad_scan+0xc6>
	}
	uint8_t row = 0xFF;
 80005f4:	23ff      	movs	r3, #255	@ 0xff
 80005f6:	73bb      	strb	r3, [r7, #14]
	switch (GPIO_Pin) {
 80005f8:	88fb      	ldrh	r3, [r7, #6]
 80005fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80005fe:	d00e      	beq.n	800061e <keypad_scan+0x4a>
 8000600:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000604:	dc47      	bgt.n	8000696 <keypad_scan+0xc2>
 8000606:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800060a:	d026      	beq.n	800065a <keypad_scan+0x86>
 800060c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000610:	dc41      	bgt.n	8000696 <keypad_scan+0xc2>
 8000612:	2b80      	cmp	r3, #128	@ 0x80
 8000614:	d031      	beq.n	800067a <keypad_scan+0xa6>
 8000616:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800061a:	d00e      	beq.n	800063a <keypad_scan+0x66>
	case COL_4_Pin:
			row = keypad_scan_row(COL_4_GPIO_Port, COL_4_Pin);
			key_pressed = keypad_chars[row - 1][4 - 1];
			break;
	default:
		break;
 800061c:	e03b      	b.n	8000696 <keypad_scan+0xc2>
		row = keypad_scan_row(COL_1_GPIO_Port, COL_1_Pin);
 800061e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000622:	4820      	ldr	r0, [pc, #128]	@ (80006a4 <keypad_scan+0xd0>)
 8000624:	f7ff ff6e 	bl	8000504 <keypad_scan_row>
 8000628:	4603      	mov	r3, r0
 800062a:	73bb      	strb	r3, [r7, #14]
		key_pressed = keypad_chars[row - 1][1 - 1];
 800062c:	7bbb      	ldrb	r3, [r7, #14]
 800062e:	3b01      	subs	r3, #1
 8000630:	4a1d      	ldr	r2, [pc, #116]	@ (80006a8 <keypad_scan+0xd4>)
 8000632:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000636:	73fb      	strb	r3, [r7, #15]
		break;
 8000638:	e02e      	b.n	8000698 <keypad_scan+0xc4>
		row = keypad_scan_row(COL_2_GPIO_Port, COL_2_Pin);
 800063a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800063e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000642:	f7ff ff5f 	bl	8000504 <keypad_scan_row>
 8000646:	4603      	mov	r3, r0
 8000648:	73bb      	strb	r3, [r7, #14]
		key_pressed = keypad_chars[row - 1][2 - 1];
 800064a:	7bbb      	ldrb	r3, [r7, #14]
 800064c:	3b01      	subs	r3, #1
 800064e:	4a16      	ldr	r2, [pc, #88]	@ (80006a8 <keypad_scan+0xd4>)
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	4413      	add	r3, r2
 8000654:	785b      	ldrb	r3, [r3, #1]
 8000656:	73fb      	strb	r3, [r7, #15]
		break;
 8000658:	e01e      	b.n	8000698 <keypad_scan+0xc4>
			row = keypad_scan_row(COL_3_GPIO_Port, COL_3_Pin);
 800065a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800065e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000662:	f7ff ff4f 	bl	8000504 <keypad_scan_row>
 8000666:	4603      	mov	r3, r0
 8000668:	73bb      	strb	r3, [r7, #14]
			key_pressed = keypad_chars[row - 1][3 - 1];
 800066a:	7bbb      	ldrb	r3, [r7, #14]
 800066c:	3b01      	subs	r3, #1
 800066e:	4a0e      	ldr	r2, [pc, #56]	@ (80006a8 <keypad_scan+0xd4>)
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	4413      	add	r3, r2
 8000674:	789b      	ldrb	r3, [r3, #2]
 8000676:	73fb      	strb	r3, [r7, #15]
			break;
 8000678:	e00e      	b.n	8000698 <keypad_scan+0xc4>
			row = keypad_scan_row(COL_4_GPIO_Port, COL_4_Pin);
 800067a:	2180      	movs	r1, #128	@ 0x80
 800067c:	480b      	ldr	r0, [pc, #44]	@ (80006ac <keypad_scan+0xd8>)
 800067e:	f7ff ff41 	bl	8000504 <keypad_scan_row>
 8000682:	4603      	mov	r3, r0
 8000684:	73bb      	strb	r3, [r7, #14]
			key_pressed = keypad_chars[row - 1][4 - 1];
 8000686:	7bbb      	ldrb	r3, [r7, #14]
 8000688:	3b01      	subs	r3, #1
 800068a:	4a07      	ldr	r2, [pc, #28]	@ (80006a8 <keypad_scan+0xd4>)
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	4413      	add	r3, r2
 8000690:	78db      	ldrb	r3, [r3, #3]
 8000692:	73fb      	strb	r3, [r7, #15]
			break;
 8000694:	e000      	b.n	8000698 <keypad_scan+0xc4>
		break;
 8000696:	bf00      	nop
	}
	return key_pressed;
 8000698:	7bfb      	ldrb	r3, [r7, #15]
}
 800069a:	4618      	mov	r0, r3
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	48000400 	.word	0x48000400
 80006a8:	20000000 	.word	0x20000000
 80006ac:	48000800 	.word	0x48000800

080006b0 <_write>:
 * By using this function, any call to `printf` will output the message
 * to the UART interface, which can be monitored with a serial console.
 */

int _write(int file, char *ptr, int len)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
  // to using printf
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	b29a      	uxth	r2, r3
 80006c0:	230a      	movs	r3, #10
 80006c2:	68b9      	ldr	r1, [r7, #8]
 80006c4:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <_write+0x24>)
 80006c6:	f003 ff51 	bl	800456c <HAL_UART_Transmit>
  return len;
 80006ca:	687b      	ldr	r3, [r7, #4]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	200000f0 	.word	0x200000f0

080006d8 <HAL_GPIO_EXTI_Callback>:
 * - The result of the validation (correct or incorrect) is displayed on the OLED and transmitted via UART.
 * - The buffer is reset after validation.
 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af02      	add	r7, sp, #8
 80006de:	4603      	mov	r3, r0
 80006e0:	80fb      	strh	r3, [r7, #6]
	uint8_t key_pressed = keypad_scan(GPIO_Pin);
 80006e2:	88fb      	ldrh	r3, [r7, #6]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ff75 	bl	80005d4 <keypad_scan>
 80006ea:	4603      	mov	r3, r0
 80006ec:	757b      	strb	r3, [r7, #21]

	    if (key_pressed != 0xFF) {
 80006ee:	7d7b      	ldrb	r3, [r7, #21]
 80006f0:	2bff      	cmp	r3, #255	@ 0xff
 80006f2:	f000 80d3 	beq.w	800089c <HAL_GPIO_EXTI_Callback+0x1c4>
	        // when '*' is pressed, the sequence is RESET
	        if (key_pressed == '*') {
 80006f6:	7d7b      	ldrb	r3, [r7, #21]
 80006f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80006fa:	d121      	bne.n	8000740 <HAL_GPIO_EXTI_Callback+0x68>
	            ring_buffer_reset(&keyboard_ring_buffer);
 80006fc:	4869      	ldr	r0, [pc, #420]	@ (80008a4 <HAL_GPIO_EXTI_Callback+0x1cc>)
 80006fe:	f000 fabf 	bl	8000c80 <ring_buffer_reset>
	            memset(display_buffer, 0, sizeof(display_buffer)); //clean actual buffer on the screen
 8000702:	2215      	movs	r2, #21
 8000704:	2100      	movs	r1, #0
 8000706:	4868      	ldr	r0, [pc, #416]	@ (80008a8 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000708:	f005 f8bc 	bl	8005884 <memset>
	            buffer_index = 0; // reset index on buffer
 800070c:	4b67      	ldr	r3, [pc, #412]	@ (80008ac <HAL_GPIO_EXTI_Callback+0x1d4>)
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]

	            ssd1306_Fill(Black);
 8000712:	2000      	movs	r0, #0
 8000714:	f004 fd2a 	bl	800516c <ssd1306_Fill>
	            ssd1306_SetCursor(10, 20);
 8000718:	2114      	movs	r1, #20
 800071a:	200a      	movs	r0, #10
 800071c:	f004 fe70 	bl	8005400 <ssd1306_SetCursor>
	            ssd1306_WriteString("sequence restarted", Font_6x8, White);
 8000720:	4b63      	ldr	r3, [pc, #396]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000722:	2201      	movs	r2, #1
 8000724:	9200      	str	r2, [sp, #0]
 8000726:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000728:	4862      	ldr	r0, [pc, #392]	@ (80008b4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 800072a:	f004 fe43 	bl	80053b4 <ssd1306_WriteString>
	            ssd1306_UpdateScreen();
 800072e:	f004 fd35 	bl	800519c <ssd1306_UpdateScreen>
	            HAL_UART_Transmit(&huart2, (uint8_t*)"Sequence restarted\n\r", 22, 10);
 8000732:	230a      	movs	r3, #10
 8000734:	2216      	movs	r2, #22
 8000736:	4960      	ldr	r1, [pc, #384]	@ (80008b8 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000738:	4860      	ldr	r0, [pc, #384]	@ (80008bc <HAL_GPIO_EXTI_Callback+0x1e4>)
 800073a:	f003 ff17 	bl	800456c <HAL_UART_Transmit>
	            return;
 800073e:	e0ad      	b.n	800089c <HAL_GPIO_EXTI_Callback+0x1c4>
	        }

	        // Write the key to the ring buffer
	        if (key_pressed != '#') {
 8000740:	7d7b      	ldrb	r3, [r7, #21]
 8000742:	2b23      	cmp	r3, #35	@ 0x23
 8000744:	d031      	beq.n	80007aa <HAL_GPIO_EXTI_Callback+0xd2>
	            ring_buffer_write(&keyboard_ring_buffer, key_pressed);
 8000746:	7d7b      	ldrb	r3, [r7, #21]
 8000748:	4619      	mov	r1, r3
 800074a:	4856      	ldr	r0, [pc, #344]	@ (80008a4 <HAL_GPIO_EXTI_Callback+0x1cc>)
 800074c:	f000 faab 	bl	8000ca6 <ring_buffer_write>

	            // add chart to the buffer
	            if (buffer_index < MAX_DISPLAY_CHARS) {
 8000750:	4b56      	ldr	r3, [pc, #344]	@ (80008ac <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b13      	cmp	r3, #19
 8000756:	f200 80a0 	bhi.w	800089a <HAL_GPIO_EXTI_Callback+0x1c2>
	                display_buffer[buffer_index++] = key_pressed;
 800075a:	4b54      	ldr	r3, [pc, #336]	@ (80008ac <HAL_GPIO_EXTI_Callback+0x1d4>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	1c5a      	adds	r2, r3, #1
 8000760:	b2d1      	uxtb	r1, r2
 8000762:	4a52      	ldr	r2, [pc, #328]	@ (80008ac <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000764:	7011      	strb	r1, [r2, #0]
 8000766:	461a      	mov	r2, r3
 8000768:	7d79      	ldrb	r1, [r7, #21]
 800076a:	4b4f      	ldr	r3, [pc, #316]	@ (80008a8 <HAL_GPIO_EXTI_Callback+0x1d0>)
 800076c:	5499      	strb	r1, [r3, r2]
	                display_buffer[buffer_index] = '\0'; // Null-terminar el buffer
 800076e:	4b4f      	ldr	r3, [pc, #316]	@ (80008ac <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	461a      	mov	r2, r3
 8000774:	4b4c      	ldr	r3, [pc, #304]	@ (80008a8 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000776:	2100      	movs	r1, #0
 8000778:	5499      	strb	r1, [r3, r2]

	                // clean screen and show buffer content on screen
	                ssd1306_Fill(Black);
 800077a:	2000      	movs	r0, #0
 800077c:	f004 fcf6 	bl	800516c <ssd1306_Fill>
	                ssd1306_SetCursor(10, 30);
 8000780:	211e      	movs	r1, #30
 8000782:	200a      	movs	r0, #10
 8000784:	f004 fe3c 	bl	8005400 <ssd1306_SetCursor>
	                ssd1306_WriteString(display_buffer, Font_6x8, White);
 8000788:	4b49      	ldr	r3, [pc, #292]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 800078a:	2201      	movs	r2, #1
 800078c:	9200      	str	r2, [sp, #0]
 800078e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000790:	4845      	ldr	r0, [pc, #276]	@ (80008a8 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000792:	f004 fe0f 	bl	80053b4 <ssd1306_WriteString>
	                ssd1306_UpdateScreen();
 8000796:	f004 fd01 	bl	800519c <ssd1306_UpdateScreen>

	                // send chart via UART
	                HAL_UART_Transmit(&huart2, &key_pressed, 1, 10);
 800079a:	f107 0115 	add.w	r1, r7, #21
 800079e:	230a      	movs	r3, #10
 80007a0:	2201      	movs	r2, #1
 80007a2:	4846      	ldr	r0, [pc, #280]	@ (80008bc <HAL_GPIO_EXTI_Callback+0x1e4>)
 80007a4:	f003 fee2 	bl	800456c <HAL_UART_Transmit>
	            }
	            return;
 80007a8:	e077      	b.n	800089a <HAL_GPIO_EXTI_Callback+0x1c2>

	        // proccoed when  '#' is pressed , we verify the password entered



	        uint8_t byte2 = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	753b      	strb	r3, [r7, #20]
	        uint8_t id_incorrect2 = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	75fb      	strb	r3, [r7, #23]
	        uint8_t my_id2[] = "1004191436";  // correct sequence
 80007b2:	4a43      	ldr	r2, [pc, #268]	@ (80008c0 <HAL_GPIO_EXTI_Callback+0x1e8>)
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80007ba:	c303      	stmia	r3!, {r0, r1}
 80007bc:	801a      	strh	r2, [r3, #0]
 80007be:	3302      	adds	r3, #2
 80007c0:	0c12      	lsrs	r2, r2, #16
 80007c2:	701a      	strb	r2, [r3, #0]

	        // Read from buffer and compare with correct key
	        for (uint8_t idx2 = 0; idx2 < sizeof(my_id2) - 1; idx2++) {
 80007c4:	2300      	movs	r3, #0
 80007c6:	75bb      	strb	r3, [r7, #22]
 80007c8:	e019      	b.n	80007fe <HAL_GPIO_EXTI_Callback+0x126>
	            if (ring_buffer_read(&keyboard_ring_buffer, &byte2) != 0) {
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4619      	mov	r1, r3
 80007d0:	4834      	ldr	r0, [pc, #208]	@ (80008a4 <HAL_GPIO_EXTI_Callback+0x1cc>)
 80007d2:	f000 faa6 	bl	8000d22 <ring_buffer_read>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d00a      	beq.n	80007f2 <HAL_GPIO_EXTI_Callback+0x11a>
	                if (byte2 != my_id2[idx2]) {
 80007dc:	7dbb      	ldrb	r3, [r7, #22]
 80007de:	3318      	adds	r3, #24
 80007e0:	443b      	add	r3, r7
 80007e2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80007e6:	7d3b      	ldrb	r3, [r7, #20]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d005      	beq.n	80007f8 <HAL_GPIO_EXTI_Callback+0x120>
	                    id_incorrect2 = 1;  // Mark as incorrect if no match
 80007ec:	2301      	movs	r3, #1
 80007ee:	75fb      	strb	r3, [r7, #23]


	                    break;
 80007f0:	e008      	b.n	8000804 <HAL_GPIO_EXTI_Callback+0x12c>
	                }
	            } else {
	                id_incorrect2 = 1;  // if there is no space in buffer
 80007f2:	2301      	movs	r3, #1
 80007f4:	75fb      	strb	r3, [r7, #23]
	                break;
 80007f6:	e005      	b.n	8000804 <HAL_GPIO_EXTI_Callback+0x12c>
	        for (uint8_t idx2 = 0; idx2 < sizeof(my_id2) - 1; idx2++) {
 80007f8:	7dbb      	ldrb	r3, [r7, #22]
 80007fa:	3301      	adds	r3, #1
 80007fc:	75bb      	strb	r3, [r7, #22]
 80007fe:	7dbb      	ldrb	r3, [r7, #22]
 8000800:	2b09      	cmp	r3, #9
 8000802:	d9e2      	bls.n	80007ca <HAL_GPIO_EXTI_Callback+0xf2>
	            }
	        }

	        HAL_UART_Transmit(&huart2, (uint8_t*)"\n", 1, 10);
 8000804:	230a      	movs	r3, #10
 8000806:	2201      	movs	r2, #1
 8000808:	492e      	ldr	r1, [pc, #184]	@ (80008c4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800080a:	482c      	ldr	r0, [pc, #176]	@ (80008bc <HAL_GPIO_EXTI_Callback+0x1e4>)
 800080c:	f003 feae 	bl	800456c <HAL_UART_Transmit>

	        if (!id_incorrect2) {
 8000810:	7dfb      	ldrb	r3, [r7, #23]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d119      	bne.n	800084a <HAL_GPIO_EXTI_Callback+0x172>
	            // success
	            ssd1306_Fill(Black);
 8000816:	2000      	movs	r0, #0
 8000818:	f004 fca8 	bl	800516c <ssd1306_Fill>
	            ssd1306_SetCursor(10, 20);
 800081c:	2114      	movs	r1, #20
 800081e:	200a      	movs	r0, #10
 8000820:	f004 fdee 	bl	8005400 <ssd1306_SetCursor>
	            ssd1306_WriteString("correct sequence", Font_6x8, White);
 8000824:	4b22      	ldr	r3, [pc, #136]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000826:	2201      	movs	r2, #1
 8000828:	9200      	str	r2, [sp, #0]
 800082a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800082c:	4826      	ldr	r0, [pc, #152]	@ (80008c8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 800082e:	f004 fdc1 	bl	80053b4 <ssd1306_WriteString>
	            ssd1306_UpdateScreen();
 8000832:	f004 fcb3 	bl	800519c <ssd1306_UpdateScreen>
	            HAL_UART_Transmit(&huart2, (uint8_t*)"correct sequence\n\r", 21, 10);
 8000836:	230a      	movs	r3, #10
 8000838:	2215      	movs	r2, #21
 800083a:	4924      	ldr	r1, [pc, #144]	@ (80008cc <HAL_GPIO_EXTI_Callback+0x1f4>)
 800083c:	481f      	ldr	r0, [pc, #124]	@ (80008bc <HAL_GPIO_EXTI_Callback+0x1e4>)
 800083e:	f003 fe95 	bl	800456c <HAL_UART_Transmit>
	            password_correct  = 1 ;
 8000842:	4b23      	ldr	r3, [pc, #140]	@ (80008d0 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8000844:	2201      	movs	r2, #1
 8000846:	701a      	strb	r2, [r3, #0]
 8000848:	e015      	b.n	8000876 <HAL_GPIO_EXTI_Callback+0x19e>


	        } else {
	            //  error
	            ssd1306_Fill(Black);
 800084a:	2000      	movs	r0, #0
 800084c:	f004 fc8e 	bl	800516c <ssd1306_Fill>
	            ssd1306_SetCursor(10, 20);
 8000850:	2114      	movs	r1, #20
 8000852:	200a      	movs	r0, #10
 8000854:	f004 fdd4 	bl	8005400 <ssd1306_SetCursor>
	            ssd1306_WriteString("error ", Font_6x8, White);
 8000858:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 800085a:	2201      	movs	r2, #1
 800085c:	9200      	str	r2, [sp, #0]
 800085e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000860:	481c      	ldr	r0, [pc, #112]	@ (80008d4 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000862:	f004 fda7 	bl	80053b4 <ssd1306_WriteString>
	            ssd1306_UpdateScreen();
 8000866:	f004 fc99 	bl	800519c <ssd1306_UpdateScreen>
	            HAL_UART_Transmit(&huart2, (uint8_t*)" incorrect sequence \n\r", 12, 10);
 800086a:	230a      	movs	r3, #10
 800086c:	220c      	movs	r2, #12
 800086e:	491a      	ldr	r1, [pc, #104]	@ (80008d8 <HAL_GPIO_EXTI_Callback+0x200>)
 8000870:	4812      	ldr	r0, [pc, #72]	@ (80008bc <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000872:	f003 fe7b 	bl	800456c <HAL_UART_Transmit>

	        }

	        ring_buffer_reset(&keyboard_ring_buffer);
 8000876:	480b      	ldr	r0, [pc, #44]	@ (80008a4 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000878:	f000 fa02 	bl	8000c80 <ring_buffer_reset>
	        memset(display_buffer, 0, sizeof(display_buffer)); // clean buffer on screen
 800087c:	2215      	movs	r2, #21
 800087e:	2100      	movs	r1, #0
 8000880:	4809      	ldr	r0, [pc, #36]	@ (80008a8 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000882:	f004 ffff 	bl	8005884 <memset>
	        buffer_index = 0; // reset index buffer
 8000886:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
	        cursor_x = 10;  //Resets the horizontal cursor position
 800088c:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <HAL_GPIO_EXTI_Callback+0x204>)
 800088e:	220a      	movs	r2, #10
 8000890:	701a      	strb	r2, [r3, #0]
	        cursor_y = 30;  // Restarts the vertical position of the course
 8000892:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <HAL_GPIO_EXTI_Callback+0x208>)
 8000894:	221e      	movs	r2, #30
 8000896:	701a      	strb	r2, [r3, #0]
 8000898:	e000      	b.n	800089c <HAL_GPIO_EXTI_Callback+0x1c4>
	            return;
 800089a:	bf00      	nop

	    }
}
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000184 	.word	0x20000184
 80008a8:	2000018c 	.word	0x2000018c
 80008ac:	200001a1 	.word	0x200001a1
 80008b0:	08006520 	.word	0x08006520
 80008b4:	08005e04 	.word	0x08005e04
 80008b8:	08005e18 	.word	0x08005e18
 80008bc:	200000f0 	.word	0x200000f0
 80008c0:	08005e7c 	.word	0x08005e7c
 80008c4:	08005e30 	.word	0x08005e30
 80008c8:	08005e34 	.word	0x08005e34
 80008cc:	08005e48 	.word	0x08005e48
 80008d0:	200001a2 	.word	0x200001a2
 80008d4:	08005e5c 	.word	0x08005e5c
 80008d8:	08005e64 	.word	0x08005e64
 80008dc:	20000012 	.word	0x20000012
 80008e0:	20000013 	.word	0x20000013

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ea:	f000 fc58 	bl	800119e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ee:	f000 f847 	bl	8000980 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f2:	f000 f907 	bl	8000b04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008f6:	f000 f8d5 	bl	8000aa4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008fa:	f000 f893 	bl	8000a24 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ring_buffer_init(&keyboard_ring_buffer, keyboard_buffer_memory, BUFFER_CAPACITY);
 80008fe:	220a      	movs	r2, #10
 8000900:	4917      	ldr	r1, [pc, #92]	@ (8000960 <main+0x7c>)
 8000902:	4818      	ldr	r0, [pc, #96]	@ (8000964 <main+0x80>)
 8000904:	f000 f9a8 	bl	8000c58 <ring_buffer_init>
  ssd1306_Init();
 8000908:	f004 fbc6 	bl	8005098 <ssd1306_Init>
  ssd1306_Fill(Black);
 800090c:	2000      	movs	r0, #0
 800090e:	f004 fc2d 	bl	800516c <ssd1306_Fill>
  ssd1306_SetCursor(10,20);
 8000912:	2114      	movs	r1, #20
 8000914:	200a      	movs	r0, #10
 8000916:	f004 fd73 	bl	8005400 <ssd1306_SetCursor>
  ssd1306_WriteString("Starting...\r\n",Font_6x8,White);
 800091a:	4b13      	ldr	r3, [pc, #76]	@ (8000968 <main+0x84>)
 800091c:	2201      	movs	r2, #1
 800091e:	9200      	str	r2, [sp, #0]
 8000920:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000922:	4812      	ldr	r0, [pc, #72]	@ (800096c <main+0x88>)
 8000924:	f004 fd46 	bl	80053b4 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000928:	f004 fc38 	bl	800519c <ssd1306_UpdateScreen>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  // Solicitar contraseña hasta que sea correcta
	 while (!password_correct)
 800092c:	e012      	b.n	8000954 <main+0x70>
	 {
	   printf("Please enter the password:\r\n");
 800092e:	4810      	ldr	r0, [pc, #64]	@ (8000970 <main+0x8c>)
 8000930:	f004 fec8 	bl	80056c4 <puts>
	   HAL_Delay(1000000);  // Solo para evitar una saturación de mensajes
 8000934:	480f      	ldr	r0, [pc, #60]	@ (8000974 <main+0x90>)
 8000936:	f000 fca7 	bl	8001288 <HAL_Delay>

	   // Suponiendo que HAL_GPIO_EXTI_Callback se encargará de verificar la contraseña
	   // Cuando la contraseña es correcta, cambiaremos `password_correct` a 1
	   // Esto ocurrirá dentro de la función HAL_GPIO_EXTI_Callback que ya compara la contraseña.
	   if (password_correct == 1){
 800093a:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <main+0x94>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d108      	bne.n	8000954 <main+0x70>
		   printf("Password correct, proceeding with the system...\r\n");
 8000942:	480e      	ldr	r0, [pc, #56]	@ (800097c <main+0x98>)
 8000944:	f004 febe 	bl	80056c4 <puts>
		   HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000948:	2201      	movs	r2, #1
 800094a:	2110      	movs	r1, #16
 800094c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000950:	f000 ffe0 	bl	8001914 <HAL_GPIO_WritePin>
	 while (!password_correct)
 8000954:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <main+0x94>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d0e8      	beq.n	800092e <main+0x4a>
 800095c:	e7fa      	b.n	8000954 <main+0x70>
 800095e:	bf00      	nop
 8000960:	20000178 	.word	0x20000178
 8000964:	20000184 	.word	0x20000184
 8000968:	08006520 	.word	0x08006520
 800096c:	08005e88 	.word	0x08005e88
 8000970:	08005e98 	.word	0x08005e98
 8000974:	000f4240 	.word	0x000f4240
 8000978:	200001a2 	.word	0x200001a2
 800097c:	08005eb4 	.word	0x08005eb4

08000980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b096      	sub	sp, #88	@ 0x58
 8000984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	2244      	movs	r2, #68	@ 0x44
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f004 ff78 	bl	8005884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000994:	463b      	mov	r3, r7
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009a6:	f002 fa81 	bl	8002eac <HAL_PWREx_ControlVoltageScaling>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009b0:	f000 f94c 	bl	8000c4c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009b4:	2310      	movs	r3, #16
 80009b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009b8:	2301      	movs	r3, #1
 80009ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009c0:	2360      	movs	r3, #96	@ 0x60
 80009c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c4:	2302      	movs	r3, #2
 80009c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009c8:	2301      	movs	r3, #1
 80009ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009cc:	2301      	movs	r3, #1
 80009ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80009d0:	2328      	movs	r3, #40	@ 0x28
 80009d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009d4:	2307      	movs	r3, #7
 80009d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009d8:	2302      	movs	r3, #2
 80009da:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009dc:	2302      	movs	r3, #2
 80009de:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4618      	mov	r0, r3
 80009e6:	f002 fab7 	bl	8002f58 <HAL_RCC_OscConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80009f0:	f000 f92c 	bl	8000c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f4:	230f      	movs	r3, #15
 80009f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f8:	2303      	movs	r3, #3
 80009fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a08:	463b      	mov	r3, r7
 8000a0a:	2104      	movs	r1, #4
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f002 fe7f 	bl	8003710 <HAL_RCC_ClockConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a18:	f000 f918 	bl	8000c4c <Error_Handler>
  }
}
 8000a1c:	bf00      	nop
 8000a1e:	3758      	adds	r7, #88	@ 0x58
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a28:	4b1b      	ldr	r3, [pc, #108]	@ (8000a98 <MX_I2C1_Init+0x74>)
 8000a2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000a9c <MX_I2C1_Init+0x78>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a98 <MX_I2C1_Init+0x74>)
 8000a30:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa0 <MX_I2C1_Init+0x7c>)
 8000a32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a34:	4b18      	ldr	r3, [pc, #96]	@ (8000a98 <MX_I2C1_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3a:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <MX_I2C1_Init+0x74>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a40:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <MX_I2C1_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a46:	4b14      	ldr	r3, [pc, #80]	@ (8000a98 <MX_I2C1_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	@ (8000a98 <MX_I2C1_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a52:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <MX_I2C1_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <MX_I2C1_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a5e:	480e      	ldr	r0, [pc, #56]	@ (8000a98 <MX_I2C1_Init+0x74>)
 8000a60:	f000 ff88 	bl	8001974 <HAL_I2C_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a6a:	f000 f8ef 	bl	8000c4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4809      	ldr	r0, [pc, #36]	@ (8000a98 <MX_I2C1_Init+0x74>)
 8000a72:	f002 f975 	bl	8002d60 <HAL_I2CEx_ConfigAnalogFilter>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a7c:	f000 f8e6 	bl	8000c4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a80:	2100      	movs	r1, #0
 8000a82:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <MX_I2C1_Init+0x74>)
 8000a84:	f002 f9b7 	bl	8002df6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a8e:	f000 f8dd 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2000009c 	.word	0x2000009c
 8000a9c:	40005400 	.word	0x40005400
 8000aa0:	10909cec 	.word	0x10909cec

08000aa4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <MX_USART2_UART_Init+0x58>)
 8000aaa:	4a15      	ldr	r2, [pc, #84]	@ (8000b00 <MX_USART2_UART_Init+0x5c>)
 8000aac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aae:	4b13      	ldr	r3, [pc, #76]	@ (8000afc <MX_USART2_UART_Init+0x58>)
 8000ab0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ab4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <MX_USART2_UART_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <MX_USART2_UART_Init+0x58>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <MX_USART2_UART_Init+0x58>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <MX_USART2_UART_Init+0x58>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <MX_USART2_UART_Init+0x58>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <MX_USART2_UART_Init+0x58>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <MX_USART2_UART_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <MX_USART2_UART_Init+0x58>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	@ (8000afc <MX_USART2_UART_Init+0x58>)
 8000ae8:	f003 fcf2 	bl	80044d0 <HAL_UART_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000af2:	f000 f8ab 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200000f0 	.word	0x200000f0
 8000b00:	40004400 	.word	0x40004400

08000b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b088      	sub	sp, #32
 8000b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 030c 	add.w	r3, r7, #12
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	4b49      	ldr	r3, [pc, #292]	@ (8000c40 <MX_GPIO_Init+0x13c>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1e:	4a48      	ldr	r2, [pc, #288]	@ (8000c40 <MX_GPIO_Init+0x13c>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b26:	4b46      	ldr	r3, [pc, #280]	@ (8000c40 <MX_GPIO_Init+0x13c>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	4b43      	ldr	r3, [pc, #268]	@ (8000c40 <MX_GPIO_Init+0x13c>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b36:	4a42      	ldr	r2, [pc, #264]	@ (8000c40 <MX_GPIO_Init+0x13c>)
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b3e:	4b40      	ldr	r3, [pc, #256]	@ (8000c40 <MX_GPIO_Init+0x13c>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c40 <MX_GPIO_Init+0x13c>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4e:	4a3c      	ldr	r2, [pc, #240]	@ (8000c40 <MX_GPIO_Init+0x13c>)
 8000b50:	f043 0304 	orr.w	r3, r3, #4
 8000b54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b56:	4b3a      	ldr	r3, [pc, #232]	@ (8000c40 <MX_GPIO_Init+0x13c>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5a:	f003 0304 	and.w	r3, r3, #4
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SYSTEM_LED_GPIO_Port, SYSTEM_LED_Pin, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2120      	movs	r1, #32
 8000b66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b6a:	f000 fed3 	bl	8001914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, GPIO_PIN_SET);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b78:	f000 fecc 	bl	8001914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ROW_2_Pin|ROW_4_Pin|ROW_3_Pin, GPIO_PIN_SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2138      	movs	r1, #56	@ 0x38
 8000b80:	4830      	ldr	r0, [pc, #192]	@ (8000c44 <MX_GPIO_Init+0x140>)
 8000b82:	f000 fec7 	bl	8001914 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SYSTEM_LED_Pin ROW_1_Pin */
  GPIO_InitStruct.Pin = SYSTEM_LED_Pin|ROW_1_Pin;
 8000b86:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8000b8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba2:	f000 fcf5 	bl	8001590 <HAL_GPIO_Init>

  /*Configure GPIO pin : COL_1_Pin */
  GPIO_InitStruct.Pin = COL_1_Pin;
 8000ba6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000baa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(COL_1_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 030c 	add.w	r3, r7, #12
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4821      	ldr	r0, [pc, #132]	@ (8000c44 <MX_GPIO_Init+0x140>)
 8000bbe:	f000 fce7 	bl	8001590 <HAL_GPIO_Init>

  /*Configure GPIO pin : COL_4_Pin */
  GPIO_InitStruct.Pin = COL_4_Pin;
 8000bc2:	2380      	movs	r3, #128	@ 0x80
 8000bc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(COL_4_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	481c      	ldr	r0, [pc, #112]	@ (8000c48 <MX_GPIO_Init+0x144>)
 8000bd8:	f000 fcda 	bl	8001590 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL_2_Pin COL_3_Pin */
  GPIO_InitStruct.Pin = COL_2_Pin|COL_3_Pin;
 8000bdc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000be0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000be6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000be8:	2302      	movs	r3, #2
 8000bea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf6:	f000 fccb 	bl	8001590 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW_2_Pin ROW_4_Pin ROW_3_Pin */
  GPIO_InitStruct.Pin = ROW_2_Pin|ROW_4_Pin|ROW_3_Pin;
 8000bfa:	2338      	movs	r3, #56	@ 0x38
 8000bfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480c      	ldr	r0, [pc, #48]	@ (8000c44 <MX_GPIO_Init+0x140>)
 8000c12:	f000 fcbd 	bl	8001590 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2017      	movs	r0, #23
 8000c1c:	f000 fc33 	bl	8001486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c20:	2017      	movs	r0, #23
 8000c22:	f000 fc4c 	bl	80014be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2028      	movs	r0, #40	@ 0x28
 8000c2c:	f000 fc2b 	bl	8001486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c30:	2028      	movs	r0, #40	@ 0x28
 8000c32:	f000 fc44 	bl	80014be <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c36:	bf00      	nop
 8000c38:	3720      	adds	r7, #32
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40021000 	.word	0x40021000
 8000c44:	48000400 	.word	0x48000400
 8000c48:	48000800 	.word	0x48000800

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <Error_Handler+0x8>

08000c58 <ring_buffer_init>:

#include "ring_buffer.h"


void ring_buffer_init(ring_buffer_t *rb, uint8_t *mem_add, uint8_t cap)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	4613      	mov	r3, r2
 8000c64:	71fb      	strb	r3, [r7, #7]
	rb->buffer = mem_add;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	68ba      	ldr	r2, [r7, #8]
 8000c6a:	601a      	str	r2, [r3, #0]
	rb->capacity = cap;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	79fa      	ldrb	r2, [r7, #7]
 8000c70:	71da      	strb	r2, [r3, #7]

	ring_buffer_reset(rb);
 8000c72:	68f8      	ldr	r0, [r7, #12]
 8000c74:	f000 f804 	bl	8000c80 <ring_buffer_reset>
}
 8000c78:	bf00      	nop
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <ring_buffer_reset>:
 * @brief Esta funcion reinicia los datos disponibles en el buffer
 *
 * @retval size: cantidad de datos disponibles
 */
void ring_buffer_reset(ring_buffer_t *rb)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	rb->head = 0;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	711a      	strb	r2, [r3, #4]
	rb->tail = 0;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2200      	movs	r2, #0
 8000c92:	715a      	strb	r2, [r3, #5]
	rb->is_full = 0;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2200      	movs	r2, #0
 8000c98:	719a      	strb	r2, [r3, #6]
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <ring_buffer_write>:
 * @param data: el dato que se va a escribir
 *
 * @retval Ninguno
 */
void ring_buffer_write(ring_buffer_t *rb, uint8_t data)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
 8000cae:	460b      	mov	r3, r1
 8000cb0:	70fb      	strb	r3, [r7, #3]
	rb->buffer[rb->head] = data;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	7912      	ldrb	r2, [r2, #4]
 8000cba:	4413      	add	r3, r2
 8000cbc:	78fa      	ldrb	r2, [r7, #3]
 8000cbe:	701a      	strb	r2, [r3, #0]
	rb->head = rb->head + 1;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	791b      	ldrb	r3, [r3, #4]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	711a      	strb	r2, [r3, #4]

	if (rb->head >= rb->capacity) { // si la cabeza llega al final de la memoria
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	791a      	ldrb	r2, [r3, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	79db      	ldrb	r3, [r3, #7]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d302      	bcc.n	8000cde <ring_buffer_write+0x38>
		rb->head = 0;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	711a      	strb	r2, [r3, #4]
	}

	if (rb->is_full != 0) { // si se pierden datos viejos
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	799b      	ldrb	r3, [r3, #6]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d005      	beq.n	8000cf2 <ring_buffer_write+0x4c>
		rb->tail = rb->tail + 1;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	795b      	ldrb	r3, [r3, #5]
 8000cea:	3301      	adds	r3, #1
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	715a      	strb	r2, [r3, #5]
	}

	if (rb->tail >= rb->capacity) { // si la cola llega al final de la memoria
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	795a      	ldrb	r2, [r3, #5]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	79db      	ldrb	r3, [r3, #7]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d302      	bcc.n	8000d04 <ring_buffer_write+0x5e>
		rb->tail = 0;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	715a      	strb	r2, [r3, #5]
	}

	if (rb->head == rb->tail) { // si la cabeza alcanza la cola
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	791a      	ldrb	r2, [r3, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	795b      	ldrb	r3, [r3, #5]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d102      	bne.n	8000d16 <ring_buffer_write+0x70>
		rb->is_full = 1;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2201      	movs	r2, #1
 8000d14:	719a      	strb	r2, [r3, #6]
	}
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <ring_buffer_read>:
 * @param data: la direccion de donde se va a escribir el dato
 *
 * @retval 1: hay datos disponibles, 0: no hay datos
 */
uint8_t ring_buffer_read(ring_buffer_t *rb, uint8_t *data) // 0x20
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	6039      	str	r1, [r7, #0]
	if ((rb->is_full != 0) || (rb->head != rb->tail)) { // data available
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	799b      	ldrb	r3, [r3, #6]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d105      	bne.n	8000d40 <ring_buffer_read+0x1e>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	791a      	ldrb	r2, [r3, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	795b      	ldrb	r3, [r3, #5]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d01b      	beq.n	8000d78 <ring_buffer_read+0x56>
		*data = rb->buffer[rb->tail]; // add: 0x20, val: buffer
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	7952      	ldrb	r2, [r2, #5]
 8000d48:	4413      	add	r3, r2
 8000d4a:	781a      	ldrb	r2, [r3, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	701a      	strb	r2, [r3, #0]
		rb->tail = rb->tail + 1;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	795b      	ldrb	r3, [r3, #5]
 8000d54:	3301      	adds	r3, #1
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	715a      	strb	r2, [r3, #5]
		if (rb->tail >= rb->capacity) {
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	795a      	ldrb	r2, [r3, #5]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	79db      	ldrb	r3, [r3, #7]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d302      	bcc.n	8000d6e <ring_buffer_read+0x4c>
			rb->tail = 0;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	715a      	strb	r2, [r3, #5]
		}
		rb->is_full = 0;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2200      	movs	r2, #0
 8000d72:	719a      	strb	r2, [r3, #6]

		return 1; // buffer con datos
 8000d74:	2301      	movs	r3, #1
 8000d76:	e000      	b.n	8000d7a <ring_buffer_read+0x58>
	}
	return 0; // buffer vacio
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dcc <HAL_MspInit+0x44>)
 8000d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d92:	4a0e      	ldr	r2, [pc, #56]	@ (8000dcc <HAL_MspInit+0x44>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <HAL_MspInit+0x44>)
 8000d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <HAL_MspInit+0x44>)
 8000da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000daa:	4a08      	ldr	r2, [pc, #32]	@ (8000dcc <HAL_MspInit+0x44>)
 8000dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000db2:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <HAL_MspInit+0x44>)
 8000db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b0ac      	sub	sp, #176	@ 0xb0
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2288      	movs	r2, #136	@ 0x88
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f004 fd47 	bl	8005884 <memset>
  if(hi2c->Instance==I2C1)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a29      	ldr	r2, [pc, #164]	@ (8000ea0 <HAL_I2C_MspInit+0xd0>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d14b      	bne.n	8000e98 <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e00:	2340      	movs	r3, #64	@ 0x40
 8000e02:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f002 fea3 	bl	8003b58 <HAL_RCCEx_PeriphCLKConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e18:	f7ff ff18 	bl	8000c4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1c:	4b21      	ldr	r3, [pc, #132]	@ (8000ea4 <HAL_I2C_MspInit+0xd4>)
 8000e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e20:	4a20      	ldr	r2, [pc, #128]	@ (8000ea4 <HAL_I2C_MspInit+0xd4>)
 8000e22:	f043 0302 	orr.w	r3, r3, #2
 8000e26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e28:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea4 <HAL_I2C_MspInit+0xd4>)
 8000e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e34:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e3c:	2312      	movs	r3, #18
 8000e3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e4e:	2304      	movs	r3, #4
 8000e50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e54:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4813      	ldr	r0, [pc, #76]	@ (8000ea8 <HAL_I2C_MspInit+0xd8>)
 8000e5c:	f000 fb98 	bl	8001590 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e60:	4b10      	ldr	r3, [pc, #64]	@ (8000ea4 <HAL_I2C_MspInit+0xd4>)
 8000e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e64:	4a0f      	ldr	r2, [pc, #60]	@ (8000ea4 <HAL_I2C_MspInit+0xd4>)
 8000e66:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea4 <HAL_I2C_MspInit+0xd4>)
 8000e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	201f      	movs	r0, #31
 8000e7e:	f000 fb02 	bl	8001486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000e82:	201f      	movs	r0, #31
 8000e84:	f000 fb1b 	bl	80014be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	2020      	movs	r0, #32
 8000e8e:	f000 fafa 	bl	8001486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000e92:	2020      	movs	r0, #32
 8000e94:	f000 fb13 	bl	80014be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e98:	bf00      	nop
 8000e9a:	37b0      	adds	r7, #176	@ 0xb0
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40005400 	.word	0x40005400
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	48000400 	.word	0x48000400

08000eac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b0ac      	sub	sp, #176	@ 0xb0
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2288      	movs	r2, #136	@ 0x88
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f004 fcd9 	bl	8005884 <memset>
  if(huart->Instance==USART2)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a21      	ldr	r2, [pc, #132]	@ (8000f5c <HAL_UART_MspInit+0xb0>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d13b      	bne.n	8000f54 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000edc:	2302      	movs	r3, #2
 8000ede:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f002 fe35 	bl	8003b58 <HAL_RCCEx_PeriphCLKConfig>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ef4:	f7ff feaa 	bl	8000c4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ef8:	4b19      	ldr	r3, [pc, #100]	@ (8000f60 <HAL_UART_MspInit+0xb4>)
 8000efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000efc:	4a18      	ldr	r2, [pc, #96]	@ (8000f60 <HAL_UART_MspInit+0xb4>)
 8000efe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f02:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f04:	4b16      	ldr	r3, [pc, #88]	@ (8000f60 <HAL_UART_MspInit+0xb4>)
 8000f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f10:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <HAL_UART_MspInit+0xb4>)
 8000f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f14:	4a12      	ldr	r2, [pc, #72]	@ (8000f60 <HAL_UART_MspInit+0xb4>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f1c:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <HAL_UART_MspInit+0xb4>)
 8000f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f28:	230c      	movs	r3, #12
 8000f2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f40:	2307      	movs	r3, #7
 8000f42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f50:	f000 fb1e 	bl	8001590 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f54:	bf00      	nop
 8000f56:	37b0      	adds	r7, #176	@ 0xb0
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40004400 	.word	0x40004400
 8000f60:	40021000 	.word	0x40021000

08000f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <NMI_Handler+0x4>

08000f6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fba:	f000 f945 	bl	8001248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_4_Pin);
 8000fc6:	2080      	movs	r0, #128	@ 0x80
 8000fc8:	f000 fcbc 	bl	8001944 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL_2_Pin);
 8000fcc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000fd0:	f000 fcb8 	bl	8001944 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL_3_Pin);
 8000fd4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fd8:	f000 fcb4 	bl	8001944 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000fe4:	4802      	ldr	r0, [pc, #8]	@ (8000ff0 <I2C1_EV_IRQHandler+0x10>)
 8000fe6:	f000 fe75 	bl	8001cd4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	2000009c 	.word	0x2000009c

08000ff4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ff8:	4802      	ldr	r0, [pc, #8]	@ (8001004 <I2C1_ER_IRQHandler+0x10>)
 8000ffa:	f000 fe85 	bl	8001d08 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000009c 	.word	0x2000009c

08001008 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_1_Pin);
 800100c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001010:	f000 fc98 	bl	8001944 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	e00a      	b.n	8001040 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800102a:	f3af 8000 	nop.w
 800102e:	4601      	mov	r1, r0
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	1c5a      	adds	r2, r3, #1
 8001034:	60ba      	str	r2, [r7, #8]
 8001036:	b2ca      	uxtb	r2, r1
 8001038:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	3301      	adds	r3, #1
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	429a      	cmp	r2, r3
 8001046:	dbf0      	blt.n	800102a <_read+0x12>
  }

  return len;
 8001048:	687b      	ldr	r3, [r7, #4]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800107a:	605a      	str	r2, [r3, #4]
  return 0;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <_isatty>:

int _isatty(int file)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001092:	2301      	movs	r3, #1
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c4:	4a14      	ldr	r2, [pc, #80]	@ (8001118 <_sbrk+0x5c>)
 80010c6:	4b15      	ldr	r3, [pc, #84]	@ (800111c <_sbrk+0x60>)
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d0:	4b13      	ldr	r3, [pc, #76]	@ (8001120 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d102      	bne.n	80010de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d8:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <_sbrk+0x64>)
 80010da:	4a12      	ldr	r2, [pc, #72]	@ (8001124 <_sbrk+0x68>)
 80010dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010de:	4b10      	ldr	r3, [pc, #64]	@ (8001120 <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d207      	bcs.n	80010fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ec:	f004 fc18 	bl	8005920 <__errno>
 80010f0:	4603      	mov	r3, r0
 80010f2:	220c      	movs	r2, #12
 80010f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	e009      	b.n	8001110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010fc:	4b08      	ldr	r3, [pc, #32]	@ (8001120 <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001102:	4b07      	ldr	r3, [pc, #28]	@ (8001120 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	4a05      	ldr	r2, [pc, #20]	@ (8001120 <_sbrk+0x64>)
 800110c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800110e:	68fb      	ldr	r3, [r7, #12]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20018000 	.word	0x20018000
 800111c:	00000400 	.word	0x00000400
 8001120:	200001a4 	.word	0x200001a4
 8001124:	20000700 	.word	0x20000700

08001128 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800112c:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <SystemInit+0x20>)
 800112e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001132:	4a05      	ldr	r2, [pc, #20]	@ (8001148 <SystemInit+0x20>)
 8001134:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001138:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800114c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001184 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001150:	f7ff ffea 	bl	8001128 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001154:	480c      	ldr	r0, [pc, #48]	@ (8001188 <LoopForever+0x6>)
  ldr r1, =_edata
 8001156:	490d      	ldr	r1, [pc, #52]	@ (800118c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001158:	4a0d      	ldr	r2, [pc, #52]	@ (8001190 <LoopForever+0xe>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800115c:	e002      	b.n	8001164 <LoopCopyDataInit>

0800115e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001162:	3304      	adds	r3, #4

08001164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001168:	d3f9      	bcc.n	800115e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116a:	4a0a      	ldr	r2, [pc, #40]	@ (8001194 <LoopForever+0x12>)
  ldr r4, =_ebss
 800116c:	4c0a      	ldr	r4, [pc, #40]	@ (8001198 <LoopForever+0x16>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001170:	e001      	b.n	8001176 <LoopFillZerobss>

08001172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001174:	3204      	adds	r2, #4

08001176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001178:	d3fb      	bcc.n	8001172 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800117a:	f004 fbd7 	bl	800592c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800117e:	f7ff fbb1 	bl	80008e4 <main>

08001182 <LoopForever>:

LoopForever:
    b LoopForever
 8001182:	e7fe      	b.n	8001182 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001184:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800118c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001190:	0800653c 	.word	0x0800653c
  ldr r2, =_sbss
 8001194:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001198:	20000700 	.word	0x20000700

0800119c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800119c:	e7fe      	b.n	800119c <ADC1_2_IRQHandler>

0800119e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011a4:	2300      	movs	r3, #0
 80011a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a8:	2003      	movs	r0, #3
 80011aa:	f000 f961 	bl	8001470 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ae:	200f      	movs	r0, #15
 80011b0:	f000 f80e 	bl	80011d0 <HAL_InitTick>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d002      	beq.n	80011c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	71fb      	strb	r3, [r7, #7]
 80011be:	e001      	b.n	80011c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011c0:	f7ff fde2 	bl	8000d88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011c4:	79fb      	ldrb	r3, [r7, #7]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011d8:	2300      	movs	r3, #0
 80011da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011dc:	4b17      	ldr	r3, [pc, #92]	@ (800123c <HAL_InitTick+0x6c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d023      	beq.n	800122c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011e4:	4b16      	ldr	r3, [pc, #88]	@ (8001240 <HAL_InitTick+0x70>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b14      	ldr	r3, [pc, #80]	@ (800123c <HAL_InitTick+0x6c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4619      	mov	r1, r3
 80011ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 f96d 	bl	80014da <HAL_SYSTICK_Config>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10f      	bne.n	8001226 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b0f      	cmp	r3, #15
 800120a:	d809      	bhi.n	8001220 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800120c:	2200      	movs	r2, #0
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f000 f937 	bl	8001486 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001218:	4a0a      	ldr	r2, [pc, #40]	@ (8001244 <HAL_InitTick+0x74>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	e007      	b.n	8001230 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	73fb      	strb	r3, [r7, #15]
 8001224:	e004      	b.n	8001230 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	73fb      	strb	r3, [r7, #15]
 800122a:	e001      	b.n	8001230 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001230:	7bfb      	ldrb	r3, [r7, #15]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000001c 	.word	0x2000001c
 8001240:	20000014 	.word	0x20000014
 8001244:	20000018 	.word	0x20000018

08001248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800124c:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <HAL_IncTick+0x20>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	4b06      	ldr	r3, [pc, #24]	@ (800126c <HAL_IncTick+0x24>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	4a04      	ldr	r2, [pc, #16]	@ (800126c <HAL_IncTick+0x24>)
 800125a:	6013      	str	r3, [r2, #0]
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	2000001c 	.word	0x2000001c
 800126c:	200001a8 	.word	0x200001a8

08001270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return uwTick;
 8001274:	4b03      	ldr	r3, [pc, #12]	@ (8001284 <HAL_GetTick+0x14>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	200001a8 	.word	0x200001a8

08001288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001290:	f7ff ffee 	bl	8001270 <HAL_GetTick>
 8001294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a0:	d005      	beq.n	80012ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012a2:	4b0a      	ldr	r3, [pc, #40]	@ (80012cc <HAL_Delay+0x44>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ae:	bf00      	nop
 80012b0:	f7ff ffde 	bl	8001270 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d8f7      	bhi.n	80012b0 <HAL_Delay+0x28>
  {
  }
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	2000001c 	.word	0x2000001c

080012d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012ec:	4013      	ands	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001302:	4a04      	ldr	r2, [pc, #16]	@ (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	60d3      	str	r3, [r2, #12]
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800131c:	4b04      	ldr	r3, [pc, #16]	@ (8001330 <__NVIC_GetPriorityGrouping+0x18>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	f003 0307 	and.w	r3, r3, #7
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	2b00      	cmp	r3, #0
 8001344:	db0b      	blt.n	800135e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	f003 021f 	and.w	r2, r3, #31
 800134c:	4907      	ldr	r1, [pc, #28]	@ (800136c <__NVIC_EnableIRQ+0x38>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	095b      	lsrs	r3, r3, #5
 8001354:	2001      	movs	r0, #1
 8001356:	fa00 f202 	lsl.w	r2, r0, r2
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000e100 	.word	0xe000e100

08001370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	db0a      	blt.n	800139a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	490c      	ldr	r1, [pc, #48]	@ (80013bc <__NVIC_SetPriority+0x4c>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	0112      	lsls	r2, r2, #4
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	440b      	add	r3, r1
 8001394:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001398:	e00a      	b.n	80013b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4908      	ldr	r1, [pc, #32]	@ (80013c0 <__NVIC_SetPriority+0x50>)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	3b04      	subs	r3, #4
 80013a8:	0112      	lsls	r2, r2, #4
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	440b      	add	r3, r1
 80013ae:	761a      	strb	r2, [r3, #24]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000e100 	.word	0xe000e100
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	@ 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f1c3 0307 	rsb	r3, r3, #7
 80013de:	2b04      	cmp	r3, #4
 80013e0:	bf28      	it	cs
 80013e2:	2304      	movcs	r3, #4
 80013e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3304      	adds	r3, #4
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d902      	bls.n	80013f4 <NVIC_EncodePriority+0x30>
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3b03      	subs	r3, #3
 80013f2:	e000      	b.n	80013f6 <NVIC_EncodePriority+0x32>
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800140c:	f04f 31ff 	mov.w	r1, #4294967295
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43d9      	mvns	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	4313      	orrs	r3, r2
         );
}
 800141e:	4618      	mov	r0, r3
 8001420:	3724      	adds	r7, #36	@ 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800143c:	d301      	bcc.n	8001442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143e:	2301      	movs	r3, #1
 8001440:	e00f      	b.n	8001462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001442:	4a0a      	ldr	r2, [pc, #40]	@ (800146c <SysTick_Config+0x40>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144a:	210f      	movs	r1, #15
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	f7ff ff8e 	bl	8001370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001454:	4b05      	ldr	r3, [pc, #20]	@ (800146c <SysTick_Config+0x40>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145a:	4b04      	ldr	r3, [pc, #16]	@ (800146c <SysTick_Config+0x40>)
 800145c:	2207      	movs	r2, #7
 800145e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	e000e010 	.word	0xe000e010

08001470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ff29 	bl	80012d0 <__NVIC_SetPriorityGrouping>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001498:	f7ff ff3e 	bl	8001318 <__NVIC_GetPriorityGrouping>
 800149c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	6978      	ldr	r0, [r7, #20]
 80014a4:	f7ff ff8e 	bl	80013c4 <NVIC_EncodePriority>
 80014a8:	4602      	mov	r2, r0
 80014aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff5d 	bl	8001370 <__NVIC_SetPriority>
}
 80014b6:	bf00      	nop
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff31 	bl	8001334 <__NVIC_EnableIRQ>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff ffa2 	bl	800142c <SysTick_Config>
 80014e8:	4603      	mov	r3, r0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b084      	sub	sp, #16
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d005      	beq.n	8001516 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2204      	movs	r2, #4
 800150e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	73fb      	strb	r3, [r7, #15]
 8001514:	e029      	b.n	800156a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 020e 	bic.w	r2, r2, #14
 8001524:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0201 	bic.w	r2, r2, #1
 8001534:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153a:	f003 021c 	and.w	r2, r3, #28
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	2101      	movs	r1, #1
 8001544:	fa01 f202 	lsl.w	r2, r1, r2
 8001548:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	4798      	blx	r3
    }
  }
  return status;
 800156a:	7bfb      	ldrb	r3, [r7, #15]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001582:	b2db      	uxtb	r3, r3
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001590:	b480      	push	{r7}
 8001592:	b087      	sub	sp, #28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800159e:	e17f      	b.n	80018a0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	2101      	movs	r1, #1
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ac:	4013      	ands	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 8171 	beq.w	800189a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 0303 	and.w	r3, r3, #3
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d005      	beq.n	80015d0 <HAL_GPIO_Init+0x40>
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d130      	bne.n	8001632 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	2203      	movs	r2, #3
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001606:	2201      	movs	r2, #1
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	091b      	lsrs	r3, r3, #4
 800161c:	f003 0201 	and.w	r2, r3, #1
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f003 0303 	and.w	r3, r3, #3
 800163a:	2b03      	cmp	r3, #3
 800163c:	d118      	bne.n	8001670 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001642:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001644:	2201      	movs	r2, #1
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	08db      	lsrs	r3, r3, #3
 800165a:	f003 0201 	and.w	r2, r3, #1
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4313      	orrs	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	2b03      	cmp	r3, #3
 800167a:	d017      	beq.n	80016ac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	2203      	movs	r2, #3
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4013      	ands	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 0303 	and.w	r3, r3, #3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d123      	bne.n	8001700 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	08da      	lsrs	r2, r3, #3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3208      	adds	r2, #8
 80016c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	220f      	movs	r2, #15
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	08da      	lsrs	r2, r3, #3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3208      	adds	r2, #8
 80016fa:	6939      	ldr	r1, [r7, #16]
 80016fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	2203      	movs	r2, #3
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4013      	ands	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0203 	and.w	r2, r3, #3
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 80ac 	beq.w	800189a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001742:	4b5f      	ldr	r3, [pc, #380]	@ (80018c0 <HAL_GPIO_Init+0x330>)
 8001744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001746:	4a5e      	ldr	r2, [pc, #376]	@ (80018c0 <HAL_GPIO_Init+0x330>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6613      	str	r3, [r2, #96]	@ 0x60
 800174e:	4b5c      	ldr	r3, [pc, #368]	@ (80018c0 <HAL_GPIO_Init+0x330>)
 8001750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800175a:	4a5a      	ldr	r2, [pc, #360]	@ (80018c4 <HAL_GPIO_Init+0x334>)
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	089b      	lsrs	r3, r3, #2
 8001760:	3302      	adds	r3, #2
 8001762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001766:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	220f      	movs	r2, #15
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001784:	d025      	beq.n	80017d2 <HAL_GPIO_Init+0x242>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4f      	ldr	r2, [pc, #316]	@ (80018c8 <HAL_GPIO_Init+0x338>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d01f      	beq.n	80017ce <HAL_GPIO_Init+0x23e>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4e      	ldr	r2, [pc, #312]	@ (80018cc <HAL_GPIO_Init+0x33c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d019      	beq.n	80017ca <HAL_GPIO_Init+0x23a>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a4d      	ldr	r2, [pc, #308]	@ (80018d0 <HAL_GPIO_Init+0x340>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d013      	beq.n	80017c6 <HAL_GPIO_Init+0x236>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a4c      	ldr	r2, [pc, #304]	@ (80018d4 <HAL_GPIO_Init+0x344>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d00d      	beq.n	80017c2 <HAL_GPIO_Init+0x232>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a4b      	ldr	r2, [pc, #300]	@ (80018d8 <HAL_GPIO_Init+0x348>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d007      	beq.n	80017be <HAL_GPIO_Init+0x22e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a4a      	ldr	r2, [pc, #296]	@ (80018dc <HAL_GPIO_Init+0x34c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d101      	bne.n	80017ba <HAL_GPIO_Init+0x22a>
 80017b6:	2306      	movs	r3, #6
 80017b8:	e00c      	b.n	80017d4 <HAL_GPIO_Init+0x244>
 80017ba:	2307      	movs	r3, #7
 80017bc:	e00a      	b.n	80017d4 <HAL_GPIO_Init+0x244>
 80017be:	2305      	movs	r3, #5
 80017c0:	e008      	b.n	80017d4 <HAL_GPIO_Init+0x244>
 80017c2:	2304      	movs	r3, #4
 80017c4:	e006      	b.n	80017d4 <HAL_GPIO_Init+0x244>
 80017c6:	2303      	movs	r3, #3
 80017c8:	e004      	b.n	80017d4 <HAL_GPIO_Init+0x244>
 80017ca:	2302      	movs	r3, #2
 80017cc:	e002      	b.n	80017d4 <HAL_GPIO_Init+0x244>
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <HAL_GPIO_Init+0x244>
 80017d2:	2300      	movs	r3, #0
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	f002 0203 	and.w	r2, r2, #3
 80017da:	0092      	lsls	r2, r2, #2
 80017dc:	4093      	lsls	r3, r2
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017e4:	4937      	ldr	r1, [pc, #220]	@ (80018c4 <HAL_GPIO_Init+0x334>)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	089b      	lsrs	r3, r3, #2
 80017ea:	3302      	adds	r3, #2
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017f2:	4b3b      	ldr	r3, [pc, #236]	@ (80018e0 <HAL_GPIO_Init+0x350>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	43db      	mvns	r3, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001816:	4a32      	ldr	r2, [pc, #200]	@ (80018e0 <HAL_GPIO_Init+0x350>)
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800181c:	4b30      	ldr	r3, [pc, #192]	@ (80018e0 <HAL_GPIO_Init+0x350>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	43db      	mvns	r3, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001840:	4a27      	ldr	r2, [pc, #156]	@ (80018e0 <HAL_GPIO_Init+0x350>)
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001846:	4b26      	ldr	r3, [pc, #152]	@ (80018e0 <HAL_GPIO_Init+0x350>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	43db      	mvns	r3, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4013      	ands	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4313      	orrs	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800186a:	4a1d      	ldr	r2, [pc, #116]	@ (80018e0 <HAL_GPIO_Init+0x350>)
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001870:	4b1b      	ldr	r3, [pc, #108]	@ (80018e0 <HAL_GPIO_Init+0x350>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	43db      	mvns	r3, r3
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001894:	4a12      	ldr	r2, [pc, #72]	@ (80018e0 <HAL_GPIO_Init+0x350>)
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3301      	adds	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	fa22 f303 	lsr.w	r3, r2, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f47f ae78 	bne.w	80015a0 <HAL_GPIO_Init+0x10>
  }
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	371c      	adds	r7, #28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40010000 	.word	0x40010000
 80018c8:	48000400 	.word	0x48000400
 80018cc:	48000800 	.word	0x48000800
 80018d0:	48000c00 	.word	0x48000c00
 80018d4:	48001000 	.word	0x48001000
 80018d8:	48001400 	.word	0x48001400
 80018dc:	48001800 	.word	0x48001800
 80018e0:	40010400 	.word	0x40010400

080018e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691a      	ldr	r2, [r3, #16]
 80018f4:	887b      	ldrh	r3, [r7, #2]
 80018f6:	4013      	ands	r3, r2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d002      	beq.n	8001902 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018fc:	2301      	movs	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
 8001900:	e001      	b.n	8001906 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001902:	2300      	movs	r3, #0
 8001904:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001906:	7bfb      	ldrb	r3, [r7, #15]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	807b      	strh	r3, [r7, #2]
 8001920:	4613      	mov	r3, r2
 8001922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001924:	787b      	ldrb	r3, [r7, #1]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800192a:	887a      	ldrh	r2, [r7, #2]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001930:	e002      	b.n	8001938 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001932:	887a      	ldrh	r2, [r7, #2]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800194e:	4b08      	ldr	r3, [pc, #32]	@ (8001970 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001950:	695a      	ldr	r2, [r3, #20]
 8001952:	88fb      	ldrh	r3, [r7, #6]
 8001954:	4013      	ands	r3, r2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d006      	beq.n	8001968 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800195a:	4a05      	ldr	r2, [pc, #20]	@ (8001970 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe feb8 	bl	80006d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40010400 	.word	0x40010400

08001974 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e08d      	b.n	8001aa2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d106      	bne.n	80019a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff fa18 	bl	8000dd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2224      	movs	r2, #36	@ 0x24
 80019a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 0201 	bic.w	r2, r2, #1
 80019b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d107      	bne.n	80019ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	e006      	b.n	80019fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80019fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d108      	bne.n	8001a16 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	e007      	b.n	8001a26 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68da      	ldr	r2, [r3, #12]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691a      	ldr	r2, [r3, #16]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69d9      	ldr	r1, [r3, #28]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a1a      	ldr	r2, [r3, #32]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0201 	orr.w	r2, r2, #1
 8001a82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2220      	movs	r2, #32
 8001a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af02      	add	r7, sp, #8
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	4608      	mov	r0, r1
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4603      	mov	r3, r0
 8001abc:	817b      	strh	r3, [r7, #10]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	813b      	strh	r3, [r7, #8]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b20      	cmp	r3, #32
 8001ad0:	f040 80f9 	bne.w	8001cc6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d002      	beq.n	8001ae0 <HAL_I2C_Mem_Write+0x34>
 8001ada:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d105      	bne.n	8001aec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ae6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e0ed      	b.n	8001cc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <HAL_I2C_Mem_Write+0x4e>
 8001af6:	2302      	movs	r3, #2
 8001af8:	e0e6      	b.n	8001cc8 <HAL_I2C_Mem_Write+0x21c>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b02:	f7ff fbb5 	bl	8001270 <HAL_GetTick>
 8001b06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	2319      	movs	r3, #25
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 fed0 	bl	80028ba <I2C_WaitOnFlagUntilTimeout>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0d1      	b.n	8001cc8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2221      	movs	r2, #33	@ 0x21
 8001b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2240      	movs	r2, #64	@ 0x40
 8001b30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6a3a      	ldr	r2, [r7, #32]
 8001b3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001b44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b4c:	88f8      	ldrh	r0, [r7, #6]
 8001b4e:	893a      	ldrh	r2, [r7, #8]
 8001b50:	8979      	ldrh	r1, [r7, #10]
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	9301      	str	r3, [sp, #4]
 8001b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f000 fa67 	bl	8002030 <I2C_RequestMemoryWrite>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0a9      	b.n	8001cc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	2bff      	cmp	r3, #255	@ 0xff
 8001b7c:	d90e      	bls.n	8001b9c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	22ff      	movs	r2, #255	@ 0xff
 8001b82:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	8979      	ldrh	r1, [r7, #10]
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f001 f853 	bl	8002c40 <I2C_TransferConfig>
 8001b9a:	e00f      	b.n	8001bbc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	8979      	ldrh	r1, [r7, #10]
 8001bae:	2300      	movs	r3, #0
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f001 f842 	bl	8002c40 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 fed3 	bl	800296c <I2C_WaitOnTXISFlagUntilTimeout>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e07b      	b.n	8001cc8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd4:	781a      	ldrb	r2, [r3, #0]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	3b01      	subs	r3, #1
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d034      	beq.n	8001c74 <HAL_I2C_Mem_Write+0x1c8>
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d130      	bne.n	8001c74 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2180      	movs	r1, #128	@ 0x80
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	f000 fe4c 	bl	80028ba <I2C_WaitOnFlagUntilTimeout>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e04d      	b.n	8001cc8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	2bff      	cmp	r3, #255	@ 0xff
 8001c34:	d90e      	bls.n	8001c54 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	22ff      	movs	r2, #255	@ 0xff
 8001c3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	8979      	ldrh	r1, [r7, #10]
 8001c44:	2300      	movs	r3, #0
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f000 fff7 	bl	8002c40 <I2C_TransferConfig>
 8001c52:	e00f      	b.n	8001c74 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	8979      	ldrh	r1, [r7, #10]
 8001c66:	2300      	movs	r3, #0
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f000 ffe6 	bl	8002c40 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d19e      	bne.n	8001bbc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f000 feb9 	bl	80029fa <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e01a      	b.n	8001cc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2220      	movs	r2, #32
 8001c98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6859      	ldr	r1, [r3, #4]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd0 <HAL_I2C_Mem_Write+0x224>)
 8001ca6:	400b      	ands	r3, r1
 8001ca8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2220      	movs	r2, #32
 8001cae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e000      	b.n	8001cc8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001cc6:	2302      	movs	r3, #2
  }
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	fe00e800 	.word	0xfe00e800

08001cd4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d005      	beq.n	8001d00 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	68f9      	ldr	r1, [r7, #12]
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	4798      	blx	r3
  }
}
 8001d00:	bf00      	nop
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00f      	beq.n	8001d4a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00a      	beq.n	8001d4a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d38:	f043 0201 	orr.w	r2, r3, #1
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d48:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00f      	beq.n	8001d74 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00a      	beq.n	8001d74 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d62:	f043 0208 	orr.w	r2, r3, #8
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d72:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00f      	beq.n	8001d9e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00a      	beq.n	8001d9e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8c:	f043 0202 	orr.w	r2, r3, #2
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d9c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 030b 	and.w	r3, r3, #11
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001dae:	68f9      	ldr	r1, [r7, #12]
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 fc29 	bl	8002608 <I2C_ITError>
  }
}
 8001db6:	bf00      	nop
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	460b      	mov	r3, r1
 8001df0:	70fb      	strb	r3, [r7, #3]
 8001df2:	4613      	mov	r3, r2
 8001df4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b086      	sub	sp, #24
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	60f8      	str	r0, [r7, #12]
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d101      	bne.n	8001e62 <I2C_Slave_ISR_IT+0x24>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e0e2      	b.n	8002028 <I2C_Slave_ISR_IT+0x1ea>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	f003 0320 	and.w	r3, r3, #32
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d009      	beq.n	8001e88 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d004      	beq.n	8001e88 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001e7e:	6939      	ldr	r1, [r7, #16]
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f000 fa09 	bl	8002298 <I2C_ITSlaveCplt>
 8001e86:	e0ca      	b.n	800201e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d04b      	beq.n	8001f2a <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d046      	beq.n	8001f2a <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d128      	bne.n	8001ef8 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b28      	cmp	r3, #40	@ 0x28
 8001eb0:	d108      	bne.n	8001ec4 <I2C_Slave_ISR_IT+0x86>
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001eb8:	d104      	bne.n	8001ec4 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001eba:	6939      	ldr	r1, [r7, #16]
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 fb4f 	bl	8002560 <I2C_ITListenCplt>
 8001ec2:	e031      	b.n	8001f28 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b29      	cmp	r3, #41	@ 0x29
 8001ece:	d10e      	bne.n	8001eee <I2C_Slave_ISR_IT+0xb0>
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ed6:	d00a      	beq.n	8001eee <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2210      	movs	r2, #16
 8001ede:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f000 fca8 	bl	8002836 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 f97a 	bl	80021e0 <I2C_ITSlaveSeqCplt>
 8001eec:	e01c      	b.n	8001f28 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2210      	movs	r2, #16
 8001ef4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001ef6:	e08f      	b.n	8002018 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2210      	movs	r2, #16
 8001efe:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f04:	f043 0204 	orr.w	r2, r3, #4
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <I2C_Slave_ISR_IT+0xdc>
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f18:	d17e      	bne.n	8002018 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1e:	4619      	mov	r1, r3
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f000 fb71 	bl	8002608 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001f26:	e077      	b.n	8002018 <I2C_Slave_ISR_IT+0x1da>
 8001f28:	e076      	b.n	8002018 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d02f      	beq.n	8001f94 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d02a      	beq.n	8001f94 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d018      	beq.n	8001f7a <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5a:	1c5a      	adds	r2, r3, #1
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f64:	3b01      	subs	r3, #1
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	3b01      	subs	r3, #1
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d14b      	bne.n	800201c <I2C_Slave_ISR_IT+0x1de>
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f8a:	d047      	beq.n	800201c <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 f927 	bl	80021e0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001f92:	e043      	b.n	800201c <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d009      	beq.n	8001fb2 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d004      	beq.n	8001fb2 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001fa8:	6939      	ldr	r1, [r7, #16]
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 f894 	bl	80020d8 <I2C_ITAddrCplt>
 8001fb0:	e035      	b.n	800201e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d030      	beq.n	800201e <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d02b      	beq.n	800201e <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d018      	beq.n	8002002 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd4:	781a      	ldrb	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002000:	e00d      	b.n	800201e <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002008:	d002      	beq.n	8002010 <I2C_Slave_ISR_IT+0x1d2>
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d106      	bne.n	800201e <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 f8e5 	bl	80021e0 <I2C_ITSlaveSeqCplt>
 8002016:	e002      	b.n	800201e <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002018:	bf00      	nop
 800201a:	e000      	b.n	800201e <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800201c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af02      	add	r7, sp, #8
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	4608      	mov	r0, r1
 800203a:	4611      	mov	r1, r2
 800203c:	461a      	mov	r2, r3
 800203e:	4603      	mov	r3, r0
 8002040:	817b      	strh	r3, [r7, #10]
 8002042:	460b      	mov	r3, r1
 8002044:	813b      	strh	r3, [r7, #8]
 8002046:	4613      	mov	r3, r2
 8002048:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800204a:	88fb      	ldrh	r3, [r7, #6]
 800204c:	b2da      	uxtb	r2, r3
 800204e:	8979      	ldrh	r1, [r7, #10]
 8002050:	4b20      	ldr	r3, [pc, #128]	@ (80020d4 <I2C_RequestMemoryWrite+0xa4>)
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f000 fdf1 	bl	8002c40 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800205e:	69fa      	ldr	r2, [r7, #28]
 8002060:	69b9      	ldr	r1, [r7, #24]
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 fc82 	bl	800296c <I2C_WaitOnTXISFlagUntilTimeout>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e02c      	b.n	80020cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d105      	bne.n	8002084 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002078:	893b      	ldrh	r3, [r7, #8]
 800207a:	b2da      	uxtb	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	629a      	str	r2, [r3, #40]	@ 0x28
 8002082:	e015      	b.n	80020b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002084:	893b      	ldrh	r3, [r7, #8]
 8002086:	0a1b      	lsrs	r3, r3, #8
 8002088:	b29b      	uxth	r3, r3
 800208a:	b2da      	uxtb	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002092:	69fa      	ldr	r2, [r7, #28]
 8002094:	69b9      	ldr	r1, [r7, #24]
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 fc68 	bl	800296c <I2C_WaitOnTXISFlagUntilTimeout>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e012      	b.n	80020cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020a6:	893b      	ldrh	r3, [r7, #8]
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	2200      	movs	r2, #0
 80020b8:	2180      	movs	r1, #128	@ 0x80
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 fbfd 	bl	80028ba <I2C_WaitOnFlagUntilTimeout>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	80002000 	.word	0x80002000

080020d8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80020ee:	2b28      	cmp	r3, #40	@ 0x28
 80020f0:	d16a      	bne.n	80021c8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	0c1b      	lsrs	r3, r3, #16
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	0c1b      	lsrs	r3, r3, #16
 800210a:	b29b      	uxth	r3, r3
 800210c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002110:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	b29b      	uxth	r3, r3
 800211a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800211e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	b29b      	uxth	r3, r3
 8002128:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800212c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d138      	bne.n	80021a8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002136:	897b      	ldrh	r3, [r7, #10]
 8002138:	09db      	lsrs	r3, r3, #7
 800213a:	b29a      	uxth	r2, r3
 800213c:	89bb      	ldrh	r3, [r7, #12]
 800213e:	4053      	eors	r3, r2
 8002140:	b29b      	uxth	r3, r3
 8002142:	f003 0306 	and.w	r3, r3, #6
 8002146:	2b00      	cmp	r3, #0
 8002148:	d11c      	bne.n	8002184 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800214a:	897b      	ldrh	r3, [r7, #10]
 800214c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800215c:	2b02      	cmp	r3, #2
 800215e:	d13b      	bne.n	80021d8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2208      	movs	r2, #8
 800216c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002176:	89ba      	ldrh	r2, [r7, #12]
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	4619      	mov	r1, r3
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7ff fe32 	bl	8001de6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002182:	e029      	b.n	80021d8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002184:	893b      	ldrh	r3, [r7, #8]
 8002186:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002188:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 fd89 	bl	8002ca4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800219a:	89ba      	ldrh	r2, [r7, #12]
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	4619      	mov	r1, r3
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f7ff fe20 	bl	8001de6 <HAL_I2C_AddrCallback>
}
 80021a6:	e017      	b.n	80021d8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80021a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 fd79 	bl	8002ca4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80021ba:	89ba      	ldrh	r2, [r7, #12]
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
 80021be:	4619      	mov	r1, r3
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff fe10 	bl	8001de6 <HAL_I2C_AddrCallback>
}
 80021c6:	e007      	b.n	80021d8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2208      	movs	r2, #8
 80021ce:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80021d8:	bf00      	nop
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d008      	beq.n	8002214 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	e00c      	b.n	800222e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d007      	beq.n	800222e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800222c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b29      	cmp	r3, #41	@ 0x29
 8002238:	d112      	bne.n	8002260 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2228      	movs	r2, #40	@ 0x28
 800223e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2221      	movs	r2, #33	@ 0x21
 8002246:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002248:	2101      	movs	r1, #1
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 fd2a 	bl	8002ca4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff fdb0 	bl	8001dbe <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800225e:	e017      	b.n	8002290 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b2a      	cmp	r3, #42	@ 0x2a
 800226a:	d111      	bne.n	8002290 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2228      	movs	r2, #40	@ 0x28
 8002270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2222      	movs	r2, #34	@ 0x22
 8002278:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800227a:	2102      	movs	r1, #2
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 fd11 	bl	8002ca4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff fda1 	bl	8001dd2 <HAL_I2C_SlaveRxCpltCallback>
}
 8002290:	bf00      	nop
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022ba:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2220      	movs	r2, #32
 80022c2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80022c4:	7afb      	ldrb	r3, [r7, #11]
 80022c6:	2b21      	cmp	r3, #33	@ 0x21
 80022c8:	d002      	beq.n	80022d0 <I2C_ITSlaveCplt+0x38>
 80022ca:	7afb      	ldrb	r3, [r7, #11]
 80022cc:	2b29      	cmp	r3, #41	@ 0x29
 80022ce:	d108      	bne.n	80022e2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80022d0:	f248 0101 	movw	r1, #32769	@ 0x8001
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 fce5 	bl	8002ca4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2221      	movs	r2, #33	@ 0x21
 80022de:	631a      	str	r2, [r3, #48]	@ 0x30
 80022e0:	e019      	b.n	8002316 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80022e2:	7afb      	ldrb	r3, [r7, #11]
 80022e4:	2b22      	cmp	r3, #34	@ 0x22
 80022e6:	d002      	beq.n	80022ee <I2C_ITSlaveCplt+0x56>
 80022e8:	7afb      	ldrb	r3, [r7, #11]
 80022ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80022ec:	d108      	bne.n	8002300 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80022ee:	f248 0102 	movw	r1, #32770	@ 0x8002
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 fcd6 	bl	8002ca4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2222      	movs	r2, #34	@ 0x22
 80022fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80022fe:	e00a      	b.n	8002316 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002300:	7afb      	ldrb	r3, [r7, #11]
 8002302:	2b28      	cmp	r3, #40	@ 0x28
 8002304:	d107      	bne.n	8002316 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002306:	f248 0103 	movw	r1, #32771	@ 0x8003
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 fcca 	bl	8002ca4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002324:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6859      	ldr	r1, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4b89      	ldr	r3, [pc, #548]	@ (8002558 <I2C_ITSlaveCplt+0x2c0>)
 8002332:	400b      	ands	r3, r1
 8002334:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 fa7d 	bl	8002836 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d013      	beq.n	800236e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002354:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800235a:	2b00      	cmp	r3, #0
 800235c:	d01f      	beq.n	800239e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	b29a      	uxth	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800236c:	e017      	b.n	800239e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d012      	beq.n	800239e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002386:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800238c:	2b00      	cmp	r3, #0
 800238e:	d006      	beq.n	800239e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	b29a      	uxth	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d020      	beq.n	80023ea <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f023 0304 	bic.w	r3, r3, #4
 80023ae:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00c      	beq.n	80023ea <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	3b01      	subs	r3, #1
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f8:	f043 0204 	orr.w	r2, r3, #4
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	f003 0310 	and.w	r3, r3, #16
 8002406:	2b00      	cmp	r3, #0
 8002408:	d049      	beq.n	800249e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002410:	2b00      	cmp	r3, #0
 8002412:	d044      	beq.n	800249e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002418:	b29b      	uxth	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d128      	bne.n	8002470 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b28      	cmp	r3, #40	@ 0x28
 8002428:	d108      	bne.n	800243c <I2C_ITSlaveCplt+0x1a4>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002430:	d104      	bne.n	800243c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002432:	6979      	ldr	r1, [r7, #20]
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f893 	bl	8002560 <I2C_ITListenCplt>
 800243a:	e030      	b.n	800249e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b29      	cmp	r3, #41	@ 0x29
 8002446:	d10e      	bne.n	8002466 <I2C_ITSlaveCplt+0x1ce>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800244e:	d00a      	beq.n	8002466 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2210      	movs	r2, #16
 8002456:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f9ec 	bl	8002836 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff febe 	bl	80021e0 <I2C_ITSlaveSeqCplt>
 8002464:	e01b      	b.n	800249e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2210      	movs	r2, #16
 800246c:	61da      	str	r2, [r3, #28]
 800246e:	e016      	b.n	800249e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2210      	movs	r2, #16
 8002476:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247c:	f043 0204 	orr.w	r2, r3, #4
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <I2C_ITSlaveCplt+0x1fa>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002490:	d105      	bne.n	800249e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002496:	4619      	mov	r1, r3
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f8b5 	bl	8002608 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d010      	beq.n	80024d6 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b8:	4619      	mov	r1, r3
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f8a4 	bl	8002608 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b28      	cmp	r3, #40	@ 0x28
 80024ca:	d141      	bne.n	8002550 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80024cc:	6979      	ldr	r1, [r7, #20]
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f846 	bl	8002560 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80024d4:	e03c      	b.n	8002550 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024da:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80024de:	d014      	beq.n	800250a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7ff fe7d 	bl	80021e0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a1c      	ldr	r2, [pc, #112]	@ (800255c <I2C_ITSlaveCplt+0x2c4>)
 80024ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff fc7d 	bl	8001e02 <HAL_I2C_ListenCpltCallback>
}
 8002508:	e022      	b.n	8002550 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b22      	cmp	r3, #34	@ 0x22
 8002514:	d10e      	bne.n	8002534 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2220      	movs	r2, #32
 800251a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff fc50 	bl	8001dd2 <HAL_I2C_SlaveRxCpltCallback>
}
 8002532:	e00d      	b.n	8002550 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff fc37 	bl	8001dbe <HAL_I2C_SlaveTxCpltCallback>
}
 8002550:	bf00      	nop
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	fe00e800 	.word	0xfe00e800
 800255c:	ffff0000 	.word	0xffff0000

08002560 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a25      	ldr	r2, [pc, #148]	@ (8002604 <I2C_ITListenCplt+0xa4>)
 800256e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2220      	movs	r2, #32
 800257a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	2b00      	cmp	r3, #0
 8002594:	d022      	beq.n	80025dc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a8:	1c5a      	adds	r2, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d012      	beq.n	80025dc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ba:	3b01      	subs	r3, #1
 80025bc:	b29a      	uxth	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d4:	f043 0204 	orr.w	r2, r3, #4
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80025dc:	f248 0103 	movw	r1, #32771	@ 0x8003
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 fb5f 	bl	8002ca4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2210      	movs	r2, #16
 80025ec:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff fc03 	bl	8001e02 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	ffff0000 	.word	0xffff0000

08002608 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002618:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a6d      	ldr	r2, [pc, #436]	@ (80027dc <I2C_ITError+0x1d4>)
 8002626:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800263a:	7bfb      	ldrb	r3, [r7, #15]
 800263c:	2b28      	cmp	r3, #40	@ 0x28
 800263e:	d005      	beq.n	800264c <I2C_ITError+0x44>
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	2b29      	cmp	r3, #41	@ 0x29
 8002644:	d002      	beq.n	800264c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002646:	7bfb      	ldrb	r3, [r7, #15]
 8002648:	2b2a      	cmp	r3, #42	@ 0x2a
 800264a:	d10b      	bne.n	8002664 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800264c:	2103      	movs	r1, #3
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 fb28 	bl	8002ca4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2228      	movs	r2, #40	@ 0x28
 8002658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a60      	ldr	r2, [pc, #384]	@ (80027e0 <I2C_ITError+0x1d8>)
 8002660:	635a      	str	r2, [r3, #52]	@ 0x34
 8002662:	e030      	b.n	80026c6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002664:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 fb1b 	bl	8002ca4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f8e1 	bl	8002836 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b60      	cmp	r3, #96	@ 0x60
 800267e:	d01f      	beq.n	80026c0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	f003 0320 	and.w	r3, r3, #32
 8002692:	2b20      	cmp	r3, #32
 8002694:	d114      	bne.n	80026c0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	f003 0310 	and.w	r3, r3, #16
 80026a0:	2b10      	cmp	r3, #16
 80026a2:	d109      	bne.n	80026b8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2210      	movs	r2, #16
 80026aa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b0:	f043 0204 	orr.w	r2, r3, #4
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2220      	movs	r2, #32
 80026be:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d039      	beq.n	8002748 <I2C_ITError+0x140>
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	2b11      	cmp	r3, #17
 80026d8:	d002      	beq.n	80026e0 <I2C_ITError+0xd8>
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2b21      	cmp	r3, #33	@ 0x21
 80026de:	d133      	bne.n	8002748 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026ee:	d107      	bne.n	8002700 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80026fe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe ff35 	bl	8001574 <HAL_DMA_GetState>
 800270a:	4603      	mov	r3, r0
 800270c:	2b01      	cmp	r3, #1
 800270e:	d017      	beq.n	8002740 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002714:	4a33      	ldr	r2, [pc, #204]	@ (80027e4 <I2C_ITError+0x1dc>)
 8002716:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002724:	4618      	mov	r0, r3
 8002726:	f7fe fee4 	bl	80014f2 <HAL_DMA_Abort_IT>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d04d      	beq.n	80027cc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800273a:	4610      	mov	r0, r2
 800273c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800273e:	e045      	b.n	80027cc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f851 	bl	80027e8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002746:	e041      	b.n	80027cc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800274c:	2b00      	cmp	r3, #0
 800274e:	d039      	beq.n	80027c4 <I2C_ITError+0x1bc>
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b12      	cmp	r3, #18
 8002754:	d002      	beq.n	800275c <I2C_ITError+0x154>
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b22      	cmp	r3, #34	@ 0x22
 800275a:	d133      	bne.n	80027c4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002766:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800276a:	d107      	bne.n	800277c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800277a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002780:	4618      	mov	r0, r3
 8002782:	f7fe fef7 	bl	8001574 <HAL_DMA_GetState>
 8002786:	4603      	mov	r3, r0
 8002788:	2b01      	cmp	r3, #1
 800278a:	d017      	beq.n	80027bc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002790:	4a14      	ldr	r2, [pc, #80]	@ (80027e4 <I2C_ITError+0x1dc>)
 8002792:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fe fea6 	bl	80014f2 <HAL_DMA_Abort_IT>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d011      	beq.n	80027d0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80027b6:	4610      	mov	r0, r2
 80027b8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80027ba:	e009      	b.n	80027d0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f813 	bl	80027e8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80027c2:	e005      	b.n	80027d0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f80f 	bl	80027e8 <I2C_TreatErrorCallback>
  }
}
 80027ca:	e002      	b.n	80027d2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80027cc:	bf00      	nop
 80027ce:	e000      	b.n	80027d2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80027d0:	bf00      	nop
}
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	ffff0000 	.word	0xffff0000
 80027e0:	08001e3f 	.word	0x08001e3f
 80027e4:	0800287f 	.word	0x0800287f

080027e8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b60      	cmp	r3, #96	@ 0x60
 80027fa:	d10e      	bne.n	800281a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2220      	movs	r2, #32
 8002800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff fb09 	bl	8001e2a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002818:	e009      	b.n	800282e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff faf4 	bl	8001e16 <HAL_I2C_ErrorCallback>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b02      	cmp	r3, #2
 800284a:	d103      	bne.n	8002854 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2200      	movs	r2, #0
 8002852:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b01      	cmp	r3, #1
 8002860:	d007      	beq.n	8002872 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	699a      	ldr	r2, [r3, #24]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 0201 	orr.w	r2, r2, #1
 8002870:	619a      	str	r2, [r3, #24]
  }
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800288a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002898:	2200      	movs	r2, #0
 800289a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a8:	2200      	movs	r2, #0
 80028aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f7ff ff9b 	bl	80027e8 <I2C_TreatErrorCallback>
}
 80028b2:	bf00      	nop
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	603b      	str	r3, [r7, #0]
 80028c6:	4613      	mov	r3, r2
 80028c8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028ca:	e03b      	b.n	8002944 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	6839      	ldr	r1, [r7, #0]
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 f8d5 	bl	8002a80 <I2C_IsErrorOccurred>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e041      	b.n	8002964 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e6:	d02d      	beq.n	8002944 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028e8:	f7fe fcc2 	bl	8001270 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d302      	bcc.n	80028fe <I2C_WaitOnFlagUntilTimeout+0x44>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d122      	bne.n	8002944 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	699a      	ldr	r2, [r3, #24]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	4013      	ands	r3, r2
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	429a      	cmp	r2, r3
 800290c:	bf0c      	ite	eq
 800290e:	2301      	moveq	r3, #1
 8002910:	2300      	movne	r3, #0
 8002912:	b2db      	uxtb	r3, r3
 8002914:	461a      	mov	r2, r3
 8002916:	79fb      	ldrb	r3, [r7, #7]
 8002918:	429a      	cmp	r2, r3
 800291a:	d113      	bne.n	8002944 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002920:	f043 0220 	orr.w	r2, r3, #32
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e00f      	b.n	8002964 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699a      	ldr	r2, [r3, #24]
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	4013      	ands	r3, r2
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	429a      	cmp	r2, r3
 8002952:	bf0c      	ite	eq
 8002954:	2301      	moveq	r3, #1
 8002956:	2300      	movne	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	461a      	mov	r2, r3
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	429a      	cmp	r2, r3
 8002960:	d0b4      	beq.n	80028cc <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002978:	e033      	b.n	80029e2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	68b9      	ldr	r1, [r7, #8]
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 f87e 	bl	8002a80 <I2C_IsErrorOccurred>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e031      	b.n	80029f2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002994:	d025      	beq.n	80029e2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002996:	f7fe fc6b 	bl	8001270 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d302      	bcc.n	80029ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d11a      	bne.n	80029e2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d013      	beq.n	80029e2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029be:	f043 0220 	orr.w	r2, r3, #32
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e007      	b.n	80029f2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d1c4      	bne.n	800297a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b084      	sub	sp, #16
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	60f8      	str	r0, [r7, #12]
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a06:	e02f      	b.n	8002a68 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	68b9      	ldr	r1, [r7, #8]
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 f837 	bl	8002a80 <I2C_IsErrorOccurred>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e02d      	b.n	8002a78 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a1c:	f7fe fc28 	bl	8001270 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d302      	bcc.n	8002a32 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d11a      	bne.n	8002a68 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	f003 0320 	and.w	r3, r3, #32
 8002a3c:	2b20      	cmp	r3, #32
 8002a3e:	d013      	beq.n	8002a68 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a44:	f043 0220 	orr.w	r2, r3, #32
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e007      	b.n	8002a78 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	2b20      	cmp	r3, #32
 8002a74:	d1c8      	bne.n	8002a08 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08a      	sub	sp, #40	@ 0x28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	f003 0310 	and.w	r3, r3, #16
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d068      	beq.n	8002b7e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2210      	movs	r2, #16
 8002ab2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ab4:	e049      	b.n	8002b4a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abc:	d045      	beq.n	8002b4a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002abe:	f7fe fbd7 	bl	8001270 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d302      	bcc.n	8002ad4 <I2C_IsErrorOccurred+0x54>
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d13a      	bne.n	8002b4a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ade:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ae6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002af2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002af6:	d121      	bne.n	8002b3c <I2C_IsErrorOccurred+0xbc>
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002afe:	d01d      	beq.n	8002b3c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002b00:	7cfb      	ldrb	r3, [r7, #19]
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	d01a      	beq.n	8002b3c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b14:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b16:	f7fe fbab 	bl	8001270 <HAL_GetTick>
 8002b1a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b1c:	e00e      	b.n	8002b3c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b1e:	f7fe fba7 	bl	8001270 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b19      	cmp	r3, #25
 8002b2a:	d907      	bls.n	8002b3c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	f043 0320 	orr.w	r3, r3, #32
 8002b32:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002b3a:	e006      	b.n	8002b4a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b20      	cmp	r3, #32
 8002b48:	d1e9      	bne.n	8002b1e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	f003 0320 	and.w	r3, r3, #32
 8002b54:	2b20      	cmp	r3, #32
 8002b56:	d003      	beq.n	8002b60 <I2C_IsErrorOccurred+0xe0>
 8002b58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0aa      	beq.n	8002ab6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d103      	bne.n	8002b70 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	f043 0304 	orr.w	r3, r3, #4
 8002b76:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00b      	beq.n	8002ba8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ba0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00b      	beq.n	8002bca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	f043 0308 	orr.w	r3, r3, #8
 8002bb8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002bc2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00b      	beq.n	8002bec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	f043 0302 	orr.w	r3, r3, #2
 8002bda:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002be4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002bec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d01c      	beq.n	8002c2e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f7ff fe1e 	bl	8002836 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	4b0d      	ldr	r3, [pc, #52]	@ (8002c3c <I2C_IsErrorOccurred+0x1bc>)
 8002c06:	400b      	ands	r3, r1
 8002c08:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	431a      	orrs	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002c2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3728      	adds	r7, #40	@ 0x28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	fe00e800 	.word	0xfe00e800

08002c40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b087      	sub	sp, #28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	607b      	str	r3, [r7, #4]
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	817b      	strh	r3, [r7, #10]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c52:	897b      	ldrh	r3, [r7, #10]
 8002c54:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c58:	7a7b      	ldrb	r3, [r7, #9]
 8002c5a:	041b      	lsls	r3, r3, #16
 8002c5c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c60:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c6e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	0d5b      	lsrs	r3, r3, #21
 8002c7a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002c7e:	4b08      	ldr	r3, [pc, #32]	@ (8002ca0 <I2C_TransferConfig+0x60>)
 8002c80:	430b      	orrs	r3, r1
 8002c82:	43db      	mvns	r3, r3
 8002c84:	ea02 0103 	and.w	r1, r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c92:	bf00      	nop
 8002c94:	371c      	adds	r7, #28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	03ff63ff 	.word	0x03ff63ff

08002ca4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002cb4:	887b      	ldrh	r3, [r7, #2]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00f      	beq.n	8002cde <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8002cc4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002cd2:	2b28      	cmp	r3, #40	@ 0x28
 8002cd4:	d003      	beq.n	8002cde <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002cdc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002cde:	887b      	ldrh	r3, [r7, #2]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00f      	beq.n	8002d08 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8002cee:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002cfc:	2b28      	cmp	r3, #40	@ 0x28
 8002cfe:	d003      	beq.n	8002d08 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002d06:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002d08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	da03      	bge.n	8002d18 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002d16:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002d18:	887b      	ldrh	r3, [r7, #2]
 8002d1a:	2b10      	cmp	r3, #16
 8002d1c:	d103      	bne.n	8002d26 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002d24:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002d26:	887b      	ldrh	r3, [r7, #2]
 8002d28:	2b20      	cmp	r3, #32
 8002d2a:	d103      	bne.n	8002d34 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f043 0320 	orr.w	r3, r3, #32
 8002d32:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002d34:	887b      	ldrh	r3, [r7, #2]
 8002d36:	2b40      	cmp	r3, #64	@ 0x40
 8002d38:	d103      	bne.n	8002d42 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d40:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6819      	ldr	r1, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	43da      	mvns	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	400a      	ands	r2, r1
 8002d52:	601a      	str	r2, [r3, #0]
}
 8002d54:	bf00      	nop
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b20      	cmp	r3, #32
 8002d74:	d138      	bne.n	8002de8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e032      	b.n	8002dea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2224      	movs	r2, #36	@ 0x24
 8002d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0201 	bic.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002db2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6819      	ldr	r1, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0201 	orr.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	e000      	b.n	8002dea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002de8:	2302      	movs	r3, #2
  }
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b085      	sub	sp, #20
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b20      	cmp	r3, #32
 8002e0a:	d139      	bne.n	8002e80 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e033      	b.n	8002e82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2224      	movs	r2, #36	@ 0x24
 8002e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0201 	bic.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e48:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	021b      	lsls	r3, r3, #8
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	e000      	b.n	8002e82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e80:	2302      	movs	r3, #2
  }
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
	...

08002e90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e94:	4b04      	ldr	r3, [pc, #16]	@ (8002ea8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40007000 	.word	0x40007000

08002eac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002eba:	d130      	bne.n	8002f1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ebc:	4b23      	ldr	r3, [pc, #140]	@ (8002f4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ec8:	d038      	beq.n	8002f3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eca:	4b20      	ldr	r3, [pc, #128]	@ (8002f4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ed2:	4a1e      	ldr	r2, [pc, #120]	@ (8002f4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ed4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ed8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002eda:	4b1d      	ldr	r3, [pc, #116]	@ (8002f50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2232      	movs	r2, #50	@ 0x32
 8002ee0:	fb02 f303 	mul.w	r3, r2, r3
 8002ee4:	4a1b      	ldr	r2, [pc, #108]	@ (8002f54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eea:	0c9b      	lsrs	r3, r3, #18
 8002eec:	3301      	adds	r3, #1
 8002eee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ef0:	e002      	b.n	8002ef8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ef8:	4b14      	ldr	r3, [pc, #80]	@ (8002f4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f04:	d102      	bne.n	8002f0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1f2      	bne.n	8002ef2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f18:	d110      	bne.n	8002f3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e00f      	b.n	8002f3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f2a:	d007      	beq.n	8002f3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f2c:	4b07      	ldr	r3, [pc, #28]	@ (8002f4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f34:	4a05      	ldr	r2, [pc, #20]	@ (8002f4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	40007000 	.word	0x40007000
 8002f50:	20000014 	.word	0x20000014
 8002f54:	431bde83 	.word	0x431bde83

08002f58 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b088      	sub	sp, #32
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e3ca      	b.n	8003700 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f6a:	4b97      	ldr	r3, [pc, #604]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 030c 	and.w	r3, r3, #12
 8002f72:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f74:	4b94      	ldr	r3, [pc, #592]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0303 	and.w	r3, r3, #3
 8002f7c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0310 	and.w	r3, r3, #16
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 80e4 	beq.w	8003154 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d007      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x4a>
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	2b0c      	cmp	r3, #12
 8002f96:	f040 808b 	bne.w	80030b0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	f040 8087 	bne.w	80030b0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fa2:	4b89      	ldr	r3, [pc, #548]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d005      	beq.n	8002fba <HAL_RCC_OscConfig+0x62>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e3a2      	b.n	8003700 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a1a      	ldr	r2, [r3, #32]
 8002fbe:	4b82      	ldr	r3, [pc, #520]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d004      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x7c>
 8002fca:	4b7f      	ldr	r3, [pc, #508]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fd2:	e005      	b.n	8002fe0 <HAL_RCC_OscConfig+0x88>
 8002fd4:	4b7c      	ldr	r3, [pc, #496]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 8002fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fda:	091b      	lsrs	r3, r3, #4
 8002fdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d223      	bcs.n	800302c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 fd55 	bl	8003a98 <RCC_SetFlashLatencyFromMSIRange>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e383      	b.n	8003700 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ff8:	4b73      	ldr	r3, [pc, #460]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a72      	ldr	r2, [pc, #456]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 8002ffe:	f043 0308 	orr.w	r3, r3, #8
 8003002:	6013      	str	r3, [r2, #0]
 8003004:	4b70      	ldr	r3, [pc, #448]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	496d      	ldr	r1, [pc, #436]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 8003012:	4313      	orrs	r3, r2
 8003014:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003016:	4b6c      	ldr	r3, [pc, #432]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	021b      	lsls	r3, r3, #8
 8003024:	4968      	ldr	r1, [pc, #416]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 8003026:	4313      	orrs	r3, r2
 8003028:	604b      	str	r3, [r1, #4]
 800302a:	e025      	b.n	8003078 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800302c:	4b66      	ldr	r3, [pc, #408]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a65      	ldr	r2, [pc, #404]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 8003032:	f043 0308 	orr.w	r3, r3, #8
 8003036:	6013      	str	r3, [r2, #0]
 8003038:	4b63      	ldr	r3, [pc, #396]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	4960      	ldr	r1, [pc, #384]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800304a:	4b5f      	ldr	r3, [pc, #380]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	021b      	lsls	r3, r3, #8
 8003058:	495b      	ldr	r1, [pc, #364]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 800305a:	4313      	orrs	r3, r2
 800305c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d109      	bne.n	8003078 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	4618      	mov	r0, r3
 800306a:	f000 fd15 	bl	8003a98 <RCC_SetFlashLatencyFromMSIRange>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e343      	b.n	8003700 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003078:	f000 fc4a 	bl	8003910 <HAL_RCC_GetSysClockFreq>
 800307c:	4602      	mov	r2, r0
 800307e:	4b52      	ldr	r3, [pc, #328]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	091b      	lsrs	r3, r3, #4
 8003084:	f003 030f 	and.w	r3, r3, #15
 8003088:	4950      	ldr	r1, [pc, #320]	@ (80031cc <HAL_RCC_OscConfig+0x274>)
 800308a:	5ccb      	ldrb	r3, [r1, r3]
 800308c:	f003 031f 	and.w	r3, r3, #31
 8003090:	fa22 f303 	lsr.w	r3, r2, r3
 8003094:	4a4e      	ldr	r2, [pc, #312]	@ (80031d0 <HAL_RCC_OscConfig+0x278>)
 8003096:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003098:	4b4e      	ldr	r3, [pc, #312]	@ (80031d4 <HAL_RCC_OscConfig+0x27c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f7fe f897 	bl	80011d0 <HAL_InitTick>
 80030a2:	4603      	mov	r3, r0
 80030a4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d052      	beq.n	8003152 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
 80030ae:	e327      	b.n	8003700 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d032      	beq.n	800311e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030b8:	4b43      	ldr	r3, [pc, #268]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a42      	ldr	r2, [pc, #264]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030c4:	f7fe f8d4 	bl	8001270 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030cc:	f7fe f8d0 	bl	8001270 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e310      	b.n	8003700 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030de:	4b3a      	ldr	r3, [pc, #232]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030ea:	4b37      	ldr	r3, [pc, #220]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a36      	ldr	r2, [pc, #216]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 80030f0:	f043 0308 	orr.w	r3, r3, #8
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	4b34      	ldr	r3, [pc, #208]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	4931      	ldr	r1, [pc, #196]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 8003104:	4313      	orrs	r3, r2
 8003106:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003108:	4b2f      	ldr	r3, [pc, #188]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	021b      	lsls	r3, r3, #8
 8003116:	492c      	ldr	r1, [pc, #176]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 8003118:	4313      	orrs	r3, r2
 800311a:	604b      	str	r3, [r1, #4]
 800311c:	e01a      	b.n	8003154 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800311e:	4b2a      	ldr	r3, [pc, #168]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a29      	ldr	r2, [pc, #164]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 8003124:	f023 0301 	bic.w	r3, r3, #1
 8003128:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800312a:	f7fe f8a1 	bl	8001270 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003132:	f7fe f89d 	bl	8001270 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e2dd      	b.n	8003700 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003144:	4b20      	ldr	r3, [pc, #128]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1f0      	bne.n	8003132 <HAL_RCC_OscConfig+0x1da>
 8003150:	e000      	b.n	8003154 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003152:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d074      	beq.n	800324a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2b08      	cmp	r3, #8
 8003164:	d005      	beq.n	8003172 <HAL_RCC_OscConfig+0x21a>
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	2b0c      	cmp	r3, #12
 800316a:	d10e      	bne.n	800318a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	2b03      	cmp	r3, #3
 8003170:	d10b      	bne.n	800318a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003172:	4b15      	ldr	r3, [pc, #84]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d064      	beq.n	8003248 <HAL_RCC_OscConfig+0x2f0>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d160      	bne.n	8003248 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e2ba      	b.n	8003700 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003192:	d106      	bne.n	80031a2 <HAL_RCC_OscConfig+0x24a>
 8003194:	4b0c      	ldr	r3, [pc, #48]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a0b      	ldr	r2, [pc, #44]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 800319a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	e026      	b.n	80031f0 <HAL_RCC_OscConfig+0x298>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031aa:	d115      	bne.n	80031d8 <HAL_RCC_OscConfig+0x280>
 80031ac:	4b06      	ldr	r3, [pc, #24]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a05      	ldr	r2, [pc, #20]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 80031b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031b6:	6013      	str	r3, [r2, #0]
 80031b8:	4b03      	ldr	r3, [pc, #12]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a02      	ldr	r2, [pc, #8]	@ (80031c8 <HAL_RCC_OscConfig+0x270>)
 80031be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031c2:	6013      	str	r3, [r2, #0]
 80031c4:	e014      	b.n	80031f0 <HAL_RCC_OscConfig+0x298>
 80031c6:	bf00      	nop
 80031c8:	40021000 	.word	0x40021000
 80031cc:	08005ee8 	.word	0x08005ee8
 80031d0:	20000014 	.word	0x20000014
 80031d4:	20000018 	.word	0x20000018
 80031d8:	4ba0      	ldr	r3, [pc, #640]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a9f      	ldr	r2, [pc, #636]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 80031de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	4b9d      	ldr	r3, [pc, #628]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a9c      	ldr	r2, [pc, #624]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 80031ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d013      	beq.n	8003220 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f8:	f7fe f83a 	bl	8001270 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003200:	f7fe f836 	bl	8001270 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b64      	cmp	r3, #100	@ 0x64
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e276      	b.n	8003700 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003212:	4b92      	ldr	r3, [pc, #584]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0x2a8>
 800321e:	e014      	b.n	800324a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003220:	f7fe f826 	bl	8001270 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003228:	f7fe f822 	bl	8001270 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b64      	cmp	r3, #100	@ 0x64
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e262      	b.n	8003700 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800323a:	4b88      	ldr	r3, [pc, #544]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f0      	bne.n	8003228 <HAL_RCC_OscConfig+0x2d0>
 8003246:	e000      	b.n	800324a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d060      	beq.n	8003318 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	2b04      	cmp	r3, #4
 800325a:	d005      	beq.n	8003268 <HAL_RCC_OscConfig+0x310>
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	2b0c      	cmp	r3, #12
 8003260:	d119      	bne.n	8003296 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2b02      	cmp	r3, #2
 8003266:	d116      	bne.n	8003296 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003268:	4b7c      	ldr	r3, [pc, #496]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <HAL_RCC_OscConfig+0x328>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e23f      	b.n	8003700 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003280:	4b76      	ldr	r3, [pc, #472]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	061b      	lsls	r3, r3, #24
 800328e:	4973      	ldr	r1, [pc, #460]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 8003290:	4313      	orrs	r3, r2
 8003292:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003294:	e040      	b.n	8003318 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d023      	beq.n	80032e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800329e:	4b6f      	ldr	r3, [pc, #444]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a6e      	ldr	r2, [pc, #440]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 80032a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032aa:	f7fd ffe1 	bl	8001270 <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032b2:	f7fd ffdd 	bl	8001270 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e21d      	b.n	8003700 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032c4:	4b65      	ldr	r3, [pc, #404]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0f0      	beq.n	80032b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d0:	4b62      	ldr	r3, [pc, #392]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	061b      	lsls	r3, r3, #24
 80032de:	495f      	ldr	r1, [pc, #380]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	604b      	str	r3, [r1, #4]
 80032e4:	e018      	b.n	8003318 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032e6:	4b5d      	ldr	r3, [pc, #372]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a5c      	ldr	r2, [pc, #368]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 80032ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f2:	f7fd ffbd 	bl	8001270 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032fa:	f7fd ffb9 	bl	8001270 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e1f9      	b.n	8003700 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800330c:	4b53      	ldr	r3, [pc, #332]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1f0      	bne.n	80032fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b00      	cmp	r3, #0
 8003322:	d03c      	beq.n	800339e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d01c      	beq.n	8003366 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800332c:	4b4b      	ldr	r3, [pc, #300]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 800332e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003332:	4a4a      	ldr	r2, [pc, #296]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 8003334:	f043 0301 	orr.w	r3, r3, #1
 8003338:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333c:	f7fd ff98 	bl	8001270 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003344:	f7fd ff94 	bl	8001270 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e1d4      	b.n	8003700 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003356:	4b41      	ldr	r3, [pc, #260]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 8003358:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0ef      	beq.n	8003344 <HAL_RCC_OscConfig+0x3ec>
 8003364:	e01b      	b.n	800339e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003366:	4b3d      	ldr	r3, [pc, #244]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 8003368:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800336c:	4a3b      	ldr	r2, [pc, #236]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 800336e:	f023 0301 	bic.w	r3, r3, #1
 8003372:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003376:	f7fd ff7b 	bl	8001270 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800337e:	f7fd ff77 	bl	8001270 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e1b7      	b.n	8003700 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003390:	4b32      	ldr	r3, [pc, #200]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 8003392:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1ef      	bne.n	800337e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0304 	and.w	r3, r3, #4
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 80a6 	beq.w	80034f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ac:	2300      	movs	r3, #0
 80033ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033b0:	4b2a      	ldr	r3, [pc, #168]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 80033b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10d      	bne.n	80033d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033bc:	4b27      	ldr	r3, [pc, #156]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 80033be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c0:	4a26      	ldr	r2, [pc, #152]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 80033c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80033c8:	4b24      	ldr	r3, [pc, #144]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 80033ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033d0:	60bb      	str	r3, [r7, #8]
 80033d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d4:	2301      	movs	r3, #1
 80033d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d8:	4b21      	ldr	r3, [pc, #132]	@ (8003460 <HAL_RCC_OscConfig+0x508>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d118      	bne.n	8003416 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003460 <HAL_RCC_OscConfig+0x508>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003460 <HAL_RCC_OscConfig+0x508>)
 80033ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033f0:	f7fd ff3e 	bl	8001270 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f8:	f7fd ff3a 	bl	8001270 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e17a      	b.n	8003700 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800340a:	4b15      	ldr	r3, [pc, #84]	@ (8003460 <HAL_RCC_OscConfig+0x508>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0f0      	beq.n	80033f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d108      	bne.n	8003430 <HAL_RCC_OscConfig+0x4d8>
 800341e:	4b0f      	ldr	r3, [pc, #60]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 8003420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003424:	4a0d      	ldr	r2, [pc, #52]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800342e:	e029      	b.n	8003484 <HAL_RCC_OscConfig+0x52c>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	2b05      	cmp	r3, #5
 8003436:	d115      	bne.n	8003464 <HAL_RCC_OscConfig+0x50c>
 8003438:	4b08      	ldr	r3, [pc, #32]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800343e:	4a07      	ldr	r2, [pc, #28]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 8003440:	f043 0304 	orr.w	r3, r3, #4
 8003444:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003448:	4b04      	ldr	r3, [pc, #16]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 800344a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800344e:	4a03      	ldr	r2, [pc, #12]	@ (800345c <HAL_RCC_OscConfig+0x504>)
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003458:	e014      	b.n	8003484 <HAL_RCC_OscConfig+0x52c>
 800345a:	bf00      	nop
 800345c:	40021000 	.word	0x40021000
 8003460:	40007000 	.word	0x40007000
 8003464:	4b9c      	ldr	r3, [pc, #624]	@ (80036d8 <HAL_RCC_OscConfig+0x780>)
 8003466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800346a:	4a9b      	ldr	r2, [pc, #620]	@ (80036d8 <HAL_RCC_OscConfig+0x780>)
 800346c:	f023 0301 	bic.w	r3, r3, #1
 8003470:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003474:	4b98      	ldr	r3, [pc, #608]	@ (80036d8 <HAL_RCC_OscConfig+0x780>)
 8003476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800347a:	4a97      	ldr	r2, [pc, #604]	@ (80036d8 <HAL_RCC_OscConfig+0x780>)
 800347c:	f023 0304 	bic.w	r3, r3, #4
 8003480:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d016      	beq.n	80034ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348c:	f7fd fef0 	bl	8001270 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003492:	e00a      	b.n	80034aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003494:	f7fd feec 	bl	8001270 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e12a      	b.n	8003700 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034aa:	4b8b      	ldr	r3, [pc, #556]	@ (80036d8 <HAL_RCC_OscConfig+0x780>)
 80034ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0ed      	beq.n	8003494 <HAL_RCC_OscConfig+0x53c>
 80034b8:	e015      	b.n	80034e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ba:	f7fd fed9 	bl	8001270 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034c0:	e00a      	b.n	80034d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c2:	f7fd fed5 	bl	8001270 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e113      	b.n	8003700 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034d8:	4b7f      	ldr	r3, [pc, #508]	@ (80036d8 <HAL_RCC_OscConfig+0x780>)
 80034da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1ed      	bne.n	80034c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034e6:	7ffb      	ldrb	r3, [r7, #31]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d105      	bne.n	80034f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ec:	4b7a      	ldr	r3, [pc, #488]	@ (80036d8 <HAL_RCC_OscConfig+0x780>)
 80034ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f0:	4a79      	ldr	r2, [pc, #484]	@ (80036d8 <HAL_RCC_OscConfig+0x780>)
 80034f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034f6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80fe 	beq.w	80036fe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003506:	2b02      	cmp	r3, #2
 8003508:	f040 80d0 	bne.w	80036ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800350c:	4b72      	ldr	r3, [pc, #456]	@ (80036d8 <HAL_RCC_OscConfig+0x780>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f003 0203 	and.w	r2, r3, #3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351c:	429a      	cmp	r2, r3
 800351e:	d130      	bne.n	8003582 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352a:	3b01      	subs	r3, #1
 800352c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800352e:	429a      	cmp	r2, r3
 8003530:	d127      	bne.n	8003582 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800353c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800353e:	429a      	cmp	r2, r3
 8003540:	d11f      	bne.n	8003582 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800354c:	2a07      	cmp	r2, #7
 800354e:	bf14      	ite	ne
 8003550:	2201      	movne	r2, #1
 8003552:	2200      	moveq	r2, #0
 8003554:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003556:	4293      	cmp	r3, r2
 8003558:	d113      	bne.n	8003582 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003564:	085b      	lsrs	r3, r3, #1
 8003566:	3b01      	subs	r3, #1
 8003568:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800356a:	429a      	cmp	r2, r3
 800356c:	d109      	bne.n	8003582 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003578:	085b      	lsrs	r3, r3, #1
 800357a:	3b01      	subs	r3, #1
 800357c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800357e:	429a      	cmp	r2, r3
 8003580:	d06e      	beq.n	8003660 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	2b0c      	cmp	r3, #12
 8003586:	d069      	beq.n	800365c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003588:	4b53      	ldr	r3, [pc, #332]	@ (80036d8 <HAL_RCC_OscConfig+0x780>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d105      	bne.n	80035a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003594:	4b50      	ldr	r3, [pc, #320]	@ (80036d8 <HAL_RCC_OscConfig+0x780>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e0ad      	b.n	8003700 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035a4:	4b4c      	ldr	r3, [pc, #304]	@ (80036d8 <HAL_RCC_OscConfig+0x780>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a4b      	ldr	r2, [pc, #300]	@ (80036d8 <HAL_RCC_OscConfig+0x780>)
 80035aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035b0:	f7fd fe5e 	bl	8001270 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b8:	f7fd fe5a 	bl	8001270 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e09a      	b.n	8003700 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ca:	4b43      	ldr	r3, [pc, #268]	@ (80036d8 <HAL_RCC_OscConfig+0x780>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035d6:	4b40      	ldr	r3, [pc, #256]	@ (80036d8 <HAL_RCC_OscConfig+0x780>)
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	4b40      	ldr	r3, [pc, #256]	@ (80036dc <HAL_RCC_OscConfig+0x784>)
 80035dc:	4013      	ands	r3, r2
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80035e6:	3a01      	subs	r2, #1
 80035e8:	0112      	lsls	r2, r2, #4
 80035ea:	4311      	orrs	r1, r2
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80035f0:	0212      	lsls	r2, r2, #8
 80035f2:	4311      	orrs	r1, r2
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80035f8:	0852      	lsrs	r2, r2, #1
 80035fa:	3a01      	subs	r2, #1
 80035fc:	0552      	lsls	r2, r2, #21
 80035fe:	4311      	orrs	r1, r2
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003604:	0852      	lsrs	r2, r2, #1
 8003606:	3a01      	subs	r2, #1
 8003608:	0652      	lsls	r2, r2, #25
 800360a:	4311      	orrs	r1, r2
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003610:	0912      	lsrs	r2, r2, #4
 8003612:	0452      	lsls	r2, r2, #17
 8003614:	430a      	orrs	r2, r1
 8003616:	4930      	ldr	r1, [pc, #192]	@ (80036d8 <HAL_RCC_OscConfig+0x780>)
 8003618:	4313      	orrs	r3, r2
 800361a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800361c:	4b2e      	ldr	r3, [pc, #184]	@ (80036d8 <HAL_RCC_OscConfig+0x780>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a2d      	ldr	r2, [pc, #180]	@ (80036d8 <HAL_RCC_OscConfig+0x780>)
 8003622:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003626:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003628:	4b2b      	ldr	r3, [pc, #172]	@ (80036d8 <HAL_RCC_OscConfig+0x780>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	4a2a      	ldr	r2, [pc, #168]	@ (80036d8 <HAL_RCC_OscConfig+0x780>)
 800362e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003632:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003634:	f7fd fe1c 	bl	8001270 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800363c:	f7fd fe18 	bl	8001270 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e058      	b.n	8003700 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800364e:	4b22      	ldr	r3, [pc, #136]	@ (80036d8 <HAL_RCC_OscConfig+0x780>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0f0      	beq.n	800363c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800365a:	e050      	b.n	80036fe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e04f      	b.n	8003700 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003660:	4b1d      	ldr	r3, [pc, #116]	@ (80036d8 <HAL_RCC_OscConfig+0x780>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d148      	bne.n	80036fe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800366c:	4b1a      	ldr	r3, [pc, #104]	@ (80036d8 <HAL_RCC_OscConfig+0x780>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a19      	ldr	r2, [pc, #100]	@ (80036d8 <HAL_RCC_OscConfig+0x780>)
 8003672:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003676:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003678:	4b17      	ldr	r3, [pc, #92]	@ (80036d8 <HAL_RCC_OscConfig+0x780>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	4a16      	ldr	r2, [pc, #88]	@ (80036d8 <HAL_RCC_OscConfig+0x780>)
 800367e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003682:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003684:	f7fd fdf4 	bl	8001270 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368c:	f7fd fdf0 	bl	8001270 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e030      	b.n	8003700 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800369e:	4b0e      	ldr	r3, [pc, #56]	@ (80036d8 <HAL_RCC_OscConfig+0x780>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0f0      	beq.n	800368c <HAL_RCC_OscConfig+0x734>
 80036aa:	e028      	b.n	80036fe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	2b0c      	cmp	r3, #12
 80036b0:	d023      	beq.n	80036fa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b2:	4b09      	ldr	r3, [pc, #36]	@ (80036d8 <HAL_RCC_OscConfig+0x780>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a08      	ldr	r2, [pc, #32]	@ (80036d8 <HAL_RCC_OscConfig+0x780>)
 80036b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036be:	f7fd fdd7 	bl	8001270 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036c4:	e00c      	b.n	80036e0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c6:	f7fd fdd3 	bl	8001270 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d905      	bls.n	80036e0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e013      	b.n	8003700 <HAL_RCC_OscConfig+0x7a8>
 80036d8:	40021000 	.word	0x40021000
 80036dc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036e0:	4b09      	ldr	r3, [pc, #36]	@ (8003708 <HAL_RCC_OscConfig+0x7b0>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1ec      	bne.n	80036c6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036ec:	4b06      	ldr	r3, [pc, #24]	@ (8003708 <HAL_RCC_OscConfig+0x7b0>)
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	4905      	ldr	r1, [pc, #20]	@ (8003708 <HAL_RCC_OscConfig+0x7b0>)
 80036f2:	4b06      	ldr	r3, [pc, #24]	@ (800370c <HAL_RCC_OscConfig+0x7b4>)
 80036f4:	4013      	ands	r3, r2
 80036f6:	60cb      	str	r3, [r1, #12]
 80036f8:	e001      	b.n	80036fe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3720      	adds	r7, #32
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40021000 	.word	0x40021000
 800370c:	feeefffc 	.word	0xfeeefffc

08003710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0e7      	b.n	80038f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003724:	4b75      	ldr	r3, [pc, #468]	@ (80038fc <HAL_RCC_ClockConfig+0x1ec>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d910      	bls.n	8003754 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003732:	4b72      	ldr	r3, [pc, #456]	@ (80038fc <HAL_RCC_ClockConfig+0x1ec>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f023 0207 	bic.w	r2, r3, #7
 800373a:	4970      	ldr	r1, [pc, #448]	@ (80038fc <HAL_RCC_ClockConfig+0x1ec>)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	4313      	orrs	r3, r2
 8003740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003742:	4b6e      	ldr	r3, [pc, #440]	@ (80038fc <HAL_RCC_ClockConfig+0x1ec>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d001      	beq.n	8003754 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e0cf      	b.n	80038f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d010      	beq.n	8003782 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	4b66      	ldr	r3, [pc, #408]	@ (8003900 <HAL_RCC_ClockConfig+0x1f0>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800376c:	429a      	cmp	r2, r3
 800376e:	d908      	bls.n	8003782 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003770:	4b63      	ldr	r3, [pc, #396]	@ (8003900 <HAL_RCC_ClockConfig+0x1f0>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	4960      	ldr	r1, [pc, #384]	@ (8003900 <HAL_RCC_ClockConfig+0x1f0>)
 800377e:	4313      	orrs	r3, r2
 8003780:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d04c      	beq.n	8003828 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b03      	cmp	r3, #3
 8003794:	d107      	bne.n	80037a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003796:	4b5a      	ldr	r3, [pc, #360]	@ (8003900 <HAL_RCC_ClockConfig+0x1f0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d121      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e0a6      	b.n	80038f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d107      	bne.n	80037be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037ae:	4b54      	ldr	r3, [pc, #336]	@ (8003900 <HAL_RCC_ClockConfig+0x1f0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d115      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e09a      	b.n	80038f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d107      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037c6:	4b4e      	ldr	r3, [pc, #312]	@ (8003900 <HAL_RCC_ClockConfig+0x1f0>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d109      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e08e      	b.n	80038f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003900 <HAL_RCC_ClockConfig+0x1f0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e086      	b.n	80038f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037e6:	4b46      	ldr	r3, [pc, #280]	@ (8003900 <HAL_RCC_ClockConfig+0x1f0>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f023 0203 	bic.w	r2, r3, #3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	4943      	ldr	r1, [pc, #268]	@ (8003900 <HAL_RCC_ClockConfig+0x1f0>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037f8:	f7fd fd3a 	bl	8001270 <HAL_GetTick>
 80037fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fe:	e00a      	b.n	8003816 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003800:	f7fd fd36 	bl	8001270 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800380e:	4293      	cmp	r3, r2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e06e      	b.n	80038f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003816:	4b3a      	ldr	r3, [pc, #232]	@ (8003900 <HAL_RCC_ClockConfig+0x1f0>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 020c 	and.w	r2, r3, #12
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	429a      	cmp	r2, r3
 8003826:	d1eb      	bne.n	8003800 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d010      	beq.n	8003856 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	4b31      	ldr	r3, [pc, #196]	@ (8003900 <HAL_RCC_ClockConfig+0x1f0>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003840:	429a      	cmp	r2, r3
 8003842:	d208      	bcs.n	8003856 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003844:	4b2e      	ldr	r3, [pc, #184]	@ (8003900 <HAL_RCC_ClockConfig+0x1f0>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	492b      	ldr	r1, [pc, #172]	@ (8003900 <HAL_RCC_ClockConfig+0x1f0>)
 8003852:	4313      	orrs	r3, r2
 8003854:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003856:	4b29      	ldr	r3, [pc, #164]	@ (80038fc <HAL_RCC_ClockConfig+0x1ec>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d210      	bcs.n	8003886 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003864:	4b25      	ldr	r3, [pc, #148]	@ (80038fc <HAL_RCC_ClockConfig+0x1ec>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f023 0207 	bic.w	r2, r3, #7
 800386c:	4923      	ldr	r1, [pc, #140]	@ (80038fc <HAL_RCC_ClockConfig+0x1ec>)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	4313      	orrs	r3, r2
 8003872:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003874:	4b21      	ldr	r3, [pc, #132]	@ (80038fc <HAL_RCC_ClockConfig+0x1ec>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d001      	beq.n	8003886 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e036      	b.n	80038f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	2b00      	cmp	r3, #0
 8003890:	d008      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003892:	4b1b      	ldr	r3, [pc, #108]	@ (8003900 <HAL_RCC_ClockConfig+0x1f0>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	4918      	ldr	r1, [pc, #96]	@ (8003900 <HAL_RCC_ClockConfig+0x1f0>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0308 	and.w	r3, r3, #8
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d009      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038b0:	4b13      	ldr	r3, [pc, #76]	@ (8003900 <HAL_RCC_ClockConfig+0x1f0>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	4910      	ldr	r1, [pc, #64]	@ (8003900 <HAL_RCC_ClockConfig+0x1f0>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038c4:	f000 f824 	bl	8003910 <HAL_RCC_GetSysClockFreq>
 80038c8:	4602      	mov	r2, r0
 80038ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003900 <HAL_RCC_ClockConfig+0x1f0>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	091b      	lsrs	r3, r3, #4
 80038d0:	f003 030f 	and.w	r3, r3, #15
 80038d4:	490b      	ldr	r1, [pc, #44]	@ (8003904 <HAL_RCC_ClockConfig+0x1f4>)
 80038d6:	5ccb      	ldrb	r3, [r1, r3]
 80038d8:	f003 031f 	and.w	r3, r3, #31
 80038dc:	fa22 f303 	lsr.w	r3, r2, r3
 80038e0:	4a09      	ldr	r2, [pc, #36]	@ (8003908 <HAL_RCC_ClockConfig+0x1f8>)
 80038e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038e4:	4b09      	ldr	r3, [pc, #36]	@ (800390c <HAL_RCC_ClockConfig+0x1fc>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fd fc71 	bl	80011d0 <HAL_InitTick>
 80038ee:	4603      	mov	r3, r0
 80038f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80038f2:	7afb      	ldrb	r3, [r7, #11]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40022000 	.word	0x40022000
 8003900:	40021000 	.word	0x40021000
 8003904:	08005ee8 	.word	0x08005ee8
 8003908:	20000014 	.word	0x20000014
 800390c:	20000018 	.word	0x20000018

08003910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003910:	b480      	push	{r7}
 8003912:	b089      	sub	sp, #36	@ 0x24
 8003914:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003916:	2300      	movs	r3, #0
 8003918:	61fb      	str	r3, [r7, #28]
 800391a:	2300      	movs	r3, #0
 800391c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800391e:	4b3e      	ldr	r3, [pc, #248]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 030c 	and.w	r3, r3, #12
 8003926:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003928:	4b3b      	ldr	r3, [pc, #236]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0x108>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f003 0303 	and.w	r3, r3, #3
 8003930:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d005      	beq.n	8003944 <HAL_RCC_GetSysClockFreq+0x34>
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	2b0c      	cmp	r3, #12
 800393c:	d121      	bne.n	8003982 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d11e      	bne.n	8003982 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003944:	4b34      	ldr	r3, [pc, #208]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0308 	and.w	r3, r3, #8
 800394c:	2b00      	cmp	r3, #0
 800394e:	d107      	bne.n	8003960 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003950:	4b31      	ldr	r3, [pc, #196]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003952:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003956:	0a1b      	lsrs	r3, r3, #8
 8003958:	f003 030f 	and.w	r3, r3, #15
 800395c:	61fb      	str	r3, [r7, #28]
 800395e:	e005      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003960:	4b2d      	ldr	r3, [pc, #180]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800396c:	4a2b      	ldr	r2, [pc, #172]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x10c>)
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003974:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10d      	bne.n	8003998 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003980:	e00a      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	2b04      	cmp	r3, #4
 8003986:	d102      	bne.n	800398e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003988:	4b25      	ldr	r3, [pc, #148]	@ (8003a20 <HAL_RCC_GetSysClockFreq+0x110>)
 800398a:	61bb      	str	r3, [r7, #24]
 800398c:	e004      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	2b08      	cmp	r3, #8
 8003992:	d101      	bne.n	8003998 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003994:	4b23      	ldr	r3, [pc, #140]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x114>)
 8003996:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	2b0c      	cmp	r3, #12
 800399c:	d134      	bne.n	8003a08 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800399e:	4b1e      	ldr	r3, [pc, #120]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0x108>)
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d003      	beq.n	80039b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b03      	cmp	r3, #3
 80039b2:	d003      	beq.n	80039bc <HAL_RCC_GetSysClockFreq+0xac>
 80039b4:	e005      	b.n	80039c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80039b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003a20 <HAL_RCC_GetSysClockFreq+0x110>)
 80039b8:	617b      	str	r3, [r7, #20]
      break;
 80039ba:	e005      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80039bc:	4b19      	ldr	r3, [pc, #100]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x114>)
 80039be:	617b      	str	r3, [r7, #20]
      break;
 80039c0:	e002      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	617b      	str	r3, [r7, #20]
      break;
 80039c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039c8:	4b13      	ldr	r3, [pc, #76]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0x108>)
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	091b      	lsrs	r3, r3, #4
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	3301      	adds	r3, #1
 80039d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039d6:	4b10      	ldr	r3, [pc, #64]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0x108>)
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	0a1b      	lsrs	r3, r3, #8
 80039dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	fb03 f202 	mul.w	r2, r3, r2
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0x108>)
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	0e5b      	lsrs	r3, r3, #25
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	3301      	adds	r3, #1
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a06:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a08:	69bb      	ldr	r3, [r7, #24]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3724      	adds	r7, #36	@ 0x24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	08005f00 	.word	0x08005f00
 8003a20:	00f42400 	.word	0x00f42400
 8003a24:	007a1200 	.word	0x007a1200

08003a28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a2c:	4b03      	ldr	r3, [pc, #12]	@ (8003a3c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	20000014 	.word	0x20000014

08003a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a44:	f7ff fff0 	bl	8003a28 <HAL_RCC_GetHCLKFreq>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	4b06      	ldr	r3, [pc, #24]	@ (8003a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	0a1b      	lsrs	r3, r3, #8
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	4904      	ldr	r1, [pc, #16]	@ (8003a68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a56:	5ccb      	ldrb	r3, [r1, r3]
 8003a58:	f003 031f 	and.w	r3, r3, #31
 8003a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40021000 	.word	0x40021000
 8003a68:	08005ef8 	.word	0x08005ef8

08003a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a70:	f7ff ffda 	bl	8003a28 <HAL_RCC_GetHCLKFreq>
 8003a74:	4602      	mov	r2, r0
 8003a76:	4b06      	ldr	r3, [pc, #24]	@ (8003a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	0adb      	lsrs	r3, r3, #11
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	4904      	ldr	r1, [pc, #16]	@ (8003a94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a82:	5ccb      	ldrb	r3, [r1, r3]
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40021000 	.word	0x40021000
 8003a94:	08005ef8 	.word	0x08005ef8

08003a98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003aa4:	4b2a      	ldr	r3, [pc, #168]	@ (8003b50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ab0:	f7ff f9ee 	bl	8002e90 <HAL_PWREx_GetVoltageRange>
 8003ab4:	6178      	str	r0, [r7, #20]
 8003ab6:	e014      	b.n	8003ae2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ab8:	4b25      	ldr	r3, [pc, #148]	@ (8003b50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003abc:	4a24      	ldr	r2, [pc, #144]	@ (8003b50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003abe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ac2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ac4:	4b22      	ldr	r3, [pc, #136]	@ (8003b50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ad0:	f7ff f9de 	bl	8002e90 <HAL_PWREx_GetVoltageRange>
 8003ad4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8003b50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ada:	4a1d      	ldr	r2, [pc, #116]	@ (8003b50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003adc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ae0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ae8:	d10b      	bne.n	8003b02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b80      	cmp	r3, #128	@ 0x80
 8003aee:	d919      	bls.n	8003b24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2ba0      	cmp	r3, #160	@ 0xa0
 8003af4:	d902      	bls.n	8003afc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003af6:	2302      	movs	r3, #2
 8003af8:	613b      	str	r3, [r7, #16]
 8003afa:	e013      	b.n	8003b24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003afc:	2301      	movs	r3, #1
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	e010      	b.n	8003b24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b80      	cmp	r3, #128	@ 0x80
 8003b06:	d902      	bls.n	8003b0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b08:	2303      	movs	r3, #3
 8003b0a:	613b      	str	r3, [r7, #16]
 8003b0c:	e00a      	b.n	8003b24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b80      	cmp	r3, #128	@ 0x80
 8003b12:	d102      	bne.n	8003b1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b14:	2302      	movs	r3, #2
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	e004      	b.n	8003b24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b70      	cmp	r3, #112	@ 0x70
 8003b1e:	d101      	bne.n	8003b24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b20:	2301      	movs	r3, #1
 8003b22:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b24:	4b0b      	ldr	r3, [pc, #44]	@ (8003b54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f023 0207 	bic.w	r2, r3, #7
 8003b2c:	4909      	ldr	r1, [pc, #36]	@ (8003b54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b34:	4b07      	ldr	r3, [pc, #28]	@ (8003b54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d001      	beq.n	8003b46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40021000 	.word	0x40021000
 8003b54:	40022000 	.word	0x40022000

08003b58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b60:	2300      	movs	r3, #0
 8003b62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b64:	2300      	movs	r3, #0
 8003b66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d041      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b78:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b7c:	d02a      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b7e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b82:	d824      	bhi.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b84:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b88:	d008      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b8a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b8e:	d81e      	bhi.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b98:	d010      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b9a:	e018      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b9c:	4b86      	ldr	r3, [pc, #536]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	4a85      	ldr	r2, [pc, #532]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ba2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ba6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ba8:	e015      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3304      	adds	r3, #4
 8003bae:	2100      	movs	r1, #0
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 fabb 	bl	800412c <RCCEx_PLLSAI1_Config>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bba:	e00c      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3320      	adds	r3, #32
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fba6 	bl	8004314 <RCCEx_PLLSAI2_Config>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bcc:	e003      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	74fb      	strb	r3, [r7, #19]
      break;
 8003bd2:	e000      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003bd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bd6:	7cfb      	ldrb	r3, [r7, #19]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10b      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bdc:	4b76      	ldr	r3, [pc, #472]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003be2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bea:	4973      	ldr	r1, [pc, #460]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003bf2:	e001      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf4:	7cfb      	ldrb	r3, [r7, #19]
 8003bf6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d041      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c08:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c0c:	d02a      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c0e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c12:	d824      	bhi.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c18:	d008      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c1e:	d81e      	bhi.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00a      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c28:	d010      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c2a:	e018      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c2c:	4b62      	ldr	r3, [pc, #392]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	4a61      	ldr	r2, [pc, #388]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c36:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c38:	e015      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	2100      	movs	r1, #0
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 fa73 	bl	800412c <RCCEx_PLLSAI1_Config>
 8003c46:	4603      	mov	r3, r0
 8003c48:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c4a:	e00c      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3320      	adds	r3, #32
 8003c50:	2100      	movs	r1, #0
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fb5e 	bl	8004314 <RCCEx_PLLSAI2_Config>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c5c:	e003      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	74fb      	strb	r3, [r7, #19]
      break;
 8003c62:	e000      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c66:	7cfb      	ldrb	r3, [r7, #19]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10b      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c6c:	4b52      	ldr	r3, [pc, #328]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c72:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c7a:	494f      	ldr	r1, [pc, #316]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c82:	e001      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c84:	7cfb      	ldrb	r3, [r7, #19]
 8003c86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 80a0 	beq.w	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c96:	2300      	movs	r3, #0
 8003c98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c9a:	4b47      	ldr	r3, [pc, #284]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003caa:	2300      	movs	r3, #0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00d      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cb0:	4b41      	ldr	r3, [pc, #260]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb4:	4a40      	ldr	r2, [pc, #256]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cba:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cbc:	4b3e      	ldr	r3, [pc, #248]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ccc:	4b3b      	ldr	r3, [pc, #236]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a3a      	ldr	r2, [pc, #232]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cd8:	f7fd faca 	bl	8001270 <HAL_GetTick>
 8003cdc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cde:	e009      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce0:	f7fd fac6 	bl	8001270 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d902      	bls.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	74fb      	strb	r3, [r7, #19]
        break;
 8003cf2:	e005      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cf4:	4b31      	ldr	r3, [pc, #196]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0ef      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d00:	7cfb      	ldrb	r3, [r7, #19]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d15c      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d06:	4b2c      	ldr	r3, [pc, #176]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d01f      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d019      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d24:	4b24      	ldr	r3, [pc, #144]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d30:	4b21      	ldr	r3, [pc, #132]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d36:	4a20      	ldr	r2, [pc, #128]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d40:	4b1d      	ldr	r3, [pc, #116]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d46:	4a1c      	ldr	r2, [pc, #112]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d50:	4a19      	ldr	r2, [pc, #100]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d016      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d62:	f7fd fa85 	bl	8001270 <HAL_GetTick>
 8003d66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d68:	e00b      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d6a:	f7fd fa81 	bl	8001270 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d902      	bls.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	74fb      	strb	r3, [r7, #19]
            break;
 8003d80:	e006      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d82:	4b0d      	ldr	r3, [pc, #52]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0ec      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003d90:	7cfb      	ldrb	r3, [r7, #19]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10c      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d96:	4b08      	ldr	r3, [pc, #32]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003da6:	4904      	ldr	r1, [pc, #16]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003dae:	e009      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003db0:	7cfb      	ldrb	r3, [r7, #19]
 8003db2:	74bb      	strb	r3, [r7, #18]
 8003db4:	e006      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003db6:	bf00      	nop
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc0:	7cfb      	ldrb	r3, [r7, #19]
 8003dc2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dc4:	7c7b      	ldrb	r3, [r7, #17]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d105      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dca:	4b9e      	ldr	r3, [pc, #632]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dce:	4a9d      	ldr	r2, [pc, #628]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dd4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003de2:	4b98      	ldr	r3, [pc, #608]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de8:	f023 0203 	bic.w	r2, r3, #3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df0:	4994      	ldr	r1, [pc, #592]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00a      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e04:	4b8f      	ldr	r3, [pc, #572]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e0a:	f023 020c 	bic.w	r2, r3, #12
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e12:	498c      	ldr	r1, [pc, #560]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e26:	4b87      	ldr	r3, [pc, #540]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e2c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e34:	4983      	ldr	r1, [pc, #524]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00a      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e48:	4b7e      	ldr	r3, [pc, #504]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e4e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e56:	497b      	ldr	r1, [pc, #492]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0310 	and.w	r3, r3, #16
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e6a:	4b76      	ldr	r3, [pc, #472]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e78:	4972      	ldr	r1, [pc, #456]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0320 	and.w	r3, r3, #32
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00a      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e8c:	4b6d      	ldr	r3, [pc, #436]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e92:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e9a:	496a      	ldr	r1, [pc, #424]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00a      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eae:	4b65      	ldr	r3, [pc, #404]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ebc:	4961      	ldr	r1, [pc, #388]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00a      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ed0:	4b5c      	ldr	r3, [pc, #368]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ede:	4959      	ldr	r1, [pc, #356]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ef2:	4b54      	ldr	r3, [pc, #336]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f00:	4950      	ldr	r1, [pc, #320]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00a      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f14:	4b4b      	ldr	r3, [pc, #300]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f1a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f22:	4948      	ldr	r1, [pc, #288]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00a      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f36:	4b43      	ldr	r3, [pc, #268]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f44:	493f      	ldr	r1, [pc, #252]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d028      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f58:	4b3a      	ldr	r3, [pc, #232]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f66:	4937      	ldr	r1, [pc, #220]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f76:	d106      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f78:	4b32      	ldr	r3, [pc, #200]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4a31      	ldr	r2, [pc, #196]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f82:	60d3      	str	r3, [r2, #12]
 8003f84:	e011      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f8a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f8e:	d10c      	bne.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3304      	adds	r3, #4
 8003f94:	2101      	movs	r1, #1
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 f8c8 	bl	800412c <RCCEx_PLLSAI1_Config>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fa0:	7cfb      	ldrb	r3, [r7, #19]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003fa6:	7cfb      	ldrb	r3, [r7, #19]
 8003fa8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d028      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fb6:	4b23      	ldr	r3, [pc, #140]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fbc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc4:	491f      	ldr	r1, [pc, #124]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fd4:	d106      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	4a1a      	ldr	r2, [pc, #104]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fdc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fe0:	60d3      	str	r3, [r2, #12]
 8003fe2:	e011      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fec:	d10c      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 f899 	bl	800412c <RCCEx_PLLSAI1_Config>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ffe:	7cfb      	ldrb	r3, [r7, #19]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004004:	7cfb      	ldrb	r3, [r7, #19]
 8004006:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d02b      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004014:	4b0b      	ldr	r3, [pc, #44]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004022:	4908      	ldr	r1, [pc, #32]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800402e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004032:	d109      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004034:	4b03      	ldr	r3, [pc, #12]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	4a02      	ldr	r2, [pc, #8]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800403a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800403e:	60d3      	str	r3, [r2, #12]
 8004040:	e014      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004042:	bf00      	nop
 8004044:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800404c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004050:	d10c      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3304      	adds	r3, #4
 8004056:	2101      	movs	r1, #1
 8004058:	4618      	mov	r0, r3
 800405a:	f000 f867 	bl	800412c <RCCEx_PLLSAI1_Config>
 800405e:	4603      	mov	r3, r0
 8004060:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004062:	7cfb      	ldrb	r3, [r7, #19]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004068:	7cfb      	ldrb	r3, [r7, #19]
 800406a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d02f      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004078:	4b2b      	ldr	r3, [pc, #172]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800407a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800407e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004086:	4928      	ldr	r1, [pc, #160]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004092:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004096:	d10d      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3304      	adds	r3, #4
 800409c:	2102      	movs	r1, #2
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 f844 	bl	800412c <RCCEx_PLLSAI1_Config>
 80040a4:	4603      	mov	r3, r0
 80040a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040a8:	7cfb      	ldrb	r3, [r7, #19]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d014      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040ae:	7cfb      	ldrb	r3, [r7, #19]
 80040b0:	74bb      	strb	r3, [r7, #18]
 80040b2:	e011      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040bc:	d10c      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3320      	adds	r3, #32
 80040c2:	2102      	movs	r1, #2
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 f925 	bl	8004314 <RCCEx_PLLSAI2_Config>
 80040ca:	4603      	mov	r3, r0
 80040cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040ce:	7cfb      	ldrb	r3, [r7, #19]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040d4:	7cfb      	ldrb	r3, [r7, #19]
 80040d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00a      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040e4:	4b10      	ldr	r3, [pc, #64]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ea:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040f2:	490d      	ldr	r1, [pc, #52]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00b      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004106:	4b08      	ldr	r3, [pc, #32]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800410c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004116:	4904      	ldr	r1, [pc, #16]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800411e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40021000 	.word	0x40021000

0800412c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800413a:	4b75      	ldr	r3, [pc, #468]	@ (8004310 <RCCEx_PLLSAI1_Config+0x1e4>)
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d018      	beq.n	8004178 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004146:	4b72      	ldr	r3, [pc, #456]	@ (8004310 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f003 0203 	and.w	r2, r3, #3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d10d      	bne.n	8004172 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
       ||
 800415a:	2b00      	cmp	r3, #0
 800415c:	d009      	beq.n	8004172 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800415e:	4b6c      	ldr	r3, [pc, #432]	@ (8004310 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	091b      	lsrs	r3, r3, #4
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
       ||
 800416e:	429a      	cmp	r2, r3
 8004170:	d047      	beq.n	8004202 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	73fb      	strb	r3, [r7, #15]
 8004176:	e044      	b.n	8004202 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b03      	cmp	r3, #3
 800417e:	d018      	beq.n	80041b2 <RCCEx_PLLSAI1_Config+0x86>
 8004180:	2b03      	cmp	r3, #3
 8004182:	d825      	bhi.n	80041d0 <RCCEx_PLLSAI1_Config+0xa4>
 8004184:	2b01      	cmp	r3, #1
 8004186:	d002      	beq.n	800418e <RCCEx_PLLSAI1_Config+0x62>
 8004188:	2b02      	cmp	r3, #2
 800418a:	d009      	beq.n	80041a0 <RCCEx_PLLSAI1_Config+0x74>
 800418c:	e020      	b.n	80041d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800418e:	4b60      	ldr	r3, [pc, #384]	@ (8004310 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d11d      	bne.n	80041d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800419e:	e01a      	b.n	80041d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041a0:	4b5b      	ldr	r3, [pc, #364]	@ (8004310 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d116      	bne.n	80041da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041b0:	e013      	b.n	80041da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041b2:	4b57      	ldr	r3, [pc, #348]	@ (8004310 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10f      	bne.n	80041de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041be:	4b54      	ldr	r3, [pc, #336]	@ (8004310 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d109      	bne.n	80041de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041ce:	e006      	b.n	80041de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	73fb      	strb	r3, [r7, #15]
      break;
 80041d4:	e004      	b.n	80041e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041d6:	bf00      	nop
 80041d8:	e002      	b.n	80041e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041da:	bf00      	nop
 80041dc:	e000      	b.n	80041e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041de:	bf00      	nop
    }

    if(status == HAL_OK)
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10d      	bne.n	8004202 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041e6:	4b4a      	ldr	r3, [pc, #296]	@ (8004310 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6819      	ldr	r1, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	430b      	orrs	r3, r1
 80041fc:	4944      	ldr	r1, [pc, #272]	@ (8004310 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d17d      	bne.n	8004304 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004208:	4b41      	ldr	r3, [pc, #260]	@ (8004310 <RCCEx_PLLSAI1_Config+0x1e4>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a40      	ldr	r2, [pc, #256]	@ (8004310 <RCCEx_PLLSAI1_Config+0x1e4>)
 800420e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004212:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004214:	f7fd f82c 	bl	8001270 <HAL_GetTick>
 8004218:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800421a:	e009      	b.n	8004230 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800421c:	f7fd f828 	bl	8001270 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d902      	bls.n	8004230 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	73fb      	strb	r3, [r7, #15]
        break;
 800422e:	e005      	b.n	800423c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004230:	4b37      	ldr	r3, [pc, #220]	@ (8004310 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1ef      	bne.n	800421c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800423c:	7bfb      	ldrb	r3, [r7, #15]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d160      	bne.n	8004304 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d111      	bne.n	800426c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004248:	4b31      	ldr	r3, [pc, #196]	@ (8004310 <RCCEx_PLLSAI1_Config+0x1e4>)
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004250:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6892      	ldr	r2, [r2, #8]
 8004258:	0211      	lsls	r1, r2, #8
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	68d2      	ldr	r2, [r2, #12]
 800425e:	0912      	lsrs	r2, r2, #4
 8004260:	0452      	lsls	r2, r2, #17
 8004262:	430a      	orrs	r2, r1
 8004264:	492a      	ldr	r1, [pc, #168]	@ (8004310 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004266:	4313      	orrs	r3, r2
 8004268:	610b      	str	r3, [r1, #16]
 800426a:	e027      	b.n	80042bc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d112      	bne.n	8004298 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004272:	4b27      	ldr	r3, [pc, #156]	@ (8004310 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800427a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6892      	ldr	r2, [r2, #8]
 8004282:	0211      	lsls	r1, r2, #8
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6912      	ldr	r2, [r2, #16]
 8004288:	0852      	lsrs	r2, r2, #1
 800428a:	3a01      	subs	r2, #1
 800428c:	0552      	lsls	r2, r2, #21
 800428e:	430a      	orrs	r2, r1
 8004290:	491f      	ldr	r1, [pc, #124]	@ (8004310 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004292:	4313      	orrs	r3, r2
 8004294:	610b      	str	r3, [r1, #16]
 8004296:	e011      	b.n	80042bc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004298:	4b1d      	ldr	r3, [pc, #116]	@ (8004310 <RCCEx_PLLSAI1_Config+0x1e4>)
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80042a0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6892      	ldr	r2, [r2, #8]
 80042a8:	0211      	lsls	r1, r2, #8
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6952      	ldr	r2, [r2, #20]
 80042ae:	0852      	lsrs	r2, r2, #1
 80042b0:	3a01      	subs	r2, #1
 80042b2:	0652      	lsls	r2, r2, #25
 80042b4:	430a      	orrs	r2, r1
 80042b6:	4916      	ldr	r1, [pc, #88]	@ (8004310 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042bc:	4b14      	ldr	r3, [pc, #80]	@ (8004310 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a13      	ldr	r2, [pc, #76]	@ (8004310 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c8:	f7fc ffd2 	bl	8001270 <HAL_GetTick>
 80042cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042ce:	e009      	b.n	80042e4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042d0:	f7fc ffce 	bl	8001270 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d902      	bls.n	80042e4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	73fb      	strb	r3, [r7, #15]
          break;
 80042e2:	e005      	b.n	80042f0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004310 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0ef      	beq.n	80042d0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d106      	bne.n	8004304 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042f6:	4b06      	ldr	r3, [pc, #24]	@ (8004310 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f8:	691a      	ldr	r2, [r3, #16]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	4904      	ldr	r1, [pc, #16]	@ (8004310 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004300:	4313      	orrs	r3, r2
 8004302:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004304:	7bfb      	ldrb	r3, [r7, #15]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	40021000 	.word	0x40021000

08004314 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004322:	4b6a      	ldr	r3, [pc, #424]	@ (80044cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d018      	beq.n	8004360 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800432e:	4b67      	ldr	r3, [pc, #412]	@ (80044cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	f003 0203 	and.w	r2, r3, #3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	429a      	cmp	r2, r3
 800433c:	d10d      	bne.n	800435a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
       ||
 8004342:	2b00      	cmp	r3, #0
 8004344:	d009      	beq.n	800435a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004346:	4b61      	ldr	r3, [pc, #388]	@ (80044cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	091b      	lsrs	r3, r3, #4
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	1c5a      	adds	r2, r3, #1
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
       ||
 8004356:	429a      	cmp	r2, r3
 8004358:	d047      	beq.n	80043ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	73fb      	strb	r3, [r7, #15]
 800435e:	e044      	b.n	80043ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b03      	cmp	r3, #3
 8004366:	d018      	beq.n	800439a <RCCEx_PLLSAI2_Config+0x86>
 8004368:	2b03      	cmp	r3, #3
 800436a:	d825      	bhi.n	80043b8 <RCCEx_PLLSAI2_Config+0xa4>
 800436c:	2b01      	cmp	r3, #1
 800436e:	d002      	beq.n	8004376 <RCCEx_PLLSAI2_Config+0x62>
 8004370:	2b02      	cmp	r3, #2
 8004372:	d009      	beq.n	8004388 <RCCEx_PLLSAI2_Config+0x74>
 8004374:	e020      	b.n	80043b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004376:	4b55      	ldr	r3, [pc, #340]	@ (80044cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d11d      	bne.n	80043be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004386:	e01a      	b.n	80043be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004388:	4b50      	ldr	r3, [pc, #320]	@ (80044cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004390:	2b00      	cmp	r3, #0
 8004392:	d116      	bne.n	80043c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004398:	e013      	b.n	80043c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800439a:	4b4c      	ldr	r3, [pc, #304]	@ (80044cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10f      	bne.n	80043c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043a6:	4b49      	ldr	r3, [pc, #292]	@ (80044cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d109      	bne.n	80043c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043b6:	e006      	b.n	80043c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	73fb      	strb	r3, [r7, #15]
      break;
 80043bc:	e004      	b.n	80043c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043be:	bf00      	nop
 80043c0:	e002      	b.n	80043c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043c2:	bf00      	nop
 80043c4:	e000      	b.n	80043c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80043c8:	7bfb      	ldrb	r3, [r7, #15]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10d      	bne.n	80043ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043ce:	4b3f      	ldr	r3, [pc, #252]	@ (80044cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6819      	ldr	r1, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	3b01      	subs	r3, #1
 80043e0:	011b      	lsls	r3, r3, #4
 80043e2:	430b      	orrs	r3, r1
 80043e4:	4939      	ldr	r1, [pc, #228]	@ (80044cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d167      	bne.n	80044c0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043f0:	4b36      	ldr	r3, [pc, #216]	@ (80044cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a35      	ldr	r2, [pc, #212]	@ (80044cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043fc:	f7fc ff38 	bl	8001270 <HAL_GetTick>
 8004400:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004402:	e009      	b.n	8004418 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004404:	f7fc ff34 	bl	8001270 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d902      	bls.n	8004418 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	73fb      	strb	r3, [r7, #15]
        break;
 8004416:	e005      	b.n	8004424 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004418:	4b2c      	ldr	r3, [pc, #176]	@ (80044cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1ef      	bne.n	8004404 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004424:	7bfb      	ldrb	r3, [r7, #15]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d14a      	bne.n	80044c0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d111      	bne.n	8004454 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004430:	4b26      	ldr	r3, [pc, #152]	@ (80044cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004438:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6892      	ldr	r2, [r2, #8]
 8004440:	0211      	lsls	r1, r2, #8
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	68d2      	ldr	r2, [r2, #12]
 8004446:	0912      	lsrs	r2, r2, #4
 8004448:	0452      	lsls	r2, r2, #17
 800444a:	430a      	orrs	r2, r1
 800444c:	491f      	ldr	r1, [pc, #124]	@ (80044cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800444e:	4313      	orrs	r3, r2
 8004450:	614b      	str	r3, [r1, #20]
 8004452:	e011      	b.n	8004478 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004454:	4b1d      	ldr	r3, [pc, #116]	@ (80044cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800445c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6892      	ldr	r2, [r2, #8]
 8004464:	0211      	lsls	r1, r2, #8
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6912      	ldr	r2, [r2, #16]
 800446a:	0852      	lsrs	r2, r2, #1
 800446c:	3a01      	subs	r2, #1
 800446e:	0652      	lsls	r2, r2, #25
 8004470:	430a      	orrs	r2, r1
 8004472:	4916      	ldr	r1, [pc, #88]	@ (80044cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004474:	4313      	orrs	r3, r2
 8004476:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004478:	4b14      	ldr	r3, [pc, #80]	@ (80044cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a13      	ldr	r2, [pc, #76]	@ (80044cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800447e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004482:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004484:	f7fc fef4 	bl	8001270 <HAL_GetTick>
 8004488:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800448a:	e009      	b.n	80044a0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800448c:	f7fc fef0 	bl	8001270 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d902      	bls.n	80044a0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	73fb      	strb	r3, [r7, #15]
          break;
 800449e:	e005      	b.n	80044ac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044a0:	4b0a      	ldr	r3, [pc, #40]	@ (80044cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0ef      	beq.n	800448c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d106      	bne.n	80044c0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80044b2:	4b06      	ldr	r3, [pc, #24]	@ (80044cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b4:	695a      	ldr	r2, [r3, #20]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	4904      	ldr	r1, [pc, #16]	@ (80044cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	40021000 	.word	0x40021000

080044d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e040      	b.n	8004564 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d106      	bne.n	80044f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7fc fcda 	bl	8000eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2224      	movs	r2, #36	@ 0x24
 80044fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 0201 	bic.w	r2, r2, #1
 800450c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fb6a 	bl	8004bf0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f8af 	bl	8004680 <UART_SetConfig>
 8004522:	4603      	mov	r3, r0
 8004524:	2b01      	cmp	r3, #1
 8004526:	d101      	bne.n	800452c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e01b      	b.n	8004564 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800453a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800454a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 0201 	orr.w	r2, r2, #1
 800455a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 fbe9 	bl	8004d34 <UART_CheckIdleState>
 8004562:	4603      	mov	r3, r0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b08a      	sub	sp, #40	@ 0x28
 8004570:	af02      	add	r7, sp, #8
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	603b      	str	r3, [r7, #0]
 8004578:	4613      	mov	r3, r2
 800457a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004580:	2b20      	cmp	r3, #32
 8004582:	d177      	bne.n	8004674 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <HAL_UART_Transmit+0x24>
 800458a:	88fb      	ldrh	r3, [r7, #6]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e070      	b.n	8004676 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2221      	movs	r2, #33	@ 0x21
 80045a0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045a2:	f7fc fe65 	bl	8001270 <HAL_GetTick>
 80045a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	88fa      	ldrh	r2, [r7, #6]
 80045ac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	88fa      	ldrh	r2, [r7, #6]
 80045b4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045c0:	d108      	bne.n	80045d4 <HAL_UART_Transmit+0x68>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d104      	bne.n	80045d4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80045ca:	2300      	movs	r3, #0
 80045cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	61bb      	str	r3, [r7, #24]
 80045d2:	e003      	b.n	80045dc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045d8:	2300      	movs	r3, #0
 80045da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045dc:	e02f      	b.n	800463e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2200      	movs	r2, #0
 80045e6:	2180      	movs	r1, #128	@ 0x80
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 fc4b 	bl	8004e84 <UART_WaitOnFlagUntilTimeout>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d004      	beq.n	80045fe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2220      	movs	r2, #32
 80045f8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e03b      	b.n	8004676 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10b      	bne.n	800461c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	881a      	ldrh	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004610:	b292      	uxth	r2, r2
 8004612:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	3302      	adds	r3, #2
 8004618:	61bb      	str	r3, [r7, #24]
 800461a:	e007      	b.n	800462c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	781a      	ldrb	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	3301      	adds	r3, #1
 800462a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004644:	b29b      	uxth	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1c9      	bne.n	80045de <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	2200      	movs	r2, #0
 8004652:	2140      	movs	r1, #64	@ 0x40
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 fc15 	bl	8004e84 <UART_WaitOnFlagUntilTimeout>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d004      	beq.n	800466a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2220      	movs	r2, #32
 8004664:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e005      	b.n	8004676 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2220      	movs	r2, #32
 800466e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004670:	2300      	movs	r3, #0
 8004672:	e000      	b.n	8004676 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004674:	2302      	movs	r3, #2
  }
}
 8004676:	4618      	mov	r0, r3
 8004678:	3720      	adds	r7, #32
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004684:	b08a      	sub	sp, #40	@ 0x28
 8004686:	af00      	add	r7, sp, #0
 8004688:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	431a      	orrs	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	431a      	orrs	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	69db      	ldr	r3, [r3, #28]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	4ba4      	ldr	r3, [pc, #656]	@ (8004940 <UART_SetConfig+0x2c0>)
 80046b0:	4013      	ands	r3, r2
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	6812      	ldr	r2, [r2, #0]
 80046b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046b8:	430b      	orrs	r3, r1
 80046ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a99      	ldr	r2, [pc, #612]	@ (8004944 <UART_SetConfig+0x2c4>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d004      	beq.n	80046ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046e8:	4313      	orrs	r3, r2
 80046ea:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046fc:	430a      	orrs	r2, r1
 80046fe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a90      	ldr	r2, [pc, #576]	@ (8004948 <UART_SetConfig+0x2c8>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d126      	bne.n	8004758 <UART_SetConfig+0xd8>
 800470a:	4b90      	ldr	r3, [pc, #576]	@ (800494c <UART_SetConfig+0x2cc>)
 800470c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004710:	f003 0303 	and.w	r3, r3, #3
 8004714:	2b03      	cmp	r3, #3
 8004716:	d81b      	bhi.n	8004750 <UART_SetConfig+0xd0>
 8004718:	a201      	add	r2, pc, #4	@ (adr r2, 8004720 <UART_SetConfig+0xa0>)
 800471a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471e:	bf00      	nop
 8004720:	08004731 	.word	0x08004731
 8004724:	08004741 	.word	0x08004741
 8004728:	08004739 	.word	0x08004739
 800472c:	08004749 	.word	0x08004749
 8004730:	2301      	movs	r3, #1
 8004732:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004736:	e116      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004738:	2302      	movs	r3, #2
 800473a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800473e:	e112      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004740:	2304      	movs	r3, #4
 8004742:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004746:	e10e      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004748:	2308      	movs	r3, #8
 800474a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800474e:	e10a      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004750:	2310      	movs	r3, #16
 8004752:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004756:	e106      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a7c      	ldr	r2, [pc, #496]	@ (8004950 <UART_SetConfig+0x2d0>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d138      	bne.n	80047d4 <UART_SetConfig+0x154>
 8004762:	4b7a      	ldr	r3, [pc, #488]	@ (800494c <UART_SetConfig+0x2cc>)
 8004764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004768:	f003 030c 	and.w	r3, r3, #12
 800476c:	2b0c      	cmp	r3, #12
 800476e:	d82d      	bhi.n	80047cc <UART_SetConfig+0x14c>
 8004770:	a201      	add	r2, pc, #4	@ (adr r2, 8004778 <UART_SetConfig+0xf8>)
 8004772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004776:	bf00      	nop
 8004778:	080047ad 	.word	0x080047ad
 800477c:	080047cd 	.word	0x080047cd
 8004780:	080047cd 	.word	0x080047cd
 8004784:	080047cd 	.word	0x080047cd
 8004788:	080047bd 	.word	0x080047bd
 800478c:	080047cd 	.word	0x080047cd
 8004790:	080047cd 	.word	0x080047cd
 8004794:	080047cd 	.word	0x080047cd
 8004798:	080047b5 	.word	0x080047b5
 800479c:	080047cd 	.word	0x080047cd
 80047a0:	080047cd 	.word	0x080047cd
 80047a4:	080047cd 	.word	0x080047cd
 80047a8:	080047c5 	.word	0x080047c5
 80047ac:	2300      	movs	r3, #0
 80047ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047b2:	e0d8      	b.n	8004966 <UART_SetConfig+0x2e6>
 80047b4:	2302      	movs	r3, #2
 80047b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ba:	e0d4      	b.n	8004966 <UART_SetConfig+0x2e6>
 80047bc:	2304      	movs	r3, #4
 80047be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047c2:	e0d0      	b.n	8004966 <UART_SetConfig+0x2e6>
 80047c4:	2308      	movs	r3, #8
 80047c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ca:	e0cc      	b.n	8004966 <UART_SetConfig+0x2e6>
 80047cc:	2310      	movs	r3, #16
 80047ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047d2:	e0c8      	b.n	8004966 <UART_SetConfig+0x2e6>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a5e      	ldr	r2, [pc, #376]	@ (8004954 <UART_SetConfig+0x2d4>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d125      	bne.n	800482a <UART_SetConfig+0x1aa>
 80047de:	4b5b      	ldr	r3, [pc, #364]	@ (800494c <UART_SetConfig+0x2cc>)
 80047e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80047e8:	2b30      	cmp	r3, #48	@ 0x30
 80047ea:	d016      	beq.n	800481a <UART_SetConfig+0x19a>
 80047ec:	2b30      	cmp	r3, #48	@ 0x30
 80047ee:	d818      	bhi.n	8004822 <UART_SetConfig+0x1a2>
 80047f0:	2b20      	cmp	r3, #32
 80047f2:	d00a      	beq.n	800480a <UART_SetConfig+0x18a>
 80047f4:	2b20      	cmp	r3, #32
 80047f6:	d814      	bhi.n	8004822 <UART_SetConfig+0x1a2>
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <UART_SetConfig+0x182>
 80047fc:	2b10      	cmp	r3, #16
 80047fe:	d008      	beq.n	8004812 <UART_SetConfig+0x192>
 8004800:	e00f      	b.n	8004822 <UART_SetConfig+0x1a2>
 8004802:	2300      	movs	r3, #0
 8004804:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004808:	e0ad      	b.n	8004966 <UART_SetConfig+0x2e6>
 800480a:	2302      	movs	r3, #2
 800480c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004810:	e0a9      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004812:	2304      	movs	r3, #4
 8004814:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004818:	e0a5      	b.n	8004966 <UART_SetConfig+0x2e6>
 800481a:	2308      	movs	r3, #8
 800481c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004820:	e0a1      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004822:	2310      	movs	r3, #16
 8004824:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004828:	e09d      	b.n	8004966 <UART_SetConfig+0x2e6>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a4a      	ldr	r2, [pc, #296]	@ (8004958 <UART_SetConfig+0x2d8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d125      	bne.n	8004880 <UART_SetConfig+0x200>
 8004834:	4b45      	ldr	r3, [pc, #276]	@ (800494c <UART_SetConfig+0x2cc>)
 8004836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800483a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800483e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004840:	d016      	beq.n	8004870 <UART_SetConfig+0x1f0>
 8004842:	2bc0      	cmp	r3, #192	@ 0xc0
 8004844:	d818      	bhi.n	8004878 <UART_SetConfig+0x1f8>
 8004846:	2b80      	cmp	r3, #128	@ 0x80
 8004848:	d00a      	beq.n	8004860 <UART_SetConfig+0x1e0>
 800484a:	2b80      	cmp	r3, #128	@ 0x80
 800484c:	d814      	bhi.n	8004878 <UART_SetConfig+0x1f8>
 800484e:	2b00      	cmp	r3, #0
 8004850:	d002      	beq.n	8004858 <UART_SetConfig+0x1d8>
 8004852:	2b40      	cmp	r3, #64	@ 0x40
 8004854:	d008      	beq.n	8004868 <UART_SetConfig+0x1e8>
 8004856:	e00f      	b.n	8004878 <UART_SetConfig+0x1f8>
 8004858:	2300      	movs	r3, #0
 800485a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800485e:	e082      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004860:	2302      	movs	r3, #2
 8004862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004866:	e07e      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004868:	2304      	movs	r3, #4
 800486a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800486e:	e07a      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004870:	2308      	movs	r3, #8
 8004872:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004876:	e076      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004878:	2310      	movs	r3, #16
 800487a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800487e:	e072      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a35      	ldr	r2, [pc, #212]	@ (800495c <UART_SetConfig+0x2dc>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d12a      	bne.n	80048e0 <UART_SetConfig+0x260>
 800488a:	4b30      	ldr	r3, [pc, #192]	@ (800494c <UART_SetConfig+0x2cc>)
 800488c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004890:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004894:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004898:	d01a      	beq.n	80048d0 <UART_SetConfig+0x250>
 800489a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800489e:	d81b      	bhi.n	80048d8 <UART_SetConfig+0x258>
 80048a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048a4:	d00c      	beq.n	80048c0 <UART_SetConfig+0x240>
 80048a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048aa:	d815      	bhi.n	80048d8 <UART_SetConfig+0x258>
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d003      	beq.n	80048b8 <UART_SetConfig+0x238>
 80048b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048b4:	d008      	beq.n	80048c8 <UART_SetConfig+0x248>
 80048b6:	e00f      	b.n	80048d8 <UART_SetConfig+0x258>
 80048b8:	2300      	movs	r3, #0
 80048ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048be:	e052      	b.n	8004966 <UART_SetConfig+0x2e6>
 80048c0:	2302      	movs	r3, #2
 80048c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048c6:	e04e      	b.n	8004966 <UART_SetConfig+0x2e6>
 80048c8:	2304      	movs	r3, #4
 80048ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ce:	e04a      	b.n	8004966 <UART_SetConfig+0x2e6>
 80048d0:	2308      	movs	r3, #8
 80048d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048d6:	e046      	b.n	8004966 <UART_SetConfig+0x2e6>
 80048d8:	2310      	movs	r3, #16
 80048da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048de:	e042      	b.n	8004966 <UART_SetConfig+0x2e6>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a17      	ldr	r2, [pc, #92]	@ (8004944 <UART_SetConfig+0x2c4>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d13a      	bne.n	8004960 <UART_SetConfig+0x2e0>
 80048ea:	4b18      	ldr	r3, [pc, #96]	@ (800494c <UART_SetConfig+0x2cc>)
 80048ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80048f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048f8:	d01a      	beq.n	8004930 <UART_SetConfig+0x2b0>
 80048fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048fe:	d81b      	bhi.n	8004938 <UART_SetConfig+0x2b8>
 8004900:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004904:	d00c      	beq.n	8004920 <UART_SetConfig+0x2a0>
 8004906:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800490a:	d815      	bhi.n	8004938 <UART_SetConfig+0x2b8>
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <UART_SetConfig+0x298>
 8004910:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004914:	d008      	beq.n	8004928 <UART_SetConfig+0x2a8>
 8004916:	e00f      	b.n	8004938 <UART_SetConfig+0x2b8>
 8004918:	2300      	movs	r3, #0
 800491a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800491e:	e022      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004920:	2302      	movs	r3, #2
 8004922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004926:	e01e      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004928:	2304      	movs	r3, #4
 800492a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800492e:	e01a      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004930:	2308      	movs	r3, #8
 8004932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004936:	e016      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004938:	2310      	movs	r3, #16
 800493a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800493e:	e012      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004940:	efff69f3 	.word	0xefff69f3
 8004944:	40008000 	.word	0x40008000
 8004948:	40013800 	.word	0x40013800
 800494c:	40021000 	.word	0x40021000
 8004950:	40004400 	.word	0x40004400
 8004954:	40004800 	.word	0x40004800
 8004958:	40004c00 	.word	0x40004c00
 800495c:	40005000 	.word	0x40005000
 8004960:	2310      	movs	r3, #16
 8004962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a9f      	ldr	r2, [pc, #636]	@ (8004be8 <UART_SetConfig+0x568>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d17a      	bne.n	8004a66 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004970:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004974:	2b08      	cmp	r3, #8
 8004976:	d824      	bhi.n	80049c2 <UART_SetConfig+0x342>
 8004978:	a201      	add	r2, pc, #4	@ (adr r2, 8004980 <UART_SetConfig+0x300>)
 800497a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497e:	bf00      	nop
 8004980:	080049a5 	.word	0x080049a5
 8004984:	080049c3 	.word	0x080049c3
 8004988:	080049ad 	.word	0x080049ad
 800498c:	080049c3 	.word	0x080049c3
 8004990:	080049b3 	.word	0x080049b3
 8004994:	080049c3 	.word	0x080049c3
 8004998:	080049c3 	.word	0x080049c3
 800499c:	080049c3 	.word	0x080049c3
 80049a0:	080049bb 	.word	0x080049bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a4:	f7ff f84c 	bl	8003a40 <HAL_RCC_GetPCLK1Freq>
 80049a8:	61f8      	str	r0, [r7, #28]
        break;
 80049aa:	e010      	b.n	80049ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049ac:	4b8f      	ldr	r3, [pc, #572]	@ (8004bec <UART_SetConfig+0x56c>)
 80049ae:	61fb      	str	r3, [r7, #28]
        break;
 80049b0:	e00d      	b.n	80049ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049b2:	f7fe ffad 	bl	8003910 <HAL_RCC_GetSysClockFreq>
 80049b6:	61f8      	str	r0, [r7, #28]
        break;
 80049b8:	e009      	b.n	80049ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049be:	61fb      	str	r3, [r7, #28]
        break;
 80049c0:	e005      	b.n	80049ce <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80049cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 80fb 	beq.w	8004bcc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	4613      	mov	r3, r2
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	4413      	add	r3, r2
 80049e0:	69fa      	ldr	r2, [r7, #28]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d305      	bcc.n	80049f2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049ec:	69fa      	ldr	r2, [r7, #28]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d903      	bls.n	80049fa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80049f8:	e0e8      	b.n	8004bcc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	2200      	movs	r2, #0
 80049fe:	461c      	mov	r4, r3
 8004a00:	4615      	mov	r5, r2
 8004a02:	f04f 0200 	mov.w	r2, #0
 8004a06:	f04f 0300 	mov.w	r3, #0
 8004a0a:	022b      	lsls	r3, r5, #8
 8004a0c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004a10:	0222      	lsls	r2, r4, #8
 8004a12:	68f9      	ldr	r1, [r7, #12]
 8004a14:	6849      	ldr	r1, [r1, #4]
 8004a16:	0849      	lsrs	r1, r1, #1
 8004a18:	2000      	movs	r0, #0
 8004a1a:	4688      	mov	r8, r1
 8004a1c:	4681      	mov	r9, r0
 8004a1e:	eb12 0a08 	adds.w	sl, r2, r8
 8004a22:	eb43 0b09 	adc.w	fp, r3, r9
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	603b      	str	r3, [r7, #0]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a34:	4650      	mov	r0, sl
 8004a36:	4659      	mov	r1, fp
 8004a38:	f7fb fbc6 	bl	80001c8 <__aeabi_uldivmod>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4613      	mov	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a4a:	d308      	bcc.n	8004a5e <UART_SetConfig+0x3de>
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a52:	d204      	bcs.n	8004a5e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	60da      	str	r2, [r3, #12]
 8004a5c:	e0b6      	b.n	8004bcc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004a64:	e0b2      	b.n	8004bcc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a6e:	d15e      	bne.n	8004b2e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004a70:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a74:	2b08      	cmp	r3, #8
 8004a76:	d828      	bhi.n	8004aca <UART_SetConfig+0x44a>
 8004a78:	a201      	add	r2, pc, #4	@ (adr r2, 8004a80 <UART_SetConfig+0x400>)
 8004a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7e:	bf00      	nop
 8004a80:	08004aa5 	.word	0x08004aa5
 8004a84:	08004aad 	.word	0x08004aad
 8004a88:	08004ab5 	.word	0x08004ab5
 8004a8c:	08004acb 	.word	0x08004acb
 8004a90:	08004abb 	.word	0x08004abb
 8004a94:	08004acb 	.word	0x08004acb
 8004a98:	08004acb 	.word	0x08004acb
 8004a9c:	08004acb 	.word	0x08004acb
 8004aa0:	08004ac3 	.word	0x08004ac3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004aa4:	f7fe ffcc 	bl	8003a40 <HAL_RCC_GetPCLK1Freq>
 8004aa8:	61f8      	str	r0, [r7, #28]
        break;
 8004aaa:	e014      	b.n	8004ad6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aac:	f7fe ffde 	bl	8003a6c <HAL_RCC_GetPCLK2Freq>
 8004ab0:	61f8      	str	r0, [r7, #28]
        break;
 8004ab2:	e010      	b.n	8004ad6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ab4:	4b4d      	ldr	r3, [pc, #308]	@ (8004bec <UART_SetConfig+0x56c>)
 8004ab6:	61fb      	str	r3, [r7, #28]
        break;
 8004ab8:	e00d      	b.n	8004ad6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aba:	f7fe ff29 	bl	8003910 <HAL_RCC_GetSysClockFreq>
 8004abe:	61f8      	str	r0, [r7, #28]
        break;
 8004ac0:	e009      	b.n	8004ad6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ac2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ac6:	61fb      	str	r3, [r7, #28]
        break;
 8004ac8:	e005      	b.n	8004ad6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004ad4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d077      	beq.n	8004bcc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	005a      	lsls	r2, r3, #1
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	085b      	lsrs	r3, r3, #1
 8004ae6:	441a      	add	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	2b0f      	cmp	r3, #15
 8004af6:	d916      	bls.n	8004b26 <UART_SetConfig+0x4a6>
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004afe:	d212      	bcs.n	8004b26 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	f023 030f 	bic.w	r3, r3, #15
 8004b08:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	085b      	lsrs	r3, r3, #1
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	f003 0307 	and.w	r3, r3, #7
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	8afb      	ldrh	r3, [r7, #22]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	8afa      	ldrh	r2, [r7, #22]
 8004b22:	60da      	str	r2, [r3, #12]
 8004b24:	e052      	b.n	8004bcc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b2c:	e04e      	b.n	8004bcc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b2e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d827      	bhi.n	8004b86 <UART_SetConfig+0x506>
 8004b36:	a201      	add	r2, pc, #4	@ (adr r2, 8004b3c <UART_SetConfig+0x4bc>)
 8004b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3c:	08004b61 	.word	0x08004b61
 8004b40:	08004b69 	.word	0x08004b69
 8004b44:	08004b71 	.word	0x08004b71
 8004b48:	08004b87 	.word	0x08004b87
 8004b4c:	08004b77 	.word	0x08004b77
 8004b50:	08004b87 	.word	0x08004b87
 8004b54:	08004b87 	.word	0x08004b87
 8004b58:	08004b87 	.word	0x08004b87
 8004b5c:	08004b7f 	.word	0x08004b7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b60:	f7fe ff6e 	bl	8003a40 <HAL_RCC_GetPCLK1Freq>
 8004b64:	61f8      	str	r0, [r7, #28]
        break;
 8004b66:	e014      	b.n	8004b92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b68:	f7fe ff80 	bl	8003a6c <HAL_RCC_GetPCLK2Freq>
 8004b6c:	61f8      	str	r0, [r7, #28]
        break;
 8004b6e:	e010      	b.n	8004b92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b70:	4b1e      	ldr	r3, [pc, #120]	@ (8004bec <UART_SetConfig+0x56c>)
 8004b72:	61fb      	str	r3, [r7, #28]
        break;
 8004b74:	e00d      	b.n	8004b92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b76:	f7fe fecb 	bl	8003910 <HAL_RCC_GetSysClockFreq>
 8004b7a:	61f8      	str	r0, [r7, #28]
        break;
 8004b7c:	e009      	b.n	8004b92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b82:	61fb      	str	r3, [r7, #28]
        break;
 8004b84:	e005      	b.n	8004b92 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b90:	bf00      	nop
    }

    if (pclk != 0U)
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d019      	beq.n	8004bcc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	085a      	lsrs	r2, r3, #1
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	441a      	add	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004baa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	2b0f      	cmp	r3, #15
 8004bb0:	d909      	bls.n	8004bc6 <UART_SetConfig+0x546>
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bb8:	d205      	bcs.n	8004bc6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	60da      	str	r2, [r3, #12]
 8004bc4:	e002      	b.n	8004bcc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004bd8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3728      	adds	r7, #40	@ 0x28
 8004be0:	46bd      	mov	sp, r7
 8004be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004be6:	bf00      	nop
 8004be8:	40008000 	.word	0x40008000
 8004bec:	00f42400 	.word	0x00f42400

08004bf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfc:	f003 0308 	and.w	r3, r3, #8
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00a      	beq.n	8004c1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00a      	beq.n	8004c5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c62:	f003 0304 	and.w	r3, r3, #4
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00a      	beq.n	8004c80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c84:	f003 0310 	and.w	r3, r3, #16
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00a      	beq.n	8004ca2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca6:	f003 0320 	and.w	r3, r3, #32
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d01a      	beq.n	8004d06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cee:	d10a      	bne.n	8004d06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	605a      	str	r2, [r3, #4]
  }
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b098      	sub	sp, #96	@ 0x60
 8004d38:	af02      	add	r7, sp, #8
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d44:	f7fc fa94 	bl	8001270 <HAL_GetTick>
 8004d48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0308 	and.w	r3, r3, #8
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d12e      	bne.n	8004db6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d60:	2200      	movs	r2, #0
 8004d62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f88c 	bl	8004e84 <UART_WaitOnFlagUntilTimeout>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d021      	beq.n	8004db6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d7a:	e853 3f00 	ldrex	r3, [r3]
 8004d7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d86:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d90:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d92:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d98:	e841 2300 	strex	r3, r2, [r1]
 8004d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1e6      	bne.n	8004d72 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2220      	movs	r2, #32
 8004da8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e062      	b.n	8004e7c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d149      	bne.n	8004e58 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dc4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f856 	bl	8004e84 <UART_WaitOnFlagUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d03c      	beq.n	8004e58 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de6:	e853 3f00 	ldrex	r3, [r3]
 8004dea:	623b      	str	r3, [r7, #32]
   return(result);
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e04:	e841 2300 	strex	r3, r2, [r1]
 8004e08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1e6      	bne.n	8004dde <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3308      	adds	r3, #8
 8004e16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	e853 3f00 	ldrex	r3, [r3]
 8004e1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0301 	bic.w	r3, r3, #1
 8004e26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3308      	adds	r3, #8
 8004e2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e30:	61fa      	str	r2, [r7, #28]
 8004e32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e34:	69b9      	ldr	r1, [r7, #24]
 8004e36:	69fa      	ldr	r2, [r7, #28]
 8004e38:	e841 2300 	strex	r3, r2, [r1]
 8004e3c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1e5      	bne.n	8004e10 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2220      	movs	r2, #32
 8004e48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e011      	b.n	8004e7c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2220      	movs	r2, #32
 8004e62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3758      	adds	r7, #88	@ 0x58
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	603b      	str	r3, [r7, #0]
 8004e90:	4613      	mov	r3, r2
 8004e92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e94:	e04f      	b.n	8004f36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9c:	d04b      	beq.n	8004f36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e9e:	f7fc f9e7 	bl	8001270 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d302      	bcc.n	8004eb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e04e      	b.n	8004f56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0304 	and.w	r3, r3, #4
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d037      	beq.n	8004f36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	2b80      	cmp	r3, #128	@ 0x80
 8004eca:	d034      	beq.n	8004f36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	2b40      	cmp	r3, #64	@ 0x40
 8004ed0:	d031      	beq.n	8004f36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	f003 0308 	and.w	r3, r3, #8
 8004edc:	2b08      	cmp	r3, #8
 8004ede:	d110      	bne.n	8004f02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2208      	movs	r2, #8
 8004ee6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 f838 	bl	8004f5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2208      	movs	r2, #8
 8004ef2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e029      	b.n	8004f56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f10:	d111      	bne.n	8004f36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f000 f81e 	bl	8004f5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2220      	movs	r2, #32
 8004f26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e00f      	b.n	8004f56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69da      	ldr	r2, [r3, #28]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	4013      	ands	r3, r2
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	bf0c      	ite	eq
 8004f46:	2301      	moveq	r3, #1
 8004f48:	2300      	movne	r3, #0
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	79fb      	ldrb	r3, [r7, #7]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d0a0      	beq.n	8004e96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b095      	sub	sp, #84	@ 0x54
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f6e:	e853 3f00 	ldrex	r3, [r3]
 8004f72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	461a      	mov	r2, r3
 8004f82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f84:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f86:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f8c:	e841 2300 	strex	r3, r2, [r1]
 8004f90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1e6      	bne.n	8004f66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3308      	adds	r3, #8
 8004f9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	e853 3f00 	ldrex	r3, [r3]
 8004fa6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	f023 0301 	bic.w	r3, r3, #1
 8004fae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3308      	adds	r3, #8
 8004fb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fc0:	e841 2300 	strex	r3, r2, [r1]
 8004fc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1e5      	bne.n	8004f98 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d118      	bne.n	8005006 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	e853 3f00 	ldrex	r3, [r3]
 8004fe0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f023 0310 	bic.w	r3, r3, #16
 8004fe8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ff2:	61bb      	str	r3, [r7, #24]
 8004ff4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff6:	6979      	ldr	r1, [r7, #20]
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	e841 2300 	strex	r3, r2, [r1]
 8004ffe:	613b      	str	r3, [r7, #16]
   return(result);
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1e6      	bne.n	8004fd4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2220      	movs	r2, #32
 800500a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800501a:	bf00      	nop
 800501c:	3754      	adds	r7, #84	@ 0x54
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8005026:	b480      	push	{r7}
 8005028:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800502a:	bf00      	nop
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af04      	add	r7, sp, #16
 800503a:	4603      	mov	r3, r0
 800503c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800503e:	f04f 33ff 	mov.w	r3, #4294967295
 8005042:	9302      	str	r3, [sp, #8]
 8005044:	2301      	movs	r3, #1
 8005046:	9301      	str	r3, [sp, #4]
 8005048:	1dfb      	adds	r3, r7, #7
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	2301      	movs	r3, #1
 800504e:	2200      	movs	r2, #0
 8005050:	2178      	movs	r1, #120	@ 0x78
 8005052:	4803      	ldr	r0, [pc, #12]	@ (8005060 <ssd1306_WriteCommand+0x2c>)
 8005054:	f7fc fd2a 	bl	8001aac <HAL_I2C_Mem_Write>
}
 8005058:	bf00      	nop
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	2000009c 	.word	0x2000009c

08005064 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af04      	add	r7, sp, #16
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	b29b      	uxth	r3, r3
 8005072:	f04f 32ff 	mov.w	r2, #4294967295
 8005076:	9202      	str	r2, [sp, #8]
 8005078:	9301      	str	r3, [sp, #4]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	2301      	movs	r3, #1
 8005080:	2240      	movs	r2, #64	@ 0x40
 8005082:	2178      	movs	r1, #120	@ 0x78
 8005084:	4803      	ldr	r0, [pc, #12]	@ (8005094 <ssd1306_WriteData+0x30>)
 8005086:	f7fc fd11 	bl	8001aac <HAL_I2C_Mem_Write>
}
 800508a:	bf00      	nop
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	2000009c 	.word	0x2000009c

08005098 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800509c:	f7ff ffc3 	bl	8005026 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80050a0:	2064      	movs	r0, #100	@ 0x64
 80050a2:	f7fc f8f1 	bl	8001288 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80050a6:	2000      	movs	r0, #0
 80050a8:	f000 f9d6 	bl	8005458 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80050ac:	2020      	movs	r0, #32
 80050ae:	f7ff ffc1 	bl	8005034 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80050b2:	2000      	movs	r0, #0
 80050b4:	f7ff ffbe 	bl	8005034 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80050b8:	20b0      	movs	r0, #176	@ 0xb0
 80050ba:	f7ff ffbb 	bl	8005034 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80050be:	20c8      	movs	r0, #200	@ 0xc8
 80050c0:	f7ff ffb8 	bl	8005034 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80050c4:	2000      	movs	r0, #0
 80050c6:	f7ff ffb5 	bl	8005034 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80050ca:	2010      	movs	r0, #16
 80050cc:	f7ff ffb2 	bl	8005034 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80050d0:	2040      	movs	r0, #64	@ 0x40
 80050d2:	f7ff ffaf 	bl	8005034 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80050d6:	20ff      	movs	r0, #255	@ 0xff
 80050d8:	f000 f9aa 	bl	8005430 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80050dc:	20a1      	movs	r0, #161	@ 0xa1
 80050de:	f7ff ffa9 	bl	8005034 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80050e2:	20a6      	movs	r0, #166	@ 0xa6
 80050e4:	f7ff ffa6 	bl	8005034 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80050e8:	20a8      	movs	r0, #168	@ 0xa8
 80050ea:	f7ff ffa3 	bl	8005034 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80050ee:	203f      	movs	r0, #63	@ 0x3f
 80050f0:	f7ff ffa0 	bl	8005034 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80050f4:	20a4      	movs	r0, #164	@ 0xa4
 80050f6:	f7ff ff9d 	bl	8005034 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80050fa:	20d3      	movs	r0, #211	@ 0xd3
 80050fc:	f7ff ff9a 	bl	8005034 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8005100:	2000      	movs	r0, #0
 8005102:	f7ff ff97 	bl	8005034 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8005106:	20d5      	movs	r0, #213	@ 0xd5
 8005108:	f7ff ff94 	bl	8005034 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800510c:	20f0      	movs	r0, #240	@ 0xf0
 800510e:	f7ff ff91 	bl	8005034 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8005112:	20d9      	movs	r0, #217	@ 0xd9
 8005114:	f7ff ff8e 	bl	8005034 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8005118:	2022      	movs	r0, #34	@ 0x22
 800511a:	f7ff ff8b 	bl	8005034 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800511e:	20da      	movs	r0, #218	@ 0xda
 8005120:	f7ff ff88 	bl	8005034 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8005124:	2012      	movs	r0, #18
 8005126:	f7ff ff85 	bl	8005034 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800512a:	20db      	movs	r0, #219	@ 0xdb
 800512c:	f7ff ff82 	bl	8005034 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8005130:	2020      	movs	r0, #32
 8005132:	f7ff ff7f 	bl	8005034 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8005136:	208d      	movs	r0, #141	@ 0x8d
 8005138:	f7ff ff7c 	bl	8005034 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800513c:	2014      	movs	r0, #20
 800513e:	f7ff ff79 	bl	8005034 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8005142:	2001      	movs	r0, #1
 8005144:	f000 f988 	bl	8005458 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8005148:	2000      	movs	r0, #0
 800514a:	f000 f80f 	bl	800516c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800514e:	f000 f825 	bl	800519c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8005152:	4b05      	ldr	r3, [pc, #20]	@ (8005168 <ssd1306_Init+0xd0>)
 8005154:	2200      	movs	r2, #0
 8005156:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8005158:	4b03      	ldr	r3, [pc, #12]	@ (8005168 <ssd1306_Init+0xd0>)
 800515a:	2200      	movs	r2, #0
 800515c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800515e:	4b02      	ldr	r3, [pc, #8]	@ (8005168 <ssd1306_Init+0xd0>)
 8005160:	2201      	movs	r2, #1
 8005162:	711a      	strb	r2, [r3, #4]
}
 8005164:	bf00      	nop
 8005166:	bd80      	pop	{r7, pc}
 8005168:	200005ac 	.word	0x200005ac

0800516c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	4603      	mov	r3, r0
 8005174:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8005176:	79fb      	ldrb	r3, [r7, #7]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <ssd1306_Fill+0x14>
 800517c:	2300      	movs	r3, #0
 800517e:	e000      	b.n	8005182 <ssd1306_Fill+0x16>
 8005180:	23ff      	movs	r3, #255	@ 0xff
 8005182:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005186:	4619      	mov	r1, r3
 8005188:	4803      	ldr	r0, [pc, #12]	@ (8005198 <ssd1306_Fill+0x2c>)
 800518a:	f000 fb7b 	bl	8005884 <memset>
}
 800518e:	bf00      	nop
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	200001ac 	.word	0x200001ac

0800519c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80051a2:	2300      	movs	r3, #0
 80051a4:	71fb      	strb	r3, [r7, #7]
 80051a6:	e016      	b.n	80051d6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80051a8:	79fb      	ldrb	r3, [r7, #7]
 80051aa:	3b50      	subs	r3, #80	@ 0x50
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7ff ff40 	bl	8005034 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80051b4:	2000      	movs	r0, #0
 80051b6:	f7ff ff3d 	bl	8005034 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80051ba:	2010      	movs	r0, #16
 80051bc:	f7ff ff3a 	bl	8005034 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80051c0:	79fb      	ldrb	r3, [r7, #7]
 80051c2:	01db      	lsls	r3, r3, #7
 80051c4:	4a08      	ldr	r2, [pc, #32]	@ (80051e8 <ssd1306_UpdateScreen+0x4c>)
 80051c6:	4413      	add	r3, r2
 80051c8:	2180      	movs	r1, #128	@ 0x80
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7ff ff4a 	bl	8005064 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80051d0:	79fb      	ldrb	r3, [r7, #7]
 80051d2:	3301      	adds	r3, #1
 80051d4:	71fb      	strb	r3, [r7, #7]
 80051d6:	79fb      	ldrb	r3, [r7, #7]
 80051d8:	2b07      	cmp	r3, #7
 80051da:	d9e5      	bls.n	80051a8 <ssd1306_UpdateScreen+0xc>
    }
}
 80051dc:	bf00      	nop
 80051de:	bf00      	nop
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	200001ac 	.word	0x200001ac

080051ec <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	4603      	mov	r3, r0
 80051f4:	71fb      	strb	r3, [r7, #7]
 80051f6:	460b      	mov	r3, r1
 80051f8:	71bb      	strb	r3, [r7, #6]
 80051fa:	4613      	mov	r3, r2
 80051fc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80051fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005202:	2b00      	cmp	r3, #0
 8005204:	db3d      	blt.n	8005282 <ssd1306_DrawPixel+0x96>
 8005206:	79bb      	ldrb	r3, [r7, #6]
 8005208:	2b3f      	cmp	r3, #63	@ 0x3f
 800520a:	d83a      	bhi.n	8005282 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800520c:	797b      	ldrb	r3, [r7, #5]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d11a      	bne.n	8005248 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005212:	79fa      	ldrb	r2, [r7, #7]
 8005214:	79bb      	ldrb	r3, [r7, #6]
 8005216:	08db      	lsrs	r3, r3, #3
 8005218:	b2d8      	uxtb	r0, r3
 800521a:	4603      	mov	r3, r0
 800521c:	01db      	lsls	r3, r3, #7
 800521e:	4413      	add	r3, r2
 8005220:	4a1b      	ldr	r2, [pc, #108]	@ (8005290 <ssd1306_DrawPixel+0xa4>)
 8005222:	5cd3      	ldrb	r3, [r2, r3]
 8005224:	b25a      	sxtb	r2, r3
 8005226:	79bb      	ldrb	r3, [r7, #6]
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	2101      	movs	r1, #1
 800522e:	fa01 f303 	lsl.w	r3, r1, r3
 8005232:	b25b      	sxtb	r3, r3
 8005234:	4313      	orrs	r3, r2
 8005236:	b259      	sxtb	r1, r3
 8005238:	79fa      	ldrb	r2, [r7, #7]
 800523a:	4603      	mov	r3, r0
 800523c:	01db      	lsls	r3, r3, #7
 800523e:	4413      	add	r3, r2
 8005240:	b2c9      	uxtb	r1, r1
 8005242:	4a13      	ldr	r2, [pc, #76]	@ (8005290 <ssd1306_DrawPixel+0xa4>)
 8005244:	54d1      	strb	r1, [r2, r3]
 8005246:	e01d      	b.n	8005284 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005248:	79fa      	ldrb	r2, [r7, #7]
 800524a:	79bb      	ldrb	r3, [r7, #6]
 800524c:	08db      	lsrs	r3, r3, #3
 800524e:	b2d8      	uxtb	r0, r3
 8005250:	4603      	mov	r3, r0
 8005252:	01db      	lsls	r3, r3, #7
 8005254:	4413      	add	r3, r2
 8005256:	4a0e      	ldr	r2, [pc, #56]	@ (8005290 <ssd1306_DrawPixel+0xa4>)
 8005258:	5cd3      	ldrb	r3, [r2, r3]
 800525a:	b25a      	sxtb	r2, r3
 800525c:	79bb      	ldrb	r3, [r7, #6]
 800525e:	f003 0307 	and.w	r3, r3, #7
 8005262:	2101      	movs	r1, #1
 8005264:	fa01 f303 	lsl.w	r3, r1, r3
 8005268:	b25b      	sxtb	r3, r3
 800526a:	43db      	mvns	r3, r3
 800526c:	b25b      	sxtb	r3, r3
 800526e:	4013      	ands	r3, r2
 8005270:	b259      	sxtb	r1, r3
 8005272:	79fa      	ldrb	r2, [r7, #7]
 8005274:	4603      	mov	r3, r0
 8005276:	01db      	lsls	r3, r3, #7
 8005278:	4413      	add	r3, r2
 800527a:	b2c9      	uxtb	r1, r1
 800527c:	4a04      	ldr	r2, [pc, #16]	@ (8005290 <ssd1306_DrawPixel+0xa4>)
 800527e:	54d1      	strb	r1, [r2, r3]
 8005280:	e000      	b.n	8005284 <ssd1306_DrawPixel+0x98>
        return;
 8005282:	bf00      	nop
    }
}
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	200001ac 	.word	0x200001ac

08005294 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8005294:	b590      	push	{r4, r7, lr}
 8005296:	b089      	sub	sp, #36	@ 0x24
 8005298:	af00      	add	r7, sp, #0
 800529a:	4604      	mov	r4, r0
 800529c:	4638      	mov	r0, r7
 800529e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80052a2:	4623      	mov	r3, r4
 80052a4:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80052a6:	7bfb      	ldrb	r3, [r7, #15]
 80052a8:	2b1f      	cmp	r3, #31
 80052aa:	d902      	bls.n	80052b2 <ssd1306_WriteChar+0x1e>
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
 80052ae:	2b7e      	cmp	r3, #126	@ 0x7e
 80052b0:	d901      	bls.n	80052b6 <ssd1306_WriteChar+0x22>
        return 0;
 80052b2:	2300      	movs	r3, #0
 80052b4:	e077      	b.n	80053a6 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80052b6:	4b3e      	ldr	r3, [pc, #248]	@ (80053b0 <ssd1306_WriteChar+0x11c>)
 80052b8:	881b      	ldrh	r3, [r3, #0]
 80052ba:	461a      	mov	r2, r3
 80052bc:	783b      	ldrb	r3, [r7, #0]
 80052be:	4413      	add	r3, r2
 80052c0:	2b80      	cmp	r3, #128	@ 0x80
 80052c2:	dc06      	bgt.n	80052d2 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80052c4:	4b3a      	ldr	r3, [pc, #232]	@ (80053b0 <ssd1306_WriteChar+0x11c>)
 80052c6:	885b      	ldrh	r3, [r3, #2]
 80052c8:	461a      	mov	r2, r3
 80052ca:	787b      	ldrb	r3, [r7, #1]
 80052cc:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80052ce:	2b40      	cmp	r3, #64	@ 0x40
 80052d0:	dd01      	ble.n	80052d6 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80052d2:	2300      	movs	r3, #0
 80052d4:	e067      	b.n	80053a6 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80052d6:	2300      	movs	r3, #0
 80052d8:	61fb      	str	r3, [r7, #28]
 80052da:	e04e      	b.n	800537a <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	7bfb      	ldrb	r3, [r7, #15]
 80052e0:	3b20      	subs	r3, #32
 80052e2:	7879      	ldrb	r1, [r7, #1]
 80052e4:	fb01 f303 	mul.w	r3, r1, r3
 80052e8:	4619      	mov	r1, r3
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	440b      	add	r3, r1
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	4413      	add	r3, r2
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80052f6:	2300      	movs	r3, #0
 80052f8:	61bb      	str	r3, [r7, #24]
 80052fa:	e036      	b.n	800536a <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	fa02 f303 	lsl.w	r3, r2, r3
 8005304:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d013      	beq.n	8005334 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800530c:	4b28      	ldr	r3, [pc, #160]	@ (80053b0 <ssd1306_WriteChar+0x11c>)
 800530e:	881b      	ldrh	r3, [r3, #0]
 8005310:	b2da      	uxtb	r2, r3
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	b2db      	uxtb	r3, r3
 8005316:	4413      	add	r3, r2
 8005318:	b2d8      	uxtb	r0, r3
 800531a:	4b25      	ldr	r3, [pc, #148]	@ (80053b0 <ssd1306_WriteChar+0x11c>)
 800531c:	885b      	ldrh	r3, [r3, #2]
 800531e:	b2da      	uxtb	r2, r3
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	b2db      	uxtb	r3, r3
 8005324:	4413      	add	r3, r2
 8005326:	b2db      	uxtb	r3, r3
 8005328:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800532c:	4619      	mov	r1, r3
 800532e:	f7ff ff5d 	bl	80051ec <ssd1306_DrawPixel>
 8005332:	e017      	b.n	8005364 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005334:	4b1e      	ldr	r3, [pc, #120]	@ (80053b0 <ssd1306_WriteChar+0x11c>)
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	b2da      	uxtb	r2, r3
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	b2db      	uxtb	r3, r3
 800533e:	4413      	add	r3, r2
 8005340:	b2d8      	uxtb	r0, r3
 8005342:	4b1b      	ldr	r3, [pc, #108]	@ (80053b0 <ssd1306_WriteChar+0x11c>)
 8005344:	885b      	ldrh	r3, [r3, #2]
 8005346:	b2da      	uxtb	r2, r3
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	b2db      	uxtb	r3, r3
 800534c:	4413      	add	r3, r2
 800534e:	b2d9      	uxtb	r1, r3
 8005350:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005354:	2b00      	cmp	r3, #0
 8005356:	bf0c      	ite	eq
 8005358:	2301      	moveq	r3, #1
 800535a:	2300      	movne	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	461a      	mov	r2, r3
 8005360:	f7ff ff44 	bl	80051ec <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	3301      	adds	r3, #1
 8005368:	61bb      	str	r3, [r7, #24]
 800536a:	783b      	ldrb	r3, [r7, #0]
 800536c:	461a      	mov	r2, r3
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	4293      	cmp	r3, r2
 8005372:	d3c3      	bcc.n	80052fc <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	3301      	adds	r3, #1
 8005378:	61fb      	str	r3, [r7, #28]
 800537a:	787b      	ldrb	r3, [r7, #1]
 800537c:	461a      	mov	r2, r3
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	4293      	cmp	r3, r2
 8005382:	d3ab      	bcc.n	80052dc <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8005384:	4b0a      	ldr	r3, [pc, #40]	@ (80053b0 <ssd1306_WriteChar+0x11c>)
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	2a00      	cmp	r2, #0
 800538c:	d005      	beq.n	800539a <ssd1306_WriteChar+0x106>
 800538e:	68b9      	ldr	r1, [r7, #8]
 8005390:	7bfa      	ldrb	r2, [r7, #15]
 8005392:	3a20      	subs	r2, #32
 8005394:	440a      	add	r2, r1
 8005396:	7812      	ldrb	r2, [r2, #0]
 8005398:	e000      	b.n	800539c <ssd1306_WriteChar+0x108>
 800539a:	783a      	ldrb	r2, [r7, #0]
 800539c:	4413      	add	r3, r2
 800539e:	b29a      	uxth	r2, r3
 80053a0:	4b03      	ldr	r3, [pc, #12]	@ (80053b0 <ssd1306_WriteChar+0x11c>)
 80053a2:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3724      	adds	r7, #36	@ 0x24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd90      	pop	{r4, r7, pc}
 80053ae:	bf00      	nop
 80053b0:	200005ac 	.word	0x200005ac

080053b4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af02      	add	r7, sp, #8
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	4638      	mov	r0, r7
 80053be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80053c2:	e013      	b.n	80053ec <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	7818      	ldrb	r0, [r3, #0]
 80053c8:	7e3b      	ldrb	r3, [r7, #24]
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	463b      	mov	r3, r7
 80053ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053d0:	f7ff ff60 	bl	8005294 <ssd1306_WriteChar>
 80053d4:	4603      	mov	r3, r0
 80053d6:	461a      	mov	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d002      	beq.n	80053e6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	e008      	b.n	80053f8 <ssd1306_WriteString+0x44>
        }
        str++;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3301      	adds	r3, #1
 80053ea:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1e7      	bne.n	80053c4 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	781b      	ldrb	r3, [r3, #0]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	460a      	mov	r2, r1
 800540a:	71fb      	strb	r3, [r7, #7]
 800540c:	4613      	mov	r3, r2
 800540e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8005410:	79fb      	ldrb	r3, [r7, #7]
 8005412:	b29a      	uxth	r2, r3
 8005414:	4b05      	ldr	r3, [pc, #20]	@ (800542c <ssd1306_SetCursor+0x2c>)
 8005416:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8005418:	79bb      	ldrb	r3, [r7, #6]
 800541a:	b29a      	uxth	r2, r3
 800541c:	4b03      	ldr	r3, [pc, #12]	@ (800542c <ssd1306_SetCursor+0x2c>)
 800541e:	805a      	strh	r2, [r3, #2]
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	200005ac 	.word	0x200005ac

08005430 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	4603      	mov	r3, r0
 8005438:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800543a:	2381      	movs	r3, #129	@ 0x81
 800543c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800543e:	7bfb      	ldrb	r3, [r7, #15]
 8005440:	4618      	mov	r0, r3
 8005442:	f7ff fdf7 	bl	8005034 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8005446:	79fb      	ldrb	r3, [r7, #7]
 8005448:	4618      	mov	r0, r3
 800544a:	f7ff fdf3 	bl	8005034 <ssd1306_WriteCommand>
}
 800544e:	bf00      	nop
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
	...

08005458 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	4603      	mov	r3, r0
 8005460:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8005462:	79fb      	ldrb	r3, [r7, #7]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d005      	beq.n	8005474 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8005468:	23af      	movs	r3, #175	@ 0xaf
 800546a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800546c:	4b08      	ldr	r3, [pc, #32]	@ (8005490 <ssd1306_SetDisplayOn+0x38>)
 800546e:	2201      	movs	r2, #1
 8005470:	715a      	strb	r2, [r3, #5]
 8005472:	e004      	b.n	800547e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8005474:	23ae      	movs	r3, #174	@ 0xae
 8005476:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8005478:	4b05      	ldr	r3, [pc, #20]	@ (8005490 <ssd1306_SetDisplayOn+0x38>)
 800547a:	2200      	movs	r2, #0
 800547c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800547e:	7bfb      	ldrb	r3, [r7, #15]
 8005480:	4618      	mov	r0, r3
 8005482:	f7ff fdd7 	bl	8005034 <ssd1306_WriteCommand>
}
 8005486:	bf00      	nop
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	200005ac 	.word	0x200005ac

08005494 <std>:
 8005494:	2300      	movs	r3, #0
 8005496:	b510      	push	{r4, lr}
 8005498:	4604      	mov	r4, r0
 800549a:	e9c0 3300 	strd	r3, r3, [r0]
 800549e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054a2:	6083      	str	r3, [r0, #8]
 80054a4:	8181      	strh	r1, [r0, #12]
 80054a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80054a8:	81c2      	strh	r2, [r0, #14]
 80054aa:	6183      	str	r3, [r0, #24]
 80054ac:	4619      	mov	r1, r3
 80054ae:	2208      	movs	r2, #8
 80054b0:	305c      	adds	r0, #92	@ 0x5c
 80054b2:	f000 f9e7 	bl	8005884 <memset>
 80054b6:	4b0d      	ldr	r3, [pc, #52]	@ (80054ec <std+0x58>)
 80054b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80054ba:	4b0d      	ldr	r3, [pc, #52]	@ (80054f0 <std+0x5c>)
 80054bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80054be:	4b0d      	ldr	r3, [pc, #52]	@ (80054f4 <std+0x60>)
 80054c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80054c2:	4b0d      	ldr	r3, [pc, #52]	@ (80054f8 <std+0x64>)
 80054c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80054c6:	4b0d      	ldr	r3, [pc, #52]	@ (80054fc <std+0x68>)
 80054c8:	6224      	str	r4, [r4, #32]
 80054ca:	429c      	cmp	r4, r3
 80054cc:	d006      	beq.n	80054dc <std+0x48>
 80054ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80054d2:	4294      	cmp	r4, r2
 80054d4:	d002      	beq.n	80054dc <std+0x48>
 80054d6:	33d0      	adds	r3, #208	@ 0xd0
 80054d8:	429c      	cmp	r4, r3
 80054da:	d105      	bne.n	80054e8 <std+0x54>
 80054dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80054e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054e4:	f000 ba46 	b.w	8005974 <__retarget_lock_init_recursive>
 80054e8:	bd10      	pop	{r4, pc}
 80054ea:	bf00      	nop
 80054ec:	080056d5 	.word	0x080056d5
 80054f0:	080056f7 	.word	0x080056f7
 80054f4:	0800572f 	.word	0x0800572f
 80054f8:	08005753 	.word	0x08005753
 80054fc:	200005b4 	.word	0x200005b4

08005500 <stdio_exit_handler>:
 8005500:	4a02      	ldr	r2, [pc, #8]	@ (800550c <stdio_exit_handler+0xc>)
 8005502:	4903      	ldr	r1, [pc, #12]	@ (8005510 <stdio_exit_handler+0x10>)
 8005504:	4803      	ldr	r0, [pc, #12]	@ (8005514 <stdio_exit_handler+0x14>)
 8005506:	f000 b869 	b.w	80055dc <_fwalk_sglue>
 800550a:	bf00      	nop
 800550c:	20000020 	.word	0x20000020
 8005510:	08005c75 	.word	0x08005c75
 8005514:	20000030 	.word	0x20000030

08005518 <cleanup_stdio>:
 8005518:	6841      	ldr	r1, [r0, #4]
 800551a:	4b0c      	ldr	r3, [pc, #48]	@ (800554c <cleanup_stdio+0x34>)
 800551c:	4299      	cmp	r1, r3
 800551e:	b510      	push	{r4, lr}
 8005520:	4604      	mov	r4, r0
 8005522:	d001      	beq.n	8005528 <cleanup_stdio+0x10>
 8005524:	f000 fba6 	bl	8005c74 <_fflush_r>
 8005528:	68a1      	ldr	r1, [r4, #8]
 800552a:	4b09      	ldr	r3, [pc, #36]	@ (8005550 <cleanup_stdio+0x38>)
 800552c:	4299      	cmp	r1, r3
 800552e:	d002      	beq.n	8005536 <cleanup_stdio+0x1e>
 8005530:	4620      	mov	r0, r4
 8005532:	f000 fb9f 	bl	8005c74 <_fflush_r>
 8005536:	68e1      	ldr	r1, [r4, #12]
 8005538:	4b06      	ldr	r3, [pc, #24]	@ (8005554 <cleanup_stdio+0x3c>)
 800553a:	4299      	cmp	r1, r3
 800553c:	d004      	beq.n	8005548 <cleanup_stdio+0x30>
 800553e:	4620      	mov	r0, r4
 8005540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005544:	f000 bb96 	b.w	8005c74 <_fflush_r>
 8005548:	bd10      	pop	{r4, pc}
 800554a:	bf00      	nop
 800554c:	200005b4 	.word	0x200005b4
 8005550:	2000061c 	.word	0x2000061c
 8005554:	20000684 	.word	0x20000684

08005558 <global_stdio_init.part.0>:
 8005558:	b510      	push	{r4, lr}
 800555a:	4b0b      	ldr	r3, [pc, #44]	@ (8005588 <global_stdio_init.part.0+0x30>)
 800555c:	4c0b      	ldr	r4, [pc, #44]	@ (800558c <global_stdio_init.part.0+0x34>)
 800555e:	4a0c      	ldr	r2, [pc, #48]	@ (8005590 <global_stdio_init.part.0+0x38>)
 8005560:	601a      	str	r2, [r3, #0]
 8005562:	4620      	mov	r0, r4
 8005564:	2200      	movs	r2, #0
 8005566:	2104      	movs	r1, #4
 8005568:	f7ff ff94 	bl	8005494 <std>
 800556c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005570:	2201      	movs	r2, #1
 8005572:	2109      	movs	r1, #9
 8005574:	f7ff ff8e 	bl	8005494 <std>
 8005578:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800557c:	2202      	movs	r2, #2
 800557e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005582:	2112      	movs	r1, #18
 8005584:	f7ff bf86 	b.w	8005494 <std>
 8005588:	200006ec 	.word	0x200006ec
 800558c:	200005b4 	.word	0x200005b4
 8005590:	08005501 	.word	0x08005501

08005594 <__sfp_lock_acquire>:
 8005594:	4801      	ldr	r0, [pc, #4]	@ (800559c <__sfp_lock_acquire+0x8>)
 8005596:	f000 b9ee 	b.w	8005976 <__retarget_lock_acquire_recursive>
 800559a:	bf00      	nop
 800559c:	200006f5 	.word	0x200006f5

080055a0 <__sfp_lock_release>:
 80055a0:	4801      	ldr	r0, [pc, #4]	@ (80055a8 <__sfp_lock_release+0x8>)
 80055a2:	f000 b9e9 	b.w	8005978 <__retarget_lock_release_recursive>
 80055a6:	bf00      	nop
 80055a8:	200006f5 	.word	0x200006f5

080055ac <__sinit>:
 80055ac:	b510      	push	{r4, lr}
 80055ae:	4604      	mov	r4, r0
 80055b0:	f7ff fff0 	bl	8005594 <__sfp_lock_acquire>
 80055b4:	6a23      	ldr	r3, [r4, #32]
 80055b6:	b11b      	cbz	r3, 80055c0 <__sinit+0x14>
 80055b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055bc:	f7ff bff0 	b.w	80055a0 <__sfp_lock_release>
 80055c0:	4b04      	ldr	r3, [pc, #16]	@ (80055d4 <__sinit+0x28>)
 80055c2:	6223      	str	r3, [r4, #32]
 80055c4:	4b04      	ldr	r3, [pc, #16]	@ (80055d8 <__sinit+0x2c>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1f5      	bne.n	80055b8 <__sinit+0xc>
 80055cc:	f7ff ffc4 	bl	8005558 <global_stdio_init.part.0>
 80055d0:	e7f2      	b.n	80055b8 <__sinit+0xc>
 80055d2:	bf00      	nop
 80055d4:	08005519 	.word	0x08005519
 80055d8:	200006ec 	.word	0x200006ec

080055dc <_fwalk_sglue>:
 80055dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055e0:	4607      	mov	r7, r0
 80055e2:	4688      	mov	r8, r1
 80055e4:	4614      	mov	r4, r2
 80055e6:	2600      	movs	r6, #0
 80055e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055ec:	f1b9 0901 	subs.w	r9, r9, #1
 80055f0:	d505      	bpl.n	80055fe <_fwalk_sglue+0x22>
 80055f2:	6824      	ldr	r4, [r4, #0]
 80055f4:	2c00      	cmp	r4, #0
 80055f6:	d1f7      	bne.n	80055e8 <_fwalk_sglue+0xc>
 80055f8:	4630      	mov	r0, r6
 80055fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055fe:	89ab      	ldrh	r3, [r5, #12]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d907      	bls.n	8005614 <_fwalk_sglue+0x38>
 8005604:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005608:	3301      	adds	r3, #1
 800560a:	d003      	beq.n	8005614 <_fwalk_sglue+0x38>
 800560c:	4629      	mov	r1, r5
 800560e:	4638      	mov	r0, r7
 8005610:	47c0      	blx	r8
 8005612:	4306      	orrs	r6, r0
 8005614:	3568      	adds	r5, #104	@ 0x68
 8005616:	e7e9      	b.n	80055ec <_fwalk_sglue+0x10>

08005618 <_puts_r>:
 8005618:	6a03      	ldr	r3, [r0, #32]
 800561a:	b570      	push	{r4, r5, r6, lr}
 800561c:	6884      	ldr	r4, [r0, #8]
 800561e:	4605      	mov	r5, r0
 8005620:	460e      	mov	r6, r1
 8005622:	b90b      	cbnz	r3, 8005628 <_puts_r+0x10>
 8005624:	f7ff ffc2 	bl	80055ac <__sinit>
 8005628:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800562a:	07db      	lsls	r3, r3, #31
 800562c:	d405      	bmi.n	800563a <_puts_r+0x22>
 800562e:	89a3      	ldrh	r3, [r4, #12]
 8005630:	0598      	lsls	r0, r3, #22
 8005632:	d402      	bmi.n	800563a <_puts_r+0x22>
 8005634:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005636:	f000 f99e 	bl	8005976 <__retarget_lock_acquire_recursive>
 800563a:	89a3      	ldrh	r3, [r4, #12]
 800563c:	0719      	lsls	r1, r3, #28
 800563e:	d502      	bpl.n	8005646 <_puts_r+0x2e>
 8005640:	6923      	ldr	r3, [r4, #16]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d135      	bne.n	80056b2 <_puts_r+0x9a>
 8005646:	4621      	mov	r1, r4
 8005648:	4628      	mov	r0, r5
 800564a:	f000 f8c5 	bl	80057d8 <__swsetup_r>
 800564e:	b380      	cbz	r0, 80056b2 <_puts_r+0x9a>
 8005650:	f04f 35ff 	mov.w	r5, #4294967295
 8005654:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005656:	07da      	lsls	r2, r3, #31
 8005658:	d405      	bmi.n	8005666 <_puts_r+0x4e>
 800565a:	89a3      	ldrh	r3, [r4, #12]
 800565c:	059b      	lsls	r3, r3, #22
 800565e:	d402      	bmi.n	8005666 <_puts_r+0x4e>
 8005660:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005662:	f000 f989 	bl	8005978 <__retarget_lock_release_recursive>
 8005666:	4628      	mov	r0, r5
 8005668:	bd70      	pop	{r4, r5, r6, pc}
 800566a:	2b00      	cmp	r3, #0
 800566c:	da04      	bge.n	8005678 <_puts_r+0x60>
 800566e:	69a2      	ldr	r2, [r4, #24]
 8005670:	429a      	cmp	r2, r3
 8005672:	dc17      	bgt.n	80056a4 <_puts_r+0x8c>
 8005674:	290a      	cmp	r1, #10
 8005676:	d015      	beq.n	80056a4 <_puts_r+0x8c>
 8005678:	6823      	ldr	r3, [r4, #0]
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	6022      	str	r2, [r4, #0]
 800567e:	7019      	strb	r1, [r3, #0]
 8005680:	68a3      	ldr	r3, [r4, #8]
 8005682:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005686:	3b01      	subs	r3, #1
 8005688:	60a3      	str	r3, [r4, #8]
 800568a:	2900      	cmp	r1, #0
 800568c:	d1ed      	bne.n	800566a <_puts_r+0x52>
 800568e:	2b00      	cmp	r3, #0
 8005690:	da11      	bge.n	80056b6 <_puts_r+0x9e>
 8005692:	4622      	mov	r2, r4
 8005694:	210a      	movs	r1, #10
 8005696:	4628      	mov	r0, r5
 8005698:	f000 f85f 	bl	800575a <__swbuf_r>
 800569c:	3001      	adds	r0, #1
 800569e:	d0d7      	beq.n	8005650 <_puts_r+0x38>
 80056a0:	250a      	movs	r5, #10
 80056a2:	e7d7      	b.n	8005654 <_puts_r+0x3c>
 80056a4:	4622      	mov	r2, r4
 80056a6:	4628      	mov	r0, r5
 80056a8:	f000 f857 	bl	800575a <__swbuf_r>
 80056ac:	3001      	adds	r0, #1
 80056ae:	d1e7      	bne.n	8005680 <_puts_r+0x68>
 80056b0:	e7ce      	b.n	8005650 <_puts_r+0x38>
 80056b2:	3e01      	subs	r6, #1
 80056b4:	e7e4      	b.n	8005680 <_puts_r+0x68>
 80056b6:	6823      	ldr	r3, [r4, #0]
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	6022      	str	r2, [r4, #0]
 80056bc:	220a      	movs	r2, #10
 80056be:	701a      	strb	r2, [r3, #0]
 80056c0:	e7ee      	b.n	80056a0 <_puts_r+0x88>
	...

080056c4 <puts>:
 80056c4:	4b02      	ldr	r3, [pc, #8]	@ (80056d0 <puts+0xc>)
 80056c6:	4601      	mov	r1, r0
 80056c8:	6818      	ldr	r0, [r3, #0]
 80056ca:	f7ff bfa5 	b.w	8005618 <_puts_r>
 80056ce:	bf00      	nop
 80056d0:	2000002c 	.word	0x2000002c

080056d4 <__sread>:
 80056d4:	b510      	push	{r4, lr}
 80056d6:	460c      	mov	r4, r1
 80056d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056dc:	f000 f8fc 	bl	80058d8 <_read_r>
 80056e0:	2800      	cmp	r0, #0
 80056e2:	bfab      	itete	ge
 80056e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80056e6:	89a3      	ldrhlt	r3, [r4, #12]
 80056e8:	181b      	addge	r3, r3, r0
 80056ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80056ee:	bfac      	ite	ge
 80056f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80056f2:	81a3      	strhlt	r3, [r4, #12]
 80056f4:	bd10      	pop	{r4, pc}

080056f6 <__swrite>:
 80056f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056fa:	461f      	mov	r7, r3
 80056fc:	898b      	ldrh	r3, [r1, #12]
 80056fe:	05db      	lsls	r3, r3, #23
 8005700:	4605      	mov	r5, r0
 8005702:	460c      	mov	r4, r1
 8005704:	4616      	mov	r6, r2
 8005706:	d505      	bpl.n	8005714 <__swrite+0x1e>
 8005708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800570c:	2302      	movs	r3, #2
 800570e:	2200      	movs	r2, #0
 8005710:	f000 f8d0 	bl	80058b4 <_lseek_r>
 8005714:	89a3      	ldrh	r3, [r4, #12]
 8005716:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800571a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800571e:	81a3      	strh	r3, [r4, #12]
 8005720:	4632      	mov	r2, r6
 8005722:	463b      	mov	r3, r7
 8005724:	4628      	mov	r0, r5
 8005726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800572a:	f000 b8e7 	b.w	80058fc <_write_r>

0800572e <__sseek>:
 800572e:	b510      	push	{r4, lr}
 8005730:	460c      	mov	r4, r1
 8005732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005736:	f000 f8bd 	bl	80058b4 <_lseek_r>
 800573a:	1c43      	adds	r3, r0, #1
 800573c:	89a3      	ldrh	r3, [r4, #12]
 800573e:	bf15      	itete	ne
 8005740:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005742:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005746:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800574a:	81a3      	strheq	r3, [r4, #12]
 800574c:	bf18      	it	ne
 800574e:	81a3      	strhne	r3, [r4, #12]
 8005750:	bd10      	pop	{r4, pc}

08005752 <__sclose>:
 8005752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005756:	f000 b89d 	b.w	8005894 <_close_r>

0800575a <__swbuf_r>:
 800575a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575c:	460e      	mov	r6, r1
 800575e:	4614      	mov	r4, r2
 8005760:	4605      	mov	r5, r0
 8005762:	b118      	cbz	r0, 800576c <__swbuf_r+0x12>
 8005764:	6a03      	ldr	r3, [r0, #32]
 8005766:	b90b      	cbnz	r3, 800576c <__swbuf_r+0x12>
 8005768:	f7ff ff20 	bl	80055ac <__sinit>
 800576c:	69a3      	ldr	r3, [r4, #24]
 800576e:	60a3      	str	r3, [r4, #8]
 8005770:	89a3      	ldrh	r3, [r4, #12]
 8005772:	071a      	lsls	r2, r3, #28
 8005774:	d501      	bpl.n	800577a <__swbuf_r+0x20>
 8005776:	6923      	ldr	r3, [r4, #16]
 8005778:	b943      	cbnz	r3, 800578c <__swbuf_r+0x32>
 800577a:	4621      	mov	r1, r4
 800577c:	4628      	mov	r0, r5
 800577e:	f000 f82b 	bl	80057d8 <__swsetup_r>
 8005782:	b118      	cbz	r0, 800578c <__swbuf_r+0x32>
 8005784:	f04f 37ff 	mov.w	r7, #4294967295
 8005788:	4638      	mov	r0, r7
 800578a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	6922      	ldr	r2, [r4, #16]
 8005790:	1a98      	subs	r0, r3, r2
 8005792:	6963      	ldr	r3, [r4, #20]
 8005794:	b2f6      	uxtb	r6, r6
 8005796:	4283      	cmp	r3, r0
 8005798:	4637      	mov	r7, r6
 800579a:	dc05      	bgt.n	80057a8 <__swbuf_r+0x4e>
 800579c:	4621      	mov	r1, r4
 800579e:	4628      	mov	r0, r5
 80057a0:	f000 fa68 	bl	8005c74 <_fflush_r>
 80057a4:	2800      	cmp	r0, #0
 80057a6:	d1ed      	bne.n	8005784 <__swbuf_r+0x2a>
 80057a8:	68a3      	ldr	r3, [r4, #8]
 80057aa:	3b01      	subs	r3, #1
 80057ac:	60a3      	str	r3, [r4, #8]
 80057ae:	6823      	ldr	r3, [r4, #0]
 80057b0:	1c5a      	adds	r2, r3, #1
 80057b2:	6022      	str	r2, [r4, #0]
 80057b4:	701e      	strb	r6, [r3, #0]
 80057b6:	6962      	ldr	r2, [r4, #20]
 80057b8:	1c43      	adds	r3, r0, #1
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d004      	beq.n	80057c8 <__swbuf_r+0x6e>
 80057be:	89a3      	ldrh	r3, [r4, #12]
 80057c0:	07db      	lsls	r3, r3, #31
 80057c2:	d5e1      	bpl.n	8005788 <__swbuf_r+0x2e>
 80057c4:	2e0a      	cmp	r6, #10
 80057c6:	d1df      	bne.n	8005788 <__swbuf_r+0x2e>
 80057c8:	4621      	mov	r1, r4
 80057ca:	4628      	mov	r0, r5
 80057cc:	f000 fa52 	bl	8005c74 <_fflush_r>
 80057d0:	2800      	cmp	r0, #0
 80057d2:	d0d9      	beq.n	8005788 <__swbuf_r+0x2e>
 80057d4:	e7d6      	b.n	8005784 <__swbuf_r+0x2a>
	...

080057d8 <__swsetup_r>:
 80057d8:	b538      	push	{r3, r4, r5, lr}
 80057da:	4b29      	ldr	r3, [pc, #164]	@ (8005880 <__swsetup_r+0xa8>)
 80057dc:	4605      	mov	r5, r0
 80057de:	6818      	ldr	r0, [r3, #0]
 80057e0:	460c      	mov	r4, r1
 80057e2:	b118      	cbz	r0, 80057ec <__swsetup_r+0x14>
 80057e4:	6a03      	ldr	r3, [r0, #32]
 80057e6:	b90b      	cbnz	r3, 80057ec <__swsetup_r+0x14>
 80057e8:	f7ff fee0 	bl	80055ac <__sinit>
 80057ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057f0:	0719      	lsls	r1, r3, #28
 80057f2:	d422      	bmi.n	800583a <__swsetup_r+0x62>
 80057f4:	06da      	lsls	r2, r3, #27
 80057f6:	d407      	bmi.n	8005808 <__swsetup_r+0x30>
 80057f8:	2209      	movs	r2, #9
 80057fa:	602a      	str	r2, [r5, #0]
 80057fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005800:	81a3      	strh	r3, [r4, #12]
 8005802:	f04f 30ff 	mov.w	r0, #4294967295
 8005806:	e033      	b.n	8005870 <__swsetup_r+0x98>
 8005808:	0758      	lsls	r0, r3, #29
 800580a:	d512      	bpl.n	8005832 <__swsetup_r+0x5a>
 800580c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800580e:	b141      	cbz	r1, 8005822 <__swsetup_r+0x4a>
 8005810:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005814:	4299      	cmp	r1, r3
 8005816:	d002      	beq.n	800581e <__swsetup_r+0x46>
 8005818:	4628      	mov	r0, r5
 800581a:	f000 f8af 	bl	800597c <_free_r>
 800581e:	2300      	movs	r3, #0
 8005820:	6363      	str	r3, [r4, #52]	@ 0x34
 8005822:	89a3      	ldrh	r3, [r4, #12]
 8005824:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005828:	81a3      	strh	r3, [r4, #12]
 800582a:	2300      	movs	r3, #0
 800582c:	6063      	str	r3, [r4, #4]
 800582e:	6923      	ldr	r3, [r4, #16]
 8005830:	6023      	str	r3, [r4, #0]
 8005832:	89a3      	ldrh	r3, [r4, #12]
 8005834:	f043 0308 	orr.w	r3, r3, #8
 8005838:	81a3      	strh	r3, [r4, #12]
 800583a:	6923      	ldr	r3, [r4, #16]
 800583c:	b94b      	cbnz	r3, 8005852 <__swsetup_r+0x7a>
 800583e:	89a3      	ldrh	r3, [r4, #12]
 8005840:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005844:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005848:	d003      	beq.n	8005852 <__swsetup_r+0x7a>
 800584a:	4621      	mov	r1, r4
 800584c:	4628      	mov	r0, r5
 800584e:	f000 fa5f 	bl	8005d10 <__smakebuf_r>
 8005852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005856:	f013 0201 	ands.w	r2, r3, #1
 800585a:	d00a      	beq.n	8005872 <__swsetup_r+0x9a>
 800585c:	2200      	movs	r2, #0
 800585e:	60a2      	str	r2, [r4, #8]
 8005860:	6962      	ldr	r2, [r4, #20]
 8005862:	4252      	negs	r2, r2
 8005864:	61a2      	str	r2, [r4, #24]
 8005866:	6922      	ldr	r2, [r4, #16]
 8005868:	b942      	cbnz	r2, 800587c <__swsetup_r+0xa4>
 800586a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800586e:	d1c5      	bne.n	80057fc <__swsetup_r+0x24>
 8005870:	bd38      	pop	{r3, r4, r5, pc}
 8005872:	0799      	lsls	r1, r3, #30
 8005874:	bf58      	it	pl
 8005876:	6962      	ldrpl	r2, [r4, #20]
 8005878:	60a2      	str	r2, [r4, #8]
 800587a:	e7f4      	b.n	8005866 <__swsetup_r+0x8e>
 800587c:	2000      	movs	r0, #0
 800587e:	e7f7      	b.n	8005870 <__swsetup_r+0x98>
 8005880:	2000002c 	.word	0x2000002c

08005884 <memset>:
 8005884:	4402      	add	r2, r0
 8005886:	4603      	mov	r3, r0
 8005888:	4293      	cmp	r3, r2
 800588a:	d100      	bne.n	800588e <memset+0xa>
 800588c:	4770      	bx	lr
 800588e:	f803 1b01 	strb.w	r1, [r3], #1
 8005892:	e7f9      	b.n	8005888 <memset+0x4>

08005894 <_close_r>:
 8005894:	b538      	push	{r3, r4, r5, lr}
 8005896:	4d06      	ldr	r5, [pc, #24]	@ (80058b0 <_close_r+0x1c>)
 8005898:	2300      	movs	r3, #0
 800589a:	4604      	mov	r4, r0
 800589c:	4608      	mov	r0, r1
 800589e:	602b      	str	r3, [r5, #0]
 80058a0:	f7fb fbd7 	bl	8001052 <_close>
 80058a4:	1c43      	adds	r3, r0, #1
 80058a6:	d102      	bne.n	80058ae <_close_r+0x1a>
 80058a8:	682b      	ldr	r3, [r5, #0]
 80058aa:	b103      	cbz	r3, 80058ae <_close_r+0x1a>
 80058ac:	6023      	str	r3, [r4, #0]
 80058ae:	bd38      	pop	{r3, r4, r5, pc}
 80058b0:	200006f0 	.word	0x200006f0

080058b4 <_lseek_r>:
 80058b4:	b538      	push	{r3, r4, r5, lr}
 80058b6:	4d07      	ldr	r5, [pc, #28]	@ (80058d4 <_lseek_r+0x20>)
 80058b8:	4604      	mov	r4, r0
 80058ba:	4608      	mov	r0, r1
 80058bc:	4611      	mov	r1, r2
 80058be:	2200      	movs	r2, #0
 80058c0:	602a      	str	r2, [r5, #0]
 80058c2:	461a      	mov	r2, r3
 80058c4:	f7fb fbec 	bl	80010a0 <_lseek>
 80058c8:	1c43      	adds	r3, r0, #1
 80058ca:	d102      	bne.n	80058d2 <_lseek_r+0x1e>
 80058cc:	682b      	ldr	r3, [r5, #0]
 80058ce:	b103      	cbz	r3, 80058d2 <_lseek_r+0x1e>
 80058d0:	6023      	str	r3, [r4, #0]
 80058d2:	bd38      	pop	{r3, r4, r5, pc}
 80058d4:	200006f0 	.word	0x200006f0

080058d8 <_read_r>:
 80058d8:	b538      	push	{r3, r4, r5, lr}
 80058da:	4d07      	ldr	r5, [pc, #28]	@ (80058f8 <_read_r+0x20>)
 80058dc:	4604      	mov	r4, r0
 80058de:	4608      	mov	r0, r1
 80058e0:	4611      	mov	r1, r2
 80058e2:	2200      	movs	r2, #0
 80058e4:	602a      	str	r2, [r5, #0]
 80058e6:	461a      	mov	r2, r3
 80058e8:	f7fb fb96 	bl	8001018 <_read>
 80058ec:	1c43      	adds	r3, r0, #1
 80058ee:	d102      	bne.n	80058f6 <_read_r+0x1e>
 80058f0:	682b      	ldr	r3, [r5, #0]
 80058f2:	b103      	cbz	r3, 80058f6 <_read_r+0x1e>
 80058f4:	6023      	str	r3, [r4, #0]
 80058f6:	bd38      	pop	{r3, r4, r5, pc}
 80058f8:	200006f0 	.word	0x200006f0

080058fc <_write_r>:
 80058fc:	b538      	push	{r3, r4, r5, lr}
 80058fe:	4d07      	ldr	r5, [pc, #28]	@ (800591c <_write_r+0x20>)
 8005900:	4604      	mov	r4, r0
 8005902:	4608      	mov	r0, r1
 8005904:	4611      	mov	r1, r2
 8005906:	2200      	movs	r2, #0
 8005908:	602a      	str	r2, [r5, #0]
 800590a:	461a      	mov	r2, r3
 800590c:	f7fa fed0 	bl	80006b0 <_write>
 8005910:	1c43      	adds	r3, r0, #1
 8005912:	d102      	bne.n	800591a <_write_r+0x1e>
 8005914:	682b      	ldr	r3, [r5, #0]
 8005916:	b103      	cbz	r3, 800591a <_write_r+0x1e>
 8005918:	6023      	str	r3, [r4, #0]
 800591a:	bd38      	pop	{r3, r4, r5, pc}
 800591c:	200006f0 	.word	0x200006f0

08005920 <__errno>:
 8005920:	4b01      	ldr	r3, [pc, #4]	@ (8005928 <__errno+0x8>)
 8005922:	6818      	ldr	r0, [r3, #0]
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	2000002c 	.word	0x2000002c

0800592c <__libc_init_array>:
 800592c:	b570      	push	{r4, r5, r6, lr}
 800592e:	4d0d      	ldr	r5, [pc, #52]	@ (8005964 <__libc_init_array+0x38>)
 8005930:	4c0d      	ldr	r4, [pc, #52]	@ (8005968 <__libc_init_array+0x3c>)
 8005932:	1b64      	subs	r4, r4, r5
 8005934:	10a4      	asrs	r4, r4, #2
 8005936:	2600      	movs	r6, #0
 8005938:	42a6      	cmp	r6, r4
 800593a:	d109      	bne.n	8005950 <__libc_init_array+0x24>
 800593c:	4d0b      	ldr	r5, [pc, #44]	@ (800596c <__libc_init_array+0x40>)
 800593e:	4c0c      	ldr	r4, [pc, #48]	@ (8005970 <__libc_init_array+0x44>)
 8005940:	f000 fa54 	bl	8005dec <_init>
 8005944:	1b64      	subs	r4, r4, r5
 8005946:	10a4      	asrs	r4, r4, #2
 8005948:	2600      	movs	r6, #0
 800594a:	42a6      	cmp	r6, r4
 800594c:	d105      	bne.n	800595a <__libc_init_array+0x2e>
 800594e:	bd70      	pop	{r4, r5, r6, pc}
 8005950:	f855 3b04 	ldr.w	r3, [r5], #4
 8005954:	4798      	blx	r3
 8005956:	3601      	adds	r6, #1
 8005958:	e7ee      	b.n	8005938 <__libc_init_array+0xc>
 800595a:	f855 3b04 	ldr.w	r3, [r5], #4
 800595e:	4798      	blx	r3
 8005960:	3601      	adds	r6, #1
 8005962:	e7f2      	b.n	800594a <__libc_init_array+0x1e>
 8005964:	08006534 	.word	0x08006534
 8005968:	08006534 	.word	0x08006534
 800596c:	08006534 	.word	0x08006534
 8005970:	08006538 	.word	0x08006538

08005974 <__retarget_lock_init_recursive>:
 8005974:	4770      	bx	lr

08005976 <__retarget_lock_acquire_recursive>:
 8005976:	4770      	bx	lr

08005978 <__retarget_lock_release_recursive>:
 8005978:	4770      	bx	lr
	...

0800597c <_free_r>:
 800597c:	b538      	push	{r3, r4, r5, lr}
 800597e:	4605      	mov	r5, r0
 8005980:	2900      	cmp	r1, #0
 8005982:	d041      	beq.n	8005a08 <_free_r+0x8c>
 8005984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005988:	1f0c      	subs	r4, r1, #4
 800598a:	2b00      	cmp	r3, #0
 800598c:	bfb8      	it	lt
 800598e:	18e4      	addlt	r4, r4, r3
 8005990:	f000 f8e0 	bl	8005b54 <__malloc_lock>
 8005994:	4a1d      	ldr	r2, [pc, #116]	@ (8005a0c <_free_r+0x90>)
 8005996:	6813      	ldr	r3, [r2, #0]
 8005998:	b933      	cbnz	r3, 80059a8 <_free_r+0x2c>
 800599a:	6063      	str	r3, [r4, #4]
 800599c:	6014      	str	r4, [r2, #0]
 800599e:	4628      	mov	r0, r5
 80059a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059a4:	f000 b8dc 	b.w	8005b60 <__malloc_unlock>
 80059a8:	42a3      	cmp	r3, r4
 80059aa:	d908      	bls.n	80059be <_free_r+0x42>
 80059ac:	6820      	ldr	r0, [r4, #0]
 80059ae:	1821      	adds	r1, r4, r0
 80059b0:	428b      	cmp	r3, r1
 80059b2:	bf01      	itttt	eq
 80059b4:	6819      	ldreq	r1, [r3, #0]
 80059b6:	685b      	ldreq	r3, [r3, #4]
 80059b8:	1809      	addeq	r1, r1, r0
 80059ba:	6021      	streq	r1, [r4, #0]
 80059bc:	e7ed      	b.n	800599a <_free_r+0x1e>
 80059be:	461a      	mov	r2, r3
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	b10b      	cbz	r3, 80059c8 <_free_r+0x4c>
 80059c4:	42a3      	cmp	r3, r4
 80059c6:	d9fa      	bls.n	80059be <_free_r+0x42>
 80059c8:	6811      	ldr	r1, [r2, #0]
 80059ca:	1850      	adds	r0, r2, r1
 80059cc:	42a0      	cmp	r0, r4
 80059ce:	d10b      	bne.n	80059e8 <_free_r+0x6c>
 80059d0:	6820      	ldr	r0, [r4, #0]
 80059d2:	4401      	add	r1, r0
 80059d4:	1850      	adds	r0, r2, r1
 80059d6:	4283      	cmp	r3, r0
 80059d8:	6011      	str	r1, [r2, #0]
 80059da:	d1e0      	bne.n	800599e <_free_r+0x22>
 80059dc:	6818      	ldr	r0, [r3, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	6053      	str	r3, [r2, #4]
 80059e2:	4408      	add	r0, r1
 80059e4:	6010      	str	r0, [r2, #0]
 80059e6:	e7da      	b.n	800599e <_free_r+0x22>
 80059e8:	d902      	bls.n	80059f0 <_free_r+0x74>
 80059ea:	230c      	movs	r3, #12
 80059ec:	602b      	str	r3, [r5, #0]
 80059ee:	e7d6      	b.n	800599e <_free_r+0x22>
 80059f0:	6820      	ldr	r0, [r4, #0]
 80059f2:	1821      	adds	r1, r4, r0
 80059f4:	428b      	cmp	r3, r1
 80059f6:	bf04      	itt	eq
 80059f8:	6819      	ldreq	r1, [r3, #0]
 80059fa:	685b      	ldreq	r3, [r3, #4]
 80059fc:	6063      	str	r3, [r4, #4]
 80059fe:	bf04      	itt	eq
 8005a00:	1809      	addeq	r1, r1, r0
 8005a02:	6021      	streq	r1, [r4, #0]
 8005a04:	6054      	str	r4, [r2, #4]
 8005a06:	e7ca      	b.n	800599e <_free_r+0x22>
 8005a08:	bd38      	pop	{r3, r4, r5, pc}
 8005a0a:	bf00      	nop
 8005a0c:	200006fc 	.word	0x200006fc

08005a10 <sbrk_aligned>:
 8005a10:	b570      	push	{r4, r5, r6, lr}
 8005a12:	4e0f      	ldr	r6, [pc, #60]	@ (8005a50 <sbrk_aligned+0x40>)
 8005a14:	460c      	mov	r4, r1
 8005a16:	6831      	ldr	r1, [r6, #0]
 8005a18:	4605      	mov	r5, r0
 8005a1a:	b911      	cbnz	r1, 8005a22 <sbrk_aligned+0x12>
 8005a1c:	f000 f9d6 	bl	8005dcc <_sbrk_r>
 8005a20:	6030      	str	r0, [r6, #0]
 8005a22:	4621      	mov	r1, r4
 8005a24:	4628      	mov	r0, r5
 8005a26:	f000 f9d1 	bl	8005dcc <_sbrk_r>
 8005a2a:	1c43      	adds	r3, r0, #1
 8005a2c:	d103      	bne.n	8005a36 <sbrk_aligned+0x26>
 8005a2e:	f04f 34ff 	mov.w	r4, #4294967295
 8005a32:	4620      	mov	r0, r4
 8005a34:	bd70      	pop	{r4, r5, r6, pc}
 8005a36:	1cc4      	adds	r4, r0, #3
 8005a38:	f024 0403 	bic.w	r4, r4, #3
 8005a3c:	42a0      	cmp	r0, r4
 8005a3e:	d0f8      	beq.n	8005a32 <sbrk_aligned+0x22>
 8005a40:	1a21      	subs	r1, r4, r0
 8005a42:	4628      	mov	r0, r5
 8005a44:	f000 f9c2 	bl	8005dcc <_sbrk_r>
 8005a48:	3001      	adds	r0, #1
 8005a4a:	d1f2      	bne.n	8005a32 <sbrk_aligned+0x22>
 8005a4c:	e7ef      	b.n	8005a2e <sbrk_aligned+0x1e>
 8005a4e:	bf00      	nop
 8005a50:	200006f8 	.word	0x200006f8

08005a54 <_malloc_r>:
 8005a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a58:	1ccd      	adds	r5, r1, #3
 8005a5a:	f025 0503 	bic.w	r5, r5, #3
 8005a5e:	3508      	adds	r5, #8
 8005a60:	2d0c      	cmp	r5, #12
 8005a62:	bf38      	it	cc
 8005a64:	250c      	movcc	r5, #12
 8005a66:	2d00      	cmp	r5, #0
 8005a68:	4606      	mov	r6, r0
 8005a6a:	db01      	blt.n	8005a70 <_malloc_r+0x1c>
 8005a6c:	42a9      	cmp	r1, r5
 8005a6e:	d904      	bls.n	8005a7a <_malloc_r+0x26>
 8005a70:	230c      	movs	r3, #12
 8005a72:	6033      	str	r3, [r6, #0]
 8005a74:	2000      	movs	r0, #0
 8005a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b50 <_malloc_r+0xfc>
 8005a7e:	f000 f869 	bl	8005b54 <__malloc_lock>
 8005a82:	f8d8 3000 	ldr.w	r3, [r8]
 8005a86:	461c      	mov	r4, r3
 8005a88:	bb44      	cbnz	r4, 8005adc <_malloc_r+0x88>
 8005a8a:	4629      	mov	r1, r5
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	f7ff ffbf 	bl	8005a10 <sbrk_aligned>
 8005a92:	1c43      	adds	r3, r0, #1
 8005a94:	4604      	mov	r4, r0
 8005a96:	d158      	bne.n	8005b4a <_malloc_r+0xf6>
 8005a98:	f8d8 4000 	ldr.w	r4, [r8]
 8005a9c:	4627      	mov	r7, r4
 8005a9e:	2f00      	cmp	r7, #0
 8005aa0:	d143      	bne.n	8005b2a <_malloc_r+0xd6>
 8005aa2:	2c00      	cmp	r4, #0
 8005aa4:	d04b      	beq.n	8005b3e <_malloc_r+0xea>
 8005aa6:	6823      	ldr	r3, [r4, #0]
 8005aa8:	4639      	mov	r1, r7
 8005aaa:	4630      	mov	r0, r6
 8005aac:	eb04 0903 	add.w	r9, r4, r3
 8005ab0:	f000 f98c 	bl	8005dcc <_sbrk_r>
 8005ab4:	4581      	cmp	r9, r0
 8005ab6:	d142      	bne.n	8005b3e <_malloc_r+0xea>
 8005ab8:	6821      	ldr	r1, [r4, #0]
 8005aba:	1a6d      	subs	r5, r5, r1
 8005abc:	4629      	mov	r1, r5
 8005abe:	4630      	mov	r0, r6
 8005ac0:	f7ff ffa6 	bl	8005a10 <sbrk_aligned>
 8005ac4:	3001      	adds	r0, #1
 8005ac6:	d03a      	beq.n	8005b3e <_malloc_r+0xea>
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	442b      	add	r3, r5
 8005acc:	6023      	str	r3, [r4, #0]
 8005ace:	f8d8 3000 	ldr.w	r3, [r8]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	bb62      	cbnz	r2, 8005b30 <_malloc_r+0xdc>
 8005ad6:	f8c8 7000 	str.w	r7, [r8]
 8005ada:	e00f      	b.n	8005afc <_malloc_r+0xa8>
 8005adc:	6822      	ldr	r2, [r4, #0]
 8005ade:	1b52      	subs	r2, r2, r5
 8005ae0:	d420      	bmi.n	8005b24 <_malloc_r+0xd0>
 8005ae2:	2a0b      	cmp	r2, #11
 8005ae4:	d917      	bls.n	8005b16 <_malloc_r+0xc2>
 8005ae6:	1961      	adds	r1, r4, r5
 8005ae8:	42a3      	cmp	r3, r4
 8005aea:	6025      	str	r5, [r4, #0]
 8005aec:	bf18      	it	ne
 8005aee:	6059      	strne	r1, [r3, #4]
 8005af0:	6863      	ldr	r3, [r4, #4]
 8005af2:	bf08      	it	eq
 8005af4:	f8c8 1000 	streq.w	r1, [r8]
 8005af8:	5162      	str	r2, [r4, r5]
 8005afa:	604b      	str	r3, [r1, #4]
 8005afc:	4630      	mov	r0, r6
 8005afe:	f000 f82f 	bl	8005b60 <__malloc_unlock>
 8005b02:	f104 000b 	add.w	r0, r4, #11
 8005b06:	1d23      	adds	r3, r4, #4
 8005b08:	f020 0007 	bic.w	r0, r0, #7
 8005b0c:	1ac2      	subs	r2, r0, r3
 8005b0e:	bf1c      	itt	ne
 8005b10:	1a1b      	subne	r3, r3, r0
 8005b12:	50a3      	strne	r3, [r4, r2]
 8005b14:	e7af      	b.n	8005a76 <_malloc_r+0x22>
 8005b16:	6862      	ldr	r2, [r4, #4]
 8005b18:	42a3      	cmp	r3, r4
 8005b1a:	bf0c      	ite	eq
 8005b1c:	f8c8 2000 	streq.w	r2, [r8]
 8005b20:	605a      	strne	r2, [r3, #4]
 8005b22:	e7eb      	b.n	8005afc <_malloc_r+0xa8>
 8005b24:	4623      	mov	r3, r4
 8005b26:	6864      	ldr	r4, [r4, #4]
 8005b28:	e7ae      	b.n	8005a88 <_malloc_r+0x34>
 8005b2a:	463c      	mov	r4, r7
 8005b2c:	687f      	ldr	r7, [r7, #4]
 8005b2e:	e7b6      	b.n	8005a9e <_malloc_r+0x4a>
 8005b30:	461a      	mov	r2, r3
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	42a3      	cmp	r3, r4
 8005b36:	d1fb      	bne.n	8005b30 <_malloc_r+0xdc>
 8005b38:	2300      	movs	r3, #0
 8005b3a:	6053      	str	r3, [r2, #4]
 8005b3c:	e7de      	b.n	8005afc <_malloc_r+0xa8>
 8005b3e:	230c      	movs	r3, #12
 8005b40:	6033      	str	r3, [r6, #0]
 8005b42:	4630      	mov	r0, r6
 8005b44:	f000 f80c 	bl	8005b60 <__malloc_unlock>
 8005b48:	e794      	b.n	8005a74 <_malloc_r+0x20>
 8005b4a:	6005      	str	r5, [r0, #0]
 8005b4c:	e7d6      	b.n	8005afc <_malloc_r+0xa8>
 8005b4e:	bf00      	nop
 8005b50:	200006fc 	.word	0x200006fc

08005b54 <__malloc_lock>:
 8005b54:	4801      	ldr	r0, [pc, #4]	@ (8005b5c <__malloc_lock+0x8>)
 8005b56:	f7ff bf0e 	b.w	8005976 <__retarget_lock_acquire_recursive>
 8005b5a:	bf00      	nop
 8005b5c:	200006f4 	.word	0x200006f4

08005b60 <__malloc_unlock>:
 8005b60:	4801      	ldr	r0, [pc, #4]	@ (8005b68 <__malloc_unlock+0x8>)
 8005b62:	f7ff bf09 	b.w	8005978 <__retarget_lock_release_recursive>
 8005b66:	bf00      	nop
 8005b68:	200006f4 	.word	0x200006f4

08005b6c <__sflush_r>:
 8005b6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b74:	0716      	lsls	r6, r2, #28
 8005b76:	4605      	mov	r5, r0
 8005b78:	460c      	mov	r4, r1
 8005b7a:	d454      	bmi.n	8005c26 <__sflush_r+0xba>
 8005b7c:	684b      	ldr	r3, [r1, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	dc02      	bgt.n	8005b88 <__sflush_r+0x1c>
 8005b82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	dd48      	ble.n	8005c1a <__sflush_r+0xae>
 8005b88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b8a:	2e00      	cmp	r6, #0
 8005b8c:	d045      	beq.n	8005c1a <__sflush_r+0xae>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005b94:	682f      	ldr	r7, [r5, #0]
 8005b96:	6a21      	ldr	r1, [r4, #32]
 8005b98:	602b      	str	r3, [r5, #0]
 8005b9a:	d030      	beq.n	8005bfe <__sflush_r+0x92>
 8005b9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005b9e:	89a3      	ldrh	r3, [r4, #12]
 8005ba0:	0759      	lsls	r1, r3, #29
 8005ba2:	d505      	bpl.n	8005bb0 <__sflush_r+0x44>
 8005ba4:	6863      	ldr	r3, [r4, #4]
 8005ba6:	1ad2      	subs	r2, r2, r3
 8005ba8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005baa:	b10b      	cbz	r3, 8005bb0 <__sflush_r+0x44>
 8005bac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005bae:	1ad2      	subs	r2, r2, r3
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005bb4:	6a21      	ldr	r1, [r4, #32]
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	47b0      	blx	r6
 8005bba:	1c43      	adds	r3, r0, #1
 8005bbc:	89a3      	ldrh	r3, [r4, #12]
 8005bbe:	d106      	bne.n	8005bce <__sflush_r+0x62>
 8005bc0:	6829      	ldr	r1, [r5, #0]
 8005bc2:	291d      	cmp	r1, #29
 8005bc4:	d82b      	bhi.n	8005c1e <__sflush_r+0xb2>
 8005bc6:	4a2a      	ldr	r2, [pc, #168]	@ (8005c70 <__sflush_r+0x104>)
 8005bc8:	410a      	asrs	r2, r1
 8005bca:	07d6      	lsls	r6, r2, #31
 8005bcc:	d427      	bmi.n	8005c1e <__sflush_r+0xb2>
 8005bce:	2200      	movs	r2, #0
 8005bd0:	6062      	str	r2, [r4, #4]
 8005bd2:	04d9      	lsls	r1, r3, #19
 8005bd4:	6922      	ldr	r2, [r4, #16]
 8005bd6:	6022      	str	r2, [r4, #0]
 8005bd8:	d504      	bpl.n	8005be4 <__sflush_r+0x78>
 8005bda:	1c42      	adds	r2, r0, #1
 8005bdc:	d101      	bne.n	8005be2 <__sflush_r+0x76>
 8005bde:	682b      	ldr	r3, [r5, #0]
 8005be0:	b903      	cbnz	r3, 8005be4 <__sflush_r+0x78>
 8005be2:	6560      	str	r0, [r4, #84]	@ 0x54
 8005be4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005be6:	602f      	str	r7, [r5, #0]
 8005be8:	b1b9      	cbz	r1, 8005c1a <__sflush_r+0xae>
 8005bea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005bee:	4299      	cmp	r1, r3
 8005bf0:	d002      	beq.n	8005bf8 <__sflush_r+0x8c>
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	f7ff fec2 	bl	800597c <_free_r>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	6363      	str	r3, [r4, #52]	@ 0x34
 8005bfc:	e00d      	b.n	8005c1a <__sflush_r+0xae>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	4628      	mov	r0, r5
 8005c02:	47b0      	blx	r6
 8005c04:	4602      	mov	r2, r0
 8005c06:	1c50      	adds	r0, r2, #1
 8005c08:	d1c9      	bne.n	8005b9e <__sflush_r+0x32>
 8005c0a:	682b      	ldr	r3, [r5, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0c6      	beq.n	8005b9e <__sflush_r+0x32>
 8005c10:	2b1d      	cmp	r3, #29
 8005c12:	d001      	beq.n	8005c18 <__sflush_r+0xac>
 8005c14:	2b16      	cmp	r3, #22
 8005c16:	d11e      	bne.n	8005c56 <__sflush_r+0xea>
 8005c18:	602f      	str	r7, [r5, #0]
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	e022      	b.n	8005c64 <__sflush_r+0xf8>
 8005c1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c22:	b21b      	sxth	r3, r3
 8005c24:	e01b      	b.n	8005c5e <__sflush_r+0xf2>
 8005c26:	690f      	ldr	r7, [r1, #16]
 8005c28:	2f00      	cmp	r7, #0
 8005c2a:	d0f6      	beq.n	8005c1a <__sflush_r+0xae>
 8005c2c:	0793      	lsls	r3, r2, #30
 8005c2e:	680e      	ldr	r6, [r1, #0]
 8005c30:	bf08      	it	eq
 8005c32:	694b      	ldreq	r3, [r1, #20]
 8005c34:	600f      	str	r7, [r1, #0]
 8005c36:	bf18      	it	ne
 8005c38:	2300      	movne	r3, #0
 8005c3a:	eba6 0807 	sub.w	r8, r6, r7
 8005c3e:	608b      	str	r3, [r1, #8]
 8005c40:	f1b8 0f00 	cmp.w	r8, #0
 8005c44:	dde9      	ble.n	8005c1a <__sflush_r+0xae>
 8005c46:	6a21      	ldr	r1, [r4, #32]
 8005c48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005c4a:	4643      	mov	r3, r8
 8005c4c:	463a      	mov	r2, r7
 8005c4e:	4628      	mov	r0, r5
 8005c50:	47b0      	blx	r6
 8005c52:	2800      	cmp	r0, #0
 8005c54:	dc08      	bgt.n	8005c68 <__sflush_r+0xfc>
 8005c56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c5e:	81a3      	strh	r3, [r4, #12]
 8005c60:	f04f 30ff 	mov.w	r0, #4294967295
 8005c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c68:	4407      	add	r7, r0
 8005c6a:	eba8 0800 	sub.w	r8, r8, r0
 8005c6e:	e7e7      	b.n	8005c40 <__sflush_r+0xd4>
 8005c70:	dfbffffe 	.word	0xdfbffffe

08005c74 <_fflush_r>:
 8005c74:	b538      	push	{r3, r4, r5, lr}
 8005c76:	690b      	ldr	r3, [r1, #16]
 8005c78:	4605      	mov	r5, r0
 8005c7a:	460c      	mov	r4, r1
 8005c7c:	b913      	cbnz	r3, 8005c84 <_fflush_r+0x10>
 8005c7e:	2500      	movs	r5, #0
 8005c80:	4628      	mov	r0, r5
 8005c82:	bd38      	pop	{r3, r4, r5, pc}
 8005c84:	b118      	cbz	r0, 8005c8e <_fflush_r+0x1a>
 8005c86:	6a03      	ldr	r3, [r0, #32]
 8005c88:	b90b      	cbnz	r3, 8005c8e <_fflush_r+0x1a>
 8005c8a:	f7ff fc8f 	bl	80055ac <__sinit>
 8005c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0f3      	beq.n	8005c7e <_fflush_r+0xa>
 8005c96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005c98:	07d0      	lsls	r0, r2, #31
 8005c9a:	d404      	bmi.n	8005ca6 <_fflush_r+0x32>
 8005c9c:	0599      	lsls	r1, r3, #22
 8005c9e:	d402      	bmi.n	8005ca6 <_fflush_r+0x32>
 8005ca0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ca2:	f7ff fe68 	bl	8005976 <__retarget_lock_acquire_recursive>
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	4621      	mov	r1, r4
 8005caa:	f7ff ff5f 	bl	8005b6c <__sflush_r>
 8005cae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005cb0:	07da      	lsls	r2, r3, #31
 8005cb2:	4605      	mov	r5, r0
 8005cb4:	d4e4      	bmi.n	8005c80 <_fflush_r+0xc>
 8005cb6:	89a3      	ldrh	r3, [r4, #12]
 8005cb8:	059b      	lsls	r3, r3, #22
 8005cba:	d4e1      	bmi.n	8005c80 <_fflush_r+0xc>
 8005cbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cbe:	f7ff fe5b 	bl	8005978 <__retarget_lock_release_recursive>
 8005cc2:	e7dd      	b.n	8005c80 <_fflush_r+0xc>

08005cc4 <__swhatbuf_r>:
 8005cc4:	b570      	push	{r4, r5, r6, lr}
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ccc:	2900      	cmp	r1, #0
 8005cce:	b096      	sub	sp, #88	@ 0x58
 8005cd0:	4615      	mov	r5, r2
 8005cd2:	461e      	mov	r6, r3
 8005cd4:	da0d      	bge.n	8005cf2 <__swhatbuf_r+0x2e>
 8005cd6:	89a3      	ldrh	r3, [r4, #12]
 8005cd8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005cdc:	f04f 0100 	mov.w	r1, #0
 8005ce0:	bf14      	ite	ne
 8005ce2:	2340      	movne	r3, #64	@ 0x40
 8005ce4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005ce8:	2000      	movs	r0, #0
 8005cea:	6031      	str	r1, [r6, #0]
 8005cec:	602b      	str	r3, [r5, #0]
 8005cee:	b016      	add	sp, #88	@ 0x58
 8005cf0:	bd70      	pop	{r4, r5, r6, pc}
 8005cf2:	466a      	mov	r2, sp
 8005cf4:	f000 f848 	bl	8005d88 <_fstat_r>
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	dbec      	blt.n	8005cd6 <__swhatbuf_r+0x12>
 8005cfc:	9901      	ldr	r1, [sp, #4]
 8005cfe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005d02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005d06:	4259      	negs	r1, r3
 8005d08:	4159      	adcs	r1, r3
 8005d0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d0e:	e7eb      	b.n	8005ce8 <__swhatbuf_r+0x24>

08005d10 <__smakebuf_r>:
 8005d10:	898b      	ldrh	r3, [r1, #12]
 8005d12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d14:	079d      	lsls	r5, r3, #30
 8005d16:	4606      	mov	r6, r0
 8005d18:	460c      	mov	r4, r1
 8005d1a:	d507      	bpl.n	8005d2c <__smakebuf_r+0x1c>
 8005d1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	6123      	str	r3, [r4, #16]
 8005d24:	2301      	movs	r3, #1
 8005d26:	6163      	str	r3, [r4, #20]
 8005d28:	b003      	add	sp, #12
 8005d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d2c:	ab01      	add	r3, sp, #4
 8005d2e:	466a      	mov	r2, sp
 8005d30:	f7ff ffc8 	bl	8005cc4 <__swhatbuf_r>
 8005d34:	9f00      	ldr	r7, [sp, #0]
 8005d36:	4605      	mov	r5, r0
 8005d38:	4639      	mov	r1, r7
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	f7ff fe8a 	bl	8005a54 <_malloc_r>
 8005d40:	b948      	cbnz	r0, 8005d56 <__smakebuf_r+0x46>
 8005d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d46:	059a      	lsls	r2, r3, #22
 8005d48:	d4ee      	bmi.n	8005d28 <__smakebuf_r+0x18>
 8005d4a:	f023 0303 	bic.w	r3, r3, #3
 8005d4e:	f043 0302 	orr.w	r3, r3, #2
 8005d52:	81a3      	strh	r3, [r4, #12]
 8005d54:	e7e2      	b.n	8005d1c <__smakebuf_r+0xc>
 8005d56:	89a3      	ldrh	r3, [r4, #12]
 8005d58:	6020      	str	r0, [r4, #0]
 8005d5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d5e:	81a3      	strh	r3, [r4, #12]
 8005d60:	9b01      	ldr	r3, [sp, #4]
 8005d62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005d66:	b15b      	cbz	r3, 8005d80 <__smakebuf_r+0x70>
 8005d68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d6c:	4630      	mov	r0, r6
 8005d6e:	f000 f81d 	bl	8005dac <_isatty_r>
 8005d72:	b128      	cbz	r0, 8005d80 <__smakebuf_r+0x70>
 8005d74:	89a3      	ldrh	r3, [r4, #12]
 8005d76:	f023 0303 	bic.w	r3, r3, #3
 8005d7a:	f043 0301 	orr.w	r3, r3, #1
 8005d7e:	81a3      	strh	r3, [r4, #12]
 8005d80:	89a3      	ldrh	r3, [r4, #12]
 8005d82:	431d      	orrs	r5, r3
 8005d84:	81a5      	strh	r5, [r4, #12]
 8005d86:	e7cf      	b.n	8005d28 <__smakebuf_r+0x18>

08005d88 <_fstat_r>:
 8005d88:	b538      	push	{r3, r4, r5, lr}
 8005d8a:	4d07      	ldr	r5, [pc, #28]	@ (8005da8 <_fstat_r+0x20>)
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	4604      	mov	r4, r0
 8005d90:	4608      	mov	r0, r1
 8005d92:	4611      	mov	r1, r2
 8005d94:	602b      	str	r3, [r5, #0]
 8005d96:	f7fb f968 	bl	800106a <_fstat>
 8005d9a:	1c43      	adds	r3, r0, #1
 8005d9c:	d102      	bne.n	8005da4 <_fstat_r+0x1c>
 8005d9e:	682b      	ldr	r3, [r5, #0]
 8005da0:	b103      	cbz	r3, 8005da4 <_fstat_r+0x1c>
 8005da2:	6023      	str	r3, [r4, #0]
 8005da4:	bd38      	pop	{r3, r4, r5, pc}
 8005da6:	bf00      	nop
 8005da8:	200006f0 	.word	0x200006f0

08005dac <_isatty_r>:
 8005dac:	b538      	push	{r3, r4, r5, lr}
 8005dae:	4d06      	ldr	r5, [pc, #24]	@ (8005dc8 <_isatty_r+0x1c>)
 8005db0:	2300      	movs	r3, #0
 8005db2:	4604      	mov	r4, r0
 8005db4:	4608      	mov	r0, r1
 8005db6:	602b      	str	r3, [r5, #0]
 8005db8:	f7fb f967 	bl	800108a <_isatty>
 8005dbc:	1c43      	adds	r3, r0, #1
 8005dbe:	d102      	bne.n	8005dc6 <_isatty_r+0x1a>
 8005dc0:	682b      	ldr	r3, [r5, #0]
 8005dc2:	b103      	cbz	r3, 8005dc6 <_isatty_r+0x1a>
 8005dc4:	6023      	str	r3, [r4, #0]
 8005dc6:	bd38      	pop	{r3, r4, r5, pc}
 8005dc8:	200006f0 	.word	0x200006f0

08005dcc <_sbrk_r>:
 8005dcc:	b538      	push	{r3, r4, r5, lr}
 8005dce:	4d06      	ldr	r5, [pc, #24]	@ (8005de8 <_sbrk_r+0x1c>)
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	4608      	mov	r0, r1
 8005dd6:	602b      	str	r3, [r5, #0]
 8005dd8:	f7fb f970 	bl	80010bc <_sbrk>
 8005ddc:	1c43      	adds	r3, r0, #1
 8005dde:	d102      	bne.n	8005de6 <_sbrk_r+0x1a>
 8005de0:	682b      	ldr	r3, [r5, #0]
 8005de2:	b103      	cbz	r3, 8005de6 <_sbrk_r+0x1a>
 8005de4:	6023      	str	r3, [r4, #0]
 8005de6:	bd38      	pop	{r3, r4, r5, pc}
 8005de8:	200006f0 	.word	0x200006f0

08005dec <_init>:
 8005dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dee:	bf00      	nop
 8005df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005df2:	bc08      	pop	{r3}
 8005df4:	469e      	mov	lr, r3
 8005df6:	4770      	bx	lr

08005df8 <_fini>:
 8005df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfa:	bf00      	nop
 8005dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dfe:	bc08      	pop	{r3}
 8005e00:	469e      	mov	lr, r3
 8005e02:	4770      	bx	lr
