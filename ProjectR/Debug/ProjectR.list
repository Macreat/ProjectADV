
ProjectR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ac4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000778  08006c54  08006c54  00007c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073cc  080073cc  0000907c  2**0
                  CONTENTS
  4 .ARM          00000008  080073cc  080073cc  000083cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073d4  080073d4  0000907c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073d4  080073d4  000083d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080073d8  080073d8  000083d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080073dc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000764  2000007c  08007458  0000907c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007e0  08007458  000097e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134c0  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b90  00000000  00000000  0001c56c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  0001f100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d07  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000298b8  00000000  00000000  00020eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015aae  00000000  00000000  0004a7a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100712  00000000  00000000  00060255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00160967  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e68  00000000  00000000  001609ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00165814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c3c 	.word	0x08006c3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08006c3c 	.word	0x08006c3c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <keypad_debounce>:

#include "main.h"


static uint8_t keypad_debounce(uint16_t GPIO_Pin)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
	static uint16_t last_pressed = 0xFFFF;
	static uint32_t last_tick = 0;

	if (last_pressed == GPIO_Pin) {
 800057a:	4b0e      	ldr	r3, [pc, #56]	@ (80005b4 <keypad_debounce+0x44>)
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	88fa      	ldrh	r2, [r7, #6]
 8000580:	429a      	cmp	r2, r3
 8000582:	d109      	bne.n	8000598 <keypad_debounce+0x28>
		if (HAL_GetTick() < (last_tick + 200)) {
 8000584:	f000 ff86 	bl	8001494 <HAL_GetTick>
 8000588:	4602      	mov	r2, r0
 800058a:	4b0b      	ldr	r3, [pc, #44]	@ (80005b8 <keypad_debounce+0x48>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	33c8      	adds	r3, #200	@ 0xc8
 8000590:	429a      	cmp	r2, r3
 8000592:	d201      	bcs.n	8000598 <keypad_debounce+0x28>
			return 0;
 8000594:	2300      	movs	r3, #0
 8000596:	e008      	b.n	80005aa <keypad_debounce+0x3a>
		}
	}
	last_pressed = GPIO_Pin;
 8000598:	4a06      	ldr	r2, [pc, #24]	@ (80005b4 <keypad_debounce+0x44>)
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	8013      	strh	r3, [r2, #0]
	last_tick = HAL_GetTick();
 800059e:	f000 ff79 	bl	8001494 <HAL_GetTick>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a04      	ldr	r2, [pc, #16]	@ (80005b8 <keypad_debounce+0x48>)
 80005a6:	6013      	str	r3, [r2, #0]

	return 1;
 80005a8:	2301      	movs	r3, #1
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000010 	.word	0x20000010
 80005b8:	20000098 	.word	0x20000098

080005bc <keypad_scan_row>:

uint8_t keypad_scan_row(GPIO_TypeDef *COLUMNx_GPIO_Port, uint16_t COLUMNx_Pin)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	460b      	mov	r3, r1
 80005c6:	807b      	strh	r3, [r7, #2]
	uint8_t row_pressed = 0xFF;
 80005c8:	23ff      	movs	r3, #255	@ 0xff
 80005ca:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, GPIO_PIN_RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d6:	f001 fd61 	bl	800209c <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLUMNx_GPIO_Port, COLUMNx_Pin) == 0) {
 80005da:	887b      	ldrh	r3, [r7, #2]
 80005dc:	4619      	mov	r1, r3
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f001 fd44 	bl	800206c <HAL_GPIO_ReadPin>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d102      	bne.n	80005f0 <keypad_scan_row+0x34>
		row_pressed =  1;
 80005ea:	2301      	movs	r3, #1
 80005ec:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 80005ee:	e030      	b.n	8000652 <keypad_scan_row+0x96>
	}
	HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2108      	movs	r1, #8
 80005f4:	4824      	ldr	r0, [pc, #144]	@ (8000688 <keypad_scan_row+0xcc>)
 80005f6:	f001 fd51 	bl	800209c <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLUMNx_GPIO_Port, COLUMNx_Pin) == 0) {
 80005fa:	887b      	ldrh	r3, [r7, #2]
 80005fc:	4619      	mov	r1, r3
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f001 fd34 	bl	800206c <HAL_GPIO_ReadPin>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d102      	bne.n	8000610 <keypad_scan_row+0x54>
		row_pressed =  2;
 800060a:	2302      	movs	r3, #2
 800060c:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 800060e:	e020      	b.n	8000652 <keypad_scan_row+0x96>
	}
	HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2120      	movs	r1, #32
 8000614:	481c      	ldr	r0, [pc, #112]	@ (8000688 <keypad_scan_row+0xcc>)
 8000616:	f001 fd41 	bl	800209c <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLUMNx_GPIO_Port, COLUMNx_Pin) == 0) {
 800061a:	887b      	ldrh	r3, [r7, #2]
 800061c:	4619      	mov	r1, r3
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f001 fd24 	bl	800206c <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d102      	bne.n	8000630 <keypad_scan_row+0x74>
		row_pressed =  3;
 800062a:	2303      	movs	r3, #3
 800062c:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 800062e:	e010      	b.n	8000652 <keypad_scan_row+0x96>
	}
	HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	2110      	movs	r1, #16
 8000634:	4814      	ldr	r0, [pc, #80]	@ (8000688 <keypad_scan_row+0xcc>)
 8000636:	f001 fd31 	bl	800209c <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(COLUMNx_GPIO_Port, COLUMNx_Pin) == 0) {
 800063a:	887b      	ldrh	r3, [r7, #2]
 800063c:	4619      	mov	r1, r3
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f001 fd14 	bl	800206c <HAL_GPIO_ReadPin>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d102      	bne.n	8000650 <keypad_scan_row+0x94>
		row_pressed =  4;
 800064a:	2304      	movs	r3, #4
 800064c:	73fb      	strb	r3, [r7, #15]
		goto row_scan_end;
 800064e:	e000      	b.n	8000652 <keypad_scan_row+0x96>
	}
row_scan_end:
 8000650:	bf00      	nop
	HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, GPIO_PIN_SET);
 8000652:	2201      	movs	r2, #1
 8000654:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000658:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065c:	f001 fd1e 	bl	800209c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	2108      	movs	r1, #8
 8000664:	4808      	ldr	r0, [pc, #32]	@ (8000688 <keypad_scan_row+0xcc>)
 8000666:	f001 fd19 	bl	800209c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, GPIO_PIN_SET);
 800066a:	2201      	movs	r2, #1
 800066c:	2120      	movs	r1, #32
 800066e:	4806      	ldr	r0, [pc, #24]	@ (8000688 <keypad_scan_row+0xcc>)
 8000670:	f001 fd14 	bl	800209c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	2110      	movs	r1, #16
 8000678:	4803      	ldr	r0, [pc, #12]	@ (8000688 <keypad_scan_row+0xcc>)
 800067a:	f001 fd0f 	bl	800209c <HAL_GPIO_WritePin>
	return row_pressed; // not detected
 800067e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	48000400 	.word	0x48000400

0800068c <keypad_scan>:
		{'7', '8', '9', 'C'},
		{'*', '0', '#', 'D'},
};

uint8_t keypad_scan(uint16_t GPIO_Pin)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	80fb      	strh	r3, [r7, #6]
	uint8_t key_pressed = 0xFF;
 8000696:	23ff      	movs	r3, #255	@ 0xff
 8000698:	73fb      	strb	r3, [r7, #15]

	if (keypad_debounce(GPIO_Pin) == 0) {
 800069a:	88fb      	ldrh	r3, [r7, #6]
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff ff67 	bl	8000570 <keypad_debounce>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d101      	bne.n	80006ac <keypad_scan+0x20>
		return key_pressed;
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	e052      	b.n	8000752 <keypad_scan+0xc6>
	}
	uint8_t row = 0xFF;
 80006ac:	23ff      	movs	r3, #255	@ 0xff
 80006ae:	73bb      	strb	r3, [r7, #14]
	switch (GPIO_Pin) {
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006b6:	d00e      	beq.n	80006d6 <keypad_scan+0x4a>
 80006b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006bc:	dc47      	bgt.n	800074e <keypad_scan+0xc2>
 80006be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80006c2:	d026      	beq.n	8000712 <keypad_scan+0x86>
 80006c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80006c8:	dc41      	bgt.n	800074e <keypad_scan+0xc2>
 80006ca:	2b80      	cmp	r3, #128	@ 0x80
 80006cc:	d031      	beq.n	8000732 <keypad_scan+0xa6>
 80006ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80006d2:	d00e      	beq.n	80006f2 <keypad_scan+0x66>
	case COL_4_Pin:
			row = keypad_scan_row(COL_4_GPIO_Port, COL_4_Pin);
			key_pressed = keypad_chars[row - 1][4 - 1];
			break;
	default:
		break;
 80006d4:	e03b      	b.n	800074e <keypad_scan+0xc2>
		row = keypad_scan_row(COL_1_GPIO_Port, COL_1_Pin);
 80006d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006da:	4820      	ldr	r0, [pc, #128]	@ (800075c <keypad_scan+0xd0>)
 80006dc:	f7ff ff6e 	bl	80005bc <keypad_scan_row>
 80006e0:	4603      	mov	r3, r0
 80006e2:	73bb      	strb	r3, [r7, #14]
		key_pressed = keypad_chars[row - 1][1 - 1];
 80006e4:	7bbb      	ldrb	r3, [r7, #14]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000760 <keypad_scan+0xd4>)
 80006ea:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80006ee:	73fb      	strb	r3, [r7, #15]
		break;
 80006f0:	e02e      	b.n	8000750 <keypad_scan+0xc4>
		row = keypad_scan_row(COL_2_GPIO_Port, COL_2_Pin);
 80006f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006fa:	f7ff ff5f 	bl	80005bc <keypad_scan_row>
 80006fe:	4603      	mov	r3, r0
 8000700:	73bb      	strb	r3, [r7, #14]
		key_pressed = keypad_chars[row - 1][2 - 1];
 8000702:	7bbb      	ldrb	r3, [r7, #14]
 8000704:	3b01      	subs	r3, #1
 8000706:	4a16      	ldr	r2, [pc, #88]	@ (8000760 <keypad_scan+0xd4>)
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	4413      	add	r3, r2
 800070c:	785b      	ldrb	r3, [r3, #1]
 800070e:	73fb      	strb	r3, [r7, #15]
		break;
 8000710:	e01e      	b.n	8000750 <keypad_scan+0xc4>
			row = keypad_scan_row(COL_3_GPIO_Port, COL_3_Pin);
 8000712:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000716:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800071a:	f7ff ff4f 	bl	80005bc <keypad_scan_row>
 800071e:	4603      	mov	r3, r0
 8000720:	73bb      	strb	r3, [r7, #14]
			key_pressed = keypad_chars[row - 1][3 - 1];
 8000722:	7bbb      	ldrb	r3, [r7, #14]
 8000724:	3b01      	subs	r3, #1
 8000726:	4a0e      	ldr	r2, [pc, #56]	@ (8000760 <keypad_scan+0xd4>)
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	4413      	add	r3, r2
 800072c:	789b      	ldrb	r3, [r3, #2]
 800072e:	73fb      	strb	r3, [r7, #15]
			break;
 8000730:	e00e      	b.n	8000750 <keypad_scan+0xc4>
			row = keypad_scan_row(COL_4_GPIO_Port, COL_4_Pin);
 8000732:	2180      	movs	r1, #128	@ 0x80
 8000734:	480b      	ldr	r0, [pc, #44]	@ (8000764 <keypad_scan+0xd8>)
 8000736:	f7ff ff41 	bl	80005bc <keypad_scan_row>
 800073a:	4603      	mov	r3, r0
 800073c:	73bb      	strb	r3, [r7, #14]
			key_pressed = keypad_chars[row - 1][4 - 1];
 800073e:	7bbb      	ldrb	r3, [r7, #14]
 8000740:	3b01      	subs	r3, #1
 8000742:	4a07      	ldr	r2, [pc, #28]	@ (8000760 <keypad_scan+0xd4>)
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	4413      	add	r3, r2
 8000748:	78db      	ldrb	r3, [r3, #3]
 800074a:	73fb      	strb	r3, [r7, #15]
			break;
 800074c:	e000      	b.n	8000750 <keypad_scan+0xc4>
		break;
 800074e:	bf00      	nop
	}
	return key_pressed;
 8000750:	7bfb      	ldrb	r3, [r7, #15]
}
 8000752:	4618      	mov	r0, r3
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	48000400 	.word	0x48000400
 8000760:	20000000 	.word	0x20000000
 8000764:	48000800 	.word	0x48000800

08000768 <_write>:
 * By using this function, any call to `printf` will output the message
 * to the UART interface, which can be monitored with a serial console.
 */

int _write(int file, char *ptr, int len)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
  // to using printf
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	b29a      	uxth	r2, r3
 8000778:	230a      	movs	r3, #10
 800077a:	68b9      	ldr	r1, [r7, #8]
 800077c:	4803      	ldr	r0, [pc, #12]	@ (800078c <_write+0x24>)
 800077e:	f004 fab9 	bl	8004cf4 <HAL_UART_Transmit>
  return len;
 8000782:	687b      	ldr	r3, [r7, #4]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200000f0 	.word	0x200000f0

08000790 <HAL_GPIO_EXTI_Callback>:
 * - The result of the validation (correct or incorrect) is displayed on the OLED and transmitted via UART.
 * - The buffer is reset after validation.
 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af02      	add	r7, sp, #8
 8000796:	4603      	mov	r3, r0
 8000798:	80fb      	strh	r3, [r7, #6]
	uint8_t key_pressed = keypad_scan(GPIO_Pin);
 800079a:	88fb      	ldrh	r3, [r7, #6]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ff75 	bl	800068c <keypad_scan>
 80007a2:	4603      	mov	r3, r0
 80007a4:	737b      	strb	r3, [r7, #13]

	    if (key_pressed != 0xFF) {
 80007a6:	7b7b      	ldrb	r3, [r7, #13]
 80007a8:	2bff      	cmp	r3, #255	@ 0xff
 80007aa:	f000 80d2 	beq.w	8000952 <HAL_GPIO_EXTI_Callback+0x1c2>
	        // when '*' is pressed, the sequence is RESET
	        if (key_pressed == '*') {
 80007ae:	7b7b      	ldrb	r3, [r7, #13]
 80007b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80007b2:	d121      	bne.n	80007f8 <HAL_GPIO_EXTI_Callback+0x68>
	            ring_buffer_reset(&keyboard_ring_buffer);
 80007b4:	4868      	ldr	r0, [pc, #416]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x1c8>)
 80007b6:	f000 fb75 	bl	8000ea4 <ring_buffer_reset>
	            memset(display_buffer, 0, sizeof(display_buffer)); //clean actual buffer on the screen
 80007ba:	2215      	movs	r2, #21
 80007bc:	2100      	movs	r1, #0
 80007be:	4867      	ldr	r0, [pc, #412]	@ (800095c <HAL_GPIO_EXTI_Callback+0x1cc>)
 80007c0:	f005 fc5e 	bl	8006080 <memset>
	            buffer_index = 0; // reset index on buffer
 80007c4:	4b66      	ldr	r3, [pc, #408]	@ (8000960 <HAL_GPIO_EXTI_Callback+0x1d0>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]

	            ssd1306_Fill(Black);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f005 f892 	bl	80058f4 <ssd1306_Fill>
	            ssd1306_SetCursor(10, 20);
 80007d0:	2114      	movs	r1, #20
 80007d2:	200a      	movs	r0, #10
 80007d4:	f005 f9d8 	bl	8005b88 <ssd1306_SetCursor>
	            ssd1306_WriteString("sequence restarted", Font_6x8, White);
 80007d8:	4b62      	ldr	r3, [pc, #392]	@ (8000964 <HAL_GPIO_EXTI_Callback+0x1d4>)
 80007da:	2201      	movs	r2, #1
 80007dc:	9200      	str	r2, [sp, #0]
 80007de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007e0:	4861      	ldr	r0, [pc, #388]	@ (8000968 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80007e2:	f005 f9ab 	bl	8005b3c <ssd1306_WriteString>
	            ssd1306_UpdateScreen();
 80007e6:	f005 f89d 	bl	8005924 <ssd1306_UpdateScreen>
	            HAL_UART_Transmit(&huart2, (uint8_t*)"Sequence restarted\n\r", 22, 10);
 80007ea:	230a      	movs	r3, #10
 80007ec:	2216      	movs	r2, #22
 80007ee:	495f      	ldr	r1, [pc, #380]	@ (800096c <HAL_GPIO_EXTI_Callback+0x1dc>)
 80007f0:	485f      	ldr	r0, [pc, #380]	@ (8000970 <HAL_GPIO_EXTI_Callback+0x1e0>)
 80007f2:	f004 fa7f 	bl	8004cf4 <HAL_UART_Transmit>
	            return;
 80007f6:	e0ac      	b.n	8000952 <HAL_GPIO_EXTI_Callback+0x1c2>
	        }

	        // Write the key to the ring buffer
	        if (key_pressed != '#') {
 80007f8:	7b7b      	ldrb	r3, [r7, #13]
 80007fa:	2b23      	cmp	r3, #35	@ 0x23
 80007fc:	d031      	beq.n	8000862 <HAL_GPIO_EXTI_Callback+0xd2>
	            ring_buffer_write(&keyboard_ring_buffer, key_pressed);
 80007fe:	7b7b      	ldrb	r3, [r7, #13]
 8000800:	4619      	mov	r1, r3
 8000802:	4855      	ldr	r0, [pc, #340]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8000804:	f000 fb61 	bl	8000eca <ring_buffer_write>

	            // add chart to the buffer
	            if (buffer_index < MAX_DISPLAY_CHARS) {
 8000808:	4b55      	ldr	r3, [pc, #340]	@ (8000960 <HAL_GPIO_EXTI_Callback+0x1d0>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b13      	cmp	r3, #19
 800080e:	f200 809f 	bhi.w	8000950 <HAL_GPIO_EXTI_Callback+0x1c0>
	                display_buffer[buffer_index++] = key_pressed;
 8000812:	4b53      	ldr	r3, [pc, #332]	@ (8000960 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	1c5a      	adds	r2, r3, #1
 8000818:	b2d1      	uxtb	r1, r2
 800081a:	4a51      	ldr	r2, [pc, #324]	@ (8000960 <HAL_GPIO_EXTI_Callback+0x1d0>)
 800081c:	7011      	strb	r1, [r2, #0]
 800081e:	461a      	mov	r2, r3
 8000820:	7b79      	ldrb	r1, [r7, #13]
 8000822:	4b4e      	ldr	r3, [pc, #312]	@ (800095c <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000824:	5499      	strb	r1, [r3, r2]
	                display_buffer[buffer_index] = '\0'; // Null-terminar el buffer
 8000826:	4b4e      	ldr	r3, [pc, #312]	@ (8000960 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	461a      	mov	r2, r3
 800082c:	4b4b      	ldr	r3, [pc, #300]	@ (800095c <HAL_GPIO_EXTI_Callback+0x1cc>)
 800082e:	2100      	movs	r1, #0
 8000830:	5499      	strb	r1, [r3, r2]

	                // clean screen and show buffer content on screen
	                ssd1306_Fill(Black);
 8000832:	2000      	movs	r0, #0
 8000834:	f005 f85e 	bl	80058f4 <ssd1306_Fill>
	                ssd1306_SetCursor(10, 30);
 8000838:	211e      	movs	r1, #30
 800083a:	200a      	movs	r0, #10
 800083c:	f005 f9a4 	bl	8005b88 <ssd1306_SetCursor>
	                ssd1306_WriteString(display_buffer, Font_6x8, White);
 8000840:	4b48      	ldr	r3, [pc, #288]	@ (8000964 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000842:	2201      	movs	r2, #1
 8000844:	9200      	str	r2, [sp, #0]
 8000846:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000848:	4844      	ldr	r0, [pc, #272]	@ (800095c <HAL_GPIO_EXTI_Callback+0x1cc>)
 800084a:	f005 f977 	bl	8005b3c <ssd1306_WriteString>
	                ssd1306_UpdateScreen();
 800084e:	f005 f869 	bl	8005924 <ssd1306_UpdateScreen>

	                // send chart via UART
	                HAL_UART_Transmit(&huart2, &key_pressed, 1, 10);
 8000852:	f107 010d 	add.w	r1, r7, #13
 8000856:	230a      	movs	r3, #10
 8000858:	2201      	movs	r2, #1
 800085a:	4845      	ldr	r0, [pc, #276]	@ (8000970 <HAL_GPIO_EXTI_Callback+0x1e0>)
 800085c:	f004 fa4a 	bl	8004cf4 <HAL_UART_Transmit>
	            }
	            return;
 8000860:	e076      	b.n	8000950 <HAL_GPIO_EXTI_Callback+0x1c0>

	        // proccoed when  '#' is pressed , we verify the password entered



	        uint8_t byte2 = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	733b      	strb	r3, [r7, #12]
	        uint8_t id_incorrect2 = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	73fb      	strb	r3, [r7, #15]
	        uint8_t my_id2[] = "123";  // correct sequence
 800086a:	4b42      	ldr	r3, [pc, #264]	@ (8000974 <HAL_GPIO_EXTI_Callback+0x1e4>)
 800086c:	60bb      	str	r3, [r7, #8]

	        // Read from buffer and compare with correct key
	        for (uint8_t idx2 = 0; idx2 < sizeof(my_id2) - 1; idx2++) {
 800086e:	2300      	movs	r3, #0
 8000870:	73bb      	strb	r3, [r7, #14]
 8000872:	e019      	b.n	80008a8 <HAL_GPIO_EXTI_Callback+0x118>
	            if (ring_buffer_read(&keyboard_ring_buffer, &byte2) != 0) {
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	4619      	mov	r1, r3
 800087a:	4837      	ldr	r0, [pc, #220]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x1c8>)
 800087c:	f000 fb63 	bl	8000f46 <ring_buffer_read>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d00a      	beq.n	800089c <HAL_GPIO_EXTI_Callback+0x10c>
	                if (byte2 != my_id2[idx2]) {
 8000886:	7bbb      	ldrb	r3, [r7, #14]
 8000888:	3310      	adds	r3, #16
 800088a:	443b      	add	r3, r7
 800088c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000890:	7b3b      	ldrb	r3, [r7, #12]
 8000892:	429a      	cmp	r2, r3
 8000894:	d005      	beq.n	80008a2 <HAL_GPIO_EXTI_Callback+0x112>
	                    id_incorrect2 = 1;  // Mark as incorrect if no match
 8000896:	2301      	movs	r3, #1
 8000898:	73fb      	strb	r3, [r7, #15]


	                    break;
 800089a:	e008      	b.n	80008ae <HAL_GPIO_EXTI_Callback+0x11e>
	                }
	            } else {
	                id_incorrect2 = 1;  // if there is no space in buffer
 800089c:	2301      	movs	r3, #1
 800089e:	73fb      	strb	r3, [r7, #15]
	                break;
 80008a0:	e005      	b.n	80008ae <HAL_GPIO_EXTI_Callback+0x11e>
	        for (uint8_t idx2 = 0; idx2 < sizeof(my_id2) - 1; idx2++) {
 80008a2:	7bbb      	ldrb	r3, [r7, #14]
 80008a4:	3301      	adds	r3, #1
 80008a6:	73bb      	strb	r3, [r7, #14]
 80008a8:	7bbb      	ldrb	r3, [r7, #14]
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	d9e2      	bls.n	8000874 <HAL_GPIO_EXTI_Callback+0xe4>
	            }
	        }

	        HAL_UART_Transmit(&huart2, (uint8_t*)"\n", 1, 10);
 80008ae:	230a      	movs	r3, #10
 80008b0:	2201      	movs	r2, #1
 80008b2:	4931      	ldr	r1, [pc, #196]	@ (8000978 <HAL_GPIO_EXTI_Callback+0x1e8>)
 80008b4:	482e      	ldr	r0, [pc, #184]	@ (8000970 <HAL_GPIO_EXTI_Callback+0x1e0>)
 80008b6:	f004 fa1d 	bl	8004cf4 <HAL_UART_Transmit>

	        if (!id_incorrect2) {
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d11f      	bne.n	8000900 <HAL_GPIO_EXTI_Callback+0x170>
	            // success
	            ssd1306_Fill(Black);
 80008c0:	2000      	movs	r0, #0
 80008c2:	f005 f817 	bl	80058f4 <ssd1306_Fill>
	            ssd1306_SetCursor(10, 20);
 80008c6:	2114      	movs	r1, #20
 80008c8:	200a      	movs	r0, #10
 80008ca:	f005 f95d 	bl	8005b88 <ssd1306_SetCursor>
	            ssd1306_WriteString("correct sequence", Font_6x8, White);
 80008ce:	4b25      	ldr	r3, [pc, #148]	@ (8000964 <HAL_GPIO_EXTI_Callback+0x1d4>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	9200      	str	r2, [sp, #0]
 80008d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008d6:	4829      	ldr	r0, [pc, #164]	@ (800097c <HAL_GPIO_EXTI_Callback+0x1ec>)
 80008d8:	f005 f930 	bl	8005b3c <ssd1306_WriteString>
	            ssd1306_UpdateScreen();
 80008dc:	f005 f822 	bl	8005924 <ssd1306_UpdateScreen>
	            HAL_UART_Transmit(&huart2, (uint8_t*)"correct sequence\n\r", 21, 10);
 80008e0:	230a      	movs	r3, #10
 80008e2:	2215      	movs	r2, #21
 80008e4:	4926      	ldr	r1, [pc, #152]	@ (8000980 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80008e6:	4822      	ldr	r0, [pc, #136]	@ (8000970 <HAL_GPIO_EXTI_Callback+0x1e0>)
 80008e8:	f004 fa04 	bl	8004cf4 <HAL_UART_Transmit>
	            HAL_UART_Transmit(&huart2, (uint8_t*)"starting...\n\r", 14, 10);
 80008ec:	230a      	movs	r3, #10
 80008ee:	220e      	movs	r2, #14
 80008f0:	4924      	ldr	r1, [pc, #144]	@ (8000984 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80008f2:	481f      	ldr	r0, [pc, #124]	@ (8000970 <HAL_GPIO_EXTI_Callback+0x1e0>)
 80008f4:	f004 f9fe 	bl	8004cf4 <HAL_UART_Transmit>
	            passwordCorrect = 1 ;
 80008f8:	4b23      	ldr	r3, [pc, #140]	@ (8000988 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	701a      	strb	r2, [r3, #0]
	            return;
 80008fe:	e028      	b.n	8000952 <HAL_GPIO_EXTI_Callback+0x1c2>



	        } else {
	            //  error
	            ssd1306_Fill(Black);
 8000900:	2000      	movs	r0, #0
 8000902:	f004 fff7 	bl	80058f4 <ssd1306_Fill>
	            ssd1306_SetCursor(10, 20);
 8000906:	2114      	movs	r1, #20
 8000908:	200a      	movs	r0, #10
 800090a:	f005 f93d 	bl	8005b88 <ssd1306_SetCursor>
	            ssd1306_WriteString("error ", Font_6x8, White);
 800090e:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000910:	2201      	movs	r2, #1
 8000912:	9200      	str	r2, [sp, #0]
 8000914:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000916:	481d      	ldr	r0, [pc, #116]	@ (800098c <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000918:	f005 f910 	bl	8005b3c <ssd1306_WriteString>
	            ssd1306_UpdateScreen();
 800091c:	f005 f802 	bl	8005924 <ssd1306_UpdateScreen>
	            HAL_UART_Transmit(&huart2, (uint8_t*)" incorrect sequence \n\r", 12, 10);
 8000920:	230a      	movs	r3, #10
 8000922:	220c      	movs	r2, #12
 8000924:	491a      	ldr	r1, [pc, #104]	@ (8000990 <HAL_GPIO_EXTI_Callback+0x200>)
 8000926:	4812      	ldr	r0, [pc, #72]	@ (8000970 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000928:	f004 f9e4 	bl	8004cf4 <HAL_UART_Transmit>

	        }

	        // reset buffer after validation
	        ring_buffer_reset(&keyboard_ring_buffer);
 800092c:	480a      	ldr	r0, [pc, #40]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x1c8>)
 800092e:	f000 fab9 	bl	8000ea4 <ring_buffer_reset>
	        memset(display_buffer, 0, sizeof(display_buffer)); // clean buffer on screen
 8000932:	2215      	movs	r2, #21
 8000934:	2100      	movs	r1, #0
 8000936:	4809      	ldr	r0, [pc, #36]	@ (800095c <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000938:	f005 fba2 	bl	8006080 <memset>
	        buffer_index = 0; // reset index buffer
 800093c:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <HAL_GPIO_EXTI_Callback+0x1d0>)
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]
	        cursor_x = 10;  //Resets the horizontal cursor position
 8000942:	4b14      	ldr	r3, [pc, #80]	@ (8000994 <HAL_GPIO_EXTI_Callback+0x204>)
 8000944:	220a      	movs	r2, #10
 8000946:	701a      	strb	r2, [r3, #0]
	        cursor_y = 30;  // Restarts the vertical position of the course
 8000948:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <HAL_GPIO_EXTI_Callback+0x208>)
 800094a:	221e      	movs	r2, #30
 800094c:	701a      	strb	r2, [r3, #0]
 800094e:	e000      	b.n	8000952 <HAL_GPIO_EXTI_Callback+0x1c2>
	            return;
 8000950:	bf00      	nop

	    }
}
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000264 	.word	0x20000264
 800095c:	2000026c 	.word	0x2000026c
 8000960:	20000281 	.word	0x20000281
 8000964:	0800738c 	.word	0x0800738c
 8000968:	08006c54 	.word	0x08006c54
 800096c:	08006c68 	.word	0x08006c68
 8000970:	200000f0 	.word	0x200000f0
 8000974:	00333231 	.word	0x00333231
 8000978:	08006c80 	.word	0x08006c80
 800097c:	08006c84 	.word	0x08006c84
 8000980:	08006c98 	.word	0x08006c98
 8000984:	08006cac 	.word	0x08006cac
 8000988:	20000282 	.word	0x20000282
 800098c:	08006cbc 	.word	0x08006cbc
 8000990:	08006cc4 	.word	0x08006cc4
 8000994:	20000012 	.word	0x20000012
 8000998:	20000013 	.word	0x20000013

0800099c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a2:	f000 fd0e 	bl	80013c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a6:	f000 f8fd 	bl	8000ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009aa:	f000 f9bd 	bl	8000d28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009ae:	f000 f98b 	bl	8000cc8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80009b2:	f000 f949 	bl	8000c48 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ring_buffer_init(&keyboard_ring_buffer, keyboard_buffer_memory, BUFFER_CAPACITY);
 80009b6:	220a      	movs	r2, #10
 80009b8:	496a      	ldr	r1, [pc, #424]	@ (8000b64 <main+0x1c8>)
 80009ba:	486b      	ldr	r0, [pc, #428]	@ (8000b68 <main+0x1cc>)
 80009bc:	f000 fa5e 	bl	8000e7c <ring_buffer_init>
  ssd1306_Init();
 80009c0:	f004 ff2e 	bl	8005820 <ssd1306_Init>
  ssd1306_Fill(Black);
 80009c4:	2000      	movs	r0, #0
 80009c6:	f004 ff95 	bl	80058f4 <ssd1306_Fill>
  ssd1306_SetCursor(10,20);
 80009ca:	2114      	movs	r1, #20
 80009cc:	200a      	movs	r0, #10
 80009ce:	f005 f8db 	bl	8005b88 <ssd1306_SetCursor>
  ssd1306_WriteString("Starting...\r\n",Font_6x8,White);
 80009d2:	4b66      	ldr	r3, [pc, #408]	@ (8000b6c <main+0x1d0>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	9200      	str	r2, [sp, #0]
 80009d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009da:	4865      	ldr	r0, [pc, #404]	@ (8000b70 <main+0x1d4>)
 80009dc:	f005 f8ae 	bl	8005b3c <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80009e0:	f004 ffa0 	bl	8005924 <ssd1306_UpdateScreen>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Starting...\r\n");
 80009e4:	4863      	ldr	r0, [pc, #396]	@ (8000b74 <main+0x1d8>)
 80009e6:	f005 fa31 	bl	8005e4c <puts>

  while (1)
  {
	  if(passwordCorrect)
 80009ea:	4b63      	ldr	r3, [pc, #396]	@ (8000b78 <main+0x1dc>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d0fa      	beq.n	80009ea <main+0x4e>
	  {
		  for (int i = 0 ; i < 1; i ++){
 80009f4:	2300      	movs	r3, #0
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	e008      	b.n	8000a0c <main+0x70>
			 printf("correct password. Welcome to our quality air system \r\n");
 80009fa:	4860      	ldr	r0, [pc, #384]	@ (8000b7c <main+0x1e0>)
 80009fc:	f005 fa26 	bl	8005e4c <puts>
			 passwordCorrect =0  ;
 8000a00:	4b5d      	ldr	r3, [pc, #372]	@ (8000b78 <main+0x1dc>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]
		  for (int i = 0 ; i < 1; i ++){
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	ddf3      	ble.n	80009fa <main+0x5e>
		  }

		  while(1)
		  {
			  HAL_ADC_Start(&hadc1);
 8000a12:	485b      	ldr	r0, [pc, #364]	@ (8000b80 <main+0x1e4>)
 8000a14:	f000 fdfa 	bl	800160c <HAL_ADC_Start>
			  		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000a18:	f04f 31ff 	mov.w	r1, #4294967295
 8000a1c:	4858      	ldr	r0, [pc, #352]	@ (8000b80 <main+0x1e4>)
 8000a1e:	f000 feaf 	bl	8001780 <HAL_ADC_PollForConversion>
			  		  raw_value_LDR  = HAL_ADC_GetValue(&hadc1);
 8000a22:	4857      	ldr	r0, [pc, #348]	@ (8000b80 <main+0x1e4>)
 8000a24:	f000 ff84 	bl	8001930 <HAL_ADC_GetValue>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	4b55      	ldr	r3, [pc, #340]	@ (8000b84 <main+0x1e8>)
 8000a2e:	801a      	strh	r2, [r3, #0]
			  		  sprintf (uart_buff, "Light : %hu \r\n", raw_value_LDR);
 8000a30:	4b54      	ldr	r3, [pc, #336]	@ (8000b84 <main+0x1e8>)
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4954      	ldr	r1, [pc, #336]	@ (8000b88 <main+0x1ec>)
 8000a38:	4854      	ldr	r0, [pc, #336]	@ (8000b8c <main+0x1f0>)
 8000a3a:	f005 fa0f 	bl	8005e5c <siprintf>
			  		  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buff, strlen(uart_buff), HAL_MAX_DELAY);
 8000a3e:	4853      	ldr	r0, [pc, #332]	@ (8000b8c <main+0x1f0>)
 8000a40:	f7ff fbc6 	bl	80001d0 <strlen>
 8000a44:	4603      	mov	r3, r0
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4c:	494f      	ldr	r1, [pc, #316]	@ (8000b8c <main+0x1f0>)
 8000a4e:	4850      	ldr	r0, [pc, #320]	@ (8000b90 <main+0x1f4>)
 8000a50:	f004 f950 	bl	8004cf4 <HAL_UART_Transmit>

			  		  HAL_ADC_Start(&hadc2);
 8000a54:	484f      	ldr	r0, [pc, #316]	@ (8000b94 <main+0x1f8>)
 8000a56:	f000 fdd9 	bl	800160c <HAL_ADC_Start>
			  		  HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8000a5a:	f04f 31ff 	mov.w	r1, #4294967295
 8000a5e:	484d      	ldr	r0, [pc, #308]	@ (8000b94 <main+0x1f8>)
 8000a60:	f000 fe8e 	bl	8001780 <HAL_ADC_PollForConversion>
			  		  raw_value_NTC  = HAL_ADC_GetValue(&hadc2);
 8000a64:	484b      	ldr	r0, [pc, #300]	@ (8000b94 <main+0x1f8>)
 8000a66:	f000 ff63 	bl	8001930 <HAL_ADC_GetValue>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	4b4a      	ldr	r3, [pc, #296]	@ (8000b98 <main+0x1fc>)
 8000a70:	801a      	strh	r2, [r3, #0]
			  		  sprintf (uart_buff, "NTC : %hu \r\n", raw_value_NTC);
 8000a72:	4b49      	ldr	r3, [pc, #292]	@ (8000b98 <main+0x1fc>)
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	461a      	mov	r2, r3
 8000a78:	4948      	ldr	r1, [pc, #288]	@ (8000b9c <main+0x200>)
 8000a7a:	4844      	ldr	r0, [pc, #272]	@ (8000b8c <main+0x1f0>)
 8000a7c:	f005 f9ee 	bl	8005e5c <siprintf>
			  		  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buff, strlen(uart_buff), HAL_MAX_DELAY);
 8000a80:	4842      	ldr	r0, [pc, #264]	@ (8000b8c <main+0x1f0>)
 8000a82:	f7ff fba5 	bl	80001d0 <strlen>
 8000a86:	4603      	mov	r3, r0
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	493f      	ldr	r1, [pc, #252]	@ (8000b8c <main+0x1f0>)
 8000a90:	483f      	ldr	r0, [pc, #252]	@ (8000b90 <main+0x1f4>)
 8000a92:	f004 f92f 	bl	8004cf4 <HAL_UART_Transmit>

			  		  HAL_Delay(1000);
 8000a96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a9a:	f000 fd07 	bl	80014ac <HAL_Delay>

			  		 	   //conditional for LDR incidence
			  		  if ( raw_value_LDR > 3000){
 8000a9e:	4b39      	ldr	r3, [pc, #228]	@ (8000b84 <main+0x1e8>)
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d905      	bls.n	8000ab6 <main+0x11a>
			  			  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin , 1 );
 8000aaa:	2201      	movs	r2, #1
 8000aac:	2101      	movs	r1, #1
 8000aae:	483c      	ldr	r0, [pc, #240]	@ (8000ba0 <main+0x204>)
 8000ab0:	f001 faf4 	bl	800209c <HAL_GPIO_WritePin>
 8000ab4:	e004      	b.n	8000ac0 <main+0x124>

			  		  }else{
			  			  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin , 0 );
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2101      	movs	r1, #1
 8000aba:	4839      	ldr	r0, [pc, #228]	@ (8000ba0 <main+0x204>)
 8000abc:	f001 faee 	bl	800209c <HAL_GPIO_WritePin>

			  		  }

			  		 	   // conditional for NTC incidence

			  		  if (raw_value_NTC <= 1250) {
 8000ac0:	4b35      	ldr	r3, [pc, #212]	@ (8000b98 <main+0x1fc>)
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d812      	bhi.n	8000af2 <main+0x156>
			  			  // Activa el LED1
			  			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000acc:	2201      	movs	r2, #1
 8000ace:	2110      	movs	r1, #16
 8000ad0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad4:	f001 fae2 	bl	800209c <HAL_GPIO_WritePin>
			  			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Asegura que el LED2 esté apagado
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2140      	movs	r1, #64	@ 0x40
 8000adc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae0:	f001 fadc 	bl	800209c <HAL_GPIO_WritePin>
			  			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET); // Asegura que el LED3 esté apagado
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2180      	movs	r1, #128	@ 0x80
 8000ae8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aec:	f001 fad6 	bl	800209c <HAL_GPIO_WritePin>
 8000af0:	e78f      	b.n	8000a12 <main+0x76>
			  		  }
			  		  else if (raw_value_NTC > 1250 && raw_value_NTC <= 2500) {
 8000af2:	4b29      	ldr	r3, [pc, #164]	@ (8000b98 <main+0x1fc>)
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d918      	bls.n	8000b30 <main+0x194>
 8000afe:	4b26      	ldr	r3, [pc, #152]	@ (8000b98 <main+0x1fc>)
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d812      	bhi.n	8000b30 <main+0x194>
			  			  // Activa el LED2
			  			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET); // Asegura que el LED1 esté apagado
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2110      	movs	r1, #16
 8000b0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b12:	f001 fac3 	bl	800209c <HAL_GPIO_WritePin>
			  			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2140      	movs	r1, #64	@ 0x40
 8000b1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b1e:	f001 fabd 	bl	800209c <HAL_GPIO_WritePin>
			  			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET); // Asegura que el LED3 esté apagado
 8000b22:	2200      	movs	r2, #0
 8000b24:	2180      	movs	r1, #128	@ 0x80
 8000b26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b2a:	f001 fab7 	bl	800209c <HAL_GPIO_WritePin>
 8000b2e:	e018      	b.n	8000b62 <main+0x1c6>
			  		  }
			  		  else if (raw_value_NTC > 2500) {
 8000b30:	4b19      	ldr	r3, [pc, #100]	@ (8000b98 <main+0x1fc>)
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	f67f af6a 	bls.w	8000a12 <main+0x76>
			  			  // Activa el LED3
			  			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET); // Asegura que el LED1 esté apagado
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2110      	movs	r1, #16
 8000b42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b46:	f001 faa9 	bl	800209c <HAL_GPIO_WritePin>
			  			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Asegura que el LED2 esté apagado
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2140      	movs	r1, #64	@ 0x40
 8000b4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b52:	f001 faa3 	bl	800209c <HAL_GPIO_WritePin>
			  			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000b56:	2201      	movs	r2, #1
 8000b58:	2180      	movs	r1, #128	@ 0x80
 8000b5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b5e:	f001 fa9d 	bl	800209c <HAL_GPIO_WritePin>
			  HAL_ADC_Start(&hadc1);
 8000b62:	e756      	b.n	8000a12 <main+0x76>
 8000b64:	20000258 	.word	0x20000258
 8000b68:	20000264 	.word	0x20000264
 8000b6c:	0800738c 	.word	0x0800738c
 8000b70:	08006cdc 	.word	0x08006cdc
 8000b74:	08006cec 	.word	0x08006cec
 8000b78:	20000282 	.word	0x20000282
 8000b7c:	08006cfc 	.word	0x08006cfc
 8000b80:	20000178 	.word	0x20000178
 8000b84:	20000256 	.word	0x20000256
 8000b88:	08006d34 	.word	0x08006d34
 8000b8c:	20000240 	.word	0x20000240
 8000b90:	200000f0 	.word	0x200000f0
 8000b94:	200001dc 	.word	0x200001dc
 8000b98:	20000254 	.word	0x20000254
 8000b9c:	08006d44 	.word	0x08006d44
 8000ba0:	48000400 	.word	0x48000400

08000ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b096      	sub	sp, #88	@ 0x58
 8000ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	2244      	movs	r2, #68	@ 0x44
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f005 fa64 	bl	8006080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb8:	463b      	mov	r3, r7
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bc6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000bca:	f002 fd33 	bl	8003634 <HAL_PWREx_ControlVoltageScaling>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000bd4:	f000 f94c 	bl	8000e70 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000bd8:	2310      	movs	r3, #16
 8000bda:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000be4:	2360      	movs	r3, #96	@ 0x60
 8000be6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be8:	2302      	movs	r3, #2
 8000bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000bec:	2301      	movs	r3, #1
 8000bee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000bf4:	2328      	movs	r3, #40	@ 0x28
 8000bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000bf8:	2307      	movs	r3, #7
 8000bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c00:	2302      	movs	r3, #2
 8000c02:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f002 fd69 	bl	80036e0 <HAL_RCC_OscConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000c14:	f000 f92c 	bl	8000e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c18:	230f      	movs	r3, #15
 8000c1a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	2104      	movs	r1, #4
 8000c30:	4618      	mov	r0, r3
 8000c32:	f003 f931 	bl	8003e98 <HAL_RCC_ClockConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c3c:	f000 f918 	bl	8000e70 <Error_Handler>
  }
}
 8000c40:	bf00      	nop
 8000c42:	3758      	adds	r7, #88	@ 0x58
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cbc <MX_I2C1_Init+0x74>)
 8000c4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000cc0 <MX_I2C1_Init+0x78>)
 8000c50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000c52:	4b1a      	ldr	r3, [pc, #104]	@ (8000cbc <MX_I2C1_Init+0x74>)
 8000c54:	4a1b      	ldr	r2, [pc, #108]	@ (8000cc4 <MX_I2C1_Init+0x7c>)
 8000c56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c58:	4b18      	ldr	r3, [pc, #96]	@ (8000cbc <MX_I2C1_Init+0x74>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c5e:	4b17      	ldr	r3, [pc, #92]	@ (8000cbc <MX_I2C1_Init+0x74>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c64:	4b15      	ldr	r3, [pc, #84]	@ (8000cbc <MX_I2C1_Init+0x74>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c6a:	4b14      	ldr	r3, [pc, #80]	@ (8000cbc <MX_I2C1_Init+0x74>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c70:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <MX_I2C1_Init+0x74>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c76:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <MX_I2C1_Init+0x74>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cbc <MX_I2C1_Init+0x74>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c82:	480e      	ldr	r0, [pc, #56]	@ (8000cbc <MX_I2C1_Init+0x74>)
 8000c84:	f001 fa3a 	bl	80020fc <HAL_I2C_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c8e:	f000 f8ef 	bl	8000e70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c92:	2100      	movs	r1, #0
 8000c94:	4809      	ldr	r0, [pc, #36]	@ (8000cbc <MX_I2C1_Init+0x74>)
 8000c96:	f002 fc27 	bl	80034e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ca0:	f000 f8e6 	bl	8000e70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4805      	ldr	r0, [pc, #20]	@ (8000cbc <MX_I2C1_Init+0x74>)
 8000ca8:	f002 fc69 	bl	800357e <HAL_I2CEx_ConfigDigitalFilter>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cb2:	f000 f8dd 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	2000009c 	.word	0x2000009c
 8000cc0:	40005400 	.word	0x40005400
 8000cc4:	10909cec 	.word	0x10909cec

08000cc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <MX_USART2_UART_Init+0x58>)
 8000cce:	4a15      	ldr	r2, [pc, #84]	@ (8000d24 <MX_USART2_UART_Init+0x5c>)
 8000cd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cd2:	4b13      	ldr	r3, [pc, #76]	@ (8000d20 <MX_USART2_UART_Init+0x58>)
 8000cd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cda:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <MX_USART2_UART_Init+0x58>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <MX_USART2_UART_Init+0x58>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <MX_USART2_UART_Init+0x58>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cec:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <MX_USART2_UART_Init+0x58>)
 8000cee:	220c      	movs	r2, #12
 8000cf0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <MX_USART2_UART_Init+0x58>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf8:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <MX_USART2_UART_Init+0x58>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cfe:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <MX_USART2_UART_Init+0x58>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <MX_USART2_UART_Init+0x58>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d0a:	4805      	ldr	r0, [pc, #20]	@ (8000d20 <MX_USART2_UART_Init+0x58>)
 8000d0c:	f003 ffa4 	bl	8004c58 <HAL_UART_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d16:	f000 f8ab 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200000f0 	.word	0x200000f0
 8000d24:	40004400 	.word	0x40004400

08000d28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2e:	f107 030c 	add.w	r3, r7, #12
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
 8000d3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	4b49      	ldr	r3, [pc, #292]	@ (8000e64 <MX_GPIO_Init+0x13c>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d42:	4a48      	ldr	r2, [pc, #288]	@ (8000e64 <MX_GPIO_Init+0x13c>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d4a:	4b46      	ldr	r3, [pc, #280]	@ (8000e64 <MX_GPIO_Init+0x13c>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d56:	4b43      	ldr	r3, [pc, #268]	@ (8000e64 <MX_GPIO_Init+0x13c>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5a:	4a42      	ldr	r2, [pc, #264]	@ (8000e64 <MX_GPIO_Init+0x13c>)
 8000d5c:	f043 0302 	orr.w	r3, r3, #2
 8000d60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d62:	4b40      	ldr	r3, [pc, #256]	@ (8000e64 <MX_GPIO_Init+0x13c>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e64 <MX_GPIO_Init+0x13c>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d72:	4a3c      	ldr	r2, [pc, #240]	@ (8000e64 <MX_GPIO_Init+0x13c>)
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d7a:	4b3a      	ldr	r3, [pc, #232]	@ (8000e64 <MX_GPIO_Init+0x13c>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7e:	f003 0304 	and.w	r3, r3, #4
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SYSTEM_LED_GPIO_Port, SYSTEM_LED_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2120      	movs	r1, #32
 8000d8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d8e:	f001 f985 	bl	800209c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, GPIO_PIN_SET);
 8000d92:	2201      	movs	r2, #1
 8000d94:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d9c:	f001 f97e 	bl	800209c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ROW_2_Pin|ROW_4_Pin|ROW_3_Pin, GPIO_PIN_SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	2138      	movs	r1, #56	@ 0x38
 8000da4:	4830      	ldr	r0, [pc, #192]	@ (8000e68 <MX_GPIO_Init+0x140>)
 8000da6:	f001 f979 	bl	800209c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SYSTEM_LED_Pin ROW_1_Pin */
  GPIO_InitStruct.Pin = SYSTEM_LED_Pin|ROW_1_Pin;
 8000daa:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8000dae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc6:	f000 ffa7 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : COL_1_Pin */
  GPIO_InitStruct.Pin = COL_1_Pin;
 8000dca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dd0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(COL_1_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 030c 	add.w	r3, r7, #12
 8000dde:	4619      	mov	r1, r3
 8000de0:	4821      	ldr	r0, [pc, #132]	@ (8000e68 <MX_GPIO_Init+0x140>)
 8000de2:	f000 ff99 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : COL_4_Pin */
  GPIO_InitStruct.Pin = COL_4_Pin;
 8000de6:	2380      	movs	r3, #128	@ 0x80
 8000de8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000df0:	2302      	movs	r3, #2
 8000df2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(COL_4_GPIO_Port, &GPIO_InitStruct);
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	4619      	mov	r1, r3
 8000dfa:	481c      	ldr	r0, [pc, #112]	@ (8000e6c <MX_GPIO_Init+0x144>)
 8000dfc:	f000 ff8c 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL_2_Pin COL_3_Pin */
  GPIO_InitStruct.Pin = COL_2_Pin|COL_3_Pin;
 8000e00:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e06:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	4619      	mov	r1, r3
 8000e16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e1a:	f000 ff7d 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW_2_Pin ROW_4_Pin ROW_3_Pin */
  GPIO_InitStruct.Pin = ROW_2_Pin|ROW_4_Pin|ROW_3_Pin;
 8000e1e:	2338      	movs	r3, #56	@ 0x38
 8000e20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	4619      	mov	r1, r3
 8000e34:	480c      	ldr	r0, [pc, #48]	@ (8000e68 <MX_GPIO_Init+0x140>)
 8000e36:	f000 ff6f 	bl	8001d18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2017      	movs	r0, #23
 8000e40:	f000 fee5 	bl	8001c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e44:	2017      	movs	r0, #23
 8000e46:	f000 fefe 	bl	8001c46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2028      	movs	r0, #40	@ 0x28
 8000e50:	f000 fedd 	bl	8001c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e54:	2028      	movs	r0, #40	@ 0x28
 8000e56:	f000 fef6 	bl	8001c46 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e5a:	bf00      	nop
 8000e5c:	3720      	adds	r7, #32
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40021000 	.word	0x40021000
 8000e68:	48000400 	.word	0x48000400
 8000e6c:	48000800 	.word	0x48000800

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <Error_Handler+0x8>

08000e7c <ring_buffer_init>:

#include "ring_buffer.h"


void ring_buffer_init(ring_buffer_t *rb, uint8_t *mem_add, uint8_t cap)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	4613      	mov	r3, r2
 8000e88:	71fb      	strb	r3, [r7, #7]
	rb->buffer = mem_add;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	68ba      	ldr	r2, [r7, #8]
 8000e8e:	601a      	str	r2, [r3, #0]
	rb->capacity = cap;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	79fa      	ldrb	r2, [r7, #7]
 8000e94:	71da      	strb	r2, [r3, #7]

	ring_buffer_reset(rb);
 8000e96:	68f8      	ldr	r0, [r7, #12]
 8000e98:	f000 f804 	bl	8000ea4 <ring_buffer_reset>
}
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <ring_buffer_reset>:
 * @brief Esta funcion reinicia los datos disponibles en el buffer
 *
 * @retval size: cantidad de datos disponibles
 */
void ring_buffer_reset(ring_buffer_t *rb)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	rb->head = 0;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	711a      	strb	r2, [r3, #4]
	rb->tail = 0;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	715a      	strb	r2, [r3, #5]
	rb->is_full = 0;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	719a      	strb	r2, [r3, #6]
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <ring_buffer_write>:
 * @param data: el dato que se va a escribir
 *
 * @retval Ninguno
 */
void ring_buffer_write(ring_buffer_t *rb, uint8_t data)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	70fb      	strb	r3, [r7, #3]
	rb->buffer[rb->head] = data;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	7912      	ldrb	r2, [r2, #4]
 8000ede:	4413      	add	r3, r2
 8000ee0:	78fa      	ldrb	r2, [r7, #3]
 8000ee2:	701a      	strb	r2, [r3, #0]
	rb->head = rb->head + 1;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	791b      	ldrb	r3, [r3, #4]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	711a      	strb	r2, [r3, #4]

	if (rb->head >= rb->capacity) { // si la cabeza llega al final de la memoria
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	791a      	ldrb	r2, [r3, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	79db      	ldrb	r3, [r3, #7]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d302      	bcc.n	8000f02 <ring_buffer_write+0x38>
		rb->head = 0;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	711a      	strb	r2, [r3, #4]
	}

	if (rb->is_full != 0) { // si se pierden datos viejos
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	799b      	ldrb	r3, [r3, #6]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d005      	beq.n	8000f16 <ring_buffer_write+0x4c>
		rb->tail = rb->tail + 1;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	795b      	ldrb	r3, [r3, #5]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	715a      	strb	r2, [r3, #5]
	}

	if (rb->tail >= rb->capacity) { // si la cola llega al final de la memoria
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	795a      	ldrb	r2, [r3, #5]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	79db      	ldrb	r3, [r3, #7]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d302      	bcc.n	8000f28 <ring_buffer_write+0x5e>
		rb->tail = 0;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	715a      	strb	r2, [r3, #5]
	}

	if (rb->head == rb->tail) { // si la cabeza alcanza la cola
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	791a      	ldrb	r2, [r3, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	795b      	ldrb	r3, [r3, #5]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d102      	bne.n	8000f3a <ring_buffer_write+0x70>
		rb->is_full = 1;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2201      	movs	r2, #1
 8000f38:	719a      	strb	r2, [r3, #6]
	}
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <ring_buffer_read>:
 * @param data: la direccion de donde se va a escribir el dato
 *
 * @retval 1: hay datos disponibles, 0: no hay datos
 */
uint8_t ring_buffer_read(ring_buffer_t *rb, uint8_t *data) // 0x20
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	6039      	str	r1, [r7, #0]
	if ((rb->is_full != 0) || (rb->head != rb->tail)) { // data available
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	799b      	ldrb	r3, [r3, #6]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d105      	bne.n	8000f64 <ring_buffer_read+0x1e>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	791a      	ldrb	r2, [r3, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	795b      	ldrb	r3, [r3, #5]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d01b      	beq.n	8000f9c <ring_buffer_read+0x56>
		*data = rb->buffer[rb->tail]; // add: 0x20, val: buffer
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	7952      	ldrb	r2, [r2, #5]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	781a      	ldrb	r2, [r3, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	701a      	strb	r2, [r3, #0]
		rb->tail = rb->tail + 1;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	795b      	ldrb	r3, [r3, #5]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	715a      	strb	r2, [r3, #5]
		if (rb->tail >= rb->capacity) {
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	795a      	ldrb	r2, [r3, #5]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	79db      	ldrb	r3, [r3, #7]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d302      	bcc.n	8000f92 <ring_buffer_read+0x4c>
			rb->tail = 0;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	715a      	strb	r2, [r3, #5]
		}
		rb->is_full = 0;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	719a      	strb	r2, [r3, #6]

		return 1; // buffer con datos
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e000      	b.n	8000f9e <ring_buffer_read+0x58>
	}
	return 0; // buffer vacio
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <HAL_MspInit+0x44>)
 8000fb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fb6:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff0 <HAL_MspInit+0x44>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <HAL_MspInit+0x44>)
 8000fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	4b09      	ldr	r3, [pc, #36]	@ (8000ff0 <HAL_MspInit+0x44>)
 8000fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fce:	4a08      	ldr	r2, [pc, #32]	@ (8000ff0 <HAL_MspInit+0x44>)
 8000fd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fd6:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <HAL_MspInit+0x44>)
 8000fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b0ac      	sub	sp, #176	@ 0xb0
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	2288      	movs	r2, #136	@ 0x88
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f005 f833 	bl	8006080 <memset>
  if(hi2c->Instance==I2C1)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a29      	ldr	r2, [pc, #164]	@ (80010c4 <HAL_I2C_MspInit+0xd0>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d14b      	bne.n	80010bc <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001024:	2340      	movs	r3, #64	@ 0x40
 8001026:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001028:	2300      	movs	r3, #0
 800102a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4618      	mov	r0, r3
 8001032:	f003 f955 	bl	80042e0 <HAL_RCCEx_PeriphCLKConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800103c:	f7ff ff18 	bl	8000e70 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001040:	4b21      	ldr	r3, [pc, #132]	@ (80010c8 <HAL_I2C_MspInit+0xd4>)
 8001042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001044:	4a20      	ldr	r2, [pc, #128]	@ (80010c8 <HAL_I2C_MspInit+0xd4>)
 8001046:	f043 0302 	orr.w	r3, r3, #2
 800104a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800104c:	4b1e      	ldr	r3, [pc, #120]	@ (80010c8 <HAL_I2C_MspInit+0xd4>)
 800104e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001058:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800105c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001060:	2312      	movs	r3, #18
 8001062:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106c:	2303      	movs	r3, #3
 800106e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001072:	2304      	movs	r3, #4
 8001074:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001078:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800107c:	4619      	mov	r1, r3
 800107e:	4813      	ldr	r0, [pc, #76]	@ (80010cc <HAL_I2C_MspInit+0xd8>)
 8001080:	f000 fe4a 	bl	8001d18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001084:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <HAL_I2C_MspInit+0xd4>)
 8001086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001088:	4a0f      	ldr	r2, [pc, #60]	@ (80010c8 <HAL_I2C_MspInit+0xd4>)
 800108a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800108e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001090:	4b0d      	ldr	r3, [pc, #52]	@ (80010c8 <HAL_I2C_MspInit+0xd4>)
 8001092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001094:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800109c:	2200      	movs	r2, #0
 800109e:	2100      	movs	r1, #0
 80010a0:	201f      	movs	r0, #31
 80010a2:	f000 fdb4 	bl	8001c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80010a6:	201f      	movs	r0, #31
 80010a8:	f000 fdcd 	bl	8001c46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2100      	movs	r1, #0
 80010b0:	2020      	movs	r0, #32
 80010b2:	f000 fdac 	bl	8001c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80010b6:	2020      	movs	r0, #32
 80010b8:	f000 fdc5 	bl	8001c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010bc:	bf00      	nop
 80010be:	37b0      	adds	r7, #176	@ 0xb0
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40005400 	.word	0x40005400
 80010c8:	40021000 	.word	0x40021000
 80010cc:	48000400 	.word	0x48000400

080010d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b0ac      	sub	sp, #176	@ 0xb0
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2288      	movs	r2, #136	@ 0x88
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f004 ffc5 	bl	8006080 <memset>
  if(huart->Instance==USART2)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a21      	ldr	r2, [pc, #132]	@ (8001180 <HAL_UART_MspInit+0xb0>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d13b      	bne.n	8001178 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001100:	2302      	movs	r3, #2
 8001102:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001104:	2300      	movs	r3, #0
 8001106:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4618      	mov	r0, r3
 800110e:	f003 f8e7 	bl	80042e0 <HAL_RCCEx_PeriphCLKConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001118:	f7ff feaa 	bl	8000e70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800111c:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <HAL_UART_MspInit+0xb4>)
 800111e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001120:	4a18      	ldr	r2, [pc, #96]	@ (8001184 <HAL_UART_MspInit+0xb4>)
 8001122:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001126:	6593      	str	r3, [r2, #88]	@ 0x58
 8001128:	4b16      	ldr	r3, [pc, #88]	@ (8001184 <HAL_UART_MspInit+0xb4>)
 800112a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001134:	4b13      	ldr	r3, [pc, #76]	@ (8001184 <HAL_UART_MspInit+0xb4>)
 8001136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001138:	4a12      	ldr	r2, [pc, #72]	@ (8001184 <HAL_UART_MspInit+0xb4>)
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001140:	4b10      	ldr	r3, [pc, #64]	@ (8001184 <HAL_UART_MspInit+0xb4>)
 8001142:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800114c:	230c      	movs	r3, #12
 800114e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001164:	2307      	movs	r3, #7
 8001166:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800116e:	4619      	mov	r1, r3
 8001170:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001174:	f000 fdd0 	bl	8001d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001178:	bf00      	nop
 800117a:	37b0      	adds	r7, #176	@ 0xb0
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40004400 	.word	0x40004400
 8001184:	40021000 	.word	0x40021000

08001188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <NMI_Handler+0x4>

08001190 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <HardFault_Handler+0x4>

08001198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <MemManage_Handler+0x4>

080011a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <BusFault_Handler+0x4>

080011a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <UsageFault_Handler+0x4>

080011b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011de:	f000 f945 	bl	800146c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_4_Pin);
 80011ea:	2080      	movs	r0, #128	@ 0x80
 80011ec:	f000 ff6e 	bl	80020cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL_2_Pin);
 80011f0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80011f4:	f000 ff6a 	bl	80020cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL_3_Pin);
 80011f8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011fc:	f000 ff66 	bl	80020cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}

08001204 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001208:	4802      	ldr	r0, [pc, #8]	@ (8001214 <I2C1_EV_IRQHandler+0x10>)
 800120a:	f001 f927 	bl	800245c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000009c 	.word	0x2000009c

08001218 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800121c:	4802      	ldr	r0, [pc, #8]	@ (8001228 <I2C1_ER_IRQHandler+0x10>)
 800121e:	f001 f937 	bl	8002490 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	2000009c 	.word	0x2000009c

0800122c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_1_Pin);
 8001230:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001234:	f000 ff4a 	bl	80020cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	e00a      	b.n	8001264 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800124e:	f3af 8000 	nop.w
 8001252:	4601      	mov	r1, r0
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	60ba      	str	r2, [r7, #8]
 800125a:	b2ca      	uxtb	r2, r1
 800125c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3301      	adds	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	429a      	cmp	r2, r3
 800126a:	dbf0      	blt.n	800124e <_read+0x12>
  }

  return len;
 800126c:	687b      	ldr	r3, [r7, #4]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800127e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001282:	4618      	mov	r0, r3
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800129e:	605a      	str	r2, [r3, #4]
  return 0;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <_isatty>:

int _isatty(int file)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e8:	4a14      	ldr	r2, [pc, #80]	@ (800133c <_sbrk+0x5c>)
 80012ea:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <_sbrk+0x60>)
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f4:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <_sbrk+0x64>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d102      	bne.n	8001302 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012fc:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <_sbrk+0x64>)
 80012fe:	4a12      	ldr	r2, [pc, #72]	@ (8001348 <_sbrk+0x68>)
 8001300:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001302:	4b10      	ldr	r3, [pc, #64]	@ (8001344 <_sbrk+0x64>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	429a      	cmp	r2, r3
 800130e:	d207      	bcs.n	8001320 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001310:	f004 ff04 	bl	800611c <__errno>
 8001314:	4603      	mov	r3, r0
 8001316:	220c      	movs	r2, #12
 8001318:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	e009      	b.n	8001334 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001320:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <_sbrk+0x64>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001326:	4b07      	ldr	r3, [pc, #28]	@ (8001344 <_sbrk+0x64>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	4a05      	ldr	r2, [pc, #20]	@ (8001344 <_sbrk+0x64>)
 8001330:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001332:	68fb      	ldr	r3, [r7, #12]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20018000 	.word	0x20018000
 8001340:	00000400 	.word	0x00000400
 8001344:	20000284 	.word	0x20000284
 8001348:	200007e0 	.word	0x200007e0

0800134c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001350:	4b06      	ldr	r3, [pc, #24]	@ (800136c <SystemInit+0x20>)
 8001352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001356:	4a05      	ldr	r2, [pc, #20]	@ (800136c <SystemInit+0x20>)
 8001358:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800135c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001370:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001374:	f7ff ffea 	bl	800134c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001378:	480c      	ldr	r0, [pc, #48]	@ (80013ac <LoopForever+0x6>)
  ldr r1, =_edata
 800137a:	490d      	ldr	r1, [pc, #52]	@ (80013b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800137c:	4a0d      	ldr	r2, [pc, #52]	@ (80013b4 <LoopForever+0xe>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001380:	e002      	b.n	8001388 <LoopCopyDataInit>

08001382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001386:	3304      	adds	r3, #4

08001388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800138c:	d3f9      	bcc.n	8001382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138e:	4a0a      	ldr	r2, [pc, #40]	@ (80013b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001390:	4c0a      	ldr	r4, [pc, #40]	@ (80013bc <LoopForever+0x16>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001394:	e001      	b.n	800139a <LoopFillZerobss>

08001396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001398:	3204      	adds	r2, #4

0800139a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800139c:	d3fb      	bcc.n	8001396 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800139e:	f004 fec3 	bl	8006128 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013a2:	f7ff fafb 	bl	800099c <main>

080013a6 <LoopForever>:

LoopForever:
    b LoopForever
 80013a6:	e7fe      	b.n	80013a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80013b4:	080073dc 	.word	0x080073dc
  ldr r2, =_sbss
 80013b8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80013bc:	200007e0 	.word	0x200007e0

080013c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013c0:	e7fe      	b.n	80013c0 <ADC1_2_IRQHandler>

080013c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013cc:	2003      	movs	r0, #3
 80013ce:	f000 fc13 	bl	8001bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013d2:	200f      	movs	r0, #15
 80013d4:	f000 f80e 	bl	80013f4 <HAL_InitTick>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d002      	beq.n	80013e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	71fb      	strb	r3, [r7, #7]
 80013e2:	e001      	b.n	80013e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013e4:	f7ff fde2 	bl	8000fac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013e8:	79fb      	ldrb	r3, [r7, #7]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013fc:	2300      	movs	r3, #0
 80013fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001400:	4b17      	ldr	r3, [pc, #92]	@ (8001460 <HAL_InitTick+0x6c>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d023      	beq.n	8001450 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001408:	4b16      	ldr	r3, [pc, #88]	@ (8001464 <HAL_InitTick+0x70>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b14      	ldr	r3, [pc, #80]	@ (8001460 <HAL_InitTick+0x6c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001416:	fbb3 f3f1 	udiv	r3, r3, r1
 800141a:	fbb2 f3f3 	udiv	r3, r2, r3
 800141e:	4618      	mov	r0, r3
 8001420:	f000 fc1f 	bl	8001c62 <HAL_SYSTICK_Config>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10f      	bne.n	800144a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b0f      	cmp	r3, #15
 800142e:	d809      	bhi.n	8001444 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001430:	2200      	movs	r2, #0
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
 8001438:	f000 fbe9 	bl	8001c0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800143c:	4a0a      	ldr	r2, [pc, #40]	@ (8001468 <HAL_InitTick+0x74>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	e007      	b.n	8001454 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	73fb      	strb	r3, [r7, #15]
 8001448:	e004      	b.n	8001454 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	73fb      	strb	r3, [r7, #15]
 800144e:	e001      	b.n	8001454 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001454:	7bfb      	ldrb	r3, [r7, #15]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	2000001c 	.word	0x2000001c
 8001464:	20000014 	.word	0x20000014
 8001468:	20000018 	.word	0x20000018

0800146c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001470:	4b06      	ldr	r3, [pc, #24]	@ (800148c <HAL_IncTick+0x20>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <HAL_IncTick+0x24>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4413      	add	r3, r2
 800147c:	4a04      	ldr	r2, [pc, #16]	@ (8001490 <HAL_IncTick+0x24>)
 800147e:	6013      	str	r3, [r2, #0]
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	2000001c 	.word	0x2000001c
 8001490:	20000288 	.word	0x20000288

08001494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return uwTick;
 8001498:	4b03      	ldr	r3, [pc, #12]	@ (80014a8 <HAL_GetTick+0x14>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	20000288 	.word	0x20000288

080014ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b4:	f7ff ffee 	bl	8001494 <HAL_GetTick>
 80014b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c4:	d005      	beq.n	80014d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014c6:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <HAL_Delay+0x44>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4413      	add	r3, r2
 80014d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014d2:	bf00      	nop
 80014d4:	f7ff ffde 	bl	8001494 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d8f7      	bhi.n	80014d4 <HAL_Delay+0x28>
  {
  }
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	2000001c 	.word	0x2000001c

080014f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001524:	2301      	movs	r3, #1
 8001526:	e000      	b.n	800152a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 031f 	and.w	r3, r3, #31
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800157e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001582:	f043 0201 	orr.w	r2, r3, #1
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d101      	bne.n	80015ae <LL_ADC_IsEnabled+0x18>
 80015aa:	2301      	movs	r3, #1
 80015ac:	e000      	b.n	80015b0 <LL_ADC_IsEnabled+0x1a>
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015d0:	f043 0204 	orr.w	r2, r3, #4
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	d101      	bne.n	80015fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80015f8:	2301      	movs	r3, #1
 80015fa:	e000      	b.n	80015fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001614:	4857      	ldr	r0, [pc, #348]	@ (8001774 <HAL_ADC_Start+0x168>)
 8001616:	f7ff ff8e 	bl	8001536 <LL_ADC_GetMultimode>
 800161a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ffdf 	bl	80015e4 <LL_ADC_REG_IsConversionOngoing>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	f040 809c 	bne.w	8001766 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001634:	2b01      	cmp	r3, #1
 8001636:	d101      	bne.n	800163c <HAL_ADC_Start+0x30>
 8001638:	2302      	movs	r3, #2
 800163a:	e097      	b.n	800176c <HAL_ADC_Start+0x160>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 f981 	bl	800194c <ADC_Enable>
 800164a:	4603      	mov	r3, r0
 800164c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800164e:	7dfb      	ldrb	r3, [r7, #23]
 8001650:	2b00      	cmp	r3, #0
 8001652:	f040 8083 	bne.w	800175c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800165a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800165e:	f023 0301 	bic.w	r3, r3, #1
 8001662:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a42      	ldr	r2, [pc, #264]	@ (8001778 <HAL_ADC_Start+0x16c>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d002      	beq.n	800167a <HAL_ADC_Start+0x6e>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	e000      	b.n	800167c <HAL_ADC_Start+0x70>
 800167a:	4b40      	ldr	r3, [pc, #256]	@ (800177c <HAL_ADC_Start+0x170>)
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6812      	ldr	r2, [r2, #0]
 8001680:	4293      	cmp	r3, r2
 8001682:	d002      	beq.n	800168a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d105      	bne.n	8001696 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800168e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800169a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800169e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016a2:	d106      	bne.n	80016b2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a8:	f023 0206 	bic.w	r2, r3, #6
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	659a      	str	r2, [r3, #88]	@ 0x58
 80016b0:	e002      	b.n	80016b8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	221c      	movs	r2, #28
 80016be:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a2a      	ldr	r2, [pc, #168]	@ (8001778 <HAL_ADC_Start+0x16c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d002      	beq.n	80016d8 <HAL_ADC_Start+0xcc>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	e000      	b.n	80016da <HAL_ADC_Start+0xce>
 80016d8:	4b28      	ldr	r3, [pc, #160]	@ (800177c <HAL_ADC_Start+0x170>)
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6812      	ldr	r2, [r2, #0]
 80016de:	4293      	cmp	r3, r2
 80016e0:	d008      	beq.n	80016f4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	2b05      	cmp	r3, #5
 80016ec:	d002      	beq.n	80016f4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	2b09      	cmp	r3, #9
 80016f2:	d114      	bne.n	800171e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d007      	beq.n	8001712 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001706:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800170a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff ff50 	bl	80015bc <LL_ADC_REG_StartConversion>
 800171c:	e025      	b.n	800176a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001722:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a12      	ldr	r2, [pc, #72]	@ (8001778 <HAL_ADC_Start+0x16c>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d002      	beq.n	800173a <HAL_ADC_Start+0x12e>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	e000      	b.n	800173c <HAL_ADC_Start+0x130>
 800173a:	4b10      	ldr	r3, [pc, #64]	@ (800177c <HAL_ADC_Start+0x170>)
 800173c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00f      	beq.n	800176a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800174e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001752:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	655a      	str	r2, [r3, #84]	@ 0x54
 800175a:	e006      	b.n	800176a <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001764:	e001      	b.n	800176a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001766:	2302      	movs	r3, #2
 8001768:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800176a:	7dfb      	ldrb	r3, [r7, #23]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	50040300 	.word	0x50040300
 8001778:	50040100 	.word	0x50040100
 800177c:	50040000 	.word	0x50040000

08001780 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800178a:	4866      	ldr	r0, [pc, #408]	@ (8001924 <HAL_ADC_PollForConversion+0x1a4>)
 800178c:	f7ff fed3 	bl	8001536 <LL_ADC_GetMultimode>
 8001790:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	2b08      	cmp	r3, #8
 8001798:	d102      	bne.n	80017a0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800179a:	2308      	movs	r3, #8
 800179c:	61fb      	str	r3, [r7, #28]
 800179e:	e02a      	b.n	80017f6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d005      	beq.n	80017b2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	2b05      	cmp	r3, #5
 80017aa:	d002      	beq.n	80017b2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	2b09      	cmp	r3, #9
 80017b0:	d111      	bne.n	80017d6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d007      	beq.n	80017d0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017c4:	f043 0220 	orr.w	r2, r3, #32
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0a4      	b.n	800191a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80017d0:	2304      	movs	r3, #4
 80017d2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80017d4:	e00f      	b.n	80017f6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80017d6:	4853      	ldr	r0, [pc, #332]	@ (8001924 <HAL_ADC_PollForConversion+0x1a4>)
 80017d8:	f7ff febb 	bl	8001552 <LL_ADC_GetMultiDMATransfer>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d007      	beq.n	80017f2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017e6:	f043 0220 	orr.w	r2, r3, #32
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e093      	b.n	800191a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80017f2:	2304      	movs	r3, #4
 80017f4:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80017f6:	f7ff fe4d 	bl	8001494 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017fc:	e021      	b.n	8001842 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001804:	d01d      	beq.n	8001842 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001806:	f7ff fe45 	bl	8001494 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d302      	bcc.n	800181c <HAL_ADC_PollForConversion+0x9c>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d112      	bne.n	8001842 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	4013      	ands	r3, r2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10b      	bne.n	8001842 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800182e:	f043 0204 	orr.w	r2, r3, #4
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e06b      	b.n	800191a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	4013      	ands	r3, r2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0d6      	beq.n	80017fe <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001854:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fe55 	bl	8001510 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d01c      	beq.n	80018a6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	7e5b      	ldrb	r3, [r3, #25]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d118      	bne.n	80018a6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b08      	cmp	r3, #8
 8001880:	d111      	bne.n	80018a6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001886:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001892:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d105      	bne.n	80018a6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800189e:	f043 0201 	orr.w	r2, r3, #1
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001928 <HAL_ADC_PollForConversion+0x1a8>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d002      	beq.n	80018b6 <HAL_ADC_PollForConversion+0x136>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	e000      	b.n	80018b8 <HAL_ADC_PollForConversion+0x138>
 80018b6:	4b1d      	ldr	r3, [pc, #116]	@ (800192c <HAL_ADC_PollForConversion+0x1ac>)
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6812      	ldr	r2, [r2, #0]
 80018bc:	4293      	cmp	r3, r2
 80018be:	d008      	beq.n	80018d2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d005      	beq.n	80018d2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	2b05      	cmp	r3, #5
 80018ca:	d002      	beq.n	80018d2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	2b09      	cmp	r3, #9
 80018d0:	d104      	bne.n	80018dc <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	61bb      	str	r3, [r7, #24]
 80018da:	e00c      	b.n	80018f6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a11      	ldr	r2, [pc, #68]	@ (8001928 <HAL_ADC_PollForConversion+0x1a8>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d002      	beq.n	80018ec <HAL_ADC_PollForConversion+0x16c>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	e000      	b.n	80018ee <HAL_ADC_PollForConversion+0x16e>
 80018ec:	4b0f      	ldr	r3, [pc, #60]	@ (800192c <HAL_ADC_PollForConversion+0x1ac>)
 80018ee:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d104      	bne.n	8001906 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2208      	movs	r2, #8
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	e008      	b.n	8001918 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d103      	bne.n	8001918 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	220c      	movs	r2, #12
 8001916:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3720      	adds	r7, #32
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	50040300 	.word	0x50040300
 8001928:	50040100 	.word	0x50040100
 800192c:	50040000 	.word	0x50040000

08001930 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001954:	2300      	movs	r3, #0
 8001956:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fe1a 	bl	8001596 <LL_ADC_IsEnabled>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d169      	bne.n	8001a3c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	4b36      	ldr	r3, [pc, #216]	@ (8001a48 <ADC_Enable+0xfc>)
 8001970:	4013      	ands	r3, r2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00d      	beq.n	8001992 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800197a:	f043 0210 	orr.w	r2, r3, #16
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001986:	f043 0201 	orr.w	r2, r3, #1
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e055      	b.n	8001a3e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fde9 	bl	800156e <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800199c:	482b      	ldr	r0, [pc, #172]	@ (8001a4c <ADC_Enable+0x100>)
 800199e:	f7ff fda9 	bl	80014f4 <LL_ADC_GetCommonPathInternalCh>
 80019a2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80019a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d013      	beq.n	80019d4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019ac:	4b28      	ldr	r3, [pc, #160]	@ (8001a50 <ADC_Enable+0x104>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	099b      	lsrs	r3, r3, #6
 80019b2:	4a28      	ldr	r2, [pc, #160]	@ (8001a54 <ADC_Enable+0x108>)
 80019b4:	fba2 2303 	umull	r2, r3, r2, r3
 80019b8:	099b      	lsrs	r3, r3, #6
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	4613      	mov	r3, r2
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4413      	add	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80019c6:	e002      	b.n	80019ce <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1f9      	bne.n	80019c8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80019d4:	f7ff fd5e 	bl	8001494 <HAL_GetTick>
 80019d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019da:	e028      	b.n	8001a2e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff fdd8 	bl	8001596 <LL_ADC_IsEnabled>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d104      	bne.n	80019f6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fdbc 	bl	800156e <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019f6:	f7ff fd4d 	bl	8001494 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d914      	bls.n	8001a2e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d00d      	beq.n	8001a2e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a16:	f043 0210 	orr.w	r2, r3, #16
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a22:	f043 0201 	orr.w	r2, r3, #1
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e007      	b.n	8001a3e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d1cf      	bne.n	80019dc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	8000003f 	.word	0x8000003f
 8001a4c:	50040300 	.word	0x50040300
 8001a50:	20000014 	.word	0x20000014
 8001a54:	053e2d63 	.word	0x053e2d63

08001a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a68:	4b0c      	ldr	r3, [pc, #48]	@ (8001a9c <__NVIC_SetPriorityGrouping+0x44>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a74:	4013      	ands	r3, r2
 8001a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8a:	4a04      	ldr	r2, [pc, #16]	@ (8001a9c <__NVIC_SetPriorityGrouping+0x44>)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	60d3      	str	r3, [r2, #12]
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa4:	4b04      	ldr	r3, [pc, #16]	@ (8001ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	0a1b      	lsrs	r3, r3, #8
 8001aaa:	f003 0307 	and.w	r3, r3, #7
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	db0b      	blt.n	8001ae6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	f003 021f 	and.w	r2, r3, #31
 8001ad4:	4907      	ldr	r1, [pc, #28]	@ (8001af4 <__NVIC_EnableIRQ+0x38>)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	095b      	lsrs	r3, r3, #5
 8001adc:	2001      	movs	r0, #1
 8001ade:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000e100 	.word	0xe000e100

08001af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	6039      	str	r1, [r7, #0]
 8001b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	db0a      	blt.n	8001b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	490c      	ldr	r1, [pc, #48]	@ (8001b44 <__NVIC_SetPriority+0x4c>)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	0112      	lsls	r2, r2, #4
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b20:	e00a      	b.n	8001b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	4908      	ldr	r1, [pc, #32]	@ (8001b48 <__NVIC_SetPriority+0x50>)
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	3b04      	subs	r3, #4
 8001b30:	0112      	lsls	r2, r2, #4
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	440b      	add	r3, r1
 8001b36:	761a      	strb	r2, [r3, #24]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000e100 	.word	0xe000e100
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	@ 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f1c3 0307 	rsb	r3, r3, #7
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	bf28      	it	cs
 8001b6a:	2304      	movcs	r3, #4
 8001b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3304      	adds	r3, #4
 8001b72:	2b06      	cmp	r3, #6
 8001b74:	d902      	bls.n	8001b7c <NVIC_EncodePriority+0x30>
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3b03      	subs	r3, #3
 8001b7a:	e000      	b.n	8001b7e <NVIC_EncodePriority+0x32>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b80:	f04f 32ff 	mov.w	r2, #4294967295
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	401a      	ands	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b94:	f04f 31ff 	mov.w	r1, #4294967295
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9e:	43d9      	mvns	r1, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	4313      	orrs	r3, r2
         );
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3724      	adds	r7, #36	@ 0x24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bc4:	d301      	bcc.n	8001bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e00f      	b.n	8001bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bca:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf4 <SysTick_Config+0x40>)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd8:	f7ff ff8e 	bl	8001af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bdc:	4b05      	ldr	r3, [pc, #20]	@ (8001bf4 <SysTick_Config+0x40>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be2:	4b04      	ldr	r3, [pc, #16]	@ (8001bf4 <SysTick_Config+0x40>)
 8001be4:	2207      	movs	r2, #7
 8001be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	e000e010 	.word	0xe000e010

08001bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ff29 	bl	8001a58 <__NVIC_SetPriorityGrouping>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	4603      	mov	r3, r0
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c20:	f7ff ff3e 	bl	8001aa0 <__NVIC_GetPriorityGrouping>
 8001c24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	68b9      	ldr	r1, [r7, #8]
 8001c2a:	6978      	ldr	r0, [r7, #20]
 8001c2c:	f7ff ff8e 	bl	8001b4c <NVIC_EncodePriority>
 8001c30:	4602      	mov	r2, r0
 8001c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c36:	4611      	mov	r1, r2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff5d 	bl	8001af8 <__NVIC_SetPriority>
}
 8001c3e:	bf00      	nop
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff31 	bl	8001abc <__NVIC_EnableIRQ>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ffa2 	bl	8001bb4 <SysTick_Config>
 8001c70:	4603      	mov	r3, r0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b084      	sub	sp, #16
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d005      	beq.n	8001c9e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2204      	movs	r2, #4
 8001c96:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
 8001c9c:	e029      	b.n	8001cf2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 020e 	bic.w	r2, r2, #14
 8001cac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0201 	bic.w	r2, r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc2:	f003 021c 	and.w	r2, r3, #28
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cca:	2101      	movs	r1, #1
 8001ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	4798      	blx	r3
    }
  }
  return status;
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d0a:	b2db      	uxtb	r3, r3
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b087      	sub	sp, #28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d26:	e17f      	b.n	8002028 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	fa01 f303 	lsl.w	r3, r1, r3
 8001d34:	4013      	ands	r3, r2
 8001d36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 8171 	beq.w	8002022 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d005      	beq.n	8001d58 <HAL_GPIO_Init+0x40>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d130      	bne.n	8001dba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	2203      	movs	r2, #3
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d8e:	2201      	movs	r2, #1
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	091b      	lsrs	r3, r3, #4
 8001da4:	f003 0201 	and.w	r2, r3, #1
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d118      	bne.n	8001df8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001dcc:	2201      	movs	r2, #1
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	08db      	lsrs	r3, r3, #3
 8001de2:	f003 0201 	and.w	r2, r3, #1
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	d017      	beq.n	8001e34 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	2203      	movs	r2, #3
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d123      	bne.n	8001e88 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	08da      	lsrs	r2, r3, #3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3208      	adds	r2, #8
 8001e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	220f      	movs	r2, #15
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	08da      	lsrs	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3208      	adds	r2, #8
 8001e82:	6939      	ldr	r1, [r7, #16]
 8001e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	2203      	movs	r2, #3
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0203 	and.w	r2, r3, #3
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 80ac 	beq.w	8002022 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eca:	4b5f      	ldr	r3, [pc, #380]	@ (8002048 <HAL_GPIO_Init+0x330>)
 8001ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ece:	4a5e      	ldr	r2, [pc, #376]	@ (8002048 <HAL_GPIO_Init+0x330>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ed6:	4b5c      	ldr	r3, [pc, #368]	@ (8002048 <HAL_GPIO_Init+0x330>)
 8001ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ee2:	4a5a      	ldr	r2, [pc, #360]	@ (800204c <HAL_GPIO_Init+0x334>)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	089b      	lsrs	r3, r3, #2
 8001ee8:	3302      	adds	r3, #2
 8001eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	220f      	movs	r2, #15
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f0c:	d025      	beq.n	8001f5a <HAL_GPIO_Init+0x242>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4f      	ldr	r2, [pc, #316]	@ (8002050 <HAL_GPIO_Init+0x338>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d01f      	beq.n	8001f56 <HAL_GPIO_Init+0x23e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4e      	ldr	r2, [pc, #312]	@ (8002054 <HAL_GPIO_Init+0x33c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d019      	beq.n	8001f52 <HAL_GPIO_Init+0x23a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a4d      	ldr	r2, [pc, #308]	@ (8002058 <HAL_GPIO_Init+0x340>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d013      	beq.n	8001f4e <HAL_GPIO_Init+0x236>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4c      	ldr	r2, [pc, #304]	@ (800205c <HAL_GPIO_Init+0x344>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d00d      	beq.n	8001f4a <HAL_GPIO_Init+0x232>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a4b      	ldr	r2, [pc, #300]	@ (8002060 <HAL_GPIO_Init+0x348>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d007      	beq.n	8001f46 <HAL_GPIO_Init+0x22e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4a      	ldr	r2, [pc, #296]	@ (8002064 <HAL_GPIO_Init+0x34c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d101      	bne.n	8001f42 <HAL_GPIO_Init+0x22a>
 8001f3e:	2306      	movs	r3, #6
 8001f40:	e00c      	b.n	8001f5c <HAL_GPIO_Init+0x244>
 8001f42:	2307      	movs	r3, #7
 8001f44:	e00a      	b.n	8001f5c <HAL_GPIO_Init+0x244>
 8001f46:	2305      	movs	r3, #5
 8001f48:	e008      	b.n	8001f5c <HAL_GPIO_Init+0x244>
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	e006      	b.n	8001f5c <HAL_GPIO_Init+0x244>
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e004      	b.n	8001f5c <HAL_GPIO_Init+0x244>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e002      	b.n	8001f5c <HAL_GPIO_Init+0x244>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <HAL_GPIO_Init+0x244>
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	f002 0203 	and.w	r2, r2, #3
 8001f62:	0092      	lsls	r2, r2, #2
 8001f64:	4093      	lsls	r3, r2
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f6c:	4937      	ldr	r1, [pc, #220]	@ (800204c <HAL_GPIO_Init+0x334>)
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	089b      	lsrs	r3, r3, #2
 8001f72:	3302      	adds	r3, #2
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f7a:	4b3b      	ldr	r3, [pc, #236]	@ (8002068 <HAL_GPIO_Init+0x350>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4013      	ands	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f9e:	4a32      	ldr	r2, [pc, #200]	@ (8002068 <HAL_GPIO_Init+0x350>)
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fa4:	4b30      	ldr	r3, [pc, #192]	@ (8002068 <HAL_GPIO_Init+0x350>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fc8:	4a27      	ldr	r2, [pc, #156]	@ (8002068 <HAL_GPIO_Init+0x350>)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fce:	4b26      	ldr	r3, [pc, #152]	@ (8002068 <HAL_GPIO_Init+0x350>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ff2:	4a1d      	ldr	r2, [pc, #116]	@ (8002068 <HAL_GPIO_Init+0x350>)
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8002068 <HAL_GPIO_Init+0x350>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	43db      	mvns	r3, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800201c:	4a12      	ldr	r2, [pc, #72]	@ (8002068 <HAL_GPIO_Init+0x350>)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	3301      	adds	r3, #1
 8002026:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa22 f303 	lsr.w	r3, r2, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	f47f ae78 	bne.w	8001d28 <HAL_GPIO_Init+0x10>
  }
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	371c      	adds	r7, #28
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000
 800204c:	40010000 	.word	0x40010000
 8002050:	48000400 	.word	0x48000400
 8002054:	48000800 	.word	0x48000800
 8002058:	48000c00 	.word	0x48000c00
 800205c:	48001000 	.word	0x48001000
 8002060:	48001400 	.word	0x48001400
 8002064:	48001800 	.word	0x48001800
 8002068:	40010400 	.word	0x40010400

0800206c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691a      	ldr	r2, [r3, #16]
 800207c:	887b      	ldrh	r3, [r7, #2]
 800207e:	4013      	ands	r3, r2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d002      	beq.n	800208a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002084:	2301      	movs	r3, #1
 8002086:	73fb      	strb	r3, [r7, #15]
 8002088:	e001      	b.n	800208e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800208e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	807b      	strh	r3, [r7, #2]
 80020a8:	4613      	mov	r3, r2
 80020aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020ac:	787b      	ldrb	r3, [r7, #1]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020b2:	887a      	ldrh	r2, [r7, #2]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020b8:	e002      	b.n	80020c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020ba:	887a      	ldrh	r2, [r7, #2]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020d6:	4b08      	ldr	r3, [pc, #32]	@ (80020f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020d8:	695a      	ldr	r2, [r3, #20]
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	4013      	ands	r3, r2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d006      	beq.n	80020f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020e2:	4a05      	ldr	r2, [pc, #20]	@ (80020f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020e4:	88fb      	ldrh	r3, [r7, #6]
 80020e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020e8:	88fb      	ldrh	r3, [r7, #6]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe fb50 	bl	8000790 <HAL_GPIO_EXTI_Callback>
  }
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40010400 	.word	0x40010400

080020fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e08d      	b.n	800222a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d106      	bne.n	8002128 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7fe ff66 	bl	8000ff4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2224      	movs	r2, #36	@ 0x24
 800212c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0201 	bic.w	r2, r2, #1
 800213e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800214c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800215c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d107      	bne.n	8002176 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	e006      	b.n	8002184 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002182:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	2b02      	cmp	r3, #2
 800218a:	d108      	bne.n	800219e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	e007      	b.n	80021ae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691a      	ldr	r2, [r3, #16]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69d9      	ldr	r1, [r3, #28]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a1a      	ldr	r2, [r3, #32]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0201 	orr.w	r2, r2, #1
 800220a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2220      	movs	r2, #32
 8002216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af02      	add	r7, sp, #8
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	4608      	mov	r0, r1
 800223e:	4611      	mov	r1, r2
 8002240:	461a      	mov	r2, r3
 8002242:	4603      	mov	r3, r0
 8002244:	817b      	strh	r3, [r7, #10]
 8002246:	460b      	mov	r3, r1
 8002248:	813b      	strh	r3, [r7, #8]
 800224a:	4613      	mov	r3, r2
 800224c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b20      	cmp	r3, #32
 8002258:	f040 80f9 	bne.w	800244e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <HAL_I2C_Mem_Write+0x34>
 8002262:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002264:	2b00      	cmp	r3, #0
 8002266:	d105      	bne.n	8002274 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800226e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0ed      	b.n	8002450 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800227a:	2b01      	cmp	r3, #1
 800227c:	d101      	bne.n	8002282 <HAL_I2C_Mem_Write+0x4e>
 800227e:	2302      	movs	r3, #2
 8002280:	e0e6      	b.n	8002450 <HAL_I2C_Mem_Write+0x21c>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800228a:	f7ff f903 	bl	8001494 <HAL_GetTick>
 800228e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	2319      	movs	r3, #25
 8002296:	2201      	movs	r2, #1
 8002298:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 fed0 	bl	8003042 <I2C_WaitOnFlagUntilTimeout>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0d1      	b.n	8002450 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2221      	movs	r2, #33	@ 0x21
 80022b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2240      	movs	r2, #64	@ 0x40
 80022b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6a3a      	ldr	r2, [r7, #32]
 80022c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80022cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022d4:	88f8      	ldrh	r0, [r7, #6]
 80022d6:	893a      	ldrh	r2, [r7, #8]
 80022d8:	8979      	ldrh	r1, [r7, #10]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	9301      	str	r3, [sp, #4]
 80022de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	4603      	mov	r3, r0
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f000 fa67 	bl	80027b8 <I2C_RequestMemoryWrite>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d005      	beq.n	80022fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e0a9      	b.n	8002450 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002300:	b29b      	uxth	r3, r3
 8002302:	2bff      	cmp	r3, #255	@ 0xff
 8002304:	d90e      	bls.n	8002324 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	22ff      	movs	r2, #255	@ 0xff
 800230a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002310:	b2da      	uxtb	r2, r3
 8002312:	8979      	ldrh	r1, [r7, #10]
 8002314:	2300      	movs	r3, #0
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f001 f853 	bl	80033c8 <I2C_TransferConfig>
 8002322:	e00f      	b.n	8002344 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002328:	b29a      	uxth	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002332:	b2da      	uxtb	r2, r3
 8002334:	8979      	ldrh	r1, [r7, #10]
 8002336:	2300      	movs	r3, #0
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f001 f842 	bl	80033c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f000 fed3 	bl	80030f4 <I2C_WaitOnTXISFlagUntilTimeout>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e07b      	b.n	8002450 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235c:	781a      	ldrb	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002372:	b29b      	uxth	r3, r3
 8002374:	3b01      	subs	r3, #1
 8002376:	b29a      	uxth	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800238c:	b29b      	uxth	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d034      	beq.n	80023fc <HAL_I2C_Mem_Write+0x1c8>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002396:	2b00      	cmp	r3, #0
 8002398:	d130      	bne.n	80023fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a0:	2200      	movs	r2, #0
 80023a2:	2180      	movs	r1, #128	@ 0x80
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 fe4c 	bl	8003042 <I2C_WaitOnFlagUntilTimeout>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e04d      	b.n	8002450 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	2bff      	cmp	r3, #255	@ 0xff
 80023bc:	d90e      	bls.n	80023dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	22ff      	movs	r2, #255	@ 0xff
 80023c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	8979      	ldrh	r1, [r7, #10]
 80023cc:	2300      	movs	r3, #0
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 fff7 	bl	80033c8 <I2C_TransferConfig>
 80023da:	e00f      	b.n	80023fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	8979      	ldrh	r1, [r7, #10]
 80023ee:	2300      	movs	r3, #0
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 ffe6 	bl	80033c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002400:	b29b      	uxth	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d19e      	bne.n	8002344 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 feb9 	bl	8003182 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e01a      	b.n	8002450 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2220      	movs	r2, #32
 8002420:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6859      	ldr	r1, [r3, #4]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	4b0a      	ldr	r3, [pc, #40]	@ (8002458 <HAL_I2C_Mem_Write+0x224>)
 800242e:	400b      	ands	r3, r1
 8002430:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2220      	movs	r2, #32
 8002436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	e000      	b.n	8002450 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800244e:	2302      	movs	r3, #2
  }
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	fe00e800 	.word	0xfe00e800

0800245c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	68f9      	ldr	r1, [r7, #12]
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	4798      	blx	r3
  }
}
 8002488:	bf00      	nop
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00f      	beq.n	80024d2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00a      	beq.n	80024d2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c0:	f043 0201 	orr.w	r2, r3, #1
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024d0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00f      	beq.n	80024fc <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00a      	beq.n	80024fc <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ea:	f043 0208 	orr.w	r2, r3, #8
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024fa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00f      	beq.n	8002526 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00a      	beq.n	8002526 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002514:	f043 0202 	orr.w	r2, r3, #2
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002524:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f003 030b 	and.w	r3, r3, #11
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002536:	68f9      	ldr	r1, [r7, #12]
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 fc29 	bl	8002d90 <I2C_ITError>
  }
}
 800253e:	bf00      	nop
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	460b      	mov	r3, r1
 8002578:	70fb      	strb	r3, [r7, #3]
 800257a:	4613      	mov	r3, r2
 800257c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b086      	sub	sp, #24
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <I2C_Slave_ISR_IT+0x24>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e0e2      	b.n	80027b0 <I2C_Slave_ISR_IT+0x1ea>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f003 0320 	and.w	r3, r3, #32
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d009      	beq.n	8002610 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002602:	2b00      	cmp	r3, #0
 8002604:	d004      	beq.n	8002610 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002606:	6939      	ldr	r1, [r7, #16]
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 fa09 	bl	8002a20 <I2C_ITSlaveCplt>
 800260e:	e0ca      	b.n	80027a6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	2b00      	cmp	r3, #0
 8002618:	d04b      	beq.n	80026b2 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002620:	2b00      	cmp	r3, #0
 8002622:	d046      	beq.n	80026b2 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d128      	bne.n	8002680 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b28      	cmp	r3, #40	@ 0x28
 8002638:	d108      	bne.n	800264c <I2C_Slave_ISR_IT+0x86>
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002640:	d104      	bne.n	800264c <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002642:	6939      	ldr	r1, [r7, #16]
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 fb4f 	bl	8002ce8 <I2C_ITListenCplt>
 800264a:	e031      	b.n	80026b0 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b29      	cmp	r3, #41	@ 0x29
 8002656:	d10e      	bne.n	8002676 <I2C_Slave_ISR_IT+0xb0>
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800265e:	d00a      	beq.n	8002676 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2210      	movs	r2, #16
 8002666:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 fca8 	bl	8002fbe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 f97a 	bl	8002968 <I2C_ITSlaveSeqCplt>
 8002674:	e01c      	b.n	80026b0 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2210      	movs	r2, #16
 800267c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800267e:	e08f      	b.n	80027a0 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2210      	movs	r2, #16
 8002686:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268c:	f043 0204 	orr.w	r2, r3, #4
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <I2C_Slave_ISR_IT+0xdc>
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026a0:	d17e      	bne.n	80027a0 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a6:	4619      	mov	r1, r3
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 fb71 	bl	8002d90 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80026ae:	e077      	b.n	80027a0 <I2C_Slave_ISR_IT+0x1da>
 80026b0:	e076      	b.n	80027a0 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d02f      	beq.n	800271c <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d02a      	beq.n	800271c <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d018      	beq.n	8002702 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002706:	b29b      	uxth	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d14b      	bne.n	80027a4 <I2C_Slave_ISR_IT+0x1de>
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002712:	d047      	beq.n	80027a4 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 f927 	bl	8002968 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800271a:	e043      	b.n	80027a4 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d009      	beq.n	800273a <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800272c:	2b00      	cmp	r3, #0
 800272e:	d004      	beq.n	800273a <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002730:	6939      	ldr	r1, [r7, #16]
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 f894 	bl	8002860 <I2C_ITAddrCplt>
 8002738:	e035      	b.n	80027a6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d030      	beq.n	80027a6 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800274a:	2b00      	cmp	r3, #0
 800274c:	d02b      	beq.n	80027a6 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002752:	b29b      	uxth	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d018      	beq.n	800278a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275c:	781a      	ldrb	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b01      	subs	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002780:	3b01      	subs	r3, #1
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002788:	e00d      	b.n	80027a6 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002790:	d002      	beq.n	8002798 <I2C_Slave_ISR_IT+0x1d2>
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d106      	bne.n	80027a6 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f8e5 	bl	8002968 <I2C_ITSlaveSeqCplt>
 800279e:	e002      	b.n	80027a6 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80027a0:	bf00      	nop
 80027a2:	e000      	b.n	80027a6 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80027a4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af02      	add	r7, sp, #8
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	4608      	mov	r0, r1
 80027c2:	4611      	mov	r1, r2
 80027c4:	461a      	mov	r2, r3
 80027c6:	4603      	mov	r3, r0
 80027c8:	817b      	strh	r3, [r7, #10]
 80027ca:	460b      	mov	r3, r1
 80027cc:	813b      	strh	r3, [r7, #8]
 80027ce:	4613      	mov	r3, r2
 80027d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	8979      	ldrh	r1, [r7, #10]
 80027d8:	4b20      	ldr	r3, [pc, #128]	@ (800285c <I2C_RequestMemoryWrite+0xa4>)
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 fdf1 	bl	80033c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027e6:	69fa      	ldr	r2, [r7, #28]
 80027e8:	69b9      	ldr	r1, [r7, #24]
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 fc82 	bl	80030f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e02c      	b.n	8002854 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d105      	bne.n	800280c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002800:	893b      	ldrh	r3, [r7, #8]
 8002802:	b2da      	uxtb	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	629a      	str	r2, [r3, #40]	@ 0x28
 800280a:	e015      	b.n	8002838 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800280c:	893b      	ldrh	r3, [r7, #8]
 800280e:	0a1b      	lsrs	r3, r3, #8
 8002810:	b29b      	uxth	r3, r3
 8002812:	b2da      	uxtb	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	69b9      	ldr	r1, [r7, #24]
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 fc68 	bl	80030f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e012      	b.n	8002854 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800282e:	893b      	ldrh	r3, [r7, #8]
 8002830:	b2da      	uxtb	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	2200      	movs	r2, #0
 8002840:	2180      	movs	r1, #128	@ 0x80
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 fbfd 	bl	8003042 <I2C_WaitOnFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	80002000 	.word	0x80002000

08002860 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002870:	b2db      	uxtb	r3, r3
 8002872:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002876:	2b28      	cmp	r3, #40	@ 0x28
 8002878:	d16a      	bne.n	8002950 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	0c1b      	lsrs	r3, r3, #16
 8002882:	b2db      	uxtb	r3, r3
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	0c1b      	lsrs	r3, r3, #16
 8002892:	b29b      	uxth	r3, r3
 8002894:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002898:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028a6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80028b4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d138      	bne.n	8002930 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80028be:	897b      	ldrh	r3, [r7, #10]
 80028c0:	09db      	lsrs	r3, r3, #7
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	89bb      	ldrh	r3, [r7, #12]
 80028c6:	4053      	eors	r3, r2
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	f003 0306 	and.w	r3, r3, #6
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d11c      	bne.n	800290c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80028d2:	897b      	ldrh	r3, [r7, #10]
 80028d4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d13b      	bne.n	8002960 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2208      	movs	r2, #8
 80028f4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80028fe:	89ba      	ldrh	r2, [r7, #12]
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	4619      	mov	r1, r3
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff fe32 	bl	800256e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800290a:	e029      	b.n	8002960 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800290c:	893b      	ldrh	r3, [r7, #8]
 800290e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002910:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 fd89 	bl	800342c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002922:	89ba      	ldrh	r2, [r7, #12]
 8002924:	7bfb      	ldrb	r3, [r7, #15]
 8002926:	4619      	mov	r1, r3
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7ff fe20 	bl	800256e <HAL_I2C_AddrCallback>
}
 800292e:	e017      	b.n	8002960 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002930:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 fd79 	bl	800342c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002942:	89ba      	ldrh	r2, [r7, #12]
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	4619      	mov	r1, r3
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff fe10 	bl	800256e <HAL_I2C_AddrCallback>
}
 800294e:	e007      	b.n	8002960 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2208      	movs	r2, #8
 8002956:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002960:	bf00      	nop
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d008      	beq.n	800299c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	e00c      	b.n	80029b6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d007      	beq.n	80029b6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029b4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b29      	cmp	r3, #41	@ 0x29
 80029c0:	d112      	bne.n	80029e8 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2228      	movs	r2, #40	@ 0x28
 80029c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2221      	movs	r2, #33	@ 0x21
 80029ce:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80029d0:	2101      	movs	r1, #1
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fd2a 	bl	800342c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff fdb0 	bl	8002546 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80029e6:	e017      	b.n	8002a18 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80029f2:	d111      	bne.n	8002a18 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2228      	movs	r2, #40	@ 0x28
 80029f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2222      	movs	r2, #34	@ 0x22
 8002a00:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002a02:	2102      	movs	r1, #2
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fd11 	bl	800342c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff fda1 	bl	800255a <HAL_I2C_SlaveRxCpltCallback>
}
 8002a18:	bf00      	nop
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a42:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002a4c:	7afb      	ldrb	r3, [r7, #11]
 8002a4e:	2b21      	cmp	r3, #33	@ 0x21
 8002a50:	d002      	beq.n	8002a58 <I2C_ITSlaveCplt+0x38>
 8002a52:	7afb      	ldrb	r3, [r7, #11]
 8002a54:	2b29      	cmp	r3, #41	@ 0x29
 8002a56:	d108      	bne.n	8002a6a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002a58:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 fce5 	bl	800342c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2221      	movs	r2, #33	@ 0x21
 8002a66:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a68:	e019      	b.n	8002a9e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002a6a:	7afb      	ldrb	r3, [r7, #11]
 8002a6c:	2b22      	cmp	r3, #34	@ 0x22
 8002a6e:	d002      	beq.n	8002a76 <I2C_ITSlaveCplt+0x56>
 8002a70:	7afb      	ldrb	r3, [r7, #11]
 8002a72:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a74:	d108      	bne.n	8002a88 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002a76:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 fcd6 	bl	800342c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2222      	movs	r2, #34	@ 0x22
 8002a84:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a86:	e00a      	b.n	8002a9e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002a88:	7afb      	ldrb	r3, [r7, #11]
 8002a8a:	2b28      	cmp	r3, #40	@ 0x28
 8002a8c:	d107      	bne.n	8002a9e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002a8e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 fcca 	bl	800342c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002aac:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6859      	ldr	r1, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4b89      	ldr	r3, [pc, #548]	@ (8002ce0 <I2C_ITSlaveCplt+0x2c0>)
 8002aba:	400b      	ands	r3, r1
 8002abc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 fa7d 	bl	8002fbe <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d013      	beq.n	8002af6 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002adc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d01f      	beq.n	8002b26 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002af4:	e017      	b.n	8002b26 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d012      	beq.n	8002b26 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b0e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d006      	beq.n	8002b26 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d020      	beq.n	8002b72 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f023 0304 	bic.w	r3, r3, #4
 8002b36:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00c      	beq.n	8002b72 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b80:	f043 0204 	orr.w	r2, r3, #4
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f003 0310 	and.w	r3, r3, #16
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d049      	beq.n	8002c26 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d044      	beq.n	8002c26 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d128      	bne.n	8002bf8 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b28      	cmp	r3, #40	@ 0x28
 8002bb0:	d108      	bne.n	8002bc4 <I2C_ITSlaveCplt+0x1a4>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002bb8:	d104      	bne.n	8002bc4 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002bba:	6979      	ldr	r1, [r7, #20]
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f893 	bl	8002ce8 <I2C_ITListenCplt>
 8002bc2:	e030      	b.n	8002c26 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b29      	cmp	r3, #41	@ 0x29
 8002bce:	d10e      	bne.n	8002bee <I2C_ITSlaveCplt+0x1ce>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002bd6:	d00a      	beq.n	8002bee <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2210      	movs	r2, #16
 8002bde:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f9ec 	bl	8002fbe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff febe 	bl	8002968 <I2C_ITSlaveSeqCplt>
 8002bec:	e01b      	b.n	8002c26 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2210      	movs	r2, #16
 8002bf4:	61da      	str	r2, [r3, #28]
 8002bf6:	e016      	b.n	8002c26 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2210      	movs	r2, #16
 8002bfe:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c04:	f043 0204 	orr.w	r2, r3, #4
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <I2C_ITSlaveCplt+0x1fa>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c18:	d105      	bne.n	8002c26 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1e:	4619      	mov	r1, r3
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f8b5 	bl	8002d90 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d010      	beq.n	8002c5e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c40:	4619      	mov	r1, r3
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f8a4 	bl	8002d90 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b28      	cmp	r3, #40	@ 0x28
 8002c52:	d141      	bne.n	8002cd8 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002c54:	6979      	ldr	r1, [r7, #20]
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f846 	bl	8002ce8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002c5c:	e03c      	b.n	8002cd8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c62:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c66:	d014      	beq.n	8002c92 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff fe7d 	bl	8002968 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a1c      	ldr	r2, [pc, #112]	@ (8002ce4 <I2C_ITSlaveCplt+0x2c4>)
 8002c72:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff fc7d 	bl	800258a <HAL_I2C_ListenCpltCallback>
}
 8002c90:	e022      	b.n	8002cd8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b22      	cmp	r3, #34	@ 0x22
 8002c9c:	d10e      	bne.n	8002cbc <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff fc50 	bl	800255a <HAL_I2C_SlaveRxCpltCallback>
}
 8002cba:	e00d      	b.n	8002cd8 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff fc37 	bl	8002546 <HAL_I2C_SlaveTxCpltCallback>
}
 8002cd8:	bf00      	nop
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	fe00e800 	.word	0xfe00e800
 8002ce4:	ffff0000 	.word	0xffff0000

08002ce8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a25      	ldr	r2, [pc, #148]	@ (8002d8c <I2C_ITListenCplt+0xa4>)
 8002cf6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2220      	movs	r2, #32
 8002d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d022      	beq.n	8002d64 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d012      	beq.n	8002d64 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5c:	f043 0204 	orr.w	r2, r3, #4
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002d64:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 fb5f 	bl	800342c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2210      	movs	r2, #16
 8002d74:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7ff fc03 	bl	800258a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	ffff0000 	.word	0xffff0000

08002d90 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002da0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a6d      	ldr	r2, [pc, #436]	@ (8002f64 <I2C_ITError+0x1d4>)
 8002dae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
 8002dc4:	2b28      	cmp	r3, #40	@ 0x28
 8002dc6:	d005      	beq.n	8002dd4 <I2C_ITError+0x44>
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
 8002dca:	2b29      	cmp	r3, #41	@ 0x29
 8002dcc:	d002      	beq.n	8002dd4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
 8002dd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8002dd2:	d10b      	bne.n	8002dec <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002dd4:	2103      	movs	r1, #3
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fb28 	bl	800342c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2228      	movs	r2, #40	@ 0x28
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a60      	ldr	r2, [pc, #384]	@ (8002f68 <I2C_ITError+0x1d8>)
 8002de8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002dea:	e030      	b.n	8002e4e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002dec:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 fb1b 	bl	800342c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f8e1 	bl	8002fbe <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b60      	cmp	r3, #96	@ 0x60
 8002e06:	d01f      	beq.n	8002e48 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	f003 0320 	and.w	r3, r3, #32
 8002e1a:	2b20      	cmp	r3, #32
 8002e1c:	d114      	bne.n	8002e48 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	2b10      	cmp	r3, #16
 8002e2a:	d109      	bne.n	8002e40 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2210      	movs	r2, #16
 8002e32:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e38:	f043 0204 	orr.w	r2, r3, #4
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2220      	movs	r2, #32
 8002e46:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e52:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d039      	beq.n	8002ed0 <I2C_ITError+0x140>
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b11      	cmp	r3, #17
 8002e60:	d002      	beq.n	8002e68 <I2C_ITError+0xd8>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b21      	cmp	r3, #33	@ 0x21
 8002e66:	d133      	bne.n	8002ed0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e76:	d107      	bne.n	8002e88 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e86:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fe ff35 	bl	8001cfc <HAL_DMA_GetState>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d017      	beq.n	8002ec8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e9c:	4a33      	ldr	r2, [pc, #204]	@ (8002f6c <I2C_ITError+0x1dc>)
 8002e9e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fe fee4 	bl	8001c7a <HAL_DMA_Abort_IT>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d04d      	beq.n	8002f54 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ec6:	e045      	b.n	8002f54 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f851 	bl	8002f70 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ece:	e041      	b.n	8002f54 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d039      	beq.n	8002f4c <I2C_ITError+0x1bc>
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b12      	cmp	r3, #18
 8002edc:	d002      	beq.n	8002ee4 <I2C_ITError+0x154>
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	2b22      	cmp	r3, #34	@ 0x22
 8002ee2:	d133      	bne.n	8002f4c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002eee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ef2:	d107      	bne.n	8002f04 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f02:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fe fef7 	bl	8001cfc <HAL_DMA_GetState>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d017      	beq.n	8002f44 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f18:	4a14      	ldr	r2, [pc, #80]	@ (8002f6c <I2C_ITError+0x1dc>)
 8002f1a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fe fea6 	bl	8001c7a <HAL_DMA_Abort_IT>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d011      	beq.n	8002f58 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f3e:	4610      	mov	r0, r2
 8002f40:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f42:	e009      	b.n	8002f58 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f813 	bl	8002f70 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f4a:	e005      	b.n	8002f58 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 f80f 	bl	8002f70 <I2C_TreatErrorCallback>
  }
}
 8002f52:	e002      	b.n	8002f5a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f54:	bf00      	nop
 8002f56:	e000      	b.n	8002f5a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f58:	bf00      	nop
}
 8002f5a:	bf00      	nop
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	ffff0000 	.word	0xffff0000
 8002f68:	080025c7 	.word	0x080025c7
 8002f6c:	08003007 	.word	0x08003007

08002f70 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b60      	cmp	r3, #96	@ 0x60
 8002f82:	d10e      	bne.n	8002fa2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7ff fb09 	bl	80025b2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002fa0:	e009      	b.n	8002fb6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7ff faf4 	bl	800259e <HAL_I2C_ErrorCallback>
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d103      	bne.n	8002fdc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d007      	beq.n	8002ffa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	699a      	ldr	r2, [r3, #24]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0201 	orr.w	r2, r2, #1
 8002ff8:	619a      	str	r2, [r3, #24]
  }
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b084      	sub	sp, #16
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003012:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003020:	2200      	movs	r2, #0
 8003022:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003030:	2200      	movs	r2, #0
 8003032:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f7ff ff9b 	bl	8002f70 <I2C_TreatErrorCallback>
}
 800303a:	bf00      	nop
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b084      	sub	sp, #16
 8003046:	af00      	add	r7, sp, #0
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	603b      	str	r3, [r7, #0]
 800304e:	4613      	mov	r3, r2
 8003050:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003052:	e03b      	b.n	80030cc <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	6839      	ldr	r1, [r7, #0]
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 f8d5 	bl	8003208 <I2C_IsErrorOccurred>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e041      	b.n	80030ec <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306e:	d02d      	beq.n	80030cc <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003070:	f7fe fa10 	bl	8001494 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d302      	bcc.n	8003086 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d122      	bne.n	80030cc <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	699a      	ldr	r2, [r3, #24]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	4013      	ands	r3, r2
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	429a      	cmp	r2, r3
 8003094:	bf0c      	ite	eq
 8003096:	2301      	moveq	r3, #1
 8003098:	2300      	movne	r3, #0
 800309a:	b2db      	uxtb	r3, r3
 800309c:	461a      	mov	r2, r3
 800309e:	79fb      	ldrb	r3, [r7, #7]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d113      	bne.n	80030cc <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a8:	f043 0220 	orr.w	r2, r3, #32
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e00f      	b.n	80030ec <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699a      	ldr	r2, [r3, #24]
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	4013      	ands	r3, r2
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	429a      	cmp	r2, r3
 80030da:	bf0c      	ite	eq
 80030dc:	2301      	moveq	r3, #1
 80030de:	2300      	movne	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d0b4      	beq.n	8003054 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003100:	e033      	b.n	800316a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	68b9      	ldr	r1, [r7, #8]
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 f87e 	bl	8003208 <I2C_IsErrorOccurred>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e031      	b.n	800317a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311c:	d025      	beq.n	800316a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311e:	f7fe f9b9 	bl	8001494 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	429a      	cmp	r2, r3
 800312c:	d302      	bcc.n	8003134 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d11a      	bne.n	800316a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b02      	cmp	r3, #2
 8003140:	d013      	beq.n	800316a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003146:	f043 0220 	orr.w	r2, r3, #32
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e007      	b.n	800317a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b02      	cmp	r3, #2
 8003176:	d1c4      	bne.n	8003102 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b084      	sub	sp, #16
 8003186:	af00      	add	r7, sp, #0
 8003188:	60f8      	str	r0, [r7, #12]
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800318e:	e02f      	b.n	80031f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	68b9      	ldr	r1, [r7, #8]
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 f837 	bl	8003208 <I2C_IsErrorOccurred>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e02d      	b.n	8003200 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a4:	f7fe f976 	bl	8001494 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d302      	bcc.n	80031ba <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d11a      	bne.n	80031f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	f003 0320 	and.w	r3, r3, #32
 80031c4:	2b20      	cmp	r3, #32
 80031c6:	d013      	beq.n	80031f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031cc:	f043 0220 	orr.w	r2, r3, #32
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e007      	b.n	8003200 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	f003 0320 	and.w	r3, r3, #32
 80031fa:	2b20      	cmp	r3, #32
 80031fc:	d1c8      	bne.n	8003190 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08a      	sub	sp, #40	@ 0x28
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003214:	2300      	movs	r3, #0
 8003216:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003222:	2300      	movs	r3, #0
 8003224:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	f003 0310 	and.w	r3, r3, #16
 8003230:	2b00      	cmp	r3, #0
 8003232:	d068      	beq.n	8003306 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2210      	movs	r2, #16
 800323a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800323c:	e049      	b.n	80032d2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003244:	d045      	beq.n	80032d2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003246:	f7fe f925 	bl	8001494 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	429a      	cmp	r2, r3
 8003254:	d302      	bcc.n	800325c <I2C_IsErrorOccurred+0x54>
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d13a      	bne.n	80032d2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003266:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800326e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800327a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800327e:	d121      	bne.n	80032c4 <I2C_IsErrorOccurred+0xbc>
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003286:	d01d      	beq.n	80032c4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003288:	7cfb      	ldrb	r3, [r7, #19]
 800328a:	2b20      	cmp	r3, #32
 800328c:	d01a      	beq.n	80032c4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800329c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800329e:	f7fe f8f9 	bl	8001494 <HAL_GetTick>
 80032a2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032a4:	e00e      	b.n	80032c4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80032a6:	f7fe f8f5 	bl	8001494 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b19      	cmp	r3, #25
 80032b2:	d907      	bls.n	80032c4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	f043 0320 	orr.w	r3, r3, #32
 80032ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80032c2:	e006      	b.n	80032d2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b20      	cmp	r3, #32
 80032d0:	d1e9      	bne.n	80032a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	f003 0320 	and.w	r3, r3, #32
 80032dc:	2b20      	cmp	r3, #32
 80032de:	d003      	beq.n	80032e8 <I2C_IsErrorOccurred+0xe0>
 80032e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0aa      	beq.n	800323e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80032e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d103      	bne.n	80032f8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2220      	movs	r2, #32
 80032f6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	f043 0304 	orr.w	r3, r3, #4
 80032fe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00b      	beq.n	8003330 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003328:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00b      	beq.n	8003352 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	f043 0308 	orr.w	r3, r3, #8
 8003340:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800334a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00b      	beq.n	8003374 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	f043 0302 	orr.w	r3, r3, #2
 8003362:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800336c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003374:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003378:	2b00      	cmp	r3, #0
 800337a:	d01c      	beq.n	80033b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f7ff fe1e 	bl	8002fbe <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6859      	ldr	r1, [r3, #4]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	4b0d      	ldr	r3, [pc, #52]	@ (80033c4 <I2C_IsErrorOccurred+0x1bc>)
 800338e:	400b      	ands	r3, r1
 8003390:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	431a      	orrs	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2220      	movs	r2, #32
 80033a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80033b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3728      	adds	r7, #40	@ 0x28
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	fe00e800 	.word	0xfe00e800

080033c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	607b      	str	r3, [r7, #4]
 80033d2:	460b      	mov	r3, r1
 80033d4:	817b      	strh	r3, [r7, #10]
 80033d6:	4613      	mov	r3, r2
 80033d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033da:	897b      	ldrh	r3, [r7, #10]
 80033dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033e0:	7a7b      	ldrb	r3, [r7, #9]
 80033e2:	041b      	lsls	r3, r3, #16
 80033e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	0d5b      	lsrs	r3, r3, #21
 8003402:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003406:	4b08      	ldr	r3, [pc, #32]	@ (8003428 <I2C_TransferConfig+0x60>)
 8003408:	430b      	orrs	r3, r1
 800340a:	43db      	mvns	r3, r3
 800340c:	ea02 0103 	and.w	r1, r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	430a      	orrs	r2, r1
 8003418:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800341a:	bf00      	nop
 800341c:	371c      	adds	r7, #28
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	03ff63ff 	.word	0x03ff63ff

0800342c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	460b      	mov	r3, r1
 8003436:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800343c:	887b      	ldrh	r3, [r7, #2]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00f      	beq.n	8003466 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800344c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003454:	b2db      	uxtb	r3, r3
 8003456:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800345a:	2b28      	cmp	r3, #40	@ 0x28
 800345c:	d003      	beq.n	8003466 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003464:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003466:	887b      	ldrh	r3, [r7, #2]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00f      	beq.n	8003490 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003476:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800347e:	b2db      	uxtb	r3, r3
 8003480:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003484:	2b28      	cmp	r3, #40	@ 0x28
 8003486:	d003      	beq.n	8003490 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800348e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003490:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003494:	2b00      	cmp	r3, #0
 8003496:	da03      	bge.n	80034a0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800349e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80034a0:	887b      	ldrh	r3, [r7, #2]
 80034a2:	2b10      	cmp	r3, #16
 80034a4:	d103      	bne.n	80034ae <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80034ac:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80034ae:	887b      	ldrh	r3, [r7, #2]
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	d103      	bne.n	80034bc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f043 0320 	orr.w	r3, r3, #32
 80034ba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80034bc:	887b      	ldrh	r3, [r7, #2]
 80034be:	2b40      	cmp	r3, #64	@ 0x40
 80034c0:	d103      	bne.n	80034ca <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034c8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6819      	ldr	r1, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	43da      	mvns	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	400a      	ands	r2, r1
 80034da:	601a      	str	r2, [r3, #0]
}
 80034dc:	bf00      	nop
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b20      	cmp	r3, #32
 80034fc:	d138      	bne.n	8003570 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003508:	2302      	movs	r3, #2
 800350a:	e032      	b.n	8003572 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2224      	movs	r2, #36	@ 0x24
 8003518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0201 	bic.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800353a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6819      	ldr	r1, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0201 	orr.w	r2, r2, #1
 800355a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	e000      	b.n	8003572 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003570:	2302      	movs	r3, #2
  }
}
 8003572:	4618      	mov	r0, r3
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800357e:	b480      	push	{r7}
 8003580:	b085      	sub	sp, #20
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b20      	cmp	r3, #32
 8003592:	d139      	bne.n	8003608 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800359e:	2302      	movs	r3, #2
 80035a0:	e033      	b.n	800360a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2224      	movs	r2, #36	@ 0x24
 80035ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0201 	bic.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80035d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	021b      	lsls	r3, r3, #8
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	4313      	orrs	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0201 	orr.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	e000      	b.n	800360a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003608:	2302      	movs	r3, #2
  }
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
	...

08003618 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800361c:	4b04      	ldr	r3, [pc, #16]	@ (8003630 <HAL_PWREx_GetVoltageRange+0x18>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003624:	4618      	mov	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40007000 	.word	0x40007000

08003634 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003642:	d130      	bne.n	80036a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003644:	4b23      	ldr	r3, [pc, #140]	@ (80036d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800364c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003650:	d038      	beq.n	80036c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003652:	4b20      	ldr	r3, [pc, #128]	@ (80036d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800365a:	4a1e      	ldr	r2, [pc, #120]	@ (80036d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800365c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003660:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003662:	4b1d      	ldr	r3, [pc, #116]	@ (80036d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2232      	movs	r2, #50	@ 0x32
 8003668:	fb02 f303 	mul.w	r3, r2, r3
 800366c:	4a1b      	ldr	r2, [pc, #108]	@ (80036dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	0c9b      	lsrs	r3, r3, #18
 8003674:	3301      	adds	r3, #1
 8003676:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003678:	e002      	b.n	8003680 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	3b01      	subs	r3, #1
 800367e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003680:	4b14      	ldr	r3, [pc, #80]	@ (80036d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003688:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800368c:	d102      	bne.n	8003694 <HAL_PWREx_ControlVoltageScaling+0x60>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1f2      	bne.n	800367a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003694:	4b0f      	ldr	r3, [pc, #60]	@ (80036d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800369c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036a0:	d110      	bne.n	80036c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e00f      	b.n	80036c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036a6:	4b0b      	ldr	r3, [pc, #44]	@ (80036d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80036ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036b2:	d007      	beq.n	80036c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036b4:	4b07      	ldr	r3, [pc, #28]	@ (80036d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036bc:	4a05      	ldr	r2, [pc, #20]	@ (80036d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40007000 	.word	0x40007000
 80036d8:	20000014 	.word	0x20000014
 80036dc:	431bde83 	.word	0x431bde83

080036e0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e3ca      	b.n	8003e88 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036f2:	4b97      	ldr	r3, [pc, #604]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 030c 	and.w	r3, r3, #12
 80036fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036fc:	4b94      	ldr	r3, [pc, #592]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0310 	and.w	r3, r3, #16
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 80e4 	beq.w	80038dc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d007      	beq.n	800372a <HAL_RCC_OscConfig+0x4a>
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	2b0c      	cmp	r3, #12
 800371e:	f040 808b 	bne.w	8003838 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2b01      	cmp	r3, #1
 8003726:	f040 8087 	bne.w	8003838 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800372a:	4b89      	ldr	r3, [pc, #548]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <HAL_RCC_OscConfig+0x62>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e3a2      	b.n	8003e88 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1a      	ldr	r2, [r3, #32]
 8003746:	4b82      	ldr	r3, [pc, #520]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	d004      	beq.n	800375c <HAL_RCC_OscConfig+0x7c>
 8003752:	4b7f      	ldr	r3, [pc, #508]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800375a:	e005      	b.n	8003768 <HAL_RCC_OscConfig+0x88>
 800375c:	4b7c      	ldr	r3, [pc, #496]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 800375e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003762:	091b      	lsrs	r3, r3, #4
 8003764:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003768:	4293      	cmp	r3, r2
 800376a:	d223      	bcs.n	80037b4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	4618      	mov	r0, r3
 8003772:	f000 fd55 	bl	8004220 <RCC_SetFlashLatencyFromMSIRange>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e383      	b.n	8003e88 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003780:	4b73      	ldr	r3, [pc, #460]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a72      	ldr	r2, [pc, #456]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 8003786:	f043 0308 	orr.w	r3, r3, #8
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	4b70      	ldr	r3, [pc, #448]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	496d      	ldr	r1, [pc, #436]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 800379a:	4313      	orrs	r3, r2
 800379c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800379e:	4b6c      	ldr	r3, [pc, #432]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	021b      	lsls	r3, r3, #8
 80037ac:	4968      	ldr	r1, [pc, #416]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	604b      	str	r3, [r1, #4]
 80037b2:	e025      	b.n	8003800 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037b4:	4b66      	ldr	r3, [pc, #408]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a65      	ldr	r2, [pc, #404]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 80037ba:	f043 0308 	orr.w	r3, r3, #8
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	4b63      	ldr	r3, [pc, #396]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	4960      	ldr	r1, [pc, #384]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	021b      	lsls	r3, r3, #8
 80037e0:	495b      	ldr	r1, [pc, #364]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d109      	bne.n	8003800 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 fd15 	bl	8004220 <RCC_SetFlashLatencyFromMSIRange>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e343      	b.n	8003e88 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003800:	f000 fc4a 	bl	8004098 <HAL_RCC_GetSysClockFreq>
 8003804:	4602      	mov	r2, r0
 8003806:	4b52      	ldr	r3, [pc, #328]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	091b      	lsrs	r3, r3, #4
 800380c:	f003 030f 	and.w	r3, r3, #15
 8003810:	4950      	ldr	r1, [pc, #320]	@ (8003954 <HAL_RCC_OscConfig+0x274>)
 8003812:	5ccb      	ldrb	r3, [r1, r3]
 8003814:	f003 031f 	and.w	r3, r3, #31
 8003818:	fa22 f303 	lsr.w	r3, r2, r3
 800381c:	4a4e      	ldr	r2, [pc, #312]	@ (8003958 <HAL_RCC_OscConfig+0x278>)
 800381e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003820:	4b4e      	ldr	r3, [pc, #312]	@ (800395c <HAL_RCC_OscConfig+0x27c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f7fd fde5 	bl	80013f4 <HAL_InitTick>
 800382a:	4603      	mov	r3, r0
 800382c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800382e:	7bfb      	ldrb	r3, [r7, #15]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d052      	beq.n	80038da <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003834:	7bfb      	ldrb	r3, [r7, #15]
 8003836:	e327      	b.n	8003e88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d032      	beq.n	80038a6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003840:	4b43      	ldr	r3, [pc, #268]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a42      	ldr	r2, [pc, #264]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 8003846:	f043 0301 	orr.w	r3, r3, #1
 800384a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800384c:	f7fd fe22 	bl	8001494 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003854:	f7fd fe1e 	bl	8001494 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e310      	b.n	8003e88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003866:	4b3a      	ldr	r3, [pc, #232]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003872:	4b37      	ldr	r3, [pc, #220]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a36      	ldr	r2, [pc, #216]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 8003878:	f043 0308 	orr.w	r3, r3, #8
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	4b34      	ldr	r3, [pc, #208]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	4931      	ldr	r1, [pc, #196]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 800388c:	4313      	orrs	r3, r2
 800388e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003890:	4b2f      	ldr	r3, [pc, #188]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	021b      	lsls	r3, r3, #8
 800389e:	492c      	ldr	r1, [pc, #176]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	604b      	str	r3, [r1, #4]
 80038a4:	e01a      	b.n	80038dc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038a6:	4b2a      	ldr	r3, [pc, #168]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a29      	ldr	r2, [pc, #164]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 80038ac:	f023 0301 	bic.w	r3, r3, #1
 80038b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038b2:	f7fd fdef 	bl	8001494 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038ba:	f7fd fdeb 	bl	8001494 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e2dd      	b.n	8003e88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038cc:	4b20      	ldr	r3, [pc, #128]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1f0      	bne.n	80038ba <HAL_RCC_OscConfig+0x1da>
 80038d8:	e000      	b.n	80038dc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d074      	beq.n	80039d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d005      	beq.n	80038fa <HAL_RCC_OscConfig+0x21a>
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	2b0c      	cmp	r3, #12
 80038f2:	d10e      	bne.n	8003912 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2b03      	cmp	r3, #3
 80038f8:	d10b      	bne.n	8003912 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038fa:	4b15      	ldr	r3, [pc, #84]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d064      	beq.n	80039d0 <HAL_RCC_OscConfig+0x2f0>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d160      	bne.n	80039d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e2ba      	b.n	8003e88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800391a:	d106      	bne.n	800392a <HAL_RCC_OscConfig+0x24a>
 800391c:	4b0c      	ldr	r3, [pc, #48]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a0b      	ldr	r2, [pc, #44]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 8003922:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003926:	6013      	str	r3, [r2, #0]
 8003928:	e026      	b.n	8003978 <HAL_RCC_OscConfig+0x298>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003932:	d115      	bne.n	8003960 <HAL_RCC_OscConfig+0x280>
 8003934:	4b06      	ldr	r3, [pc, #24]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a05      	ldr	r2, [pc, #20]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 800393a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800393e:	6013      	str	r3, [r2, #0]
 8003940:	4b03      	ldr	r3, [pc, #12]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a02      	ldr	r2, [pc, #8]	@ (8003950 <HAL_RCC_OscConfig+0x270>)
 8003946:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800394a:	6013      	str	r3, [r2, #0]
 800394c:	e014      	b.n	8003978 <HAL_RCC_OscConfig+0x298>
 800394e:	bf00      	nop
 8003950:	40021000 	.word	0x40021000
 8003954:	08006d54 	.word	0x08006d54
 8003958:	20000014 	.word	0x20000014
 800395c:	20000018 	.word	0x20000018
 8003960:	4ba0      	ldr	r3, [pc, #640]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a9f      	ldr	r2, [pc, #636]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 8003966:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800396a:	6013      	str	r3, [r2, #0]
 800396c:	4b9d      	ldr	r3, [pc, #628]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a9c      	ldr	r2, [pc, #624]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 8003972:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d013      	beq.n	80039a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003980:	f7fd fd88 	bl	8001494 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003988:	f7fd fd84 	bl	8001494 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b64      	cmp	r3, #100	@ 0x64
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e276      	b.n	8003e88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800399a:	4b92      	ldr	r3, [pc, #584]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0f0      	beq.n	8003988 <HAL_RCC_OscConfig+0x2a8>
 80039a6:	e014      	b.n	80039d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a8:	f7fd fd74 	bl	8001494 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b0:	f7fd fd70 	bl	8001494 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b64      	cmp	r3, #100	@ 0x64
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e262      	b.n	8003e88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039c2:	4b88      	ldr	r3, [pc, #544]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0x2d0>
 80039ce:	e000      	b.n	80039d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d060      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	2b04      	cmp	r3, #4
 80039e2:	d005      	beq.n	80039f0 <HAL_RCC_OscConfig+0x310>
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	2b0c      	cmp	r3, #12
 80039e8:	d119      	bne.n	8003a1e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d116      	bne.n	8003a1e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039f0:	4b7c      	ldr	r3, [pc, #496]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d005      	beq.n	8003a08 <HAL_RCC_OscConfig+0x328>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e23f      	b.n	8003e88 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a08:	4b76      	ldr	r3, [pc, #472]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	061b      	lsls	r3, r3, #24
 8003a16:	4973      	ldr	r1, [pc, #460]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a1c:	e040      	b.n	8003aa0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d023      	beq.n	8003a6e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a26:	4b6f      	ldr	r3, [pc, #444]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a6e      	ldr	r2, [pc, #440]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 8003a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a32:	f7fd fd2f 	bl	8001494 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a3a:	f7fd fd2b 	bl	8001494 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e21d      	b.n	8003e88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a4c:	4b65      	ldr	r3, [pc, #404]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0f0      	beq.n	8003a3a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a58:	4b62      	ldr	r3, [pc, #392]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	061b      	lsls	r3, r3, #24
 8003a66:	495f      	ldr	r1, [pc, #380]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	604b      	str	r3, [r1, #4]
 8003a6c:	e018      	b.n	8003aa0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a6e:	4b5d      	ldr	r3, [pc, #372]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a5c      	ldr	r2, [pc, #368]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 8003a74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7a:	f7fd fd0b 	bl	8001494 <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a82:	f7fd fd07 	bl	8001494 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e1f9      	b.n	8003e88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a94:	4b53      	ldr	r3, [pc, #332]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1f0      	bne.n	8003a82 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d03c      	beq.n	8003b26 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d01c      	beq.n	8003aee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ab4:	4b4b      	ldr	r3, [pc, #300]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 8003ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003aba:	4a4a      	ldr	r2, [pc, #296]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 8003abc:	f043 0301 	orr.w	r3, r3, #1
 8003ac0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac4:	f7fd fce6 	bl	8001494 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003acc:	f7fd fce2 	bl	8001494 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e1d4      	b.n	8003e88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ade:	4b41      	ldr	r3, [pc, #260]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 8003ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0ef      	beq.n	8003acc <HAL_RCC_OscConfig+0x3ec>
 8003aec:	e01b      	b.n	8003b26 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aee:	4b3d      	ldr	r3, [pc, #244]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 8003af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003af4:	4a3b      	ldr	r2, [pc, #236]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 8003af6:	f023 0301 	bic.w	r3, r3, #1
 8003afa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afe:	f7fd fcc9 	bl	8001494 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b06:	f7fd fcc5 	bl	8001494 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e1b7      	b.n	8003e88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b18:	4b32      	ldr	r3, [pc, #200]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 8003b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1ef      	bne.n	8003b06 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0304 	and.w	r3, r3, #4
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 80a6 	beq.w	8003c80 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b34:	2300      	movs	r3, #0
 8003b36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b38:	4b2a      	ldr	r3, [pc, #168]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 8003b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10d      	bne.n	8003b60 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b44:	4b27      	ldr	r3, [pc, #156]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 8003b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b48:	4a26      	ldr	r2, [pc, #152]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 8003b4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b50:	4b24      	ldr	r3, [pc, #144]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 8003b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b58:	60bb      	str	r3, [r7, #8]
 8003b5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b60:	4b21      	ldr	r3, [pc, #132]	@ (8003be8 <HAL_RCC_OscConfig+0x508>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d118      	bne.n	8003b9e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b6c:	4b1e      	ldr	r3, [pc, #120]	@ (8003be8 <HAL_RCC_OscConfig+0x508>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a1d      	ldr	r2, [pc, #116]	@ (8003be8 <HAL_RCC_OscConfig+0x508>)
 8003b72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b78:	f7fd fc8c 	bl	8001494 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b80:	f7fd fc88 	bl	8001494 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e17a      	b.n	8003e88 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b92:	4b15      	ldr	r3, [pc, #84]	@ (8003be8 <HAL_RCC_OscConfig+0x508>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d108      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x4d8>
 8003ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 8003ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bac:	4a0d      	ldr	r2, [pc, #52]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bb6:	e029      	b.n	8003c0c <HAL_RCC_OscConfig+0x52c>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	2b05      	cmp	r3, #5
 8003bbe:	d115      	bne.n	8003bec <HAL_RCC_OscConfig+0x50c>
 8003bc0:	4b08      	ldr	r3, [pc, #32]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 8003bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc6:	4a07      	ldr	r2, [pc, #28]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 8003bc8:	f043 0304 	orr.w	r3, r3, #4
 8003bcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bd0:	4b04      	ldr	r3, [pc, #16]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 8003bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd6:	4a03      	ldr	r2, [pc, #12]	@ (8003be4 <HAL_RCC_OscConfig+0x504>)
 8003bd8:	f043 0301 	orr.w	r3, r3, #1
 8003bdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003be0:	e014      	b.n	8003c0c <HAL_RCC_OscConfig+0x52c>
 8003be2:	bf00      	nop
 8003be4:	40021000 	.word	0x40021000
 8003be8:	40007000 	.word	0x40007000
 8003bec:	4b9c      	ldr	r3, [pc, #624]	@ (8003e60 <HAL_RCC_OscConfig+0x780>)
 8003bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf2:	4a9b      	ldr	r2, [pc, #620]	@ (8003e60 <HAL_RCC_OscConfig+0x780>)
 8003bf4:	f023 0301 	bic.w	r3, r3, #1
 8003bf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bfc:	4b98      	ldr	r3, [pc, #608]	@ (8003e60 <HAL_RCC_OscConfig+0x780>)
 8003bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c02:	4a97      	ldr	r2, [pc, #604]	@ (8003e60 <HAL_RCC_OscConfig+0x780>)
 8003c04:	f023 0304 	bic.w	r3, r3, #4
 8003c08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d016      	beq.n	8003c42 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c14:	f7fd fc3e 	bl	8001494 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c1a:	e00a      	b.n	8003c32 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c1c:	f7fd fc3a 	bl	8001494 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e12a      	b.n	8003e88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c32:	4b8b      	ldr	r3, [pc, #556]	@ (8003e60 <HAL_RCC_OscConfig+0x780>)
 8003c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0ed      	beq.n	8003c1c <HAL_RCC_OscConfig+0x53c>
 8003c40:	e015      	b.n	8003c6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c42:	f7fd fc27 	bl	8001494 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c48:	e00a      	b.n	8003c60 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c4a:	f7fd fc23 	bl	8001494 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e113      	b.n	8003e88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c60:	4b7f      	ldr	r3, [pc, #508]	@ (8003e60 <HAL_RCC_OscConfig+0x780>)
 8003c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1ed      	bne.n	8003c4a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c6e:	7ffb      	ldrb	r3, [r7, #31]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d105      	bne.n	8003c80 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c74:	4b7a      	ldr	r3, [pc, #488]	@ (8003e60 <HAL_RCC_OscConfig+0x780>)
 8003c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c78:	4a79      	ldr	r2, [pc, #484]	@ (8003e60 <HAL_RCC_OscConfig+0x780>)
 8003c7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c7e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 80fe 	beq.w	8003e86 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	f040 80d0 	bne.w	8003e34 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c94:	4b72      	ldr	r3, [pc, #456]	@ (8003e60 <HAL_RCC_OscConfig+0x780>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f003 0203 	and.w	r2, r3, #3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d130      	bne.n	8003d0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d127      	bne.n	8003d0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cc4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d11f      	bne.n	8003d0a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003cd4:	2a07      	cmp	r2, #7
 8003cd6:	bf14      	ite	ne
 8003cd8:	2201      	movne	r2, #1
 8003cda:	2200      	moveq	r2, #0
 8003cdc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d113      	bne.n	8003d0a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cec:	085b      	lsrs	r3, r3, #1
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d109      	bne.n	8003d0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d00:	085b      	lsrs	r3, r3, #1
 8003d02:	3b01      	subs	r3, #1
 8003d04:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d06e      	beq.n	8003de8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	2b0c      	cmp	r3, #12
 8003d0e:	d069      	beq.n	8003de4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d10:	4b53      	ldr	r3, [pc, #332]	@ (8003e60 <HAL_RCC_OscConfig+0x780>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d105      	bne.n	8003d28 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d1c:	4b50      	ldr	r3, [pc, #320]	@ (8003e60 <HAL_RCC_OscConfig+0x780>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0ad      	b.n	8003e88 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d2c:	4b4c      	ldr	r3, [pc, #304]	@ (8003e60 <HAL_RCC_OscConfig+0x780>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a4b      	ldr	r2, [pc, #300]	@ (8003e60 <HAL_RCC_OscConfig+0x780>)
 8003d32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d36:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d38:	f7fd fbac 	bl	8001494 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d40:	f7fd fba8 	bl	8001494 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e09a      	b.n	8003e88 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d52:	4b43      	ldr	r3, [pc, #268]	@ (8003e60 <HAL_RCC_OscConfig+0x780>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1f0      	bne.n	8003d40 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d5e:	4b40      	ldr	r3, [pc, #256]	@ (8003e60 <HAL_RCC_OscConfig+0x780>)
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	4b40      	ldr	r3, [pc, #256]	@ (8003e64 <HAL_RCC_OscConfig+0x784>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003d6e:	3a01      	subs	r2, #1
 8003d70:	0112      	lsls	r2, r2, #4
 8003d72:	4311      	orrs	r1, r2
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003d78:	0212      	lsls	r2, r2, #8
 8003d7a:	4311      	orrs	r1, r2
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d80:	0852      	lsrs	r2, r2, #1
 8003d82:	3a01      	subs	r2, #1
 8003d84:	0552      	lsls	r2, r2, #21
 8003d86:	4311      	orrs	r1, r2
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003d8c:	0852      	lsrs	r2, r2, #1
 8003d8e:	3a01      	subs	r2, #1
 8003d90:	0652      	lsls	r2, r2, #25
 8003d92:	4311      	orrs	r1, r2
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003d98:	0912      	lsrs	r2, r2, #4
 8003d9a:	0452      	lsls	r2, r2, #17
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	4930      	ldr	r1, [pc, #192]	@ (8003e60 <HAL_RCC_OscConfig+0x780>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003da4:	4b2e      	ldr	r3, [pc, #184]	@ (8003e60 <HAL_RCC_OscConfig+0x780>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a2d      	ldr	r2, [pc, #180]	@ (8003e60 <HAL_RCC_OscConfig+0x780>)
 8003daa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003db0:	4b2b      	ldr	r3, [pc, #172]	@ (8003e60 <HAL_RCC_OscConfig+0x780>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	4a2a      	ldr	r2, [pc, #168]	@ (8003e60 <HAL_RCC_OscConfig+0x780>)
 8003db6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dbc:	f7fd fb6a 	bl	8001494 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc4:	f7fd fb66 	bl	8001494 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e058      	b.n	8003e88 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dd6:	4b22      	ldr	r3, [pc, #136]	@ (8003e60 <HAL_RCC_OscConfig+0x780>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003de2:	e050      	b.n	8003e86 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e04f      	b.n	8003e88 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003de8:	4b1d      	ldr	r3, [pc, #116]	@ (8003e60 <HAL_RCC_OscConfig+0x780>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d148      	bne.n	8003e86 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003df4:	4b1a      	ldr	r3, [pc, #104]	@ (8003e60 <HAL_RCC_OscConfig+0x780>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a19      	ldr	r2, [pc, #100]	@ (8003e60 <HAL_RCC_OscConfig+0x780>)
 8003dfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dfe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e00:	4b17      	ldr	r3, [pc, #92]	@ (8003e60 <HAL_RCC_OscConfig+0x780>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	4a16      	ldr	r2, [pc, #88]	@ (8003e60 <HAL_RCC_OscConfig+0x780>)
 8003e06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e0a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e0c:	f7fd fb42 	bl	8001494 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e14:	f7fd fb3e 	bl	8001494 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e030      	b.n	8003e88 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e26:	4b0e      	ldr	r3, [pc, #56]	@ (8003e60 <HAL_RCC_OscConfig+0x780>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0f0      	beq.n	8003e14 <HAL_RCC_OscConfig+0x734>
 8003e32:	e028      	b.n	8003e86 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	2b0c      	cmp	r3, #12
 8003e38:	d023      	beq.n	8003e82 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3a:	4b09      	ldr	r3, [pc, #36]	@ (8003e60 <HAL_RCC_OscConfig+0x780>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a08      	ldr	r2, [pc, #32]	@ (8003e60 <HAL_RCC_OscConfig+0x780>)
 8003e40:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e46:	f7fd fb25 	bl	8001494 <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e4c:	e00c      	b.n	8003e68 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e4e:	f7fd fb21 	bl	8001494 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d905      	bls.n	8003e68 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e013      	b.n	8003e88 <HAL_RCC_OscConfig+0x7a8>
 8003e60:	40021000 	.word	0x40021000
 8003e64:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e68:	4b09      	ldr	r3, [pc, #36]	@ (8003e90 <HAL_RCC_OscConfig+0x7b0>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1ec      	bne.n	8003e4e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003e74:	4b06      	ldr	r3, [pc, #24]	@ (8003e90 <HAL_RCC_OscConfig+0x7b0>)
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	4905      	ldr	r1, [pc, #20]	@ (8003e90 <HAL_RCC_OscConfig+0x7b0>)
 8003e7a:	4b06      	ldr	r3, [pc, #24]	@ (8003e94 <HAL_RCC_OscConfig+0x7b4>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	60cb      	str	r3, [r1, #12]
 8003e80:	e001      	b.n	8003e86 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3720      	adds	r7, #32
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40021000 	.word	0x40021000
 8003e94:	feeefffc 	.word	0xfeeefffc

08003e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0e7      	b.n	800407c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003eac:	4b75      	ldr	r3, [pc, #468]	@ (8004084 <HAL_RCC_ClockConfig+0x1ec>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d910      	bls.n	8003edc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eba:	4b72      	ldr	r3, [pc, #456]	@ (8004084 <HAL_RCC_ClockConfig+0x1ec>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f023 0207 	bic.w	r2, r3, #7
 8003ec2:	4970      	ldr	r1, [pc, #448]	@ (8004084 <HAL_RCC_ClockConfig+0x1ec>)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eca:	4b6e      	ldr	r3, [pc, #440]	@ (8004084 <HAL_RCC_ClockConfig+0x1ec>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d001      	beq.n	8003edc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e0cf      	b.n	800407c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d010      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	4b66      	ldr	r3, [pc, #408]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d908      	bls.n	8003f0a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ef8:	4b63      	ldr	r3, [pc, #396]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	4960      	ldr	r1, [pc, #384]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d04c      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b03      	cmp	r3, #3
 8003f1c:	d107      	bne.n	8003f2e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f1e:	4b5a      	ldr	r3, [pc, #360]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d121      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e0a6      	b.n	800407c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d107      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f36:	4b54      	ldr	r3, [pc, #336]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d115      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e09a      	b.n	800407c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d107      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f4e:	4b4e      	ldr	r3, [pc, #312]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d109      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e08e      	b.n	800407c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f5e:	4b4a      	ldr	r3, [pc, #296]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e086      	b.n	800407c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f6e:	4b46      	ldr	r3, [pc, #280]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f023 0203 	bic.w	r2, r3, #3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	4943      	ldr	r1, [pc, #268]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f80:	f7fd fa88 	bl	8001494 <HAL_GetTick>
 8003f84:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f86:	e00a      	b.n	8003f9e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f88:	f7fd fa84 	bl	8001494 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e06e      	b.n	800407c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9e:	4b3a      	ldr	r3, [pc, #232]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 020c 	and.w	r2, r3, #12
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d1eb      	bne.n	8003f88 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d010      	beq.n	8003fde <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	4b31      	ldr	r3, [pc, #196]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d208      	bcs.n	8003fde <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fcc:	4b2e      	ldr	r3, [pc, #184]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	492b      	ldr	r1, [pc, #172]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fde:	4b29      	ldr	r3, [pc, #164]	@ (8004084 <HAL_RCC_ClockConfig+0x1ec>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d210      	bcs.n	800400e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fec:	4b25      	ldr	r3, [pc, #148]	@ (8004084 <HAL_RCC_ClockConfig+0x1ec>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f023 0207 	bic.w	r2, r3, #7
 8003ff4:	4923      	ldr	r1, [pc, #140]	@ (8004084 <HAL_RCC_ClockConfig+0x1ec>)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ffc:	4b21      	ldr	r3, [pc, #132]	@ (8004084 <HAL_RCC_ClockConfig+0x1ec>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d001      	beq.n	800400e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e036      	b.n	800407c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0304 	and.w	r3, r3, #4
 8004016:	2b00      	cmp	r3, #0
 8004018:	d008      	beq.n	800402c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800401a:	4b1b      	ldr	r3, [pc, #108]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	4918      	ldr	r1, [pc, #96]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8004028:	4313      	orrs	r3, r2
 800402a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0308 	and.w	r3, r3, #8
 8004034:	2b00      	cmp	r3, #0
 8004036:	d009      	beq.n	800404c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004038:	4b13      	ldr	r3, [pc, #76]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	4910      	ldr	r1, [pc, #64]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8004048:	4313      	orrs	r3, r2
 800404a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800404c:	f000 f824 	bl	8004098 <HAL_RCC_GetSysClockFreq>
 8004050:	4602      	mov	r2, r0
 8004052:	4b0d      	ldr	r3, [pc, #52]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	091b      	lsrs	r3, r3, #4
 8004058:	f003 030f 	and.w	r3, r3, #15
 800405c:	490b      	ldr	r1, [pc, #44]	@ (800408c <HAL_RCC_ClockConfig+0x1f4>)
 800405e:	5ccb      	ldrb	r3, [r1, r3]
 8004060:	f003 031f 	and.w	r3, r3, #31
 8004064:	fa22 f303 	lsr.w	r3, r2, r3
 8004068:	4a09      	ldr	r2, [pc, #36]	@ (8004090 <HAL_RCC_ClockConfig+0x1f8>)
 800406a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800406c:	4b09      	ldr	r3, [pc, #36]	@ (8004094 <HAL_RCC_ClockConfig+0x1fc>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4618      	mov	r0, r3
 8004072:	f7fd f9bf 	bl	80013f4 <HAL_InitTick>
 8004076:	4603      	mov	r3, r0
 8004078:	72fb      	strb	r3, [r7, #11]

  return status;
 800407a:	7afb      	ldrb	r3, [r7, #11]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40022000 	.word	0x40022000
 8004088:	40021000 	.word	0x40021000
 800408c:	08006d54 	.word	0x08006d54
 8004090:	20000014 	.word	0x20000014
 8004094:	20000018 	.word	0x20000018

08004098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004098:	b480      	push	{r7}
 800409a:	b089      	sub	sp, #36	@ 0x24
 800409c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	61fb      	str	r3, [r7, #28]
 80040a2:	2300      	movs	r3, #0
 80040a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040a6:	4b3e      	ldr	r3, [pc, #248]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 030c 	and.w	r3, r3, #12
 80040ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040b0:	4b3b      	ldr	r3, [pc, #236]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f003 0303 	and.w	r3, r3, #3
 80040b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_RCC_GetSysClockFreq+0x34>
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	2b0c      	cmp	r3, #12
 80040c4:	d121      	bne.n	800410a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d11e      	bne.n	800410a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040cc:	4b34      	ldr	r3, [pc, #208]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d107      	bne.n	80040e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040d8:	4b31      	ldr	r3, [pc, #196]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040de:	0a1b      	lsrs	r3, r3, #8
 80040e0:	f003 030f 	and.w	r3, r3, #15
 80040e4:	61fb      	str	r3, [r7, #28]
 80040e6:	e005      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040e8:	4b2d      	ldr	r3, [pc, #180]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	091b      	lsrs	r3, r3, #4
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80040f4:	4a2b      	ldr	r2, [pc, #172]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10d      	bne.n	8004120 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004108:	e00a      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	2b04      	cmp	r3, #4
 800410e:	d102      	bne.n	8004116 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004110:	4b25      	ldr	r3, [pc, #148]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004112:	61bb      	str	r3, [r7, #24]
 8004114:	e004      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	2b08      	cmp	r3, #8
 800411a:	d101      	bne.n	8004120 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800411c:	4b23      	ldr	r3, [pc, #140]	@ (80041ac <HAL_RCC_GetSysClockFreq+0x114>)
 800411e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	2b0c      	cmp	r3, #12
 8004124:	d134      	bne.n	8004190 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004126:	4b1e      	ldr	r3, [pc, #120]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b02      	cmp	r3, #2
 8004134:	d003      	beq.n	800413e <HAL_RCC_GetSysClockFreq+0xa6>
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b03      	cmp	r3, #3
 800413a:	d003      	beq.n	8004144 <HAL_RCC_GetSysClockFreq+0xac>
 800413c:	e005      	b.n	800414a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800413e:	4b1a      	ldr	r3, [pc, #104]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004140:	617b      	str	r3, [r7, #20]
      break;
 8004142:	e005      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004144:	4b19      	ldr	r3, [pc, #100]	@ (80041ac <HAL_RCC_GetSysClockFreq+0x114>)
 8004146:	617b      	str	r3, [r7, #20]
      break;
 8004148:	e002      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	617b      	str	r3, [r7, #20]
      break;
 800414e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004150:	4b13      	ldr	r3, [pc, #76]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	091b      	lsrs	r3, r3, #4
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	3301      	adds	r3, #1
 800415c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800415e:	4b10      	ldr	r3, [pc, #64]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	0a1b      	lsrs	r3, r3, #8
 8004164:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	fb03 f202 	mul.w	r2, r3, r2
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	fbb2 f3f3 	udiv	r3, r2, r3
 8004174:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004176:	4b0a      	ldr	r3, [pc, #40]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	0e5b      	lsrs	r3, r3, #25
 800417c:	f003 0303 	and.w	r3, r3, #3
 8004180:	3301      	adds	r3, #1
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	fbb2 f3f3 	udiv	r3, r2, r3
 800418e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004190:	69bb      	ldr	r3, [r7, #24]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3724      	adds	r7, #36	@ 0x24
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	40021000 	.word	0x40021000
 80041a4:	08006d6c 	.word	0x08006d6c
 80041a8:	00f42400 	.word	0x00f42400
 80041ac:	007a1200 	.word	0x007a1200

080041b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041b4:	4b03      	ldr	r3, [pc, #12]	@ (80041c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80041b6:	681b      	ldr	r3, [r3, #0]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	20000014 	.word	0x20000014

080041c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80041cc:	f7ff fff0 	bl	80041b0 <HAL_RCC_GetHCLKFreq>
 80041d0:	4602      	mov	r2, r0
 80041d2:	4b06      	ldr	r3, [pc, #24]	@ (80041ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	0a1b      	lsrs	r3, r3, #8
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	4904      	ldr	r1, [pc, #16]	@ (80041f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041de:	5ccb      	ldrb	r3, [r1, r3]
 80041e0:	f003 031f 	and.w	r3, r3, #31
 80041e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40021000 	.word	0x40021000
 80041f0:	08006d64 	.word	0x08006d64

080041f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80041f8:	f7ff ffda 	bl	80041b0 <HAL_RCC_GetHCLKFreq>
 80041fc:	4602      	mov	r2, r0
 80041fe:	4b06      	ldr	r3, [pc, #24]	@ (8004218 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	0adb      	lsrs	r3, r3, #11
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	4904      	ldr	r1, [pc, #16]	@ (800421c <HAL_RCC_GetPCLK2Freq+0x28>)
 800420a:	5ccb      	ldrb	r3, [r1, r3]
 800420c:	f003 031f 	and.w	r3, r3, #31
 8004210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004214:	4618      	mov	r0, r3
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40021000 	.word	0x40021000
 800421c:	08006d64 	.word	0x08006d64

08004220 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004228:	2300      	movs	r3, #0
 800422a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800422c:	4b2a      	ldr	r3, [pc, #168]	@ (80042d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800422e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004230:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004238:	f7ff f9ee 	bl	8003618 <HAL_PWREx_GetVoltageRange>
 800423c:	6178      	str	r0, [r7, #20]
 800423e:	e014      	b.n	800426a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004240:	4b25      	ldr	r3, [pc, #148]	@ (80042d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004244:	4a24      	ldr	r2, [pc, #144]	@ (80042d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004246:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800424a:	6593      	str	r3, [r2, #88]	@ 0x58
 800424c:	4b22      	ldr	r3, [pc, #136]	@ (80042d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800424e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004250:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004258:	f7ff f9de 	bl	8003618 <HAL_PWREx_GetVoltageRange>
 800425c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800425e:	4b1e      	ldr	r3, [pc, #120]	@ (80042d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004262:	4a1d      	ldr	r2, [pc, #116]	@ (80042d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004264:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004268:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004270:	d10b      	bne.n	800428a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b80      	cmp	r3, #128	@ 0x80
 8004276:	d919      	bls.n	80042ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2ba0      	cmp	r3, #160	@ 0xa0
 800427c:	d902      	bls.n	8004284 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800427e:	2302      	movs	r3, #2
 8004280:	613b      	str	r3, [r7, #16]
 8004282:	e013      	b.n	80042ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004284:	2301      	movs	r3, #1
 8004286:	613b      	str	r3, [r7, #16]
 8004288:	e010      	b.n	80042ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b80      	cmp	r3, #128	@ 0x80
 800428e:	d902      	bls.n	8004296 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004290:	2303      	movs	r3, #3
 8004292:	613b      	str	r3, [r7, #16]
 8004294:	e00a      	b.n	80042ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b80      	cmp	r3, #128	@ 0x80
 800429a:	d102      	bne.n	80042a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800429c:	2302      	movs	r3, #2
 800429e:	613b      	str	r3, [r7, #16]
 80042a0:	e004      	b.n	80042ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b70      	cmp	r3, #112	@ 0x70
 80042a6:	d101      	bne.n	80042ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042a8:	2301      	movs	r3, #1
 80042aa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042ac:	4b0b      	ldr	r3, [pc, #44]	@ (80042dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f023 0207 	bic.w	r2, r3, #7
 80042b4:	4909      	ldr	r1, [pc, #36]	@ (80042dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80042bc:	4b07      	ldr	r3, [pc, #28]	@ (80042dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d001      	beq.n	80042ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40021000 	.word	0x40021000
 80042dc:	40022000 	.word	0x40022000

080042e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042e8:	2300      	movs	r3, #0
 80042ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042ec:	2300      	movs	r3, #0
 80042ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d041      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004300:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004304:	d02a      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004306:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800430a:	d824      	bhi.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800430c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004310:	d008      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004312:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004316:	d81e      	bhi.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800431c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004320:	d010      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004322:	e018      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004324:	4b86      	ldr	r3, [pc, #536]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	4a85      	ldr	r2, [pc, #532]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800432a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800432e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004330:	e015      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3304      	adds	r3, #4
 8004336:	2100      	movs	r1, #0
 8004338:	4618      	mov	r0, r3
 800433a:	f000 fabb 	bl	80048b4 <RCCEx_PLLSAI1_Config>
 800433e:	4603      	mov	r3, r0
 8004340:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004342:	e00c      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3320      	adds	r3, #32
 8004348:	2100      	movs	r1, #0
 800434a:	4618      	mov	r0, r3
 800434c:	f000 fba6 	bl	8004a9c <RCCEx_PLLSAI2_Config>
 8004350:	4603      	mov	r3, r0
 8004352:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004354:	e003      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	74fb      	strb	r3, [r7, #19]
      break;
 800435a:	e000      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800435c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800435e:	7cfb      	ldrb	r3, [r7, #19]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10b      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004364:	4b76      	ldr	r3, [pc, #472]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800436a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004372:	4973      	ldr	r1, [pc, #460]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004374:	4313      	orrs	r3, r2
 8004376:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800437a:	e001      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437c:	7cfb      	ldrb	r3, [r7, #19]
 800437e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d041      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004390:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004394:	d02a      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004396:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800439a:	d824      	bhi.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800439c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043a0:	d008      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80043a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043a6:	d81e      	bhi.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00a      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80043ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043b0:	d010      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80043b2:	e018      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043b4:	4b62      	ldr	r3, [pc, #392]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	4a61      	ldr	r2, [pc, #388]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043be:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043c0:	e015      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3304      	adds	r3, #4
 80043c6:	2100      	movs	r1, #0
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 fa73 	bl	80048b4 <RCCEx_PLLSAI1_Config>
 80043ce:	4603      	mov	r3, r0
 80043d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043d2:	e00c      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3320      	adds	r3, #32
 80043d8:	2100      	movs	r1, #0
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fb5e 	bl	8004a9c <RCCEx_PLLSAI2_Config>
 80043e0:	4603      	mov	r3, r0
 80043e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043e4:	e003      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	74fb      	strb	r3, [r7, #19]
      break;
 80043ea:	e000      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80043ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043ee:	7cfb      	ldrb	r3, [r7, #19]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10b      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043f4:	4b52      	ldr	r3, [pc, #328]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043fa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004402:	494f      	ldr	r1, [pc, #316]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004404:	4313      	orrs	r3, r2
 8004406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800440a:	e001      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800440c:	7cfb      	ldrb	r3, [r7, #19]
 800440e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 80a0 	beq.w	800455e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800441e:	2300      	movs	r3, #0
 8004420:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004422:	4b47      	ldr	r3, [pc, #284]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004432:	2300      	movs	r3, #0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00d      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004438:	4b41      	ldr	r3, [pc, #260]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800443a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800443c:	4a40      	ldr	r2, [pc, #256]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800443e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004442:	6593      	str	r3, [r2, #88]	@ 0x58
 8004444:	4b3e      	ldr	r3, [pc, #248]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004448:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800444c:	60bb      	str	r3, [r7, #8]
 800444e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004450:	2301      	movs	r3, #1
 8004452:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004454:	4b3b      	ldr	r3, [pc, #236]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a3a      	ldr	r2, [pc, #232]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800445a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800445e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004460:	f7fd f818 	bl	8001494 <HAL_GetTick>
 8004464:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004466:	e009      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004468:	f7fd f814 	bl	8001494 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d902      	bls.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	74fb      	strb	r3, [r7, #19]
        break;
 800447a:	e005      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800447c:	4b31      	ldr	r3, [pc, #196]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004484:	2b00      	cmp	r3, #0
 8004486:	d0ef      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004488:	7cfb      	ldrb	r3, [r7, #19]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d15c      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800448e:	4b2c      	ldr	r3, [pc, #176]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004494:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004498:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d01f      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d019      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044ac:	4b24      	ldr	r3, [pc, #144]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044b8:	4b21      	ldr	r3, [pc, #132]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044be:	4a20      	ldr	r2, [pc, #128]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ce:	4a1c      	ldr	r2, [pc, #112]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044d8:	4a19      	ldr	r2, [pc, #100]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d016      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ea:	f7fc ffd3 	bl	8001494 <HAL_GetTick>
 80044ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044f0:	e00b      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044f2:	f7fc ffcf 	bl	8001494 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004500:	4293      	cmp	r3, r2
 8004502:	d902      	bls.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	74fb      	strb	r3, [r7, #19]
            break;
 8004508:	e006      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800450a:	4b0d      	ldr	r3, [pc, #52]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800450c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0ec      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004518:	7cfb      	ldrb	r3, [r7, #19]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10c      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800451e:	4b08      	ldr	r3, [pc, #32]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004524:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800452e:	4904      	ldr	r1, [pc, #16]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004530:	4313      	orrs	r3, r2
 8004532:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004536:	e009      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004538:	7cfb      	ldrb	r3, [r7, #19]
 800453a:	74bb      	strb	r3, [r7, #18]
 800453c:	e006      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800453e:	bf00      	nop
 8004540:	40021000 	.word	0x40021000
 8004544:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004548:	7cfb      	ldrb	r3, [r7, #19]
 800454a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800454c:	7c7b      	ldrb	r3, [r7, #17]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d105      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004552:	4b9e      	ldr	r3, [pc, #632]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004556:	4a9d      	ldr	r2, [pc, #628]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004558:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800455c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00a      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800456a:	4b98      	ldr	r3, [pc, #608]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800456c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004570:	f023 0203 	bic.w	r2, r3, #3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004578:	4994      	ldr	r1, [pc, #592]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00a      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800458c:	4b8f      	ldr	r3, [pc, #572]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800458e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004592:	f023 020c 	bic.w	r2, r3, #12
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800459a:	498c      	ldr	r1, [pc, #560]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800459c:	4313      	orrs	r3, r2
 800459e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0304 	and.w	r3, r3, #4
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045ae:	4b87      	ldr	r3, [pc, #540]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045bc:	4983      	ldr	r1, [pc, #524]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00a      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045d0:	4b7e      	ldr	r3, [pc, #504]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045de:	497b      	ldr	r1, [pc, #492]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0310 	and.w	r3, r3, #16
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00a      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045f2:	4b76      	ldr	r3, [pc, #472]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004600:	4972      	ldr	r1, [pc, #456]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004602:	4313      	orrs	r3, r2
 8004604:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0320 	and.w	r3, r3, #32
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00a      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004614:	4b6d      	ldr	r3, [pc, #436]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800461a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004622:	496a      	ldr	r1, [pc, #424]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004636:	4b65      	ldr	r3, [pc, #404]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800463c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004644:	4961      	ldr	r1, [pc, #388]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004658:	4b5c      	ldr	r3, [pc, #368]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800465a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800465e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004666:	4959      	ldr	r1, [pc, #356]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004668:	4313      	orrs	r3, r2
 800466a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800467a:	4b54      	ldr	r3, [pc, #336]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800467c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004680:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004688:	4950      	ldr	r1, [pc, #320]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800469c:	4b4b      	ldr	r3, [pc, #300]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800469e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046aa:	4948      	ldr	r1, [pc, #288]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046be:	4b43      	ldr	r3, [pc, #268]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046cc:	493f      	ldr	r1, [pc, #252]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d028      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046e0:	4b3a      	ldr	r3, [pc, #232]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046ee:	4937      	ldr	r1, [pc, #220]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046fe:	d106      	bne.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004700:	4b32      	ldr	r3, [pc, #200]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	4a31      	ldr	r2, [pc, #196]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004706:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800470a:	60d3      	str	r3, [r2, #12]
 800470c:	e011      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004712:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004716:	d10c      	bne.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3304      	adds	r3, #4
 800471c:	2101      	movs	r1, #1
 800471e:	4618      	mov	r0, r3
 8004720:	f000 f8c8 	bl	80048b4 <RCCEx_PLLSAI1_Config>
 8004724:	4603      	mov	r3, r0
 8004726:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004728:	7cfb      	ldrb	r3, [r7, #19]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800472e:	7cfb      	ldrb	r3, [r7, #19]
 8004730:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d028      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800473e:	4b23      	ldr	r3, [pc, #140]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004744:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800474c:	491f      	ldr	r1, [pc, #124]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800474e:	4313      	orrs	r3, r2
 8004750:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004758:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800475c:	d106      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800475e:	4b1b      	ldr	r3, [pc, #108]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	4a1a      	ldr	r2, [pc, #104]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004764:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004768:	60d3      	str	r3, [r2, #12]
 800476a:	e011      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004770:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004774:	d10c      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	3304      	adds	r3, #4
 800477a:	2101      	movs	r1, #1
 800477c:	4618      	mov	r0, r3
 800477e:	f000 f899 	bl	80048b4 <RCCEx_PLLSAI1_Config>
 8004782:	4603      	mov	r3, r0
 8004784:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004786:	7cfb      	ldrb	r3, [r7, #19]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800478c:	7cfb      	ldrb	r3, [r7, #19]
 800478e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d02b      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800479c:	4b0b      	ldr	r3, [pc, #44]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047aa:	4908      	ldr	r1, [pc, #32]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047ba:	d109      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047bc:	4b03      	ldr	r3, [pc, #12]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	4a02      	ldr	r2, [pc, #8]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047c6:	60d3      	str	r3, [r2, #12]
 80047c8:	e014      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80047ca:	bf00      	nop
 80047cc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80047d8:	d10c      	bne.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	3304      	adds	r3, #4
 80047de:	2101      	movs	r1, #1
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 f867 	bl	80048b4 <RCCEx_PLLSAI1_Config>
 80047e6:	4603      	mov	r3, r0
 80047e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047ea:	7cfb      	ldrb	r3, [r7, #19]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80047f0:	7cfb      	ldrb	r3, [r7, #19]
 80047f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d02f      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004800:	4b2b      	ldr	r3, [pc, #172]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004806:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800480e:	4928      	ldr	r1, [pc, #160]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800481a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800481e:	d10d      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3304      	adds	r3, #4
 8004824:	2102      	movs	r1, #2
 8004826:	4618      	mov	r0, r3
 8004828:	f000 f844 	bl	80048b4 <RCCEx_PLLSAI1_Config>
 800482c:	4603      	mov	r3, r0
 800482e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004830:	7cfb      	ldrb	r3, [r7, #19]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d014      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004836:	7cfb      	ldrb	r3, [r7, #19]
 8004838:	74bb      	strb	r3, [r7, #18]
 800483a:	e011      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004840:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004844:	d10c      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3320      	adds	r3, #32
 800484a:	2102      	movs	r1, #2
 800484c:	4618      	mov	r0, r3
 800484e:	f000 f925 	bl	8004a9c <RCCEx_PLLSAI2_Config>
 8004852:	4603      	mov	r3, r0
 8004854:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004856:	7cfb      	ldrb	r3, [r7, #19]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800485c:	7cfb      	ldrb	r3, [r7, #19]
 800485e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00a      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800486c:	4b10      	ldr	r3, [pc, #64]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800486e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004872:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800487a:	490d      	ldr	r1, [pc, #52]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00b      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800488e:	4b08      	ldr	r3, [pc, #32]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004894:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800489e:	4904      	ldr	r1, [pc, #16]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3718      	adds	r7, #24
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40021000 	.word	0x40021000

080048b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048c2:	4b75      	ldr	r3, [pc, #468]	@ (8004a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d018      	beq.n	8004900 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80048ce:	4b72      	ldr	r3, [pc, #456]	@ (8004a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f003 0203 	and.w	r2, r3, #3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d10d      	bne.n	80048fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
       ||
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d009      	beq.n	80048fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80048e6:	4b6c      	ldr	r3, [pc, #432]	@ (8004a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	091b      	lsrs	r3, r3, #4
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
       ||
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d047      	beq.n	800498a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	73fb      	strb	r3, [r7, #15]
 80048fe:	e044      	b.n	800498a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b03      	cmp	r3, #3
 8004906:	d018      	beq.n	800493a <RCCEx_PLLSAI1_Config+0x86>
 8004908:	2b03      	cmp	r3, #3
 800490a:	d825      	bhi.n	8004958 <RCCEx_PLLSAI1_Config+0xa4>
 800490c:	2b01      	cmp	r3, #1
 800490e:	d002      	beq.n	8004916 <RCCEx_PLLSAI1_Config+0x62>
 8004910:	2b02      	cmp	r3, #2
 8004912:	d009      	beq.n	8004928 <RCCEx_PLLSAI1_Config+0x74>
 8004914:	e020      	b.n	8004958 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004916:	4b60      	ldr	r3, [pc, #384]	@ (8004a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d11d      	bne.n	800495e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004926:	e01a      	b.n	800495e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004928:	4b5b      	ldr	r3, [pc, #364]	@ (8004a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004930:	2b00      	cmp	r3, #0
 8004932:	d116      	bne.n	8004962 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004938:	e013      	b.n	8004962 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800493a:	4b57      	ldr	r3, [pc, #348]	@ (8004a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10f      	bne.n	8004966 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004946:	4b54      	ldr	r3, [pc, #336]	@ (8004a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d109      	bne.n	8004966 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004956:	e006      	b.n	8004966 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	73fb      	strb	r3, [r7, #15]
      break;
 800495c:	e004      	b.n	8004968 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800495e:	bf00      	nop
 8004960:	e002      	b.n	8004968 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004962:	bf00      	nop
 8004964:	e000      	b.n	8004968 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004966:	bf00      	nop
    }

    if(status == HAL_OK)
 8004968:	7bfb      	ldrb	r3, [r7, #15]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10d      	bne.n	800498a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800496e:	4b4a      	ldr	r3, [pc, #296]	@ (8004a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6819      	ldr	r1, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	3b01      	subs	r3, #1
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	430b      	orrs	r3, r1
 8004984:	4944      	ldr	r1, [pc, #272]	@ (8004a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004986:	4313      	orrs	r3, r2
 8004988:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800498a:	7bfb      	ldrb	r3, [r7, #15]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d17d      	bne.n	8004a8c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004990:	4b41      	ldr	r3, [pc, #260]	@ (8004a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a40      	ldr	r2, [pc, #256]	@ (8004a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004996:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800499a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800499c:	f7fc fd7a 	bl	8001494 <HAL_GetTick>
 80049a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049a2:	e009      	b.n	80049b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049a4:	f7fc fd76 	bl	8001494 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d902      	bls.n	80049b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	73fb      	strb	r3, [r7, #15]
        break;
 80049b6:	e005      	b.n	80049c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049b8:	4b37      	ldr	r3, [pc, #220]	@ (8004a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1ef      	bne.n	80049a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d160      	bne.n	8004a8c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d111      	bne.n	80049f4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049d0:	4b31      	ldr	r3, [pc, #196]	@ (8004a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80049d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6892      	ldr	r2, [r2, #8]
 80049e0:	0211      	lsls	r1, r2, #8
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	68d2      	ldr	r2, [r2, #12]
 80049e6:	0912      	lsrs	r2, r2, #4
 80049e8:	0452      	lsls	r2, r2, #17
 80049ea:	430a      	orrs	r2, r1
 80049ec:	492a      	ldr	r1, [pc, #168]	@ (8004a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	610b      	str	r3, [r1, #16]
 80049f2:	e027      	b.n	8004a44 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d112      	bne.n	8004a20 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049fa:	4b27      	ldr	r3, [pc, #156]	@ (8004a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004a02:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6892      	ldr	r2, [r2, #8]
 8004a0a:	0211      	lsls	r1, r2, #8
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	6912      	ldr	r2, [r2, #16]
 8004a10:	0852      	lsrs	r2, r2, #1
 8004a12:	3a01      	subs	r2, #1
 8004a14:	0552      	lsls	r2, r2, #21
 8004a16:	430a      	orrs	r2, r1
 8004a18:	491f      	ldr	r1, [pc, #124]	@ (8004a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	610b      	str	r3, [r1, #16]
 8004a1e:	e011      	b.n	8004a44 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a20:	4b1d      	ldr	r3, [pc, #116]	@ (8004a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004a28:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6892      	ldr	r2, [r2, #8]
 8004a30:	0211      	lsls	r1, r2, #8
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6952      	ldr	r2, [r2, #20]
 8004a36:	0852      	lsrs	r2, r2, #1
 8004a38:	3a01      	subs	r2, #1
 8004a3a:	0652      	lsls	r2, r2, #25
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	4916      	ldr	r1, [pc, #88]	@ (8004a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a44:	4b14      	ldr	r3, [pc, #80]	@ (8004a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a13      	ldr	r2, [pc, #76]	@ (8004a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a4a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a50:	f7fc fd20 	bl	8001494 <HAL_GetTick>
 8004a54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a56:	e009      	b.n	8004a6c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a58:	f7fc fd1c 	bl	8001494 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d902      	bls.n	8004a6c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	73fb      	strb	r3, [r7, #15]
          break;
 8004a6a:	e005      	b.n	8004a78 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0ef      	beq.n	8004a58 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d106      	bne.n	8004a8c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a7e:	4b06      	ldr	r3, [pc, #24]	@ (8004a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a80:	691a      	ldr	r2, [r3, #16]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	4904      	ldr	r1, [pc, #16]	@ (8004a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	40021000 	.word	0x40021000

08004a9c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004aaa:	4b6a      	ldr	r3, [pc, #424]	@ (8004c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d018      	beq.n	8004ae8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004ab6:	4b67      	ldr	r3, [pc, #412]	@ (8004c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f003 0203 	and.w	r2, r3, #3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d10d      	bne.n	8004ae2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
       ||
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d009      	beq.n	8004ae2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004ace:	4b61      	ldr	r3, [pc, #388]	@ (8004c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	091b      	lsrs	r3, r3, #4
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
       ||
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d047      	beq.n	8004b72 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	73fb      	strb	r3, [r7, #15]
 8004ae6:	e044      	b.n	8004b72 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b03      	cmp	r3, #3
 8004aee:	d018      	beq.n	8004b22 <RCCEx_PLLSAI2_Config+0x86>
 8004af0:	2b03      	cmp	r3, #3
 8004af2:	d825      	bhi.n	8004b40 <RCCEx_PLLSAI2_Config+0xa4>
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d002      	beq.n	8004afe <RCCEx_PLLSAI2_Config+0x62>
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d009      	beq.n	8004b10 <RCCEx_PLLSAI2_Config+0x74>
 8004afc:	e020      	b.n	8004b40 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004afe:	4b55      	ldr	r3, [pc, #340]	@ (8004c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d11d      	bne.n	8004b46 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b0e:	e01a      	b.n	8004b46 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b10:	4b50      	ldr	r3, [pc, #320]	@ (8004c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d116      	bne.n	8004b4a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b20:	e013      	b.n	8004b4a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b22:	4b4c      	ldr	r3, [pc, #304]	@ (8004c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10f      	bne.n	8004b4e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b2e:	4b49      	ldr	r3, [pc, #292]	@ (8004c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d109      	bne.n	8004b4e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b3e:	e006      	b.n	8004b4e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	73fb      	strb	r3, [r7, #15]
      break;
 8004b44:	e004      	b.n	8004b50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b46:	bf00      	nop
 8004b48:	e002      	b.n	8004b50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b4a:	bf00      	nop
 8004b4c:	e000      	b.n	8004b50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10d      	bne.n	8004b72 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b56:	4b3f      	ldr	r3, [pc, #252]	@ (8004c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6819      	ldr	r1, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	011b      	lsls	r3, r3, #4
 8004b6a:	430b      	orrs	r3, r1
 8004b6c:	4939      	ldr	r1, [pc, #228]	@ (8004c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b72:	7bfb      	ldrb	r3, [r7, #15]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d167      	bne.n	8004c48 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004b78:	4b36      	ldr	r3, [pc, #216]	@ (8004c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a35      	ldr	r2, [pc, #212]	@ (8004c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b84:	f7fc fc86 	bl	8001494 <HAL_GetTick>
 8004b88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b8a:	e009      	b.n	8004ba0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b8c:	f7fc fc82 	bl	8001494 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d902      	bls.n	8004ba0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	73fb      	strb	r3, [r7, #15]
        break;
 8004b9e:	e005      	b.n	8004bac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ba0:	4b2c      	ldr	r3, [pc, #176]	@ (8004c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1ef      	bne.n	8004b8c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d14a      	bne.n	8004c48 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d111      	bne.n	8004bdc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bb8:	4b26      	ldr	r3, [pc, #152]	@ (8004c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004bc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6892      	ldr	r2, [r2, #8]
 8004bc8:	0211      	lsls	r1, r2, #8
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	68d2      	ldr	r2, [r2, #12]
 8004bce:	0912      	lsrs	r2, r2, #4
 8004bd0:	0452      	lsls	r2, r2, #17
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	491f      	ldr	r1, [pc, #124]	@ (8004c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	614b      	str	r3, [r1, #20]
 8004bda:	e011      	b.n	8004c00 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8004c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004be4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6892      	ldr	r2, [r2, #8]
 8004bec:	0211      	lsls	r1, r2, #8
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	6912      	ldr	r2, [r2, #16]
 8004bf2:	0852      	lsrs	r2, r2, #1
 8004bf4:	3a01      	subs	r2, #1
 8004bf6:	0652      	lsls	r2, r2, #25
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	4916      	ldr	r1, [pc, #88]	@ (8004c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004c00:	4b14      	ldr	r3, [pc, #80]	@ (8004c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a13      	ldr	r2, [pc, #76]	@ (8004c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c0c:	f7fc fc42 	bl	8001494 <HAL_GetTick>
 8004c10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c12:	e009      	b.n	8004c28 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c14:	f7fc fc3e 	bl	8001494 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d902      	bls.n	8004c28 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	73fb      	strb	r3, [r7, #15]
          break;
 8004c26:	e005      	b.n	8004c34 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c28:	4b0a      	ldr	r3, [pc, #40]	@ (8004c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0ef      	beq.n	8004c14 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d106      	bne.n	8004c48 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c3a:	4b06      	ldr	r3, [pc, #24]	@ (8004c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c3c:	695a      	ldr	r2, [r3, #20]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	4904      	ldr	r1, [pc, #16]	@ (8004c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	40021000 	.word	0x40021000

08004c58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e040      	b.n	8004cec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d106      	bne.n	8004c80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7fc fa28 	bl	80010d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2224      	movs	r2, #36	@ 0x24
 8004c84:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0201 	bic.w	r2, r2, #1
 8004c94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d002      	beq.n	8004ca4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fb6a 	bl	8005378 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f8af 	bl	8004e08 <UART_SetConfig>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e01b      	b.n	8004cec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0201 	orr.w	r2, r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 fbe9 	bl	80054bc <UART_CheckIdleState>
 8004cea:	4603      	mov	r3, r0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b08a      	sub	sp, #40	@ 0x28
 8004cf8:	af02      	add	r7, sp, #8
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	603b      	str	r3, [r7, #0]
 8004d00:	4613      	mov	r3, r2
 8004d02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d08:	2b20      	cmp	r3, #32
 8004d0a:	d177      	bne.n	8004dfc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d002      	beq.n	8004d18 <HAL_UART_Transmit+0x24>
 8004d12:	88fb      	ldrh	r3, [r7, #6]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e070      	b.n	8004dfe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2221      	movs	r2, #33	@ 0x21
 8004d28:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d2a:	f7fc fbb3 	bl	8001494 <HAL_GetTick>
 8004d2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	88fa      	ldrh	r2, [r7, #6]
 8004d34:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	88fa      	ldrh	r2, [r7, #6]
 8004d3c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d48:	d108      	bne.n	8004d5c <HAL_UART_Transmit+0x68>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d104      	bne.n	8004d5c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004d52:	2300      	movs	r3, #0
 8004d54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	61bb      	str	r3, [r7, #24]
 8004d5a:	e003      	b.n	8004d64 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d64:	e02f      	b.n	8004dc6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	2180      	movs	r1, #128	@ 0x80
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 fc4b 	bl	800560c <UART_WaitOnFlagUntilTimeout>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d004      	beq.n	8004d86 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e03b      	b.n	8004dfe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10b      	bne.n	8004da4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	881a      	ldrh	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d98:	b292      	uxth	r2, r2
 8004d9a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	3302      	adds	r3, #2
 8004da0:	61bb      	str	r3, [r7, #24]
 8004da2:	e007      	b.n	8004db4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	781a      	ldrb	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	3301      	adds	r3, #1
 8004db2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1c9      	bne.n	8004d66 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	2140      	movs	r1, #64	@ 0x40
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 fc15 	bl	800560c <UART_WaitOnFlagUntilTimeout>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d004      	beq.n	8004df2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2220      	movs	r2, #32
 8004dec:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e005      	b.n	8004dfe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2220      	movs	r2, #32
 8004df6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	e000      	b.n	8004dfe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004dfc:	2302      	movs	r3, #2
  }
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3720      	adds	r7, #32
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
	...

08004e08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e0c:	b08a      	sub	sp, #40	@ 0x28
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	431a      	orrs	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	431a      	orrs	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	69db      	ldr	r3, [r3, #28]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	4ba4      	ldr	r3, [pc, #656]	@ (80050c8 <UART_SetConfig+0x2c0>)
 8004e38:	4013      	ands	r3, r2
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	6812      	ldr	r2, [r2, #0]
 8004e3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e40:	430b      	orrs	r3, r1
 8004e42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a99      	ldr	r2, [pc, #612]	@ (80050cc <UART_SetConfig+0x2c4>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d004      	beq.n	8004e74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e70:	4313      	orrs	r3, r2
 8004e72:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e84:	430a      	orrs	r2, r1
 8004e86:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a90      	ldr	r2, [pc, #576]	@ (80050d0 <UART_SetConfig+0x2c8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d126      	bne.n	8004ee0 <UART_SetConfig+0xd8>
 8004e92:	4b90      	ldr	r3, [pc, #576]	@ (80050d4 <UART_SetConfig+0x2cc>)
 8004e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e98:	f003 0303 	and.w	r3, r3, #3
 8004e9c:	2b03      	cmp	r3, #3
 8004e9e:	d81b      	bhi.n	8004ed8 <UART_SetConfig+0xd0>
 8004ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ea8 <UART_SetConfig+0xa0>)
 8004ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea6:	bf00      	nop
 8004ea8:	08004eb9 	.word	0x08004eb9
 8004eac:	08004ec9 	.word	0x08004ec9
 8004eb0:	08004ec1 	.word	0x08004ec1
 8004eb4:	08004ed1 	.word	0x08004ed1
 8004eb8:	2301      	movs	r3, #1
 8004eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ebe:	e116      	b.n	80050ee <UART_SetConfig+0x2e6>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ec6:	e112      	b.n	80050ee <UART_SetConfig+0x2e6>
 8004ec8:	2304      	movs	r3, #4
 8004eca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ece:	e10e      	b.n	80050ee <UART_SetConfig+0x2e6>
 8004ed0:	2308      	movs	r3, #8
 8004ed2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ed6:	e10a      	b.n	80050ee <UART_SetConfig+0x2e6>
 8004ed8:	2310      	movs	r3, #16
 8004eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ede:	e106      	b.n	80050ee <UART_SetConfig+0x2e6>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a7c      	ldr	r2, [pc, #496]	@ (80050d8 <UART_SetConfig+0x2d0>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d138      	bne.n	8004f5c <UART_SetConfig+0x154>
 8004eea:	4b7a      	ldr	r3, [pc, #488]	@ (80050d4 <UART_SetConfig+0x2cc>)
 8004eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ef0:	f003 030c 	and.w	r3, r3, #12
 8004ef4:	2b0c      	cmp	r3, #12
 8004ef6:	d82d      	bhi.n	8004f54 <UART_SetConfig+0x14c>
 8004ef8:	a201      	add	r2, pc, #4	@ (adr r2, 8004f00 <UART_SetConfig+0xf8>)
 8004efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efe:	bf00      	nop
 8004f00:	08004f35 	.word	0x08004f35
 8004f04:	08004f55 	.word	0x08004f55
 8004f08:	08004f55 	.word	0x08004f55
 8004f0c:	08004f55 	.word	0x08004f55
 8004f10:	08004f45 	.word	0x08004f45
 8004f14:	08004f55 	.word	0x08004f55
 8004f18:	08004f55 	.word	0x08004f55
 8004f1c:	08004f55 	.word	0x08004f55
 8004f20:	08004f3d 	.word	0x08004f3d
 8004f24:	08004f55 	.word	0x08004f55
 8004f28:	08004f55 	.word	0x08004f55
 8004f2c:	08004f55 	.word	0x08004f55
 8004f30:	08004f4d 	.word	0x08004f4d
 8004f34:	2300      	movs	r3, #0
 8004f36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f3a:	e0d8      	b.n	80050ee <UART_SetConfig+0x2e6>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f42:	e0d4      	b.n	80050ee <UART_SetConfig+0x2e6>
 8004f44:	2304      	movs	r3, #4
 8004f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f4a:	e0d0      	b.n	80050ee <UART_SetConfig+0x2e6>
 8004f4c:	2308      	movs	r3, #8
 8004f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f52:	e0cc      	b.n	80050ee <UART_SetConfig+0x2e6>
 8004f54:	2310      	movs	r3, #16
 8004f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f5a:	e0c8      	b.n	80050ee <UART_SetConfig+0x2e6>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a5e      	ldr	r2, [pc, #376]	@ (80050dc <UART_SetConfig+0x2d4>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d125      	bne.n	8004fb2 <UART_SetConfig+0x1aa>
 8004f66:	4b5b      	ldr	r3, [pc, #364]	@ (80050d4 <UART_SetConfig+0x2cc>)
 8004f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f6c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f70:	2b30      	cmp	r3, #48	@ 0x30
 8004f72:	d016      	beq.n	8004fa2 <UART_SetConfig+0x19a>
 8004f74:	2b30      	cmp	r3, #48	@ 0x30
 8004f76:	d818      	bhi.n	8004faa <UART_SetConfig+0x1a2>
 8004f78:	2b20      	cmp	r3, #32
 8004f7a:	d00a      	beq.n	8004f92 <UART_SetConfig+0x18a>
 8004f7c:	2b20      	cmp	r3, #32
 8004f7e:	d814      	bhi.n	8004faa <UART_SetConfig+0x1a2>
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <UART_SetConfig+0x182>
 8004f84:	2b10      	cmp	r3, #16
 8004f86:	d008      	beq.n	8004f9a <UART_SetConfig+0x192>
 8004f88:	e00f      	b.n	8004faa <UART_SetConfig+0x1a2>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f90:	e0ad      	b.n	80050ee <UART_SetConfig+0x2e6>
 8004f92:	2302      	movs	r3, #2
 8004f94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f98:	e0a9      	b.n	80050ee <UART_SetConfig+0x2e6>
 8004f9a:	2304      	movs	r3, #4
 8004f9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fa0:	e0a5      	b.n	80050ee <UART_SetConfig+0x2e6>
 8004fa2:	2308      	movs	r3, #8
 8004fa4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fa8:	e0a1      	b.n	80050ee <UART_SetConfig+0x2e6>
 8004faa:	2310      	movs	r3, #16
 8004fac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fb0:	e09d      	b.n	80050ee <UART_SetConfig+0x2e6>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a4a      	ldr	r2, [pc, #296]	@ (80050e0 <UART_SetConfig+0x2d8>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d125      	bne.n	8005008 <UART_SetConfig+0x200>
 8004fbc:	4b45      	ldr	r3, [pc, #276]	@ (80050d4 <UART_SetConfig+0x2cc>)
 8004fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004fc6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fc8:	d016      	beq.n	8004ff8 <UART_SetConfig+0x1f0>
 8004fca:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fcc:	d818      	bhi.n	8005000 <UART_SetConfig+0x1f8>
 8004fce:	2b80      	cmp	r3, #128	@ 0x80
 8004fd0:	d00a      	beq.n	8004fe8 <UART_SetConfig+0x1e0>
 8004fd2:	2b80      	cmp	r3, #128	@ 0x80
 8004fd4:	d814      	bhi.n	8005000 <UART_SetConfig+0x1f8>
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <UART_SetConfig+0x1d8>
 8004fda:	2b40      	cmp	r3, #64	@ 0x40
 8004fdc:	d008      	beq.n	8004ff0 <UART_SetConfig+0x1e8>
 8004fde:	e00f      	b.n	8005000 <UART_SetConfig+0x1f8>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fe6:	e082      	b.n	80050ee <UART_SetConfig+0x2e6>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fee:	e07e      	b.n	80050ee <UART_SetConfig+0x2e6>
 8004ff0:	2304      	movs	r3, #4
 8004ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ff6:	e07a      	b.n	80050ee <UART_SetConfig+0x2e6>
 8004ff8:	2308      	movs	r3, #8
 8004ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ffe:	e076      	b.n	80050ee <UART_SetConfig+0x2e6>
 8005000:	2310      	movs	r3, #16
 8005002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005006:	e072      	b.n	80050ee <UART_SetConfig+0x2e6>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a35      	ldr	r2, [pc, #212]	@ (80050e4 <UART_SetConfig+0x2dc>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d12a      	bne.n	8005068 <UART_SetConfig+0x260>
 8005012:	4b30      	ldr	r3, [pc, #192]	@ (80050d4 <UART_SetConfig+0x2cc>)
 8005014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005018:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800501c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005020:	d01a      	beq.n	8005058 <UART_SetConfig+0x250>
 8005022:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005026:	d81b      	bhi.n	8005060 <UART_SetConfig+0x258>
 8005028:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800502c:	d00c      	beq.n	8005048 <UART_SetConfig+0x240>
 800502e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005032:	d815      	bhi.n	8005060 <UART_SetConfig+0x258>
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <UART_SetConfig+0x238>
 8005038:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800503c:	d008      	beq.n	8005050 <UART_SetConfig+0x248>
 800503e:	e00f      	b.n	8005060 <UART_SetConfig+0x258>
 8005040:	2300      	movs	r3, #0
 8005042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005046:	e052      	b.n	80050ee <UART_SetConfig+0x2e6>
 8005048:	2302      	movs	r3, #2
 800504a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800504e:	e04e      	b.n	80050ee <UART_SetConfig+0x2e6>
 8005050:	2304      	movs	r3, #4
 8005052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005056:	e04a      	b.n	80050ee <UART_SetConfig+0x2e6>
 8005058:	2308      	movs	r3, #8
 800505a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800505e:	e046      	b.n	80050ee <UART_SetConfig+0x2e6>
 8005060:	2310      	movs	r3, #16
 8005062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005066:	e042      	b.n	80050ee <UART_SetConfig+0x2e6>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a17      	ldr	r2, [pc, #92]	@ (80050cc <UART_SetConfig+0x2c4>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d13a      	bne.n	80050e8 <UART_SetConfig+0x2e0>
 8005072:	4b18      	ldr	r3, [pc, #96]	@ (80050d4 <UART_SetConfig+0x2cc>)
 8005074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005078:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800507c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005080:	d01a      	beq.n	80050b8 <UART_SetConfig+0x2b0>
 8005082:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005086:	d81b      	bhi.n	80050c0 <UART_SetConfig+0x2b8>
 8005088:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800508c:	d00c      	beq.n	80050a8 <UART_SetConfig+0x2a0>
 800508e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005092:	d815      	bhi.n	80050c0 <UART_SetConfig+0x2b8>
 8005094:	2b00      	cmp	r3, #0
 8005096:	d003      	beq.n	80050a0 <UART_SetConfig+0x298>
 8005098:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800509c:	d008      	beq.n	80050b0 <UART_SetConfig+0x2a8>
 800509e:	e00f      	b.n	80050c0 <UART_SetConfig+0x2b8>
 80050a0:	2300      	movs	r3, #0
 80050a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050a6:	e022      	b.n	80050ee <UART_SetConfig+0x2e6>
 80050a8:	2302      	movs	r3, #2
 80050aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ae:	e01e      	b.n	80050ee <UART_SetConfig+0x2e6>
 80050b0:	2304      	movs	r3, #4
 80050b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050b6:	e01a      	b.n	80050ee <UART_SetConfig+0x2e6>
 80050b8:	2308      	movs	r3, #8
 80050ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050be:	e016      	b.n	80050ee <UART_SetConfig+0x2e6>
 80050c0:	2310      	movs	r3, #16
 80050c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050c6:	e012      	b.n	80050ee <UART_SetConfig+0x2e6>
 80050c8:	efff69f3 	.word	0xefff69f3
 80050cc:	40008000 	.word	0x40008000
 80050d0:	40013800 	.word	0x40013800
 80050d4:	40021000 	.word	0x40021000
 80050d8:	40004400 	.word	0x40004400
 80050dc:	40004800 	.word	0x40004800
 80050e0:	40004c00 	.word	0x40004c00
 80050e4:	40005000 	.word	0x40005000
 80050e8:	2310      	movs	r3, #16
 80050ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a9f      	ldr	r2, [pc, #636]	@ (8005370 <UART_SetConfig+0x568>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d17a      	bne.n	80051ee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d824      	bhi.n	800514a <UART_SetConfig+0x342>
 8005100:	a201      	add	r2, pc, #4	@ (adr r2, 8005108 <UART_SetConfig+0x300>)
 8005102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005106:	bf00      	nop
 8005108:	0800512d 	.word	0x0800512d
 800510c:	0800514b 	.word	0x0800514b
 8005110:	08005135 	.word	0x08005135
 8005114:	0800514b 	.word	0x0800514b
 8005118:	0800513b 	.word	0x0800513b
 800511c:	0800514b 	.word	0x0800514b
 8005120:	0800514b 	.word	0x0800514b
 8005124:	0800514b 	.word	0x0800514b
 8005128:	08005143 	.word	0x08005143
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800512c:	f7ff f84c 	bl	80041c8 <HAL_RCC_GetPCLK1Freq>
 8005130:	61f8      	str	r0, [r7, #28]
        break;
 8005132:	e010      	b.n	8005156 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005134:	4b8f      	ldr	r3, [pc, #572]	@ (8005374 <UART_SetConfig+0x56c>)
 8005136:	61fb      	str	r3, [r7, #28]
        break;
 8005138:	e00d      	b.n	8005156 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800513a:	f7fe ffad 	bl	8004098 <HAL_RCC_GetSysClockFreq>
 800513e:	61f8      	str	r0, [r7, #28]
        break;
 8005140:	e009      	b.n	8005156 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005142:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005146:	61fb      	str	r3, [r7, #28]
        break;
 8005148:	e005      	b.n	8005156 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800514a:	2300      	movs	r3, #0
 800514c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005154:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 80fb 	beq.w	8005354 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	4613      	mov	r3, r2
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	4413      	add	r3, r2
 8005168:	69fa      	ldr	r2, [r7, #28]
 800516a:	429a      	cmp	r2, r3
 800516c:	d305      	bcc.n	800517a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005174:	69fa      	ldr	r2, [r7, #28]
 8005176:	429a      	cmp	r2, r3
 8005178:	d903      	bls.n	8005182 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005180:	e0e8      	b.n	8005354 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	2200      	movs	r2, #0
 8005186:	461c      	mov	r4, r3
 8005188:	4615      	mov	r5, r2
 800518a:	f04f 0200 	mov.w	r2, #0
 800518e:	f04f 0300 	mov.w	r3, #0
 8005192:	022b      	lsls	r3, r5, #8
 8005194:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005198:	0222      	lsls	r2, r4, #8
 800519a:	68f9      	ldr	r1, [r7, #12]
 800519c:	6849      	ldr	r1, [r1, #4]
 800519e:	0849      	lsrs	r1, r1, #1
 80051a0:	2000      	movs	r0, #0
 80051a2:	4688      	mov	r8, r1
 80051a4:	4681      	mov	r9, r0
 80051a6:	eb12 0a08 	adds.w	sl, r2, r8
 80051aa:	eb43 0b09 	adc.w	fp, r3, r9
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	603b      	str	r3, [r7, #0]
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051bc:	4650      	mov	r0, sl
 80051be:	4659      	mov	r1, fp
 80051c0:	f7fb f85e 	bl	8000280 <__aeabi_uldivmod>
 80051c4:	4602      	mov	r2, r0
 80051c6:	460b      	mov	r3, r1
 80051c8:	4613      	mov	r3, r2
 80051ca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051d2:	d308      	bcc.n	80051e6 <UART_SetConfig+0x3de>
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051da:	d204      	bcs.n	80051e6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	60da      	str	r2, [r3, #12]
 80051e4:	e0b6      	b.n	8005354 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80051ec:	e0b2      	b.n	8005354 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051f6:	d15e      	bne.n	80052b6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80051f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d828      	bhi.n	8005252 <UART_SetConfig+0x44a>
 8005200:	a201      	add	r2, pc, #4	@ (adr r2, 8005208 <UART_SetConfig+0x400>)
 8005202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005206:	bf00      	nop
 8005208:	0800522d 	.word	0x0800522d
 800520c:	08005235 	.word	0x08005235
 8005210:	0800523d 	.word	0x0800523d
 8005214:	08005253 	.word	0x08005253
 8005218:	08005243 	.word	0x08005243
 800521c:	08005253 	.word	0x08005253
 8005220:	08005253 	.word	0x08005253
 8005224:	08005253 	.word	0x08005253
 8005228:	0800524b 	.word	0x0800524b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800522c:	f7fe ffcc 	bl	80041c8 <HAL_RCC_GetPCLK1Freq>
 8005230:	61f8      	str	r0, [r7, #28]
        break;
 8005232:	e014      	b.n	800525e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005234:	f7fe ffde 	bl	80041f4 <HAL_RCC_GetPCLK2Freq>
 8005238:	61f8      	str	r0, [r7, #28]
        break;
 800523a:	e010      	b.n	800525e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800523c:	4b4d      	ldr	r3, [pc, #308]	@ (8005374 <UART_SetConfig+0x56c>)
 800523e:	61fb      	str	r3, [r7, #28]
        break;
 8005240:	e00d      	b.n	800525e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005242:	f7fe ff29 	bl	8004098 <HAL_RCC_GetSysClockFreq>
 8005246:	61f8      	str	r0, [r7, #28]
        break;
 8005248:	e009      	b.n	800525e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800524a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800524e:	61fb      	str	r3, [r7, #28]
        break;
 8005250:	e005      	b.n	800525e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005252:	2300      	movs	r3, #0
 8005254:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800525c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d077      	beq.n	8005354 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	005a      	lsls	r2, r3, #1
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	085b      	lsrs	r3, r3, #1
 800526e:	441a      	add	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	fbb2 f3f3 	udiv	r3, r2, r3
 8005278:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	2b0f      	cmp	r3, #15
 800527e:	d916      	bls.n	80052ae <UART_SetConfig+0x4a6>
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005286:	d212      	bcs.n	80052ae <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	b29b      	uxth	r3, r3
 800528c:	f023 030f 	bic.w	r3, r3, #15
 8005290:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	085b      	lsrs	r3, r3, #1
 8005296:	b29b      	uxth	r3, r3
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	b29a      	uxth	r2, r3
 800529e:	8afb      	ldrh	r3, [r7, #22]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	8afa      	ldrh	r2, [r7, #22]
 80052aa:	60da      	str	r2, [r3, #12]
 80052ac:	e052      	b.n	8005354 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80052b4:	e04e      	b.n	8005354 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80052ba:	2b08      	cmp	r3, #8
 80052bc:	d827      	bhi.n	800530e <UART_SetConfig+0x506>
 80052be:	a201      	add	r2, pc, #4	@ (adr r2, 80052c4 <UART_SetConfig+0x4bc>)
 80052c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c4:	080052e9 	.word	0x080052e9
 80052c8:	080052f1 	.word	0x080052f1
 80052cc:	080052f9 	.word	0x080052f9
 80052d0:	0800530f 	.word	0x0800530f
 80052d4:	080052ff 	.word	0x080052ff
 80052d8:	0800530f 	.word	0x0800530f
 80052dc:	0800530f 	.word	0x0800530f
 80052e0:	0800530f 	.word	0x0800530f
 80052e4:	08005307 	.word	0x08005307
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052e8:	f7fe ff6e 	bl	80041c8 <HAL_RCC_GetPCLK1Freq>
 80052ec:	61f8      	str	r0, [r7, #28]
        break;
 80052ee:	e014      	b.n	800531a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052f0:	f7fe ff80 	bl	80041f4 <HAL_RCC_GetPCLK2Freq>
 80052f4:	61f8      	str	r0, [r7, #28]
        break;
 80052f6:	e010      	b.n	800531a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052f8:	4b1e      	ldr	r3, [pc, #120]	@ (8005374 <UART_SetConfig+0x56c>)
 80052fa:	61fb      	str	r3, [r7, #28]
        break;
 80052fc:	e00d      	b.n	800531a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052fe:	f7fe fecb 	bl	8004098 <HAL_RCC_GetSysClockFreq>
 8005302:	61f8      	str	r0, [r7, #28]
        break;
 8005304:	e009      	b.n	800531a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005306:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800530a:	61fb      	str	r3, [r7, #28]
        break;
 800530c:	e005      	b.n	800531a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005318:	bf00      	nop
    }

    if (pclk != 0U)
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d019      	beq.n	8005354 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	085a      	lsrs	r2, r3, #1
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	441a      	add	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005332:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	2b0f      	cmp	r3, #15
 8005338:	d909      	bls.n	800534e <UART_SetConfig+0x546>
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005340:	d205      	bcs.n	800534e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	b29a      	uxth	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	60da      	str	r2, [r3, #12]
 800534c:	e002      	b.n	8005354 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005360:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005364:	4618      	mov	r0, r3
 8005366:	3728      	adds	r7, #40	@ 0x28
 8005368:	46bd      	mov	sp, r7
 800536a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800536e:	bf00      	nop
 8005370:	40008000 	.word	0x40008000
 8005374:	00f42400 	.word	0x00f42400

08005378 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005384:	f003 0308 	and.w	r3, r3, #8
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00a      	beq.n	80053a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00a      	beq.n	80053c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00a      	beq.n	80053e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ea:	f003 0304 	and.w	r3, r3, #4
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00a      	beq.n	8005408 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540c:	f003 0310 	and.w	r3, r3, #16
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00a      	beq.n	800542a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00a      	beq.n	800544c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005454:	2b00      	cmp	r3, #0
 8005456:	d01a      	beq.n	800548e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005472:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005476:	d10a      	bne.n	800548e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00a      	beq.n	80054b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	605a      	str	r2, [r3, #4]
  }
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b098      	sub	sp, #96	@ 0x60
 80054c0:	af02      	add	r7, sp, #8
 80054c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054cc:	f7fb ffe2 	bl	8001494 <HAL_GetTick>
 80054d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0308 	and.w	r3, r3, #8
 80054dc:	2b08      	cmp	r3, #8
 80054de:	d12e      	bne.n	800553e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054e8:	2200      	movs	r2, #0
 80054ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f88c 	bl	800560c <UART_WaitOnFlagUntilTimeout>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d021      	beq.n	800553e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005502:	e853 3f00 	ldrex	r3, [r3]
 8005506:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800550a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800550e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005518:	647b      	str	r3, [r7, #68]	@ 0x44
 800551a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800551e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005520:	e841 2300 	strex	r3, r2, [r1]
 8005524:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1e6      	bne.n	80054fa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2220      	movs	r2, #32
 8005530:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e062      	b.n	8005604 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b04      	cmp	r3, #4
 800554a:	d149      	bne.n	80055e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800554c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005554:	2200      	movs	r2, #0
 8005556:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f856 	bl	800560c <UART_WaitOnFlagUntilTimeout>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d03c      	beq.n	80055e0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556e:	e853 3f00 	ldrex	r3, [r3]
 8005572:	623b      	str	r3, [r7, #32]
   return(result);
 8005574:	6a3b      	ldr	r3, [r7, #32]
 8005576:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800557a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	461a      	mov	r2, r3
 8005582:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005584:	633b      	str	r3, [r7, #48]	@ 0x30
 8005586:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005588:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800558a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800558c:	e841 2300 	strex	r3, r2, [r1]
 8005590:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1e6      	bne.n	8005566 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	3308      	adds	r3, #8
 800559e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	e853 3f00 	ldrex	r3, [r3]
 80055a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 0301 	bic.w	r3, r3, #1
 80055ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3308      	adds	r3, #8
 80055b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055b8:	61fa      	str	r2, [r7, #28]
 80055ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055bc:	69b9      	ldr	r1, [r7, #24]
 80055be:	69fa      	ldr	r2, [r7, #28]
 80055c0:	e841 2300 	strex	r3, r2, [r1]
 80055c4:	617b      	str	r3, [r7, #20]
   return(result);
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1e5      	bne.n	8005598 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2220      	movs	r2, #32
 80055d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e011      	b.n	8005604 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2220      	movs	r2, #32
 80055e4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2220      	movs	r2, #32
 80055ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3758      	adds	r7, #88	@ 0x58
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	603b      	str	r3, [r7, #0]
 8005618:	4613      	mov	r3, r2
 800561a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800561c:	e04f      	b.n	80056be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005624:	d04b      	beq.n	80056be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005626:	f7fb ff35 	bl	8001494 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	429a      	cmp	r2, r3
 8005634:	d302      	bcc.n	800563c <UART_WaitOnFlagUntilTimeout+0x30>
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d101      	bne.n	8005640 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e04e      	b.n	80056de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	2b00      	cmp	r3, #0
 800564c:	d037      	beq.n	80056be <UART_WaitOnFlagUntilTimeout+0xb2>
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	2b80      	cmp	r3, #128	@ 0x80
 8005652:	d034      	beq.n	80056be <UART_WaitOnFlagUntilTimeout+0xb2>
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2b40      	cmp	r3, #64	@ 0x40
 8005658:	d031      	beq.n	80056be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	f003 0308 	and.w	r3, r3, #8
 8005664:	2b08      	cmp	r3, #8
 8005666:	d110      	bne.n	800568a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2208      	movs	r2, #8
 800566e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 f838 	bl	80056e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2208      	movs	r2, #8
 800567a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e029      	b.n	80056de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005694:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005698:	d111      	bne.n	80056be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 f81e 	bl	80056e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2220      	movs	r2, #32
 80056ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e00f      	b.n	80056de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	69da      	ldr	r2, [r3, #28]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	4013      	ands	r3, r2
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	bf0c      	ite	eq
 80056ce:	2301      	moveq	r3, #1
 80056d0:	2300      	movne	r3, #0
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	461a      	mov	r2, r3
 80056d6:	79fb      	ldrb	r3, [r7, #7]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d0a0      	beq.n	800561e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b095      	sub	sp, #84	@ 0x54
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f6:	e853 3f00 	ldrex	r3, [r3]
 80056fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005702:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	461a      	mov	r2, r3
 800570a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800570c:	643b      	str	r3, [r7, #64]	@ 0x40
 800570e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005710:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005712:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005714:	e841 2300 	strex	r3, r2, [r1]
 8005718:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800571a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1e6      	bne.n	80056ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	3308      	adds	r3, #8
 8005726:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	e853 3f00 	ldrex	r3, [r3]
 800572e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	f023 0301 	bic.w	r3, r3, #1
 8005736:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3308      	adds	r3, #8
 800573e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005740:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005742:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005744:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005746:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005748:	e841 2300 	strex	r3, r2, [r1]
 800574c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800574e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1e5      	bne.n	8005720 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005758:	2b01      	cmp	r3, #1
 800575a:	d118      	bne.n	800578e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	e853 3f00 	ldrex	r3, [r3]
 8005768:	60bb      	str	r3, [r7, #8]
   return(result);
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	f023 0310 	bic.w	r3, r3, #16
 8005770:	647b      	str	r3, [r7, #68]	@ 0x44
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800577a:	61bb      	str	r3, [r7, #24]
 800577c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577e:	6979      	ldr	r1, [r7, #20]
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	e841 2300 	strex	r3, r2, [r1]
 8005786:	613b      	str	r3, [r7, #16]
   return(result);
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1e6      	bne.n	800575c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2220      	movs	r2, #32
 8005792:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80057a2:	bf00      	nop
 80057a4:	3754      	adds	r7, #84	@ 0x54
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80057ae:	b480      	push	{r7}
 80057b0:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80057b2:	bf00      	nop
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af04      	add	r7, sp, #16
 80057c2:	4603      	mov	r3, r0
 80057c4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80057c6:	f04f 33ff 	mov.w	r3, #4294967295
 80057ca:	9302      	str	r3, [sp, #8]
 80057cc:	2301      	movs	r3, #1
 80057ce:	9301      	str	r3, [sp, #4]
 80057d0:	1dfb      	adds	r3, r7, #7
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	2301      	movs	r3, #1
 80057d6:	2200      	movs	r2, #0
 80057d8:	2178      	movs	r1, #120	@ 0x78
 80057da:	4803      	ldr	r0, [pc, #12]	@ (80057e8 <ssd1306_WriteCommand+0x2c>)
 80057dc:	f7fc fd2a 	bl	8002234 <HAL_I2C_Mem_Write>
}
 80057e0:	bf00      	nop
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	2000009c 	.word	0x2000009c

080057ec <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af04      	add	r7, sp, #16
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	f04f 32ff 	mov.w	r2, #4294967295
 80057fe:	9202      	str	r2, [sp, #8]
 8005800:	9301      	str	r3, [sp, #4]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	2301      	movs	r3, #1
 8005808:	2240      	movs	r2, #64	@ 0x40
 800580a:	2178      	movs	r1, #120	@ 0x78
 800580c:	4803      	ldr	r0, [pc, #12]	@ (800581c <ssd1306_WriteData+0x30>)
 800580e:	f7fc fd11 	bl	8002234 <HAL_I2C_Mem_Write>
}
 8005812:	bf00      	nop
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	2000009c 	.word	0x2000009c

08005820 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8005820:	b580      	push	{r7, lr}
 8005822:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8005824:	f7ff ffc3 	bl	80057ae <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8005828:	2064      	movs	r0, #100	@ 0x64
 800582a:	f7fb fe3f 	bl	80014ac <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800582e:	2000      	movs	r0, #0
 8005830:	f000 f9d6 	bl	8005be0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8005834:	2020      	movs	r0, #32
 8005836:	f7ff ffc1 	bl	80057bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800583a:	2000      	movs	r0, #0
 800583c:	f7ff ffbe 	bl	80057bc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005840:	20b0      	movs	r0, #176	@ 0xb0
 8005842:	f7ff ffbb 	bl	80057bc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8005846:	20c8      	movs	r0, #200	@ 0xc8
 8005848:	f7ff ffb8 	bl	80057bc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800584c:	2000      	movs	r0, #0
 800584e:	f7ff ffb5 	bl	80057bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8005852:	2010      	movs	r0, #16
 8005854:	f7ff ffb2 	bl	80057bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8005858:	2040      	movs	r0, #64	@ 0x40
 800585a:	f7ff ffaf 	bl	80057bc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800585e:	20ff      	movs	r0, #255	@ 0xff
 8005860:	f000 f9aa 	bl	8005bb8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8005864:	20a1      	movs	r0, #161	@ 0xa1
 8005866:	f7ff ffa9 	bl	80057bc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800586a:	20a6      	movs	r0, #166	@ 0xa6
 800586c:	f7ff ffa6 	bl	80057bc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8005870:	20a8      	movs	r0, #168	@ 0xa8
 8005872:	f7ff ffa3 	bl	80057bc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8005876:	203f      	movs	r0, #63	@ 0x3f
 8005878:	f7ff ffa0 	bl	80057bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800587c:	20a4      	movs	r0, #164	@ 0xa4
 800587e:	f7ff ff9d 	bl	80057bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8005882:	20d3      	movs	r0, #211	@ 0xd3
 8005884:	f7ff ff9a 	bl	80057bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8005888:	2000      	movs	r0, #0
 800588a:	f7ff ff97 	bl	80057bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800588e:	20d5      	movs	r0, #213	@ 0xd5
 8005890:	f7ff ff94 	bl	80057bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8005894:	20f0      	movs	r0, #240	@ 0xf0
 8005896:	f7ff ff91 	bl	80057bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800589a:	20d9      	movs	r0, #217	@ 0xd9
 800589c:	f7ff ff8e 	bl	80057bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80058a0:	2022      	movs	r0, #34	@ 0x22
 80058a2:	f7ff ff8b 	bl	80057bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80058a6:	20da      	movs	r0, #218	@ 0xda
 80058a8:	f7ff ff88 	bl	80057bc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80058ac:	2012      	movs	r0, #18
 80058ae:	f7ff ff85 	bl	80057bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80058b2:	20db      	movs	r0, #219	@ 0xdb
 80058b4:	f7ff ff82 	bl	80057bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80058b8:	2020      	movs	r0, #32
 80058ba:	f7ff ff7f 	bl	80057bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80058be:	208d      	movs	r0, #141	@ 0x8d
 80058c0:	f7ff ff7c 	bl	80057bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80058c4:	2014      	movs	r0, #20
 80058c6:	f7ff ff79 	bl	80057bc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80058ca:	2001      	movs	r0, #1
 80058cc:	f000 f988 	bl	8005be0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80058d0:	2000      	movs	r0, #0
 80058d2:	f000 f80f 	bl	80058f4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80058d6:	f000 f825 	bl	8005924 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80058da:	4b05      	ldr	r3, [pc, #20]	@ (80058f0 <ssd1306_Init+0xd0>)
 80058dc:	2200      	movs	r2, #0
 80058de:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80058e0:	4b03      	ldr	r3, [pc, #12]	@ (80058f0 <ssd1306_Init+0xd0>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80058e6:	4b02      	ldr	r3, [pc, #8]	@ (80058f0 <ssd1306_Init+0xd0>)
 80058e8:	2201      	movs	r2, #1
 80058ea:	711a      	strb	r2, [r3, #4]
}
 80058ec:	bf00      	nop
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	2000068c 	.word	0x2000068c

080058f4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	4603      	mov	r3, r0
 80058fc:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80058fe:	79fb      	ldrb	r3, [r7, #7]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <ssd1306_Fill+0x14>
 8005904:	2300      	movs	r3, #0
 8005906:	e000      	b.n	800590a <ssd1306_Fill+0x16>
 8005908:	23ff      	movs	r3, #255	@ 0xff
 800590a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800590e:	4619      	mov	r1, r3
 8005910:	4803      	ldr	r0, [pc, #12]	@ (8005920 <ssd1306_Fill+0x2c>)
 8005912:	f000 fbb5 	bl	8006080 <memset>
}
 8005916:	bf00      	nop
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	2000028c 	.word	0x2000028c

08005924 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800592a:	2300      	movs	r3, #0
 800592c:	71fb      	strb	r3, [r7, #7]
 800592e:	e016      	b.n	800595e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8005930:	79fb      	ldrb	r3, [r7, #7]
 8005932:	3b50      	subs	r3, #80	@ 0x50
 8005934:	b2db      	uxtb	r3, r3
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff ff40 	bl	80057bc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800593c:	2000      	movs	r0, #0
 800593e:	f7ff ff3d 	bl	80057bc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8005942:	2010      	movs	r0, #16
 8005944:	f7ff ff3a 	bl	80057bc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8005948:	79fb      	ldrb	r3, [r7, #7]
 800594a:	01db      	lsls	r3, r3, #7
 800594c:	4a08      	ldr	r2, [pc, #32]	@ (8005970 <ssd1306_UpdateScreen+0x4c>)
 800594e:	4413      	add	r3, r2
 8005950:	2180      	movs	r1, #128	@ 0x80
 8005952:	4618      	mov	r0, r3
 8005954:	f7ff ff4a 	bl	80057ec <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005958:	79fb      	ldrb	r3, [r7, #7]
 800595a:	3301      	adds	r3, #1
 800595c:	71fb      	strb	r3, [r7, #7]
 800595e:	79fb      	ldrb	r3, [r7, #7]
 8005960:	2b07      	cmp	r3, #7
 8005962:	d9e5      	bls.n	8005930 <ssd1306_UpdateScreen+0xc>
    }
}
 8005964:	bf00      	nop
 8005966:	bf00      	nop
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	2000028c 	.word	0x2000028c

08005974 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	4603      	mov	r3, r0
 800597c:	71fb      	strb	r3, [r7, #7]
 800597e:	460b      	mov	r3, r1
 8005980:	71bb      	strb	r3, [r7, #6]
 8005982:	4613      	mov	r3, r2
 8005984:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8005986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800598a:	2b00      	cmp	r3, #0
 800598c:	db3d      	blt.n	8005a0a <ssd1306_DrawPixel+0x96>
 800598e:	79bb      	ldrb	r3, [r7, #6]
 8005990:	2b3f      	cmp	r3, #63	@ 0x3f
 8005992:	d83a      	bhi.n	8005a0a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8005994:	797b      	ldrb	r3, [r7, #5]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d11a      	bne.n	80059d0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800599a:	79fa      	ldrb	r2, [r7, #7]
 800599c:	79bb      	ldrb	r3, [r7, #6]
 800599e:	08db      	lsrs	r3, r3, #3
 80059a0:	b2d8      	uxtb	r0, r3
 80059a2:	4603      	mov	r3, r0
 80059a4:	01db      	lsls	r3, r3, #7
 80059a6:	4413      	add	r3, r2
 80059a8:	4a1b      	ldr	r2, [pc, #108]	@ (8005a18 <ssd1306_DrawPixel+0xa4>)
 80059aa:	5cd3      	ldrb	r3, [r2, r3]
 80059ac:	b25a      	sxtb	r2, r3
 80059ae:	79bb      	ldrb	r3, [r7, #6]
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	2101      	movs	r1, #1
 80059b6:	fa01 f303 	lsl.w	r3, r1, r3
 80059ba:	b25b      	sxtb	r3, r3
 80059bc:	4313      	orrs	r3, r2
 80059be:	b259      	sxtb	r1, r3
 80059c0:	79fa      	ldrb	r2, [r7, #7]
 80059c2:	4603      	mov	r3, r0
 80059c4:	01db      	lsls	r3, r3, #7
 80059c6:	4413      	add	r3, r2
 80059c8:	b2c9      	uxtb	r1, r1
 80059ca:	4a13      	ldr	r2, [pc, #76]	@ (8005a18 <ssd1306_DrawPixel+0xa4>)
 80059cc:	54d1      	strb	r1, [r2, r3]
 80059ce:	e01d      	b.n	8005a0c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80059d0:	79fa      	ldrb	r2, [r7, #7]
 80059d2:	79bb      	ldrb	r3, [r7, #6]
 80059d4:	08db      	lsrs	r3, r3, #3
 80059d6:	b2d8      	uxtb	r0, r3
 80059d8:	4603      	mov	r3, r0
 80059da:	01db      	lsls	r3, r3, #7
 80059dc:	4413      	add	r3, r2
 80059de:	4a0e      	ldr	r2, [pc, #56]	@ (8005a18 <ssd1306_DrawPixel+0xa4>)
 80059e0:	5cd3      	ldrb	r3, [r2, r3]
 80059e2:	b25a      	sxtb	r2, r3
 80059e4:	79bb      	ldrb	r3, [r7, #6]
 80059e6:	f003 0307 	and.w	r3, r3, #7
 80059ea:	2101      	movs	r1, #1
 80059ec:	fa01 f303 	lsl.w	r3, r1, r3
 80059f0:	b25b      	sxtb	r3, r3
 80059f2:	43db      	mvns	r3, r3
 80059f4:	b25b      	sxtb	r3, r3
 80059f6:	4013      	ands	r3, r2
 80059f8:	b259      	sxtb	r1, r3
 80059fa:	79fa      	ldrb	r2, [r7, #7]
 80059fc:	4603      	mov	r3, r0
 80059fe:	01db      	lsls	r3, r3, #7
 8005a00:	4413      	add	r3, r2
 8005a02:	b2c9      	uxtb	r1, r1
 8005a04:	4a04      	ldr	r2, [pc, #16]	@ (8005a18 <ssd1306_DrawPixel+0xa4>)
 8005a06:	54d1      	strb	r1, [r2, r3]
 8005a08:	e000      	b.n	8005a0c <ssd1306_DrawPixel+0x98>
        return;
 8005a0a:	bf00      	nop
    }
}
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	2000028c 	.word	0x2000028c

08005a1c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8005a1c:	b590      	push	{r4, r7, lr}
 8005a1e:	b089      	sub	sp, #36	@ 0x24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	4604      	mov	r4, r0
 8005a24:	4638      	mov	r0, r7
 8005a26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8005a2a:	4623      	mov	r3, r4
 8005a2c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
 8005a30:	2b1f      	cmp	r3, #31
 8005a32:	d902      	bls.n	8005a3a <ssd1306_WriteChar+0x1e>
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
 8005a36:	2b7e      	cmp	r3, #126	@ 0x7e
 8005a38:	d901      	bls.n	8005a3e <ssd1306_WriteChar+0x22>
        return 0;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	e077      	b.n	8005b2e <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8005a3e:	4b3e      	ldr	r3, [pc, #248]	@ (8005b38 <ssd1306_WriteChar+0x11c>)
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	783b      	ldrb	r3, [r7, #0]
 8005a46:	4413      	add	r3, r2
 8005a48:	2b80      	cmp	r3, #128	@ 0x80
 8005a4a:	dc06      	bgt.n	8005a5a <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8005a4c:	4b3a      	ldr	r3, [pc, #232]	@ (8005b38 <ssd1306_WriteChar+0x11c>)
 8005a4e:	885b      	ldrh	r3, [r3, #2]
 8005a50:	461a      	mov	r2, r3
 8005a52:	787b      	ldrb	r3, [r7, #1]
 8005a54:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8005a56:	2b40      	cmp	r3, #64	@ 0x40
 8005a58:	dd01      	ble.n	8005a5e <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	e067      	b.n	8005b2e <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8005a5e:	2300      	movs	r3, #0
 8005a60:	61fb      	str	r3, [r7, #28]
 8005a62:	e04e      	b.n	8005b02 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
 8005a68:	3b20      	subs	r3, #32
 8005a6a:	7879      	ldrb	r1, [r7, #1]
 8005a6c:	fb01 f303 	mul.w	r3, r1, r3
 8005a70:	4619      	mov	r1, r3
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	440b      	add	r3, r1
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	4413      	add	r3, r2
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8005a7e:	2300      	movs	r3, #0
 8005a80:	61bb      	str	r3, [r7, #24]
 8005a82:	e036      	b.n	8005af2 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d013      	beq.n	8005abc <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005a94:	4b28      	ldr	r3, [pc, #160]	@ (8005b38 <ssd1306_WriteChar+0x11c>)
 8005a96:	881b      	ldrh	r3, [r3, #0]
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	4413      	add	r3, r2
 8005aa0:	b2d8      	uxtb	r0, r3
 8005aa2:	4b25      	ldr	r3, [pc, #148]	@ (8005b38 <ssd1306_WriteChar+0x11c>)
 8005aa4:	885b      	ldrh	r3, [r3, #2]
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	4413      	add	r3, r2
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	f7ff ff5d 	bl	8005974 <ssd1306_DrawPixel>
 8005aba:	e017      	b.n	8005aec <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005abc:	4b1e      	ldr	r3, [pc, #120]	@ (8005b38 <ssd1306_WriteChar+0x11c>)
 8005abe:	881b      	ldrh	r3, [r3, #0]
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	4413      	add	r3, r2
 8005ac8:	b2d8      	uxtb	r0, r3
 8005aca:	4b1b      	ldr	r3, [pc, #108]	@ (8005b38 <ssd1306_WriteChar+0x11c>)
 8005acc:	885b      	ldrh	r3, [r3, #2]
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	4413      	add	r3, r2
 8005ad6:	b2d9      	uxtb	r1, r3
 8005ad8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	bf0c      	ite	eq
 8005ae0:	2301      	moveq	r3, #1
 8005ae2:	2300      	movne	r3, #0
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	f7ff ff44 	bl	8005974 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	3301      	adds	r3, #1
 8005af0:	61bb      	str	r3, [r7, #24]
 8005af2:	783b      	ldrb	r3, [r7, #0]
 8005af4:	461a      	mov	r2, r3
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d3c3      	bcc.n	8005a84 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	3301      	adds	r3, #1
 8005b00:	61fb      	str	r3, [r7, #28]
 8005b02:	787b      	ldrb	r3, [r7, #1]
 8005b04:	461a      	mov	r2, r3
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d3ab      	bcc.n	8005a64 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8005b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b38 <ssd1306_WriteChar+0x11c>)
 8005b0e:	881b      	ldrh	r3, [r3, #0]
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	2a00      	cmp	r2, #0
 8005b14:	d005      	beq.n	8005b22 <ssd1306_WriteChar+0x106>
 8005b16:	68b9      	ldr	r1, [r7, #8]
 8005b18:	7bfa      	ldrb	r2, [r7, #15]
 8005b1a:	3a20      	subs	r2, #32
 8005b1c:	440a      	add	r2, r1
 8005b1e:	7812      	ldrb	r2, [r2, #0]
 8005b20:	e000      	b.n	8005b24 <ssd1306_WriteChar+0x108>
 8005b22:	783a      	ldrb	r2, [r7, #0]
 8005b24:	4413      	add	r3, r2
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	4b03      	ldr	r3, [pc, #12]	@ (8005b38 <ssd1306_WriteChar+0x11c>)
 8005b2a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8005b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3724      	adds	r7, #36	@ 0x24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd90      	pop	{r4, r7, pc}
 8005b36:	bf00      	nop
 8005b38:	2000068c 	.word	0x2000068c

08005b3c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af02      	add	r7, sp, #8
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	4638      	mov	r0, r7
 8005b46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8005b4a:	e013      	b.n	8005b74 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	7818      	ldrb	r0, [r3, #0]
 8005b50:	7e3b      	ldrb	r3, [r7, #24]
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	463b      	mov	r3, r7
 8005b56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b58:	f7ff ff60 	bl	8005a1c <ssd1306_WriteChar>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	461a      	mov	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d002      	beq.n	8005b6e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	e008      	b.n	8005b80 <ssd1306_WriteString+0x44>
        }
        str++;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	3301      	adds	r3, #1
 8005b72:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1e7      	bne.n	8005b4c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	4603      	mov	r3, r0
 8005b90:	460a      	mov	r2, r1
 8005b92:	71fb      	strb	r3, [r7, #7]
 8005b94:	4613      	mov	r3, r2
 8005b96:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8005b98:	79fb      	ldrb	r3, [r7, #7]
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	4b05      	ldr	r3, [pc, #20]	@ (8005bb4 <ssd1306_SetCursor+0x2c>)
 8005b9e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8005ba0:	79bb      	ldrb	r3, [r7, #6]
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	4b03      	ldr	r3, [pc, #12]	@ (8005bb4 <ssd1306_SetCursor+0x2c>)
 8005ba6:	805a      	strh	r2, [r3, #2]
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	2000068c 	.word	0x2000068c

08005bb8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8005bc2:	2381      	movs	r3, #129	@ 0x81
 8005bc4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7ff fdf7 	bl	80057bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8005bce:	79fb      	ldrb	r3, [r7, #7]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7ff fdf3 	bl	80057bc <ssd1306_WriteCommand>
}
 8005bd6:	bf00      	nop
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
	...

08005be0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	4603      	mov	r3, r0
 8005be8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8005bea:	79fb      	ldrb	r3, [r7, #7]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d005      	beq.n	8005bfc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8005bf0:	23af      	movs	r3, #175	@ 0xaf
 8005bf2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8005bf4:	4b08      	ldr	r3, [pc, #32]	@ (8005c18 <ssd1306_SetDisplayOn+0x38>)
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	715a      	strb	r2, [r3, #5]
 8005bfa:	e004      	b.n	8005c06 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8005bfc:	23ae      	movs	r3, #174	@ 0xae
 8005bfe:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8005c00:	4b05      	ldr	r3, [pc, #20]	@ (8005c18 <ssd1306_SetDisplayOn+0x38>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8005c06:	7bfb      	ldrb	r3, [r7, #15]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7ff fdd7 	bl	80057bc <ssd1306_WriteCommand>
}
 8005c0e:	bf00      	nop
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	2000068c 	.word	0x2000068c

08005c1c <std>:
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	b510      	push	{r4, lr}
 8005c20:	4604      	mov	r4, r0
 8005c22:	e9c0 3300 	strd	r3, r3, [r0]
 8005c26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c2a:	6083      	str	r3, [r0, #8]
 8005c2c:	8181      	strh	r1, [r0, #12]
 8005c2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005c30:	81c2      	strh	r2, [r0, #14]
 8005c32:	6183      	str	r3, [r0, #24]
 8005c34:	4619      	mov	r1, r3
 8005c36:	2208      	movs	r2, #8
 8005c38:	305c      	adds	r0, #92	@ 0x5c
 8005c3a:	f000 fa21 	bl	8006080 <memset>
 8005c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c74 <std+0x58>)
 8005c40:	6263      	str	r3, [r4, #36]	@ 0x24
 8005c42:	4b0d      	ldr	r3, [pc, #52]	@ (8005c78 <std+0x5c>)
 8005c44:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005c46:	4b0d      	ldr	r3, [pc, #52]	@ (8005c7c <std+0x60>)
 8005c48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c80 <std+0x64>)
 8005c4c:	6323      	str	r3, [r4, #48]	@ 0x30
 8005c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c84 <std+0x68>)
 8005c50:	6224      	str	r4, [r4, #32]
 8005c52:	429c      	cmp	r4, r3
 8005c54:	d006      	beq.n	8005c64 <std+0x48>
 8005c56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005c5a:	4294      	cmp	r4, r2
 8005c5c:	d002      	beq.n	8005c64 <std+0x48>
 8005c5e:	33d0      	adds	r3, #208	@ 0xd0
 8005c60:	429c      	cmp	r4, r3
 8005c62:	d105      	bne.n	8005c70 <std+0x54>
 8005c64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c6c:	f000 ba80 	b.w	8006170 <__retarget_lock_init_recursive>
 8005c70:	bd10      	pop	{r4, pc}
 8005c72:	bf00      	nop
 8005c74:	08005e9d 	.word	0x08005e9d
 8005c78:	08005ebf 	.word	0x08005ebf
 8005c7c:	08005ef7 	.word	0x08005ef7
 8005c80:	08005f1b 	.word	0x08005f1b
 8005c84:	20000694 	.word	0x20000694

08005c88 <stdio_exit_handler>:
 8005c88:	4a02      	ldr	r2, [pc, #8]	@ (8005c94 <stdio_exit_handler+0xc>)
 8005c8a:	4903      	ldr	r1, [pc, #12]	@ (8005c98 <stdio_exit_handler+0x10>)
 8005c8c:	4803      	ldr	r0, [pc, #12]	@ (8005c9c <stdio_exit_handler+0x14>)
 8005c8e:	f000 b869 	b.w	8005d64 <_fwalk_sglue>
 8005c92:	bf00      	nop
 8005c94:	20000020 	.word	0x20000020
 8005c98:	08006a59 	.word	0x08006a59
 8005c9c:	20000030 	.word	0x20000030

08005ca0 <cleanup_stdio>:
 8005ca0:	6841      	ldr	r1, [r0, #4]
 8005ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8005cd4 <cleanup_stdio+0x34>)
 8005ca4:	4299      	cmp	r1, r3
 8005ca6:	b510      	push	{r4, lr}
 8005ca8:	4604      	mov	r4, r0
 8005caa:	d001      	beq.n	8005cb0 <cleanup_stdio+0x10>
 8005cac:	f000 fed4 	bl	8006a58 <_fflush_r>
 8005cb0:	68a1      	ldr	r1, [r4, #8]
 8005cb2:	4b09      	ldr	r3, [pc, #36]	@ (8005cd8 <cleanup_stdio+0x38>)
 8005cb4:	4299      	cmp	r1, r3
 8005cb6:	d002      	beq.n	8005cbe <cleanup_stdio+0x1e>
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f000 fecd 	bl	8006a58 <_fflush_r>
 8005cbe:	68e1      	ldr	r1, [r4, #12]
 8005cc0:	4b06      	ldr	r3, [pc, #24]	@ (8005cdc <cleanup_stdio+0x3c>)
 8005cc2:	4299      	cmp	r1, r3
 8005cc4:	d004      	beq.n	8005cd0 <cleanup_stdio+0x30>
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ccc:	f000 bec4 	b.w	8006a58 <_fflush_r>
 8005cd0:	bd10      	pop	{r4, pc}
 8005cd2:	bf00      	nop
 8005cd4:	20000694 	.word	0x20000694
 8005cd8:	200006fc 	.word	0x200006fc
 8005cdc:	20000764 	.word	0x20000764

08005ce0 <global_stdio_init.part.0>:
 8005ce0:	b510      	push	{r4, lr}
 8005ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8005d10 <global_stdio_init.part.0+0x30>)
 8005ce4:	4c0b      	ldr	r4, [pc, #44]	@ (8005d14 <global_stdio_init.part.0+0x34>)
 8005ce6:	4a0c      	ldr	r2, [pc, #48]	@ (8005d18 <global_stdio_init.part.0+0x38>)
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	4620      	mov	r0, r4
 8005cec:	2200      	movs	r2, #0
 8005cee:	2104      	movs	r1, #4
 8005cf0:	f7ff ff94 	bl	8005c1c <std>
 8005cf4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	2109      	movs	r1, #9
 8005cfc:	f7ff ff8e 	bl	8005c1c <std>
 8005d00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005d04:	2202      	movs	r2, #2
 8005d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d0a:	2112      	movs	r1, #18
 8005d0c:	f7ff bf86 	b.w	8005c1c <std>
 8005d10:	200007cc 	.word	0x200007cc
 8005d14:	20000694 	.word	0x20000694
 8005d18:	08005c89 	.word	0x08005c89

08005d1c <__sfp_lock_acquire>:
 8005d1c:	4801      	ldr	r0, [pc, #4]	@ (8005d24 <__sfp_lock_acquire+0x8>)
 8005d1e:	f000 ba28 	b.w	8006172 <__retarget_lock_acquire_recursive>
 8005d22:	bf00      	nop
 8005d24:	200007d5 	.word	0x200007d5

08005d28 <__sfp_lock_release>:
 8005d28:	4801      	ldr	r0, [pc, #4]	@ (8005d30 <__sfp_lock_release+0x8>)
 8005d2a:	f000 ba23 	b.w	8006174 <__retarget_lock_release_recursive>
 8005d2e:	bf00      	nop
 8005d30:	200007d5 	.word	0x200007d5

08005d34 <__sinit>:
 8005d34:	b510      	push	{r4, lr}
 8005d36:	4604      	mov	r4, r0
 8005d38:	f7ff fff0 	bl	8005d1c <__sfp_lock_acquire>
 8005d3c:	6a23      	ldr	r3, [r4, #32]
 8005d3e:	b11b      	cbz	r3, 8005d48 <__sinit+0x14>
 8005d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d44:	f7ff bff0 	b.w	8005d28 <__sfp_lock_release>
 8005d48:	4b04      	ldr	r3, [pc, #16]	@ (8005d5c <__sinit+0x28>)
 8005d4a:	6223      	str	r3, [r4, #32]
 8005d4c:	4b04      	ldr	r3, [pc, #16]	@ (8005d60 <__sinit+0x2c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1f5      	bne.n	8005d40 <__sinit+0xc>
 8005d54:	f7ff ffc4 	bl	8005ce0 <global_stdio_init.part.0>
 8005d58:	e7f2      	b.n	8005d40 <__sinit+0xc>
 8005d5a:	bf00      	nop
 8005d5c:	08005ca1 	.word	0x08005ca1
 8005d60:	200007cc 	.word	0x200007cc

08005d64 <_fwalk_sglue>:
 8005d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d68:	4607      	mov	r7, r0
 8005d6a:	4688      	mov	r8, r1
 8005d6c:	4614      	mov	r4, r2
 8005d6e:	2600      	movs	r6, #0
 8005d70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d74:	f1b9 0901 	subs.w	r9, r9, #1
 8005d78:	d505      	bpl.n	8005d86 <_fwalk_sglue+0x22>
 8005d7a:	6824      	ldr	r4, [r4, #0]
 8005d7c:	2c00      	cmp	r4, #0
 8005d7e:	d1f7      	bne.n	8005d70 <_fwalk_sglue+0xc>
 8005d80:	4630      	mov	r0, r6
 8005d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d86:	89ab      	ldrh	r3, [r5, #12]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d907      	bls.n	8005d9c <_fwalk_sglue+0x38>
 8005d8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d90:	3301      	adds	r3, #1
 8005d92:	d003      	beq.n	8005d9c <_fwalk_sglue+0x38>
 8005d94:	4629      	mov	r1, r5
 8005d96:	4638      	mov	r0, r7
 8005d98:	47c0      	blx	r8
 8005d9a:	4306      	orrs	r6, r0
 8005d9c:	3568      	adds	r5, #104	@ 0x68
 8005d9e:	e7e9      	b.n	8005d74 <_fwalk_sglue+0x10>

08005da0 <_puts_r>:
 8005da0:	6a03      	ldr	r3, [r0, #32]
 8005da2:	b570      	push	{r4, r5, r6, lr}
 8005da4:	6884      	ldr	r4, [r0, #8]
 8005da6:	4605      	mov	r5, r0
 8005da8:	460e      	mov	r6, r1
 8005daa:	b90b      	cbnz	r3, 8005db0 <_puts_r+0x10>
 8005dac:	f7ff ffc2 	bl	8005d34 <__sinit>
 8005db0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005db2:	07db      	lsls	r3, r3, #31
 8005db4:	d405      	bmi.n	8005dc2 <_puts_r+0x22>
 8005db6:	89a3      	ldrh	r3, [r4, #12]
 8005db8:	0598      	lsls	r0, r3, #22
 8005dba:	d402      	bmi.n	8005dc2 <_puts_r+0x22>
 8005dbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dbe:	f000 f9d8 	bl	8006172 <__retarget_lock_acquire_recursive>
 8005dc2:	89a3      	ldrh	r3, [r4, #12]
 8005dc4:	0719      	lsls	r1, r3, #28
 8005dc6:	d502      	bpl.n	8005dce <_puts_r+0x2e>
 8005dc8:	6923      	ldr	r3, [r4, #16]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d135      	bne.n	8005e3a <_puts_r+0x9a>
 8005dce:	4621      	mov	r1, r4
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	f000 f8e5 	bl	8005fa0 <__swsetup_r>
 8005dd6:	b380      	cbz	r0, 8005e3a <_puts_r+0x9a>
 8005dd8:	f04f 35ff 	mov.w	r5, #4294967295
 8005ddc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005dde:	07da      	lsls	r2, r3, #31
 8005de0:	d405      	bmi.n	8005dee <_puts_r+0x4e>
 8005de2:	89a3      	ldrh	r3, [r4, #12]
 8005de4:	059b      	lsls	r3, r3, #22
 8005de6:	d402      	bmi.n	8005dee <_puts_r+0x4e>
 8005de8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dea:	f000 f9c3 	bl	8006174 <__retarget_lock_release_recursive>
 8005dee:	4628      	mov	r0, r5
 8005df0:	bd70      	pop	{r4, r5, r6, pc}
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	da04      	bge.n	8005e00 <_puts_r+0x60>
 8005df6:	69a2      	ldr	r2, [r4, #24]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	dc17      	bgt.n	8005e2c <_puts_r+0x8c>
 8005dfc:	290a      	cmp	r1, #10
 8005dfe:	d015      	beq.n	8005e2c <_puts_r+0x8c>
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	6022      	str	r2, [r4, #0]
 8005e06:	7019      	strb	r1, [r3, #0]
 8005e08:	68a3      	ldr	r3, [r4, #8]
 8005e0a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	60a3      	str	r3, [r4, #8]
 8005e12:	2900      	cmp	r1, #0
 8005e14:	d1ed      	bne.n	8005df2 <_puts_r+0x52>
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	da11      	bge.n	8005e3e <_puts_r+0x9e>
 8005e1a:	4622      	mov	r2, r4
 8005e1c:	210a      	movs	r1, #10
 8005e1e:	4628      	mov	r0, r5
 8005e20:	f000 f87f 	bl	8005f22 <__swbuf_r>
 8005e24:	3001      	adds	r0, #1
 8005e26:	d0d7      	beq.n	8005dd8 <_puts_r+0x38>
 8005e28:	250a      	movs	r5, #10
 8005e2a:	e7d7      	b.n	8005ddc <_puts_r+0x3c>
 8005e2c:	4622      	mov	r2, r4
 8005e2e:	4628      	mov	r0, r5
 8005e30:	f000 f877 	bl	8005f22 <__swbuf_r>
 8005e34:	3001      	adds	r0, #1
 8005e36:	d1e7      	bne.n	8005e08 <_puts_r+0x68>
 8005e38:	e7ce      	b.n	8005dd8 <_puts_r+0x38>
 8005e3a:	3e01      	subs	r6, #1
 8005e3c:	e7e4      	b.n	8005e08 <_puts_r+0x68>
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	1c5a      	adds	r2, r3, #1
 8005e42:	6022      	str	r2, [r4, #0]
 8005e44:	220a      	movs	r2, #10
 8005e46:	701a      	strb	r2, [r3, #0]
 8005e48:	e7ee      	b.n	8005e28 <_puts_r+0x88>
	...

08005e4c <puts>:
 8005e4c:	4b02      	ldr	r3, [pc, #8]	@ (8005e58 <puts+0xc>)
 8005e4e:	4601      	mov	r1, r0
 8005e50:	6818      	ldr	r0, [r3, #0]
 8005e52:	f7ff bfa5 	b.w	8005da0 <_puts_r>
 8005e56:	bf00      	nop
 8005e58:	2000002c 	.word	0x2000002c

08005e5c <siprintf>:
 8005e5c:	b40e      	push	{r1, r2, r3}
 8005e5e:	b500      	push	{lr}
 8005e60:	b09c      	sub	sp, #112	@ 0x70
 8005e62:	ab1d      	add	r3, sp, #116	@ 0x74
 8005e64:	9002      	str	r0, [sp, #8]
 8005e66:	9006      	str	r0, [sp, #24]
 8005e68:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005e6c:	4809      	ldr	r0, [pc, #36]	@ (8005e94 <siprintf+0x38>)
 8005e6e:	9107      	str	r1, [sp, #28]
 8005e70:	9104      	str	r1, [sp, #16]
 8005e72:	4909      	ldr	r1, [pc, #36]	@ (8005e98 <siprintf+0x3c>)
 8005e74:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e78:	9105      	str	r1, [sp, #20]
 8005e7a:	6800      	ldr	r0, [r0, #0]
 8005e7c:	9301      	str	r3, [sp, #4]
 8005e7e:	a902      	add	r1, sp, #8
 8005e80:	f000 fadc 	bl	800643c <_svfiprintf_r>
 8005e84:	9b02      	ldr	r3, [sp, #8]
 8005e86:	2200      	movs	r2, #0
 8005e88:	701a      	strb	r2, [r3, #0]
 8005e8a:	b01c      	add	sp, #112	@ 0x70
 8005e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e90:	b003      	add	sp, #12
 8005e92:	4770      	bx	lr
 8005e94:	2000002c 	.word	0x2000002c
 8005e98:	ffff0208 	.word	0xffff0208

08005e9c <__sread>:
 8005e9c:	b510      	push	{r4, lr}
 8005e9e:	460c      	mov	r4, r1
 8005ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ea4:	f000 f916 	bl	80060d4 <_read_r>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	bfab      	itete	ge
 8005eac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005eae:	89a3      	ldrhlt	r3, [r4, #12]
 8005eb0:	181b      	addge	r3, r3, r0
 8005eb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005eb6:	bfac      	ite	ge
 8005eb8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005eba:	81a3      	strhlt	r3, [r4, #12]
 8005ebc:	bd10      	pop	{r4, pc}

08005ebe <__swrite>:
 8005ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec2:	461f      	mov	r7, r3
 8005ec4:	898b      	ldrh	r3, [r1, #12]
 8005ec6:	05db      	lsls	r3, r3, #23
 8005ec8:	4605      	mov	r5, r0
 8005eca:	460c      	mov	r4, r1
 8005ecc:	4616      	mov	r6, r2
 8005ece:	d505      	bpl.n	8005edc <__swrite+0x1e>
 8005ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f000 f8ea 	bl	80060b0 <_lseek_r>
 8005edc:	89a3      	ldrh	r3, [r4, #12]
 8005ede:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ee2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ee6:	81a3      	strh	r3, [r4, #12]
 8005ee8:	4632      	mov	r2, r6
 8005eea:	463b      	mov	r3, r7
 8005eec:	4628      	mov	r0, r5
 8005eee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef2:	f000 b901 	b.w	80060f8 <_write_r>

08005ef6 <__sseek>:
 8005ef6:	b510      	push	{r4, lr}
 8005ef8:	460c      	mov	r4, r1
 8005efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005efe:	f000 f8d7 	bl	80060b0 <_lseek_r>
 8005f02:	1c43      	adds	r3, r0, #1
 8005f04:	89a3      	ldrh	r3, [r4, #12]
 8005f06:	bf15      	itete	ne
 8005f08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f12:	81a3      	strheq	r3, [r4, #12]
 8005f14:	bf18      	it	ne
 8005f16:	81a3      	strhne	r3, [r4, #12]
 8005f18:	bd10      	pop	{r4, pc}

08005f1a <__sclose>:
 8005f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f1e:	f000 b8b7 	b.w	8006090 <_close_r>

08005f22 <__swbuf_r>:
 8005f22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f24:	460e      	mov	r6, r1
 8005f26:	4614      	mov	r4, r2
 8005f28:	4605      	mov	r5, r0
 8005f2a:	b118      	cbz	r0, 8005f34 <__swbuf_r+0x12>
 8005f2c:	6a03      	ldr	r3, [r0, #32]
 8005f2e:	b90b      	cbnz	r3, 8005f34 <__swbuf_r+0x12>
 8005f30:	f7ff ff00 	bl	8005d34 <__sinit>
 8005f34:	69a3      	ldr	r3, [r4, #24]
 8005f36:	60a3      	str	r3, [r4, #8]
 8005f38:	89a3      	ldrh	r3, [r4, #12]
 8005f3a:	071a      	lsls	r2, r3, #28
 8005f3c:	d501      	bpl.n	8005f42 <__swbuf_r+0x20>
 8005f3e:	6923      	ldr	r3, [r4, #16]
 8005f40:	b943      	cbnz	r3, 8005f54 <__swbuf_r+0x32>
 8005f42:	4621      	mov	r1, r4
 8005f44:	4628      	mov	r0, r5
 8005f46:	f000 f82b 	bl	8005fa0 <__swsetup_r>
 8005f4a:	b118      	cbz	r0, 8005f54 <__swbuf_r+0x32>
 8005f4c:	f04f 37ff 	mov.w	r7, #4294967295
 8005f50:	4638      	mov	r0, r7
 8005f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f54:	6823      	ldr	r3, [r4, #0]
 8005f56:	6922      	ldr	r2, [r4, #16]
 8005f58:	1a98      	subs	r0, r3, r2
 8005f5a:	6963      	ldr	r3, [r4, #20]
 8005f5c:	b2f6      	uxtb	r6, r6
 8005f5e:	4283      	cmp	r3, r0
 8005f60:	4637      	mov	r7, r6
 8005f62:	dc05      	bgt.n	8005f70 <__swbuf_r+0x4e>
 8005f64:	4621      	mov	r1, r4
 8005f66:	4628      	mov	r0, r5
 8005f68:	f000 fd76 	bl	8006a58 <_fflush_r>
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	d1ed      	bne.n	8005f4c <__swbuf_r+0x2a>
 8005f70:	68a3      	ldr	r3, [r4, #8]
 8005f72:	3b01      	subs	r3, #1
 8005f74:	60a3      	str	r3, [r4, #8]
 8005f76:	6823      	ldr	r3, [r4, #0]
 8005f78:	1c5a      	adds	r2, r3, #1
 8005f7a:	6022      	str	r2, [r4, #0]
 8005f7c:	701e      	strb	r6, [r3, #0]
 8005f7e:	6962      	ldr	r2, [r4, #20]
 8005f80:	1c43      	adds	r3, r0, #1
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d004      	beq.n	8005f90 <__swbuf_r+0x6e>
 8005f86:	89a3      	ldrh	r3, [r4, #12]
 8005f88:	07db      	lsls	r3, r3, #31
 8005f8a:	d5e1      	bpl.n	8005f50 <__swbuf_r+0x2e>
 8005f8c:	2e0a      	cmp	r6, #10
 8005f8e:	d1df      	bne.n	8005f50 <__swbuf_r+0x2e>
 8005f90:	4621      	mov	r1, r4
 8005f92:	4628      	mov	r0, r5
 8005f94:	f000 fd60 	bl	8006a58 <_fflush_r>
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	d0d9      	beq.n	8005f50 <__swbuf_r+0x2e>
 8005f9c:	e7d6      	b.n	8005f4c <__swbuf_r+0x2a>
	...

08005fa0 <__swsetup_r>:
 8005fa0:	b538      	push	{r3, r4, r5, lr}
 8005fa2:	4b29      	ldr	r3, [pc, #164]	@ (8006048 <__swsetup_r+0xa8>)
 8005fa4:	4605      	mov	r5, r0
 8005fa6:	6818      	ldr	r0, [r3, #0]
 8005fa8:	460c      	mov	r4, r1
 8005faa:	b118      	cbz	r0, 8005fb4 <__swsetup_r+0x14>
 8005fac:	6a03      	ldr	r3, [r0, #32]
 8005fae:	b90b      	cbnz	r3, 8005fb4 <__swsetup_r+0x14>
 8005fb0:	f7ff fec0 	bl	8005d34 <__sinit>
 8005fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fb8:	0719      	lsls	r1, r3, #28
 8005fba:	d422      	bmi.n	8006002 <__swsetup_r+0x62>
 8005fbc:	06da      	lsls	r2, r3, #27
 8005fbe:	d407      	bmi.n	8005fd0 <__swsetup_r+0x30>
 8005fc0:	2209      	movs	r2, #9
 8005fc2:	602a      	str	r2, [r5, #0]
 8005fc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fc8:	81a3      	strh	r3, [r4, #12]
 8005fca:	f04f 30ff 	mov.w	r0, #4294967295
 8005fce:	e033      	b.n	8006038 <__swsetup_r+0x98>
 8005fd0:	0758      	lsls	r0, r3, #29
 8005fd2:	d512      	bpl.n	8005ffa <__swsetup_r+0x5a>
 8005fd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005fd6:	b141      	cbz	r1, 8005fea <__swsetup_r+0x4a>
 8005fd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005fdc:	4299      	cmp	r1, r3
 8005fde:	d002      	beq.n	8005fe6 <__swsetup_r+0x46>
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	f000 f8d7 	bl	8006194 <_free_r>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	6363      	str	r3, [r4, #52]	@ 0x34
 8005fea:	89a3      	ldrh	r3, [r4, #12]
 8005fec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005ff0:	81a3      	strh	r3, [r4, #12]
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	6063      	str	r3, [r4, #4]
 8005ff6:	6923      	ldr	r3, [r4, #16]
 8005ff8:	6023      	str	r3, [r4, #0]
 8005ffa:	89a3      	ldrh	r3, [r4, #12]
 8005ffc:	f043 0308 	orr.w	r3, r3, #8
 8006000:	81a3      	strh	r3, [r4, #12]
 8006002:	6923      	ldr	r3, [r4, #16]
 8006004:	b94b      	cbnz	r3, 800601a <__swsetup_r+0x7a>
 8006006:	89a3      	ldrh	r3, [r4, #12]
 8006008:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800600c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006010:	d003      	beq.n	800601a <__swsetup_r+0x7a>
 8006012:	4621      	mov	r1, r4
 8006014:	4628      	mov	r0, r5
 8006016:	f000 fd6d 	bl	8006af4 <__smakebuf_r>
 800601a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800601e:	f013 0201 	ands.w	r2, r3, #1
 8006022:	d00a      	beq.n	800603a <__swsetup_r+0x9a>
 8006024:	2200      	movs	r2, #0
 8006026:	60a2      	str	r2, [r4, #8]
 8006028:	6962      	ldr	r2, [r4, #20]
 800602a:	4252      	negs	r2, r2
 800602c:	61a2      	str	r2, [r4, #24]
 800602e:	6922      	ldr	r2, [r4, #16]
 8006030:	b942      	cbnz	r2, 8006044 <__swsetup_r+0xa4>
 8006032:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006036:	d1c5      	bne.n	8005fc4 <__swsetup_r+0x24>
 8006038:	bd38      	pop	{r3, r4, r5, pc}
 800603a:	0799      	lsls	r1, r3, #30
 800603c:	bf58      	it	pl
 800603e:	6962      	ldrpl	r2, [r4, #20]
 8006040:	60a2      	str	r2, [r4, #8]
 8006042:	e7f4      	b.n	800602e <__swsetup_r+0x8e>
 8006044:	2000      	movs	r0, #0
 8006046:	e7f7      	b.n	8006038 <__swsetup_r+0x98>
 8006048:	2000002c 	.word	0x2000002c

0800604c <memmove>:
 800604c:	4288      	cmp	r0, r1
 800604e:	b510      	push	{r4, lr}
 8006050:	eb01 0402 	add.w	r4, r1, r2
 8006054:	d902      	bls.n	800605c <memmove+0x10>
 8006056:	4284      	cmp	r4, r0
 8006058:	4623      	mov	r3, r4
 800605a:	d807      	bhi.n	800606c <memmove+0x20>
 800605c:	1e43      	subs	r3, r0, #1
 800605e:	42a1      	cmp	r1, r4
 8006060:	d008      	beq.n	8006074 <memmove+0x28>
 8006062:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006066:	f803 2f01 	strb.w	r2, [r3, #1]!
 800606a:	e7f8      	b.n	800605e <memmove+0x12>
 800606c:	4402      	add	r2, r0
 800606e:	4601      	mov	r1, r0
 8006070:	428a      	cmp	r2, r1
 8006072:	d100      	bne.n	8006076 <memmove+0x2a>
 8006074:	bd10      	pop	{r4, pc}
 8006076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800607a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800607e:	e7f7      	b.n	8006070 <memmove+0x24>

08006080 <memset>:
 8006080:	4402      	add	r2, r0
 8006082:	4603      	mov	r3, r0
 8006084:	4293      	cmp	r3, r2
 8006086:	d100      	bne.n	800608a <memset+0xa>
 8006088:	4770      	bx	lr
 800608a:	f803 1b01 	strb.w	r1, [r3], #1
 800608e:	e7f9      	b.n	8006084 <memset+0x4>

08006090 <_close_r>:
 8006090:	b538      	push	{r3, r4, r5, lr}
 8006092:	4d06      	ldr	r5, [pc, #24]	@ (80060ac <_close_r+0x1c>)
 8006094:	2300      	movs	r3, #0
 8006096:	4604      	mov	r4, r0
 8006098:	4608      	mov	r0, r1
 800609a:	602b      	str	r3, [r5, #0]
 800609c:	f7fb f8eb 	bl	8001276 <_close>
 80060a0:	1c43      	adds	r3, r0, #1
 80060a2:	d102      	bne.n	80060aa <_close_r+0x1a>
 80060a4:	682b      	ldr	r3, [r5, #0]
 80060a6:	b103      	cbz	r3, 80060aa <_close_r+0x1a>
 80060a8:	6023      	str	r3, [r4, #0]
 80060aa:	bd38      	pop	{r3, r4, r5, pc}
 80060ac:	200007d0 	.word	0x200007d0

080060b0 <_lseek_r>:
 80060b0:	b538      	push	{r3, r4, r5, lr}
 80060b2:	4d07      	ldr	r5, [pc, #28]	@ (80060d0 <_lseek_r+0x20>)
 80060b4:	4604      	mov	r4, r0
 80060b6:	4608      	mov	r0, r1
 80060b8:	4611      	mov	r1, r2
 80060ba:	2200      	movs	r2, #0
 80060bc:	602a      	str	r2, [r5, #0]
 80060be:	461a      	mov	r2, r3
 80060c0:	f7fb f900 	bl	80012c4 <_lseek>
 80060c4:	1c43      	adds	r3, r0, #1
 80060c6:	d102      	bne.n	80060ce <_lseek_r+0x1e>
 80060c8:	682b      	ldr	r3, [r5, #0]
 80060ca:	b103      	cbz	r3, 80060ce <_lseek_r+0x1e>
 80060cc:	6023      	str	r3, [r4, #0]
 80060ce:	bd38      	pop	{r3, r4, r5, pc}
 80060d0:	200007d0 	.word	0x200007d0

080060d4 <_read_r>:
 80060d4:	b538      	push	{r3, r4, r5, lr}
 80060d6:	4d07      	ldr	r5, [pc, #28]	@ (80060f4 <_read_r+0x20>)
 80060d8:	4604      	mov	r4, r0
 80060da:	4608      	mov	r0, r1
 80060dc:	4611      	mov	r1, r2
 80060de:	2200      	movs	r2, #0
 80060e0:	602a      	str	r2, [r5, #0]
 80060e2:	461a      	mov	r2, r3
 80060e4:	f7fb f8aa 	bl	800123c <_read>
 80060e8:	1c43      	adds	r3, r0, #1
 80060ea:	d102      	bne.n	80060f2 <_read_r+0x1e>
 80060ec:	682b      	ldr	r3, [r5, #0]
 80060ee:	b103      	cbz	r3, 80060f2 <_read_r+0x1e>
 80060f0:	6023      	str	r3, [r4, #0]
 80060f2:	bd38      	pop	{r3, r4, r5, pc}
 80060f4:	200007d0 	.word	0x200007d0

080060f8 <_write_r>:
 80060f8:	b538      	push	{r3, r4, r5, lr}
 80060fa:	4d07      	ldr	r5, [pc, #28]	@ (8006118 <_write_r+0x20>)
 80060fc:	4604      	mov	r4, r0
 80060fe:	4608      	mov	r0, r1
 8006100:	4611      	mov	r1, r2
 8006102:	2200      	movs	r2, #0
 8006104:	602a      	str	r2, [r5, #0]
 8006106:	461a      	mov	r2, r3
 8006108:	f7fa fb2e 	bl	8000768 <_write>
 800610c:	1c43      	adds	r3, r0, #1
 800610e:	d102      	bne.n	8006116 <_write_r+0x1e>
 8006110:	682b      	ldr	r3, [r5, #0]
 8006112:	b103      	cbz	r3, 8006116 <_write_r+0x1e>
 8006114:	6023      	str	r3, [r4, #0]
 8006116:	bd38      	pop	{r3, r4, r5, pc}
 8006118:	200007d0 	.word	0x200007d0

0800611c <__errno>:
 800611c:	4b01      	ldr	r3, [pc, #4]	@ (8006124 <__errno+0x8>)
 800611e:	6818      	ldr	r0, [r3, #0]
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	2000002c 	.word	0x2000002c

08006128 <__libc_init_array>:
 8006128:	b570      	push	{r4, r5, r6, lr}
 800612a:	4d0d      	ldr	r5, [pc, #52]	@ (8006160 <__libc_init_array+0x38>)
 800612c:	4c0d      	ldr	r4, [pc, #52]	@ (8006164 <__libc_init_array+0x3c>)
 800612e:	1b64      	subs	r4, r4, r5
 8006130:	10a4      	asrs	r4, r4, #2
 8006132:	2600      	movs	r6, #0
 8006134:	42a6      	cmp	r6, r4
 8006136:	d109      	bne.n	800614c <__libc_init_array+0x24>
 8006138:	4d0b      	ldr	r5, [pc, #44]	@ (8006168 <__libc_init_array+0x40>)
 800613a:	4c0c      	ldr	r4, [pc, #48]	@ (800616c <__libc_init_array+0x44>)
 800613c:	f000 fd7e 	bl	8006c3c <_init>
 8006140:	1b64      	subs	r4, r4, r5
 8006142:	10a4      	asrs	r4, r4, #2
 8006144:	2600      	movs	r6, #0
 8006146:	42a6      	cmp	r6, r4
 8006148:	d105      	bne.n	8006156 <__libc_init_array+0x2e>
 800614a:	bd70      	pop	{r4, r5, r6, pc}
 800614c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006150:	4798      	blx	r3
 8006152:	3601      	adds	r6, #1
 8006154:	e7ee      	b.n	8006134 <__libc_init_array+0xc>
 8006156:	f855 3b04 	ldr.w	r3, [r5], #4
 800615a:	4798      	blx	r3
 800615c:	3601      	adds	r6, #1
 800615e:	e7f2      	b.n	8006146 <__libc_init_array+0x1e>
 8006160:	080073d4 	.word	0x080073d4
 8006164:	080073d4 	.word	0x080073d4
 8006168:	080073d4 	.word	0x080073d4
 800616c:	080073d8 	.word	0x080073d8

08006170 <__retarget_lock_init_recursive>:
 8006170:	4770      	bx	lr

08006172 <__retarget_lock_acquire_recursive>:
 8006172:	4770      	bx	lr

08006174 <__retarget_lock_release_recursive>:
 8006174:	4770      	bx	lr

08006176 <memcpy>:
 8006176:	440a      	add	r2, r1
 8006178:	4291      	cmp	r1, r2
 800617a:	f100 33ff 	add.w	r3, r0, #4294967295
 800617e:	d100      	bne.n	8006182 <memcpy+0xc>
 8006180:	4770      	bx	lr
 8006182:	b510      	push	{r4, lr}
 8006184:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006188:	f803 4f01 	strb.w	r4, [r3, #1]!
 800618c:	4291      	cmp	r1, r2
 800618e:	d1f9      	bne.n	8006184 <memcpy+0xe>
 8006190:	bd10      	pop	{r4, pc}
	...

08006194 <_free_r>:
 8006194:	b538      	push	{r3, r4, r5, lr}
 8006196:	4605      	mov	r5, r0
 8006198:	2900      	cmp	r1, #0
 800619a:	d041      	beq.n	8006220 <_free_r+0x8c>
 800619c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061a0:	1f0c      	subs	r4, r1, #4
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	bfb8      	it	lt
 80061a6:	18e4      	addlt	r4, r4, r3
 80061a8:	f000 f8e0 	bl	800636c <__malloc_lock>
 80061ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006224 <_free_r+0x90>)
 80061ae:	6813      	ldr	r3, [r2, #0]
 80061b0:	b933      	cbnz	r3, 80061c0 <_free_r+0x2c>
 80061b2:	6063      	str	r3, [r4, #4]
 80061b4:	6014      	str	r4, [r2, #0]
 80061b6:	4628      	mov	r0, r5
 80061b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061bc:	f000 b8dc 	b.w	8006378 <__malloc_unlock>
 80061c0:	42a3      	cmp	r3, r4
 80061c2:	d908      	bls.n	80061d6 <_free_r+0x42>
 80061c4:	6820      	ldr	r0, [r4, #0]
 80061c6:	1821      	adds	r1, r4, r0
 80061c8:	428b      	cmp	r3, r1
 80061ca:	bf01      	itttt	eq
 80061cc:	6819      	ldreq	r1, [r3, #0]
 80061ce:	685b      	ldreq	r3, [r3, #4]
 80061d0:	1809      	addeq	r1, r1, r0
 80061d2:	6021      	streq	r1, [r4, #0]
 80061d4:	e7ed      	b.n	80061b2 <_free_r+0x1e>
 80061d6:	461a      	mov	r2, r3
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	b10b      	cbz	r3, 80061e0 <_free_r+0x4c>
 80061dc:	42a3      	cmp	r3, r4
 80061de:	d9fa      	bls.n	80061d6 <_free_r+0x42>
 80061e0:	6811      	ldr	r1, [r2, #0]
 80061e2:	1850      	adds	r0, r2, r1
 80061e4:	42a0      	cmp	r0, r4
 80061e6:	d10b      	bne.n	8006200 <_free_r+0x6c>
 80061e8:	6820      	ldr	r0, [r4, #0]
 80061ea:	4401      	add	r1, r0
 80061ec:	1850      	adds	r0, r2, r1
 80061ee:	4283      	cmp	r3, r0
 80061f0:	6011      	str	r1, [r2, #0]
 80061f2:	d1e0      	bne.n	80061b6 <_free_r+0x22>
 80061f4:	6818      	ldr	r0, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	6053      	str	r3, [r2, #4]
 80061fa:	4408      	add	r0, r1
 80061fc:	6010      	str	r0, [r2, #0]
 80061fe:	e7da      	b.n	80061b6 <_free_r+0x22>
 8006200:	d902      	bls.n	8006208 <_free_r+0x74>
 8006202:	230c      	movs	r3, #12
 8006204:	602b      	str	r3, [r5, #0]
 8006206:	e7d6      	b.n	80061b6 <_free_r+0x22>
 8006208:	6820      	ldr	r0, [r4, #0]
 800620a:	1821      	adds	r1, r4, r0
 800620c:	428b      	cmp	r3, r1
 800620e:	bf04      	itt	eq
 8006210:	6819      	ldreq	r1, [r3, #0]
 8006212:	685b      	ldreq	r3, [r3, #4]
 8006214:	6063      	str	r3, [r4, #4]
 8006216:	bf04      	itt	eq
 8006218:	1809      	addeq	r1, r1, r0
 800621a:	6021      	streq	r1, [r4, #0]
 800621c:	6054      	str	r4, [r2, #4]
 800621e:	e7ca      	b.n	80061b6 <_free_r+0x22>
 8006220:	bd38      	pop	{r3, r4, r5, pc}
 8006222:	bf00      	nop
 8006224:	200007dc 	.word	0x200007dc

08006228 <sbrk_aligned>:
 8006228:	b570      	push	{r4, r5, r6, lr}
 800622a:	4e0f      	ldr	r6, [pc, #60]	@ (8006268 <sbrk_aligned+0x40>)
 800622c:	460c      	mov	r4, r1
 800622e:	6831      	ldr	r1, [r6, #0]
 8006230:	4605      	mov	r5, r0
 8006232:	b911      	cbnz	r1, 800623a <sbrk_aligned+0x12>
 8006234:	f000 fcbc 	bl	8006bb0 <_sbrk_r>
 8006238:	6030      	str	r0, [r6, #0]
 800623a:	4621      	mov	r1, r4
 800623c:	4628      	mov	r0, r5
 800623e:	f000 fcb7 	bl	8006bb0 <_sbrk_r>
 8006242:	1c43      	adds	r3, r0, #1
 8006244:	d103      	bne.n	800624e <sbrk_aligned+0x26>
 8006246:	f04f 34ff 	mov.w	r4, #4294967295
 800624a:	4620      	mov	r0, r4
 800624c:	bd70      	pop	{r4, r5, r6, pc}
 800624e:	1cc4      	adds	r4, r0, #3
 8006250:	f024 0403 	bic.w	r4, r4, #3
 8006254:	42a0      	cmp	r0, r4
 8006256:	d0f8      	beq.n	800624a <sbrk_aligned+0x22>
 8006258:	1a21      	subs	r1, r4, r0
 800625a:	4628      	mov	r0, r5
 800625c:	f000 fca8 	bl	8006bb0 <_sbrk_r>
 8006260:	3001      	adds	r0, #1
 8006262:	d1f2      	bne.n	800624a <sbrk_aligned+0x22>
 8006264:	e7ef      	b.n	8006246 <sbrk_aligned+0x1e>
 8006266:	bf00      	nop
 8006268:	200007d8 	.word	0x200007d8

0800626c <_malloc_r>:
 800626c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006270:	1ccd      	adds	r5, r1, #3
 8006272:	f025 0503 	bic.w	r5, r5, #3
 8006276:	3508      	adds	r5, #8
 8006278:	2d0c      	cmp	r5, #12
 800627a:	bf38      	it	cc
 800627c:	250c      	movcc	r5, #12
 800627e:	2d00      	cmp	r5, #0
 8006280:	4606      	mov	r6, r0
 8006282:	db01      	blt.n	8006288 <_malloc_r+0x1c>
 8006284:	42a9      	cmp	r1, r5
 8006286:	d904      	bls.n	8006292 <_malloc_r+0x26>
 8006288:	230c      	movs	r3, #12
 800628a:	6033      	str	r3, [r6, #0]
 800628c:	2000      	movs	r0, #0
 800628e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006292:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006368 <_malloc_r+0xfc>
 8006296:	f000 f869 	bl	800636c <__malloc_lock>
 800629a:	f8d8 3000 	ldr.w	r3, [r8]
 800629e:	461c      	mov	r4, r3
 80062a0:	bb44      	cbnz	r4, 80062f4 <_malloc_r+0x88>
 80062a2:	4629      	mov	r1, r5
 80062a4:	4630      	mov	r0, r6
 80062a6:	f7ff ffbf 	bl	8006228 <sbrk_aligned>
 80062aa:	1c43      	adds	r3, r0, #1
 80062ac:	4604      	mov	r4, r0
 80062ae:	d158      	bne.n	8006362 <_malloc_r+0xf6>
 80062b0:	f8d8 4000 	ldr.w	r4, [r8]
 80062b4:	4627      	mov	r7, r4
 80062b6:	2f00      	cmp	r7, #0
 80062b8:	d143      	bne.n	8006342 <_malloc_r+0xd6>
 80062ba:	2c00      	cmp	r4, #0
 80062bc:	d04b      	beq.n	8006356 <_malloc_r+0xea>
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	4639      	mov	r1, r7
 80062c2:	4630      	mov	r0, r6
 80062c4:	eb04 0903 	add.w	r9, r4, r3
 80062c8:	f000 fc72 	bl	8006bb0 <_sbrk_r>
 80062cc:	4581      	cmp	r9, r0
 80062ce:	d142      	bne.n	8006356 <_malloc_r+0xea>
 80062d0:	6821      	ldr	r1, [r4, #0]
 80062d2:	1a6d      	subs	r5, r5, r1
 80062d4:	4629      	mov	r1, r5
 80062d6:	4630      	mov	r0, r6
 80062d8:	f7ff ffa6 	bl	8006228 <sbrk_aligned>
 80062dc:	3001      	adds	r0, #1
 80062de:	d03a      	beq.n	8006356 <_malloc_r+0xea>
 80062e0:	6823      	ldr	r3, [r4, #0]
 80062e2:	442b      	add	r3, r5
 80062e4:	6023      	str	r3, [r4, #0]
 80062e6:	f8d8 3000 	ldr.w	r3, [r8]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	bb62      	cbnz	r2, 8006348 <_malloc_r+0xdc>
 80062ee:	f8c8 7000 	str.w	r7, [r8]
 80062f2:	e00f      	b.n	8006314 <_malloc_r+0xa8>
 80062f4:	6822      	ldr	r2, [r4, #0]
 80062f6:	1b52      	subs	r2, r2, r5
 80062f8:	d420      	bmi.n	800633c <_malloc_r+0xd0>
 80062fa:	2a0b      	cmp	r2, #11
 80062fc:	d917      	bls.n	800632e <_malloc_r+0xc2>
 80062fe:	1961      	adds	r1, r4, r5
 8006300:	42a3      	cmp	r3, r4
 8006302:	6025      	str	r5, [r4, #0]
 8006304:	bf18      	it	ne
 8006306:	6059      	strne	r1, [r3, #4]
 8006308:	6863      	ldr	r3, [r4, #4]
 800630a:	bf08      	it	eq
 800630c:	f8c8 1000 	streq.w	r1, [r8]
 8006310:	5162      	str	r2, [r4, r5]
 8006312:	604b      	str	r3, [r1, #4]
 8006314:	4630      	mov	r0, r6
 8006316:	f000 f82f 	bl	8006378 <__malloc_unlock>
 800631a:	f104 000b 	add.w	r0, r4, #11
 800631e:	1d23      	adds	r3, r4, #4
 8006320:	f020 0007 	bic.w	r0, r0, #7
 8006324:	1ac2      	subs	r2, r0, r3
 8006326:	bf1c      	itt	ne
 8006328:	1a1b      	subne	r3, r3, r0
 800632a:	50a3      	strne	r3, [r4, r2]
 800632c:	e7af      	b.n	800628e <_malloc_r+0x22>
 800632e:	6862      	ldr	r2, [r4, #4]
 8006330:	42a3      	cmp	r3, r4
 8006332:	bf0c      	ite	eq
 8006334:	f8c8 2000 	streq.w	r2, [r8]
 8006338:	605a      	strne	r2, [r3, #4]
 800633a:	e7eb      	b.n	8006314 <_malloc_r+0xa8>
 800633c:	4623      	mov	r3, r4
 800633e:	6864      	ldr	r4, [r4, #4]
 8006340:	e7ae      	b.n	80062a0 <_malloc_r+0x34>
 8006342:	463c      	mov	r4, r7
 8006344:	687f      	ldr	r7, [r7, #4]
 8006346:	e7b6      	b.n	80062b6 <_malloc_r+0x4a>
 8006348:	461a      	mov	r2, r3
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	42a3      	cmp	r3, r4
 800634e:	d1fb      	bne.n	8006348 <_malloc_r+0xdc>
 8006350:	2300      	movs	r3, #0
 8006352:	6053      	str	r3, [r2, #4]
 8006354:	e7de      	b.n	8006314 <_malloc_r+0xa8>
 8006356:	230c      	movs	r3, #12
 8006358:	6033      	str	r3, [r6, #0]
 800635a:	4630      	mov	r0, r6
 800635c:	f000 f80c 	bl	8006378 <__malloc_unlock>
 8006360:	e794      	b.n	800628c <_malloc_r+0x20>
 8006362:	6005      	str	r5, [r0, #0]
 8006364:	e7d6      	b.n	8006314 <_malloc_r+0xa8>
 8006366:	bf00      	nop
 8006368:	200007dc 	.word	0x200007dc

0800636c <__malloc_lock>:
 800636c:	4801      	ldr	r0, [pc, #4]	@ (8006374 <__malloc_lock+0x8>)
 800636e:	f7ff bf00 	b.w	8006172 <__retarget_lock_acquire_recursive>
 8006372:	bf00      	nop
 8006374:	200007d4 	.word	0x200007d4

08006378 <__malloc_unlock>:
 8006378:	4801      	ldr	r0, [pc, #4]	@ (8006380 <__malloc_unlock+0x8>)
 800637a:	f7ff befb 	b.w	8006174 <__retarget_lock_release_recursive>
 800637e:	bf00      	nop
 8006380:	200007d4 	.word	0x200007d4

08006384 <__ssputs_r>:
 8006384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006388:	688e      	ldr	r6, [r1, #8]
 800638a:	461f      	mov	r7, r3
 800638c:	42be      	cmp	r6, r7
 800638e:	680b      	ldr	r3, [r1, #0]
 8006390:	4682      	mov	sl, r0
 8006392:	460c      	mov	r4, r1
 8006394:	4690      	mov	r8, r2
 8006396:	d82d      	bhi.n	80063f4 <__ssputs_r+0x70>
 8006398:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800639c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80063a0:	d026      	beq.n	80063f0 <__ssputs_r+0x6c>
 80063a2:	6965      	ldr	r5, [r4, #20]
 80063a4:	6909      	ldr	r1, [r1, #16]
 80063a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063aa:	eba3 0901 	sub.w	r9, r3, r1
 80063ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063b2:	1c7b      	adds	r3, r7, #1
 80063b4:	444b      	add	r3, r9
 80063b6:	106d      	asrs	r5, r5, #1
 80063b8:	429d      	cmp	r5, r3
 80063ba:	bf38      	it	cc
 80063bc:	461d      	movcc	r5, r3
 80063be:	0553      	lsls	r3, r2, #21
 80063c0:	d527      	bpl.n	8006412 <__ssputs_r+0x8e>
 80063c2:	4629      	mov	r1, r5
 80063c4:	f7ff ff52 	bl	800626c <_malloc_r>
 80063c8:	4606      	mov	r6, r0
 80063ca:	b360      	cbz	r0, 8006426 <__ssputs_r+0xa2>
 80063cc:	6921      	ldr	r1, [r4, #16]
 80063ce:	464a      	mov	r2, r9
 80063d0:	f7ff fed1 	bl	8006176 <memcpy>
 80063d4:	89a3      	ldrh	r3, [r4, #12]
 80063d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80063da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063de:	81a3      	strh	r3, [r4, #12]
 80063e0:	6126      	str	r6, [r4, #16]
 80063e2:	6165      	str	r5, [r4, #20]
 80063e4:	444e      	add	r6, r9
 80063e6:	eba5 0509 	sub.w	r5, r5, r9
 80063ea:	6026      	str	r6, [r4, #0]
 80063ec:	60a5      	str	r5, [r4, #8]
 80063ee:	463e      	mov	r6, r7
 80063f0:	42be      	cmp	r6, r7
 80063f2:	d900      	bls.n	80063f6 <__ssputs_r+0x72>
 80063f4:	463e      	mov	r6, r7
 80063f6:	6820      	ldr	r0, [r4, #0]
 80063f8:	4632      	mov	r2, r6
 80063fa:	4641      	mov	r1, r8
 80063fc:	f7ff fe26 	bl	800604c <memmove>
 8006400:	68a3      	ldr	r3, [r4, #8]
 8006402:	1b9b      	subs	r3, r3, r6
 8006404:	60a3      	str	r3, [r4, #8]
 8006406:	6823      	ldr	r3, [r4, #0]
 8006408:	4433      	add	r3, r6
 800640a:	6023      	str	r3, [r4, #0]
 800640c:	2000      	movs	r0, #0
 800640e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006412:	462a      	mov	r2, r5
 8006414:	f000 fbdc 	bl	8006bd0 <_realloc_r>
 8006418:	4606      	mov	r6, r0
 800641a:	2800      	cmp	r0, #0
 800641c:	d1e0      	bne.n	80063e0 <__ssputs_r+0x5c>
 800641e:	6921      	ldr	r1, [r4, #16]
 8006420:	4650      	mov	r0, sl
 8006422:	f7ff feb7 	bl	8006194 <_free_r>
 8006426:	230c      	movs	r3, #12
 8006428:	f8ca 3000 	str.w	r3, [sl]
 800642c:	89a3      	ldrh	r3, [r4, #12]
 800642e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006432:	81a3      	strh	r3, [r4, #12]
 8006434:	f04f 30ff 	mov.w	r0, #4294967295
 8006438:	e7e9      	b.n	800640e <__ssputs_r+0x8a>
	...

0800643c <_svfiprintf_r>:
 800643c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006440:	4698      	mov	r8, r3
 8006442:	898b      	ldrh	r3, [r1, #12]
 8006444:	061b      	lsls	r3, r3, #24
 8006446:	b09d      	sub	sp, #116	@ 0x74
 8006448:	4607      	mov	r7, r0
 800644a:	460d      	mov	r5, r1
 800644c:	4614      	mov	r4, r2
 800644e:	d510      	bpl.n	8006472 <_svfiprintf_r+0x36>
 8006450:	690b      	ldr	r3, [r1, #16]
 8006452:	b973      	cbnz	r3, 8006472 <_svfiprintf_r+0x36>
 8006454:	2140      	movs	r1, #64	@ 0x40
 8006456:	f7ff ff09 	bl	800626c <_malloc_r>
 800645a:	6028      	str	r0, [r5, #0]
 800645c:	6128      	str	r0, [r5, #16]
 800645e:	b930      	cbnz	r0, 800646e <_svfiprintf_r+0x32>
 8006460:	230c      	movs	r3, #12
 8006462:	603b      	str	r3, [r7, #0]
 8006464:	f04f 30ff 	mov.w	r0, #4294967295
 8006468:	b01d      	add	sp, #116	@ 0x74
 800646a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800646e:	2340      	movs	r3, #64	@ 0x40
 8006470:	616b      	str	r3, [r5, #20]
 8006472:	2300      	movs	r3, #0
 8006474:	9309      	str	r3, [sp, #36]	@ 0x24
 8006476:	2320      	movs	r3, #32
 8006478:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800647c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006480:	2330      	movs	r3, #48	@ 0x30
 8006482:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006620 <_svfiprintf_r+0x1e4>
 8006486:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800648a:	f04f 0901 	mov.w	r9, #1
 800648e:	4623      	mov	r3, r4
 8006490:	469a      	mov	sl, r3
 8006492:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006496:	b10a      	cbz	r2, 800649c <_svfiprintf_r+0x60>
 8006498:	2a25      	cmp	r2, #37	@ 0x25
 800649a:	d1f9      	bne.n	8006490 <_svfiprintf_r+0x54>
 800649c:	ebba 0b04 	subs.w	fp, sl, r4
 80064a0:	d00b      	beq.n	80064ba <_svfiprintf_r+0x7e>
 80064a2:	465b      	mov	r3, fp
 80064a4:	4622      	mov	r2, r4
 80064a6:	4629      	mov	r1, r5
 80064a8:	4638      	mov	r0, r7
 80064aa:	f7ff ff6b 	bl	8006384 <__ssputs_r>
 80064ae:	3001      	adds	r0, #1
 80064b0:	f000 80a7 	beq.w	8006602 <_svfiprintf_r+0x1c6>
 80064b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064b6:	445a      	add	r2, fp
 80064b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80064ba:	f89a 3000 	ldrb.w	r3, [sl]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f000 809f 	beq.w	8006602 <_svfiprintf_r+0x1c6>
 80064c4:	2300      	movs	r3, #0
 80064c6:	f04f 32ff 	mov.w	r2, #4294967295
 80064ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064ce:	f10a 0a01 	add.w	sl, sl, #1
 80064d2:	9304      	str	r3, [sp, #16]
 80064d4:	9307      	str	r3, [sp, #28]
 80064d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80064da:	931a      	str	r3, [sp, #104]	@ 0x68
 80064dc:	4654      	mov	r4, sl
 80064de:	2205      	movs	r2, #5
 80064e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064e4:	484e      	ldr	r0, [pc, #312]	@ (8006620 <_svfiprintf_r+0x1e4>)
 80064e6:	f7f9 fe7b 	bl	80001e0 <memchr>
 80064ea:	9a04      	ldr	r2, [sp, #16]
 80064ec:	b9d8      	cbnz	r0, 8006526 <_svfiprintf_r+0xea>
 80064ee:	06d0      	lsls	r0, r2, #27
 80064f0:	bf44      	itt	mi
 80064f2:	2320      	movmi	r3, #32
 80064f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064f8:	0711      	lsls	r1, r2, #28
 80064fa:	bf44      	itt	mi
 80064fc:	232b      	movmi	r3, #43	@ 0x2b
 80064fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006502:	f89a 3000 	ldrb.w	r3, [sl]
 8006506:	2b2a      	cmp	r3, #42	@ 0x2a
 8006508:	d015      	beq.n	8006536 <_svfiprintf_r+0xfa>
 800650a:	9a07      	ldr	r2, [sp, #28]
 800650c:	4654      	mov	r4, sl
 800650e:	2000      	movs	r0, #0
 8006510:	f04f 0c0a 	mov.w	ip, #10
 8006514:	4621      	mov	r1, r4
 8006516:	f811 3b01 	ldrb.w	r3, [r1], #1
 800651a:	3b30      	subs	r3, #48	@ 0x30
 800651c:	2b09      	cmp	r3, #9
 800651e:	d94b      	bls.n	80065b8 <_svfiprintf_r+0x17c>
 8006520:	b1b0      	cbz	r0, 8006550 <_svfiprintf_r+0x114>
 8006522:	9207      	str	r2, [sp, #28]
 8006524:	e014      	b.n	8006550 <_svfiprintf_r+0x114>
 8006526:	eba0 0308 	sub.w	r3, r0, r8
 800652a:	fa09 f303 	lsl.w	r3, r9, r3
 800652e:	4313      	orrs	r3, r2
 8006530:	9304      	str	r3, [sp, #16]
 8006532:	46a2      	mov	sl, r4
 8006534:	e7d2      	b.n	80064dc <_svfiprintf_r+0xa0>
 8006536:	9b03      	ldr	r3, [sp, #12]
 8006538:	1d19      	adds	r1, r3, #4
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	9103      	str	r1, [sp, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	bfbb      	ittet	lt
 8006542:	425b      	neglt	r3, r3
 8006544:	f042 0202 	orrlt.w	r2, r2, #2
 8006548:	9307      	strge	r3, [sp, #28]
 800654a:	9307      	strlt	r3, [sp, #28]
 800654c:	bfb8      	it	lt
 800654e:	9204      	strlt	r2, [sp, #16]
 8006550:	7823      	ldrb	r3, [r4, #0]
 8006552:	2b2e      	cmp	r3, #46	@ 0x2e
 8006554:	d10a      	bne.n	800656c <_svfiprintf_r+0x130>
 8006556:	7863      	ldrb	r3, [r4, #1]
 8006558:	2b2a      	cmp	r3, #42	@ 0x2a
 800655a:	d132      	bne.n	80065c2 <_svfiprintf_r+0x186>
 800655c:	9b03      	ldr	r3, [sp, #12]
 800655e:	1d1a      	adds	r2, r3, #4
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	9203      	str	r2, [sp, #12]
 8006564:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006568:	3402      	adds	r4, #2
 800656a:	9305      	str	r3, [sp, #20]
 800656c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006630 <_svfiprintf_r+0x1f4>
 8006570:	7821      	ldrb	r1, [r4, #0]
 8006572:	2203      	movs	r2, #3
 8006574:	4650      	mov	r0, sl
 8006576:	f7f9 fe33 	bl	80001e0 <memchr>
 800657a:	b138      	cbz	r0, 800658c <_svfiprintf_r+0x150>
 800657c:	9b04      	ldr	r3, [sp, #16]
 800657e:	eba0 000a 	sub.w	r0, r0, sl
 8006582:	2240      	movs	r2, #64	@ 0x40
 8006584:	4082      	lsls	r2, r0
 8006586:	4313      	orrs	r3, r2
 8006588:	3401      	adds	r4, #1
 800658a:	9304      	str	r3, [sp, #16]
 800658c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006590:	4824      	ldr	r0, [pc, #144]	@ (8006624 <_svfiprintf_r+0x1e8>)
 8006592:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006596:	2206      	movs	r2, #6
 8006598:	f7f9 fe22 	bl	80001e0 <memchr>
 800659c:	2800      	cmp	r0, #0
 800659e:	d036      	beq.n	800660e <_svfiprintf_r+0x1d2>
 80065a0:	4b21      	ldr	r3, [pc, #132]	@ (8006628 <_svfiprintf_r+0x1ec>)
 80065a2:	bb1b      	cbnz	r3, 80065ec <_svfiprintf_r+0x1b0>
 80065a4:	9b03      	ldr	r3, [sp, #12]
 80065a6:	3307      	adds	r3, #7
 80065a8:	f023 0307 	bic.w	r3, r3, #7
 80065ac:	3308      	adds	r3, #8
 80065ae:	9303      	str	r3, [sp, #12]
 80065b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065b2:	4433      	add	r3, r6
 80065b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80065b6:	e76a      	b.n	800648e <_svfiprintf_r+0x52>
 80065b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80065bc:	460c      	mov	r4, r1
 80065be:	2001      	movs	r0, #1
 80065c0:	e7a8      	b.n	8006514 <_svfiprintf_r+0xd8>
 80065c2:	2300      	movs	r3, #0
 80065c4:	3401      	adds	r4, #1
 80065c6:	9305      	str	r3, [sp, #20]
 80065c8:	4619      	mov	r1, r3
 80065ca:	f04f 0c0a 	mov.w	ip, #10
 80065ce:	4620      	mov	r0, r4
 80065d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065d4:	3a30      	subs	r2, #48	@ 0x30
 80065d6:	2a09      	cmp	r2, #9
 80065d8:	d903      	bls.n	80065e2 <_svfiprintf_r+0x1a6>
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d0c6      	beq.n	800656c <_svfiprintf_r+0x130>
 80065de:	9105      	str	r1, [sp, #20]
 80065e0:	e7c4      	b.n	800656c <_svfiprintf_r+0x130>
 80065e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80065e6:	4604      	mov	r4, r0
 80065e8:	2301      	movs	r3, #1
 80065ea:	e7f0      	b.n	80065ce <_svfiprintf_r+0x192>
 80065ec:	ab03      	add	r3, sp, #12
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	462a      	mov	r2, r5
 80065f2:	4b0e      	ldr	r3, [pc, #56]	@ (800662c <_svfiprintf_r+0x1f0>)
 80065f4:	a904      	add	r1, sp, #16
 80065f6:	4638      	mov	r0, r7
 80065f8:	f3af 8000 	nop.w
 80065fc:	1c42      	adds	r2, r0, #1
 80065fe:	4606      	mov	r6, r0
 8006600:	d1d6      	bne.n	80065b0 <_svfiprintf_r+0x174>
 8006602:	89ab      	ldrh	r3, [r5, #12]
 8006604:	065b      	lsls	r3, r3, #25
 8006606:	f53f af2d 	bmi.w	8006464 <_svfiprintf_r+0x28>
 800660a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800660c:	e72c      	b.n	8006468 <_svfiprintf_r+0x2c>
 800660e:	ab03      	add	r3, sp, #12
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	462a      	mov	r2, r5
 8006614:	4b05      	ldr	r3, [pc, #20]	@ (800662c <_svfiprintf_r+0x1f0>)
 8006616:	a904      	add	r1, sp, #16
 8006618:	4638      	mov	r0, r7
 800661a:	f000 f879 	bl	8006710 <_printf_i>
 800661e:	e7ed      	b.n	80065fc <_svfiprintf_r+0x1c0>
 8006620:	08007398 	.word	0x08007398
 8006624:	080073a2 	.word	0x080073a2
 8006628:	00000000 	.word	0x00000000
 800662c:	08006385 	.word	0x08006385
 8006630:	0800739e 	.word	0x0800739e

08006634 <_printf_common>:
 8006634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006638:	4616      	mov	r6, r2
 800663a:	4698      	mov	r8, r3
 800663c:	688a      	ldr	r2, [r1, #8]
 800663e:	690b      	ldr	r3, [r1, #16]
 8006640:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006644:	4293      	cmp	r3, r2
 8006646:	bfb8      	it	lt
 8006648:	4613      	movlt	r3, r2
 800664a:	6033      	str	r3, [r6, #0]
 800664c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006650:	4607      	mov	r7, r0
 8006652:	460c      	mov	r4, r1
 8006654:	b10a      	cbz	r2, 800665a <_printf_common+0x26>
 8006656:	3301      	adds	r3, #1
 8006658:	6033      	str	r3, [r6, #0]
 800665a:	6823      	ldr	r3, [r4, #0]
 800665c:	0699      	lsls	r1, r3, #26
 800665e:	bf42      	ittt	mi
 8006660:	6833      	ldrmi	r3, [r6, #0]
 8006662:	3302      	addmi	r3, #2
 8006664:	6033      	strmi	r3, [r6, #0]
 8006666:	6825      	ldr	r5, [r4, #0]
 8006668:	f015 0506 	ands.w	r5, r5, #6
 800666c:	d106      	bne.n	800667c <_printf_common+0x48>
 800666e:	f104 0a19 	add.w	sl, r4, #25
 8006672:	68e3      	ldr	r3, [r4, #12]
 8006674:	6832      	ldr	r2, [r6, #0]
 8006676:	1a9b      	subs	r3, r3, r2
 8006678:	42ab      	cmp	r3, r5
 800667a:	dc26      	bgt.n	80066ca <_printf_common+0x96>
 800667c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006680:	6822      	ldr	r2, [r4, #0]
 8006682:	3b00      	subs	r3, #0
 8006684:	bf18      	it	ne
 8006686:	2301      	movne	r3, #1
 8006688:	0692      	lsls	r2, r2, #26
 800668a:	d42b      	bmi.n	80066e4 <_printf_common+0xb0>
 800668c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006690:	4641      	mov	r1, r8
 8006692:	4638      	mov	r0, r7
 8006694:	47c8      	blx	r9
 8006696:	3001      	adds	r0, #1
 8006698:	d01e      	beq.n	80066d8 <_printf_common+0xa4>
 800669a:	6823      	ldr	r3, [r4, #0]
 800669c:	6922      	ldr	r2, [r4, #16]
 800669e:	f003 0306 	and.w	r3, r3, #6
 80066a2:	2b04      	cmp	r3, #4
 80066a4:	bf02      	ittt	eq
 80066a6:	68e5      	ldreq	r5, [r4, #12]
 80066a8:	6833      	ldreq	r3, [r6, #0]
 80066aa:	1aed      	subeq	r5, r5, r3
 80066ac:	68a3      	ldr	r3, [r4, #8]
 80066ae:	bf0c      	ite	eq
 80066b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066b4:	2500      	movne	r5, #0
 80066b6:	4293      	cmp	r3, r2
 80066b8:	bfc4      	itt	gt
 80066ba:	1a9b      	subgt	r3, r3, r2
 80066bc:	18ed      	addgt	r5, r5, r3
 80066be:	2600      	movs	r6, #0
 80066c0:	341a      	adds	r4, #26
 80066c2:	42b5      	cmp	r5, r6
 80066c4:	d11a      	bne.n	80066fc <_printf_common+0xc8>
 80066c6:	2000      	movs	r0, #0
 80066c8:	e008      	b.n	80066dc <_printf_common+0xa8>
 80066ca:	2301      	movs	r3, #1
 80066cc:	4652      	mov	r2, sl
 80066ce:	4641      	mov	r1, r8
 80066d0:	4638      	mov	r0, r7
 80066d2:	47c8      	blx	r9
 80066d4:	3001      	adds	r0, #1
 80066d6:	d103      	bne.n	80066e0 <_printf_common+0xac>
 80066d8:	f04f 30ff 	mov.w	r0, #4294967295
 80066dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066e0:	3501      	adds	r5, #1
 80066e2:	e7c6      	b.n	8006672 <_printf_common+0x3e>
 80066e4:	18e1      	adds	r1, r4, r3
 80066e6:	1c5a      	adds	r2, r3, #1
 80066e8:	2030      	movs	r0, #48	@ 0x30
 80066ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80066ee:	4422      	add	r2, r4
 80066f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80066f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80066f8:	3302      	adds	r3, #2
 80066fa:	e7c7      	b.n	800668c <_printf_common+0x58>
 80066fc:	2301      	movs	r3, #1
 80066fe:	4622      	mov	r2, r4
 8006700:	4641      	mov	r1, r8
 8006702:	4638      	mov	r0, r7
 8006704:	47c8      	blx	r9
 8006706:	3001      	adds	r0, #1
 8006708:	d0e6      	beq.n	80066d8 <_printf_common+0xa4>
 800670a:	3601      	adds	r6, #1
 800670c:	e7d9      	b.n	80066c2 <_printf_common+0x8e>
	...

08006710 <_printf_i>:
 8006710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006714:	7e0f      	ldrb	r7, [r1, #24]
 8006716:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006718:	2f78      	cmp	r7, #120	@ 0x78
 800671a:	4691      	mov	r9, r2
 800671c:	4680      	mov	r8, r0
 800671e:	460c      	mov	r4, r1
 8006720:	469a      	mov	sl, r3
 8006722:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006726:	d807      	bhi.n	8006738 <_printf_i+0x28>
 8006728:	2f62      	cmp	r7, #98	@ 0x62
 800672a:	d80a      	bhi.n	8006742 <_printf_i+0x32>
 800672c:	2f00      	cmp	r7, #0
 800672e:	f000 80d2 	beq.w	80068d6 <_printf_i+0x1c6>
 8006732:	2f58      	cmp	r7, #88	@ 0x58
 8006734:	f000 80b9 	beq.w	80068aa <_printf_i+0x19a>
 8006738:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800673c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006740:	e03a      	b.n	80067b8 <_printf_i+0xa8>
 8006742:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006746:	2b15      	cmp	r3, #21
 8006748:	d8f6      	bhi.n	8006738 <_printf_i+0x28>
 800674a:	a101      	add	r1, pc, #4	@ (adr r1, 8006750 <_printf_i+0x40>)
 800674c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006750:	080067a9 	.word	0x080067a9
 8006754:	080067bd 	.word	0x080067bd
 8006758:	08006739 	.word	0x08006739
 800675c:	08006739 	.word	0x08006739
 8006760:	08006739 	.word	0x08006739
 8006764:	08006739 	.word	0x08006739
 8006768:	080067bd 	.word	0x080067bd
 800676c:	08006739 	.word	0x08006739
 8006770:	08006739 	.word	0x08006739
 8006774:	08006739 	.word	0x08006739
 8006778:	08006739 	.word	0x08006739
 800677c:	080068bd 	.word	0x080068bd
 8006780:	080067e7 	.word	0x080067e7
 8006784:	08006877 	.word	0x08006877
 8006788:	08006739 	.word	0x08006739
 800678c:	08006739 	.word	0x08006739
 8006790:	080068df 	.word	0x080068df
 8006794:	08006739 	.word	0x08006739
 8006798:	080067e7 	.word	0x080067e7
 800679c:	08006739 	.word	0x08006739
 80067a0:	08006739 	.word	0x08006739
 80067a4:	0800687f 	.word	0x0800687f
 80067a8:	6833      	ldr	r3, [r6, #0]
 80067aa:	1d1a      	adds	r2, r3, #4
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	6032      	str	r2, [r6, #0]
 80067b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80067b8:	2301      	movs	r3, #1
 80067ba:	e09d      	b.n	80068f8 <_printf_i+0x1e8>
 80067bc:	6833      	ldr	r3, [r6, #0]
 80067be:	6820      	ldr	r0, [r4, #0]
 80067c0:	1d19      	adds	r1, r3, #4
 80067c2:	6031      	str	r1, [r6, #0]
 80067c4:	0606      	lsls	r6, r0, #24
 80067c6:	d501      	bpl.n	80067cc <_printf_i+0xbc>
 80067c8:	681d      	ldr	r5, [r3, #0]
 80067ca:	e003      	b.n	80067d4 <_printf_i+0xc4>
 80067cc:	0645      	lsls	r5, r0, #25
 80067ce:	d5fb      	bpl.n	80067c8 <_printf_i+0xb8>
 80067d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80067d4:	2d00      	cmp	r5, #0
 80067d6:	da03      	bge.n	80067e0 <_printf_i+0xd0>
 80067d8:	232d      	movs	r3, #45	@ 0x2d
 80067da:	426d      	negs	r5, r5
 80067dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067e0:	4859      	ldr	r0, [pc, #356]	@ (8006948 <_printf_i+0x238>)
 80067e2:	230a      	movs	r3, #10
 80067e4:	e011      	b.n	800680a <_printf_i+0xfa>
 80067e6:	6821      	ldr	r1, [r4, #0]
 80067e8:	6833      	ldr	r3, [r6, #0]
 80067ea:	0608      	lsls	r0, r1, #24
 80067ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80067f0:	d402      	bmi.n	80067f8 <_printf_i+0xe8>
 80067f2:	0649      	lsls	r1, r1, #25
 80067f4:	bf48      	it	mi
 80067f6:	b2ad      	uxthmi	r5, r5
 80067f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80067fa:	4853      	ldr	r0, [pc, #332]	@ (8006948 <_printf_i+0x238>)
 80067fc:	6033      	str	r3, [r6, #0]
 80067fe:	bf14      	ite	ne
 8006800:	230a      	movne	r3, #10
 8006802:	2308      	moveq	r3, #8
 8006804:	2100      	movs	r1, #0
 8006806:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800680a:	6866      	ldr	r6, [r4, #4]
 800680c:	60a6      	str	r6, [r4, #8]
 800680e:	2e00      	cmp	r6, #0
 8006810:	bfa2      	ittt	ge
 8006812:	6821      	ldrge	r1, [r4, #0]
 8006814:	f021 0104 	bicge.w	r1, r1, #4
 8006818:	6021      	strge	r1, [r4, #0]
 800681a:	b90d      	cbnz	r5, 8006820 <_printf_i+0x110>
 800681c:	2e00      	cmp	r6, #0
 800681e:	d04b      	beq.n	80068b8 <_printf_i+0x1a8>
 8006820:	4616      	mov	r6, r2
 8006822:	fbb5 f1f3 	udiv	r1, r5, r3
 8006826:	fb03 5711 	mls	r7, r3, r1, r5
 800682a:	5dc7      	ldrb	r7, [r0, r7]
 800682c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006830:	462f      	mov	r7, r5
 8006832:	42bb      	cmp	r3, r7
 8006834:	460d      	mov	r5, r1
 8006836:	d9f4      	bls.n	8006822 <_printf_i+0x112>
 8006838:	2b08      	cmp	r3, #8
 800683a:	d10b      	bne.n	8006854 <_printf_i+0x144>
 800683c:	6823      	ldr	r3, [r4, #0]
 800683e:	07df      	lsls	r7, r3, #31
 8006840:	d508      	bpl.n	8006854 <_printf_i+0x144>
 8006842:	6923      	ldr	r3, [r4, #16]
 8006844:	6861      	ldr	r1, [r4, #4]
 8006846:	4299      	cmp	r1, r3
 8006848:	bfde      	ittt	le
 800684a:	2330      	movle	r3, #48	@ 0x30
 800684c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006850:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006854:	1b92      	subs	r2, r2, r6
 8006856:	6122      	str	r2, [r4, #16]
 8006858:	f8cd a000 	str.w	sl, [sp]
 800685c:	464b      	mov	r3, r9
 800685e:	aa03      	add	r2, sp, #12
 8006860:	4621      	mov	r1, r4
 8006862:	4640      	mov	r0, r8
 8006864:	f7ff fee6 	bl	8006634 <_printf_common>
 8006868:	3001      	adds	r0, #1
 800686a:	d14a      	bne.n	8006902 <_printf_i+0x1f2>
 800686c:	f04f 30ff 	mov.w	r0, #4294967295
 8006870:	b004      	add	sp, #16
 8006872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006876:	6823      	ldr	r3, [r4, #0]
 8006878:	f043 0320 	orr.w	r3, r3, #32
 800687c:	6023      	str	r3, [r4, #0]
 800687e:	4833      	ldr	r0, [pc, #204]	@ (800694c <_printf_i+0x23c>)
 8006880:	2778      	movs	r7, #120	@ 0x78
 8006882:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	6831      	ldr	r1, [r6, #0]
 800688a:	061f      	lsls	r7, r3, #24
 800688c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006890:	d402      	bmi.n	8006898 <_printf_i+0x188>
 8006892:	065f      	lsls	r7, r3, #25
 8006894:	bf48      	it	mi
 8006896:	b2ad      	uxthmi	r5, r5
 8006898:	6031      	str	r1, [r6, #0]
 800689a:	07d9      	lsls	r1, r3, #31
 800689c:	bf44      	itt	mi
 800689e:	f043 0320 	orrmi.w	r3, r3, #32
 80068a2:	6023      	strmi	r3, [r4, #0]
 80068a4:	b11d      	cbz	r5, 80068ae <_printf_i+0x19e>
 80068a6:	2310      	movs	r3, #16
 80068a8:	e7ac      	b.n	8006804 <_printf_i+0xf4>
 80068aa:	4827      	ldr	r0, [pc, #156]	@ (8006948 <_printf_i+0x238>)
 80068ac:	e7e9      	b.n	8006882 <_printf_i+0x172>
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	f023 0320 	bic.w	r3, r3, #32
 80068b4:	6023      	str	r3, [r4, #0]
 80068b6:	e7f6      	b.n	80068a6 <_printf_i+0x196>
 80068b8:	4616      	mov	r6, r2
 80068ba:	e7bd      	b.n	8006838 <_printf_i+0x128>
 80068bc:	6833      	ldr	r3, [r6, #0]
 80068be:	6825      	ldr	r5, [r4, #0]
 80068c0:	6961      	ldr	r1, [r4, #20]
 80068c2:	1d18      	adds	r0, r3, #4
 80068c4:	6030      	str	r0, [r6, #0]
 80068c6:	062e      	lsls	r6, r5, #24
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	d501      	bpl.n	80068d0 <_printf_i+0x1c0>
 80068cc:	6019      	str	r1, [r3, #0]
 80068ce:	e002      	b.n	80068d6 <_printf_i+0x1c6>
 80068d0:	0668      	lsls	r0, r5, #25
 80068d2:	d5fb      	bpl.n	80068cc <_printf_i+0x1bc>
 80068d4:	8019      	strh	r1, [r3, #0]
 80068d6:	2300      	movs	r3, #0
 80068d8:	6123      	str	r3, [r4, #16]
 80068da:	4616      	mov	r6, r2
 80068dc:	e7bc      	b.n	8006858 <_printf_i+0x148>
 80068de:	6833      	ldr	r3, [r6, #0]
 80068e0:	1d1a      	adds	r2, r3, #4
 80068e2:	6032      	str	r2, [r6, #0]
 80068e4:	681e      	ldr	r6, [r3, #0]
 80068e6:	6862      	ldr	r2, [r4, #4]
 80068e8:	2100      	movs	r1, #0
 80068ea:	4630      	mov	r0, r6
 80068ec:	f7f9 fc78 	bl	80001e0 <memchr>
 80068f0:	b108      	cbz	r0, 80068f6 <_printf_i+0x1e6>
 80068f2:	1b80      	subs	r0, r0, r6
 80068f4:	6060      	str	r0, [r4, #4]
 80068f6:	6863      	ldr	r3, [r4, #4]
 80068f8:	6123      	str	r3, [r4, #16]
 80068fa:	2300      	movs	r3, #0
 80068fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006900:	e7aa      	b.n	8006858 <_printf_i+0x148>
 8006902:	6923      	ldr	r3, [r4, #16]
 8006904:	4632      	mov	r2, r6
 8006906:	4649      	mov	r1, r9
 8006908:	4640      	mov	r0, r8
 800690a:	47d0      	blx	sl
 800690c:	3001      	adds	r0, #1
 800690e:	d0ad      	beq.n	800686c <_printf_i+0x15c>
 8006910:	6823      	ldr	r3, [r4, #0]
 8006912:	079b      	lsls	r3, r3, #30
 8006914:	d413      	bmi.n	800693e <_printf_i+0x22e>
 8006916:	68e0      	ldr	r0, [r4, #12]
 8006918:	9b03      	ldr	r3, [sp, #12]
 800691a:	4298      	cmp	r0, r3
 800691c:	bfb8      	it	lt
 800691e:	4618      	movlt	r0, r3
 8006920:	e7a6      	b.n	8006870 <_printf_i+0x160>
 8006922:	2301      	movs	r3, #1
 8006924:	4632      	mov	r2, r6
 8006926:	4649      	mov	r1, r9
 8006928:	4640      	mov	r0, r8
 800692a:	47d0      	blx	sl
 800692c:	3001      	adds	r0, #1
 800692e:	d09d      	beq.n	800686c <_printf_i+0x15c>
 8006930:	3501      	adds	r5, #1
 8006932:	68e3      	ldr	r3, [r4, #12]
 8006934:	9903      	ldr	r1, [sp, #12]
 8006936:	1a5b      	subs	r3, r3, r1
 8006938:	42ab      	cmp	r3, r5
 800693a:	dcf2      	bgt.n	8006922 <_printf_i+0x212>
 800693c:	e7eb      	b.n	8006916 <_printf_i+0x206>
 800693e:	2500      	movs	r5, #0
 8006940:	f104 0619 	add.w	r6, r4, #25
 8006944:	e7f5      	b.n	8006932 <_printf_i+0x222>
 8006946:	bf00      	nop
 8006948:	080073a9 	.word	0x080073a9
 800694c:	080073ba 	.word	0x080073ba

08006950 <__sflush_r>:
 8006950:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006958:	0716      	lsls	r6, r2, #28
 800695a:	4605      	mov	r5, r0
 800695c:	460c      	mov	r4, r1
 800695e:	d454      	bmi.n	8006a0a <__sflush_r+0xba>
 8006960:	684b      	ldr	r3, [r1, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	dc02      	bgt.n	800696c <__sflush_r+0x1c>
 8006966:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006968:	2b00      	cmp	r3, #0
 800696a:	dd48      	ble.n	80069fe <__sflush_r+0xae>
 800696c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800696e:	2e00      	cmp	r6, #0
 8006970:	d045      	beq.n	80069fe <__sflush_r+0xae>
 8006972:	2300      	movs	r3, #0
 8006974:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006978:	682f      	ldr	r7, [r5, #0]
 800697a:	6a21      	ldr	r1, [r4, #32]
 800697c:	602b      	str	r3, [r5, #0]
 800697e:	d030      	beq.n	80069e2 <__sflush_r+0x92>
 8006980:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006982:	89a3      	ldrh	r3, [r4, #12]
 8006984:	0759      	lsls	r1, r3, #29
 8006986:	d505      	bpl.n	8006994 <__sflush_r+0x44>
 8006988:	6863      	ldr	r3, [r4, #4]
 800698a:	1ad2      	subs	r2, r2, r3
 800698c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800698e:	b10b      	cbz	r3, 8006994 <__sflush_r+0x44>
 8006990:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006992:	1ad2      	subs	r2, r2, r3
 8006994:	2300      	movs	r3, #0
 8006996:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006998:	6a21      	ldr	r1, [r4, #32]
 800699a:	4628      	mov	r0, r5
 800699c:	47b0      	blx	r6
 800699e:	1c43      	adds	r3, r0, #1
 80069a0:	89a3      	ldrh	r3, [r4, #12]
 80069a2:	d106      	bne.n	80069b2 <__sflush_r+0x62>
 80069a4:	6829      	ldr	r1, [r5, #0]
 80069a6:	291d      	cmp	r1, #29
 80069a8:	d82b      	bhi.n	8006a02 <__sflush_r+0xb2>
 80069aa:	4a2a      	ldr	r2, [pc, #168]	@ (8006a54 <__sflush_r+0x104>)
 80069ac:	410a      	asrs	r2, r1
 80069ae:	07d6      	lsls	r6, r2, #31
 80069b0:	d427      	bmi.n	8006a02 <__sflush_r+0xb2>
 80069b2:	2200      	movs	r2, #0
 80069b4:	6062      	str	r2, [r4, #4]
 80069b6:	04d9      	lsls	r1, r3, #19
 80069b8:	6922      	ldr	r2, [r4, #16]
 80069ba:	6022      	str	r2, [r4, #0]
 80069bc:	d504      	bpl.n	80069c8 <__sflush_r+0x78>
 80069be:	1c42      	adds	r2, r0, #1
 80069c0:	d101      	bne.n	80069c6 <__sflush_r+0x76>
 80069c2:	682b      	ldr	r3, [r5, #0]
 80069c4:	b903      	cbnz	r3, 80069c8 <__sflush_r+0x78>
 80069c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80069c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069ca:	602f      	str	r7, [r5, #0]
 80069cc:	b1b9      	cbz	r1, 80069fe <__sflush_r+0xae>
 80069ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069d2:	4299      	cmp	r1, r3
 80069d4:	d002      	beq.n	80069dc <__sflush_r+0x8c>
 80069d6:	4628      	mov	r0, r5
 80069d8:	f7ff fbdc 	bl	8006194 <_free_r>
 80069dc:	2300      	movs	r3, #0
 80069de:	6363      	str	r3, [r4, #52]	@ 0x34
 80069e0:	e00d      	b.n	80069fe <__sflush_r+0xae>
 80069e2:	2301      	movs	r3, #1
 80069e4:	4628      	mov	r0, r5
 80069e6:	47b0      	blx	r6
 80069e8:	4602      	mov	r2, r0
 80069ea:	1c50      	adds	r0, r2, #1
 80069ec:	d1c9      	bne.n	8006982 <__sflush_r+0x32>
 80069ee:	682b      	ldr	r3, [r5, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d0c6      	beq.n	8006982 <__sflush_r+0x32>
 80069f4:	2b1d      	cmp	r3, #29
 80069f6:	d001      	beq.n	80069fc <__sflush_r+0xac>
 80069f8:	2b16      	cmp	r3, #22
 80069fa:	d11e      	bne.n	8006a3a <__sflush_r+0xea>
 80069fc:	602f      	str	r7, [r5, #0]
 80069fe:	2000      	movs	r0, #0
 8006a00:	e022      	b.n	8006a48 <__sflush_r+0xf8>
 8006a02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a06:	b21b      	sxth	r3, r3
 8006a08:	e01b      	b.n	8006a42 <__sflush_r+0xf2>
 8006a0a:	690f      	ldr	r7, [r1, #16]
 8006a0c:	2f00      	cmp	r7, #0
 8006a0e:	d0f6      	beq.n	80069fe <__sflush_r+0xae>
 8006a10:	0793      	lsls	r3, r2, #30
 8006a12:	680e      	ldr	r6, [r1, #0]
 8006a14:	bf08      	it	eq
 8006a16:	694b      	ldreq	r3, [r1, #20]
 8006a18:	600f      	str	r7, [r1, #0]
 8006a1a:	bf18      	it	ne
 8006a1c:	2300      	movne	r3, #0
 8006a1e:	eba6 0807 	sub.w	r8, r6, r7
 8006a22:	608b      	str	r3, [r1, #8]
 8006a24:	f1b8 0f00 	cmp.w	r8, #0
 8006a28:	dde9      	ble.n	80069fe <__sflush_r+0xae>
 8006a2a:	6a21      	ldr	r1, [r4, #32]
 8006a2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006a2e:	4643      	mov	r3, r8
 8006a30:	463a      	mov	r2, r7
 8006a32:	4628      	mov	r0, r5
 8006a34:	47b0      	blx	r6
 8006a36:	2800      	cmp	r0, #0
 8006a38:	dc08      	bgt.n	8006a4c <__sflush_r+0xfc>
 8006a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a42:	81a3      	strh	r3, [r4, #12]
 8006a44:	f04f 30ff 	mov.w	r0, #4294967295
 8006a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a4c:	4407      	add	r7, r0
 8006a4e:	eba8 0800 	sub.w	r8, r8, r0
 8006a52:	e7e7      	b.n	8006a24 <__sflush_r+0xd4>
 8006a54:	dfbffffe 	.word	0xdfbffffe

08006a58 <_fflush_r>:
 8006a58:	b538      	push	{r3, r4, r5, lr}
 8006a5a:	690b      	ldr	r3, [r1, #16]
 8006a5c:	4605      	mov	r5, r0
 8006a5e:	460c      	mov	r4, r1
 8006a60:	b913      	cbnz	r3, 8006a68 <_fflush_r+0x10>
 8006a62:	2500      	movs	r5, #0
 8006a64:	4628      	mov	r0, r5
 8006a66:	bd38      	pop	{r3, r4, r5, pc}
 8006a68:	b118      	cbz	r0, 8006a72 <_fflush_r+0x1a>
 8006a6a:	6a03      	ldr	r3, [r0, #32]
 8006a6c:	b90b      	cbnz	r3, 8006a72 <_fflush_r+0x1a>
 8006a6e:	f7ff f961 	bl	8005d34 <__sinit>
 8006a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d0f3      	beq.n	8006a62 <_fflush_r+0xa>
 8006a7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a7c:	07d0      	lsls	r0, r2, #31
 8006a7e:	d404      	bmi.n	8006a8a <_fflush_r+0x32>
 8006a80:	0599      	lsls	r1, r3, #22
 8006a82:	d402      	bmi.n	8006a8a <_fflush_r+0x32>
 8006a84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a86:	f7ff fb74 	bl	8006172 <__retarget_lock_acquire_recursive>
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	4621      	mov	r1, r4
 8006a8e:	f7ff ff5f 	bl	8006950 <__sflush_r>
 8006a92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a94:	07da      	lsls	r2, r3, #31
 8006a96:	4605      	mov	r5, r0
 8006a98:	d4e4      	bmi.n	8006a64 <_fflush_r+0xc>
 8006a9a:	89a3      	ldrh	r3, [r4, #12]
 8006a9c:	059b      	lsls	r3, r3, #22
 8006a9e:	d4e1      	bmi.n	8006a64 <_fflush_r+0xc>
 8006aa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006aa2:	f7ff fb67 	bl	8006174 <__retarget_lock_release_recursive>
 8006aa6:	e7dd      	b.n	8006a64 <_fflush_r+0xc>

08006aa8 <__swhatbuf_r>:
 8006aa8:	b570      	push	{r4, r5, r6, lr}
 8006aaa:	460c      	mov	r4, r1
 8006aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab0:	2900      	cmp	r1, #0
 8006ab2:	b096      	sub	sp, #88	@ 0x58
 8006ab4:	4615      	mov	r5, r2
 8006ab6:	461e      	mov	r6, r3
 8006ab8:	da0d      	bge.n	8006ad6 <__swhatbuf_r+0x2e>
 8006aba:	89a3      	ldrh	r3, [r4, #12]
 8006abc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006ac0:	f04f 0100 	mov.w	r1, #0
 8006ac4:	bf14      	ite	ne
 8006ac6:	2340      	movne	r3, #64	@ 0x40
 8006ac8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006acc:	2000      	movs	r0, #0
 8006ace:	6031      	str	r1, [r6, #0]
 8006ad0:	602b      	str	r3, [r5, #0]
 8006ad2:	b016      	add	sp, #88	@ 0x58
 8006ad4:	bd70      	pop	{r4, r5, r6, pc}
 8006ad6:	466a      	mov	r2, sp
 8006ad8:	f000 f848 	bl	8006b6c <_fstat_r>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	dbec      	blt.n	8006aba <__swhatbuf_r+0x12>
 8006ae0:	9901      	ldr	r1, [sp, #4]
 8006ae2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006ae6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006aea:	4259      	negs	r1, r3
 8006aec:	4159      	adcs	r1, r3
 8006aee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006af2:	e7eb      	b.n	8006acc <__swhatbuf_r+0x24>

08006af4 <__smakebuf_r>:
 8006af4:	898b      	ldrh	r3, [r1, #12]
 8006af6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006af8:	079d      	lsls	r5, r3, #30
 8006afa:	4606      	mov	r6, r0
 8006afc:	460c      	mov	r4, r1
 8006afe:	d507      	bpl.n	8006b10 <__smakebuf_r+0x1c>
 8006b00:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006b04:	6023      	str	r3, [r4, #0]
 8006b06:	6123      	str	r3, [r4, #16]
 8006b08:	2301      	movs	r3, #1
 8006b0a:	6163      	str	r3, [r4, #20]
 8006b0c:	b003      	add	sp, #12
 8006b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b10:	ab01      	add	r3, sp, #4
 8006b12:	466a      	mov	r2, sp
 8006b14:	f7ff ffc8 	bl	8006aa8 <__swhatbuf_r>
 8006b18:	9f00      	ldr	r7, [sp, #0]
 8006b1a:	4605      	mov	r5, r0
 8006b1c:	4639      	mov	r1, r7
 8006b1e:	4630      	mov	r0, r6
 8006b20:	f7ff fba4 	bl	800626c <_malloc_r>
 8006b24:	b948      	cbnz	r0, 8006b3a <__smakebuf_r+0x46>
 8006b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b2a:	059a      	lsls	r2, r3, #22
 8006b2c:	d4ee      	bmi.n	8006b0c <__smakebuf_r+0x18>
 8006b2e:	f023 0303 	bic.w	r3, r3, #3
 8006b32:	f043 0302 	orr.w	r3, r3, #2
 8006b36:	81a3      	strh	r3, [r4, #12]
 8006b38:	e7e2      	b.n	8006b00 <__smakebuf_r+0xc>
 8006b3a:	89a3      	ldrh	r3, [r4, #12]
 8006b3c:	6020      	str	r0, [r4, #0]
 8006b3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b42:	81a3      	strh	r3, [r4, #12]
 8006b44:	9b01      	ldr	r3, [sp, #4]
 8006b46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006b4a:	b15b      	cbz	r3, 8006b64 <__smakebuf_r+0x70>
 8006b4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b50:	4630      	mov	r0, r6
 8006b52:	f000 f81d 	bl	8006b90 <_isatty_r>
 8006b56:	b128      	cbz	r0, 8006b64 <__smakebuf_r+0x70>
 8006b58:	89a3      	ldrh	r3, [r4, #12]
 8006b5a:	f023 0303 	bic.w	r3, r3, #3
 8006b5e:	f043 0301 	orr.w	r3, r3, #1
 8006b62:	81a3      	strh	r3, [r4, #12]
 8006b64:	89a3      	ldrh	r3, [r4, #12]
 8006b66:	431d      	orrs	r5, r3
 8006b68:	81a5      	strh	r5, [r4, #12]
 8006b6a:	e7cf      	b.n	8006b0c <__smakebuf_r+0x18>

08006b6c <_fstat_r>:
 8006b6c:	b538      	push	{r3, r4, r5, lr}
 8006b6e:	4d07      	ldr	r5, [pc, #28]	@ (8006b8c <_fstat_r+0x20>)
 8006b70:	2300      	movs	r3, #0
 8006b72:	4604      	mov	r4, r0
 8006b74:	4608      	mov	r0, r1
 8006b76:	4611      	mov	r1, r2
 8006b78:	602b      	str	r3, [r5, #0]
 8006b7a:	f7fa fb88 	bl	800128e <_fstat>
 8006b7e:	1c43      	adds	r3, r0, #1
 8006b80:	d102      	bne.n	8006b88 <_fstat_r+0x1c>
 8006b82:	682b      	ldr	r3, [r5, #0]
 8006b84:	b103      	cbz	r3, 8006b88 <_fstat_r+0x1c>
 8006b86:	6023      	str	r3, [r4, #0]
 8006b88:	bd38      	pop	{r3, r4, r5, pc}
 8006b8a:	bf00      	nop
 8006b8c:	200007d0 	.word	0x200007d0

08006b90 <_isatty_r>:
 8006b90:	b538      	push	{r3, r4, r5, lr}
 8006b92:	4d06      	ldr	r5, [pc, #24]	@ (8006bac <_isatty_r+0x1c>)
 8006b94:	2300      	movs	r3, #0
 8006b96:	4604      	mov	r4, r0
 8006b98:	4608      	mov	r0, r1
 8006b9a:	602b      	str	r3, [r5, #0]
 8006b9c:	f7fa fb87 	bl	80012ae <_isatty>
 8006ba0:	1c43      	adds	r3, r0, #1
 8006ba2:	d102      	bne.n	8006baa <_isatty_r+0x1a>
 8006ba4:	682b      	ldr	r3, [r5, #0]
 8006ba6:	b103      	cbz	r3, 8006baa <_isatty_r+0x1a>
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	bd38      	pop	{r3, r4, r5, pc}
 8006bac:	200007d0 	.word	0x200007d0

08006bb0 <_sbrk_r>:
 8006bb0:	b538      	push	{r3, r4, r5, lr}
 8006bb2:	4d06      	ldr	r5, [pc, #24]	@ (8006bcc <_sbrk_r+0x1c>)
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	4608      	mov	r0, r1
 8006bba:	602b      	str	r3, [r5, #0]
 8006bbc:	f7fa fb90 	bl	80012e0 <_sbrk>
 8006bc0:	1c43      	adds	r3, r0, #1
 8006bc2:	d102      	bne.n	8006bca <_sbrk_r+0x1a>
 8006bc4:	682b      	ldr	r3, [r5, #0]
 8006bc6:	b103      	cbz	r3, 8006bca <_sbrk_r+0x1a>
 8006bc8:	6023      	str	r3, [r4, #0]
 8006bca:	bd38      	pop	{r3, r4, r5, pc}
 8006bcc:	200007d0 	.word	0x200007d0

08006bd0 <_realloc_r>:
 8006bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd4:	4680      	mov	r8, r0
 8006bd6:	4615      	mov	r5, r2
 8006bd8:	460c      	mov	r4, r1
 8006bda:	b921      	cbnz	r1, 8006be6 <_realloc_r+0x16>
 8006bdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006be0:	4611      	mov	r1, r2
 8006be2:	f7ff bb43 	b.w	800626c <_malloc_r>
 8006be6:	b92a      	cbnz	r2, 8006bf4 <_realloc_r+0x24>
 8006be8:	f7ff fad4 	bl	8006194 <_free_r>
 8006bec:	2400      	movs	r4, #0
 8006bee:	4620      	mov	r0, r4
 8006bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bf4:	f000 f81a 	bl	8006c2c <_malloc_usable_size_r>
 8006bf8:	4285      	cmp	r5, r0
 8006bfa:	4606      	mov	r6, r0
 8006bfc:	d802      	bhi.n	8006c04 <_realloc_r+0x34>
 8006bfe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006c02:	d8f4      	bhi.n	8006bee <_realloc_r+0x1e>
 8006c04:	4629      	mov	r1, r5
 8006c06:	4640      	mov	r0, r8
 8006c08:	f7ff fb30 	bl	800626c <_malloc_r>
 8006c0c:	4607      	mov	r7, r0
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	d0ec      	beq.n	8006bec <_realloc_r+0x1c>
 8006c12:	42b5      	cmp	r5, r6
 8006c14:	462a      	mov	r2, r5
 8006c16:	4621      	mov	r1, r4
 8006c18:	bf28      	it	cs
 8006c1a:	4632      	movcs	r2, r6
 8006c1c:	f7ff faab 	bl	8006176 <memcpy>
 8006c20:	4621      	mov	r1, r4
 8006c22:	4640      	mov	r0, r8
 8006c24:	f7ff fab6 	bl	8006194 <_free_r>
 8006c28:	463c      	mov	r4, r7
 8006c2a:	e7e0      	b.n	8006bee <_realloc_r+0x1e>

08006c2c <_malloc_usable_size_r>:
 8006c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c30:	1f18      	subs	r0, r3, #4
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	bfbc      	itt	lt
 8006c36:	580b      	ldrlt	r3, [r1, r0]
 8006c38:	18c0      	addlt	r0, r0, r3
 8006c3a:	4770      	bx	lr

08006c3c <_init>:
 8006c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3e:	bf00      	nop
 8006c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c42:	bc08      	pop	{r3}
 8006c44:	469e      	mov	lr, r3
 8006c46:	4770      	bx	lr

08006c48 <_fini>:
 8006c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4a:	bf00      	nop
 8006c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c4e:	bc08      	pop	{r3}
 8006c50:	469e      	mov	lr, r3
 8006c52:	4770      	bx	lr
